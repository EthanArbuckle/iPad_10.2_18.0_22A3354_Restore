uint64_t sub_1002050FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RDFirstUnlockManager()
{
  return objc_opt_self(_TtC7remindd20RDFirstUnlockManager);
}

uint64_t sub_100205148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0;
  v2 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RDTransactionRegistrar();
  v6 = (_QWORD *)swift_allocObject(v5, 56, 7);
  v6[4] = 0;
  v6[5] = 0;
  v6[2] = 0xD000000000000058;
  v6[3] = 0x80000001006FCDE0;
  v13 = _swiftEmptyArrayStorage;
  v7 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v8 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v9 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v13, v8, v9, v2, v7);
  v10 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v6[6] = UnfairLock.init(options:)(v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t sub_100205298(uint64_t a1, char *a2, void (*a3)(uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  char v11;

  v11 = *a2;
  a3(a1, &v11);
  v6 = *(_QWORD *)(a5 + 48);
  v9[2] = a5;
  v9[3] = 1;
  v10 = v6;
  v7 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_100188F4C, v9, v7, &type metadata for () + 1, &protocol witness table for UnfairLock);
  return swift_release(v10);
}

uint64_t sub_100205328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 aBlock;
  uint64_t (*v86)(uint64_t);
  void *v87;
  uint64_t (*v88)();
  uint64_t v89;
  _QWORD v90[6];
  uint64_t v91[3];
  uint64_t v92;

  v83 = a3;
  v84 = a1;
  v12 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v12);
  v78 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10001A630(&qword_1008408C8);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v15 = (char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_1008408D0);
  v81 = *(_QWORD *)(v16 - 8);
  v82 = v16;
  __chkstk_darwin(v16);
  v80 = (char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v22 = (char *)v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (_QWORD *)swift_allocObject(&unk_1007E9F78, 48, 7);
  v72[0] = a4;
  v23[2] = a4;
  v23[3] = a5;
  v23[4] = a6;
  v23[5] = a7;
  type metadata accessor for RDKeybagStateProviderFactory();
  swift_unknownObjectRetain(a7);
  v72[1] = a5;
  swift_retain();
  swift_retain();
  v79 = a2;
  sub_1002A2274(a2, v91);
  v24 = *(id *)(*sub_10000A388(v91, v92) + 56);
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100205CAC);

  if (aBlock == 1)
  {
    if (qword_100836FC0 != -1)
      swift_once(&qword_100836FC0, sub_100204C98);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001AAA8(v25, (uint64_t)qword_1008407D0);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDFirstUnlockManager: Device is in after first unlock state in the 1st check. Executing unlockHandler.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = swift_allocObject(&unk_1007EA018, 32, 7);
    *(_QWORD *)(v30 + 16) = sub_100205CA0;
    *(_QWORD *)(v30 + 24) = v23;
    v88 = sub_100205E60;
    v89 = v30;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v86 = sub_1000094C8;
    v87 = &unk_1007EA030;
    v31 = _Block_copy(&aBlock);
    v32 = swift_retain();
    static DispatchQoS.unspecified.getter(v32);
    v90[0] = _swiftEmptyArrayStorage;
    v33 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_10001A630((uint64_t *)&unk_100838000);
    v35 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v90, v34, v35, v18, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v20, v31);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v22, v74);
    swift_release(v89);
LABEL_19:
    v69 = 2;
    goto LABEL_20;
  }
  if (qword_100836FC0 != -1)
    swift_once(&qword_100836FC0, sub_100204C98);
  v36 = type metadata accessor for Logger(0);
  v75 = sub_10001AAA8(v36, (uint64_t)qword_1008407D0);
  v37 = Logger.logObject.getter(v75);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = v83;
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDFirstUnlockManager: Device is in before first unlock state in the 1st check. Registering with RDKeybagStateProvider.hasUnlockedSinceBootPublisher.", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  v42 = *(_QWORD *)(v40 + 16);
  *(_QWORD *)&aBlock = *(_QWORD *)(*sub_10000A388(v91, v92) + 88);
  v43 = sub_10001A630(&qword_1008408D8);
  v44 = sub_1000A5F84(&qword_1008408E0, &qword_1008408D8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v45 = Publisher.eraseToAnyPublisher()(v43, v44);
  *(_QWORD *)&aBlock = v45;
  v46 = swift_allocObject(&unk_1007E9FA0, 32, 7);
  *(_QWORD *)(v46 + 16) = v42;
  *(_QWORD *)(v46 + 24) = 1;
  swift_retain();
  v47 = sub_10001A630(&qword_1008408E8);
  v48 = sub_1000A5F84((unint64_t *)&unk_1008408F0, &qword_1008408E8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100188E74, v46, 0, 0, 0, 0, 0, 0, v47, v48);
  swift_release(v45);
  swift_release(v46);
  *(_QWORD *)&aBlock = v84;
  v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v50 = (uint64_t)v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v78, 1, 1, v49);
  v51 = sub_1000D30A4();
  v52 = sub_1000A5F84((unint64_t *)&unk_100840900, &qword_1008408C8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v53 = sub_10009FC50((unint64_t *)&qword_1008380B0, (uint64_t (*)(uint64_t))sub_1000D30A4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v54 = v80;
  v55 = v77;
  Publisher.receive<A>(on:options:)(&aBlock, v50, v77, v51, v52, v53);
  sub_100205CE8(v50);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v15, v55);
  sub_100018618((uint64_t)v91, (uint64_t)&aBlock);
  sub_100205D28(v79, (uint64_t)v90);
  v56 = swift_allocObject(&unk_1007E9FC8, 112, 7);
  sub_10001BCA8(&aBlock, v56 + 16);
  sub_100205DAC((uint64_t)v90, v56 + 56);
  *(_QWORD *)(v56 + 96) = sub_100205CA0;
  *(_QWORD *)(v56 + 104) = v23;
  v57 = (_QWORD *)swift_allocObject(&unk_1007E9FF0, 40, 7);
  v57[2] = sub_100205DF4;
  v57[3] = v56;
  v57[4] = v42;
  v58 = type metadata accessor for RDFirstUnlockManager();
  sub_1000A5F84(&qword_100840918, &qword_1008408D0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  swift_retain();
  swift_retain();
  v59 = v82;
  v60 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v40, sub_100205E30, v57, 0, 0, v82, v58);
  swift_release(v56);
  swift_release(v57);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v54, v59);
  v61 = *(_QWORD *)(v40 + 24);
  *(_QWORD *)(v40 + 24) = v60;
  swift_release(v61);
  sub_10000A388(v91, v92);
  sub_1002A3470();
  v62 = *(id *)(*sub_10000A388(v91, v92) + 56);
  OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_100205CAC);

  if (aBlock == 1)
  {
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "RDFirstUnlockManager: Device has transitioned to after first unlock state in the 2nd check. Executing unlockHandler and ignoring notifications.", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v67 = *(_QWORD *)(v40 + 24);
    if (v67)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release(v67);
      v68 = *(_QWORD *)(v40 + 24);
    }
    else
    {
      v68 = 0;
    }
    v70 = (void (*)(uint64_t))v72[0];
    *(_QWORD *)(v40 + 24) = 0;
    swift_release(v68);
    sub_1000A3DA0(1, v70);
    goto LABEL_19;
  }
  v69 = 0;
LABEL_20:
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v91);
  swift_release(v23);
  return v69;
}

uint64_t sub_100205C6C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100205CA0(uint64_t a1)
{
  _QWORD *v1;

  return sub_10009C194(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100205CAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1002A26F0(v1, a1);
}

uint64_t sub_100205CC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100205CE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10083A970);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100205D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100840910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100205D70()
{
  _QWORD *v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 2);
  if (v0[10])
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 7);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100205DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100840910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100205DF4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  sub_100204D28(a1, a2, (_QWORD *)(v2 + 16), v2 + 56, *(void (**)(uint64_t))(v2 + 96));
}

uint64_t sub_100205E04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100205E30(uint64_t a1, char *a2)
{
  uint64_t v2;

  return sub_100205298(a1, a2, *(void (**)(uint64_t, char *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100205E3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100205E60()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(2);
}

uint64_t sub_100205E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100840920);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840920);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100205F14(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  void *v17;
  uint64_t MetatypeMetadata;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  Class v46;
  double v47;
  Class v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  double v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t (*v66)(uint64_t, uint64_t);
  NSObject *v67;
  void *v68;
  __n128 v69;
  void (*v70)(char *, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  Class isa;
  NSObject *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  char v86[104];
  __int128 v87;
  __int128 v88;
  id v89;

  v82 = *v1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v78 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v73 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - v10;
  if (qword_100836FC8 != -1)
    swift_once(&qword_100836FC8, sub_100205E84);
  v12 = type metadata accessor for Logger(0);
  v79 = sub_10001AAA8(v12, (uint64_t)qword_100840920);
  v13 = Logger.logObject.getter(v79);
  v14 = static os_log_type_t.default.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v80 = v8;
  v83 = (uint64_t)a1;
  if (v15)
  {
    v81 = v4;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (void *)swift_slowAlloc(32, -1);
    v89 = v17;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)&v87 = v82;
    MetatypeMetadata = swift_getMetatypeMetadata(v82);
    v19 = String.init<A>(describing:)(&v87, MetatypeMetadata);
    *(_QWORD *)&v87 = sub_10001A820(v19, v20, (uint64_t *)&v89);
    a1 = (void *)v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
    v4 = v81;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: Start execution", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  Date.init()(v21);
  v22 = type metadata accessor for REMCDPublicTemplate();
  v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "fetchRequest");
  v24 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v23);
  objc_msgSend(v24, "setResultType:", 1);
  v85 = 0;
  v25 = objc_msgSend(a1, "executeRequest:error:", v24, &v85);
  v26 = v85;
  if (v25)
  {
    v27 = v25;
    *((_QWORD *)&v88 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
    *(_QWORD *)&v87 = v27;
    v28 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
    v29 = v26;
    v30 = v84;
    throwingCast<A>(_:as:failureMessage:)(&v89, &v87, v28, 0, 0, v28);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);

      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v87);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v87);
      v34 = v89;
      v35 = objc_msgSend(v89, "result");
      if (v35)
      {
        v36 = v35;
        _bridgeAnyObjectToAny(_:)(&v87, v35);
        swift_unknownObjectRelease(v36);
      }
      else
      {
        v87 = 0u;
        v88 = 0u;
      }
      v37 = sub_10001A630((uint64_t *)&unk_100846CB0);
      throwingCast<A>(_:as:failureMessage:)(&v89, &v87, v37, 0, 0, v37);
      v84 = v34;
      sub_1000F4294((uint64_t)&v87);
      v38 = (uint64_t)v89;
      v77 = objc_opt_self(NSManagedObjectContext);
      v39 = sub_10001A630(&qword_10083ADC0);
      inited = swift_initStackObject(v39, v86);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      v81 = v4;
      *(_QWORD *)&v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
      *((_QWORD *)&v87 + 1) = v41;
      AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v87, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = v37;
      *(_QWORD *)(inited + 72) = v38;
      swift_bridgeObjectRetain(v38);
      sub_1002B007C(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v42 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v43 = swift_allocObject(v42, 40, 7);
      *(_OWORD *)(v43 + 16) = xmmword_1006A7330;
      v44 = (void *)v83;
      *(_QWORD *)(v43 + 32) = v83;
      *(_QWORD *)&v87 = v43;
      specialized Array._endMutation()(v43);
      sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
      v45 = v44;
      v46 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v47 = swift_bridgeObjectRelease().n128_u64[0];
      v48 = isa;
      -[NSObject mergeChangesFromRemoteContextSave:intoContexts:](v77, "mergeChangesFromRemoteContextSave:intoContexts:", isa, v46, v47);

      v49 = v80;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v11, v3);
      v83 = v38;
      swift_bridgeObjectRetain(v38);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, (os_log_type_t)v52))
      {
        LODWORD(isa) = v52;
        v77 = v51;
        v79 = (uint64_t)v11;
        v53 = swift_slowAlloc(32, -1);
        v54 = (void *)swift_slowAlloc(32, -1);
        v89 = v54;
        *(_DWORD *)v53 = 136315650;
        *(_QWORD *)&v87 = v82;
        v55 = swift_getMetatypeMetadata(v82);
        v56 = String.init<A>(describing:)(&v87, v55);
        *(_QWORD *)&v87 = sub_10001A820(v56, v57, (uint64_t *)&v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2048;
        v75 = v54;
        v74 = v3;
        if ((unint64_t)v83 >> 62)
        {
          if (v83 < 0)
            v72 = v83;
          else
            v72 = v83 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v83);
          v58 = _CocoaArrayWrapper.endIndex.getter(v72);
          swift_bridgeObjectRelease();
        }
        else
        {
          v58 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)&v87 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 22) = 2048;
        v59 = v78;
        Date.init()(v60);
        v61 = v80;
        v62 = Date.timeIntervalSince(_:)(v80);
        v63 = v59;
        v64 = v74;
        v65 = *(void (**)(char *, uint64_t))(v81 + 8);
        v65(v63, v74);
        *(double *)&v87 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8);
        v65(v61, v64);
        v66 = (uint64_t (*)(uint64_t, uint64_t))v65;
        v67 = v77;
        _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)isa, "%s: Finished execution {deletionCount: %ld, elapsedSeconds: %f}", (uint8_t *)v53, 0x20u);
        v68 = v75;
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        return v66(v79, v64);
      }
      else
      {

        v69 = swift_bridgeObjectRelease();
        v70 = *(void (**)(char *, uint64_t, __n128))(v81 + 8);
        v70(v49, v3, v69);

        v71 = swift_bridgeObjectRelease();
        return ((uint64_t (*)(char *, uint64_t, __n128))v70)(v11, v3, v71);
      }
    }
  }
  else
  {
    v32 = v85;
    _convertNSErrorToError(_:)(v26);

    swift_willThrow(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }
}

uint64_t sub_1002067FC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RDTemplateOperationBatchDeleteCachedPublicTemplates()
{
  return objc_opt_self(_TtC7remindd51RDTemplateOperationBatchDeleteCachedPublicTemplates);
}

uint64_t sub_100206840(void *a1)
{
  return sub_100205F14(a1);
}

int64_t sub_100206864(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002068A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008409E0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008409E0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

__CFString *sub_100206938()
{
  qword_100871D38 = (uint64_t)CFSTR("RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification");
  return CFSTR("RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification");
}

uint64_t sub_100206950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 152);
  if (v2)
  {
    *(_QWORD *)(v0 + 152) = 0;
    swift_release(v2);
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_1008409E0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDICCloudExtraneousAlarmsCollector: stopped.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  sub_100008EFC(v1 + 32);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v1 + 48));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v1 + 88));

  sub_100008EFC(v1 + 136);
  swift_release(*(_QWORD *)(v1 + 152));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 160));
  sub_1000178E8(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200), *(unsigned int *)(v1 + 208) | ((unint64_t)*(unsigned __int16 *)(v1 + 212) << 32));
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v1 + 232));
  sub_10000882C(v1 + 272, (uint64_t *)&unk_100840BC0);
  return v1;
}

uint64_t sub_100206AB8()
{
  uint64_t v0;

  sub_100206950();
  return swift_deallocClassInstance(v0, 312, 7);
}

void sub_100206AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t, id);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  char *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Strong;
  uint64_t v50;
  void (**v51)(uint64_t, id);
  uint64_t ObjectType;
  double v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD v93[2];
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  id aBlock[5];
  uint64_t v118;

  v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v111 = *(_QWORD *)(v0 - 8);
  v112 = v0;
  __chkstk_darwin(v0);
  v110 = (char *)v93 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v2);
  v114 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v108 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v107 = (char *)v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_10001A630((uint64_t *)&unk_10084A290);
  v5 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v106 = (char *)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_100840C20);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_100840C28);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v20 = __chkstk_darwin(v19);
  if (!v115[19])
  {
    v94 = (char *)v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v95 = v22;
    v96 = v20;
    v97 = v18;
    v98 = v16;
    v99 = v5;
    v100 = v10;
    v101 = v8;
    v102 = v7;
    v103 = v14;
    v104 = v12;
    v105 = v11;
    v23 = (id *)v115;
    v24 = v115 + 11;
    swift_beginAccess(v115 + 11, aBlock, 32, 0);
    v25 = (uint64_t)v23[14];
    v26 = (uint64_t (**)(uint64_t, id))v23[15];
    sub_10000A388(v24, v25);
    LOBYTE(v24) = v26[1](v25, v26);
    swift_endAccess(aBlock);
    v27 = v113;
    v28 = (uint64_t)v114;
    if ((v24 & 1) == 0)
    {
      if (qword_100836FD0 != -1)
        swift_once(&qword_100836FD0, sub_1002068A8);
      v29 = type metadata accessor for Logger(0);
      v30 = sub_10001AAA8(v29, (uint64_t)qword_1008409E0);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      v33 = os_log_type_enabled(v31, v32);
      v34 = v15;
      v35 = v97;
      if (v33)
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      v37 = os_transaction_create("com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit");
      v93[1] = v23[3];
      v38 = swift_allocObject(&unk_1007EA1B0, 24, 7);
      swift_weakInit(v38 + 16, v23);
      v39 = swift_allocObject(&unk_1007EA1D8, 32, 7);
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = v37;
      aBlock[4] = sub_10020DA0C;
      v118 = v39;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_1000094C8;
      aBlock[3] = &unk_1007EA1F0;
      v40 = _Block_copy(aBlock);
      swift_retain();
      v41 = v37;
      swift_unknownObjectRetain(v37);
      v42 = v94;
      static DispatchQoS.unspecified.getter(v43);
      v116 = _swiftEmptyArrayStorage;
      v44 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v45 = sub_10001A630((uint64_t *)&unk_100838000);
      v46 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v45, v46, v34, v44);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v35, v40);
      _Block_release(v40);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v35, v34);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v42, v96);
      v47 = v118;
      swift_release(v38);
      swift_release(v47);
      Strong = swift_unknownObjectWeakLoadStrong(v23 + 17, v48);
      if (Strong)
      {
        v50 = Strong;
        v51 = (void (**)(uint64_t, id))v23[18];
        ObjectType = swift_getObjectType(Strong);
        v51[2](ObjectType, v51);
        swift_unknownObjectRelease(v50);
      }
      swift_unknownObjectRelease(v41);
      v27 = v113;
      v28 = (uint64_t)v114;
    }
    v53 = sub_100207AB4();
    v54 = v107;
    if (qword_100836FD8 != -1)
      swift_once(&qword_100836FD8, sub_100206938);
    NSNotificationCenter.publisher(for:object:)(qword_100871D38, 0);
    aBlock[0] = v23[3];
    v55 = aBlock[0];
    v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
    v114(v28, 1, 1, v56);
    v57 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v113 = v57;
    v58 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    v59 = sub_1000A5E70();
    v60 = v55;
    v61 = v106;
    Publisher.receive<A>(on:options:)(aBlock, v28, v27, v57, v58, v59);
    sub_10000882C(v28, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v54, v27);
    v62 = v28;
    v63 = swift_allocObject(&unk_1007EA1B0, 24, 7);
    swift_weakInit(v63 + 16, v115);
    v64 = sub_1000A5F84((unint64_t *)&qword_10083AA10, (uint64_t *)&unk_10084A290, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v65 = v100;
    v66 = v109;
    Publisher.filter(_:)(sub_10020DA14, v63, v109, v64);
    swift_release(v63);
    v67 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v61, v66);
    v68 = v110;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v67, v53);
    aBlock[0] = v60;
    v114(v62, 1, 1, v56);
    v69 = sub_1000A5F84(&qword_100840C30, &qword_100840C20, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v70 = v60;
    v71 = v103;
    v72 = v102;
    Publisher.debounce<A>(for:scheduler:options:)(v68, aBlock, v62, v102, v113, v69, v59);
    sub_10000882C(v62, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v111 + 8))(v68, v112);
    v73 = v115;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v65, v72);
    v74 = swift_allocObject(&unk_1007EA1B0, 24, 7);
    swift_weakInit(v74 + 16, v73);
    v75 = sub_1000A5F84(&qword_100840C38, &qword_100840C28, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
    v76 = v105;
    v77 = Publisher<>.sink(receiveValue:)(sub_10020DA1C, v74, v105, v75);
    swift_release(v74);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v71, v76);
    v78 = v73[19];
    v73[19] = v77;
    swift_release(v78);
    v80 = swift_unknownObjectWeakLoadStrong(v73 + 17, v79);
    if (v80)
    {
      v81 = v80;
      v82 = v73[18];
      v83 = swift_getObjectType(v80);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v82);
      swift_unknownObjectRelease(v81);
    }
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v84 = type metadata accessor for Logger(0);
    v85 = sub_10001AAA8(v84, (uint64_t)qword_1008409E0);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.default.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(12, -1);
      v89 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v89;
      *(_DWORD *)v88 = 136315138;
      v90 = Double.description.getter(v53);
      v92 = v91;
      v116 = (_QWORD *)sub_10001A820(v90, v91, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, aBlock);
      swift_bridgeObjectRelease(v92);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "RDICCloudExtraneousAlarmsCollector: started, subscribed to DidMarkExtraneousAlarmsPendingToSyncUpDelete {debounceInterval(randomized): %s}", v88, 0xCu);
      swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v88, -1, -1);
    }

  }
}

void sub_1002074BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_1002075C4();
    swift_release(v3);
  }
  if (qword_100836FD0 != -1)
    swift_once(&qword_100836FD0, sub_1002068A8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_1008409E0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

}

uint64_t sub_1002075C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];

  v1 = (uint64_t)v0;
  v2 = *v0;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint8_t **)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v1 + 24);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v28[3] = v2;
    v28[4] = (uint64_t)&off_1007EA118;
    v28[0] = v1;
    swift_retain();
    sub_100579FC0(v28);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
  }
  else
  {
    __break(1u);
    swift_once(&qword_100836FD0, sub_1002068A8);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_1008409E0);
    v16 = sub_100008868((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_1008380D0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v28[0] = v20;
      *(_DWORD *)v19 = 136446210;
      v25 = v19 + 4;
      v21 = Optional.descriptionOrNil.getter(v3);
      v23 = v22;
      v26 = sub_10001A820(v21, v22, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v23);
      sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDICCloudExtraneousAlarmsCollector THROTTLED, skipping {lastExecuted: %{public}s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
    }
    swift_errorRelease(v12);
    return sub_10000882C((uint64_t)v8, (uint64_t *)&unk_1008380D0);
  }
}

double sub_100207AB4()
{
  _QWORD *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (double)sub_10020C9A8(0x20000000000001uLL) * 1.11022302e-16 + 0.5;
  v2 = v0[9];
  v3 = v0[10];
  sub_10000A388(v0 + 6, v2);
  return v1 * (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
}

uint64_t sub_100207B28(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v4 = Notification.userInfo.getter(a1);
  if (v4)
  {
    v5 = v4;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerManagedObjectContextNotificationTransactionAuthorKey"));
    v24 = v6;
    AnyHashable.init<A>(_:)(v25, &v23, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v5 + 16) && (v7 = sub_1002C6A88((uint64_t)v25), (v8 & 1) != 0))
    {
      sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease(v5);
    sub_10020DA24((uint64_t)v25);
    if (*((_QWORD *)&v27 + 1))
    {
      if ((swift_dynamicCast(&v23, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v9 = v24;
        v10._object = (void *)0x80000001006AF410;
        v10._countAndFlagsBits = 0xD000000000000022;
        v11 = String.hasPrefix(_:)(v10);
        swift_bridgeObjectRelease(v9);
        if (v11)
        {
          if (qword_100836FD0 != -1)
            swift_once(&qword_100836FD0, sub_1002068A8);
          v12 = type metadata accessor for Logger(0);
          v13 = sub_10001AAA8(v12, (uint64_t)qword_1008409E0);
          v14 = Logger.logObject.getter(v13);
          v15 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v14, v15))
          {
            v16 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v16 = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDICCloudExtraneousAlarmsCollector: Should not be producing DidMarkExtraneousAlarmsPendingToSyncUpDelete notification from transactions of RDICCloudExtraneousAlarmsCollector", v16, 2u);
            swift_slowDealloc(v16, -1, -1);
          }

          return 0;
        }
      }
    }
    else
    {
      sub_10000882C((uint64_t)&v26, (uint64_t *)&unk_10083D5B0);
    }
  }
  v18 = a3 + 16;
  swift_beginAccess(v18, v25, 0, 0);
  Strong = swift_weakLoadStrong(v18);
  if (Strong)
  {
    v20 = Strong;
    sub_100207D68(0);
    swift_release(v20);
  }
  swift_beginAccess(v18, &v26, 0, 0);
  v21 = swift_weakLoadStrong(v18);
  if (v21)
  {
    v22 = v21;
    sub_100207EBC();
    swift_release(v22);
  }
  return 1;
}

void sub_100207D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  int v10;
  int v11;

  swift_beginAccess(v1 + 88, &v10, 33, 0);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  sub_10001BA38(v1 + 88, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  swift_endAccess(&v10);
  if (qword_100836FD0 != -1)
    swift_once(&qword_100836FD0, sub_1002068A8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_1008409E0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    swift_slowDealloc(v9, -1, -1);
  }

}

uint64_t sub_100207EBC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  _BYTE v24[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = (void *)v1[3];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_100836FD0, sub_1002068A8);
    goto LABEL_5;
  }
  swift_beginAccess(v1 + 11, v24, 32, 0);
  v8 = v1[14];
  v9 = v1[15];
  sub_10000A388(v1 + 11, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  result = swift_endAccess(v24);
  if ((v10 & 1) != 0 || v1[20])
    return result;
  if (qword_100836FD0 != -1)
    goto LABEL_11;
LABEL_5:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001AAA8(v12, (uint64_t)qword_1008409E0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = os_transaction_create("com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent");
  v18 = v1[20];
  v1[20] = v17;
  swift_unknownObjectRelease(v18);
  result = swift_unknownObjectWeakLoadStrong(v1 + 17, v19);
  if (result)
  {
    v20 = result;
    v21 = v1[18];
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v21 + 24))(ObjectType, v21);
    return swift_unknownObjectRelease(v20);
  }
  return result;
}

uint64_t sub_1002080BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_1002075C4();
    swift_release(v4);
  }
  swift_beginAccess(v2, &v7, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v6 = result;
    sub_100208140();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100208140()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v1[3];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_100836FD0, sub_1002068A8);
    goto LABEL_4;
  }
  result = v1[20];
  if (!result)
    return result;
  v1[20] = 0;
  swift_unknownObjectRelease(result);
  if (qword_100836FD0 != -1)
    goto LABEL_10;
LABEL_4:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_1008409E0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  result = swift_unknownObjectWeakLoadStrong(v1 + 17, v14);
  if (result)
  {
    v15 = result;
    v16 = v1[18];
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);
    return swift_unknownObjectRelease(v15);
  }
  return result;
}

void sub_1002082DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t inited;
  unint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  _BYTE v24[56];
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (void *)v1[3];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    swift_beginAccess(v1 + 11, v25, 32, 0);
    v9 = v1[14];
    v10 = v1[15];
    sub_10000A388(v1 + 11, v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    v12 = swift_endAccess(v25);
    if ((v11 & 1) == 0)
    {
      v15 = sub_1002084E8(v12, v13);
      if (*(_QWORD *)(v15 + 16))
      {
        sub_100208808();
        type metadata accessor for Analytics(0, v16);
        if ((static Analytics.isEventUsed(_:)(0xD000000000000053, 0x80000001006FD010) & 1) != 0)
        {
          v17 = sub_10001A630((uint64_t *)&unk_10083A260);
          inited = swift_initStackObject(v17, v24);
          *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
          *(_QWORD *)(inited + 32) = 0x746E756F63;
          *(_QWORD *)(inited + 40) = 0xE500000000000000;
          *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
          v19 = sub_1002AF09C(inited);
          static Analytics.postEvent(_:payload:duration:)(0xD000000000000053, 0x80000001006FD010, v19, 0, 1);
          swift_bridgeObjectRelease();
        }
      }
      Strong = swift_unknownObjectWeakLoadStrong(v1 + 17, v14);
      if (Strong)
      {
        v21 = Strong;
        v22 = v1[18];
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 40))(v15, ObjectType, v22);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease(v21);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002084E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  char v18;
  _BYTE v19[48];

  v3 = v2;
  v18 = 0;
  v4 = *(void **)(v2 + 16);
  v5 = (id)cloudKitAccountTypes(a1, a2);
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  sub_10011F5A4(v7);
  v9 = v8;
  swift_bridgeObjectRelease();
  sub_1002EC844(v9);
  swift_bridgeObjectRelease();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v4, "storesForAccountTypes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v12 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  sub_1000184A8(v3 + 168, (uint64_t)v19);
  v17[2] = v3;
  v17[3] = v13;
  v17[4] = &v18;
  sub_100354580((uint64_t)v19, (uint64_t)sub_10020CB04, (uint64_t)v17);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (v18 == 1)
    sub_100207D68(1);
  return v15;
}

void sub_100208808()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  _QWORD *v41;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(NSObject **)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 4, v10);
  if (Strong)
  {
    v12 = Strong;
    v36 = v7;
    v37 = v6;
    v38 = v3;
    v13 = v1[5];
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001AAA8(v14, (uint64_t)qword_1008409E0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = os_transaction_create("com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp");
    v35[1] = v1[3];
    v20 = (_QWORD *)swift_allocObject(&unk_1007EA160, 40, 7);
    v20[2] = v12;
    v20[3] = v13;
    v20[4] = v19;
    aBlock[4] = sub_10020C99C;
    v41 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EA178;
    v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain(v12);
    swift_unknownObjectRetain(v19);
    static DispatchQoS.unspecified.getter(v22);
    v39 = _swiftEmptyArrayStorage;
    v23 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A630((uint64_t *)&unk_100838000);
    v25 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v24, v25, v2, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v21);
    _Block_release(v21);
    ((void (*)(char *, uint64_t))v38[1].isa)(v5, v2);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
    swift_release(v41);
    v27 = swift_unknownObjectWeakLoadStrong(v1 + 17, v26);
    if (v27)
    {
      v28 = v27;
      v29 = v1[18];
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v29 + 48))(ObjectType, v29);
      swift_unknownObjectRelease(v28);
    }
    swift_unknownObjectRelease(v19);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001AAA8(v31, (uint64_t)qword_1008409E0);
    v38 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v33, "RDICCloudExtraneousAlarmsCollector: Unexpected nil RDICCloudExtraneousAlarmsSyncPerformer (ICCloudContext), bailing out from syncUp()", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

  }
}

void sub_100208BD8(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  _BYTE *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  const char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint32_t v38;
  os_log_type_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  _BYTE *v58;
  _QWORD *v59;
  char v60[24];
  void *v61;
  _BYTE v62[16];

  v9 = a2[9];
  v10 = a2[10];
  sub_10000A388(a2 + 6, v9);
  v11 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  if (__OFADD__(v11, 1))
    goto LABEL_40;
  v12 = sub_10020CDF8((uint64_t)(v11 + 1));
  if (!v4)
  {
    v5 = v12;
    v9 = v12 >> 62;
    if (v12 >> 62)
      goto LABEL_41;
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
        v58 = (_BYTE *)a3;
        v55 = a4;
        if (qword_100836FD0 != -1)
          swift_once(&qword_100836FD0, sub_1002068A8);
        v13 = type metadata accessor for Logger(0);
        sub_10001AAA8(v13, (uint64_t)qword_1008409E0);
        v14 = swift_bridgeObjectRetain_n(v5, 2);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.default.getter(v15);
        v57 = v9;
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc(22, -1);
          *(_DWORD *)v17 = 134218240;
          if (v9)
          {
            v19 = v5 < 0 ? v5 : v5 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v5);
            v18 = (void *)_CocoaArrayWrapper.endIndex.getter(v19);
            swift_bridgeObjectRelease();
          }
          else
          {
            v18 = *(void **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v61 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
          swift_bridgeObjectRelease();
          *(_WORD *)(v17 + 12) = 2048;
          v61 = v11;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDICCloudExtraneousAlarmsCollector: fetched extraneous alarm triggers {triggers.count: %ld, deleteLimit: %ld}", (uint8_t *)v17, 0x16u);
          swift_slowDealloc(v17, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v5, 2);
        }
        v59 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v5);
        v56 = v11;
        sub_10020CC50((uint64_t)v11, v5);
        v21 = v20;
        a4 = v22;
        a3 = (uint64_t)v23;
        v25 = v24;
        swift_bridgeObjectRelease();
        v9 = v25 >> 1;
        if (a3 == v9)
          break;
        while (a3 < v9)
        {
          v61 = (void *)a4[a3];
          sub_10020928C(&v61, (unint64_t *)&v59);
          v11 = (_BYTE *)++a3;
          if (v9 == a3)
            goto LABEL_19;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        if (v5 < 0)
          v48 = v5;
        else
          v48 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v49 = _CocoaArrayWrapper.endIndex.getter(v48);
        swift_bridgeObjectRelease();
        if (!v49)
          goto LABEL_45;
      }
LABEL_19:
      v26 = swift_unknownObjectRelease(v21);
      if (v59[2])
      {
        v61 = 0;
        v27 = objc_msgSend(a1, "save:", &v61);
        v28 = v61;
        v29 = v57;
        v30 = v58;
        if (!v27)
        {
          v46 = v61;
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v28);

          swift_willThrow(v47);
          swift_bridgeObjectRelease();
          return;
        }
        v31 = Logger.logObject.getter(v61);
        v32 = static os_log_type_t.default.getter(v31);
        if (!os_log_type_enabled(v31, v32))
          goto LABEL_26;
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v33 = 134217984;
        swift_beginAccess(&v59, v60, 0, 0);
        v61 = (void *)v59[2];
        v30 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
        v34 = "RDICCloudExtraneousAlarmsCollector: applied and saved REMCDObjectDirtyFlagsNeedDelete dirty flags to %ld a"
              "larm and triggers.";
        v35 = v31;
        v36 = v32;
        v37 = v33;
        v38 = 12;
      }
      else
      {
        v31 = Logger.logObject.getter(v26);
        v39 = static os_log_type_t.default.getter(v31);
        v29 = v57;
        v30 = v58;
        if (!os_log_type_enabled(v31, v39))
        {
LABEL_26:

          if (v29)
          {
            if (v5 < 0)
              v41 = v5;
            else
              v41 = v5 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v5);
            v40 = (void *)_CocoaArrayWrapper.endIndex.getter(v41);
            swift_bridgeObjectRelease();
          }
          else
          {
            v40 = *(void **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if ((uint64_t)v56 >= (uint64_t)v40)
          {
            swift_bridgeObjectRelease();
            *v30 = 1;
          }
          else
          {
            swift_bridgeObjectRetain(v5);
            v43 = Logger.logObject.getter(v42);
            v44 = static os_log_type_t.default.getter(v43);
            if (os_log_type_enabled(v43, v44))
            {
              v45 = swift_slowAlloc(22, -1);
              *(_DWORD *)v45 = 134218240;
              swift_bridgeObjectRelease();
              v61 = v40;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
              swift_bridgeObjectRelease();
              *(_WORD *)(v45 + 12) = 2048;
              v61 = v56;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "RDICCloudExtraneousAlarmsCollector: leaving noOutstandingExtraneousItems=false because fetched triggers.count=%ld > deleteLimit=%ld", (uint8_t *)v45, 0x16u);
              swift_slowDealloc(v45, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v5, 2);
            }
          }
          swift_beginAccess(&v59, &v61, 0, 0);
          *v55 = v59;
          return;
        }
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        v34 = "RDICCloudExtraneousAlarmsCollector: none of the fetched alarm triggers should apply REMCDObjectDirtyFlagsNeedDelete.";
        v35 = v31;
        v36 = v39;
        v37 = v33;
        v38 = 2;
      }
      _os_log_impl((void *)&_mh_execute_header, v35, v36, v34, v37, v38);
      swift_slowDealloc(v33, -1, -1);
      goto LABEL_26;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v50 = type metadata accessor for Logger(0);
    v51 = sub_10001AAA8(v50, (uint64_t)qword_1008409E0);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDICCloudExtraneousAlarmsCollector: fetched 0 extraneous alarm triggers.", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    *(_BYTE *)a3 = 1;
    *a4 = _swiftEmptyArrayStorage;
  }
}

void sub_10020928C(void **a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  id v47;
  void *v48;
  char *v49;
  void (*v50)(os_log_t, char *, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  unint64_t *v52;
  unint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(os_log_t, uint64_t);
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  os_log_t v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  void (*v92)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  id v94;
  uint64_t v95;
  char *v96;
  unint64_t *v97;
  os_log_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v97 = a2;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v100 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v99 = (char *)&v91 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v91 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v91 - v12;
  v101 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v96 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v91 - v17;
  __chkstk_darwin(v19);
  v98 = (os_log_t)((char *)&v91 - v20);
  __chkstk_darwin(v21);
  v23 = (char *)&v91 - v22;
  *(_QWORD *)&v25 = __chkstk_darwin(v24).n128_u64[0];
  v27 = (char *)&v91 - v26;
  v28 = *a1;
  if (!objc_msgSend(v28, "isTemporal", v25))
    return;
  v29 = objc_msgSend(v28, "alarm");
  if (v29)
  {
    v93 = v4;
    v94 = v29;
    v95 = v2;
    v30 = objc_msgSend(v28, "identifier");
    if (!v30)
    {
      v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v32 = v101;
      v46(v13, 1, 1, v101);
      v10 = v13;
LABEL_27:
      sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
      if (qword_100836FD0 != -1)
        swift_once(&qword_100836FD0, sub_1002068A8);
      v66 = type metadata accessor for Logger(0);
      sub_10001AAA8(v66, (uint64_t)qword_1008409E0);
      v67 = v28;
      v68 = v94;
      v69 = v67;
      v70 = v68;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, (os_log_type_t)v72))
      {
        LODWORD(v97) = v72;
        v98 = v71;
        v73 = swift_slowAlloc(22, -1);
        v96 = (char *)swift_slowAlloc(64, -1);
        v104 = v96;
        *(_DWORD *)v73 = 136315394;
        v74 = objc_msgSend(v69, "identifier");
        if (v74)
        {
          v75 = v74;
          v76 = (uint64_t)v99;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

          v77 = 0;
        }
        else
        {
          v77 = 1;
          v76 = (uint64_t)v99;
        }
        v78 = 1;
        v46((char *)v76, v77, 1, v32);
        v79 = Optional.descriptionOrNil.getter(v93);
        v81 = v80;
        sub_10000882C(v76, (uint64_t *)&unk_100839C80);
        v102 = sub_10001A820(v79, v81, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

        *(_QWORD *)&v82 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v73 + 12) = 2080;
        v83 = objc_msgSend(v70, "identifier", v82);
        if (v83)
        {
          v84 = v83;
          v85 = (uint64_t)v100;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v83);

          v78 = 0;
        }
        else
        {
          v85 = (uint64_t)v100;
        }
        v46((char *)v85, v78, 1, v101);
        v86 = Optional.descriptionOrNil.getter(v93);
        v88 = v87;
        sub_10000882C(v85, (uint64_t *)&unk_100839C80);
        v102 = sub_10001A820(v86, v88, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

        swift_bridgeObjectRelease();
        v89 = v98;
        _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v97, "RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger/alarm without identifier, skipping {triggerID: %s, alarmID: %s}", (uint8_t *)v73, 0x16u);
        v90 = v96;
        swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v73, -1, -1);

      }
      else
      {

      }
      return;
    }
    v31 = v30;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v32 = v101;
    v91 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v91(v13, v23, v101);
    v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v92(v13, 0, 1, v32);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v33(v13, 1, v32) == 1)
    {
      v10 = v13;
LABEL_26:
      v46 = v92;
      goto LABEL_27;
    }
    v91(v27, v13, v32);
    v47 = objc_msgSend(v94, "identifier");
    if (v47)
    {
      v48 = v47;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v49 = v23;
      v50 = (void (*)(os_log_t, char *, uint64_t))v91;
      v91(v10, v49, v32);
      v92(v10, 0, 1, v32);
      if (v33(v10, 1, v32) != 1)
      {
        v50(v98, v10, v32);
        objc_msgSend(v28, "setShouldSyncUpDeleteIfNeeded");
        v51 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        v51(v18, v27, v32);
        v52 = v97;
        v53 = *v97;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v97);
        *v52 = v53;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v53 = sub_1002C8EC4(0, *(_QWORD *)(v53 + 16) + 1, 1, v53);
          *v97 = v53;
        }
        v56 = *(_QWORD *)(v53 + 16);
        v55 = *(_QWORD *)(v53 + 24);
        if (v56 >= v55 >> 1)
        {
          v53 = sub_1002C8EC4(v55 > 1, v56 + 1, 1, v53);
          *v97 = v53;
        }
        *(_QWORD *)(v53 + 16) = v56 + 1;
        v100 = (char *)((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
        v57 = *(_QWORD *)(v14 + 72);
        v58 = v18;
        v59 = v101;
        v91(&v100[v53 + v57 * v56], v58, v101);
        objc_msgSend(v94, "setShouldSyncUpDeleteIfNeeded");
        v51(v96, (char *)v98, v59);
        v60 = v97;
        v61 = *v97;
        v62 = swift_isUniquelyReferenced_nonNull_native(*v97);
        *v60 = v61;
        if ((v62 & 1) == 0)
        {
          v61 = sub_1002C8EC4(0, *(_QWORD *)(v61 + 16) + 1, 1, v61);
          *v97 = v61;
        }
        v64 = *(_QWORD *)(v61 + 16);
        v63 = *(_QWORD *)(v61 + 24);
        if (v64 >= v63 >> 1)
        {
          v61 = sub_1002C8EC4(v63 > 1, v64 + 1, 1, v61);
          *v97 = v61;
        }
        *(_QWORD *)(v61 + 16) = v64 + 1;
        v91(&v100[v61 + v64 * v57], v96, v59);

        v65 = *(void (**)(os_log_t, uint64_t))(v14 + 8);
        v65(v98, v59);
        v65((os_log_t)v27, v59);
        return;
      }
    }
    else
    {
      v92(v10, 1, 1, v32);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v32);
    goto LABEL_26;
  }
  if (qword_100836FD0 != -1)
    swift_once(&qword_100836FD0, sub_1002068A8);
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_1008409E0);
  v35 = v28;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v104 = (char *)v39;
    *(_DWORD *)v38 = 136315138;
    v40 = objc_msgSend(v35, "remObjectID");
    if (v40)
    {
      v41 = v40;
      v42 = objc_msgSend(v40, "description");

      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

    }
    else
    {
      v45 = 0xE300000000000000;
      v43 = 7104878;
    }
    v102 = sub_10001A820(v43, v45, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger without an alarm, skipping {triggerID: %s}", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
}

void sub_100209C20(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 8))(1, CFSTR("ExtraneousAlarmsCollector"), 0, 0, ObjectType, a2);
  if (qword_100836FD0 != -1)
    swift_once(&qword_100836FD0, sub_1002068A8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_1008409E0);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_100209D20@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "identifier");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_100209DA4(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v6, (uint64_t *)&unk_100839C80);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setIdentifier:", isa);

}

uint64_t sub_100209E88@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double (*v7)(uint64_t, uint64_t);
  double v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[40];
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  char v17[24];

  v3 = *v1;
  v4 = (uint64_t)(v1 + 34);
  swift_beginAccess(v1 + 34, v17, 0, 0);
  sub_100008868((uint64_t)(v1 + 34), (uint64_t)&v14, (uint64_t *)&unk_100840BC0);
  if (!v15)
  {
    sub_10000882C((uint64_t)&v14, (uint64_t *)&unk_100840BC0);
    v5 = v1[9];
    v6 = v1[10];
    sub_10000A388(v1 + 6, v5);
    v7 = *(double (**)(uint64_t, uint64_t))(v6 + 24);
    swift_retain();
    v8 = v7(v5, v6);
    v15 = v3;
    v16 = &off_1007EA0F8;
    *(_QWORD *)&v14 = v1;
    v9 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
    v10 = swift_allocObject(v9, 64, 7);
    sub_10001BCA8(&v14, v10 + 16);
    *(double *)(v10 + 56) = v8;
    v15 = v9;
    v16 = &off_1007F54C8;
    *(_QWORD *)&v14 = v10;
    sub_100018618((uint64_t)&v14, (uint64_t)v13);
    swift_beginAccess(v4, v12, 33, 0);
    sub_10020A7B8((uint64_t)v13, v4);
    swift_endAccess(v12);
  }
  return sub_10001BCA8(&v14, a1);
}

uint64_t sub_100209FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDICCloudExtraneousAlarmsCollector();
  if (swift_dynamicCast(&v25, v26, v5, v6, 0))
  {
    swift_release(v25);
    v7 = v2 + 16;
    swift_beginAccess(v7, &v20, 0, 0);
    sub_100018618(v7, (uint64_t)v22);
    v8 = v23;
    v9 = v24;
    sub_10000A388(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_1008409E0);
    v12 = sub_100018618(a1, (uint64_t)v22);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136446210;
      sub_100018618((uint64_t)v22, (uint64_t)&v20);
      v17 = String.init<A>(describing:)(&v20, v5);
      v20 = sub_10001A820(v17, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDICCloudExtraneousAlarmsCollectorExecutionDateStorage.lastExecutedDate(for:) must work with RDICCloudExtraneousAlarmsCollector only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_10020A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v27);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDICCloudExtraneousAlarmsCollector();
  if (swift_dynamicCast(&v23, v27, v8, v9, 0))
  {
    swift_release(v23);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    swift_beginAccess(v2 + 16, v26, 33, 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = *(_QWORD *)(v2 + 48);
    sub_10001BA38(v2 + 16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 40))(v7, v12, v13);
    swift_endAccess(v26);
  }
  else
  {
    if (qword_100836FD0 != -1)
      swift_once(&qword_100836FD0, sub_1002068A8);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_1008409E0);
    v15 = sub_100018618(a1, (uint64_t)v26);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      sub_100018618((uint64_t)v26, (uint64_t)&v23);
      v20 = String.init<A>(describing:)(&v23, v8);
      v23 = sub_10001A820(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDICCloudExtraneousAlarmsCollectorExecutionDateStorage.updateLastExecutedDate(for:) must work with RDICCloudExtraneousAlarmsCollector only {executable: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
}

uint64_t sub_10020A4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209FD4(a1, a2);
}

uint64_t sub_10020A51C(uint64_t a1, uint64_t a2)
{
  return sub_10020A24C(a1, a2);
}

uint64_t sub_10020A53C@<X0>(uint64_t a1@<X8>)
{
  return sub_100209E88(a1);
}

uint64_t sub_10020A55C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 216);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return v1;
}

uint64_t sub_10020A58C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + 232, a1);
}

void sub_10020A5AC()
{
  sub_1002082DC();
}

unint64_t sub_10020A5D4()
{
  id *v0;
  unint64_t result;

  result = (unint64_t)objc_msgSend(*v0, "extraneousAlarmsDeleteCountLimit");
  if ((result & 0x8000000000000000) != 0)
    __break(1u);
  return result;
}

id sub_10020A5FC()
{
  id *v0;

  return objc_msgSend(*v0, "extraneousAlarmsCollectorDebounceInterval");
}

id sub_10020A60C()
{
  id *v0;

  return objc_msgSend(*v0, "extraneousAlarmsCollectorThrottleInterval");
}

id sub_10020A61C()
{
  id *v0;

  return objc_msgSend(*v0, "extraneousAlarmsCollectorContainerDeemedClean");
}

id sub_10020A63C(char a1)
{
  id *v1;

  return objc_msgSend(*v1, "setExtraneousAlarmsCollectorContainerDeemedClean:", a1 & 1);
}

uint64_t sub_10020A654@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "lastExtraneousAlarmsCollectorExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10020A6D8(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v3, "setLastExtraneousAlarmsCollectorExecutionDate:");

}

uint64_t type metadata accessor for RDICCloudExtraneousAlarmsCollector()
{
  return objc_opt_self(_TtC7remindd34RDICCloudExtraneousAlarmsCollector);
}

uint64_t type metadata accessor for RDICCloudExtraneousAlarmsCollector.RDICCloudExtraneousAlarmsCollectorExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd34RDICCloudExtraneousAlarmsCollectorP33_F9819BB061A88943AFFA86EF4B007FF954RDICCloudExtraneousAlarmsCollectorExecutionDateStorage);
}

uint64_t sub_10020A7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100840BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10020A804(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  Class isa;
  id v15;

  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(a2);
  v5._object = (void *)0x80000001006AFB00;
  v5._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a2);
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a2);
  v7._countAndFlagsBits = 0xD000000000000023;
  v7._object = (void *)0x80000001006FC190;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = a1;
  v9 = a2;
  v10 = sub_10001A630((uint64_t *)&unk_100839E80);
  v11 = swift_allocObject(v10, 128, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  *(_QWORD *)(v11 + 88) = &type metadata for String;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = v8;
  *(_QWORD *)(v11 + 72) = v9;
  v12 = rem_currentRuntimeVersion(v11);
  *(_QWORD *)(v11 + 120) = &type metadata for Int;
  *(_QWORD *)(v11 + 96) = v12;
  v13 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v13, isa);

  return v15;
}

uint64_t sub_10020A9DC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  uint64_t v21;
  _BYTE v22[48];

  v2 = sub_10001A630((uint64_t *)&unk_100840BF0);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v2, v22);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    __chkstk_darwin(inited);
    sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
    KeyPath = swift_getKeyPath(&unk_1006AFB38);
    v15 = sub_100342628(KeyPath);
    v16 = swift_release(KeyPath);
    *(_QWORD *)(inited + 32) = v15;
    __chkstk_darwin(v16);
    v17 = swift_getKeyPath(&unk_1006AFE30);
    v18 = sub_100342628(v17);
    v19 = swift_release(v17);
    *(_QWORD *)(inited + 40) = v18;
    specialized Array._endMutation()(v19);
    return sub_10000D2BC(inited);
  }
  else
  {
    v3 = swift_initStackObject(v2, v20);
    *(_OWORD *)(v3 + 16) = xmmword_1006A3C40;
    __chkstk_darwin(v3);
    sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
    v4 = swift_getKeyPath(&unk_1006AFB38);
    v5 = sub_1003425F8(v4);
    swift_release(v4);
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_10001A630((uint64_t *)&unk_100839E80);
    v7 = swift_allocObject(v6, 64, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = 0xD000000000000017;
    *(_QWORD *)(v7 + 40) = 0x80000001006AFBD0;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    *(_QWORD *)(v3 + 40) = v10;
    v21 = v3;
    specialized Array._endMutation()(v11);
    return sub_10001CC54(v21);
  }
}

uint64_t sub_10020AC64(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  uint64_t v21;
  _BYTE v22[48];

  v2 = sub_10001A630(&qword_100840C18);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v2, v22);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    __chkstk_darwin(inited);
    sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    KeyPath = swift_getKeyPath(&unk_1006AFB38);
    v15 = sub_100341B00(KeyPath);
    v16 = swift_release(KeyPath);
    *(_QWORD *)(inited + 32) = v15;
    __chkstk_darwin(v16);
    v17 = swift_getKeyPath(&unk_1006AFE30);
    v18 = sub_100341B00(v17);
    v19 = swift_release(v17);
    *(_QWORD *)(inited + 40) = v18;
    specialized Array._endMutation()(v19);
    return sub_10000D2BC(inited);
  }
  else
  {
    v3 = swift_initStackObject(v2, v20);
    *(_OWORD *)(v3 + 16) = xmmword_1006A3C40;
    __chkstk_darwin(v3);
    sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v4 = swift_getKeyPath(&unk_1006AFB38);
    v5 = sub_100341AD0(v4);
    swift_release(v4);
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_10001A630((uint64_t *)&unk_100839E80);
    v7 = swift_allocObject(v6, 64, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = 0xD000000000000017;
    *(_QWORD *)(v7 + 40) = 0x80000001006AFBD0;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    *(_QWORD *)(v3 + 40) = v10;
    v21 = v3;
    specialized Array._endMutation()(v11);
    return sub_10001CC54(v21);
  }
}

uint64_t sub_10020AEEC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  uint64_t v21;
  _BYTE v22[48];

  v2 = sub_10001A630(&qword_100840C08);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v2, v22);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    __chkstk_darwin(inited);
    sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    KeyPath = swift_getKeyPath(&unk_1006AFB38);
    v15 = sub_100341A50(KeyPath);
    v16 = swift_release(KeyPath);
    *(_QWORD *)(inited + 32) = v15;
    __chkstk_darwin(v16);
    v17 = swift_getKeyPath(&unk_1006AFE30);
    v18 = sub_100341A50(v17);
    v19 = swift_release(v17);
    *(_QWORD *)(inited + 40) = v18;
    specialized Array._endMutation()(v19);
    return sub_10000D2BC(inited);
  }
  else
  {
    v3 = swift_initStackObject(v2, v20);
    *(_OWORD *)(v3 + 16) = xmmword_1006A3C40;
    __chkstk_darwin(v3);
    sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    v4 = swift_getKeyPath(&unk_1006AFB38);
    v5 = sub_100341A20(v4);
    swift_release(v4);
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_10001A630((uint64_t *)&unk_100839E80);
    v7 = swift_allocObject(v6, 64, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = 0xD000000000000017;
    *(_QWORD *)(v7 + 40) = 0x80000001006AFBD0;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    *(_QWORD *)(v3 + 40) = v10;
    v21 = v3;
    specialized Array._endMutation()(v11);
    return sub_10001CC54(v21);
  }
}

uint64_t sub_10020B174(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  uint64_t v21;
  _BYTE v22[48];

  v2 = sub_10001A630(&qword_100840C48);
  if ((a1 & 1) != 0)
  {
    inited = swift_initStackObject(v2, v22);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    __chkstk_darwin(inited);
    sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    KeyPath = swift_getKeyPath(&unk_1006AFB38);
    v15 = sub_100342B44(KeyPath);
    v16 = swift_release(KeyPath);
    *(_QWORD *)(inited + 32) = v15;
    __chkstk_darwin(v16);
    v17 = swift_getKeyPath(&unk_1006AFE30);
    v18 = sub_100342B44(v17);
    v19 = swift_release(v17);
    *(_QWORD *)(inited + 40) = v18;
    specialized Array._endMutation()(v19);
    return sub_10000D2BC(inited);
  }
  else
  {
    v3 = swift_initStackObject(v2, v20);
    *(_OWORD *)(v3 + 16) = xmmword_1006A3C40;
    __chkstk_darwin(v3);
    sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    v4 = swift_getKeyPath(&unk_1006AFB38);
    v5 = sub_100342DD8(v4);
    swift_release(v4);
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_10001A630((uint64_t *)&unk_100839E80);
    v7 = swift_allocObject(v6, 64, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = 0xD000000000000017;
    *(_QWORD *)(v7 + 40) = 0x80000001006AFBD0;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    *(_QWORD *)(v3 + 40) = v10;
    v21 = v3;
    specialized Array._endMutation()(v11);
    return sub_10001CC54(v21);
  }
}

id sub_10020B3FC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "alarm");
  *a2 = result;
  return result;
}

id sub_10020B434(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAlarm:", *a1);
}

id sub_10020B448@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020B478(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

void sub_10020B48C(uint64_t a1, char a2)
{
  sub_10020B6FC(a1, a2, (uint64_t)&unk_100840BD0, (uint64_t)off_1007D6680, (uint64_t)sub_1003425C0, (uint64_t)sub_1003425D4, (uint64_t)sub_1002E8728, (uint64_t)sub_1002E8734, (uint64_t)sub_10020A9DC, (uint64_t)sub_1003425F8, (uint64_t)sub_100342604, (uint64_t)sub_1000153F4, (uint64_t)sub_100342628, (uint64_t)sub_100342648, (uint64_t)sub_100342628, (uint64_t)sub_10000D2BC);
}

void sub_10020B528(uint64_t a1, char a2)
{
  sub_10020B6FC(a1, a2, (uint64_t)&qword_100840C10, (uint64_t)off_1007D6670, (uint64_t)sub_100341A98, (uint64_t)sub_100341AAC, (uint64_t)sub_1002E7F5C, (uint64_t)sub_1002E7F68, (uint64_t)sub_10020AC64, (uint64_t)sub_100341AD0, (uint64_t)sub_100341ADC, (uint64_t)sub_1000153F4, (uint64_t)sub_100341B00, (uint64_t)sub_100341B20, (uint64_t)sub_100341B00, (uint64_t)sub_10000D2BC);
}

void sub_10020B5C4(uint64_t a1, char a2)
{
  sub_10020B6FC(a1, a2, (uint64_t)&qword_100840C00, (uint64_t)off_1007D6688, (uint64_t)sub_1003419E8, (uint64_t)sub_1003419FC, (uint64_t)sub_1002E7F3C, (uint64_t)sub_1002E7F48, (uint64_t)sub_10020AEEC, (uint64_t)sub_100341A20, (uint64_t)sub_100341A2C, (uint64_t)sub_1000153F4, (uint64_t)sub_100341A50, (uint64_t)sub_100341A70, (uint64_t)sub_100341A50, (uint64_t)sub_10000D2BC);
}

void sub_10020B660(uint64_t a1, char a2)
{
  sub_10020B6FC(a1, a2, (uint64_t)&qword_100840C40, (uint64_t)off_1007D6668, (uint64_t)sub_100342940, (uint64_t)sub_100342B70, (uint64_t)sub_1002E8B8C, (uint64_t)sub_1002E8D3C, (uint64_t)sub_10020B174, (uint64_t)sub_100342DD8, (uint64_t)sub_100343680, (uint64_t)sub_1000153F4, (uint64_t)sub_100342B44, (uint64_t)sub_100342BDC, (uint64_t)sub_100342B44, (uint64_t)sub_10000D2BC);
}

void sub_10020B6FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];

  v19[5] = a3;
  v19[6] = a4;
  v19[0] = a14;
  v19[1] = a15;
  v19[3] = a16;
  v19[4] = a13;
  v17 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v17);
  v19[2] = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[7] = _swiftEmptyArrayStorage;
  __asm { BR              X10 }
}

uint64_t sub_10020B7BC()
{
  uint64_t (*v0)(uint64_t, _QWORD *);
  unint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t KeyPath;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;

  sub_1000151B0(0, *(unint64_t **)(v3 - 104), *(_QWORD **)(v3 - 96));
  KeyPath = swift_getKeyPath(&unk_1006AFA50);
  v5 = sub_1001DF8D0(v1);
  v6 = (void *)v0(KeyPath, v5);
  swift_release(KeyPath);
  v7 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  v8 = *(_QWORD *)(v3 - 88);
  v10 = *(void **)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  if ((unint64_t)v10 >= v9 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
  specialized Array._endMutation()(v11);

  v12 = (id)((uint64_t (*)(_QWORD))v2)(0);
  v13 = sub_10020A804(0x6D72616C61, 0xE500000000000000);
  v14 = sub_10020A804(0x65722E6D72616C61, 0xEE007265646E696DLL);
  v16 = *(_QWORD *)(v3 - 88);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = v17 + 3;
  if (__OFADD__(v17, 3))
  {
    __break(1u);
LABEL_31:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
    goto LABEL_11;
  }
  v10 = v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 - 88));
  *(_QWORD *)(v3 - 88) = v16;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v18 > *(_QWORD *)(v16 + 24) >> 1)
  {
    if (v17 <= v18)
      v20 = v17 + 3;
    else
      v20 = v17;
    isUniquelyReferenced_nonNull_native = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v20, 1, v16);
    *(_QWORD *)(v3 - 88) = isUniquelyReferenced_nonNull_native;
  }
  specialized Array._endMutation()(isUniquelyReferenced_nonNull_native);
  v12 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
  v21 = *(_QWORD *)(v3 - 88);
  v1 = *(_QWORD *)(v21 + 16);
  v15 = *(_QWORD *)(v21 + 24);
  v2 = *(uint64_t (**)(void))(v3 - 112);
  if (v1 >= v15 >> 1)
    goto LABEL_31;
LABEL_11:
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v12);
  specialized Array._endMutation()(v22);
  v23 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v24 = *(_QWORD *)(v3 - 88);
  v26 = *(_QWORD *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 24);
  if (v26 >= v25 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1);
  v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v23);
  specialized Array._endMutation()(v27);
  v28 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
  v29 = *(_QWORD *)(v3 - 88);
  v31 = *(_QWORD *)(v29 + 16);
  v30 = *(_QWORD *)(v29 + 24);
  if (v31 >= v30 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
  v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
  specialized Array._endMutation()(v32);

  __chkstk_darwin(v33);
  sub_1000151B0(0, *(unint64_t **)(v3 - 104), *(_QWORD **)(v3 - 96));
  v34 = swift_getKeyPath(&unk_1006AF750);
  v35 = (id)v2();
  v36 = swift_release(v34);
  __chkstk_darwin(v36);
  v37 = swift_getKeyPath(&unk_1006AF840);
  v38 = (void *)v2();
  swift_release(v37);
  v40 = *(_QWORD *)(v3 - 88);
  v41 = *(_QWORD *)(v40 + 16);
  v42 = v41 + 2;
  if (__OFADD__(v41, 2))
  {
    __break(1u);
LABEL_33:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1);
    goto LABEL_23;
  }
  v43 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 - 88));
  *(_QWORD *)(v3 - 88) = v40;
  if (!(_DWORD)v43 || v42 > *(_QWORD *)(v40 + 24) >> 1)
  {
    if (v41 <= v42)
      v44 = v41 + 2;
    else
      v44 = v41;
    v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43, v44, 1, v40);
    *(_QWORD *)(v3 - 88) = v43;
  }
  specialized Array._endMutation()(v43);
  v35 = v35;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v45 = *(_QWORD *)(v3 - 88);
  v31 = *(_QWORD *)(v45 + 16);
  v39 = *(_QWORD *)(v45 + 24);
  if (v31 >= v39 >> 1)
    goto LABEL_33;
LABEL_23:
  v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v35);
  specialized Array._endMutation()(v46);
  v47 = v38;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
  v48 = *(_QWORD *)(v3 - 88);
  v50 = *(_QWORD *)(v48 + 16);
  v49 = *(_QWORD *)(v48 + 24);
  if (v50 >= v49 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1);
  v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v47);
  specialized Array._endMutation()(v51);

  __chkstk_darwin(v52);
  sub_1000151B0(0, *(unint64_t **)(v3 - 104), *(_QWORD **)(v3 - 96));
  v53 = swift_getKeyPath(&unk_1006AF918);
  v54 = (void *)v2();
  swift_release(v53);
  v55 = v54;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
  v56 = *(_QWORD *)(v3 - 88);
  v58 = *(_QWORD *)(v56 + 16);
  v57 = *(_QWORD *)(v56 + 24);
  if (v58 >= v57 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1);
  v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v55);
  specialized Array._endMutation()(v59);

  __chkstk_darwin(v60);
  v61 = swift_getKeyPath(&unk_1006AF6B8);
  v62 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
  v63 = objc_msgSend(v62, "uuid");

  v64 = *(_QWORD *)(v3 - 128);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v63);

  v65 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 0, 1, v65);
  v66 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 - 144))(v61, v64);
  swift_release(v61);
  v67 = v66;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
  v68 = *(_QWORD *)(v3 - 88);
  v70 = *(_QWORD *)(v68 + 16);
  v69 = *(_QWORD *)(v68 + 24);
  if (v70 >= v69 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1);
  v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v67);
  specialized Array._endMutation()(v71);

  return (*(uint64_t (**)(_QWORD))(v3 - 120))(*(_QWORD *)(v3 - 88));
}

id sub_10020C810@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10020C848(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

void sub_10020C864(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "originalAlarmUID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10020C8C8(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setOriginalAlarmUID:");

}

id sub_10020C924@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "list");
  *a2 = result;
  return result;
}

id sub_10020C95C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setList:", *a1);
}

uint64_t sub_10020C970()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10020C99C()
{
  uint64_t v0;

  sub_100209C20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10020C9A8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10020CA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_10028F928(a2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = 1 << *(_BYTE *)(a2 + 32);
  if (v10 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v9 != (_DWORD)v11)
    goto LABEL_13;
  if (*(_QWORD *)a1 < result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v9 == (_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v10 >= v13)
      {
        *(_QWORD *)a3 = *(_QWORD *)a1;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = v13;
        *(_QWORD *)(a3 + 32) = v12;
        *(_BYTE *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = a2;
        return swift_bridgeObjectRetain(a2);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_10020CB04(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100208BD8(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_10020CB20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  _OWORD v18[3];
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (result < 0)
  {
LABEL_16:
    __break(1u);
  }
  else
  {
    v4 = result;
    result = sub_10028F928(a2);
    v6 = result;
    v8 = v7;
    v10 = v9 & 1;
    if (v4)
    {
      v11 = *(unsigned int *)(a2 + 36);
      v12 = 1 << *(_BYTE *)(a2 + 32);
      while ((v10 & 1) == 0)
      {
        if ((_DWORD)v11 != (_DWORD)v8)
        {
          __break(1u);
          goto LABEL_16;
        }
        if (v6 == v12)
        {
          v10 = 0;
          v6 = v12;
          v8 = v11;
          goto LABEL_10;
        }
        result = sub_10036456C(v6, v8, 0, a2);
        v6 = result;
        v8 = v13;
        v10 = v14 & 1;
        if (!--v4)
          goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_10:
    result = sub_10028F928(a2);
    if ((v10 & 1) != 0 || (v16 & 1) != 0)
      goto LABEL_20;
    if ((_DWORD)v8 == (_DWORD)v15)
    {
      if (v6 >= result)
      {
        v20[0] = result;
        v20[1] = v15;
        v21 = 0;
        v22 = v6;
        v23 = v8;
        v24 = 0;
        result = sub_10020CA30((uint64_t)v20, a2, (uint64_t)v18);
        v17 = v18[1];
        *(_OWORD *)a3 = v18[0];
        *(_OWORD *)(a3 + 16) = v17;
        *(_OWORD *)(a3 + 32) = v18[2];
        *(_QWORD *)(a3 + 48) = v19;
        return result;
      }
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_10020CC50(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v14 = v2;
  else
    v14 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (v10 < 0)
      goto LABEL_36;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      v11 = v12;
    }
    while (v7 != v12);
  }
  if (v4)
  {
    if (v2 < 0)
      v13 = v2;
    else
      v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.subscript.getter(0, v7, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain(v2);
  }
}

uint64_t sub_10020CDF8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  Class v12;
  uint64_t inited;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  Class v38;
  uint64_t v39;
  uint64_t result;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  char v44[40];
  uint64_t v45;
  __int128 v46;
  void *v47;
  char v48[48];
  _QWORD *v49;

  sub_10020B6FC(0, 160, (uint64_t)&unk_100840BD0, (uint64_t)off_1007D6680, (uint64_t)sub_1003425C0, (uint64_t)sub_1003425D4, (uint64_t)sub_1002E8728, (uint64_t)sub_1002E8734, (uint64_t)sub_10020A9DC, (uint64_t)sub_1003425F8, (uint64_t)sub_100342604, (uint64_t)sub_1000153F4, (uint64_t)sub_100342628, (uint64_t)sub_100342648, (uint64_t)sub_100342628, (uint64_t)sub_10000D2BC);
  v3 = v2;
  v4 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v5, "setEntity:", v6);

  objc_msgSend(v5, "setAffectedStores:", 0);
  objc_msgSend(v5, "setPredicate:", v3);

  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setAffectedStores:", isa);

  objc_msgSend(v5, "setFetchLimit:", a1);
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006AF5F8);
  v11 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 0);
  *(_QWORD *)(v9 + 32) = v11;
  specialized Array._endMutation()(v11);
  v12 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setSortDescriptors:", v12, swift_bridgeObjectRelease().n128_f64[0]);

  inited = swift_initStackObject(v8, v48);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  v14 = swift_getKeyPath(&unk_1006AF648);
  *(_QWORD *)(inited + 32) = v14;
  *(_QWORD *)&v46 = inited;
  specialized Array._endMutation()(v14);
  v49 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 1, 0);
  v15 = v49;
  if ((inited & 0xC000000000000001) != 0)
  {
    v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v17 = v16;
  }
  else
  {
    v17 = *(_QWORD *)(inited + 32);
    v16 = swift_retain();
  }
  v18 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v16);
  if (!v19)
  {
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v41._object = (void *)0x80000001006F8C10;
    v41._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v41);
    v45 = v17;
LABEL_16:
    v43 = sub_10001A630(&qword_100844130);
    _print_unlocked<A, B>(_:_:)(&v45, &v46, v43, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v46, *((_QWORD *)&v46 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
    return result;
  }
  v20 = v18;
  v21 = v19;
  v47 = &type metadata for String;
  swift_release(v17);
  *(_QWORD *)&v46 = v20;
  *((_QWORD *)&v46 + 1) = v21;
  v23 = v15[2];
  v22 = v15[3];
  if (v23 >= v22 >> 1)
  {
    sub_1001C1C48(v22 > 1, v23 + 1, 1);
    v15 = v49;
  }
  v15[2] = v23 + 1;
  sub_10001A6CC(&v46, &v15[4 * v23 + 4]);
  swift_bridgeObjectRelease();
  v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v15);
  objc_msgSend(v5, "setPropertiesToFetch:", v24);

  v25 = swift_initStackObject(v8, v44);
  *(_OWORD *)(v25 + 16) = xmmword_1006A7330;
  v26 = swift_getKeyPath(&unk_1006AF678);
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)&v46 = v25;
  specialized Array._endMutation()(v26);
  v27 = v46;
  v49 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v28 = v49;
  if ((v27 & 0xC000000000000001) != 0)
  {
    v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    v30 = v29;
  }
  else
  {
    v30 = *(_QWORD *)(v27 + 32);
    v29 = swift_retain();
  }
  v31 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v29);
  if (!v32)
  {
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v42._object = (void *)0x80000001006F8C10;
    v42._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v42);
    v45 = v30;
    goto LABEL_16;
  }
  v33 = v31;
  v34 = v32;
  swift_release(v30);
  v36 = v28[2];
  v35 = v28[3];
  if (v36 >= v35 >> 1)
  {
    sub_1001C1B0C(v35 > 1, v36 + 1, 1);
    v28 = v49;
  }
  v28[2] = v36 + 1;
  v37 = &v28[2 * v36];
  v37[4] = v33;
  v37[5] = v34;
  swift_bridgeObjectRelease();
  v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v28);
  objc_msgSend(v5, "setRelationshipKeyPathsForPrefetching:", v38);

  v39 = NSManagedObjectContext.fetch<A>(_:)(v5, v4);
  return v39;
}

const char *sub_10020D3B8()
{
  return "alarm";
}

id sub_10020D3C4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "alarm");
  *a2 = result;
  return result;
}

id sub_10020D3FC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAlarm:", *a1);
}

const char *sub_10020D410()
{
  return "dueDateResolutionTokenAsNonce";
}

id sub_10020D41C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "dueDateResolutionTokenAsNonce");
  *a2 = v4;
  return result;
}

id sub_10020D44C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setDueDateResolutionTokenAsNonce:", *a1);
}

id sub_10020D468@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10020D4A0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_10020D4B4()
{
  return 8;
}

_QWORD *sub_10020D4C0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10020D4CC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100209D20(a1, a2);
}

void sub_10020D4E0(uint64_t a1, void **a2)
{
  sub_100209DA4(a1, a2);
}

uint64_t sub_10020D4F4()
{
  return 8;
}

void sub_10020D500(void *a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease(a1);
      break;
    case 3:
    case 4:

      break;
    default:
      return;
  }
}

id sub_10020D530@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "alarm");
  *a2 = result;
  return result;
}

id sub_10020D568(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAlarm:", *a1);
}

uint64_t sub_10020D57C()
{
  return 8;
}

id sub_10020D588@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10020D5C0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

uint64_t sub_10020D5D4()
{
  return 8;
}

id sub_10020D5E0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "list");
  *a2 = result;
  return result;
}

id sub_10020D618(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setList:", *a1);
}

uint64_t sub_10020D62C()
{
  return 8;
}

const char *sub_10020D638()
{
  return "daIsEventOnlyContainer";
}

id sub_10020D644@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsEventOnlyContainer");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D674(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsEventOnlyContainer:", *a1);
}

uint64_t sub_10020D688()
{
  return 8;
}

uint64_t sub_10020D694()
{
  return 8;
}

uint64_t sub_10020D6A0()
{
  return 8;
}

uint64_t sub_10020D6AC()
{
  return 8;
}

const char *sub_10020D6B8()
{
  return "daIsNotificationsCollection";
}

id sub_10020D6C4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "daIsNotificationsCollection");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D6F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDaIsNotificationsCollection:", *a1);
}

uint64_t sub_10020D708()
{
  return 8;
}

uint64_t sub_10020D714()
{
  return 8;
}

id sub_10020D720@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "inactive");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D750(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setInactive:", *a1);
}

uint64_t sub_10020D764()
{
  return 8;
}

uint64_t sub_10020D770()
{
  return 8;
}

uint64_t sub_10020D77C()
{
  return 8;
}

id sub_10020D788@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "completed");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D7B8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setCompleted:", *a1);
}

uint64_t sub_10020D7CC()
{
  return 8;
}

uint64_t sub_10020D7D8()
{
  return 8;
}

uint64_t sub_10020D7E4()
{
  return 8;
}

uint64_t sub_10020D7F8()
{
  return 8;
}

const char *sub_10020D804()
{
  return "isExtraneous";
}

id sub_10020D810@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isExtraneous");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D840(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsExtraneous:", *a1);
}

uint64_t sub_10020D854()
{
  return 8;
}

id sub_10020D860@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10020D890(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

uint64_t sub_10020D8A4()
{
  return 8;
}

uint64_t sub_10020D8B0()
{
  return 8;
}

uint64_t sub_10020D8BC()
{
  return 8;
}

uint64_t sub_10020D8C8()
{
  return 8;
}

uint64_t sub_10020D8D4()
{
  return 8;
}

uint64_t sub_10020D8E0()
{
  return 8;
}

const char *sub_10020D8EC()
{
  return "originalAlarmUID";
}

uint64_t sub_10020D900()
{
  return 8;
}

const char *sub_10020D90C()
{
  return "ckDirtyFlags";
}

id sub_10020D918@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "ckDirtyFlags");
  *a2 = (_WORD)result;
  return result;
}

id sub_10020D948(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setCkDirtyFlags:", *a1);
}

uint64_t sub_10020D95C()
{
  return 8;
}

uint64_t sub_10020D968()
{
  return 8;
}

uint64_t sub_10020D974()
{
  return 8;
}

uint64_t sub_10020D980()
{
  return 8;
}

uint64_t sub_10020D98C()
{
  return 8;
}

uint64_t sub_10020D998()
{
  return 8;
}

uint64_t sub_10020D9A4()
{
  return 8;
}

uint64_t sub_10020D9B0()
{
  return 8;
}

uint64_t sub_10020D9BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020D9E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10020DA0C()
{
  uint64_t v0;

  sub_1002074BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10020DA14(uint64_t a1, __n128 a2)
{
  uint64_t v2;

  return sub_100207B28(a2, a1, v2);
}

uint64_t sub_10020DA1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002080BC(a1, v1);
}

uint64_t sub_10020DA24(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10020DB04()
{
  void *v0;
  unsigned int v1;

  v1 = objc_msgSend(v0, "activityTypeRawValue");
  if (v1 >= 6)
    return 6;
  else
    return (0x20504030100uLL >> (8 * v1));
}

uint64_t sub_10020DB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100840C50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840C50);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10020DBD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10020DC0C + 4 * byte_1006AFE90[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_10020DC0C()
{
  return 6579297;
}

uint64_t sub_10020DC1C()
{
  return 0x6574656C706D6F63;
}

unint64_t sub_10020DC34()
{
  return 0xD000000000000018;
}

unint64_t sub_10020DC5C()
{
  return 0xD00000000000001BLL;
}

BOOL sub_10020DC7C(char *a1, char *a2)
{
  return word_1006B0178[*a1] == word_1006B0178[*a2];
}

Swift::Int sub_10020DCA0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(word_1006B0178[v1]);
  return Hasher._finalize()();
}

void sub_10020DCEC()
{
  char *v0;

  Hasher._combine(_:)(word_1006B0178[*v0]);
}

Swift::Int sub_10020DD20(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_1006B0178[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10020DD68@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10020FBBC(*a1);
  *a2 = result;
  return result;
}

void sub_10020DD90(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_1006B0178[*v1];
}

uint64_t sub_10020DDA8()
{
  unsigned __int8 *v0;

  return sub_10020DBD8(*v0);
}

void sub_10020DDB0(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFF98;
}

id sub_10020DDC0()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unsigned int v27;
  char v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t ObjCClassFromMetadata;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSString v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD v122[3];
  char v123[8];
  uint64_t v124;
  uint64_t v125[2];

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v111 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v111 - v17;
  v19 = objc_msgSend(v1, "accountIdentifier");
  if (!v19)
  {
    v45 = (void *)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
    __chkstk_darwin(ObjCClassFromMetadata);
    KeyPath = swift_getKeyPath(&unk_1006AFEE8);
    sub_10030399C();
    v49 = v48;
    swift_release(KeyPath);
    v50 = String._bridgeToObjectiveC()();
    v51 = objc_msgSend(v45, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v50, swift_bridgeObjectRelease(v49).n128_f64[0]);
LABEL_13:
    v57 = v51;

    swift_willThrow(v58);
    goto LABEL_14;
  }
  v20 = v19;
  v121 = v18;
  v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = objc_msgSend(v1, "activityDate");
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_12;
  }
  v24 = v23;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v25(v8, v16, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease(v22);
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_1008380D0);
    v52 = (void *)objc_opt_self(REMError);
    v53 = swift_getObjCClassFromMetadata(ObjectType);
    __chkstk_darwin(v53);
    v54 = swift_getKeyPath(&unk_1006AFF20);
    sub_10030399C();
    v56 = v55;
    swift_release(v54);
    v50 = String._bridgeToObjectiveC()();
    v51 = objc_msgSend(v52, "unexpectedNilPropertyWithClass:property:", v53, v50, swift_bridgeObjectRelease(v56).n128_f64[0]);
    goto LABEL_13;
  }
  v26 = v121;
  v25(v121, v8, v9);
  v27 = objc_msgSend(v1, "activityTypeRawValue");
  if (v27 > 5)
  {
    swift_bridgeObjectRelease(v22);
    v74 = (void *)objc_opt_self(REMError);
    v75 = swift_getObjCClassFromMetadata(ObjectType);
    __chkstk_darwin(v75);
    v76 = swift_getKeyPath(&unk_1006AFF48);
    sub_10030399C();
    v78 = v77;
    swift_release(v76);
    v79 = String._bridgeToObjectiveC()();
    v57 = objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", v75, v79, swift_bridgeObjectRelease(v78).n128_f64[0]);

    swift_willThrow(v80);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v26, v9);
  }
  else
  {
    v28 = v27;
    v29 = objc_msgSend(v1, "authorUserRecordIDString");
    if (v29)
    {
      v30 = v29;
      v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v33 = objc_msgSend(v1, "ckIdentifier");
      if (v33)
      {
        v34 = v33;
        v118 = v32;
        v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        v37 = objc_msgSend(v1, "sharedEntityName");
        if (v37)
        {
          v38 = v37;
          v116 = v36;
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v114 = v40;
          v115 = v39;

          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v121, v9);
          v113 = qword_1006B0148[(0x20504030100uLL >> (8 * v28)) & 7];
          v41 = objc_msgSend(v1, "ckParentCloudObjectEntityName");
          if (v41)
          {
            v42 = v41;
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v111 = v44;
            v112 = v43;

          }
          else
          {
            v111 = 0;
            v112 = 0;
          }
          v99 = v118;
          v100 = objc_msgSend(v1, "ckParentCloudObjectIdentifier", v111, v112);
          if (v100)
          {
            v101 = v100;
            v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
            v104 = v103;

          }
          else
          {
            v102 = 0;
            v104 = 0;
          }
          v105 = v116;
          v106 = objc_msgSend(v1, "uuidForChangeTracking");
          if (v106)
          {
            v107 = v106;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

            v108 = type metadata accessor for UUID(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v5, 0, 1, v108);
          }
          else
          {
            v109 = type metadata accessor for UUID(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v5, 1, 1, v109);
          }
          v110 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
          v72 = sub_1001074B8(v120, v22, (uint64_t)v13, v113, v119, v99, v112, v111, v102, v104, v117, v105, v115, v114, (uint64_t)v5);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v121, v9);
          return v72;
        }
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v118);
        swift_bridgeObjectRelease(v22);
        v93 = (void *)objc_opt_self(REMError);
        v94 = swift_getObjCClassFromMetadata(ObjectType);
        __chkstk_darwin(v94);
        v95 = swift_getKeyPath(&unk_1006B0008);
        sub_10030399C();
        v97 = v96;
        swift_release(v95);
        v86 = String._bridgeToObjectiveC()();
        v87 = objc_msgSend(v93, "unexpectedNilPropertyWithClass:property:", v94, v86, swift_bridgeObjectRelease(v97).n128_f64[0]);
      }
      else
      {
        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(v22);
        v88 = (void *)objc_opt_self(REMError);
        v89 = swift_getObjCClassFromMetadata(ObjectType);
        __chkstk_darwin(v89);
        v90 = swift_getKeyPath(&unk_1006AFFC8);
        sub_10030399C();
        v92 = v91;
        swift_release(v90);
        v86 = String._bridgeToObjectiveC()();
        v87 = objc_msgSend(v88, "unexpectedNilPropertyWithClass:property:", v89, v86, swift_bridgeObjectRelease(v92).n128_f64[0]);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      v81 = (void *)objc_opt_self(REMError);
      v82 = swift_getObjCClassFromMetadata(ObjectType);
      __chkstk_darwin(v82);
      v83 = swift_getKeyPath(&unk_1006AFF90);
      sub_10030399C();
      v85 = v84;
      swift_release(v83);
      v86 = String._bridgeToObjectiveC()();
      v87 = objc_msgSend(v81, "unexpectedNilPropertyWithClass:property:", v82, v86, swift_bridgeObjectRelease(v85).n128_f64[0]);
    }
    v57 = v87;

    swift_willThrow(v98);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v121, v9);
  }
LABEL_14:
  if (qword_100836FE0 != -1)
    swift_once(&qword_100836FE0, sub_10020DB48);
  v59 = type metadata accessor for Logger(0);
  sub_10001AAA8(v59, (uint64_t)qword_100840C50);
  swift_errorRetain(v57);
  v60 = v1;
  swift_errorRetain(v57);
  v61 = v60;
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc(32, -1);
    v65 = swift_slowAlloc(96, -1);
    v125[0] = v65;
    *(_DWORD *)v64 = 136315650;
    v124 = sub_10001A820(0xD000000000000014, 0x80000001006FD2C0, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125);
    *(_WORD *)(v64 + 12) = 2082;
    swift_getErrorValue(v57, v123, v122);
    v66 = Error.rem_errorDescription.getter(v122[1], v122[2]);
    v68 = v67;
    v124 = sub_10001A820(v66, v67, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125);
    swift_bridgeObjectRelease(v68);
    swift_errorRelease(v57);
    swift_errorRelease(v57);
    *(_WORD *)(v64 + 22) = 2082;
    v69 = sub_10020E9FC();
    v71 = v70;
    v124 = sub_10001A820(v69, v70, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125);

    swift_bridgeObjectRelease(v71);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "📓 %s: An unexpected error occurred {description: %{public}s, activityObject: %{public}s}", (uint8_t *)v64, 0x20u);
    swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    swift_errorRelease(v57);
  }
  else
  {
    swift_errorRelease(v57);
    swift_errorRelease(v57);
    swift_errorRelease(v57);

  }
  return 0;
}

uint64_t sub_10020E89C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "activityDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10020E920(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CDA2C(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setActivityDate:", isa);

}

uint64_t sub_10020E9FC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  const char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v47 - v9;
  v11 = sub_10001A630((uint64_t *)&unk_10083A270);
  v12 = swift_allocObject(v11, 232, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1006A5140;
  v13 = objc_msgSend(v1, "accountIdentifier");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v18 = sub_1000184F8();
  *(_QWORD *)(v12 + 64) = v18;
  if (v17)
    v19 = v15;
  else
    v19 = 7104878;
  v20 = 0xE300000000000000;
  if (v17)
    v21 = v17;
  else
    v21 = 0xE300000000000000;
  *(_QWORD *)(v12 + 32) = v19;
  *(_QWORD *)(v12 + 40) = v21;
  v22 = objc_msgSend(v1, "activityTypeRawValue");
  v23 = 6579297;
  switch(v22)
  {
    case 0u:
      v20 = 0xE700000000000000;
      v23 = 0x6E776F6E6B6E75;
      goto LABEL_18;
    case 1u:
      goto LABEL_18;
    case 2u:
      v24 = "titleMayHaveDirtyHashtag";
      goto LABEL_15;
    case 3u:
      v24 = "notesMayHaveDirtyHashtag";
LABEL_15:
      v20 = (unint64_t)(v24 - 32) | 0x8000000000000000;
      v23 = 0xD000000000000018;
      goto LABEL_18;
    case 4u:
      v23 = 0xD00000000000001BLL;
      v20 = 0x80000001006FD190;
      goto LABEL_18;
    case 5u:
      v20 = 0xE800000000000000;
      v23 = 0x6574656C706D6F63;
LABEL_18:
      *(_QWORD *)(v12 + 96) = &type metadata for String;
      *(_QWORD *)(v12 + 104) = v18;
      *(_QWORD *)(v12 + 72) = v23;
      break;
    default:
      *(_QWORD *)(v12 + 96) = &type metadata for String;
      *(_QWORD *)(v12 + 104) = v18;
      *(_QWORD *)(v12 + 72) = 7104878;
      break;
  }
  *(_QWORD *)(v12 + 80) = v20;
  v25 = objc_msgSend(v1, "ckIdentifier");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v30 = (uint64_t *)(v12 + 112);
    *(_QWORD *)(v12 + 136) = &type metadata for String;
    *(_QWORD *)(v12 + 144) = v18;
    if (v29)
    {
      *v30 = v27;
      goto LABEL_24;
    }
  }
  else
  {
    v30 = (uint64_t *)(v12 + 112);
    *(_QWORD *)(v12 + 136) = &type metadata for String;
    *(_QWORD *)(v12 + 144) = v18;
  }
  *v30 = 7104878;
  v29 = 0xE300000000000000;
LABEL_24:
  *(_QWORD *)(v12 + 120) = v29;
  v31 = objc_msgSend(v1, "sharedEntityName");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

    v36 = (uint64_t *)(v12 + 152);
    *(_QWORD *)(v12 + 176) = &type metadata for String;
    *(_QWORD *)(v12 + 184) = v18;
    if (v35)
    {
      *v36 = v33;
      goto LABEL_29;
    }
  }
  else
  {
    v36 = (uint64_t *)(v12 + 152);
    *(_QWORD *)(v12 + 176) = &type metadata for String;
    *(_QWORD *)(v12 + 184) = v18;
  }
  *v36 = 7104878;
  v35 = 0xE300000000000000;
LABEL_29:
  *(_QWORD *)(v12 + 160) = v35;
  v37 = objc_msgSend(v1, "uuidForChangeTracking");
  if (v37)
  {
    v38 = v37;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  v40 = v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v8, v39, 1, v2);
  sub_1000F2CE4((uint64_t)v8, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v2))
  {
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
    v41 = (uint64_t *)(v12 + 192);
    *(_QWORD *)(v12 + 216) = &type metadata for String;
    *(_QWORD *)(v12 + 224) = v18;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v4, v10, v2);
    v43 = sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
    v44 = UUID.uuidString.getter(v43);
    v42 = v45;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v2);
    v41 = (uint64_t *)(v12 + 192);
    *(_QWORD *)(v12 + 216) = &type metadata for String;
    *(_QWORD *)(v12 + 224) = v18;
    if (v42)
    {
      *v41 = v44;
      goto LABEL_37;
    }
  }
  *v41 = 7104878;
  v42 = 0xE300000000000000;
LABEL_37:
  *(_QWORD *)(v12 + 200) = v42;
  return String.init(format:_:)(0xD00000000000006BLL, 0x80000001006FD1B0, v12);
}

void sub_10020EE70(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  double v10;
  id v11;
  Class isa;
  NSString v13;
  double v14;
  id v15;
  id v16;
  NSString v17;
  double v18;
  NSString v19;
  double v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "accountIdentifier", v6);
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setAccountIdentifier:", v9, v10);

  v11 = objc_msgSend(a1, "activityDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v11);

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(v2, "setActivityDate:", isa);

  objc_msgSend(v2, "setActivityTypeRawValue:", (__int16)word_1006B0178[(char)sub_10020FBE8((unint64_t)objc_msgSend(a1, "activityType"))]);
  v13 = objc_msgSend(a1, "authorUserRecordIDString");
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v13 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setAuthorUserRecordIDString:", v13, v14);

  v15 = objc_msgSend(a1, "ckParentCloudObjectEntityName");
  objc_msgSend(v2, "setCkParentCloudObjectEntityName:", v15);

  v16 = objc_msgSend(a1, "ckParentCloudObjectIdentifier");
  objc_msgSend(v2, "setCkParentCloudObjectIdentifier:", v16);

  v17 = objc_msgSend(a1, "ckIdentifier");
  if (!v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v17 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v17, v18);

  v19 = objc_msgSend(a1, "sharedEntityName");
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setSharedEntityName:", v19, v20);

}

void sub_10020F170(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  void *ObjCClassFromMetadata;
  id v10;
  id v11;
  id v12;
  id v13;

  v8 = type metadata accessor for REMCKSharedEntitySyncActivity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v8);
  v10 = objc_msgSend(ObjCClassFromMetadata, "entity");
  v11 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v10, a1);
  v12 = a2;
  v13 = v11;
  objc_msgSend(a1, "assignObject:toPersistentStore:", v13, v12);

  sub_10020EE70(a3);
  *a4 = v13;
}

id sub_10020F230()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  Class isa;
  objc_super v16;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v1, "uuidForChangeTracking", v8);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v10, 1, 1, v3);
    goto LABEL_5;
  }
  v12 = v11;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v10, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
LABEL_5:
    v13 = sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
    UUID.init()(v13);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    objc_msgSend(v1, "setUuidForChangeTracking:", isa);

    goto LABEL_6;
  }
  sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
LABEL_6:
  v16.receiver = v1;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, "willSave");
}

uint64_t type metadata accessor for REMCKSharedEntitySyncActivity()
{
  return objc_opt_self(REMCKSharedEntitySyncActivity);
}

id sub_10020F494()
{
  void *v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  id v17;
  Class isa;
  NSString v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  ObjectType = swift_getObjectType();
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v30 - v11;
  v13 = objc_msgSend(v0, "uuidForChangeTracking", v10);
  if (v13)
  {
    v14 = v13;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v8, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v15(v12, v4, v5);
      v31 = ObjectType;
      v16 = sub_10001A630(&qword_10083EF48);
      String.init<A>(describing:)(&v31, v16);
      v17 = objc_allocWithZone((Class)REMObjectID);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v19 = String._bridgeToObjectiveC()();
      v20 = objc_msgSend(v17, "initWithUUID:entityName:", isa, v19, swift_bridgeObjectRelease().n128_f64[0]);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
      return v20;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
  if (qword_100836FE0 != -1)
    swift_once(&qword_100836FE0, sub_10020DB48);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100840C50);
  v22 = v0;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v25 = 138412290;
    v27 = objc_msgSend(v22, "objectID");
    v31 = (uint64_t)v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    *v26 = v27;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Cannot return a -remObjectID because REMCKSharedEntitySyncActivity does not have a UUID for change tracking {%@}", v25, 0xCu);
    v28 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v26, 1, v28);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10020F82C(void *a1, id a2)
{
  NSObject *v4;
  NSObject *v5;
  NSString v6;
  double v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t v25;

  v4 = objc_msgSend(a2, "storeController");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a1, "accountIdentifier");
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v7 = swift_bridgeObjectRelease().n128_u64[0];
    }
    v8 = -[NSObject storeForAccountIdentifier:](v5, "storeForAccountIdentifier:", v6, v7);

    if (v8)
    {
      __chkstk_darwin(v9);
      v23[2] = a2;
      v23[3] = v8;
      v23[4] = a1;
      v10 = type metadata accessor for REMCKSharedEntitySyncActivity();
      NSManagedObjectContext.rem_performAndWait<A>(_:)(&v25, sub_10020FE14, v23, v10);

      return v25;
    }
    if (qword_100836FE0 != -1)
      swift_once(&qword_100836FE0, sub_10020DB48);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_100840C50);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v25 = v22;
      *(_DWORD *)v21 = 136315138;
      v24 = sub_10001A820(0xD000000000000022, 0x80000001006FD290, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "📓 REMCKSharedEntitySyncActivity:%s | Unable to get persistentStore for accountIdentifier.", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  else
  {
    if (qword_100836FE0 != -1)
      swift_once(&qword_100836FE0, sub_10020DB48);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_100840C50);
    v5 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136315138;
      v24 = sub_10001A820(0xD000000000000022, 0x80000001006FD290, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      _os_log_impl((void *)&_mh_execute_header, v5, v14, "📓 REMCKSharedEntitySyncActivity:%s | Unable to get storeController from RDStoreControllerManagedObjectContext", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
  }

  return 0;
}

uint64_t sub_10020FBBC(unsigned __int16 a1)
{
  if (a1 >= 6u)
    return 6;
  else
    return (0x20504030100uLL >> (8 * a1));
}

unint64_t sub_10020FBE8(unint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (a1 < 6)
    return 0x20504030100uLL >> (8 * a1);
  if (qword_100836FE0 != -1)
    swift_once(&qword_100836FE0, sub_10020DB48);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100840C50);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315394;
    v12 = sub_10001A820(0xD000000000000026, 0x80000001006FD260, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    *(_WORD *)(v7 + 12) = 2082;
    v12 = 0;
    v13 = 0xE000000000000000;
    if (a1 == 5)
      v9 = 0x6574656C706D6F63;
    else
      v9 = 0x206E776F6E6B6E75;
    if (a1 == 5)
      v10 = 0xE800000000000000;
    else
      v10 = 0xEF746C7561666564;
    v11 = v10;
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease();
    v12 = sub_10001A820(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "📓 %s: An unexpected error occurred: unknown activityType: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  return 0;
}

void sub_10020FE14(_QWORD *a1@<X8>)
{
  void **v1;

  sub_10020F170(v1[2], v1[3], v1[4], a1);
}

const char *sub_10020FE20()
{
  return "accountIdentifier";
}

void sub_10020FE2C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_accountIdentifier, a2);
}

void sub_10020FE48(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setAccountIdentifier_);
}

const char *sub_10020FE64()
{
  return "activityDate";
}

uint64_t sub_10020FE78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10020DB04();
  *a1 = result;
  return result;
}

id sub_10020FEA0(char *a1, id *a2)
{
  return objc_msgSend(*a2, "setActivityTypeRawValue:", word_1006B0184[*a1]);
}

const char *sub_10020FEC0()
{
  return "authorUserRecordIDString";
}

void sub_10020FECC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_authorUserRecordIDString, a2);
}

void sub_10020FEE8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setAuthorUserRecordIDString_);
}

void sub_10020FF04(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_ckIdentifier, a2);
}

void sub_10020FF20(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setCkIdentifier_);
}

const char *sub_10020FF3C()
{
  return "sharedEntityName";
}

void sub_10020FF48(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_sharedEntityName, a2);
}

void sub_10020FF64(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setSharedEntityName_);
}

uint64_t getEnumTagSinglePayload for REMCKSharedEntitySyncActivity.ActivityType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMCKSharedEntitySyncActivity.ActivityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10021005C + 4 * byte_1006AFE9B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100210090 + 4 * byte_1006AFE96[v4]))();
}

uint64_t sub_100210090(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100210098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002100A0);
  return result;
}

uint64_t sub_1002100AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002100B4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1002100B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002100C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMCKSharedEntitySyncActivity.ActivityType()
{
  return &type metadata for REMCKSharedEntitySyncActivity.ActivityType;
}

unint64_t sub_1002100E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840C90;
  if (!qword_100840C90)
  {
    v1 = sub_1000A5A94(&qword_100840C98);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100840C90);
  }
  return result;
}

unint64_t sub_100210130()
{
  unint64_t result;

  result = qword_100840CA0;
  if (!qword_100840CA0)
  {
    result = swift_getWitnessTable(&unk_1006B0118, &type metadata for REMCKSharedEntitySyncActivity.ActivityType);
    atomic_store(result, (unint64_t *)&qword_100840CA0);
  }
  return result;
}

uint64_t sub_100210174(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * i);
    v19 = v18[1];
    v20[0] = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain(v19);
    a1(v20);
    if (v3)
    {
      swift_release(a3);
      return swift_bridgeObjectRelease(v19);
    }
    result = swift_bridgeObjectRelease(v19);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
      break;
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100210320(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  sub_100210654(a1, a2, a3, type metadata accessor for RDElementManualSortID);
}

void sub_10021033C(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  id v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v10 = sub_10011A5DC();
    v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    v20 = v19;
    v32 = v19;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v34;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v34 = v22;
      a1(&v34);

      if (v4)
      {
        v29 = v5;
        goto LABEL_39;
      }
      v13 = v23;
      v14 = v24;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v28 = v13 + 6;
              while (v30 != v28)
              {
                v26 = *(_QWORD *)(v31 + 8 * v28++);
                if (v26)
                {
                  v23 = v28 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v25);
    }
  }
  v29 = v5;
LABEL_39:
  sub_1000C6560(v29);
}

void sub_100210638(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  sub_100210654(a1, a2, a3, type metadata accessor for RDAccountManualSortID);
}

void sub_100210654(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;

  v5 = v4;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    v35 = 0;
    v8 = 0;
    v9 = 0;
    v10 = __CocoaDictionary.makeIterator()(v7) | 0x8000000000000000;
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a3 + 32);
    v8 = ~v11;
    v35 = a3 + 64;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 64);
    v10 = a3;
  }
  swift_bridgeObjectRetain(a3);
  v15 = 0;
  v34 = (unint64_t)(v8 + 64) >> 6;
  v32 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((v10 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v16 = __CocoaDictionary.Iterator.next()(v14);
  if (v16)
  {
    v18 = v16;
    v19 = v17;
    v38 = v16;
    v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(v37, &v38, v32, v20, 7);
    v21 = (id)v37[0];
    swift_unknownObjectRelease(v18);
    v38 = v19;
    v22 = a4(0);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(v37, &v38, v32, v22, 7);
    v23 = v37[0];
    swift_unknownObjectRelease(v19);
    v24 = v15;
    v25 = v9;
    while (v21)
    {
      v37[0] = v21;
      v37[1] = v23;
      a1(v37);
      swift_release(v23);

      if (v5)
      {
        v31 = v10;
        goto LABEL_39;
      }
      v15 = v24;
      v9 = v25;
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_11;
LABEL_14:
      if (v9)
      {
        v25 = (v9 - 1) & v9;
        v26 = __clz(__rbit64(v9)) | (v15 << 6);
        v24 = v15;
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v34)
          break;
        v27 = *(_QWORD *)(v35 + 8 * v24);
        if (!v27)
        {
          v28 = v15 + 2;
          if (v15 + 2 >= v34)
            break;
          v27 = *(_QWORD *)(v35 + 8 * v28);
          if (v27)
            goto LABEL_25;
          v28 = v15 + 3;
          if (v15 + 3 >= v34)
            break;
          v27 = *(_QWORD *)(v35 + 8 * v28);
          if (v27)
            goto LABEL_25;
          v28 = v15 + 4;
          if (v15 + 4 >= v34)
            break;
          v27 = *(_QWORD *)(v35 + 8 * v28);
          if (v27)
          {
LABEL_25:
            v24 = v28;
          }
          else
          {
            v24 = v15 + 5;
            if (v15 + 5 >= v34)
              break;
            v27 = *(_QWORD *)(v35 + 8 * v24);
            if (!v27)
            {
              v30 = v15 + 6;
              while (v34 != v30)
              {
                v27 = *(_QWORD *)(v35 + 8 * v30++);
                if (v27)
                {
                  v24 = v30 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v25 = (v27 - 1) & v27;
        v26 = __clz(__rbit64(v27)) + (v24 << 6);
      }
      v29 = 8 * v26;
      v23 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + v29);
      v21 = *(id *)(*(_QWORD *)(v10 + 48) + v29);
      swift_retain(v23);
    }
  }
  v31 = v10;
LABEL_39:
  sub_1000C6560(v31);
}

uint64_t sub_10021096C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100840CB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840CB0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002109FC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  const char *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  unsigned int *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **p_weak_ivar_lyt;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  NSObject *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  _QWORD *v98;
  id v99;
  uint64_t v100;
  void (*v102)(_QWORD);
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t);
  uint64_t v112;
  id v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(_QWORD);
  __int128 v127[2];
  uint64_t v128;
  id v129;
  uint64_t aBlock;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v125 = a4;
  v126 = a3;
  v117 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v115 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v119 = (uint64_t)&v105 - v9;
  v120 = type metadata accessor for Date(0);
  v118 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v114 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v124 = (char *)&v105 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v105 - v14;
  v16 = type metadata accessor for RDUserNotificationType(0);
  v122 = *(_QWORD *)(v16 - 8);
  v123 = v16;
  __chkstk_darwin(v16);
  v121 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMNotificationIdentifier(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (uint64_t *)((char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = v4;
  v27 = *(void **)(v4 + 32);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v23 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v22, v24);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v26, v22);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_42:
    swift_once(&qword_100836FE8, sub_10021096C);
LABEL_4:
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_100840CB0);
    v30 = v26;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v35 = -[NSObject objectID](v30, "objectID");
      aBlock = (uint64_t)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131);
      *v34 = v35;

      v36 = "Not presenting reminderAlarm banner for completed reminder. {reminderID: %@}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v36, v33, 0xCu);
      v42 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v42);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
LABEL_13:
      v43 = v126;

      if (v43)
        v43(0);

      return 0;
    }
    goto LABEL_12;
  }
  v26 = *(id *)a1;
  if ((objc_msgSend(v26, "isCompleted") & 1) != 0)
  {
    if (qword_100836FE8 == -1)
      goto LABEL_4;
    goto LABEL_42;
  }
  v37 = objc_msgSend(v26, "list");
  v38 = objc_msgSend(v37, "objectID");

  v39 = objc_msgSend((id)objc_opt_self(REMList), "siriFoundInAppsListID");
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  LOBYTE(v37) = static NSObject.== infix(_:_:)(v38);

  if ((v37 & 1) != 0)
  {
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_100840CB0);
    v30 = v26;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v41 = -[NSObject objectID](v30, "objectID");
      aBlock = (uint64_t)v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131);
      *v34 = v41;

      v36 = "Not presenting reminderAlarm banner for SiriFoundInApps reminder. {reminderID: %@}";
      goto LABEL_11;
    }
LABEL_12:

    v31 = v30;
    goto LABEL_13;
  }
  v44 = v26;
  v45 = REMNotificationIdentifier.init(reminder:)();
  v110 = REMNotificationIdentifier.requestIdentifier.getter(v45);
  v112 = v46;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v47 = *(void **)(a1 + 8);
  v48 = *(_QWORD *)(a1 + 16);
  v49 = *(_QWORD *)(a1 + 24);
  v50 = *(unsigned __int8 *)(a1 + 32);
  v51 = v44;
  v52 = v121;
  REMNotificationIdentifier.init(reminder:)();
  v53 = (unsigned int *)&enum case for RDUserNotificationType.reminderAlarm(_:);
  if (v50 >= 4)
    v53 = (unsigned int *)&enum case for RDUserNotificationType.dueDateDeltaAlarm(_:);
  v54 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v122 + 104))(v52, *v53, v123);
  Date.init()(v54);
  v113 = v51;
  v55 = sub_10023F73C((void (**)(char *, uint64_t, __n128))v51, 0, 0);
  UNMutableNotificationContent.setFiresBeforeFirstUnlock(_:)(*(_BYTE *)(a1 + 34));
  sub_100241F24((uint64_t)v55, a1, (uint64_t)v15);
  v56 = v118;
  v57 = v120;
  v111 = *(uint64_t (**)(char *, uint64_t))(v118 + 8);
  v58 = v111(v15, v120);
  Date.init()(v58);
  p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
  if ((v50 - 1) < 3)
  {
    LOBYTE(v60) = 2;
    goto LABEL_33;
  }
  v61 = v119;
  v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
  v106(v119, 1, 1, v57);
  v109 = v48;
  v107 = v49;
  sub_1001BB164(v47, v48, v49, v50);
  v129 = objc_msgSend(v47, "trigger");
  v62 = v57;
  v63 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v64 = sub_10001A630((uint64_t *)&unk_100846B40);
  v65 = swift_dynamicCast(v127, &v129, v63, v64, 6);
  v108 = v55;
  if ((v65 & 1) != 0)
  {
    sub_10001BCA8(v127, (uint64_t)&aBlock);
    v66 = v132;
    v67 = v133;
    sub_10000A388(&aBlock, v132);
    v68 = (uint64_t)v115;
    v69 = v113;
    (*(void (**)(id, char *, uint64_t, uint64_t))(v67 + 24))(v113, v124, v66, v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v68, 1, v62) == 1)
    {
      sub_10000882C(v68, (uint64_t *)&unk_1008380D0);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
      v55 = v108;
      v61 = v119;
    }
    else
    {
      v72 = v68;
      v73 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
      v74 = v114;
      v73(v114, v72, v62);
      v55 = v108;
      UNMutableNotificationContent.setLastRecurringFireDate(_:)(v74);
      v61 = v119;
      sub_10000882C(v119, (uint64_t *)&unk_1008380D0);
      v73((char *)v61, (uint64_t)v74, v62);
      v106(v61, 0, 1, v62);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
      p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
    }
    v70 = v109;
    v71 = v107;
  }
  else
  {
    v128 = 0;
    memset(v127, 0, sizeof(v127));
    sub_10000882C((uint64_t)v127, &qword_100840E70);
    v70 = v109;
    v71 = v107;
    v69 = v113;
  }
  v60 = sub_10021922C(v69, v47, v124, v61);
  sub_1001BB1AC(v47, v70, v71, v50);
  if (p_weak_ivar_lyt[509] != (void *)-1)
    swift_once(&qword_100836FE8, sub_10021096C);
  v75 = type metadata accessor for Logger(0);
  v76 = sub_10001AAA8(v75, (uint64_t)qword_100840CB0);
  v77 = v69;
  v115 = (char *)v76;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(22, -1);
    v81 = (_QWORD *)swift_slowAlloc(8, -1);
    v82 = swift_slowAlloc(32, -1);
    aBlock = v82;
    *(_DWORD *)v80 = 136446466;
    LOBYTE(v127[0]) = v60;
    LODWORD(v118) = v60;
    v83 = String.init<A>(describing:)(v127, &type metadata for RDAlarmNotificationConsumer.BannerBehavior);
    *(_QWORD *)&v127[0] = sub_10001A820(v83, v84, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, (char *)v127 + 8);
    *(_QWORD *)&v85 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v80 + 12) = 2114;
    v86 = objc_msgSend(v77, "objectID", v85);
    *(_QWORD *)&v127[0] = v86;
    LOBYTE(v60) = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, (char *)v127 + 8);
    *v81 = v86;

    _os_log_impl((void *)&_mh_execute_header, v78, v79, "bannerBehavior determined {bannerBehavior: %{public}s, reminderID: %{public}@}", (uint8_t *)v80, 0x16u);
    v87 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v81, 1, v87);
    swift_slowDealloc(v81, -1, -1);
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    v88 = v80;
    v55 = v108;
    swift_slowDealloc(v88, -1, -1);

    v89 = v119;
  }
  else
  {

    v89 = v61;
  }
  sub_10000882C(v89, (uint64_t *)&unk_1008380D0);
  if ((_BYTE)v60)
  {
LABEL_33:
    LODWORD(v115) = v60 != 2;
    v90 = objc_msgSend(v113, "objectID");
    v91 = objc_msgSend(v90, "stringRepresentation");

    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v119 = v92;
    __asm { BR              X9 }
  }
  v93 = v55;
  swift_bridgeObjectRelease();
  v94 = v77;
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.default.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v97 = 138543362;
    v99 = -[NSObject objectID](v94, "objectID");
    aBlock = (uint64_t)v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131);
    *v98 = v99;

    _os_log_impl((void *)&_mh_execute_header, v95, v96, "notificationCenter.retainNotification will not be called because lastBannerPresentationDate is too recent {reminderID: %{public}@}", v97, 0xCu);
    v100 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v98, 1, v100);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);
  }
  else
  {

    v95 = v94;
  }
  v102 = v126;
  v103 = (void (*)(char *, uint64_t))v111;
  v104 = v120;

  if (v102)
    v102(0);

  v103(v124, v104);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
  return 0;
}

void sub_100211B38(uint64_t a1, void (*a2)(uint64_t, __n128), uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  Class isa;
  uint64_t v49;
  Class v50;
  id v51;
  uint64_t v52;
  char v53;
  __n128 v54;
  uint64_t v55;
  uint64_t inited;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, __n128);
  _QWORD v79[3];
  char v80[8];
  char v81[80];
  uint64_t v82;
  uint64_t v83[2];

  v75 = a7;
  v76 = a8;
  v77 = a3;
  v78 = a2;
  v12 = type metadata accessor for DateComponents(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimeZone(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  __chkstk_darwin(v20);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100840CB0);
    swift_errorRetain(a1);
    v26 = swift_errorRetain(a1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v83[0] = v30;
      *(_DWORD *)v29 = 136315138;
      swift_getErrorValue(a1, v80, v79);
      v31 = Error.localizedDescription.getter(v79[1], v79[2]);
      v82 = sub_10001A820(v31, v32, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAlarmNotificationConsumer: Unable to post Alarm notification {error: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    v65 = a4;
    v66 = v24;
    v67 = v22;
    v68 = v21;
    v71 = v19;
    v74 = v17;
    v69 = v16;
    v72 = v15;
    v73 = v13;
    v70 = v12;
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100840CB0);
    v35 = a5;
    v36 = swift_bridgeObjectRetain_n(a5, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v40 = v74;
    v41 = v71;
    if (v39)
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v83[0] = swift_slowAlloc(32, -1);
      v43 = v83[0];
      *(_DWORD *)v42 = 136446210;
      v64 = v42 + 4;
      swift_bridgeObjectRetain(v35);
      v82 = sub_10001A820(v65, v35, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDAlarmNotificationConsumer: Posted Alarm notification {reminderID: %{public}s}", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      v40 = v74;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      v33 = swift_bridgeObjectRelease_n(v35, 2);
    }
    v44 = v73;
    v45 = v72;
    if (a6 == 2)
    {
      v46 = (void *)objc_opt_self(NSDateComponents);
      v47 = v66;
      Date.init()(v46);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v49 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v47, v68);
      static TimeZone.current.getter(v49);
      v50 = TimeZone._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v69);
      v51 = objc_msgSend(v46, "rem_dateComponentsWithDate:timeZone:isAllDay:", isa, v50, 0);

      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v51);
      DateComponents.hour.getter(v52);
      LOBYTE(v50) = v53;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v70);
      if ((v50 & 1) != 0)
      {
        v58 = v76;
        v59 = swift_bridgeObjectRetain_n(v76, 2);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc(12, -1);
          v63 = swift_slowAlloc(32, -1);
          v83[0] = v63;
          *(_DWORD *)v62 = 136315138;
          swift_bridgeObjectRetain(v58);
          v82 = sub_10001A820(v75, v58, v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
          swift_bridgeObjectRelease_n(v58, 3);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: %s}", v62, 0xCu);
          swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1, -1);
          swift_slowDealloc(v62, -1, -1);

        }
        else
        {

          v33 = swift_bridgeObjectRelease_n(v58, 2);
        }
      }
      else
      {
        type metadata accessor for Analytics(0, v54);
        v55 = sub_10001A630((uint64_t *)&unk_10083A260);
        inited = swift_initStackObject(v55, v81);
        *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
        *(_QWORD *)(inited + 32) = 1701869940;
        *(_QWORD *)(inited + 40) = 0xE400000000000000;
        *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
        *(_QWORD *)(inited + 56) = 0x4872656767697274;
        *(_QWORD *)(inited + 64) = 0xEB0000000072756FLL;
        *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
        v57 = sub_1002AF09C(inited);
        static Analytics.postEvent(_:payload:duration:)(0xD000000000000020, 0x80000001006FD3F0, v57, 0, 1);
        v33 = swift_bridgeObjectRelease();
      }
    }
  }
  if (v78)
    v78(a1, v33);
}

void sub_100212294(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  NSString v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock[5];
  uint64_t v39;

  v6 = v5;
  v36 = a4;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v6 + 32);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) != 0)
  {
    if (qword_100836FE8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836FE8, sub_10021096C);
LABEL_3:
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100840CB0);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v35 = a5;
    v25 = v24;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136446210;
    swift_bridgeObjectRetain(a2);
    v37 = sub_10001A820(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "notificationCenter.releaseNotification {identifier: %{public}s}", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v26 = v25;
    a5 = v35;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v27 = *(void **)(v6 + 16);
  v28 = a3[3];
  v29 = a3[4];
  sub_10000A388(a3, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
  v30 = String._bridgeToObjectiveC()();
  v31 = String._bridgeToObjectiveC()();
  if (v36)
  {
    aBlock[4] = v36;
    v39 = a5;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E18E4;
    aBlock[3] = (uint64_t)&unk_1007EA480;
    v32 = _Block_copy(aBlock);
    v33 = v39;
    swift_retain();
    swift_release(v33);
  }
  else
  {
    v32 = 0;
  }
  objc_msgSend(v27, "releaseNotificationWithIdentifier:reference:completion:", v30, v31, v32);
  _Block_release(v32);
  swift_bridgeObjectRelease();

}

uint64_t sub_1002125B8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  sub_1000178E8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(unsigned int *)(v0 + 96) | ((unint64_t)*(unsigned __int16 *)(v0 + 100) << 32));
  return swift_deallocClassInstance(v0, 102, 7);
}

uint64_t type metadata accessor for RDAlarmNotificationConsumer()
{
  return objc_opt_self(_TtC7remindd27RDAlarmNotificationConsumer);
}

void sub_100212630(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  int64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  id v49;
  char isUniquelyReferenced_nonNull_native;
  char *v51;
  int64_t v52;
  _BYTE *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void **p_weak_ivar_lyt;
  dispatch_group_t v74;
  dispatch_group_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint8_t *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t (*v87)(void *, _QWORD *);
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  void *v94;
  _QWORD *v95;
  void *v96;
  id v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void (*v105)(_QWORD, _QWORD, __n128);
  uint64_t v106;
  void (*v107)(_QWORD, _QWORD, __n128);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t (**v116)(void *, void *);
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t (**v129)(void *, void *);
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  __n128 v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  void *v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  char v147;
  char v148;
  _QWORD *v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(id, unint64_t);
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  void *v180;
  NSObject *v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  void *v185;
  id v186;
  unint64_t v187;
  unint64_t v188;
  dispatch_group_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  NSObject *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  void *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  __n128 v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  _BOOL4 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  __n128 v222;
  __n128 v223;
  id v224;
  id v225;
  __n128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char **v231;
  id v232;
  NSDate v233;
  NSObject *v234;
  NSObject *isa;
  os_log_type_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char **v240;
  id v241;
  _QWORD *v242;
  id v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  uint8_t *v254;
  uint64_t v255;
  void *v256;
  uint64_t (**v257)(void *, void *);
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  void *v270;
  _QWORD *v271;
  id v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  __n128 v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  void **v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  char *v293;
  void (**v294)(_QWORD, _QWORD);
  _QWORD *v295;
  uint64_t *v296;
  char *v297;
  _QWORD *v298;
  id v299;
  __n128 v300;
  uint64_t v301;
  uint64_t v302;
  __int128 aBlock;
  void *v304;
  void *v305;
  _QWORD *v306;
  _QWORD *v307;
  __int128 v308;
  char v309[8];
  char v310[8];
  char v311[8];
  char v312[8];
  void *v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD v316[3];
  char v317;
  char v318;
  char v319;

  v292 = a2;
  v281 = type metadata accessor for Date(0);
  v279 = *(_QWORD *)(v281 - 8);
  __chkstk_darwin(v281);
  v274 = (char *)&v273 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v275 = (char *)&v273 - v6;
  v273 = v7;
  __chkstk_darwin(v8);
  v290 = (char *)&v273 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v296 = (uint64_t *)((char *)&v273 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v295 = (_QWORD *)type metadata accessor for DispatchQoS(0);
  v294 = (void (**)(_QWORD, _QWORD))*(v295 - 1);
  __chkstk_darwin(v295);
  v293 = (char *)&v273 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMNotificationIdentifier(0);
  v301 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v273 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v273 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v288 = v2;
  v22 = *(void **)(v2 + 32);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
  v278 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_100:
    swift_once(&qword_100836FE8, sub_10021096C);
    goto LABEL_41;
  }
  v283.n128_u64[0] = (unint64_t)v11;
  v291 = v10;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = _swiftEmptyArrayStorage;
  v284 = a1;
  v300.n128_u64[0] = v14;
  v299 = v16;
  v298 = (_QWORD *)v23;
  if (v23)
  {
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v23, 0);
    v25 = (_BYTE *)(a1 + 64);
    do
    {
      v26 = (void *)*((_QWORD *)v25 - 3);
      v27 = *((_QWORD *)v25 - 2);
      v28 = *((_QWORD *)v25 - 1);
      v29 = *v25;
      v30 = *((id *)v25 - 4);
      sub_1001BB164(v26, v27, v28, v29);
      v31 = v299;
      v32 = REMNotificationIdentifier.init(reminder:)(v30);
      v33 = REMNotificationIdentifier.requestIdentifier.getter(v32);
      v35 = v34;
      (*(void (**)(id, unint64_t))(v301 + 8))(v31, v300.n128_u64[0]);

      sub_1001BB1AC(v26, v27, v28, v29);
      v24 = (_QWORD *)aBlock;
      if ((swift_isUniquelyReferenced_nonNull_native(aBlock) & 1) == 0)
      {
        sub_1001C1B0C(0, v24[2] + 1, 1);
        v24 = (_QWORD *)aBlock;
      }
      v37 = v24[2];
      v36 = v24[3];
      if (v37 >= v36 >> 1)
      {
        sub_1001C1B0C(v36 > 1, v37 + 1, 1);
        v24 = (_QWORD *)aBlock;
      }
      v25 += 40;
      v24[2] = v37 + 1;
      v38 = &v24[2 * v37];
      v38[4] = v33;
      v38[5] = v35;
      --v23;
    }
    while (v23);
    a1 = v284;
    v23 = (int64_t)v298;
  }
  v285 = sub_10011EE40((uint64_t)v24);
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_bridgeObjectRetain(a1);
    v39 = (unsigned __int8 *)(a1 + 66);
    v40 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if ((*(v39 - 1) & 1) == 0)
      {
        v44 = *(void **)(v39 - 34);
        v45 = *(void **)(v39 - 26);
        v46 = *(_QWORD *)(v39 - 18);
        v47 = *(_QWORD *)(v39 - 10);
        v48 = *(v39 - 2);
        LODWORD(v297) = *v39;
        v49 = v44;
        sub_1001BB164(v45, v46, v47, v48);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
        *(_QWORD *)&aBlock = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001C2124(0, *((_QWORD *)v40 + 2) + 1, 1);
          v40 = (char *)aBlock;
        }
        v42 = *((_QWORD *)v40 + 2);
        v41 = *((_QWORD *)v40 + 3);
        if (v42 >= v41 >> 1)
        {
          sub_1001C2124(v41 > 1, v42 + 1, 1);
          v40 = (char *)aBlock;
        }
        *((_QWORD *)v40 + 2) = v42 + 1;
        v43 = &v40[40 * v42];
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v45;
        *((_QWORD *)v43 + 6) = v46;
        *((_QWORD *)v43 + 7) = v47;
        v43[64] = v48;
        v43[65] = 0;
        v43[66] = (char)v297;
      }
      v39 += 40;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v51 = v40;
    v52 = *((_QWORD *)v40 + 2);
    if (v52)
      goto LABEL_20;
LABEL_28:
    swift_release(v51);
    v64 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  v51 = (char *)_swiftEmptyArrayStorage;
  v52 = _swiftEmptyArrayStorage[2];
  if (!v52)
    goto LABEL_28;
LABEL_20:
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v52, 0);
  v297 = v51;
  v53 = v51 + 64;
  do
  {
    v54 = (void *)*((_QWORD *)v53 - 3);
    v55 = *((_QWORD *)v53 - 2);
    v56 = *((_QWORD *)v53 - 1);
    v57 = *v53;
    v58 = *((id *)v53 - 4);
    sub_1001BB164(v54, v55, v56, v57);
    v59 = v299;
    v60 = REMNotificationIdentifier.init(reminder:)(v58);
    v61 = REMNotificationIdentifier.requestIdentifier.getter(v60);
    v63 = v62;
    (*(void (**)(id, unint64_t))(v301 + 8))(v59, v300.n128_u64[0]);

    sub_1001BB1AC(v54, v55, v56, v57);
    v64 = (_QWORD *)aBlock;
    if ((swift_isUniquelyReferenced_nonNull_native(aBlock) & 1) == 0)
    {
      sub_1001C1B0C(0, v64[2] + 1, 1);
      v64 = (_QWORD *)aBlock;
    }
    v66 = v64[2];
    v65 = v64[3];
    if (v66 >= v65 >> 1)
    {
      sub_1001C1B0C(v65 > 1, v66 + 1, 1);
      v64 = (_QWORD *)aBlock;
    }
    v53 += 40;
    v64[2] = v66 + 1;
    v67 = &v64[2 * v66];
    v67[4] = v61;
    v67[5] = v63;
    --v52;
  }
  while (v52);
  swift_release(v297);
LABEL_29:
  v11 = (_QWORD *)sub_10011EE40((uint64_t)v64);
  swift_bridgeObjectRelease();
  v68 = v292[3];
  v69 = v292[4];
  sub_10000A388(v292, v68);
  v276 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 16))(v68, v69);
  v277 = v70;
  v71 = swift_allocObject(&unk_1007EA378, 24, 7);
  v287 = v71;
  *(_QWORD *)(v71 + 16) = 0;
  v289 = (void **)(v71 + 16);
  v10 = swift_allocObject(&unk_1007EA3A0, 17, 7);
  *(_BYTE *)(v10 + 16) = 0;
  v286 = (_BYTE *)(v10 + 16);
  v72 = *(char **)(v288 + 40);
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  v280 = v10;
  if (v72)
  {
    swift_retain();
    v74 = dispatch_group_create();
    v75 = (dispatch_group_t *)v289;
    v76 = *v289;
    *v289 = v74;

    if (*v75)
      dispatch_group_enter(*v75);
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v77 = type metadata accessor for Logger(0);
    sub_10001AAA8(v77, (uint64_t)qword_100840CB0);
    v78 = sub_100018618((uint64_t)v292, (uint64_t)&aBlock);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.default.getter(v79);
    v81 = os_log_type_enabled(v79, v80);
    v297 = v72;
    if (v81)
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v308 = v83;
      *(_DWORD *)v82 = 136446210;
      v282 = (char *)(v82 + 4);
      v84 = v305;
      v85 = v11;
      v86 = v306;
      sub_10000A388(&aBlock, (uint64_t)v305);
      v87 = (uint64_t (*)(void *, _QWORD *))v86[2];
      v88 = v84;
      v10 = v280;
      v89 = v86;
      v11 = v85;
      v90 = v87(v88, v89);
      v315 = (_QWORD *)sub_10001A820(v90, v91, (uint64_t *)&v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}", v82, 0xCu);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      v92 = v82;
      v72 = v297;
      swift_slowDealloc(v92, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    }

    v93 = os_transaction_create("com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms");
    v94 = *v289;
    if (*v289)
    {
      sub_100018618((uint64_t)v292, (uint64_t)&v308);
      v95 = (_QWORD *)swift_allocObject(&unk_1007EA440, 80, 7);
      sub_10001BCA8(&v308, (uint64_t)(v95 + 2));
      v95[7] = v93;
      v95[8] = v10;
      v95[9] = v72;
      v306 = sub_10021921C;
      v307 = v95;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v304 = sub_1000094C8;
      v305 = &unk_1007EA458;
      v96 = _Block_copy(&aBlock);
      swift_retain();
      v97 = v94;
      swift_unknownObjectRetain(v93);
      v98 = swift_retain();
      v99 = v293;
      static DispatchQoS.unspecified.getter(v98);
      v315 = _swiftEmptyArrayStorage;
      v100 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v101 = sub_10001A630((uint64_t *)&unk_100838000);
      v102 = sub_1000D316C();
      v103 = v11;
      v104 = v10;
      v105 = (void (*)(_QWORD, _QWORD, __n128))v296;
      v106 = v291;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v315, v101, v102, v291, v100);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v99, v105, v278, v96);
      _Block_release(v96);
      swift_unknownObjectRelease(v93);
      swift_release(v297);

      v107 = v105;
      v10 = v104;
      v11 = v103;
      p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
      (*(void (**)(void (*)(_QWORD, _QWORD, __n128), uint64_t))(v283.n128_u64[0] + 8))(v107, v106);
      ((void (**)(char *, _QWORD *))v294)[1](v99, v295);
      swift_release(v307);
    }
    else
    {
      swift_release(v72);
      swift_unknownObjectRelease(v93);
    }
  }
  v314 = (uint64_t)_swiftEmptyArrayStorage;
  v313 = &_swiftEmptySetSingleton;
  v17 = v285;
  if (p_weak_ivar_lyt[509] != (void *)-1)
    goto LABEL_100;
LABEL_41:
  v108 = type metadata accessor for Logger(0);
  v109 = sub_10001AAA8(v108, (uint64_t)qword_100840CB0);
  sub_100018618((uint64_t)v292, (uint64_t)&aBlock);
  v110 = swift_bridgeObjectRetain_n(v17, 4);
  v293 = (char *)v109;
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.default.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    v113 = swift_slowAlloc(32, -1);
    v114 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v308 = v114;
    *(_DWORD *)v113 = 136446722;
    v115 = v305;
    v116 = (uint64_t (**)(void *, void *))v306;
    sub_10000A388(&aBlock, (uint64_t)v305);
    v117 = v116[2](v115, v116);
    v315 = (_QWORD *)sub_10001A820(v117, v118, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    *(_WORD *)(v113 + 12) = 2080;
    swift_bridgeObjectRetain(v285);
    v119 = Set.description.getter(v285, &type metadata for String, &protocol witness table for String);
    v121 = v120;
    swift_bridgeObjectRelease();
    v315 = (_QWORD *)sub_10001A820(v119, v121, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease_n(v285, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v113 + 22) = 2050;
    v122 = *(_QWORD **)(v285 + 16);
    swift_bridgeObjectRelease();
    v315 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "RDAlarmNotificationConsumer {identifier: %{public}s allowedSet: %s, count %{public}ld}", (uint8_t *)v113, 0x20u);
    swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v113, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    swift_bridgeObjectRelease_n(v17, 3);
  }

  sub_100018618((uint64_t)v292, (uint64_t)&aBlock);
  v123 = swift_bridgeObjectRetain_n(v11, 4);
  v124 = Logger.logObject.getter(v123);
  v125 = static os_log_type_t.default.getter(v124);
  if (os_log_type_enabled(v124, v125))
  {
    v126 = swift_slowAlloc(32, -1);
    v127 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v308 = v127;
    *(_DWORD *)v126 = 136446722;
    v128 = v305;
    v129 = (uint64_t (**)(void *, void *))v306;
    sub_10000A388(&aBlock, (uint64_t)v305);
    v130 = v129[2](v128, v129);
    v315 = (_QWORD *)sub_10001A820(v130, v131, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    *(_WORD *)(v126 + 12) = 2080;
    swift_bridgeObjectRetain(v11);
    v133 = Set.description.getter(v132, &type metadata for String, &protocol witness table for String);
    v135 = v134;
    swift_bridgeObjectRelease();
    v315 = (_QWORD *)sub_10001A820(v133, v135, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v126 + 22) = 2050;
    v136 = (_QWORD *)v11[2];
    swift_bridgeObjectRelease();
    v315 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v316);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v124, v125, "RDAlarmNotificationConsumer {identifier: %{public}s createSet: %s, count: %{public}ld}", (uint8_t *)v126, 0x20u);
    swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1, -1);
    swift_slowDealloc(v126, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    swift_bridgeObjectRelease_n(v11, 3);
  }

  v137 = v284;
  v138 = v298;
  if (v298)
  {
    v296 = v11;
    swift_bridgeObjectRetain(v284);
    swift_beginAccess(&v313, v312, 0, 0);
    swift_beginAccess(v289, v311, 0, 0);
    v139 = swift_beginAccess(v286, v310, 1, 0);
    v140 = (char *)(v137 + 66);
    v139.n128_u64[0] = 136446466;
    v283 = v139;
    v282 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v298 = v138;
      v142 = *(_QWORD **)(v140 - 34);
      v143 = *(void **)(v140 - 26);
      v144 = *(_QWORD *)(v140 - 18);
      v145 = *(_QWORD **)(v140 - 10);
      v146 = *(v140 - 2);
      v147 = *(v140 - 1);
      v297 = v140;
      v148 = *v140;
      v315 = v142;
      v316[0] = v143;
      v316[1] = v144;
      v316[2] = v145;
      v317 = v146;
      v318 = v147;
      v319 = v148;
      v149 = v142;
      sub_1001BB164(v143, v144, (uint64_t)v145, v146);
      v150 = v299;
      v151 = REMNotificationIdentifier.init(reminder:)(v149);
      v152 = REMNotificationIdentifier.requestIdentifier.getter(v151);
      v154 = v153;
      v155 = *(void (**)(id, unint64_t))(v301 + 8);
      v156 = v300.n128_u64[0];
      v155(v150, v300.n128_u64[0]);
      LOBYTE(v152) = sub_1001B2278(v152, v154, (uint64_t)v296);
      swift_bridgeObjectRelease();
      if ((v152 & 1) != 0)
      {
        v294 = (void (**)(_QWORD, _QWORD))v143;
        v295 = v145;
        v157 = v149;
        v158 = REMNotificationIdentifier.init(reminder:)(v157);
        v159 = REMNotificationIdentifier.requestIdentifier.getter(v158);
        v161 = v160;
        v155(v150, v156);
        v162 = (uint64_t)v313;
        swift_bridgeObjectRetain(v313);
        v163 = sub_1001B2278(v159, v161, v162);
        swift_bridgeObjectRelease();
        if ((v163 & 1) == 0)
        {
          v180 = v157;
          v181 = *v289;
          LODWORD(v291) = v146;
          if (v181)
            dispatch_group_enter(v181);
          *v286 = 1;
          v182 = v287;
          swift_retain();
          v183 = sub_1002109FC((uint64_t)&v315, (uint64_t)v292, sub_1002191C8, v182);
          swift_release(v182);
          v184 = (uint64_t)v295;
          v185 = v294;
          if ((v183 & 1) != 0)
          {
            v186 = v180;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v186);
            v188 = *(_QWORD *)((v314 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v187 = *(_QWORD *)((v314 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v188 >= v187 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v187 > 1);
            v141 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v188, v186);
            specialized Array._endMutation()(v141);
          }
          swift_beginAccess(&v313, &aBlock, 33, 0);
          sub_1002DB0E4((uint64_t *)&v308, v159, v161);
          swift_endAccess(&aBlock);

          sub_1001BB1AC(v185, v144, v184, v291);
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        swift_bridgeObjectRetain(v161);
        v165 = Logger.logObject.getter(v164);
        v166 = static os_log_type_t.default.getter(v165);
        v167 = v146;
        v168 = v144;
        if (!os_log_type_enabled(v165, v166))
        {

          swift_bridgeObjectRelease_n(v161, 2);
          sub_1001BB1AC(v294, v144, (uint64_t)v295, v146);

          goto LABEL_51;
        }
        v169 = swift_slowAlloc(22, -1);
        v170 = swift_slowAlloc(64, -1);
        *(_QWORD *)&aBlock = v170;
        *(_DWORD *)v169 = v283.n128_u32[0];
        swift_bridgeObjectRetain(v161);
        *(_QWORD *)(v169 + 4) = sub_10001A820(v159, v161, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease_n(v161, 3);
        *(_WORD *)(v169 + 12) = 2082;
        swift_bridgeObjectRetain(v313);
        v172 = Set.description.getter(v171, &type metadata for String, &protocol witness table for String);
        v173 = v165;
        v175 = v174;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v169 + 14) = sub_10001A820(v172, v175, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v173, v166, "RDAlarmNotificationConsumer skipping retain on alarm because already retained alarm for reminder in this consumeAlarms() run { identifier: %{public}s identifiersPresentedInThisRun:%{public}s }", (uint8_t *)v169, 0x16u);
        swift_arrayDestroy(v170, 2, v282);
        swift_slowDealloc(v170, -1, -1);
        swift_slowDealloc(v169, -1, -1);

        v176 = v294;
        v177 = v168;
        v178 = (uint64_t)v295;
        v179 = v167;
      }
      else
      {

        v176 = v143;
        v177 = v144;
        v178 = (uint64_t)v145;
        v179 = v146;
      }
      sub_1001BB1AC(v176, v177, v178, v179);
LABEL_51:
      v140 = v297 + 40;
      v138 = (_QWORD *)((char *)v298 - 1);
      if (v298 == (_QWORD *)1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v280;
        goto LABEL_66;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_66:
  v189 = (dispatch_group_t *)v289;
  swift_beginAccess(v289, v309, 0, 0);
  if (*v189)
    dispatch_group_enter(*v189);
  v190 = v288;
  sub_100018618((uint64_t)v292, (uint64_t)&aBlock);
  v191 = (_QWORD *)swift_allocObject(&unk_1007EA3C8, 88, 7);
  v191[2] = v285;
  sub_10001BCA8(&aBlock, (uint64_t)(v191 + 3));
  v192 = v287;
  v191[8] = v287;
  v191[9] = v10;
  v191[10] = v190;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100485D58(v276, v277, (uint64_t)sub_1002190B4, (uint64_t)v191);
  swift_release(v191);
  swift_bridgeObjectRelease();
  v193 = *(NSObject **)(v192 + 16);
  if (v193)
    dispatch_group_leave(v193);
  v194 = v314;
  if ((unint64_t)v314 >> 62)
  {
    if (v314 < 0)
      v246 = v314;
    else
      v246 = v314 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v314);
    v247 = _CocoaArrayWrapper.endIndex.getter(v246);
    swift_bridgeObjectRelease();
    if (v247)
      goto LABEL_72;
LABEL_105:
    swift_bridgeObjectRelease();
    swift_release(v287);
    v248 = v10;
LABEL_118:
    swift_release(v248);
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v314 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_105;
LABEL_72:
  v299 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v288 + 48));
  Date.init()(v299);
  if ((unint64_t)v194 >> 62)
  {
    if (v194 < 0)
      v249 = v194;
    else
      v249 = v194 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v194);
    v195 = _CocoaArrayWrapper.endIndex.getter(v249);
  }
  else
  {
    v195 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v194);
  }
  if (v195)
  {
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v195);
    if (v195 < 0)
    {
      __break(1u);
      goto LABEL_120;
    }
    v196 = 0;
    do
    {
      if ((v194 & 0xC000000000000001) != 0)
        v197 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v196, v194);
      else
        v197 = *(id *)(v194 + 8 * v196 + 32);
      v198 = v197;
      ++v196;
      v199 = objc_msgSend(v197, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v200);
      v201 = *(_QWORD *)(aBlock + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v201);
      v202 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v201, v199);
      specialized ContiguousArray._endMutation()(v202);
    }
    while (v195 != v196);
    v203 = (_QWORD *)aBlock;
    v204 = swift_bridgeObjectRelease();
  }
  else
  {
    v204 = swift_bridgeObjectRelease();
    v203 = _swiftEmptyArrayStorage;
  }
  v205 = v279;
  v206 = v275;
  v207 = v281;
  v297 = *(char **)(v279 + 16);
  ((void (*)(char *, char *, uint64_t, __n128))v297)(v275, v290, v281, v204);
  v208 = swift_bridgeObjectRetain_n(v203, 2);
  v209 = Logger.logObject.getter(v208);
  v210 = static os_log_type_t.default.getter(v209);
  v211 = os_log_type_enabled(v209, v210);
  v298 = v203;
  if (v211)
  {
    v212 = swift_slowAlloc(22, -1);
    v213 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v213;
    *(_DWORD *)v212 = 136446466;
    v214 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v203);
    v216 = Array.description.getter(v215, v214);
    v218 = v217;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v308 = sub_10001A820(v216, v218, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, (char *)&v308 + 8);
    swift_bridgeObjectRelease_n(v203, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v212 + 12) = 2082;
    v220 = Date.description.getter(v219);
    *(_QWORD *)&v308 = sub_10001A820(v220, v221, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, (char *)&v308 + 8);
    v222 = swift_bridgeObjectRelease();
    v296 = *(uint64_t **)(v205 + 8);
    ((void (*)(char *, uint64_t, __n128))v296)(v206, v281, v222);
    _os_log_impl((void *)&_mh_execute_header, v209, v210, "Updating lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v212, 0x16u);
    swift_arrayDestroy(v213, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v213, -1, -1);
    swift_slowDealloc(v212, -1, -1);
  }
  else
  {
    v223 = swift_bridgeObjectRelease_n(v203, 2);
    v296 = *(uint64_t **)(v205 + 8);
    ((void (*)(char *, uint64_t, __n128))v296)(v206, v207, v223);
  }

  v224 = objc_allocWithZone((Class)REMSaveRequest);
  v225 = objc_msgSend(v224, "initWithStore:", v299);
  objc_msgSend(v225, "setAuthor:", RDNotificationConsumerLastBannerPresentationDateAuthor);
  objc_msgSend(v225, "setUpdateLastModifiedDates:", 0);
  objc_msgSend(v225, "setSyncToCloudKit:", 0);
  v227 = v314;
  if (!((unint64_t)v314 >> 62))
  {
    v228 = *(_QWORD *)((v314 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v228)
      goto LABEL_88;
LABEL_114:
    v295 = v225;
    swift_bridgeObjectRelease();
    v251 = sub_100018618((uint64_t)v292, (uint64_t)&aBlock);
    v252 = Logger.logObject.getter(v251);
    v253 = static os_log_type_t.default.getter(v252);
    if (os_log_type_enabled(v252, v253))
    {
      v254 = (uint8_t *)swift_slowAlloc(12, -1);
      v255 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v308 = v255;
      *(_DWORD *)v254 = 136446210;
      v256 = v305;
      v257 = (uint64_t (**)(void *, void *))v306;
      sub_10000A388(&aBlock, (uint64_t)v305);
      v258 = v257[2](v256, v257);
      v302 = sub_10001A820(v258, v259, (uint64_t *)&v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &aBlock);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v252, v253, "os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}", v254, 0xCu);
      swift_arrayDestroy(v255, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v255, -1, -1);
      swift_slowDealloc(v254, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
    }

    v260 = os_transaction_create("com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate");
    v261 = v274;
    v262 = v290;
    v263 = v281;
    ((void (*)(char *, char *, uint64_t))v297)(v274, v290, v281);
    sub_100018618((uint64_t)v292, (uint64_t)&v308);
    v264 = v279;
    v265 = *(unsigned __int8 *)(v279 + 80);
    v266 = (v265 + 24) & ~v265;
    v267 = (v273 + v266 + 7) & 0xFFFFFFFFFFFFFFF8;
    v268 = (v267 + 47) & 0xFFFFFFFFFFFFFFF8;
    v269 = swift_allocObject(&unk_1007EA3F0, v268 + 8, v265 | 7);
    *(_QWORD *)(v269 + 16) = v298;
    (*(void (**)(uint64_t, char *, uint64_t))(v264 + 32))(v269 + v266, v261, v263);
    sub_10001BCA8(&v308, v269 + v267);
    *(_QWORD *)(v269 + v268) = v260;
    v306 = sub_100219168;
    v307 = (_QWORD *)v269;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v304 = sub_1000E18E4;
    v305 = &unk_1007EA408;
    v270 = _Block_copy(&aBlock);
    v271 = v307;
    swift_unknownObjectRetain(v260);
    swift_release(v271);
    v272 = v295;
    objc_msgSend(v295, "saveWithQueue:completion:", v278, v270);
    _Block_release(v270);

    swift_unknownObjectRelease(v260);
    ((void (*)(char *, uint64_t))v296)(v262, v263);
    swift_release(v287);
    v248 = v280;
    goto LABEL_118;
  }
  if (v314 < 0)
    v250 = v314;
  else
    v250 = v314 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v314);
  v228 = _CocoaArrayWrapper.endIndex.getter(v250);
  v226 = swift_bridgeObjectRelease();
  if (!v228)
    goto LABEL_114;
LABEL_88:
  if (v228 >= 1)
  {
    v229 = 0;
    v230 = v227 & 0xC000000000000001;
    v231 = &selRef_rd_isExcludedFromBackup;
    v226.n128_u64[0] = 138543362;
    v300 = v226;
    v301 = v228;
    do
    {
      if (v230)
        v234 = specialized _ArrayBuffer._getElementSlowPath(_:)(v229, v227);
      else
        v234 = *(id *)(v227 + 8 * v229 + 32);
      isa = v234;
      if (objc_msgSend(v234, v231[16]))
      {
        v233.super.isa = (Class)isa;
        isa = Logger.logObject.getter(v233.super.isa);
        v236 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(isa, v236))
        {
          v237 = swift_slowAlloc(12, -1);
          v238 = v227;
          v239 = v230;
          v240 = v231;
          v241 = v225;
          v242 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v237 = v300.n128_u32[0];
          v243 = -[objc_class objectID](v233.super.isa, "objectID");
          *(_QWORD *)(v237 + 4) = v243;
          *v242 = v243;

          _os_log_impl((void *)&_mh_execute_header, isa, v236, "Unable to update lastBannerPresentationDate reminder is Phantom {reminderID: %{public}@}", (uint8_t *)v237, 0xCu);
          v244 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v242, 1, v244);
          v245 = v242;
          v225 = v241;
          v231 = v240;
          v230 = v239;
          v227 = v238;
          v228 = v301;
          swift_slowDealloc(v245, -1, -1);
          swift_slowDealloc(v237, -1, -1);
        }
        else
        {

          isa = v233.super.isa;
        }
      }
      else
      {
        v232 = objc_msgSend(v225, "updateReminder:", isa);
        v233.super.isa = Date._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v232, "setLastBannerPresentationDate:", v233.super.isa);

      }
      ++v229;

    }
    while (v228 != v229);
    goto LABEL_114;
  }
LABEL_120:
  __break(1u);
}

void sub_1002144E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[24];

  swift_beginAccess(a3 + 16, v5, 0, 0);
  if (*(_BYTE *)(a3 + 16) == 1)
    sub_100260490();
  sub_100219D60(a1);
}

void sub_100214544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  _QWORD v62[7];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;

  v69 = a4;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v61 = a1;
    else
      v61 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v61);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = _swiftEmptyArrayStorage;
  v67 = a6;
  v68 = a3;
  if (v11)
  {
    v72[0] = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
      __break(1u);
      return;
    }
    v65 = a2;
    v66 = a5;
    v13 = 0;
    v12 = (_QWORD *)v72[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      else
        v14 = *(id *)(a1 + 8 * v13 + 32);
      v15 = v14;
      v16 = objc_msgSend(v14, "request");
      v17 = objc_msgSend(v16, "identifier");

      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v72[0] = v12;
      v22 = v12[2];
      v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001C1B0C(v21 > 1, v22 + 1, 1);
        v12 = (_QWORD *)v72[0];
      }
      ++v13;
      v12[2] = v22 + 1;
      v23 = &v12[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
    }
    while (v11 != v13);
    a3 = v68;
    a2 = v65;
    a5 = v66;
  }
  v24 = sub_10011EE40((uint64_t)v12);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a2 + 16) <= *(_QWORD *)(v24 + 16) >> 3)
  {
    v72[0] = v24;
    swift_bridgeObjectRetain(v24);
    sub_10059B880(a2);
    v25 = (_QWORD *)v24;
  }
  else
  {
    swift_bridgeObjectRetain(v24);
    v25 = sub_100215890(a2, v24);
  }
  if (qword_100836FE8 != -1)
    swift_once(&qword_100836FE8, sub_10021096C);
  v26 = v69 + 16;
  v66 = a5 + 16;
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001AAA8(v27, (uint64_t)qword_100840CB0);
  sub_100018618(a3, (uint64_t)v72);
  v29 = swift_bridgeObjectRetain_n(v24, 3);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v65 = v69 + 16;
    v32 = swift_slowAlloc(32, -1);
    v63 = swift_slowAlloc(64, -1);
    v71[0] = v63;
    *(_DWORD *)v32 = 136446722;
    v64 = v28;
    v33 = v73;
    v34 = v74;
    sub_10000A388(v72, v73);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
    v70 = sub_10001A820(v35, v36, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v72);
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain(v24);
    v38 = Set.description.getter(v37, &type metadata for String, &protocol witness table for String);
    v40 = v39;
    swift_bridgeObjectRelease();
    v70 = sub_10001A820(v38, v40, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease_n(v24, 2);
    a3 = v68;
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2050;
    v41 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRelease();
    v70 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDAlarmNotificationConsumer {identifier: %{public}s currentSet: %s, count: %{public}ld}", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    v42 = v32;
    v26 = v65;
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v72);
    swift_bridgeObjectRelease_n(v24, 3);
  }

  sub_100018618(a3, (uint64_t)v72);
  v43 = swift_bridgeObjectRetain_n(v25, 4);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v71[0] = v47;
    *(_DWORD *)v46 = 136446722;
    v48 = v73;
    v49 = v74;
    sub_10000A388(v72, v73);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v48, v49);
    v70 = sub_10001A820(v50, v51, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v72);
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain(v25);
    v53 = Set.description.getter(v52, &type metadata for String, &protocol witness table for String);
    v55 = v54;
    swift_bridgeObjectRelease();
    v70 = sub_10001A820(v53, v55, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 22) = 2050;
    v56 = v25[2];
    swift_bridgeObjectRelease();
    v70 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDAlarmNotificationConsumer {identifier: %{public}s removeSet: %s, count: %{public}ld}", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    v57 = v46;
    a3 = v68;
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v72);
    swift_bridgeObjectRelease_n(v25, 3);
  }

  __chkstk_darwin(v58);
  v59 = v69;
  v62[2] = v69;
  v62[3] = v66;
  v62[4] = v67;
  v62[5] = a3;
  sub_100210174((void (*)(_QWORD *))sub_100219F14, (uint64_t)v62, (uint64_t)v25);
  swift_bridgeObjectRelease();
  swift_beginAccess(v26, v72, 0, 0);
  v60 = *(NSObject **)(v59 + 16);
  if (v60)
    dispatch_group_leave(v60);
}

uint64_t sub_100214C0C(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v12;
  _BYTE v13[24];

  v8 = *a1;
  v9 = a1[1];
  swift_beginAccess(a2 + 16, v13, 0, 0);
  v10 = *(NSObject **)(a2 + 16);
  if (v10)
    dispatch_group_enter(v10);
  swift_beginAccess(a3, &v12, 1, 0);
  *a3 = 1;
  swift_retain();
  sub_100212294(v8, v9, a5, (uint64_t)sub_1002191C8, a2);
  return swift_release(a2);
}

void sub_100214CC8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BYTE v4[24];

  swift_beginAccess(a2 + 16, v4, 0, 0);
  v3 = *(NSObject **)(a2 + 16);
  if (v3)
    dispatch_group_leave(v3);
}

void sub_100214D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **p_weak_ivar_lyt;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  v53 = a4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_100840CB0);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v58[0] = v17;
      *(_DWORD *)v16 = 136446466;
      v18 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(a2);
      v20 = Array.description.getter(v19, v18);
      v22 = v21;
      swift_bridgeObjectRelease();
      v57 = sub_10001A820(v20, v22, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease_n(a2, 2);
      p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue(a1, v55, v54);
      v23 = Error.localizedDescription.getter(v54[1], v54[2]);
      v57 = sub_10001A820(v23, v24, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100840CB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    v26 = swift_bridgeObjectRetain_n(a2, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v58[0] = v52;
      *(_DWORD *)v29 = 136446466;
      v30 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(a2);
      v32 = Array.description.getter(v31, v30);
      v34 = v33;
      swift_bridgeObjectRelease();
      v57 = sub_10001A820(v32, v34, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      v36 = Date.description.getter(v35);
      v57 = sub_10001A820(v36, v37, v58);
      p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      v38 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v38);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v29, 0x16u);
      v39 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      v40 = swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v40);
    }

  }
  if (p_weak_ivar_lyt[509] != (void *)-1)
    swift_once(&qword_100836FE8, sub_10021096C);
  v41 = type metadata accessor for Logger(0);
  sub_10001AAA8(v41, (uint64_t)qword_100840CB0);
  v42 = sub_100018618(v53, (uint64_t)v58);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v57 = v46;
    *(_DWORD *)v45 = 136446210;
    v47 = v59;
    v48 = v60;
    sub_10000A388(v58, v59);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
    v56 = sub_10001A820(v49, v50, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v58);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v58);
  }

}

void sub_100215350(uint64_t a1, _QWORD *a2)
{
  sub_100212630(a1, a2);
}

void *sub_100215370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t isStackAllocationSafe;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  _QWORD v55[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for REMObjectID_Codable(0);
    v7 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    v3 = v55[0];
    v9 = v55[1];
    v11 = v55[2];
    v10 = v55[3];
    v12 = v55[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v9 = a1 + 56;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v50 = v3;
  v51 = v9;
  v52 = v11;
  v53 = v10;
  v54 = v12;
  v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v18);
        v20 = v19;
        goto LABEL_18;
      }
      v32 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        v19 = 0;
        v17 = 0;
        goto LABEL_18;
      }
      v34 = *(_QWORD *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        v17 = (v34 - 1) & v34;
        v18 = __clz(__rbit64(v34)) + (v32 << 6);
        v10 = v32;
        goto LABEL_17;
      }
      v35 = v10 + 2;
      if (v10 + 2 >= v33)
        goto LABEL_47;
      v34 = *(_QWORD *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        v32 = v35;
        goto LABEL_31;
      }
      if (v10 + 3 < v33)
      {
        v34 = *(_QWORD *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          v32 = v10 + 3;
          goto LABEL_31;
        }
        v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          v19 = 0;
          v17 = 0;
          v10 += 3;
LABEL_18:
          v53 = v10;
          v54 = v17;
          if (!v19)
            goto LABEL_56;
          goto LABEL_22;
        }
        v34 = *(_QWORD *)(v51 + 8 * v35);
        if (v34)
          goto LABEL_35;
        v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          v34 = *(_QWORD *)(v51 + 8 * v32);
          if (v34)
            goto LABEL_31;
          v32 = v33 - 1;
          v36 = v10 + 6;
          while (v33 != v36)
          {
            v34 = *(_QWORD *)(v51 + 8 * v36++);
            if (v34)
            {
              v32 = v36 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v19 = 0;
          v17 = 0;
          v10 = v32;
          goto LABEL_18;
        }
      }
      v19 = 0;
      v17 = 0;
      v10 = v35;
      goto LABEL_18;
    }
    v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21)
      goto LABEL_57;
    v22 = v21;
    v48 = v21;
    v23 = type metadata accessor for REMObjectID_Codable(0);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      v3 = v50;
LABEL_57:
      sub_1000C6560(v3);
      return (void *)v2;
    }
LABEL_22:
    v24 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_13;
    type metadata accessor for REMObjectID_Codable(0);
    v27 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
    v28 = static NSObject.== infix(_:_:)(v27);

    if ((v28 & 1) != 0)
      break;
    v29 = ~v25;
    while (1)
    {
      v26 = (v26 + 1) & v29;
      if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        break;
      v30 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
      v31 = static NSObject.== infix(_:_:)(v30);

      if ((v31 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v3 = v50;
    v11 = v52;
    v10 = v53;
    v12 = v54;
  }
LABEL_50:

  v38 = *(_BYTE *)(v2 + 32);
  v39 = v38 & 0x3F;
  v40 = (1 << v38) + 63;
  v41 = v40 >> 6;
  v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v42);
    sub_1002171F0((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0)), v41, v2, v26, &v50);
    v44 = v43;
    swift_release(v2);
    sub_1000C6560(v50);
  }
  else
  {
    v45 = (void *)swift_slowAlloc(v42, -1);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_1002171F0((unint64_t *)v45, v41, v2, v26, &v50);
    v44 = v46;
    swift_release(v2);
    sub_1000C6560(v50);
    swift_slowDealloc(v45, -1, -1);
  }
  return (void *)v44;
}

void *sub_100215890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[9];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v43 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v41 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v42 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v42)
          goto LABEL_47;
        v13 = *(_QWORD *)(v43 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v42)
            goto LABEL_47;
          v13 = *(_QWORD *)(v43 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v42)
              goto LABEL_47;
            v13 = *(_QWORD *)(v43 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v42)
                goto LABEL_47;
              v13 = *(_QWORD *)(v43 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v42)
                {
LABEL_47:
                  sub_1000C6560(a1);
                  return (void *)v2;
                }
                v13 = *(_QWORD *)(v43 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v42)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v43 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v44, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v44, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v17);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
      swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      sub_100217564((unint64_t *)((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v45);
      v37 = v36;
      swift_release(v2);
      sub_1000C6560(v45);
    }
    else
    {
      v38 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v38, (const void *)(v2 + 56), v35);
      sub_100217564((unint64_t *)v38, v34, v2, v21, &v45);
      v37 = v39;
      swift_release(v2);
      sub_1000C6560(v45);
      swift_slowDealloc(v38, -1, -1);
    }
    return (void *)v37;
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100215CF8(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840DF0);
}

void *sub_100215D44(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, (uint64_t *)&unk_100840DB0);
}

void *sub_100215D90(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E28);
}

void *sub_100215DDC(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100843AE0);
}

void *sub_100215E28(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E98);
}

void *sub_100215E74(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E90);
}

void *sub_100215EC0(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E88);
}

void *sub_100215F0C(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E80);
}

void *sub_100215F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t, __n128);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v43 = (char *)&v40 - v12;
  if (*(_QWORD *)(a2 + 16))
  {
    v44 = a1;
    v45 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = swift_bridgeObjectRetain(a1);
    if (v13)
    {
      v15 = 0;
      v41 = v6;
      v42 = (char *)(a2 + 56);
      while (1)
      {
        if (v15 >= v13)
          __break(1u);
        v16 = *(_QWORD *)(v8 + 72);
        v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
        v17(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v15, v7, v14);
        v45 = v15 + 1;
        v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          break;
        v40 = v18;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v43, v6, v7);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v7, v20);
        v22 = a2;
        v23 = -1 << *(_BYTE *)(a2 + 32);
        v24 = v21 & ~v23;
        if (((*(_QWORD *)&v42[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) != 0)
        {
          v25 = ~v23;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v17)(v10, *(_QWORD *)(v22 + 48) + v24 * v16, v7);
            v26 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v43, v7, v26);
            v28 = *(void (**)(char *, uint64_t))(v8 + 8);
            v28(v10, v7);
            if ((v27 & 1) != 0)
              break;
            v24 = (v24 + 1) & v25;
            if (((*(_QWORD *)&v42[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) == 0)
              goto LABEL_12;
          }
          isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v28)(v43, v7);
          v30 = *(_BYTE *)(v22 + 32);
          v31 = v30 & 0x3F;
          v32 = (1 << v30) + 63;
          v33 = v32 >> 6;
          v34 = 8 * (v32 >> 6);
          if (v31 <= 0xD
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v32 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v40 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0), v42, v34);
            sub_100217A88((unint64_t *)((char *)&v40 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0)), v33, v22, v24, &v44);
            v36 = v35;
            swift_release(v22);
            swift_bridgeObjectRelease();
          }
          else
          {
            v37 = (void *)swift_slowAlloc(v34, -1);
            memcpy(v37, v42, v34);
            sub_100217A88((unint64_t *)v37, v33, v22, v24, &v44);
            v36 = v38;
            swift_release(v22);
            swift_bridgeObjectRelease();
            swift_slowDealloc(v37, -1, -1);
          }
          return (void *)v36;
        }
        v28 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_12:
        v28(v43, v7);
        a1 = v44;
        v15 = v45;
        v13 = *(_QWORD *)(v44 + 16);
        a2 = v22;
        v6 = v41;
        if (v45 == v13)
        {
          v40(v41, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_1002163C4(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E00);
}

void *sub_100216410(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E08);
}

void *sub_10021645C(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E10);
}

void *sub_1002164A8(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E18);
}

void *sub_1002164F4(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E20);
}

void *sub_100216540(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E30);
}

void *sub_10021658C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v63 = (char *)&v57 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v64 = a1;
  v65 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v66 = v15;
  v67 = 0;
  v68 = v17 & v14;
  v62 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v58 = v6;
  v61 = a2;
  v59 = v20;
  v60 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v64 = v22;
    v65 = v28;
    v66 = v21;
    v67 = v27;
    v68 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1000C6560(v22);
      sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
      return (void *)v61;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v63, v6, v7);
    v33 = v61;
    v34 = *(_QWORD *)(v61 + 40);
    v35 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v62[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v63, v7);
    v24 = v67;
    v20 = v68;
    v22 = v64;
    v19 = v65;
    v21 = v66;
    v6 = v58;
    v59 = v68;
    v60 = v67;
    if (v68)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v60 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v10, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    v43 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v63, v7, v43);
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v10, v7);
    if ((v44 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v62[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v63, v7);
  v47 = *(_BYTE *)(v39 + 32);
  v48 = v47 & 0x3F;
  v49 = (1 << v47) + 63;
  v50 = v49 >> 6;
  v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v57 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0), v62, v51);
    sub_100217E54((unint64_t *)((char *)&v57 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0)), v50, v39, v38, &v64);
    v53 = v52;
    swift_release(v39);
    sub_1000C6560(v64);
  }
  else
  {
    v55 = (void *)swift_slowAlloc(v51, -1);
    memcpy(v55, v62, v51);
    sub_100217E54((unint64_t *)v55, v50, v39, v38, &v64);
    v53 = v56;
    swift_release(v39);
    sub_1000C6560(v64);
    swift_slowDealloc(v55, -1, -1);
  }
  return (void *)v53;
}

void *sub_100216B48(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_1008439E0);
}

void *sub_100216B94(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, (uint64_t *)&unk_100840E40);
}

void *sub_100216BE0(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100843FA0);
}

void *sub_100216C2C(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_1008446C0);
}

void *sub_100216C78(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100843950);
}

void *sub_100216CC4(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840DC0);
}

void *sub_100216D10(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840DC8);
}

void *sub_100216D5C(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, (uint64_t *)&unk_100840DD0);
}

void *sub_100216DA8(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, (uint64_t *)&unk_100840DE0);
}

void *sub_100216DF4(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100843BD0);
}

void *sub_100216E40(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840DF8);
}

void *sub_100216E8C(uint64_t a1, uint64_t a2)
{
  return sub_100216ED8(a1, a2, &qword_100840E38);
}

void *sub_100216ED8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t isStackAllocationSafe;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[9];
  _QWORD v32[2];

  v3 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v32[0] = a1;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v28 = a3;
    v5 = a2 + 56;
    v30 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    while (1)
    {
      v7 = *(void **)(v30 + 8 * v6++);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v3 + 40));
      v8 = v7;
      NSObject.hash(into:)(v31);

      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v5 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        v12 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
        v13 = static NSObject.== infix(_:_:)(v12);

        if ((v13 & 1) != 0)
        {
LABEL_10:

          v32[1] = v6;
          v18 = *(_BYTE *)(v3 + 32);
          v19 = v18 & 0x3F;
          v20 = (1 << v18) + 63;
          v21 = v20 >> 6;
          v22 = 8 * (v20 >> 6);
          if (v19 < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v20 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v28 - ((v22 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v3 + 56), v22);
            sub_100217858((unint64_t *)((char *)&v28 - ((v22 + 15) & 0x3FFFFFFFFFFFFFF0)), v21, v3, v11, v32, v28);
            v24 = v23;
            swift_release(v3);
            swift_bridgeObjectRelease(v32[0]);
          }
          else
          {
            v25 = (void *)swift_slowAlloc(v22, -1);
            memcpy(v25, (const void *)(v3 + 56), v22);
            sub_100217858((unint64_t *)v25, v21, v3, v11, v32, v28);
            v24 = v26;
            swift_release(v3);
            swift_bridgeObjectRelease(v32[0]);
            swift_slowDealloc(v25, -1, -1);
          }
          return (void *)v24;
        }
        v14 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v14;
          if (((*(_QWORD *)(v5 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            break;
          v15 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) != 0)
            goto LABEL_10;
        }
      }

      if (v6 == v29)
      {
        swift_bridgeObjectRelease(a1);
        return (void *)v3;
      }
    }
  }
  return (void *)v3;
}

void sub_1002171F0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  id v28;
  char v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  v5 = a5;
  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v42 = a3 + 56;
  while (2)
  {
    v39 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          v10 = v5[3];
          v9 = v5[4];
          if (v9)
          {
            v11 = (v9 - 1) & v9;
            v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            v13 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v12);
            v14 = v13;
            goto LABEL_8;
          }
          v30 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          v31 = (unint64_t)(v5[2] + 64) >> 6;
          if (v30 >= v31)
          {
            v13 = 0;
            v11 = 0;
            goto LABEL_8;
          }
          v32 = v5[1];
          v33 = *(_QWORD *)(v32 + 8 * v30);
          if (v33)
          {
LABEL_22:
            v11 = (v33 - 1) & v33;
            v12 = __clz(__rbit64(v33)) + (v30 << 6);
            v10 = v30;
            goto LABEL_7;
          }
          v36 = v10 + 2;
          if (v10 + 2 >= v31)
            goto LABEL_41;
          v33 = *(_QWORD *)(v32 + 8 * v36);
          if (v33)
          {
LABEL_29:
            v30 = v36;
            goto LABEL_22;
          }
          if (v10 + 3 < v31)
          {
            v33 = *(_QWORD *)(v32 + 8 * (v10 + 3));
            if (v33)
            {
              v30 = v10 + 3;
              goto LABEL_22;
            }
            v36 = v10 + 4;
            if (v10 + 4 >= v31)
            {
              v13 = 0;
              v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13)
                goto LABEL_47;
              goto LABEL_12;
            }
            v33 = *(_QWORD *)(v32 + 8 * v36);
            if (v33)
              goto LABEL_29;
            v30 = v10 + 5;
            if (v10 + 5 < v31)
            {
              v33 = *(_QWORD *)(v32 + 8 * v30);
              if (v33)
                goto LABEL_22;
              v30 = v31 - 1;
              v37 = v10 + 6;
              while (v31 != v37)
              {
                v33 = *(_QWORD *)(v32 + 8 * v37++);
                if (v33)
                {
                  v30 = v37 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              v13 = 0;
              v11 = 0;
              v10 = v30;
              goto LABEL_8;
            }
          }
          v13 = 0;
          v11 = 0;
          v10 = v36;
          goto LABEL_8;
        }
        v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (v16 = v15,
              v43 = v15,
              v17 = type metadata accessor for REMObjectID_Codable(0),
              swift_unknownObjectRetain(v16),
              swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v17, 7),
              v13 = v44,
              swift_unknownObjectRelease(v16),
              !v13))
        {
LABEL_47:
          swift_retain();
          sub_100218B70(a1, a2, v39, a3, &qword_100840EB8);
          return;
        }
LABEL_12:
        v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v19 = -1 << *(_BYTE *)(a3 + 32);
        v20 = v18 & ~v19;
        v21 = v20 >> 6;
        v22 = 1 << v20;
        if (((1 << v20) & *(_QWORD *)(v42 + 8 * (v20 >> 6))) == 0)
          goto LABEL_3;
        type metadata accessor for REMObjectID_Codable(0);
        v23 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v20);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
          break;
        v25 = ~v19;
        for (i = v20 + 1; ; i = v27 + 1)
        {
          v27 = i & v25;
          if (((*(_QWORD *)(v42 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
            break;
          v28 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v27);
          v29 = static NSObject.== infix(_:_:)(v28);

          if ((v29 & 1) != 0)
          {

            v21 = v27 >> 6;
            v22 = 1 << v27;
            goto LABEL_25;
          }
        }
LABEL_3:

        v5 = a5;
      }

LABEL_25:
      v34 = a1[v21];
      a1[v21] = v34 & ~v22;
      v35 = (v22 & v34) == 0;
      v5 = a5;
    }
    while (v35);
    v8 = v39 - 1;
    if (__OFSUB__(v39, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v39 != 1)
      continue;
    break;
  }
}

void sub_100217564(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v38 = v9 + 6;
                while (v14 != v38)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                sub_1002185C8(a1, a2, v40, a3);
                return;
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_23;
          }
        }
LABEL_3:
        swift_bridgeObjectRelease(v20);
      }
      swift_bridgeObjectRelease(v20);
LABEL_23:
      v31 = a1[v25];
      a1[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v40 != 1)
      continue;
    break;
  }
}

void sub_100217858(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  unint64_t i;
  unint64_t v22;
  id v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[9];
  uint64_t v33;

  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v30 = v7 - 1;
  v9 = *a5;
  v8 = a5[1];
  v10 = *(_QWORD *)(*a5 + 16);
  if (v8 == v10)
  {
LABEL_2:
    swift_retain();
    sub_100218DC8(a1, a2, v30, a3, a6);
    return;
  }
  v33 = a3 + 56;
  v31 = a5;
  while ((v8 & 0x8000000000000000) == 0)
  {
    if (v8 >= v10)
      goto LABEL_21;
    v11 = *(void **)(v9 + 8 * v8 + 32);
    a5[1] = v8 + 1;
    Hasher.init(_seed:)(v32, *(_QWORD *)(a3 + 40));
    v12 = v11;
    NSObject.hash(into:)(v32);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(a3 + 32);
    v15 = v13 & ~v14;
    v16 = v15 >> 6;
    v17 = 1 << v15;
    if (((1 << v15) & *(_QWORD *)(v33 + 8 * (v15 >> 6))) == 0)
      goto LABEL_4;
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v18 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v15);
    v19 = static NSObject.== infix(_:_:)(v18);

    if ((v19 & 1) == 0)
    {
      v20 = ~v14;
      for (i = v15 + 1; ; i = v22 + 1)
      {
        v22 = i & v20;
        if (((*(_QWORD *)(v33 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v22);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
        {

          v16 = v22 >> 6;
          v17 = 1 << v22;
          goto LABEL_16;
        }
      }
LABEL_4:

      a5 = v31;
      goto LABEL_5;
    }

LABEL_16:
    v25 = a1[v16];
    a1[v16] = v25 & ~v17;
    a5 = v31;
    if ((v17 & v25) != 0)
    {
      v26 = v30 - 1;
      if (__OFSUB__(v30, 1))
        goto LABEL_22;
      --v30;
      if (!v26)
        return;
    }
LABEL_5:
    v9 = *a5;
    v8 = a5[1];
    v10 = *(_QWORD *)(*a5 + 16);
    if (v8 == v10)
      goto LABEL_2;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

void sub_100217A88(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v41 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v19 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v42 = a1;
  v43 = v19 - 1;
  v20 = *a5;
  v21 = a5[1];
  v22 = *(_QWORD *)(*a5 + 16);
  if (v21 == v22)
  {
    v23 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(v11, 1, 1, v12, v18);
LABEL_22:
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
    swift_retain();
    sub_100218874(v42, v23, v43, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100840E78, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
    return;
  }
  v47 = a3 + 56;
  v48 = v17;
  v24 = v17;
  v45 = v11;
  v46 = a5;
  v49 = (char *)&v40 - v16;
  while (v21 < v22)
  {
    v26 = *(_QWORD *)(v24 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v24 + 16);
    v27(v11, v20 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v26 * v21, v12, v18);
    a5[1] = v21 + 1;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, v12) == 1)
    {
      v23 = v41;
      goto LABEL_22;
    }
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v49, v11, v12);
    v28 = *(_QWORD *)(a3 + 40);
    v29 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v12, v29);
    v31 = a3;
    v32 = -1 << *(_BYTE *)(a3 + 32);
    v33 = v30 & ~v32;
    if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
    {
      v25 = *(void (**)(char *, uint64_t))(v24 + 8);
LABEL_5:
      v25(v49, v12);
      a3 = v31;
      a5 = v46;
      goto LABEL_6;
    }
    v34 = ~v32;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v27)(v14, *(_QWORD *)(v31 + 48) + v33 * v26, v12);
      v35 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v49, v12, v35);
      v25 = *(void (**)(char *, uint64_t))(v48 + 8);
      v25(v14, v12);
      if ((v36 & 1) != 0)
        break;
      v33 = (v33 + 1) & v34;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
        goto LABEL_5;
    }
    v25(v49, v12);
    v37 = (v33 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v38 = *(unint64_t *)((char *)v42 + v37);
    *(unint64_t *)((char *)v42 + v37) = v38 & ~(1 << v33);
    a5 = v46;
    if ((v38 & (1 << v33)) == 0)
    {
      a3 = v31;
LABEL_6:
      v24 = v48;
      goto LABEL_7;
    }
    v39 = v43 - 1;
    v24 = v48;
    if (__OFSUB__(v43, 1))
      goto LABEL_24;
    a3 = v31;
    --v43;
    if (!v39)
      return;
LABEL_7:
    v20 = *a5;
    v21 = a5[1];
    v22 = *(_QWORD *)(*a5 + 16);
    v11 = v45;
    if (v21 == v22)
    {
      v23 = v41;
      v44(v45, 1, 1, v12, v18);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_100217E54(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v52 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v60 = (char *)&v51 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v54 = a1;
  v55 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v58 = a3 + 56;
  v59 = a3;
  v56 = a5;
  while (2)
  {
    v53 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v57 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12, v17);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        v48 = v26 + 2;
        if (v26 + 2 >= v44)
          goto LABEL_35;
        v45 = *(_QWORD *)(v25 + 8 * v48);
        if (v45)
          goto LABEL_23;
        if (v26 + 3 >= v44)
          goto LABEL_36;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v48 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v48);
          if (v45)
          {
LABEL_23:
            v43 = v48;
LABEL_17:
            v29 = (v45 - 1) & v45;
            v30 = __clz(__rbit64(v45)) + (v43 << 6);
            v26 = v43;
            goto LABEL_7;
          }
          v43 = v26 + 5;
          if (v26 + 5 < v44)
          {
            v45 = *(_QWORD *)(v25 + 8 * v43);
            if (v45)
              goto LABEL_17;
            v43 = v44 - 1;
            v49 = v26 + 6;
            while (v44 != v49)
            {
              v45 = *(_QWORD *)(v25 + 8 * v49++);
              if (v45)
              {
                v43 = v49 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v29 = 0;
            v31 = 1;
            v26 = v43;
            goto LABEL_8;
          }
LABEL_36:
          v29 = 0;
          v31 = 1;
          v26 = v48;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v57;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
          v50 = v59;
          swift_retain();
          sub_100218874(v54, v52, v53, v50, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100840E78, (unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
          return;
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v60, v11, v12);
        v32 = v59;
        v33 = *(_QWORD *)(v59 + 40);
        v34 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(void (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        v23(v60, v12);
        v11 = v55;
        a5 = v56;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v15, *(_QWORD *)(v59 + 48) + v39 * v37, v12);
        v41 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v60, v12, v41);
        v23 = *(void (**)(char *, uint64_t))(v13 + 8);
        v23(v15, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      v23(v60, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v55;
      v47 = *(unint64_t *)((char *)v54 + v46);
      *(unint64_t *)((char *)v54 + v46) = v47 & ~(1 << v37);
      a5 = v56;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v53 != 1)
      continue;
    break;
  }
}

Swift::Int sub_1002182CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  __int128 v36;
  _QWORD v37[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_34:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A630((uint64_t *)&unk_100840DA0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v34 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_37;
    if (v14 >= v34)
      goto LABEL_34;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v34)
        goto LABEL_34;
      v15 = a1[v10];
      if (!v15)
        break;
    }
LABEL_21:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    v17 = *(_QWORD *)(v4 + 48) + 24 * v13;
    v18 = *(_QWORD *)v17;
    v36 = *(_OWORD *)(v17 + 8);
    Hasher.init(_seed:)(v37, v8[5]);
    Hasher._combine(_:)(v18);
    v19 = (id)v36;
    v20 = *((id *)&v36 + 1);
    v21 = v19;
    v22 = v20;
    NSObject.hash(into:)(v37);
    v23 = v22;
    NSObject.hash(into:)(v37);

    result = Hasher._finalize()();
    v24 = -1 << *((_BYTE *)v8 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = v8[6] + 24 * v27;
    *(_QWORD *)v32 = v18;
    *(_OWORD *)(v32 + 8) = v36;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5)
      goto LABEL_34;
  }
  v16 = v14 + 2;
  if (v16 >= v34)
    goto LABEL_34;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v34)
      goto LABEL_34;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1002185A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100218874(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_100840EA8, &qword_100840EB0, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
}

Swift::Int sub_1002185C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A630(&qword_1008436F0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_10021885C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100218B70(a1, a2, a3, a4, &qword_100840EB8);
}

Swift::Int sub_100218868(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100218B70(a1, a2, a3, a4, &qword_100840EA0);
}

uint64_t sub_100218874(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v42 = a5;
  v13 = a5(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_10001A630(a6);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v40 = a1;
  v41 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v41)
            goto LABEL_37;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v41)
              goto LABEL_37;
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v41)
                  goto LABEL_37;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    v29 = *(_QWORD *)(v16 + 40);
    v30 = sub_10009FC50(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    v31 = -1 << *(_BYTE *)(v16 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v16 + 48) + v34 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100218B64(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100218B70(a1, a2, a3, a4, (uint64_t *)&unk_100840E50);
}

Swift::Int sub_100218B70(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_10001A630(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = v10[5];
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100218DC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;
  _QWORD v31[9];

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_10001A630(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v15);
    Hasher.init(_seed:)(v31, v10[5]);
    v20 = v19;
    NSObject.hash(into:)(v31);

    result = Hasher._finalize()();
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10021903C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100219060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100219070()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_1002190B4(uint64_t a1)
{
  uint64_t *v1;

  sub_100214544(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], v1[10]);
}

uint64_t sub_1002190C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v8);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + v6));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100219168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100214D0C(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
}

void sub_1002191C8(uint64_t a1)
{
  uint64_t v1;

  sub_100214CC8(a1, v1);
}

uint64_t sub_1002191E0()
{
  _QWORD *v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 2);
  swift_unknownObjectRelease(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_10021921C()
{
  uint64_t v0;

  sub_1002144E4(v0 + 16, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10021922C(void *a1, void *a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(__n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  id v74;
  void *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v82;
  char v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  __n128 v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t, uint64_t, uint64_t);
  double v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t, uint64_t);
  char *v121;
  id v122;
  uint64_t v123;
  __int128 v124[2];
  uint64_t v125;
  id v126;
  uint64_t v127[3];
  uint64_t v128;
  uint64_t v129;

  v118 = a3;
  v122 = a1;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v119 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v116 = (char *)&v112 - v10;
  __chkstk_darwin(v11);
  v115 = (char *)&v112 - v12;
  __chkstk_darwin(v13);
  v114 = (char *)&v112 - v14;
  __chkstk_darwin(v15);
  v113 = (char *)&v112 - v16;
  __chkstk_darwin(v17);
  v112 = (char *)&v112 - v18;
  __chkstk_darwin(v19);
  v117 = (char *)&v112 - v20;
  __chkstk_darwin(v21);
  v121 = (char *)&v112 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v112 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v112 - v27;
  v29 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v29);
  v31 = (char *)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v112 - v33;
  __chkstk_darwin(v35);
  v37 = (char *)&v112 - v36;
  __chkstk_darwin(v38);
  v40 = (char *)&v112 - v39;
  v42 = __chkstk_darwin(v41);
  v43 = *(void (**)(__n128))(v7 + 56);
  v123 = (uint64_t)&v112 - v44;
  v120 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v43;
  v43(v42);
  if ((objc_msgSend(a2, "isSnooze") & 1) == 0)
  {
    sub_1000CDA2C(a4, (uint64_t)v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v40, 1, v6) != 1)
    {
      v49 = v123;
      sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
      v50 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v50(v28, v40, v6);
      v50((char *)v49, v28, v6);
      v120((char *)v49, 0, 1, v6);
      goto LABEL_10;
    }
    sub_10000882C((uint64_t)v40, (uint64_t *)&unk_1008380D0);
  }
  v126 = objc_msgSend(a2, "trigger");
  v45 = sub_1000151B0(0, (unint64_t *)&unk_100840E60, REMAlarmTrigger_ptr);
  v46 = sub_10001A630((uint64_t *)&unk_100846B40);
  if ((swift_dynamicCast(v124, &v126, v45, v46, 6) & 1) != 0)
  {
    sub_10001BCA8(v124, (uint64_t)v127);
    v47 = v128;
    v48 = v129;
    sub_10000A388(v127, v128);
    (*(void (**)(id, uint64_t, uint64_t))(v48 + 8))(v122, v47, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v37, 1, v6) == 1)
    {
      sub_10000882C((uint64_t)v37, (uint64_t *)&unk_1008380D0);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v127);
      v49 = v123;
    }
    else
    {
      v51 = v123;
      sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
      v52 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v52(v25, v37, v6);
      v53 = v25;
      v49 = v51;
      v52((char *)v51, v53, v6);
      v120((char *)v51, 0, 1, v6);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v127);
    }
  }
  else
  {
    v125 = 0;
    memset(v124, 0, sizeof(v124));
    sub_10000882C((uint64_t)v124, &qword_100840E70);
    v49 = v123;
  }
LABEL_10:
  sub_1000CDA2C(v49, (uint64_t)v34);
  v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v54(v34, 1, v6) == 1)
  {
    sub_10000882C((uint64_t)v34, (uint64_t *)&unk_1008380D0);
    if (qword_100836FE8 != -1)
      swift_once(&qword_100836FE8, sub_10021096C);
    v55 = type metadata accessor for Logger(0);
    sub_10001AAA8(v55, (uint64_t)qword_100840CB0);
    v56 = a2;
    v57 = v122;
    v58 = v56;
    v59 = v57;
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      v122 = (id)swift_slowAlloc(32, -1);
      v127[0] = (uint64_t)v122;
      *(_DWORD *)v62 = 138412546;
      *(_QWORD *)&v124[0] = v58;
      v64 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);
      *v63 = v58;

      *(_WORD *)(v62 + 12) = 2080;
      v65 = objc_msgSend(v59, "description");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      *(_QWORD *)&v124[0] = sub_10001A820(v66, v68, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unable to determine fireDate. An alarm without fireDate shouldn't have reached here. {alarm: %@, reminder: %s}", (uint8_t *)v62, 0x16u);
      v69 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v63, 1, v69);
      swift_slowDealloc(v63, -1, -1);
      v70 = v122;
      swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      v71 = v123;
    }
    else
    {

      v71 = v49;
    }
    sub_10000882C(v71, (uint64_t *)&unk_1008380D0);
    return 2;
  }
  v72 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v73 = v121;
  v72(v121, v34, v6);
  v74 = objc_msgSend(v122, "lastBannerPresentationDate");
  if (!v74)
  {
    v77 = v120(v31, 1, 1, v6);
    v78 = v116;
    v79 = v114;
    goto LABEL_21;
  }
  v75 = v74;
  v76 = v112;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

  v72(v31, v76, v6);
  v120(v31, 0, 1, v6);
  v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v54)(v31, 1, v6);
  v78 = v116;
  v79 = v114;
  if ((_DWORD)v77 == 1)
  {
LABEL_21:
    v80 = v117;
    static Date.distantPast.getter(v77);
    sub_10000882C((uint64_t)v31, (uint64_t *)&unk_1008380D0);
    goto LABEL_22;
  }
  v80 = v117;
  v72(v117, v31, v6);
LABEL_22:
  v82 = v118;
  v83 = static Date.< infix(_:_:)(v80, v73);
  v84 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v85 = v113;
  v84(v113, v73, v6);
  v84(v79, v82, v6);
  if ((v83 & 1) != 0)
    LODWORD(v122) = static Date.< infix(_:_:)(v85, v79);
  else
    LODWORD(v122) = 0;
  v86 = v85;
  v87 = *(void (**)(char *, uint64_t))(v7 + 8);
  v87(v79, v6);
  v87(v86, v6);
  v88 = v119;
  if (qword_100836FE8 != -1)
    swift_once(&qword_100836FE8, sub_10021096C);
  v89 = type metadata accessor for Logger(0);
  sub_10001AAA8(v89, (uint64_t)qword_100840CB0);
  v90 = v115;
  v84(v115, v80, v6);
  v84(v78, v73, v6);
  v91 = ((uint64_t (*)(char *, char *, uint64_t))v84)(v88, v82, v6);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter(v92);
  if (os_log_type_enabled(v92, v93))
  {
    v94 = v78;
    v95 = swift_slowAlloc(42, -1);
    v96 = swift_slowAlloc(128, -1);
    v120 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v96;
    v127[0] = v96;
    *(_DWORD *)v95 = 136446978;
    v97 = Date.description.getter(v96);
    *(_QWORD *)&v124[0] = sub_10001A820(v97, v98, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);
    v99 = swift_bridgeObjectRelease();
    v100 = ((uint64_t (*)(char *, uint64_t, __n128))v87)(v90, v6, v99);
    *(_WORD *)(v95 + 12) = 2082;
    v101 = Date.description.getter(v100);
    *(_QWORD *)&v124[0] = sub_10001A820(v101, v102, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);
    v103 = swift_bridgeObjectRelease();
    v104 = ((uint64_t (*)(char *, uint64_t, __n128))v87)(v94, v6, v103);
    *(_WORD *)(v95 + 22) = 2082;
    v105 = v119;
    v106 = Date.description.getter(v104);
    *(_QWORD *)&v124[0] = sub_10001A820(v106, v107, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);
    v108 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v87)(v105, v6, v108);
    *(_WORD *)(v95 + 32) = 2082;
    if ((v122 & 1) != 0)
      v109 = 89;
    else
      v109 = 78;
    *(_QWORD *)&v124[0] = sub_10001A820(v109, 0xE100000000000000, v127);
    v80 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, (char *)v124 + 8);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "allowBanner? {lastBannerPresentationDate: %{public}s, fireDate: %{public}s, now: %{public}s, showBanner: %{public}s}", (uint8_t *)v95, 0x2Au);
    v110 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v120;
    swift_arrayDestroy(v120, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v110, -1, -1);
    swift_slowDealloc(v95, -1, -1);
  }
  else
  {
    v87(v90, v6);
    v87(v78, v6);
    v87(v88, v6);
  }

  v111 = Date.timeIntervalSince(_:)(v80);
  v87(v80, v6);
  v87(v121, v6);
  sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
  if (v111 < 10.0)
    return 0;
  if ((v122 & 1) != 0)
    return 2;
  return 1;
}

void sub_100219D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  if (qword_100836FE8 != -1)
    swift_once(&qword_100836FE8, sub_10021096C);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_100840CB0);
  v3 = sub_100018618(a1, (uint64_t)v14);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = v15;
    v9 = v16;
    sub_10000A388(v14, v15);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    v12 = sub_10001A820(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
  }

}

uint64_t sub_100219F14(uint64_t *a1)
{
  uint64_t v1;

  return sub_100214C0C(a1, *(_QWORD *)(v1 + 16), *(_BYTE **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

uint64_t sub_100219F30()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_100219F6C(uint64_t a1)
{
  uint64_t v1;

  sub_100211B38(a1, *(void (**)(uint64_t, __n128))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t storeEnumTagSinglePayload for RDAlarmNotificationConsumer.BannerBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100219FCC + 4 * byte_1006B019A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10021A000 + 4 * byte_1006B0195[v4]))();
}

uint64_t sub_10021A000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10021A008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10021A010);
  return result;
}

uint64_t sub_10021A01C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10021A024);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10021A028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10021A030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDAlarmNotificationConsumer.BannerBehavior()
{
  return &type metadata for RDAlarmNotificationConsumer.BannerBehavior;
}

unint64_t sub_10021A050()
{
  unint64_t result;

  result = qword_100840ED0;
  if (!qword_100840ED0)
  {
    result = swift_getWitnessTable(&unk_1006B0258, &type metadata for RDAlarmNotificationConsumer.BannerBehavior);
    atomic_store(result, (unint64_t *)&qword_100840ED0);
  }
  return result;
}

unint64_t static REMCDSavedReminder.cdEntityName.getter()
{
  return 0xD000000000000012;
}

id REMCDSavedReminder.parentSavedReminderObjectID.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  void *ObjCClassFromMetadata;
  Class isa;
  id v19;
  uint64_t v21;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v21 - v11;
  v13 = objc_msgSend(v1, "parentSavedReminderIdentifier", v10);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v15(v12, v4, v5);
  v16 = type metadata accessor for REMCDSavedReminder();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v19;
}

uint64_t type metadata accessor for REMCDSavedReminder()
{
  return objc_opt_self(REMCDSavedReminder);
}

uint64_t static REMCDSavedReminder.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007DFFC0);
  swift_arrayDestroy(&unk_1007DFFE0, 1, &type metadata for String);
  return v0;
}

Swift::Bool __swiftcall REMCDSavedReminder.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  Class isa;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  _OWORD v18[2];
  _QWORD v19[4];

  v3 = objc_msgSend(v1, "remObjectID");
  if (!v3)
    goto LABEL_12;
  v4 = v3;
  v5 = -[objc_class objectForKeyedSubscript:](toAccountObject.super.super.isa, "objectForKeyedSubscript:", v3);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v18, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_10001A5E8((uint64_t)v18, (uint64_t)v19);
  if (!v19[3])
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_10083D5B0);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_9:
    v8 = v4;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", isa, v8);

    v10 = objc_msgSend(v1, "template");
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, "isConnectedToAccountObject:", toAccountObject.super.super.isa);

      v19[0] = v7;
      type metadata accessor for REMObjectIsConnectedState(0);
      v13 = v12;
      v14 = v8;
      v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, v13);
      -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", v15, v14);

      swift_unknownObjectRelease(v15);
      return v7;
    }

LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }

  LOBYTE(v7) = v17 == 1;
  return v7;
}

uint64_t sub_10021A608()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t ObjCClassFromMetadata;
  NSString v15;
  uint64_t v16;

  v1 = objc_msgSend(v0, "metadata");
  if (v1)
  {
    v2 = v1;
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6 = type metadata accessor for JSONDecoder(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = JSONDecoder.init()(v7);
    v9 = type metadata accessor for RDSavedReminder(0);
    v10 = sub_10009FC50(&qword_100840F08, type metadata accessor for RDSavedReminder, (uint64_t)&unk_1006A9E88);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v9, v3, v5, v9, v10);
    swift_release(v8);
    return sub_1000A71C8(v3, v5);
  }
  else
  {
    v12 = (void *)objc_opt_self(REMError);
    v13 = type metadata accessor for REMCDSavedReminder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v13);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v15);

    return swift_willThrow(v16);
  }
}

void sub_10021A758(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void *v26;
  void (*v27)(_BYTE *, uint64_t);
  Class isa;
  id v29;
  NSString v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v31[-v14];
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = &v31[-v18];
  v20 = objc_msgSend(v2, "parentSavedReminderIdentifier", v17);
  if (v20)
  {
    v21 = v20;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v19, v22, 1, v3);
  v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10011D420((uint64_t)v19, (uint64_t)v9);
  sub_10011D420(v33, v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v9, 1, v3) == 1)
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    if (v24(v23, 1, v3) == 1)
    {
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      return;
    }
  }
  else
  {
    sub_10011D420((uint64_t)v9, (uint64_t)v15);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 32))(v6, v23, v3);
      v25 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v25);
      v26 = v2;
      v27 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
      v27(v6, v3);
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
      v27(v15, v3);
      v2 = v26;
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      if ((v32 & 1) != 0)
        return;
      goto LABEL_11;
    }
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v15, v3);
  }
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_10083B370);
LABEL_11:
  sub_10011D420(v33, (uint64_t)v12);
  if (v24((uint64_t)v12, 1, v3) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v12, v3);
  }
  objc_msgSend(v2, "setParentSavedReminderIdentifier:", isa);

  v29 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "updateForKey:", v30);

}

id REMCDSavedReminder.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDSavedReminder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10021ABD4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100840F30, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SiriFoundInAppsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SiriFoundInAppsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10021AC10(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a2;
  v39 = a4;
  v6 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v44 = (uint64_t)&v35 - v11;
  v12 = sub_10001A630(&qword_100839AA0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v42 = (char *)&v35 - v21;
  v43 = a1;
  v22 = v45;
  v23 = sub_10021AECC(a1, a3);
  if (!v22)
  {
    v24 = v23;
    v35 = v19;
    v36 = v9;
    v45 = v17;
    v37 = v7;
    v38 = v16;
    v25 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v15, 1, 1, v25);
    v26 = v42;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v24, v15, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v27 = objc_msgSend(v40, "fetchResultTokenToDiffAgainst");
    v28 = v44;
    sub_100493C24(v27, v43, v44);

    v29 = v35;
    v30 = v38;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v35, v26, v38);
    v31 = v36;
    v32 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v28, v6);
    v33 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    v34 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v29, v31, v30, v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v28, v6);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v30);
  }
}

uint64_t sub_10021AECC(uint64_t a1, uint64_t a2)
{
  uint64_t Subtasks;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a1;
  v34 = a2;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v3 = *(_QWORD *)(Subtasks - 8);
  v35 = Subtasks;
  v36 = v3;
  __chkstk_darwin(Subtasks);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - v15;
  v17 = _s10PredicatesOMa(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v19, v20, 51);
  sub_10000D2C0();
  v22 = v21;
  v23 = sub_10001C744((uint64_t)v19, _s10PredicatesOMa);
  REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters.sortingStyle.getter(v23);
  v24 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v25 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v26 = v24;
  v27 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v13, v26, v25);
  swift_storeEnumTagMultiPayload(v13, v11, 2);
  v28 = (uint64_t)v10;
  v29 = v36;
  v30 = sub_1004957D0(v28, (uint64_t)v13, (uint64_t)v16);
  REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters.showCompleted.getter(v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v5, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), v27);
  v31 = v38;
  v32 = sub_100496780(v37, (uint64_t)v22, (uint64_t)v16, 0, 0, (uint64_t)v7, (uint64_t)v5, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v31)
  {
    v11 = (uint64_t)v32;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v40);
  sub_10001C744((uint64_t)v16, _s9UtilitiesO12SortingStyleOMa);
  return v11;
}

uint64_t sub_10021B1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7remindd30REMNSPersistentHistoryTracking_storeController), "newBackgroundContextWithAuthor:", REMNSPersistentHistoryTrackingAuthor);
  v6 = (_QWORD *)swift_allocObject(&unk_1007EA620, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v5;
  v7 = swift_allocObject(&unk_1007EA648, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10021B6FC;
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = sub_1000098E4;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000098C4;
  v12[3] = &unk_1007EA660;
  v8 = _Block_copy(v12);
  v9 = v13;
  swift_retain();
  v10 = v5;
  swift_retain();
  swift_release(v9);
  objc_msgSend(v10, "performBlockAndWait:", v8);

  _Block_release(v8);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v7, "", 134, 20, 45, 1);
  swift_release(v6);
  result = swift_release(v7);
  if ((v10 & 1) != 0)
    __break(1u);
  return result;
}

id sub_10021B600()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMNSPersistentHistoryTracking();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for REMNSPersistentHistoryTracking()
{
  return objc_opt_self(_TtC7remindd30REMNSPersistentHistoryTracking);
}

unint64_t sub_10021B660()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FBF0;
  if (!qword_10083FBF0)
  {
    v1 = objc_opt_self(NSPersistentStore);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083FBF0);
  }
  return result;
}

uint64_t sub_10021B69C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10021B6C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10021B6D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10021B6FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10021B724()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10021B734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100840F68);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840F68);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *sub_10021B7C4(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = objc_msgSend(*v1, "objectIDs");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = sub_10021B960(a1, v5, 128, 0);
  swift_bridgeObjectRelease();
  return v6;
}

char *sub_10021B864(uint64_t a1)
{
  id *v1;
  id v3;
  char *v4;

  v3 = objc_msgSend(*v1, "smartListObjectID");
  if (qword_100836F48 != -1)
    swift_once(&qword_100836F48, sub_1001BB6F0);
  v4 = sub_10021B960(a1, (uint64_t)v3, 1, (objc_class *)qword_100871D00);

  return v4;
}

NSString sub_10021B900@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  NSString result;
  uint64_t v7;

  v4 = *a1;
  v5 = type metadata accessor for REMSmartListSectionStorageCDIngestor();
  swift_initStackObject(v5, &v7);
  result = sub_1004630EC(v4);
  if (!v2)
    *a2 = result;
  return result;
}

char *sub_10021B960(uint64_t a1, uint64_t a2, char a3, objc_class *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  Class isa;
  Class v62;
  Class v63;
  Class v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BB810();
  v13 = v12;
  v14 = (objc_class *)sub_1001BBCA0();
  v15 = v72;
  v16 = sub_1001BBE78(a2, a3, a1, a4, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
    return v11;
  if (qword_100836FF0 != -1)
    swift_once(&qword_100836FF0, sub_10021B734);
  v17 = sub_10001AAA8(v8, (uint64_t)qword_100840F68);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  v72 = &v65;
  v73 = v16;
  __chkstk_darwin(v18);
  *(&v65 - 2) = (uint64_t)v11;
  v19 = sub_10001A630(&qword_100851870);
  v20 = sub_1000151B0(0, (unint64_t *)&qword_100840F80, REMSmartListSectionStorage_ptr);
  v21 = sub_1000A5F84(&qword_100840F88, &qword_100851870, (uint64_t)&protocol conformance descriptor for [A]);
  v70 = v20;
  v22 = Sequence.map<A>(skippingError:_:)(sub_10021C068, &v65 - 4, sub_10021B900, 0, v19, v20, v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v73 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v33 = v16;
    else
      v33 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v23 = _CocoaArrayWrapper.endIndex.getter(v33);
    v71 = v22;
    if (v23)
      goto LABEL_6;
LABEL_21:
    swift_bridgeObjectRelease();
    v32 = _swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v16);
  v71 = v22;
  if (!v23)
    goto LABEL_21;
LABEL_6:
  if (v23 < 1)
  {
    __break(1u);
    goto LABEL_32;
  }
  for (i = 0; i != v23; ++i)
  {
    if ((v16 & 0xC000000000000001) != 0)
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v16);
    else
      v26 = *(id *)(v16 + 8 * i + 32);
    v27 = v26;
    v28 = objc_msgSend(v26, "smartList");

    if (v28)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v31 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
      specialized Array._endMutation()(v25);
    }
  }
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)v73;
LABEL_22:
  swift_bridgeObjectRelease();
  v73 = (uint64_t)v32;
  v34 = sub_10001A630((uint64_t *)&unk_100851970);
  v35 = sub_1000A5F84((unint64_t *)&qword_100840F90, (uint64_t *)&unk_100851970, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = sub_1000EC524(&qword_100840F98, (unint64_t *)&unk_100840000, off_1007D6720);
  v37 = (_QWORD *)Sequence<>.unique()(v34, v35, v36);
  swift_bridgeObjectRelease();
  v38 = (void *)sub_10047A570(v37);
  v16 = (uint64_t)v38;
  v40 = objc_msgSend(v38, "accountStorages", swift_bridgeObjectRelease().n128_f64[0]);
  v41 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v42 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v43 = sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v67 = v41;
  v44 = v41;
  v22 = v43;
  v69 = v42;
  v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v40, v44, v42, v43);

  v73 = v45;
  v46 = sub_10001A630(&qword_100840FA0);
  v47 = sub_1000A5F84(&qword_100840FA8, &qword_100840FA0, (uint64_t)&protocol conformance descriptor for [A : B].Values);
  v48 = sub_1000EC524(&qword_10083B538, &qword_10083FF70, REMAccountStorage_ptr);
  v23 = Sequence<>.unique()(v46, v47, v48);
  *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v23 & 0x8000000000000000) == 0 && (v23 & 0x4000000000000000) == 0)
  {
    v68 = v23 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_27;
  }
LABEL_32:
  v68 = (uint64_t)sub_1001EA0B4(v23);
  *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_27:
  v50 = objc_msgSend((id)v16, "smartListStorages", v49);
  v66 = sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v66);

  v72 = (uint64_t *)v16;
  v51 = objc_msgSend((id)v16, "parentListStorages");
  v52 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v51, v67, v52, v22);

  v73 = v53;
  v54 = sub_10001A630(&qword_100840FB0);
  v55 = sub_1000A5F84(&qword_100840FB8, &qword_100840FB0, (uint64_t)&protocol conformance descriptor for [A : B].Values);
  v56 = sub_1000EC524(&qword_10083AC28, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v57 = Sequence<>.unique()(v54, v55, v56);
  swift_bridgeObjectRelease();
  if (v57 < 0 || (v57 & 0x4000000000000000) != 0)
  {
    v58 = (uint64_t)sub_1001EA0A8(v57);
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = v57 & 0xFFFFFFFFFFFFFF8;
  }
  v59 = objc_allocWithZone((Class)REMSmartListSectionsDataViewInvocationResult);
  v60 = v68;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v60);
  v62 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v63 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v58);
  v64 = Array._bridgeToObjectiveC()().super.isa;
  v11 = (char *)objc_msgSend(v59, "initWithAccountStorages:smartListStorages:groupStorages:smartListSectionStorages:", isa, v62, v63, v64, swift_bridgeObjectRelease().n128_f64[0]);

  return v11;
}

uint64_t sub_10021C068(uint64_t a1, uint64_t a2)
{
  return sub_100380E48(a2);
}

uint64_t sub_10021C074(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100840FF8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDayInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10021C0B0(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Configuration;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v67 = a2;
  v69 = a4;
  v60 = a3;
  v63 = a5;
  v6 = type metadata accessor for REMRemindersListDataView.DatesModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  __chkstk_darwin(v6);
  v61 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (char *)&v51 - v10;
  v11 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v15 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v51 - v23;
  v25 = v68;
  sub_10021C5F8(a1, v69);
  if (!v25)
  {
    v51 = v17;
    v52 = v15;
    v68 = v26;
    v53 = Configuration;
    v54 = v13;
    v55 = v21;
    v56 = v19;
    v57 = v18;
    v27 = (uint64_t)a1;
    v28 = sub_10021E264();
    v30 = v29;
    v31 = objc_msgSend(v66, "fetchResultTokenToDiffAgainst");
    v32 = (uint64_t)v24;
    sub_100493C24(v31, v27, (uint64_t)v24);

    v33 = v30 & 1;
    v34 = v51;
    v36 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v35);
    v37 = (uint64_t)v54;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v36);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v53);
    v38 = v68;
    swift_bridgeObjectRetain(v68);
    v39 = sub_10049D928(v37, v32, v27, v60, 0, v38);
    v41 = v40;
    v42 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v58 + 8))(v37, v59, v42);
    v43 = v62;
    REMRemindersListDataView.DatesModel.init(groups:completedRemindersCount:prefetchedReminders:prefetchedDueReminders:)(v38, v28, v33, v39, v41);
    v44 = v64;
    v45 = v61;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v61, v43, v64);
    v46 = v55;
    v47 = v56;
    v48 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v32, v57);
    v69 = v32;
    v49 = sub_10009FC50(&qword_100841000, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DatesModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DatesModel);
    v50 = sub_10009FC50(&qword_100841008, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DatesModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DatesModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v45, v46, v44, v49, v50);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v43, v44);
    (*(void (**)(unint64_t, uint64_t))(v47 + 8))(v69, v48);
  }
}

uint64_t sub_10021C428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = _s9UtilitiesO12SortingStyleOMa(0);
  sub_10009EF3C(v0, qword_100840FC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840FC0);
  v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v3 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v1, v2, v3);
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t sub_10021C4AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    result = type metadata accessor for Date(0);
    v6 = result;
    v7 = 0;
    v14 = *(_QWORD *)(result - 8);
    v8 = a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v9 = v2;
    while (!__OFSUB__(v9, v7))
    {
      v10 = v7 + (v9 - v7) / 2;
      if (__OFADD__(v7, (v9 - v7) / 2))
        goto LABEL_16;
      if (v10 >= v2)
        goto LABEL_17;
      v11 = v8 + *(_QWORD *)(v14 + 72) * v10;
      v12 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v11, a1, v6, v12) & 1) != 0)
        return 0;
      v13 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      result = dispatch thunk of static Comparable.< infix(_:_:)(v11, a1, v6, v13);
      if ((result & 1) != 0)
        v7 = v10 + 1;
      else
        v9 = v7 + (v9 - v7) / 2;
      if (v7 >= v9)
        return v7;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_10021C5F8(void *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *Configuration;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  void (*v88)(char *, _QWORD *);
  void (*v89)(void);
  char *v90;
  __n128 v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, _QWORD *);
  _QWORD *v100;
  uint64_t v101;
  void (*v102)(char *);
  char *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  char v106;
  void (*v107)(char *, _QWORD *);
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  Class isa;
  uint64_t v125;
  void (*v126)(char *, _QWORD, _QWORD *);
  uint64_t v127;
  __n128 v128;
  void *v129;
  void (*v130)(char *, _QWORD, _QWORD *);
  void *v131;
  NSString v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  _QWORD *v138;
  void (*v139)(char *, _QWORD *);
  char *v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  int v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  id v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int (*v175)(uint64_t, uint64_t, uint64_t);
  char *v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  void (*v180)(void);
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char v186;
  void (*v187)(char *, char *, uint64_t);
  char *v188;
  char v189;
  char *v190;
  unint64_t v191;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  id v200;
  void *v201;
  unint64_t v202;
  char v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(char *, uint64_t, uint64_t);
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  void *v219;
  NSString v220;
  uint64_t v221;
  __n128 v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char **v235;
  _QWORD *v236;
  int64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t (*v240)(char *, char *, uint64_t);
  char *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  char v249;
  __n128 v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(char *, uint64_t);
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  void (*v281)(char *, _QWORD, _QWORD *);
  id v282;
  char *v283;
  char *v284;
  char *v285;
  void (*v286)(char *, _QWORD, _QWORD *);
  _QWORD *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  void (*Subtasks)(char *, uint64_t);
  uint64_t v305;
  uint64_t v306;
  char *v307;
  char *v308;
  void (*v309)(char *, _QWORD *);
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  char **v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;

  v282 = a1;
  v3 = sub_10001A630(&qword_10083FA60);
  __chkstk_darwin(v3);
  v260 = (char *)&v260 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v5);
  v299 = (uint64_t)&v260 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v311 = *(_QWORD *)(v7 - 8);
  v312 = v7;
  __chkstk_darwin(v7);
  v298 = (char *)&v260 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v297 = (char *)&v260 - v10;
  v11 = type metadata accessor for REMRemindersListDataView.DatesModel.Group(0);
  v12 = *(_QWORD *)(v11 - 8);
  v305 = v11;
  v306 = v12;
  __chkstk_darwin(v11);
  v290 = (char *)&v260 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v263 = (char *)&v260 - v15;
  __chkstk_darwin(v16);
  v262 = (char *)&v260 - v17;
  __chkstk_darwin(v18);
  v284 = (char *)&v260 - v19;
  __chkstk_darwin(v20);
  v283 = (char *)&v260 - v21;
  v22 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v22);
  v274 = (char *)&v260 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v296 = (uint64_t)&v260 - v25;
  __chkstk_darwin(v26);
  v314 = (uint64_t)&v260 - v27;
  __chkstk_darwin(v28);
  v318 = (char **)((char *)&v260 - v29);
  __chkstk_darwin(v30);
  v308 = (char *)&v260 - v31;
  v33 = __chkstk_darwin(v32);
  v313 = (uint64_t)&v260 - v34;
  v270 = type metadata accessor for REMRemindersListDataView.ScheduledTodayGroup(0, v33);
  v268 = *(_QWORD *)(v270 - 8);
  __chkstk_darwin(v270);
  v269 = (char *)&v260 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  v320 = v36;
  v321 = v37;
  __chkstk_darwin(v36);
  v289 = (char *)&v260 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v264 = (uint64_t)&v260 - v40;
  __chkstk_darwin(v41);
  v261 = (char *)&v260 - v42;
  __chkstk_darwin(v43);
  v291 = (char *)&v260 - v44;
  __chkstk_darwin(v45);
  v315 = (char *)&v260 - v46;
  __chkstk_darwin(v47);
  v295 = (char *)&v260 - v48;
  v50 = __chkstk_darwin(v49);
  v285 = (char *)&v260 - v51;
  v267 = type metadata accessor for Calendar.Identifier(0, v50);
  v266 = *(_QWORD *)(v267 - 8);
  __chkstk_darwin(v267);
  v265 = (char *)&v260 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v319 = type metadata accessor for Calendar(0);
  v317 = *(_QWORD *)(v319 - 8);
  __chkstk_darwin(v319);
  v303 = (char *)&v260 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v307 = (char *)&v260 - v55;
  v288 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v280 = *(_QWORD *)(v288 - 8);
  __chkstk_darwin(v288);
  v275 = (char *)&v260 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v279 = (char *)&v260 - v58;
  v277 = _s10PredicatesOMa(0);
  __chkstk_darwin(v277);
  v278 = (char *)&v260 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = (void (*)(char *, uint64_t))type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v294 = *((_QWORD *)Subtasks - 1);
  __chkstk_darwin(Subtasks);
  v273 = (char *)&v260 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v276 = (char *)&v260 - v62;
  __chkstk_darwin(v63);
  v293 = (char *)&v260 - v64;
  v66 = __chkstk_darwin(v65);
  v292 = (char *)&v260 - v67;
  v68 = type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters(0, v66);
  v316 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v301 = (char *)&v260 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = (_QWORD *)type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v302 = *(v70 - 1);
  __chkstk_darwin(v70);
  v72 = (char *)&v260 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73);
  v75 = (char *)&v260 - v74;
  Configuration = (_QWORD *)type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v77 = *(Configuration - 1);
  __chkstk_darwin(Configuration);
  v272 = (char *)&v260 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79);
  v271 = (char *)&v260 - v80;
  v82 = __chkstk_darwin(v81);
  v84 = (char *)&v260 - v83;
  v85 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v82);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v85);
  v309 = *(void (**)(char *, _QWORD *))(v77 + 8);
  v310 = Configuration;
  v309(v84, Configuration);
  v86 = v302;
  v286 = *(void (**)(char *, _QWORD, _QWORD *))(v302 + 104);
  v286(v72, enum case for REMRemindersListDataView.SortingStyle.default(_:), v70);
  v87 = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v75, v72);
  v88 = *(void (**)(char *, _QWORD *))(v86 + 8);
  v88(v72, v70);
  v287 = v70;
  v88(v75, v70);
  v89 = *(void (**)(void))(v316 + 16);
  v90 = v301;
  v300 = a2;
  v302 = v68;
  v89();
  if ((v87 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t))(v316 + 8))(v90, v302);
  }
  else
  {
    v93 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v91);
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v93);
    v309(v84, v310);
    v94 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    v95 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v72, v94, v95);
    v96 = v287;
    v286(v72, enum case for REMRemindersListDataView.SortingStyle.displayDate(_:), v287);
    LOBYTE(v94) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v75, v72);
    v88(v72, v96);
    v88(v75, v96);
    (*(void (**)(char *, unint64_t))(v316 + 8))(v90, v302);
    if ((v94 & 1) == 0)
    {
LABEL_12:
      v131 = (void *)objc_opt_self(REMError);
      v132 = String._bridgeToObjectiveC()();
      objc_msgSend(v131, "internalErrorWithDebugDescription:", v132);

      swift_willThrow(v133);
      return;
    }
  }
  v97 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v92);
  v98 = v292;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v97);
  v99 = v309;
  v100 = v310;
  v309(v84, v310);
  v101 = v294;
  v102 = *(void (**)(char *))(v294 + 104);
  v103 = v293;
  LODWORD(v316) = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  v104 = Subtasks;
  v102(v293);
  v105 = sub_10009FC50(&qword_100841010, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FetchSubtasks);
  v106 = dispatch thunk of static Equatable.== infix(_:_:)(v98, v103, v104, v105);
  v107 = *(void (**)(char *, _QWORD *))(v101 + 8);
  v107(v103, v104);
  v107(v98, v104);
  if ((v106 & 1) != 0)
    goto LABEL_12;
  v109 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v108);
  v110 = (uint64_t)v278;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v109);
  v99(v84, v100);
  swift_storeEnumTagMultiPayload(v110, v277, 11);
  sub_10000D2C0();
  v112 = v111;
  sub_1000CACA8(v110);
  if (qword_1008375D8 != -1)
    goto LABEL_86;
  while (1)
  {
    v113 = (_QWORD *)qword_100871F88;
    v114 = (uint64_t)v308;
    if (qword_1008375E0 != -1)
      swift_once(&qword_1008375E0, sub_100497914);
    v115 = qword_100871F90;
    v323 = v113;
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v115);
    sub_1001E12FC(v116);
    v117 = (void *)sub_100358798((uint64_t)v323, 0, 0, (uint64_t)v112);
    swift_bridgeObjectRelease();
    if (qword_100836FF8 != -1)
      swift_once(&qword_100836FF8, sub_10021C428);
    v118 = _s9UtilitiesO12SortingStyleOMa(0);
    v119 = sub_10001AAA8(v118, (uint64_t)qword_100840FC0);
    v120 = v280;
    v121 = (uint64_t)v279;
    v122 = v288;
    (*(void (**)(char *, _QWORD, uint64_t))(v280 + 104))(v279, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v288);
    sub_10049ADC0(v119, v121, 0);
    v123 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    v123(v121, v122);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v117, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v125 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v126 = v281;
    v127 = NSManagedObjectContext.fetch<A>(_:)(v117, v125);
    v129 = v117;
    v130 = v126;
    if (v126)
    {

      return;
    }
    v292 = (char *)v123;
    v293 = v112;
    v302 = v127;
    v287 = v129;
    v134 = v271;
    v135 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v128);
    v136 = v276;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v135);
    v137 = v134;
    v139 = v309;
    v138 = v310;
    v309(v137, v310);
    v140 = v272;
    v142 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v141);
    v143 = (uint64_t)v275;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v142);
    v139(v140, v138);
    v144 = v294;
    v145 = v273;
    v146 = Subtasks;
    (*(void (**)(char *, char *, void (*)(char *, uint64_t)))(v294 + 16))(v273, v136, Subtasks);
    v147 = (*(uint64_t (**)(char *, _QWORD *))(v144 + 88))(v145, v146);
    if (v147 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v147 == (_DWORD)v316)
    {
      v301 = (char *)sub_1002AF838((uint64_t)_swiftEmptyArrayStorage);
      v151 = v293;
      v148 = (uint64_t)v274;
      v149 = v321;
      ((void (*)(uint64_t, uint64_t))v292)(v143, v288);
    }
    else
    {
      v148 = (uint64_t)v274;
      v149 = v321;
      if (v147 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
        goto LABEL_93;
      v150 = v275;
      sub_100498430(v302, v275, v282, 0);
      v151 = v293;
      v301 = v152;
      ((void (*)(char *, uint64_t))v292)(v150, v288);
    }
    v107(v276, Subtasks);
    v323 = _swiftEmptyArrayStorage;
    v153 = v266;
    v154 = v265;
    v155 = v267;
    (*(void (**)(char *, _QWORD, uint64_t))(v266 + 104))(v265, enum case for Calendar.Identifier.gregorian(_:), v267);
    Calendar.init(identifier:)(v154);
    v156 = (*(uint64_t (**)(char *, uint64_t))(v153 + 8))(v154, v155);
    v157 = v269;
    REMRemindersListDataView.ScheduledByDayInvocation.Parameters.includeTodayGroup.getter(v156);
    v158 = v268;
    v143 = v270;
    v159 = (*(uint64_t (**)(char *, uint64_t))(v268 + 88))(v157, v270);
    LODWORD(v292) = v159;
    LODWORD(v288) = enum case for REMRemindersListDataView.ScheduledTodayGroup.always(_:);
    if ((_DWORD)v159 == enum case for REMRemindersListDataView.ScheduledTodayGroup.always(_:))
    {
      (*(void (**)(char *, uint64_t))(v158 + 96))(v157, v143);
      v160 = v295;
      v161 = v320;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v295, v157, v320);
    }
    else
    {
      v160 = v295;
      if ((_DWORD)v159 != enum case for REMRemindersListDataView.ScheduledTodayGroup.asNeeded(_:))
        goto LABEL_94;
      Date.init()(v159);
      v161 = v320;
    }
    Calendar.startOfDay(for:)(v160);
    v162 = *(void (**)(char *, uint64_t))(v149 + 8);
    v162(v160, v161);
    v316 = *(_QWORD *)(v149 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v316)(v313, 1, 1, v161);
    v163 = v302;
    v164 = v161;
    if (v302 >> 62)
    {
      v259 = (v302 & 0x8000000000000000) != 0 ? v302 : v302 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v302);
      v165 = _CocoaArrayWrapper.endIndex.getter(v259);
      swift_bridgeObjectRelease();
      v163 = v302;
    }
    else
    {
      v165 = *(_QWORD *)((v302 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v107 = (void (*)(char *, _QWORD *))v318;
    Subtasks = v162;
    if (!v165)
      break;
    v286 = 0;
    v300 = v163 & 0xC000000000000001;
    v166 = 4;
    v310 = _swiftEmptyArrayStorage;
    v112 = v303;
    v294 = v165;
    while (1)
    {
      v167 = v300
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v166 - 4, v163)
           : *(id *)(v163 + 8 * v166);
      v168 = v167;
      if (__OFADD__(v166 - 4, 1))
        break;
      v309 = (void (*)(char *, _QWORD *))(v166 - 3);
      v169 = objc_msgSend(v167, "displayDateDate");
      if (v169)
      {
        v170 = v169;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v169);

        v171 = 0;
      }
      else
      {
        v171 = 1;
      }
      v172 = 1;
      ((void (*)(void (*)(char *, _QWORD *), uint64_t, uint64_t, uint64_t))v316)(v107, v171, 1, v164);
      (*(void (**)(char *, char *, uint64_t))(v317 + 16))(v112, v307, v319);
      v173 = (uint64_t)v107;
      v174 = v314;
      sub_1000CDA2C(v173, v314);
      v175 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      if (v175(v174, 1, v164) != 1)
      {
        v176 = v295;
        (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v295, v314, v164);
        Calendar.startOfDay(for:)(v176);
        v164 = v320;
        Subtasks(v176, v320);
        v172 = 0;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v316)(v114, v172, 1, v164);
      sub_10000882C((uint64_t)v318, (uint64_t *)&unk_1008380D0);
      v177 = *(void (**)(char *, uint64_t))(v317 + 8);
      v177(v112, v319);
      if (v175(v114, 1, v164) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000882C(v114, (uint64_t *)&unk_1008380D0);
        v218 = v164;
        v219 = (void *)objc_opt_self(REMError);
        v220 = String._bridgeToObjectiveC()();
        objc_msgSend(v219, "internalErrorWithDebugDescription:", v220);

        swift_willThrow(v221);
        sub_10000882C(v313, (uint64_t *)&unk_1008380D0);
        Subtasks(v285, v218);
        v177(v307, v319);
        return;
      }
      v178 = v114;
      v179 = v321;
      v180 = *(void (**)(void))(v321 + 32);
      v181 = v315;
      ((void (*)(char *, uint64_t, uint64_t))v180)(v315, v178, v164);
      v182 = v313;
      v183 = v296;
      sub_1000CDA2C(v313, v296);
      if (v175(v183, 1, v164) == 1)
      {
        sub_10000882C(v182, (uint64_t *)&unk_1008380D0);
        sub_10000882C(v183, (uint64_t *)&unk_1008380D0);
        (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v182, v181, v164);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v316)(v182, 0, 1, v164);
        v149 = v179;
        v107 = (void (*)(char *, _QWORD *))v318;
        v162 = Subtasks;
      }
      else
      {
        v184 = v291;
        v180();
        v185 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v186 = dispatch thunk of static Equatable.== infix(_:_:)(v184, v181, v164, v185);
        v162 = Subtasks;
        if ((v186 & 1) != 0)
        {
          Subtasks(v184, v164);
          v149 = v321;
          v107 = (void (*)(char *, _QWORD *))v318;
        }
        else
        {
          v187 = *(void (**)(char *, char *, uint64_t))(v321 + 16);
          v188 = v295;
          v187(v295, v184, v164);
          v189 = static Date.== infix(_:_:)(v184, v285);
          v190 = v283;
          REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)(v188, v310, v189 & 1);
          (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v284, v190, v305);
          v191 = (unint64_t)v323;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v323);
          v107 = (void (*)(char *, _QWORD *))v318;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v191 = sub_1002C874C(0, *(_QWORD *)(v191 + 16) + 1, 1, v191);
          v194 = *(_QWORD *)(v191 + 16);
          v193 = *(_QWORD *)(v191 + 24);
          if (v194 >= v193 >> 1)
            v191 = sub_1002C874C(v193 > 1, v194 + 1, 1, v191);
          *(_QWORD *)(v191 + 16) = v194 + 1;
          v195 = v305;
          v196 = v306;
          (*(void (**)(unint64_t, char *, uint64_t))(v306 + 32))(v191+ ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(_QWORD *)(v196 + 72) * v194, v284, v305);
          v323 = (_QWORD *)v191;
          (*(void (**)(char *, uint64_t))(v196 + 8))(v283, v195);
          v197 = v320;
          v162(v291, v320);
          v198 = v313;
          sub_10000882C(v313, (uint64_t *)&unk_1008380D0);
          v181 = v315;
          v187((char *)v198, v315, v197);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v316)(v198, 0, 1, v197);
          v310 = _swiftEmptyArrayStorage;
          v149 = v321;
        }
      }
      v199 = v301;
      v200 = objc_msgSend(v168, "objectID");
      v201 = v200;
      if (*((_QWORD *)v199 + 2) && (v202 = sub_1002C6690((uint64_t)v200), (v203 & 1) != 0))
        v204 = *(_QWORD *)(*((_QWORD *)v199 + 7) + 8 * v202);
      else
        v204 = 0;

      v205 = v168;
      v206 = v299;
      sub_100495DE8(v205, v204, 0, v299);
      v208 = v311;
      v207 = v312;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48))(v206, 1, v312) == 1)
      {
        v164 = v320;
        v162(v181, v320);

        sub_10000882C(v206, &qword_10083FB68);
        v114 = (uint64_t)v308;
      }
      else
      {
        v209 = *(void (**)(char *, uint64_t, uint64_t))(v208 + 32);
        v210 = v297;
        v209(v297, v206, v207);
        (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v298, v210, v207);
        v211 = (unint64_t)v310;
        if ((swift_isUniquelyReferenced_nonNull_native(v310) & 1) == 0)
          v211 = sub_1002C8478(0, *(_QWORD *)(v211 + 16) + 1, 1, v211);
        v213 = *(_QWORD *)(v211 + 16);
        v212 = *(_QWORD *)(v211 + 24);
        v310 = (_QWORD *)v211;
        v114 = (uint64_t)v308;
        if (v213 >= v212 >> 1)
          v310 = (_QWORD *)sub_1002C8478(v212 > 1, v213 + 1, 1, (unint64_t)v310);
        v214 = (char *)v310;
        v215 = v311;
        v310[2] = v213 + 1;
        v216 = v312;
        v209(&v214[((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80))+ *(_QWORD *)(v215 + 72) * v213], (uint64_t)v298, v312);

        (*(void (**)(char *, uint64_t))(v215 + 8))(v297, v216);
        v164 = v320;
        v162(v315, v320);
        v149 = v321;
      }
      ++v166;
      v163 = v302;
      v112 = v303;
      if (v309 == (void (*)(char *, _QWORD *))v294)
      {
        swift_bridgeObjectRelease();
        v148 = (uint64_t)v274;
        v151 = v293;
        v130 = v286;
        v217 = v310;
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_86:
    swift_once(&qword_1008375D8, sub_100497894);
  }
  swift_bridgeObjectRelease();
  v217 = _swiftEmptyArrayStorage;
LABEL_60:
  v222 = swift_bridgeObjectRelease();
  v223 = v217;
  v224 = v217[2];
  v225 = v313;
  v226 = v295;
  if (v224)
  {
    sub_1000CDA2C(v313, v148);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v148, 1, v164) == 1)
    {
      sub_10000882C(v148, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      v227 = v261;
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v261, v148, v164);
      (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v226, v227, v164);
      swift_bridgeObjectRetain(v223);
      v228 = static Date.== infix(_:_:)(v227, v285);
      v229 = v262;
      REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)(v226, v223, v228 & 1);
      (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v263, v229, v305);
      v230 = (unint64_t)v323;
      if ((swift_isUniquelyReferenced_nonNull_native(v323) & 1) == 0)
        v230 = sub_1002C874C(0, *(_QWORD *)(v230 + 16) + 1, 1, v230);
      v232 = *(_QWORD *)(v230 + 16);
      v231 = *(_QWORD *)(v230 + 24);
      if (v232 >= v231 >> 1)
        v230 = sub_1002C874C(v231 > 1, v232 + 1, 1, v230);
      *(_QWORD *)(v230 + 16) = v232 + 1;
      v233 = v305;
      v234 = v306;
      (*(void (**)(unint64_t, char *, uint64_t))(v306 + 32))(v230+ ((*(unsigned __int8 *)(v234 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80))+ *(_QWORD *)(v234 + 72) * v232, v263, v305);
      v323 = (_QWORD *)v230;
      (*(void (**)(char *, uint64_t))(v234 + 8))(v262, v233);
      v164 = v320;
      v162 = Subtasks;
      Subtasks(v261, v320);
      v225 = v313;
    }
  }
  if ((_DWORD)v292 != (_DWORD)v288)
  {

    sub_10000882C(v225, (uint64_t *)&unk_1008380D0);
    v162(v285, v164);
    (*(void (**)(char *, uint64_t))(v317 + 8))(v307, v319);
    swift_bridgeObjectRelease();
    return;
  }
  v235 = *(char ***)(v149 + 16);
  ((void (*)(uint64_t, char *, uint64_t, __n128))v235)(v264, v285, v164, v222);
  v236 = v323;
  v237 = v323[2];
  if (v237)
  {
    v318 = v235;
    v286 = v130;
    v322 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v323);
    sub_1001C1E48(0, v237, 0);
    v238 = (char *)v236
         + ((*(unsigned __int8 *)(v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80));
    v239 = *(_QWORD *)(v306 + 72);
    v240 = *(uint64_t (**)(char *, char *, uint64_t))(v306 + 16);
    do
    {
      v241 = v290;
      v242 = v305;
      v243 = v240(v290, v238, v305);
      REMRemindersListDataView.DatesModel.Group.date.getter(v243);
      (*(void (**)(char *, uint64_t))(v306 + 8))(v241, v242);
      v244 = v322;
      if ((swift_isUniquelyReferenced_nonNull_native(v322) & 1) == 0)
      {
        sub_1001C1E48(0, v244[2] + 1, 1);
        v244 = v322;
      }
      v246 = v244[2];
      v245 = v244[3];
      if (v246 >= v245 >> 1)
      {
        sub_1001C1E48(v245 > 1, v246 + 1, 1);
        v244 = v322;
      }
      v244[2] = v246 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v321 + 32))((unint64_t)v244+ ((*(unsigned __int8 *)(v321 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v321 + 80))+ *(_QWORD *)(v321 + 72) * v246, v289, v320);
      v322 = v244;
      v238 += v239;
      --v237;
    }
    while (v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v151 = v293;
    v235 = v318;
  }
  else
  {
    swift_bridgeObjectRelease();
    v244 = _swiftEmptyArrayStorage;
  }
  v247 = v264;
  v143 = sub_10021C4AC(v264, (uint64_t)v244);
  v249 = v248;
  v250 = swift_bridgeObjectRelease();
  v251 = v247;
  v252 = v320;
  v253 = Subtasks;
  ((void (*)(uint64_t, uint64_t, __n128))Subtasks)(v251, v320, v250);
  if ((v249 & 1) != 0)
  {

    sub_10000882C(v313, (uint64_t *)&unk_1008380D0);
    v253(v285, v252);
    goto LABEL_84;
  }
  v254 = v295;
  ((void (*)(char *, char *, uint64_t))v235)(v295, v285, v252);
  REMRemindersListDataView.DatesModel.Group.init(date:reminders:isToday:)(v254, _swiftEmptyArrayStorage, 1);
  if (v323[2] < v143)
  {
    __break(1u);
  }
  else if ((v143 & 0x8000000000000000) == 0)
  {
    v255 = v305;
    v256 = v306;
    v257 = (uint64_t)v260;
    v258 = v290;
    (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v260, v290, v305);
    sub_1001CE87C(v143, v143, v257);

    (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v255);
    sub_10000882C(v313, (uint64_t *)&unk_1008380D0);
    Subtasks(v285, v320);
LABEL_84:
    (*(void (**)(char *, uint64_t))(v317 + 8))(v307, v319);
    return;
  }
  __break(1u);
LABEL_93:
  _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
  __break(1u);
LABEL_94:
  _diagnoseUnexpectedEnumCase<A>(type:)(v143, v143);
  __break(1u);
}

uint64_t sub_10021E264()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t Configuration;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v17[2];

  v0 = _s10PredicatesOMa(0);
  __chkstk_darwin(v0);
  v2 = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v4 = *(_QWORD *)(Configuration - 8);
  v5 = __chkstk_darwin(Configuration);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = REMRemindersListDataView.ScheduledByDayInvocation.Parameters.configuration.getter(v5);
  v9 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, Configuration);
  if ((v9 & 1) == 0)
    return 0;
  swift_storeEnumTagMultiPayload(v2, v0, 47);
  sub_10000D2C0();
  v11 = v10;
  sub_1000CACA8((uint64_t)v2);
  v12 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "entity");
  objc_msgSend(v13, "setEntity:", v14);

  objc_msgSend(v13, "setAffectedStores:", 0);
  objc_msgSend(v13, "setPredicate:", v11);
  v15 = NSManagedObjectContext.count<A>(for:)(v13, v12);

  return v15;
}

uint64_t sub_10021E440(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10021E474 + 4 * byte_1006B03D0[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_10021E474()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10021E82C(id a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(uint64_t, uint64_t, __n128);
  id v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  unint64_t v49;

  v4 = v3;
  isUniquelyReferenced_nonNull_native = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
  __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  v46 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - v12;
  v49 = (unint64_t)a1;
  if ((unint64_t)a2 >> 62)
  {
LABEL_30:
    if (a2 < 0)
      v37 = a2;
    else
      v37 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v14 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v14)
      goto LABEL_3;
  }
  else
  {
    v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v14)
    {
LABEL_3:
      v39 = v4;
      v40 = (_QWORD *)a3;
      v43 = a2 & 0xC000000000000001;
      v44 = v13;
      v15 = 4;
      v41 = a2;
      v42 = v14;
      while (1)
      {
        a1 = (id)(v15 - 4);
        if (v43)
        {
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a2);
          v20 = v15 - 3;
          if (__OFADD__(a1, 1))
            goto LABEL_27;
        }
        else
        {
          v19 = *(id *)(a2 + 8 * v15);
          v20 = v15 - 3;
          if (__OFADD__(a1, 1))
          {
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        v45 = v20;
        v47 = v19;
        v21 = objc_msgSend(v19, "identifier", v39);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

        v4 = *(_QWORD **)a3;
        if (*(_QWORD *)(*(_QWORD *)a3 + 16) && (sub_1002C65F8((uint64_t)v13), (v22 & 1) != 0))
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v13, isUniquelyReferenced_nonNull_native);
        }
        else
        {
          v23 = v47;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
          v25 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v24 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v25 >= v24 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1);
          v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
          specialized Array._endMutation()(v26);
          v27 = v9;
          v13 = *(char **)(v9 + 16);
          a2 = v46;
          v9 = isUniquelyReferenced_nonNull_native;
          ((void (*)(uint64_t, char *, uint64_t))v13)(v46, v44, isUniquelyReferenced_nonNull_native);
          a1 = v23;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a3);
          v48 = *(_QWORD **)a3;
          v4 = v48;
          *(_QWORD *)a3 = 0x8000000000000000;
          a3 = sub_1002C65F8(a2);
          v29 = v4[2];
          v30 = (v28 & 1) == 0;
          v31 = v29 + v30;
          if (__OFADD__(v29, v30))
            goto LABEL_28;
          a2 = v28;
          if (v4[3] >= v31)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1002D83D4();
          }
          else
          {
            sub_1002D0CD8(v31, isUniquelyReferenced_nonNull_native);
            v32 = sub_1002C65F8(v46);
            if ((a2 & 1) != (v33 & 1))
            {
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
              __break(1u);
              return result;
            }
            a3 = v32;
          }
          isUniquelyReferenced_nonNull_native = v9;
          v4 = v48;
          v9 = v27;
          if ((a2 & 1) != 0)
          {
            v16 = v48[7];

            *(_QWORD *)(v16 + 8 * a3) = a1;
            v14 = v42;
          }
          else
          {
            v48[(a3 >> 6) + 8] |= 1 << a3;
            ((void (*)(unint64_t, uint64_t, uint64_t))v13)(v4[6] + *(_QWORD *)(v27 + 72) * a3, v46, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(v4[7] + 8 * a3) = a1;
            v34 = v4[2];
            v35 = __OFADD__(v34, 1);
            v36 = v34 + 1;
            v14 = v42;
            if (v35)
              goto LABEL_29;
            v4[2] = v36;
          }
          a3 = (unint64_t)v40;
          *v40 = v4;
          v17 = swift_bridgeObjectRelease();
          v18 = *(void (**)(uint64_t, uint64_t, __n128))(v9 + 8);
          v18(v46, isUniquelyReferenced_nonNull_native, v17);
          a2 = v41;
          v13 = v44;
          ((void (*)(char *, uint64_t))v18)(v44, isUniquelyReferenced_nonNull_native);
        }

        ++v15;
        if (v45 == v14)
        {
          swift_bridgeObjectRelease();
          return v49;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

uint64_t sub_10021EBB8(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100841018, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10021EBDC(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100841030, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10021EC00(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10021EC38 + 4 * byte_1006B03F6[a1]))(0x49746E756F636361, 0xE900000000000044);
}

uint64_t sub_10021EC38()
{
  return 0x44497473696CLL;
}

unint64_t sub_10021EC4C()
{
  return 0xD000000000000010;
}

uint64_t sub_10021ECB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_10021E440(*a1);
  v5 = v4;
  v6 = sub_10021E440(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10021ED38()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_10021E440(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_10021ED98(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_10021E440(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_10021EDD8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_10021E440(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10021EE34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100222494(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10021EE60@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10021E440(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10021EE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100222494(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021EEAC()
{
  unsigned __int8 *v0;

  return sub_10021E440(*v0);
}

void sub_10021EEB4(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DB580;
}

void sub_10021EEC4(char *a1)
{
  sub_1002B3C18(*a1);
}

void sub_10021EED0()
{
  char *v0;

  sub_1004F4B28(*v0);
}

void sub_10021EED8(uint64_t a1)
{
  char *v1;

  sub_1002B5D04(a1, *v1);
}

void sub_10021EEE0(uint64_t a1)
{
  char *v1;

  sub_1002B2700(a1, *v1);
}

unint64_t sub_10021EEE8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10022244C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10021EF14@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10021EC00(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10021EF3C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10022244C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10021EF60()
{
  unsigned __int8 *v0;

  return sub_10021EC00(*v0);
}

void sub_10021EF68(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0020;
}

void sub_10021EF78()
{
  uint64_t v0;

  sub_10021EF94();
  qword_100871D40 = v0;
}

void sub_10021EF94()
{
  JUMPOUT(0x10021F038);
}

void sub_10021F4EC(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_100316FE4(*a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_10021F518@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000A388(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10021F574(void **a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  id v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;

  v3 = *a1;
  v4 = (void *)_convertErrorToNSError(_:)(a2);
  v5 = objc_msgSend(v4, "domain");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMErrorDomain);
  if (v6 == v9 && v8 == v10)
  {
    v13 = swift_bridgeObjectRelease_n(v8, 2).n128_u64[0];
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
    swift_bridgeObjectRelease();
    v13 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v12 & 1) == 0)
      goto LABEL_18;
  }
  if (objc_msgSend(v4, "code", *(double *)&v13) != (id)-3005)
    goto LABEL_18;
  v14 = objc_msgSend(v4, "userInfo");
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  if (!*(_QWORD *)(v15 + 16) || (v18 = sub_10001A6DC(v16, v17), (v19 & 1) == 0))
  {
    v79 = 0u;
    v80 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  sub_10001A670(*(_QWORD *)(v15 + 56) + 32 * v18, (uint64_t)&v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v80 + 1))
  {
LABEL_17:
    sub_10000882C((uint64_t)&v79, (uint64_t *)&unk_10083D5B0);
    goto LABEL_18;
  }
  if ((swift_dynamicCast(&v77, &v79, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    if (v77 == 0x65656E6769737361 && v78 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, 0x65656E6769737361, 0xE800000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
    {
LABEL_26:
      if (qword_100837000 != -1)
        swift_once(&qword_100837000, sub_10021EBB8);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_100841018);
      v39 = v3;
      v22 = Logger.logObject.getter(v39);
      v40 = static os_log_type_t.info.getter(v22);
      if (!os_log_type_enabled(v22, v40))
      {

        return 1;
      }
      v24 = swift_slowAlloc(42, -1);
      v41 = swift_slowAlloc(128, -1);
      *(_QWORD *)&v79 = v41;
      *(_DWORD *)v24 = 136315906;
      v42 = objc_msgSend(v39, "remObjectID");
      v75 = v41;
      if (v42)
      {
        v43 = v42;
        v44 = objc_msgSend(v42, "description");

        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v47 = v46;

      }
      else
      {
        v47 = 0xE300000000000000;
        v45 = 7104878;
      }
      v77 = sub_10001A820(v45, v47, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

      *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v24 + 12) = 2080;
      v49 = objc_msgSend(v39, "originator", v48);
      v76 = v40;
      if (v49)
      {
        v50 = v49;
        v51 = objc_msgSend(v49, "remObjectID");
        if (v51)
        {
          v52 = v51;
          v53 = objc_msgSend(v51, "description");

          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v56 = v55;

LABEL_39:
          v77 = sub_10001A820(v54, v56, (uint64_t *)&v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

          *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v24 + 22) = 2080;
          v58 = objc_msgSend(v39, "assignee", v57);
          if (v58)
          {
            v59 = v58;
            v60 = objc_msgSend(v58, "remObjectID");
            if (v60)
            {
              v61 = v60;
              v62 = objc_msgSend(v60, "description");

              v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
              v65 = v64;

            }
            else
            {

              v65 = 0xE300000000000000;
              v63 = 7104878;
            }
          }
          else
          {
            v65 = 0xE300000000000000;
            v63 = 7104878;
          }
          v77 = sub_10001A820(v63, v65, (uint64_t *)&v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

          *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v24 + 32) = 2080;
          v67 = objc_msgSend(v39, "reminder", v66);
          if (v67)
          {
            v68 = v67;
            v69 = objc_msgSend(v67, "remObjectID");
            if (v69)
            {
              v70 = v69;
              v71 = objc_msgSend(v69, "description");

              v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
              v74 = v73;

            }
            else
            {

              v74 = 0xE300000000000000;
              v72 = 7104878;
            }
          }
          else
          {
            v74 = 0xEF3E44497265646ELL;
            v72 = 0x696D65725F6F6E3CLL;
          }
          v77 = sub_10001A820(v72, v74, (uint64_t *)&v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v22, v76, "Found a dangling assignment with nullified assignee, we will skip it from the reminder.assignments {objectID: %s, originator: %s, assignee: %s, reminderID: %s}", (uint8_t *)v24, 0x2Au);
          swift_arrayDestroy(v75, 4, (char *)&type metadata for Any + 8);
          v35 = v75;
          goto LABEL_22;
        }

      }
      v56 = 0xE300000000000000;
      v54 = 7104878;
      goto LABEL_39;
    }
  }
LABEL_18:
  if (qword_100837000 != -1)
    swift_once(&qword_100837000, sub_10021EBB8);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100841018);
  swift_errorRetain(a2);
  v21 = swift_errorRetain(a2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v22, v23))
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

    return 1;
  }
  v24 = swift_slowAlloc(32, -1);
  v25 = swift_slowAlloc(96, -1);
  *(_QWORD *)&v79 = v25;
  *(_DWORD *)v24 = 136315650;
  v77 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
  v26 = sub_10001A630(&qword_1008398E8);
  v27 = String.init<A>(describing:)(&v77, v26);
  v77 = sub_10001A820(v27, v28, (uint64_t *)&v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 12) = 2080;
  v77 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
  v29 = sub_10001A630(&qword_100841350);
  v30 = String.init<A>(describing:)(&v77, v29);
  v77 = sub_10001A820(v30, v31, (uint64_t *)&v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 22) = 2080;
  v77 = a2;
  swift_errorRetain(a2);
  v32 = sub_10001A630((uint64_t *)&unk_10083AA20);
  v33 = String.init<A>(describing:)(&v77, v32);
  v77 = sub_10001A820(v33, v34, (uint64_t *)&v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
  swift_bridgeObjectRelease();
  swift_errorRelease(a2);
  swift_errorRelease(a2);
  _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error occured when mapping object from %s to %s {error: %s}", (uint8_t *)v24, 0x20u);
  swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
  v35 = v25;
LABEL_22:
  swift_slowDealloc(v35, -1, -1);
  swift_slowDealloc(v24, -1, -1);

  return 1;
}

void *sub_10021FE88(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  void *v5;
  void *v6;
  id v12;
  NSString v13;
  unsigned int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *log;
  uint64_t v37;
  _QWORD v38[2];
  _OWORD v39[2];
  uint64_t v40[4];

  v6 = v5;
  v12 = objc_msgSend(v6, "createResolutionTokenMapIfNecessary");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "mergeWithMap:forKey:", a4, v13);

  if ((a5 & 1) != 0)
  {
    if (v14)
    {
      if (a1)
      {
        v15 = a1;
        v16 = objc_msgSend(v15, "serializedData");
        a1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);

        v17 = objc_msgSend(v15, "attributedString");
        v18 = objc_msgSend(v17, "string");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      }
      else
      {

      }
      return a1;
    }
LABEL_24:

    return 0;
  }
  v19 = objc_msgSend(v6, "remObjectID");
  if (!v19)
  {
    if (qword_100837000 != -1)
      swift_once(&qword_100837000, sub_10021EBB8);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_100841018);
    v24 = v6;
    swift_bridgeObjectRetain_n(a3, 2);
    v25 = v24;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      log = v26;
      v29 = (_QWORD *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v40[0] = v37;
      *(_DWORD *)v28 = 138412546;
      v30 = objc_msgSend(v25, "objectID");
      *(_QWORD *)&v39[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, (char *)v39 + 8);
      *v29 = v30;

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(a3);
      *(_QWORD *)&v39[0] = sub_10001A820(a2, a3, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, (char *)v39 + 8);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, log, v27, "Can't merge documents for reminder because remObjectID is nil {reminder.objectID: %@, key: %s}", (uint8_t *)v28, 0x16u);
      v31 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v29, 1, v31);
      swift_slowDealloc(v29, -1, -1);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      return 0;
    }

    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_24;
  }
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v6, "valueForKey:", v21);

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)(v39, v22);
    swift_unknownObjectRelease(v22);
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  sub_1000A5CA8((uint64_t)v39, (uint64_t)v40, (uint64_t *)&unk_10083D5B0);
  if (v40[3])
  {
    v32 = swift_dynamicCast(v38, v40, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
    if (v32)
      v33 = v38[0];
    else
      v33 = 0;
    if (v32)
      v34 = v38[1];
    else
      v34 = 0xF000000000000000;
  }
  else
  {
    sub_10000882C((uint64_t)v40, (uint64_t *)&unk_10083D5B0);
    v33 = 0;
    v34 = 0xF000000000000000;
  }
  a1 = (void *)sub_100226178(a1, v33, v34, a2, a3, v20);
  sub_1000A71B4(v33, v34);

  return a1;
}

uint64_t sub_100220330(_OWORD *a1)
{
  if (qword_1008378C0 != -1)
    swift_once(&qword_1008378C0, sub_100575A20);
  return sub_10057663C(a1);
}

_QWORD *sub_100220394()
{
  void *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  uint64_t v4;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  char *v13;

  v2 = (char *)objc_msgSend(v0, "cachedDeserializedDueDateDeltaAlerts");
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)&v2[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
    swift_bridgeObjectRetain(v4);

  }
  else
  {
    v6 = objc_msgSend(v0, "dueDateDeltaAlertsData");
    if (v6)
    {
      v7 = v6;
      v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

      v11 = objc_autoreleasePoolPush();
      v4 = type metadata accessor for RDDueDateDeltaAlerts();
      sub_10009FC50(&qword_10083C300, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts, (uint64_t)&unk_1006A7398);
      static REMJSONRepresentable.fromJSONData(_:)(&v13, v8, v10);
      if (!v1)
      {
        v12 = v13;
        v4 = *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
        swift_bridgeObjectRetain(v4);

      }
      objc_autoreleasePoolPop(v11);
      sub_1000A71C8(v8, v10);
    }
    else
    {
      return _swiftEmptyArrayStorage;
    }
  }
  return (_QWORD *)v4;
}

id sub_1002204E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminderID");
  *a2 = result;
  return result;
}

uint64_t sub_100220524(void **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  unsigned __int8 v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  char v30;
  _QWORD v32[2];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v5).n128_u64[0];
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(v10, "dueDateDelta", v7);
  v12 = objc_msgSend(v11, "isEmpty");

  if ((v12 & 1) != 0)
  {
    v35 = v2;
    if (qword_100837000 != -1)
      swift_once(&qword_100837000, sub_10021EBB8);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100841018);
    v14 = v10;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v33 = (_QWORD *)swift_slowAlloc(8, -1);
      v34 = swift_slowAlloc(32, -1);
      v38 = v34;
      *(_DWORD *)v17 = 136315394;
      v32[1] = v17 + 4;
      v18 = objc_msgSend(v14, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      v19 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v36 = sub_10001A820(v20, v22, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

      *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v17 + 12) = 2112;
      v24 = objc_msgSend(v14, "reminderID", v23);
      v36 = (uint64_t)v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      v25 = v33;
      *v33 = v24;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: Found existing invalid empty early alert %s, dropping it from reminder %@", (uint8_t *)v17, 0x16u);
      v26 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v25, 1, v26);
      swift_slowDealloc(v25, -1, -1);
      v27 = v34;
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    v30 = 0;
  }
  else
  {
    v28 = objc_msgSend(v10, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v29 = sub_1001B23C0((uint64_t)v9, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v30 = v29 ^ 1;
  }
  return v30 & 1;
}

void sub_1002208A8(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Class isa;
  void (*v16)(char *, uint64_t);
  id v17;
  void *v18;
  uint64_t v19;
  double v20;
  NSString v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v14);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v13, v10);
  objc_msgSend(v2, "setIdentifier:", isa);

  v17 = objc_msgSend(a1, "identifier");
  if (v17)
  {
    v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v19, 1, v10);
  sub_1000A5CA8((uint64_t)v6, (uint64_t)v9, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    v21 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v9, v10);
    v22 = sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    UUID.uuidString.getter(v22);
    v16(v13, v10);
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setReminderIdentifier:", v21, v20);

  v23 = objc_msgSend(a1, "account");
  objc_msgSend(v2, "setAccount:", v23);

}

void sub_100220AE0(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  double v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  sub_1002208A8(a2);
  v16 = objc_msgSend(a3, "externalIdentifier");
  objc_msgSend(a1, "setOldExternalIdentifier:", v16);

  v17 = objc_msgSend(a3, "identifier");
  if (v17)
  {
    v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v19, 1, v6);
  sub_1000A5CA8((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v21 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    v22 = sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    UUID.uuidString.getter(v22);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(a1, "setOldListIdentifier:", v21, v20);

}

Swift::Void __swiftcall REMCDReminder.willChange(_:to:)(REMCDList_optional *_, REMCDList_optional *to)
{
  void *v2;
  void *v3;
  REMCDList_optional *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  REMCDList_optional *v12;
  REMCDList_optional *v13;
  id v14;
  REMCDList_optional *v15;
  id v16;
  REMCDList_optional *v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  REMCDList_optional *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  unsigned int v39;
  uint64_t v40;
  REMCDList_optional *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  void *v55;
  NSString v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  REMCDList_optional *v61;
  id v62;
  REMCDList_optional *v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  double v80;
  id v81;
  void *v82;
  unint64_t *v83;
  __objc2_class **v84;
  NSObject *v85;
  void *v86;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  REMCDList_optional *v98;
  os_log_type_t type;
  os_log_type_t typea;
  NSObject *log;
  NSObject *loga;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_type_t v106;
  id v107;
  id v108;
  id v109;
  _QWORD v110[3];
  char v111[16];
  uint64_t v112;
  uint64_t v113;

  v3 = v2;
  if (!_)
  {
    if (qword_100837000 != -1)
      swift_once(&qword_100837000, sub_10021EBB8);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_100841018);
    v41 = to;
    v108 = v2;
    v42 = Logger.logObject.getter(v108);
    v43 = static os_log_type_t.info.getter(v42);
    if (!os_log_type_enabled(v42, v43))
    {

      return;
    }
    v106 = v43;
    v44 = swift_slowAlloc(34, -1);
    v104 = swift_slowAlloc(64, -1);
    v113 = v104;
    *(_DWORD *)v44 = 67240962;
    LODWORD(v112) = objc_msgSend(v108, "isInserted");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);
    *(_WORD *)(v44 + 8) = 2082;
    v45 = objc_msgSend(v108, "remObjectID");
    v112 = (uint64_t)v45;
    v46 = sub_10001A630((uint64_t *)&unk_100844910);
    v47 = Optional.descriptionOrNil.getter(v46);
    v49 = v48;

    v112 = sub_10001A820(v47, v49, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

    *(_QWORD *)&v50 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v44 + 18) = 2082;
    if (to)
      to = (REMCDList_optional *)-[REMCDList_optional remObjectID](v41, "remObjectID", v50);
    v112 = (uint64_t)to;
    v51 = Optional.descriptionOrNil.getter(v46);
    v53 = v52;

    v112 = sub_10001A820(v51, v53, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

    *(_QWORD *)&v54 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v44 + 28) = 1026;
    LODWORD(v51) = objc_msgSend(v108, "isDeleted", v54);

    LODWORD(v112) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);

    _os_log_impl((void *)&_mh_execute_header, v42, v106, "Reminder has no oldList, no auxiliary reminder change info is needed {reminder.isInserted: %{BOOL,public}d, reminder: %{public}s, newList: %{public}s, isDeleted: %{BOOL,public}d}", (uint8_t *)v44, 0x22u);
    swift_arrayDestroy(v104, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v44, -1, -1);
    goto LABEL_32;
  }
  v5 = _;
  v6 = objc_msgSend(v2, "managedObjectContext");
  if (v6)
  {
    v7 = v6;
    v8 = objc_opt_self(RDStoreControllerManagedObjectContext);
    v9 = swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = (id)v9;
      if (to)
      {
        v107 = (id)v9;
        if (qword_100837000 != -1)
          swift_once(&qword_100837000, sub_10021EBB8);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100841018);
        v12 = to;
        v13 = v5;
        v14 = v2;
        v15 = v12;
        v16 = v14;
        v17 = v13;
        v18 = v16;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.default.getter(v19);
        if (os_log_type_enabled(v19, v20))
        {
          v21 = swift_slowAlloc(38, -1);
          v103 = swift_slowAlloc(96, -1);
          v113 = v103;
          *(_DWORD *)v21 = 136446978;
          log = v19;
          v22 = objc_msgSend(v18, "remObjectID");
          v98 = v15;
          v23 = v17;
          v24 = sub_10001A630((uint64_t *)&unk_100844910);
          type = v20;
          v25 = Optional.descriptionOrNil.getter(v24);
          v27 = v26;

          v112 = sub_10001A820(v25, v27, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

          *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 12) = 2082;
          v29 = -[REMCDList_optional remObjectID](v23, "remObjectID", v28);
          v112 = (uint64_t)v29;
          v30 = Optional.descriptionOrNil.getter(v24);
          v32 = v31;

          v112 = sub_10001A820(v30, v32, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

          *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 22) = 2082;
          v34 = -[REMCDList_optional remObjectID](v98, "remObjectID", v33);
          v112 = (uint64_t)v34;
          v35 = Optional.descriptionOrNil.getter(v24);
          v37 = v36;

          v112 = sub_10001A820(v35, v37, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

          v17 = v23;
          *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 32) = 1026;
          v39 = objc_msgSend(v18, "isDeleted", v38);

          LODWORD(v112) = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);

          _os_log_impl((void *)&_mh_execute_header, log, type, "Adding an auxiliary reminder change MOVE info {reminder: %{public}s, oldList: %{public}s, newList: %{public}s, isDeleted: %{BOOL,public}d}", (uint8_t *)v21, 0x26u);
          swift_arrayDestroy(v103, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

        }
        v42 = v17;
        v81 = v18;
        v82 = v81;
        v83 = (unint64_t *)&unk_100841358;
        v84 = off_1007D66A8;
        v85 = v42;
        v86 = v107;
      }
      else
      {
        if (qword_100837000 != -1)
          swift_once(&qword_100837000, sub_10021EBB8);
        v59 = type metadata accessor for Logger(0);
        sub_10001AAA8(v59, (uint64_t)qword_100841018);
        v60 = v2;
        v61 = v5;
        v62 = v60;
        v63 = v61;
        v64 = v62;
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.default.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          loga = v65;
          v67 = swift_slowAlloc(38, -1);
          v105 = swift_slowAlloc(96, -1);
          v113 = v105;
          *(_DWORD *)v67 = 136446978;
          v109 = v10;
          v68 = objc_msgSend(v64, "remObjectID");
          v69 = sub_10001A630((uint64_t *)&unk_100844910);
          typea = v66;
          v70 = Optional.descriptionOrNil.getter(v69);
          v72 = v71;

          v112 = sub_10001A820(v70, v72, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

          *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 12) = 2082;
          v74 = -[REMCDList_optional remObjectID](v63, "remObjectID", v73);
          v112 = (uint64_t)v74;
          v75 = Optional.descriptionOrNil.getter(v69);
          v77 = v76;

          v112 = sub_10001A820(v75, v77, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);

          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 22) = 2080;
          v112 = 0;
          v78 = Optional.descriptionOrNil.getter(v69);
          v112 = sub_10001A820(v78, v79, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
          *(_QWORD *)&v80 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 32) = 1026;
          LODWORD(v75) = objc_msgSend(v64, "isDeleted", v80);

          LODWORD(v112) = v75;
          v10 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);

          _os_log_impl((void *)&_mh_execute_header, loga, typea, "Adding an auxiliary reminder change DELETE info {reminder: %{public}s, oldList: %{public}s, newList: %s, isDeleted: %{BOOL,public}d}", (uint8_t *)v67, 0x26u);
          swift_arrayDestroy(v105, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v105, -1, -1);
          swift_slowDealloc(v67, -1, -1);

        }
        else
        {

        }
        v42 = v63;
        v81 = v64;
        v82 = v81;
        v83 = (unint64_t *)&unk_100841360;
        v84 = off_1007D66A0;
        v85 = v42;
        v86 = v10;
      }
      sub_100221964(v81, v85, v86, v83, v84);

LABEL_32:
      return;
    }

  }
  v55 = (void *)objc_opt_self(REMError);
  v56 = String._bridgeToObjectiveC()();
  v57 = objc_msgSend(v55, "internalErrorWithDebugDescription:", v56);

  swift_willThrow(v58);
  if (qword_100837000 != -1)
    swift_once(&qword_100837000, sub_10021EBB8);
  v87 = type metadata accessor for Logger(0);
  sub_10001AAA8(v87, (uint64_t)qword_100841018);
  v88 = v3;
  swift_errorRetain(v57);
  v89 = v88;
  v90 = swift_errorRetain(v57);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v91, v92))
  {
    v93 = swift_slowAlloc(18, -1);
    v94 = swift_slowAlloc(32, -1);
    v113 = v94;
    *(_DWORD *)v93 = 136446466;
    swift_getErrorValue(v57, v111, v110);
    v95 = Error.rem_errorDescription.getter(v110[1], v110[2]);
    v112 = sub_10001A820(v95, v96, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_bridgeObjectRelease();
    swift_errorRelease(v57);
    swift_errorRelease(v57);
    *(_WORD *)(v93 + 12) = 1026;
    v97 = objc_msgSend(v89, "isDeleted");

    LODWORD(v112) = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);

    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Failed to add auxiliary reminder change info due to error: %{public}s, isDeleted: %{BOOL,public}d", (uint8_t *)v93, 0x12u);
    swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v93, -1, -1);

    swift_errorRelease(v57);
  }
  else
  {

    swift_errorRelease(v57);
    swift_errorRelease(v57);
    swift_errorRelease(v57);

  }
}

void sub_100221964(void *a1, void *a2, void *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  void *ObjCClassFromMetadata;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  NSString v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  NSString v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v7 = sub_1000151B0(0, a4, a5);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v7);
  v9 = objc_msgSend(ObjCClassFromMetadata, "description");
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = objc_msgSend(a3, "transactionAuthor");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v63 = v14;
  v64 = v16;
  v17 = sub_10001A630((uint64_t *)&unk_10083A370);
  v61 = Optional.descriptionOrNil.getter(v17);
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_10022DC40(a1);
  if (!v20)
  {
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v37 = type metadata accessor for Logger(0);
    sub_10001AAA8(v37, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v11, 2);
    v38 = swift_bridgeObjectRetain_n(v19, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v63 = v42;
      *(_DWORD *)v41 = 136446466;
      swift_bridgeObjectRetain(v19);
      v65 = sub_10001A820(v61, (unint64_t)v19, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(v19, 3);
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      v65 = sub_10001A820(v60, (unint64_t)v11, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: %{public}s, cdType: %s}.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease_n(v19, 2);
    }
    v49 = (void *)objc_opt_self(REMError);
    v63 = 0;
    v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(133);
    v50 = 0xD000000000000075;
    v51 = 0x80000001006FD5E0;
    goto LABEL_26;
  }
  v21 = objc_msgSend(a3, "storeController");
  if (!v21)
  {
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v43 = type metadata accessor for Logger(0);
    sub_10001AAA8(v43, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v11, 2);
    v44 = swift_bridgeObjectRetain_n(v19, 2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(22, -1);
      v48 = swift_slowAlloc(64, -1);
      v63 = v48;
      *(_DWORD *)v47 = 136446466;
      swift_bridgeObjectRetain(v19);
      v65 = sub_10001A820(v61, (unint64_t)v19, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(v19, 3);
      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      v65 = sub_10001A820(v60, (unint64_t)v11, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Tried to insert an auxiliary change info but storeController is nil. Bailing {author: %{public}s, cdType: %s}.", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease_n(v19, 2);
    }
    v49 = (void *)objc_opt_self(REMError);
    v63 = 0;
    v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(102);
    v51 = 0x80000001006FD660;
    v50 = 0xD000000000000056;
LABEL_26:
    String.append(_:)(*(Swift::String *)&v50);
    v52._countAndFlagsBits = v61;
    v52._object = v19;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0x657079546463202CLL;
    v53._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v53);
    v54._countAndFlagsBits = v60;
    v54._object = v11;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 11901;
    v55._object = (void *)0xE200000000000000;
    String.append(_:)(v55);
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "internalErrorWithDebugDescription:", v56, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v57);
    return;
  }
  v59 = a2;
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  v58 = v22;
  v24 = objc_msgSend(v22, "storeForAccountIdentifier:", v23, swift_bridgeObjectRelease().n128_f64[0]);

  v25 = objc_msgSend(ObjCClassFromMetadata, "entity");
  v26 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v25, a3);
  if (v24)
  {
    v27 = v24;
    v28 = v26;
    objc_msgSend(a3, "assignObject:toPersistentStore:", v28, v27);

  }
  v29 = qword_1008371E8;
  v30 = v26;
  if (v29 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v19);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.info.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v63 = v36;
    *(_DWORD *)v35 = 136315394;
    swift_bridgeObjectRetain(v11);
    v65 = sub_10001A820(v60, (unint64_t)v11, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v35 + 12) = 2082;
    swift_bridgeObjectRetain(v19);
    v65 = sub_10001A820(v61, (unint64_t)v19, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Inserted %s {author: %{public}s}", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v11, 2);
  }
  sub_100220AE0(v30, a1, v59);

}

uint64_t type metadata accessor for REMReminderStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd28REMReminderStorageCDIngestor);
}

_UNKNOWN **sub_100222288()
{
  return &off_1007EA700;
}

_UNKNOWN **sub_100222294()
{
  return &off_1007EA6D0;
}

uint64_t sub_1002222A0(uint64_t a1, uint64_t a2)
{
  return sub_1003804E0(a2);
}

uint64_t sub_1002222AC(uint64_t a1, uint64_t a2)
{
  return sub_100380990(a2);
}

_QWORD *sub_1002222B8(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;

  v4 = a1;
  v22 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      v7 = v4 & 0xC000000000000001;
      v8 = v4 & 0xFFFFFFFFFFFFFF8;
      v19 = v5;
      v20 = v4;
      while (v7)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
LABEL_9:
        v10 = v9;
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_17;
        v21 = v9;
        v12 = sub_100220524(&v21, (uint64_t)a2);
        if (v2)
        {
          swift_bridgeObjectRelease();

          swift_release(v22);
          return a2;
        }
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v13 = v8;
          v14 = v22[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
          v15 = v14;
          v8 = v13;
          v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v10);
          specialized ContiguousArray._endMutation()(v16);
          v5 = v19;
          v4 = v20;
        }
        else
        {

        }
        ++v6;
        if (v11 == v5)
        {
          a2 = v22;
          goto LABEL_23;
        }
      }
      if (v6 < *(_QWORD *)(v8 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v17 = v4;
      else
        v17 = v4 & 0xFFFFFFFFFFFFFF8;
      v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v5)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a2 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  return a2;
}

unint64_t sub_10022244C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DBE18, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_100222494(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DBEC8, a1, a2, &unk_100837A40);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x26)
    return 38;
  else
    return v3;
}

_QWORD *sub_1002224E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  void *v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v5 = _CocoaArrayWrapper.endIndex.getter(a1);
  if (!v5)
    return _swiftEmptyArrayStorage;
LABEL_3:
  v22 = v2;
  v23 = v4;
  v6 = v4 & 0xC000000000000001;
  v7 = v4 & 0xFFFFFFFFFFFFFF8;
  v8 = v4 + 32;
  while (!__OFSUB__(v5--, 1))
  {
    if (v6)
    {
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v23);
    }
    else
    {
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_17;
      if (v5 >= *(_QWORD *)(v7 + 16))
        goto LABEL_18;
      v12 = *(id *)(v8 + 8 * v5);
    }
    v13 = v12;
    v14 = objc_msgSend(v12, "dueDateDelta", v22);
    v15 = objc_msgSend(v14, "isEmpty");

    if (v15)
    {
      v17 = v13;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v20);

      if (!v5)
        return _swiftEmptyArrayStorage;
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v13);
      specialized ContiguousArray._endMutation()(v10);
      if (!v5)
        return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1002226A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  __n128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;

  v37 = a2;
  v3 = type metadata accessor for UUID(0);
  v43 = *(_QWORD **)(v3 - 8);
  __chkstk_darwin(v3);
  v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v44 = (char *)&v33 - v6;
  v45 = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
    return _swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v32 = a1;
  else
    v32 = a1 & 0xFFFFFFFFFFFFFF8;
  v7 = _CocoaArrayWrapper.endIndex.getter(v32);
  if (!v7)
    return _swiftEmptyArrayStorage;
LABEL_3:
  v38 = a1 & 0xC000000000000001;
  v34 = a1 + 32;
  v35 = a1 & 0xFFFFFFFFFFFFFF8;
  v36 = a1;
  v8 = v41;
  while (1)
  {
    v13 = __OFSUB__(v7, 1);
    v14 = v7 - 1;
    if (v13)
      break;
    v40 = v14;
    if (v38)
    {
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a1);
    }
    else
    {
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_20;
      if (v14 >= *(_QWORD *)(v35 + 16))
        goto LABEL_21;
      v15 = *(id *)(v34 + 8 * v14);
    }
    v16 = v15;
    v17 = *v37;
    *(_QWORD *)&v18 = swift_bridgeObjectRetain(*v37).n128_u64[0];
    v39 = v16;
    v19 = objc_msgSend(v16, "identifier", v18);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    if (*(_QWORD *)(v17 + 16)
      && (v20 = *(_QWORD *)(v17 + 40),
          v21 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v3, v21), v23 = -1 << *(_BYTE *)(v17 + 32), v24 = v22 & ~v23, ((*(_QWORD *)(v17 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
    {
      v42 = ~v23;
      v25 = v43[9];
      v26 = (void (*)(char *, unint64_t, uint64_t))v43[2];
      while (1)
      {
        v26(v8, *(_QWORD *)(v17 + 48) + v25 * v24, v3);
        v27 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v44, v3, v27);
        v29 = (void (*)(char *, uint64_t))v43[1];
        v29(v8, v3);
        if ((v28 & 1) != 0)
          break;
        v24 = (v24 + 1) & v42;
        if (((*(_QWORD *)(v17 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          goto LABEL_4;
      }
      v30 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v29)(v44, v3, v30);

    }
    else
    {
LABEL_4:
      v9 = swift_bridgeObjectRelease();
      v10 = ((uint64_t (*)(char *, uint64_t, __n128))v43[1])(v44, v3, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = v45[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v39);
      specialized ContiguousArray._endMutation()(v12);
    }
    a1 = v36;
    v7 = v40;
    if (!v40)
      return v45;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return v45;
}

uint64_t sub_1002229AC(_QWORD *a1, uint8_t *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  _QWORD *v72;
  unint64_t v73;
  char v74;
  id v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint8_t *v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  int v103;
  _BOOL4 v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t result;
  uint64_t v110;
  char *v111;
  id v112;
  void *v113;
  id v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  NSObject *v121;
  NSObject *v122;
  int v123;
  uint64_t *v124;
  NSObject *v125;
  int64_t isa;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  int v131;
  Class v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint8_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  NSObject *v147;
  int v148;
  uint8_t *v149;
  int64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *v176;
  uint64_t v177;
  uint64_t *v178;
  char *v179;
  char *v180;
  uint8_t *v181;
  NSObject *v182;
  NSObject *v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188[3];
  _QWORD *v189;
  _QWORD *p_isa;
  NSObject *v191;
  uint64_t v192;
  _QWORD *v193;
  unint64_t v194;

  v184 = a3;
  v176 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(uint64_t **)(v6 - 8);
  __chkstk_darwin(v6);
  v185 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v178 = (uint64_t *)((char *)&v171 - v10);
  __chkstk_darwin(v11);
  v183 = ((char *)&v171 - v12);
  __chkstk_darwin(v13);
  v182 = ((char *)&v171 - v14);
  __chkstk_darwin(v15);
  v181 = (uint8_t *)&v171 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v171 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v171 - v21;
  v194 = (unint64_t)_swiftEmptyArrayStorage;
  v192 = (uint64_t)_swiftEmptyArrayStorage;
  v193 = _swiftEmptyDictionarySingleton;
  if (a1)
    v23 = a1;
  else
    v23 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v24 = sub_1002224E4((uint64_t)v23, &v192);
  swift_bridgeObjectRelease();
  v177 = sub_10021E82C(_swiftEmptyArrayStorage, (uint64_t)v24, (unint64_t)&v193);
  v179 = v3;
  swift_bridgeObjectRelease();
  v25 = v192;
  v26 = (unint64_t)v192 >> 62;
  if (!((unint64_t)v192 >> 62))
  {
    v27 = *(_QWORD *)((v192 & 0xFFFFFFFFFFFFF8) + 0x10);
    v187 = v7;
    if (v27)
      goto LABEL_6;
LABEL_33:
    v37 = v184;
    goto LABEL_34;
  }
  if (v192 < 0)
    v62 = v192;
  else
    v62 = v192 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v192);
  v63 = _CocoaArrayWrapper.endIndex.getter(v62);
  swift_bridgeObjectRelease();
  v187 = v7;
  if (!v63)
    goto LABEL_33;
LABEL_6:
  v180 = v19;
  v188[0] = v25;
  swift_bridgeObjectRetain(v25);
  v28 = sub_10001A630((uint64_t *)&unk_10083FDB0);
  v7 = &qword_10083A1E0;
  v29 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v186 = v25;
  v30 = v29;
  v4 = sub_1000A5F84((unint64_t *)&qword_100850A80, (uint64_t *)&unk_10083FDB0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v174 = v30;
  v32 = v30;
  v33 = v186;
  v173 = v31;
  v34 = v179;
  v175 = Sequence.mapToSet<A>(_:)(sub_1002204E4, 0, v28, v32, v4, v31);
  v179 = v34;
  swift_bridgeObjectRelease();
  if (v26)
  {
    if (v33 < 0)
      v36 = v33;
    else
      v36 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v33);
    v35 = _CocoaArrayWrapper.endIndex.getter(v36);
  }
  else
  {
    v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v33);
  }
  v37 = v184;
  if (v35)
  {
    v188[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v35 & ~(v35 >> 63), 0);
    if (v35 < 0)
    {
      __break(1u);
      goto LABEL_72;
    }
    v38 = 0;
    v4 = v188[0];
    v39 = v33 & 0xC000000000000001;
    do
    {
      if (v39)
        v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v33);
      else
        v40 = *(id *)(v33 + 8 * v38 + 32);
      v41 = v40;
      v42 = objc_msgSend(v40, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v188[0] = v4;
      v44 = *(_QWORD *)(v4 + 16);
      v43 = *(_QWORD *)(v4 + 24);
      if (v44 >= v43 >> 1)
      {
        sub_1001C1BE4(v43 > 1, v44 + 1, 1);
        v4 = v188[0];
      }
      ++v38;
      *(_QWORD *)(v4 + 16) = v44 + 1;
      ((void (*)(unint64_t, char *, uint64_t))v187[4])(v4+ ((*((unsigned __int8 *)v187 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v187 + 80))+ v187[9] * v44, v22, v6);
      v33 = v186;
    }
    while (v35 != v38);
    swift_bridgeObjectRelease();
    v37 = v184;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v45 = v175;
  if (qword_100837000 != -1)
    swift_once(&qword_100837000, sub_10021EBB8);
  v46 = type metadata accessor for Logger(0);
  sub_10001AAA8(v46, (uint64_t)qword_100841018);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v4);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.fault.getter();
  v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    LODWORD(v186) = v50;
    v52 = v51;
    v172 = swift_slowAlloc(64, -1);
    v188[0] = v172;
    *(_DWORD *)v52 = 136446466;
    swift_bridgeObjectRetain(v45);
    v54 = Set.description.getter(v53, v174, v173);
    v56 = v55;
    swift_bridgeObjectRelease();
    v191 = sub_10001A820(v54, v56, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
    swift_bridgeObjectRelease_n(v45, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2082;
    swift_bridgeObjectRetain(v4);
    v58 = Array.description.getter(v57, v6);
    v60 = v59;
    swift_bridgeObjectRelease();
    v191 = sub_10001A820(v58, v60, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &v192);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v186, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: Detected attempts to insert/update invalid empty early alert with 0 delta {reminderIDs: %{public}s, ids: %{public}s}", (uint8_t *)v52, 0x16u);
    v61 = v172;
    swift_arrayDestroy(v172, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v52, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v45, 2);
  }
  v7 = v187;
  v19 = v180;
LABEL_34:
  v35 = v177;
  v191 = &_swiftEmptySetSingleton;
  if (!((unint64_t)v177 >> 62))
  {
    if (*(_QWORD *)((v177 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_36;
LABEL_57:
    swift_bridgeObjectRetain(v37);
    sub_1001E2CF4(v87);
    goto LABEL_63;
  }
  if (v177 < 0)
    v85 = v177;
  else
    v85 = v177 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v177);
  v86 = _CocoaArrayWrapper.endIndex.getter(v85);
  swift_bridgeObjectRelease();
  if (!v86)
    goto LABEL_57;
LABEL_36:
  if (!((unint64_t)v37 >> 62))
  {
    v33 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v37);
    if (v33)
      goto LABEL_38;
LABEL_62:
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  if (v37 < 0)
    v88 = v37;
  else
    v88 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v37);
  v33 = _CocoaArrayWrapper.endIndex.getter(v88);
  if (!v33)
    goto LABEL_62;
LABEL_38:
  if (v33 < 1)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v64 = 0;
  v186 = v37 & 0xC000000000000001;
  v180 = (char *)v33;
  do
  {
    if (v186)
      v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v37);
    else
      v69 = *(id *)(v37 + 8 * v64 + 32);
    v70 = v69;
    v71 = objc_msgSend(v69, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

    v72 = v193;
    if (v193[2] && (v73 = sub_1002C65F8((uint64_t)v19), (v74 & 1) != 0))
    {
      v75 = *(id *)(v72[7] + 8 * v73);
      v76 = (void (*)(char *, uint64_t))v7[1];
      v77 = v19;
      v76(v19, v6);
      v78 = v75;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
      v80 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v79 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v80 >= v79 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1);
      v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v78);
      specialized Array._endMutation()(v81);
      v82 = objc_msgSend(v70, "identifier");
      v83 = (uint64_t)v182;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v82);

      v84 = (uint64_t)v181;
      sub_1002DB318((uint64_t)v181, v83);

      v76((char *)v84, v6);
      v37 = v184;
      v19 = v77;
      v33 = (uint64_t)v180;
    }
    else
    {
      ((void (*)(char *, uint64_t))v7[1])(v19, v6);
      v65 = v70;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
      v67 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v66 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v67 >= v66 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1);
      v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v65);
      specialized Array._endMutation()(v68);

    }
    ++v64;
    v7 = v187;
  }
  while (v33 != v64);
  swift_bridgeObjectRelease();
  v35 = v177;
LABEL_63:
  v89 = v179;
  v4 = (uint64_t)sub_1002226A0(v35, &v191);
  v90 = v89;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v4);
  sub_1001E2CF4(v91);
  v92 = v176;
  if (v176)
    v35 = (uint64_t)v176;
  else
    v35 = (uint64_t)&_swiftEmptySetSingleton;
  v93 = v194;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v93);
  v94 = v90;
  v96 = sub_1002222B8(v95, (_QWORD *)v35);
  v180 = v94;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v194 = (unint64_t)v96;
  v7 = v178;
  if (v191[2].isa)
  {
    LODWORD(v179) = 0;
    v33 = (uint64_t)v185;
    goto LABEL_78;
  }
  v33 = (uint64_t)v185;
  if ((unint64_t)v4 >> 62)
  {
LABEL_73:
    if (v4 < 0)
      v97 = v4;
    else
      v97 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v98 = _CocoaArrayWrapper.endIndex.getter(v97);
    swift_bridgeObjectRelease();
    if (v98)
      goto LABEL_70;
    goto LABEL_77;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_70:
    LODWORD(v179) = 0;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v179) = *(_QWORD *)(v35 + 16) == 0;
LABEL_78:
  if (qword_100837000 != -1)
    goto LABEL_127;
  while (1)
  {
    v99 = type metadata accessor for Logger(0);
    v100 = sub_10001AAA8(v99, (uint64_t)qword_100841018);
    swift_bridgeObjectRetain(v4);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    v104 = os_log_type_enabled(v102, (os_log_type_t)v103);
    v184 = v35;
    v181 = (uint8_t *)v100;
    if (!v104)
    {

      swift_bridgeObjectRelease_n(v4, 2);
      goto LABEL_94;
    }
    LODWORD(v186) = v103;
    v105 = (uint8_t *)swift_slowAlloc(12, -1);
    v106 = swift_slowAlloc(32, -1);
    v188[0] = v106;
    *(_DWORD *)v105 = 136315138;
    if ((unint64_t)v4 >> 62)
    {
      v170 = v4 < 0 ? v4 : v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v107 = _CocoaArrayWrapper.endIndex.getter(v170);
      swift_bridgeObjectRelease();
    }
    else
    {
      v107 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v108 = _swiftEmptyArrayStorage;
    v182 = v106;
    if (v107)
      break;
LABEL_93:
    v118 = Array.description.getter(v108, v6);
    v120 = v119;
    swift_bridgeObjectRelease();
    p_isa = (_QWORD *)sub_10001A820(v118, v120, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v191);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v186, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges: INSERTED = %s", v105, 0xCu);
    v121 = v182;
    swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v121, -1, -1);
    swift_slowDealloc(v105, -1, -1);

    v7 = v178;
    v35 = v184;
LABEL_94:
    v122 = Logger.logObject.getter(v117);
    v123 = static os_log_type_t.info.getter(v122);
    if (os_log_type_enabled(v122, (os_log_type_t)v123))
    {
      LODWORD(v177) = v123;
      v124 = (uint64_t *)swift_slowAlloc(12, -1);
      v176 = (uint8_t *)swift_slowAlloc(32, -1);
      p_isa = v176;
      v178 = v124;
      *(_DWORD *)v124 = 136315138;
      swift_beginAccess(&v191, v188, 0, 0);
      v125 = v191;
      isa = (int64_t)v191[2].isa;
      v127 = _swiftEmptyArrayStorage;
      if (isa)
      {
        v175 = (uint64_t)v122;
        v189 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v191);
        sub_1001C1BE4(0, isa, 0);
        v127 = v189;
        v35 = sub_10028F928(v125);
        v129 = v128;
        v131 = v130 & 1;
        v182 = v125;
        v183 = v125 + 7;
        v33 = (uint64_t)v187;
        while ((v35 & 0x8000000000000000) == 0 && v35 < 1 << LOBYTE(v125[4].isa))
        {
          if (((*(unint64_t *)((char *)&v183->isa + (((unint64_t)v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
            goto LABEL_122;
          if (HIDWORD(v125[4].isa) != (_DWORD)v129)
            goto LABEL_123;
          LODWORD(v186) = v131;
          v132 = v125[6].isa;
          v133 = *(_QWORD *)(v33 + 72);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16))(v7, (uint64_t)v132 + v133 * v35, v6);
          v189 = v127;
          v134 = v6;
          v136 = v127[2];
          v135 = v127[3];
          v4 = (uint64_t)v7;
          if (v136 >= v135 >> 1)
          {
            v174 = v134;
            sub_1001C1BE4(v135 > 1, v136 + 1, 1);
            v134 = v174;
            v127 = v189;
          }
          v127[2] = v136 + 1;
          v137 = (unint64_t)v127
               + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
               + v136 * v133;
          v6 = v134;
          (*(void (**)(unint64_t, uint64_t *, uint64_t))(v33 + 32))(v137, v7, v134);
          v125 = v182;
          v138 = sub_10036456C(v35, v129, v186 & 1, v182);
          v35 = v138;
          v129 = v139;
          v131 = v140 & 1;
          if (!--isa)
          {
            sub_1000E515C(v138, v139, v131);
            swift_bridgeObjectRelease();
            v122 = v175;
            goto LABEL_106;
          }
        }
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
LABEL_106:
      v141 = (uint8_t *)v178;
      v142 = Array.description.getter(v127, v6);
      v144 = v143;
      swift_bridgeObjectRelease();
      v189 = (_QWORD *)sub_10001A820(v142, v144, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &p_isa);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v177, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges:  UPDATED = %s", v141, 0xCu);
      v145 = v176;
      swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v141, -1, -1);

      v35 = v184;
      v33 = (uint64_t)v185;
    }
    else
    {

    }
    swift_bridgeObjectRetain(v35);
    v147 = Logger.logObject.getter(v146);
    v148 = static os_log_type_t.info.getter(v147);
    if (!os_log_type_enabled(v147, (os_log_type_t)v148))
    {

      swift_bridgeObjectRelease_n(v35, 2);
LABEL_120:
      v169 = v179 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v169;
    }
    v149 = (uint8_t *)swift_slowAlloc(12, -1);
    v183 = swift_slowAlloc(32, -1);
    p_isa = &v183->isa;
    *(_DWORD *)v149 = 136315138;
    v150 = *(_QWORD *)(v35 + 16);
    v151 = _swiftEmptyArrayStorage;
    if (!v150)
    {
LABEL_119:
      v165 = Array.description.getter(v151, v6);
      v167 = v166;
      swift_bridgeObjectRelease();
      v189 = (_QWORD *)sub_10001A820(v165, v167, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &p_isa);
      swift_bridgeObjectRelease_n(v35, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v148, "REMReminderStorageCDIngestor:applyDueDateDeltaAlertChanges:  DELETED = %s", v149, 0xCu);
      v168 = v183;
      swift_arrayDestroy(v183, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v168, -1, -1);
      swift_slowDealloc(v149, -1, -1);

      goto LABEL_120;
    }
    LODWORD(v178) = v148;
    v181 = v149;
    v182 = v147;
    v189 = _swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v150, 0);
    v151 = v189;
    v4 = sub_10028F928(v35);
    v153 = v152;
    v155 = v154 & 1;
    v185 = (char *)(v35 + 56);
    v7 = v187;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v35 + 32))
    {
      if (((*(_QWORD *)&v185[((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8] >> v4) & 1) == 0)
        goto LABEL_125;
      if (*(_DWORD *)(v35 + 36) != (_DWORD)v153)
        goto LABEL_126;
      LODWORD(v186) = v155;
      v156 = *(_QWORD *)(v35 + 48);
      v157 = v7[9];
      ((void (*)(uint64_t, uint64_t, uint64_t))v7[2])(v33, v156 + v157 * v4, v6);
      v189 = v151;
      v158 = v6;
      v160 = v151[2];
      v159 = v151[3];
      if (v160 >= v159 >> 1)
      {
        v174 = v158;
        sub_1001C1BE4(v159 > 1, v160 + 1, 1);
        v158 = v174;
        v151 = v189;
      }
      v151[2] = v160 + 1;
      v161 = (unint64_t)v151
           + ((*((unsigned __int8 *)v7 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v7 + 80))
           + v160 * v157;
      v6 = v158;
      ((void (*)(unint64_t, uint64_t, uint64_t))v7[4])(v161, v33, v158);
      v35 = v184;
      v162 = sub_10036456C(v4, v153, v186 & 1, v184);
      v4 = v162;
      v153 = v163;
      v155 = v164 & 1;
      if (!--v150)
      {
        sub_1000E515C(v162, v163, v155);
        v149 = v181;
        v147 = v182;
        LOBYTE(v148) = (_BYTE)v178;
        goto LABEL_119;
      }
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    swift_once(&qword_100837000, sub_10021EBB8);
  }
  p_isa = _swiftEmptyArrayStorage;
  result = sub_1001C1BE4(0, v107 & ~(v107 >> 63), 0);
  if ((v107 & 0x8000000000000000) == 0)
  {
    v176 = v105;
    v177 = (uint64_t)v102;
    v110 = 0;
    v108 = p_isa;
    v111 = (char *)v183;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v110, v4);
      else
        v112 = *(id *)(v4 + 8 * v110 + 32);
      v113 = v112;
      v114 = objc_msgSend(v112, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

      p_isa = v108;
      v116 = v108[2];
      v115 = v108[3];
      if (v116 >= v115 >> 1)
      {
        sub_1001C1BE4(v115 > 1, v116 + 1, 1);
        v108 = p_isa;
      }
      ++v110;
      v108[2] = v116 + 1;
      ((void (*)(unint64_t, char *, uint64_t))v187[4])((unint64_t)v108+ ((*((unsigned __int8 *)v187 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v187 + 80))+ v187[9] * v116, v111, v6);
      v33 = (uint64_t)v185;
    }
    while (v107 != v110);
    v105 = v176;
    v102 = v177;
    goto LABEL_93;
  }
  __break(1u);
  return result;
}

id sub_100223BEC()
{
  uint64_t v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = 0;
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "userActivityWithDictionaryData:error:", isa, &v8);

  v3 = v8;
  if (v2)
  {
    v4 = v8;
  }
  else
  {
    v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }
  return v2;
}

char *sub_100223CB4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t ObjCClassFromMetadata;
  NSString v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  objc_class *v81;
  Class isa;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  objc_class *v88;
  Class v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  id v95;
  void *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(_QWORD, _QWORD, _QWORD);
  char *v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  Class v109;
  id v110;
  uint64_t v111;
  char *v112;
  void *v113;
  char *v114;
  void (*v115)(_QWORD, _QWORD, _QWORD);
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  Class v128;
  id v129;
  double v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Class v143;
  objc_class *v144;
  Class v145;
  uint64_t v146;
  char *v147;
  void (*v148)(_QWORD, _QWORD, _QWORD);
  NSDateComponents v149;
  objc_class *v150;
  Class v151;
  char *v152;
  char *v153;
  id v154;
  objc_class *v155;
  Class v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  objc_class *v160;
  Class v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  id v165;
  id v166;
  double v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  Class v180;
  uint64_t v181;
  uint64_t inited;
  char *v183;
  id v184;
  id v185;
  char *v186;
  id v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  Class v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  char *v205;
  id v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  Class v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  Class v245;
  double v246;
  objc_class *v247;
  Class v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  id v253;
  void *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  Class v258;
  id v259;
  unint64_t v260;
  uint64_t v261;
  id v262;
  void *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  NSURL *v268;
  uint64_t v269;
  void *v270;
  objc_class *v271;
  Class v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  id v276;
  void *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  id v281;
  uint64_t v282;
  void *v284;
  objc_class *v285;
  Class v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  objc_class *v292;
  Class v293;
  char *v294;
  char *v295;
  NSDate v296;
  char *v297;
  id v298;
  objc_class *v299;
  Class v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  id v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  void (*v330)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  _QWORD *v335;
  char v336[8];
  char v337[8];
  char v338[8];
  id v339;
  uint64_t v340;

  v319 = type metadata accessor for URL(0);
  v318 = *(_QWORD *)(v319 - 8);
  __chkstk_darwin(v319);
  v311 = (char *)&v303 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v3);
  v326 = (char *)&v303 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = type metadata accessor for DateComponents(0);
  v325 = *(char **)(v324 - 8);
  __chkstk_darwin(v324);
  v321 = (char *)&v303 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v6);
  v8 = (char *)&v303 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v317 = (char *)&v303 - v10;
  v335 = (_QWORD *)type metadata accessor for Logger(0);
  v331 = *(v335 - 1);
  __chkstk_darwin(v335);
  v12 = (char *)&v303 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v323 = (char *)&v303 - v14;
  __chkstk_darwin(v15);
  v322 = (char *)&v303 - v16;
  __chkstk_darwin(v17);
  v320 = (char *)&v303 - v18;
  v327 = type metadata accessor for Date(0);
  v332 = *(_QWORD *)(v327 - 8);
  __chkstk_darwin(v327);
  v316 = (char *)&v303 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v314 = (char *)&v303 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v303 - v23;
  v25 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v25);
  v27 = (char *)&v303 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v310 = (char *)&v303 - v29;
  __chkstk_darwin(v30);
  v313 = (char *)&v303 - v31;
  __chkstk_darwin(v32);
  v328 = (uint64_t)&v303 - v33;
  __chkstk_darwin(v34);
  v315 = (char *)&v303 - v35;
  __chkstk_darwin(v36);
  v312 = (char *)&v303 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)&v303 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)&v303 - v42;
  *(_QWORD *)&v45 = __chkstk_darwin(v44).n128_u64[0];
  v47 = (char *)&v303 - v46;
  v339 = 0;
  v48 = objc_msgSend(a1, "remObjectIDWithError:", &v339, v45);
  v49 = v339;
  if (!v48)
  {
    v64 = v339;
    _convertNSErrorToError(_:)(v49);

    swift_willThrow(v65);
    return v8;
  }
  v307 = v8;
  v329 = v48;
  v308 = v12;
  v50 = v339;
  v51 = objc_msgSend(a1, "account");
  if (!v51
    || (v52 = v51,
        v8 = (char *)objc_msgSend(v51, "remObjectID"),
        v52,
        (v309 = v8) == 0))
  {
    if (qword_100837008 != -1)
      swift_once(&qword_100837008, sub_10021EBDC);
    sub_10001AAA8((uint64_t)v335, (uint64_t)qword_100841030);
    v56 = v329;
    v57 = v329;
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v335 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v60 = 138412290;
      v8 = (char *)(v60 + 12);
      v339 = v57;
      v61 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v339, &v340);
      v62 = v335;
      *v335 = v56;

      _os_log_impl((void *)&_mh_execute_header, v58, v59, "REMReminderStorageCDIngestor: cdReminder.account is nil {cdReminder.remObjectID: %@}", v60, 0xCu);
      v63 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v62, 1, v63);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {

      v58 = v57;
    }

    v66 = (void *)objc_opt_self(REMError);
    v67 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v67);
    v69 = String._bridgeToObjectiveC()();
    objc_msgSend(v66, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v69);

    swift_willThrow(v70);
    return v8;
  }
  v53 = objc_msgSend(a1, "list");
  v304 = v27;
  if (v53)
  {
    v54 = v53;
    v55 = objc_msgSend(v53, "remObjectID");

  }
  else
  {
    v55 = 0;
  }
  v71 = objc_allocWithZone((Class)REMReminderStorage);
  v305 = v55;
  v333 = (char *)objc_msgSend(v71, "initWithObjectID:listID:accountID:", v329, v55, v309);
  v72 = objc_msgSend(a1, "parentReminder");
  if (v72)
  {
    v73 = v72;
    v74 = objc_msgSend(v72, "remObjectID");

  }
  else
  {
    v74 = 0;
  }
  v75 = v333;
  objc_msgSend(v333, "setParentReminderID:", v74);

  v76 = objc_msgSend(a1, "daCalendarItemUniqueIdentifier");
  objc_msgSend(v75, "setDaCalendarItemUniqueIdentifier:", v76);

  v77 = objc_msgSend(a1, "externalIdentifier");
  objc_msgSend(v75, "setExternalIdentifier:", v77);

  v78 = objc_msgSend(a1, "externalModificationTag");
  objc_msgSend(v75, "setExternalModificationTag:", v78);

  v79 = objc_msgSend(a1, "daSyncToken");
  objc_msgSend(v75, "setDaSyncToken:", v79);

  v80 = objc_msgSend(a1, "daPushKey");
  objc_msgSend(v75, "setDaPushKey:", v80);

  objc_msgSend(v75, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));
  objc_msgSend(v75, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));
  v81 = (objc_class *)objc_msgSend(a1, "titleDocument");
  isa = v81;
  if (v81)
  {
    v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
    v85 = v84;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v83, v85);
  }
  v86 = v333;
  objc_msgSend(v333, "setTitleDocumentData:", isa);

  v87 = objc_msgSend(a1, "title");
  objc_msgSend(v86, "setTitleAsStringByCDIngestor:", v87);

  objc_msgSend(v86, "setCompleted:", objc_msgSend(a1, "completed"));
  v88 = (objc_class *)objc_msgSend(a1, "completionDate");
  v89 = v88;
  v306 = v24;
  if (v88)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v88);

    v90 = v24;
    v91 = v332;
    v92 = v327;
    (*(void (**)(char *, char *, uint64_t))(v332 + 32))(v47, v90, v327);
    v330 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v91 + 56);
    v330(v47, 0, 1, v92);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v47, 1, v92) == 1)
    {
      v89 = 0;
    }
    else
    {
      v89 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v47, v92);
    }
    v24 = v306;
  }
  else
  {
    v92 = v327;
    v330 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v332 + 56);
    v330(v47, 1, 1, v327);
  }
  v93 = v333;
  objc_msgSend(v333, "setCompletionDate:", v89);

  v94 = (uint64_t)objc_msgSend(a1, "priority");
  objc_msgSend(v93, "setPriority:", v94 & ~(v94 >> 63));
  objc_msgSend(v93, "setFlagged:", objc_msgSend(a1, "flagged"));
  v95 = objc_msgSend(a1, "creationDate");
  if (v95)
  {
    v96 = v95;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v95);

    v97 = v24;
    v98 = v332;
    v99 = *(void (**)(_QWORD, _QWORD, _QWORD))(v332 + 32);
    v99(v40, v97, v92);
    v330(v40, 0, 1, v92);
    v100 = *(char **)(v98 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v100)(v40, 1, v92) != 1)
    {
      v99(v43, v40, v92);
      v330(v43, 0, 1, v92);
      goto LABEL_33;
    }
  }
  else
  {
    v330(v40, 1, 1, v92);
  }
  v101 = objc_msgSend(v333, "lastModifiedDate");
  if (v101)
  {
    v102 = v101;
    v103 = (uint64_t)v312;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

    v104 = 0;
  }
  else
  {
    v104 = 1;
    v103 = (uint64_t)v312;
  }
  v330(v103, v104, 1, v92);
  sub_1000A5CA8(v103, (uint64_t)v43, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v40, (uint64_t *)&unk_1008380D0);
  v100 = *(char **)(v332 + 48);
LABEL_33:
  v312 = v100;
  v105 = ((uint64_t (*)(char *, uint64_t, uint64_t))v100)(v43, 1, v92);
  v106 = v334;
  v107 = v314;
  if ((_DWORD)v105 == 1)
  {
    Date.init()(v105);
    sub_10000882C((uint64_t)v43, (uint64_t *)&unk_1008380D0);
    v108 = v332;
  }
  else
  {
    v108 = v332;
    (*(void (**)(char *, char *, uint64_t))(v332 + 32))(v314, v43, v92);
  }
  v109 = Date._bridgeToObjectiveC()().super.isa;
  v314 = *(char **)(v108 + 8);
  ((void (*)(char *, uint64_t))v314)(v107, v92);
  objc_msgSend(v333, "setCreationDate:", v109);

  v110 = objc_msgSend(a1, "lastModifiedDate");
  v111 = v92;
  v112 = v317;
  if (v110)
  {
    v113 = v110;
    v114 = v306;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

    v115 = *(void (**)(_QWORD, _QWORD, _QWORD))(v108 + 32);
    v116 = v328;
    v115(v328, v114, v111);
    v330(v116, 0, 1, v111);
    v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v312)(v116, 1, v111);
    v118 = v316;
    if (v117 != 1)
    {
      v119 = (uint64_t)v315;
      v115(v315, v328, v111);
      v330(v119, 0, 1, v111);
      v8 = v333;
      goto LABEL_44;
    }
  }
  else
  {
    v330(v328, 1, 1, v92);
    v118 = v316;
  }
  v120 = v106;
  v121 = v112;
  v122 = objc_msgSend(a1, "creationDate");
  v8 = v333;
  if (v122)
  {
    v123 = v122;
    v124 = (uint64_t)v313;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v122);

    v125 = 0;
    v119 = (uint64_t)v315;
  }
  else
  {
    v125 = 1;
    v119 = (uint64_t)v315;
    v124 = (uint64_t)v313;
  }
  v330(v124, v125, 1, v111);
  sub_1000A5CA8(v124, v119, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v328, (uint64_t *)&unk_1008380D0);
  v112 = v121;
  v106 = v120;
  v108 = v332;
LABEL_44:
  v126 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v312)(v119, 1, v111);
  if ((_DWORD)v126 == 1)
  {
    Date.init()(v126);
    sub_10000882C(v119, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v118, v119, v111);
  }
  v127 = v325;
  v128 = Date._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v314)(v118, v111);
  objc_msgSend(v8, "setLastModifiedDate:", v128);

  v129 = objc_msgSend(a1, "recurrenceRules");
  if (v129)
  {
    v131 = v129;
    v339 = v129;
    v132 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    v133 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v134 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v135 = (void *)Sequence.elements<A>(ofType:)(v132, v133, v132, v134);

    if (qword_100837008 != -1)
      swift_once(&qword_100837008, sub_10021EBDC);
    v136 = v335;
    v137 = sub_10001AAA8((uint64_t)v335, (uint64_t)qword_100841030);
    v138 = v320;
    v139 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v331 + 16))(v320, v137, v136);
    v339 = v135;
    __chkstk_darwin(v139);
    *(&v303 - 2) = (uint64_t)v138;
    v140 = sub_10001A630((uint64_t *)&qword_100851BE0);
    v141 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v142 = sub_1000A5F84((unint64_t *)&qword_100841310, (uint64_t *)&qword_100851BE0, (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.map<A>(skippingError:_:)(sub_10022DB84, &v303 - 4, sub_10021F4EC, 0, v140, v141, v142);
    if (v106)
    {
      swift_errorRelease(v106);
      v106 = 0;
    }
    v8 = v333;
    v127 = v325;
    (*(void (**)(char *, _QWORD *))(v331 + 8))(v320, v335);
    swift_bridgeObjectRelease();
    v143 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v130 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v143 = 0;
  }
  objc_msgSend(v8, "setRecurrenceRules:", v143, v130);

  v144 = (objc_class *)objc_msgSend(a1, "startDateComponents");
  v145 = v144;
  v146 = v324;
  if (v144)
  {
    v147 = v321;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v144);

    (*((void (**)(char *, char *, uint64_t))v127 + 4))(v112, v147, v146);
    v148 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v127 + 7);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v148)(v112, 0, 1, v146);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v127 + 6))(v112, 1, v146) == 1)
    {
      v145 = 0;
    }
    else
    {
      v149.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
      v146 = v324;
      v145 = v149.super.isa;
      (*((void (**)(char *, uint64_t))v127 + 1))(v112, v324);
    }
  }
  else
  {
    v148 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v127 + 7);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v148)(v112, 1, 1, v324);
  }
  objc_msgSend(v8, "setStartDateComponents:", v145);

  v150 = (objc_class *)objc_msgSend(a1, "dueDateComponents");
  v151 = v150;
  if (v150)
  {
    v152 = v321;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v150);

    v153 = v307;
    (*((void (**)(char *, char *, uint64_t))v127 + 4))(v307, v152, v146);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v148)(v153, 0, 1, v146);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v127 + 6))(v153, 1, v146) == 1)
    {
      v151 = 0;
    }
    else
    {
      v151 = DateComponents._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, uint64_t))v127 + 1))(v153, v146);
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v148)(v307, 1, 1, v146);
  }
  objc_msgSend(v8, "setDueDateComponents:", v151);

  v154 = objc_msgSend(a1, "timeZone");
  objc_msgSend(v8, "setTimeZone:", v154);

  objc_msgSend(v8, "setAllDay:", objc_msgSend(a1, "allDay"));
  v155 = (objc_class *)objc_msgSend(a1, "dueDateDeltaAlertsData");
  v156 = v155;
  if (v155)
  {
    v157 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v155);
    v159 = v158;

    v156 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v157, v159);
  }
  objc_msgSend(v8, "setDueDateDeltaAlertsData:", v156);

  v160 = (objc_class *)objc_msgSend(a1, "notesDocument");
  v161 = v160;
  if (v160)
  {
    v162 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v160);
    v164 = v163;

    v161 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v162, v164);
  }
  objc_msgSend(v8, "setNotesDocumentData:", v161);

  v165 = objc_msgSend(a1, "notes");
  objc_msgSend(v8, "setNotesAsStringByCDIngestor:", v165);

  v166 = objc_msgSend(a1, "attachments");
  if (v166)
  {
    v168 = v166;
    v339 = v166;
    v169 = sub_10001A630(&qword_100841318);
    v170 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v171 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v172 = (void *)Sequence.elements<A>(ofType:)(v169, v170, v169, v171);

    if (qword_100837008 != -1)
      swift_once(&qword_100837008, sub_10021EBDC);
    v173 = v335;
    v174 = sub_10001AAA8((uint64_t)v335, (uint64_t)qword_100841030);
    v175 = v322;
    v176 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v331 + 16))(v322, v174, v173);
    v339 = v172;
    __chkstk_darwin(v176);
    *(&v303 - 2) = (uint64_t)v175;
    v177 = sub_10001A630((uint64_t *)&qword_100841320);
    v178 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v179 = sub_1000A5F84((unint64_t *)&qword_100841328, (uint64_t *)&qword_100841320, (uint64_t)&protocol conformance descriptor for [A]);
    Sequence.map<A>(skippingError:_:)(sub_10022DB90, &v303 - 4, sub_10021F518, 0, v177, v178, v179);
    if (v106)
    {
      swift_errorRelease(v106);
      v106 = 0;
    }
    v8 = v333;
    (*(void (**)(char *, _QWORD *))(v331 + 8))(v322, v335);
    swift_bridgeObjectRelease();
    v180 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v167 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v180 = 0;
  }
  objc_msgSend(v8, "setAttachments:", v180, v167);

  v181 = type metadata accessor for REMAlarmCDIngestor();
  inited = swift_initStackObject(v181, &v338);
  v183 = v309;
  v184 = v329;
  v328 = inited;
  *(_QWORD *)(inited + 16) = v309;
  *(_QWORD *)(inited + 24) = v184;
  v185 = v184;
  v186 = v183;
  v187 = objc_msgSend(a1, "alarmStorage");
  if (v187)
  {
    v188 = v187;
    v334 = v106;
    v339 = v187;
    v189 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    v190 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v191 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v192 = (void *)Sequence.elements<A>(ofType:)(v189, v190, v189, v191);

    if (qword_100837008 != -1)
      swift_once(&qword_100837008, sub_10021EBDC);
    v193 = v335;
    v194 = sub_10001AAA8((uint64_t)v335, (uint64_t)qword_100841030);
    v195 = v323;
    v196 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v331 + 16))(v323, v194, v193);
    v339 = v192;
    __chkstk_darwin(v196);
    *(&v303 - 2) = (uint64_t)v195;
    v197 = sub_10001A630(&qword_100851A90);
    v198 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
    v199 = sub_1000A5F84((unint64_t *)&qword_100841330, &qword_100851A90, (uint64_t)&protocol conformance descriptor for [A]);
    v200 = v334;
    Sequence.map<A>(skippingError:_:)(sub_10022DBC4, &v303 - 4, sub_10022DB98, v328, v197, v198, v199);
    v106 = v200;
    if (v200)
    {
      swift_errorRelease(v200);
      v106 = 0;
    }
    (*(void (**)(char *, _QWORD *))(v331 + 8))(v323, v335);
    swift_bridgeObjectRelease();
    v201 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = v333;
  }
  else
  {
    v201 = 0;
  }
  v334 = v106;
  objc_msgSend(v8, "setAlarms:", v201);

  v202 = type metadata accessor for REMAssignmentCDIngestor();
  v203 = swift_initStackObject(v202, &v337);
  *(_QWORD *)(v203 + 16) = v186;
  *(_QWORD *)(v203 + 24) = v185;
  v204 = v185;
  v205 = v186;
  v206 = objc_msgSend(a1, "assignments");
  if (!v206)
    goto LABEL_94;
  v207 = v206;
  v208 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
  v209 = sub_1000E51DC((unint64_t *)&unk_1008448C0, &qword_100840020, off_1007D6690, (uint64_t)&protocol conformance descriptor for NSObject);
  v210 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v207, v208, v209);

  v339 = v210;
  v211 = sub_10001A630((uint64_t *)&qword_1008412D8);
  v212 = sub_1000A5F84((unint64_t *)&qword_1008412E0, (uint64_t *)&qword_1008412D8, (uint64_t)&protocol conformance descriptor for Set<A>);
  v213 = Sequence.elements<A>(ofType:)(v208, v211, v208, v212);
  swift_bridgeObjectRelease();
  if ((unint64_t)v213 >> 62)
  {
    if (v213 < 0)
      v221 = v213;
    else
      v221 = v213 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v213);
    v222 = _CocoaArrayWrapper.endIndex.getter(v221);
    swift_bridgeObjectRelease();
    if (v222)
      goto LABEL_85;
  }
  else if (*(_QWORD *)((v213 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_85:
    v339 = (id)v213;
    v214 = sub_10001A630((uint64_t *)&qword_100841340);
    v215 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
    v216 = sub_1000A5F84((unint64_t *)&qword_100841348, (uint64_t *)&qword_100841340, (uint64_t)&protocol conformance descriptor for [A]);
    v217 = v334;
    v218 = Sequence.map<A>(skippingError:_:)(sub_10021F574, 0, sub_10022DC0C, v203, v214, v215, v216);
    if (v217)
    {
      swift_errorRelease(v217);
      swift_bridgeObjectRelease();
      v334 = 0;
      v219 = _swiftEmptyArrayStorage;
    }
    else
    {
      v219 = (_QWORD *)v218;
      v334 = 0;
      swift_bridgeObjectRelease();
    }
    sub_10011F4A4((uint64_t)v219);
    swift_bridgeObjectRelease();
    sub_1000E51DC(&qword_10083A250, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v220 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setAssignments:", v220, swift_bridgeObjectRelease().n128_f64[0]);

    goto LABEL_94;
  }
  swift_bridgeObjectRelease();
LABEL_94:
  v223 = type metadata accessor for REMHashtagCDIngestor();
  v224 = swift_initStackObject(v223, &v336);
  *(_QWORD *)(v224 + 16) = v205;
  *(_QWORD *)(v224 + 24) = v204;
  v329 = v204;
  v325 = v205;
  v225 = objc_msgSend(a1, "hashtags");
  if (v225)
  {
    v226 = v225;
    v227 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v228 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v229 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v226, v227, v228);

    v339 = v229;
    v230 = sub_10001A630(&qword_10083BDF8);
    v231 = sub_1000A5F84(&qword_10083BE00, &qword_10083BDF8, (uint64_t)&protocol conformance descriptor for Set<A>);
    v232 = Sequence.elements<A>(ofType:)(v227, v230, v227, v231);
    swift_bridgeObjectRelease();
    if ((unint64_t)v232 >> 62)
    {
      if (v232 < 0)
        v302 = v232;
      else
        v302 = v232 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v232);
      v233 = _CocoaArrayWrapper.endIndex.getter(v302);
      swift_bridgeObjectRelease();
    }
    else
    {
      v233 = *(_QWORD *)((v232 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v234 = v308;
    v235 = v334;
    if (v233)
    {
      if (qword_100837008 != -1)
        swift_once(&qword_100837008, sub_10021EBDC);
      v236 = v335;
      v237 = sub_10001AAA8((uint64_t)v335, (uint64_t)qword_100841030);
      v238 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v331 + 16))(v234, v237, v236);
      v339 = (id)v232;
      __chkstk_darwin(v238);
      *(&v303 - 2) = (uint64_t)v234;
      v239 = sub_10001A630(&qword_10083DAE0);
      v240 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
      v241 = sub_1000A5F84((unint64_t *)&unk_10083DAE8, &qword_10083DAE0, (uint64_t)&protocol conformance descriptor for [A]);
      v242 = v334;
      v243 = Sequence.map<A>(skippingError:_:)(sub_10022DC00, &v303 - 4, sub_10022DBD0, v224, v239, v240, v241);
      v235 = v242;
      if (v242)
      {
        swift_errorRelease(v242);
        v235 = 0;
        v244 = _swiftEmptyArrayStorage;
      }
      else
      {
        v244 = (_QWORD *)v243;
      }
      (*(void (**)(char *, _QWORD *))(v331 + 8))(v308, v335);
      swift_bridgeObjectRelease();
      sub_10011F4C8((uint64_t)v244);
      swift_bridgeObjectRelease();
      sub_1000E51DC((unint64_t *)&qword_10083B670, &qword_10083DAC0, REMHashtag_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      v245 = Set._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v246 = swift_bridgeObjectRelease().n128_u64[0];
      v8 = v333;
      objc_msgSend(v333, "setHashtags:", v245, v246);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v235 = v334;
  }
  objc_msgSend(v8, "setResolutionTokenMap:", 0);
  v247 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
  v248 = v247;
  if (v247)
  {
    v249 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v247);
    v251 = v250;

    v248 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v249, v251);
  }
  v252 = v326;
  objc_msgSend(v8, "setResolutionTokenMapData:", v248);

  v253 = objc_msgSend(a1, "contactHandles");
  if (v253)
  {
    v254 = v253;
    v255 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v253);
    v257 = v256;

    sub_1000A70E4(v255, v257);
    v258 = Data._bridgeToObjectiveC()().super.isa;
    v259 = objc_msgSend((id)objc_opt_self(REMContactRepresentation), "representationFromData:", v258);
    sub_1000A71C8(v255, v257);

    objc_msgSend(v8, "setContactHandles:", v259);
    v260 = v257;
    v252 = v326;
    sub_1000A71C8(v255, v260);
  }
  v261 = (uint64_t)objc_msgSend(a1, "icsDisplayOrder");
  objc_msgSend(v8, "setIcsDisplayOrder:", v261 & ~(v261 >> 63));
  v262 = objc_msgSend(a1, "icsUrl");
  v263 = v262;
  if (v262)
  {
    v264 = v311;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v262);

    v265 = v318;
    v266 = v264;
    v267 = v319;
    (*(void (**)(char *, char *, uint64_t))(v318 + 32))(v252, v266, v319);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v265 + 56))(v252, 0, 1, v267);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48))(v252, 1, v267) == 1)
    {
      v263 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v268);
      v269 = v265;
      v263 = v270;
      (*(void (**)(char *, uint64_t))(v269 + 8))(v252, v267);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56))(v252, 1, 1, v319);
  }
  objc_msgSend(v8, "setIcsUrl:", v263);

  v271 = (objc_class *)objc_msgSend(a1, "importedICSData");
  v272 = v271;
  if (v271)
  {
    v273 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v271);
    v275 = v274;

    v272 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v273, v275);
  }
  objc_msgSend(v8, "setImportedICSData:", v272);

  v276 = objc_msgSend(a1, "userActivity");
  if (v276)
  {
    v277 = v276;
    v278 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v276);
    v280 = v279;

    sub_1000151B0(0, (unint64_t *)&qword_100841338, REMUserActivity_ptr);
    sub_1000A70E4(v278, v280);
    v281 = sub_100223BEC();
    if (v235)
    {
      sub_1000A71C8(v278, v280);
      sub_1000A71C8(v278, v280);
      swift_setDeallocating(v224);

      swift_setDeallocating(v203);
      v282 = v328;
      swift_setDeallocating(v328);

      return v8;
    }
    v284 = v281;
    sub_1000A71C8(v278, v280);
    objc_msgSend(v8, "setUserActivity:", v284);

    sub_1000A71C8(v278, v280);
  }
  v285 = (objc_class *)objc_msgSend(a1, "siriFoundInAppsData");
  v286 = v285;
  if (v285)
  {
    v287 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v285);
    v289 = v288;

    v286 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v287, v289);
  }
  v290 = v327;
  v291 = v304;
  objc_msgSend(v8, "setSiriFoundInAppsData:", v286);

  v292 = (objc_class *)objc_msgSend(a1, "lastBannerPresentationDate");
  v293 = v292;
  if (v292)
  {
    v294 = v306;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v292);

    v295 = v310;
    (*(void (**)(char *, char *, uint64_t))(v332 + 32))(v310, v294, v290);
    v330(v295, 0, 1, v290);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v312)(v295, 1, v290) == 1)
    {
      v293 = 0;
    }
    else
    {
      v296.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v290 = v327;
      v297 = v295;
      v293 = v296.super.isa;
      ((void (*)(char *, uint64_t))v314)(v297, v327);
    }
    v8 = v333;
  }
  else
  {
    v330(v310, 1, 1, v290);
  }
  objc_msgSend(v8, "setLastBannerPresentationDate:", v293);

  v298 = objc_msgSend(a1, "displayDate");
  objc_msgSend(v8, "setDisplayDate:", v298);

  v299 = (objc_class *)objc_msgSend(a1, "alternativeDisplayDateDate_forCalendar");
  v300 = v299;
  if (v299)
  {
    v301 = v306;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v299);

    (*(void (**)(char *, char *, uint64_t))(v332 + 32))(v291, v301, v290);
    v330(v291, 0, 1, v290);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v312)(v291, 1, v290) == 1)
    {
      v300 = 0;
    }
    else
    {
      v300 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v314)(v291, v290);
    }
  }
  else
  {
    v330(v291, 1, 1, v290);
  }
  objc_msgSend(v8, "setAlternativeDisplayDateDate_forCalendar:", v300);

  swift_release(v224);
  swift_release(v203);
  swift_release(v328);

  return v8;
}

uint64_t sub_100226178(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v7;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  os_log_type_t type;
  void *v44;
  void *v45;
  _QWORD v46[3];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  id v50;

  v7 = a2;
  if (a1)
  {
    v11 = a1;
    v12 = v11;
    if (a3 >> 60 == 15)
    {
      v13 = objc_msgSend(v11, "serializedData");
      v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v14 = objc_msgSend(v12, "attributedString");
      v15 = objc_msgSend(v14, "string");

      static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    }
    else
    {
      sub_1000A70D0(v7, a3);
      v16 = objc_msgSend(v12, "replicaIDSource");
      v17 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_1000A70E4(v7, a3);
      v29 = sub_100259BE8((uint64_t)v16);
      sub_1000A71B4(v7, a3);

      v50 = 0;
      v30 = objc_msgSend(v29, "mergedWithDocument:error:", v12, &v50);
      v31 = v50;
      if (v30)
      {
        v32 = v30;
        v33 = v50;
        v34 = objc_msgSend(v32, "serializedData");
        v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);

        v36 = objc_msgSend(v32, "attributedString");
        v37 = objc_msgSend(v36, "string");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        sub_1000A71B4(v7, a3);

        return v35;
      }
      else
      {
        v39 = v50;
        v40 = _convertNSErrorToError(_:)(v31);

        swift_willThrow(v41);
        if (qword_100837000 != -1)
          swift_once(&qword_100837000, sub_10021EBB8);
        v18 = type metadata accessor for Logger(0);
        sub_10001AAA8(v18, (uint64_t)qword_100841018);
        v19 = a6;
        swift_bridgeObjectRetain(a5);
        swift_errorRetain(v40);
        v20 = v19;
        swift_bridgeObjectRetain(a5);
        v21 = swift_errorRetain(v40);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.error.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          type = v23;
          v24 = swift_slowAlloc(32, -1);
          v42 = (_QWORD *)swift_slowAlloc(8, -1);
          v44 = (void *)swift_slowAlloc(64, -1);
          v50 = v44;
          *(_DWORD *)v24 = 138412802;
          v48 = (uint64_t)v20;
          v45 = v12;
          v25 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
          *v42 = v20;

          *(_WORD *)(v24 + 12) = 2080;
          swift_bridgeObjectRetain(a5);
          v48 = sub_10001A820(a4, a5, (uint64_t *)&v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
          swift_bridgeObjectRelease_n(a5, 3);
          *(_WORD *)(v24 + 22) = 2080;
          swift_getErrorValue(v40, v47, v46);
          v26 = Error.localizedDescription.getter(v46[1], v46[2]);
          v48 = sub_10001A820(v26, v27, (uint64_t *)&v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
          swift_bridgeObjectRelease();
          swift_errorRelease(v40);
          swift_errorRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v22, type, "Failed to merge documents for reminder {reminder.objectID: %@, key: %s}: %s", (uint8_t *)v24, 0x20u);
          v28 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v42, 1, v28);
          swift_slowDealloc(v42, -1, -1);
          swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v44, -1, -1);
          swift_slowDealloc(v24, -1, -1);

          swift_errorRelease(v40);
          sub_1000A71B4(v7, a3);
        }
        else
        {
          sub_1000A71B4(v7, a3);

          swift_errorRelease(v40);
          swift_bridgeObjectRelease_n(a5, 2);

          swift_errorRelease(v40);
          swift_errorRelease(v40);

        }
        return 0;
      }
    }
  }
  else
  {
    sub_1000A70D0(a2, a3);
  }
  return v7;
}

void sub_100226710(void *a1, void *a2, uint64_t a3, _BYTE *a4, _BYTE *a5, _QWORD *a6)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  char **v39;
  id v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v61;
  _QWORD *v62;
  _QWORD *v63;
  id v64;
  char v65;
  Swift::Int v66;
  _QWORD *v67;
  Swift::Int v68;
  uint64_t v69;
  id v70;
  char v71;
  uint64_t v72;
  id v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  __int128 v91;
  uint64_t v92;
  _BYTE *v93;
  id v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  _QWORD *v102;

  v93 = a4;
  v96 = a6;
  v100 = a5;
  v8 = type metadata accessor for DateComponents(0);
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v97 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "alarms", v9);
  v12 = (uint64_t)&selRef_isConcealed;
  v94 = a1;
  if (!v11)
  {
    v30 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_35;
  }
  v13 = v11;
  *(_QWORD *)&v91 = a2;
  v14 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  v16 = objc_msgSend(a1, "accountID");
  v17 = objc_msgSend(a1, "objectID");
  v18 = type metadata accessor for REMAlarmCDIngestor();
  v19 = swift_allocObject(v18, 32, 7);
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = v17;
  sub_1005D5C48(v15, v19);
  swift_release(v19);
  v12 = (unint64_t)v15 >> 62;
  if ((unint64_t)v15 >> 62)
    goto LABEL_68;
  v20 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    v102 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v20);
    if (v20 < 0)
    {
      __break(1u);
      goto LABEL_78;
    }
    v22 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v15);
      else
        v23 = *(id *)(v15 + 8 * v22 + 32);
      v24 = v23;
      ++v22;
      v25 = objc_msgSend(v23, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v27 = v102[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized ContiguousArray._endMutation()(v28);
    }
    while (v20 != v22);
    v21 = v102;
  }
  sub_10011F104((uint64_t)v21);
  v30 = v29;
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (v15 < 0)
      v48 = v15;
    else
      v48 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v12 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_14:
      if (v12 >= 1)
      {
        v95 = v30;
        v31 = 0;
        v101 = v15 & 0xC000000000000001;
        v32 = &selRef_subscriptionOwnerUserRecordID;
        v33 = v97;
        do
        {
          if (v101)
            v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v15);
          else
            v34 = *(id *)(v15 + 8 * v31 + 32);
          v35 = v34;
          v36 = objc_msgSend(v34, v32[72]);
          v37 = objc_opt_self(REMAlarmDateTrigger);
          v38 = (void *)swift_dynamicCastObjCClass(v36, v37);
          if (v38)
          {
            v39 = v32;
            *v100 = 1;
            v40 = objc_msgSend(v38, "dateComponents");
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v40);

            v41 = DateComponents.fifteenMinuteBin.getter();
            v43 = v42;

            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v33, v99);
            v44 = v96;
            if ((v43 & 1) != 0)
              *v96 = -1;
            else
              *v96 = v41;
            *((_BYTE *)v44 + 8) = 0;
            v32 = v39;
          }
          else
          {

            v45 = objc_msgSend(v35, v32[72]);
            v46 = objc_opt_self(REMAlarmLocationTrigger);
            v47 = swift_dynamicCastObjCClass(v45, v46);

            if (v47)
              *v93 = 1;
          }
          ++v31;
        }
        while (v12 != v31);
        swift_bridgeObjectRelease();
        v30 = v95;
        goto LABEL_34;
      }
LABEL_78:
      __break(1u);
    }
  }
  else
  {
    v12 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  a2 = (void *)v91;
LABEL_35:
  v49 = objc_msgSend(a2, "alarmStorage");
  if (v49)
  {
    v15 = (uint64_t)v49;
    v102 = v49;
    v50 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    v51 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v52 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v53 = Sequence.elements<A>(ofType:)(v50, v51, v50, v52);
    v97 = v53;
    v90 = (id)v15;
    if ((unint64_t)v53 >> 62)
    {
      if (v53 >= 0)
        v53 &= 0xFFFFFFFFFFFFFF8uLL;
      v55 = _CocoaArrayWrapper.endIndex.getter(v53);
      if (v55)
        goto LABEL_38;
    }
    else
    {
      v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v55)
      {
LABEL_38:
        v56 = 0;
        v93 = (_BYTE *)(v97 + 32);
        v98 = v30 & 0xC000000000000001;
        v57 = v30 & 0xFFFFFFFFFFFFFF8;
        if (v30 < 0)
          v57 = v30;
        v96 = (_QWORD *)v57;
        v100 = (_BYTE *)(v30 + 56);
        v101 = v97 & 0xC000000000000001;
        *(_QWORD *)&v54 = 138412546;
        v91 = v54;
        v95 = v30;
        v99 = v55;
        do
        {
          while (1)
          {
            if (v101)
              v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v97);
            else
              v58 = *(id *)&v93[8 * v56];
            v59 = v58;
            if (__OFADD__(v56++, 1))
            {
              __break(1u);
LABEL_68:
              if (v15 < 0)
                v88 = v15;
              else
                v88 = v15 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v15);
              v20 = _CocoaArrayWrapper.endIndex.getter(v88);
              swift_bridgeObjectRelease();
              goto LABEL_4;
            }
            v102 = 0;
            v61 = objc_msgSend(v58, "remObjectIDWithError:", &v102);
            v62 = v102;
            if (!v61)
            {
              v85 = v102;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v86 = _convertNSErrorToError(_:)(v62);

              v92 = v86;
              swift_willThrow(v87);

              goto LABEL_76;
            }
            v15 = (uint64_t)v61;
            if (!v98)
              break;
            v63 = v102;
            v64 = (id)v15;
            v65 = __CocoaSet.contains(_:)(v64, v96);

            if ((v65 & 1) == 0)
              goto LABEL_58;
LABEL_41:

            if (v56 == v99)
              goto LABEL_75;
          }
          if (*(_QWORD *)(v30 + 16))
          {
            v66 = *(_QWORD *)(v30 + 40);
            v67 = v102;
            v68 = NSObject._rawHashValue(seed:)(v66);
            v69 = -1 << *(_BYTE *)(v30 + 32);
            v12 = v68 & ~v69;
            if (((*(_QWORD *)&v100[((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8] >> v12) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v70 = *(id *)(*(_QWORD *)(v30 + 48) + 8 * v12);
              v71 = static NSObject.== infix(_:_:)(v70);

              if ((v71 & 1) == 0)
              {
                v72 = ~v69;
                while (1)
                {
                  v12 = (v12 + 1) & v72;
                  if (((*(_QWORD *)&v100[((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8] >> v12) & 1) == 0)
                    goto LABEL_58;
                  v73 = *(id *)(*(_QWORD *)(v30 + 48) + 8 * v12);
                  v74 = static NSObject.== infix(_:_:)(v73);

                  if ((v74 & 1) != 0)
                    goto LABEL_41;
                }
              }
              goto LABEL_41;
            }
          }
          else
          {
            v75 = v102;
          }
LABEL_58:
          if (qword_100837000 != -1)
            swift_once(&qword_100837000, sub_10021EBB8);
          v76 = type metadata accessor for Logger(0);
          sub_10001AAA8(v76, (uint64_t)qword_100841018);
          v77 = (id)v15;
          v78 = v94;
          v79 = Logger.logObject.getter(v78);
          v80 = static os_log_type_t.info.getter(v79);
          if (os_log_type_enabled(v79, v80))
          {
            v81 = swift_slowAlloc(22, -1);
            v12 = swift_slowAlloc(16, -1);
            *(_DWORD *)v81 = v91;
            v82 = -[NSObject objectID](v78, "objectID");
            *(_QWORD *)(v81 + 4) = v82;
            *(_QWORD *)v12 = v82;

            *(_WORD *)(v81 + 12) = 2112;
            *(_QWORD *)(v81 + 14) = v77;
            *(_QWORD *)(v12 + 8) = v15;
            _os_log_impl((void *)&_mh_execute_header, v79, v80, "Removing alarm from reminder {reminder.objectID: %@, alarm.objectID: %@}", (uint8_t *)v81, 0x16u);
            v83 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v12, 2, v83);
            swift_slowDealloc(v12, -1, -1);
            swift_slowDealloc(v81, -1, -1);
          }
          else
          {

            v79 = v78;
          }
          v84 = v99;

          objc_msgSend(v59, "setReminder:", 0);
          v30 = v95;
        }
        while (v56 != v84);
      }
    }
LABEL_75:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_76:

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

double sub_100226FAC(void *a1, uint64_t a2)
{
  unint64_t p_ivar_base_size;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  void (*v40)(id *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  char v61;
  Swift::Int v62;
  id v63;
  Swift::Int v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  char v68;
  uint64_t v69;
  id v70;
  char v71;
  id v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  _QWORD *v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  double result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  id v97[4];
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;

  p_ivar_base_size = (unint64_t)&RDDataAccess.ivar_base_size;
  v5 = objc_msgSend(a1, "assignments");
  v89 = a1;
  if (!v5)
    goto LABEL_9;
  v6 = v5;
  v93 = a2;
  v7 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
  v8 = sub_1000E51DC(&qword_10083A250, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  a2 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

  swift_bridgeObjectRetain(a2);
  v10 = sub_1001EA1D8(v9);
  v11 = objc_msgSend(a1, "accountID", swift_bridgeObjectRelease().n128_f64[0]);
  v12 = objc_msgSend(a1, "objectID");
  v13 = type metadata accessor for REMAssignmentCDIngestor();
  v14 = swift_allocObject(v13, 32, 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = v12;
  sub_1005D644C((uint64_t)v10, v14);
  swift_release(v14);
  swift_release(v10);
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v15 = a2;
    else
      v15 = a2 & 0xFFFFFFFFFFFFFF8;
    v16 = __CocoaSet.count.getter(v15);
    if (v16)
    {
      p_ivar_base_size = v16;
      specialized ContiguousArray.reserveCapacity(_:)(v16);
      v98 = __CocoaSet.startIndex.getter(v15);
      v99 = v17;
      v100 = 1;
      v18 = &selRef_isConcealed;
      if ((p_ivar_base_size & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_9:
        v19 = (uint64_t)&_swiftEmptySetSingleton;
        goto LABEL_25;
      }
      goto LABEL_12;
    }
  }
  else
  {
    p_ivar_base_size = *(_QWORD *)(a2 + 16);
    if (p_ivar_base_size)
    {
      specialized ContiguousArray.reserveCapacity(_:)(p_ivar_base_size);
      v98 = sub_100364E8C(a2);
      v99 = v20;
      v100 = v21 & 1;
      v18 = &selRef_isConcealed;
LABEL_12:
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v22 = a2;
      v95 = v22;
      do
      {
        while (1)
        {
          v28 = v98;
          v29 = v99;
          v30 = v100;
          sub_100364BB8(v98, v99, v100, a2);
          v32 = v31;
          v33 = objc_msgSend(v31, v18[247]);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
          v35 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
          v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
          specialized ContiguousArray._endMutation()(v36);
          if ((a2 & 0xC000000000000001) != 0)
            break;
          v23 = sub_10036456C(v28, v29, v30, a2);
          v25 = v24;
          v27 = v26;
          sub_1000E515C(v28, v29, v30);
          v98 = v23;
          v99 = v25;
          v100 = v27 & 1;
          v18 = &selRef_isConcealed;
          if (!--p_ivar_base_size)
            goto LABEL_22;
        }
        if ((v30 & 1) == 0)
          __break(1u);
        v37 = __CocoaSet.Index.handleBitPattern.getter(v28, v29);
        v18 = &selRef_isConcealed;
        if (v37)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v39 = sub_10001A630(&qword_1008412E8);
        v40 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v97, v39);
        __CocoaSet.formIndex(after:isUnique:)(v41, isUniquelyReferenced_nonNull_native, v95);
        v40(v97, 0);
        --p_ivar_base_size;
      }
      while (p_ivar_base_size);
LABEL_22:
      sub_1000E515C(v98, v99, v100);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
LABEL_24:
  sub_10011F104((uint64_t)_swiftEmptyArrayStorage);
  v19 = v42;
  swift_bridgeObjectRelease();
  a2 = v93;
  p_ivar_base_size = (unint64_t)&RDDataAccess.ivar_base_size;
LABEL_25:
  v43 = objc_msgSend((id)a2, *(SEL *)(p_ivar_base_size + 3432));
  if (v43)
  {
    v44 = v43;
    v45 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v46 = sub_1000E51DC((unint64_t *)&unk_1008448C0, &qword_100840020, off_1007D6690, (uint64_t)&protocol conformance descriptor for NSObject);
    v47 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v44, v45, v46);

    v97[0] = v47;
    v48 = sub_10001A630(&qword_1008412D8);
    v49 = sub_1000A5F84(&qword_1008412E0, &qword_1008412D8, (uint64_t)&protocol conformance descriptor for Set<A>);
    v50 = Sequence.elements<A>(ofType:)(v45, v48, v45, v49);
    swift_bridgeObjectRelease();
    if ((unint64_t)v50 >> 62)
      goto LABEL_59;
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v51)
    {
      v52 = 0;
      v86 = v50 + 32;
      v90 = v50;
      v91 = v19 & 0xC000000000000001;
      v53 = v19 & 0xFFFFFFFFFFFFFF8;
      if (v19 < 0)
        v53 = v19;
      v88 = v53;
      v94 = v19 + 56;
      v96 = v50 & 0xC000000000000001;
      v92 = v51;
      v87 = v19;
      while (1)
      {
        v54 = v96 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v90) : *(id *)(v86 + 8 * v52);
        v50 = (uint64_t)v54;
        if (__OFADD__(v52++, 1))
          break;
        v97[0] = 0;
        v56 = objc_msgSend(v54, "remObjectIDWithError:", v97);
        v57 = v97[0];
        if (!v56)
        {
          v82 = v97[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v57);

          swift_willThrow(v83);
          return result;
        }
        v58 = v56;
        if (v91)
        {
          v59 = v97[0];
          v60 = v58;
          v61 = __CocoaSet.contains(_:)(v60, v88);

          if ((v61 & 1) == 0)
            goto LABEL_48;
LABEL_31:

          if (v52 == v92)
            goto LABEL_63;
        }
        else
        {
          if (*(_QWORD *)(v19 + 16))
          {
            v62 = *(_QWORD *)(v19 + 40);
            v63 = v97[0];
            v64 = NSObject._rawHashValue(seed:)(v62);
            v65 = -1 << *(_BYTE *)(v19 + 32);
            v66 = v64 & ~v65;
            if (((*(_QWORD *)(v94 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v66) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v67 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v66);
              v68 = static NSObject.== infix(_:_:)(v67);

              if ((v68 & 1) == 0)
              {
                v69 = ~v65;
                while (1)
                {
                  v66 = (v66 + 1) & v69;
                  if (((*(_QWORD *)(v94 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
                    goto LABEL_48;
                  v70 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v66);
                  v71 = static NSObject.== infix(_:_:)(v70);

                  if ((v71 & 1) != 0)
                    goto LABEL_31;
                }
              }
              goto LABEL_31;
            }
          }
          else
          {
            v72 = v97[0];
          }
LABEL_48:
          if (qword_100837000 != -1)
            swift_once(&qword_100837000, sub_10021EBB8);
          v73 = type metadata accessor for Logger(0);
          sub_10001AAA8(v73, (uint64_t)qword_100841018);
          v74 = v58;
          v75 = v89;
          v76 = Logger.logObject.getter(v75);
          v77 = static os_log_type_t.info.getter(v76);
          if (os_log_type_enabled(v76, v77))
          {
            v78 = swift_slowAlloc(22, -1);
            v79 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v78 = 138412546;
            v80 = -[NSObject objectID](v75, "objectID");
            *(_QWORD *)(v78 + 4) = v80;
            *v79 = v80;

            *(_WORD *)(v78 + 12) = 2112;
            *(_QWORD *)(v78 + 14) = v74;
            v79[1] = v58;
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Removing assignment from reminder {reminder.objectID: %@, assignment.objectID: %@}", (uint8_t *)v78, 0x16u);
            v81 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v79, 2, v81);
            swift_slowDealloc(v79, -1, -1);
            swift_slowDealloc(v78, -1, -1);
          }
          else
          {

            v76 = v75;
          }

          objc_msgSend((id)v50, "setReminder:", 0);
          objc_msgSend((id)v50, "setAssignee:", 0);
          objc_msgSend((id)v50, "setOriginator:", 0);

          v19 = v87;
          if (v52 == v92)
            goto LABEL_63;
        }
      }
      __break(1u);
LABEL_59:
      if (v50 < 0)
        v85 = v50;
      else
        v85 = v50 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v50);
      v51 = _CocoaArrayWrapper.endIndex.getter(v85);
      swift_bridgeObjectRelease();
    }
LABEL_63:
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10022781C(void *a1, void *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  char v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  char v81;
  id v82;
  char v83;
  uint64_t v84;
  NSObject *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE v106[32];
  uint64_t v107;
  _OWORD v108[2];
  __int128 v109;
  uint64_t v110;
  unint64_t v111;

  v102 = a2;
  v6 = type metadata accessor for NSFastEnumerationIterator(0);
  v105 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = a1;
  v10 = objc_msgSend(a1, "attachments", v7);
  if (!v10)
  {
    v104 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_23;
  }
  v11 = v10;
  v12 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  *(_QWORD *)&v109 = v13;
  v14 = sub_1000151B0(0, (unint64_t *)&qword_1008412F0, REMFileAttachment_ptr);
  v15 = sub_10001A630(&qword_100851A30);
  v16 = sub_1000A5F84(&qword_1008412F8, &qword_100851A30, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = Sequence.elements<A>(ofExactType:)(v14, v15, v14, v16);
  *(_QWORD *)&v109 = v13;
  v18 = sub_1000151B0(0, &qword_100841300, REMImageAttachment_ptr);
  v19 = Sequence.elements<A>(ofExactType:)(v18, v15, v18, v16);
  v20 = v19;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 >= 0)
      v19 &= 0xFFFFFFFFFFFFFF8uLL;
    v21 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  else
  {
    v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *a4 = v21 != 0;
  *(_QWORD *)&v109 = v13;
  v22 = sub_1000151B0(0, &qword_100841308, REMURLAttachment_ptr);
  v23 = Sequence.elements<A>(ofExactType:)(v22, v15, v22, v16);
  v24 = type metadata accessor for REMFileAttachmentCDIngestor();
  v25 = swift_allocObject(v24, 16, 7);
  sub_1005D6C50(v17, v25);
  swift_release(v25);
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for REMImageAttachmentCDIngestor();
  v27 = swift_allocObject(v26, 16, 7);
  sub_1005D7454(v20, v27);
  swift_release(v27);
  swift_bridgeObjectRelease();
  v28 = type metadata accessor for REMURLAttachmentCDIngestor();
  v29 = swift_allocObject(v28, 16, 7);
  sub_1005D7C58(v23, v29);
  swift_release(v29);
  swift_bridgeObjectRelease();
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v39 = v13;
    else
      v39 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v30 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
    if (v30)
      goto LABEL_6;
  }
  else
  {
    v30 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v30)
    {
LABEL_6:
      *(_QWORD *)&v109 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v30);
      if (v30 < 0)
      {
        __break(1u);
        return;
      }
      v31 = 0;
      do
      {
        if ((v13 & 0xC000000000000001) != 0)
          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v13);
        else
          v32 = *(id *)(v13 + 8 * v31 + 32);
        v33 = v32;
        ++v31;
        v34 = objc_msgSend(v32, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        v36 = *(_QWORD *)(v109 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized ContiguousArray._endMutation()(v37);
      }
      while (v30 != v31);
      v38 = (_QWORD *)v109;
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  v38 = _swiftEmptyArrayStorage;
LABEL_22:
  sub_10011F104((uint64_t)v38);
  v104 = v40;
  swift_bridgeObjectRelease();
LABEL_23:
  v41 = objc_msgSend(v102, "attachments");
  if (v41)
  {
    v111 = (unint64_t)_swiftEmptyArrayStorage;
    v42 = v41;
    NSOrderedSet.makeIterator()(v43);
    v94 = v42;

    v44 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()(&v109, v6, v44);
    while (v110)
    {
      sub_10001A6CC(&v109, v108);
      sub_10001A670((uint64_t)v108, (uint64_t)v106);
      v46 = sub_1000151B0(0, (unint64_t *)&unk_10083AE20, off_1007D6698);
      if ((swift_dynamicCast(&v107, v106, (char *)&type metadata for Any + 8, v46, 6) & 1) == 0)
        v107 = 0;
      v47 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v108);
      v48 = v107;
      if (v107)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        v50 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v49 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v50 >= v49 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1);
        v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
        specialized Array._endMutation()(v45);
      }
      dispatch thunk of IteratorProtocol.next()(&v109, v6, v44);
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v9, v6);
    v52 = v111;
    if (v111 >> 62)
      goto LABEL_70;
    v53 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v53)
    {
      v54 = 0;
      v105 = v52 & 0xC000000000000001;
      v99 = v52 & 0xFFFFFFFFFFFFFF8;
      v98 = v52 + 32;
      v103 = v104 & 0xC000000000000001;
      v55 = v104 & 0xFFFFFFFFFFFFFF8;
      if (v104 < 0)
        v55 = v104;
      v100 = v55;
      v95 = v104 + 56;
      v51.n128_u64[0] = 138412546;
      v96 = v51;
      v97 = v52;
      while (1)
      {
        if (v105)
        {
          v57 = specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v52);
        }
        else
        {
          if (v54 >= *(_QWORD *)(v99 + 16))
            goto LABEL_69;
          v57 = *(id *)(v98 + 8 * v54);
        }
        v56 = v57;
        if (__OFADD__(v54++, 1))
          break;
        v59 = -[NSObject remObjectID](v57, "remObjectID");
        if (!v59)
        {
          if (qword_100837000 != -1)
            swift_once(&qword_100837000, sub_10021EBB8);
          v63 = type metadata accessor for Logger(0);
          sub_10001AAA8(v63, (uint64_t)qword_100841018);
          v64 = v102;
          v61 = v56;
          v56 = Logger.logObject.getter(v61);
          v65 = static os_log_type_t.error.getter(v56);
          if (os_log_type_enabled(v56, v65))
          {
            v66 = swift_slowAlloc(22, -1);
            v67 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v66 = v96.n128_u32[0];
            v68 = -[NSObject objectID](v64, "objectID");
            *(_QWORD *)(v66 + 4) = v68;
            *v67 = v68;

            *(_WORD *)(v66 + 12) = 2112;
            v69 = -[NSObject objectID](v61, "objectID");
            *(_QWORD *)(v66 + 14) = v69;
            v67[1] = v69;

            _os_log_impl((void *)&_mh_execute_header, v56, v65, "Can't merge attachment for reminder because cdAttachment.remObjectID is nil {cdReminder.objectID: %@, cdAttachment.objectID: %@}", (uint8_t *)v66, 0x16u);
            v70 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v67, 2, v70);
            v71 = v67;
            v52 = v97;
            swift_slowDealloc(v71, -1, -1);
            swift_slowDealloc(v66, -1, -1);
          }
          else
          {

            v56 = v64;
          }
          goto LABEL_39;
        }
        v60 = v59;
        if (v103)
        {
          v61 = v59;
          v62 = __CocoaSet.contains(_:)(v61, v100);

          if ((v62 & 1) == 0)
            goto LABEL_61;
        }
        else
        {
          if (!*(_QWORD *)(v104 + 16))
            goto LABEL_61;
          v72 = v104;
          v73 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v104 + 40));
          v74 = -1 << *(_BYTE *)(v72 + 32);
          v75 = v73 & ~v74;
          if (((*(_QWORD *)(v95 + ((v75 >> 3) & 0xFFFFFFFFFFFFF8)) >> v75) & 1) == 0)
            goto LABEL_61;
          sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v76 = *(id *)(*(_QWORD *)(v104 + 48) + 8 * v75);
          v77 = static NSObject.== infix(_:_:)(v76);

          if ((v77 & 1) == 0)
          {
            v78 = ~v74;
            v79 = (v75 + 1) & v78;
            if (((*(_QWORD *)(v95 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) == 0)
              goto LABEL_61;
            v80 = *(id *)(*(_QWORD *)(v104 + 48) + 8 * v79);
            v81 = static NSObject.== infix(_:_:)(v80);

            if ((v81 & 1) == 0)
            {
              while (1)
              {
                v79 = (v79 + 1) & v78;
                if (((*(_QWORD *)(v95 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) == 0)
                  break;
                v82 = *(id *)(*(_QWORD *)(v104 + 48) + 8 * v79);
                v83 = static NSObject.== infix(_:_:)(v82);

                if ((v83 & 1) != 0)
                  goto LABEL_60;
              }
LABEL_61:
              if (qword_100837000 != -1)
                swift_once(&qword_100837000, sub_10021EBB8);
              v84 = type metadata accessor for Logger(0);
              sub_10001AAA8(v84, (uint64_t)qword_100841018);
              v61 = v60;
              v85 = v101;
              v86 = Logger.logObject.getter(v85);
              v87 = static os_log_type_t.info.getter(v86);
              if (os_log_type_enabled(v86, v87))
              {
                v88 = swift_slowAlloc(22, -1);
                v89 = (_QWORD *)swift_slowAlloc(16, -1);
                *(_DWORD *)v88 = v96.n128_u32[0];
                v90 = -[NSObject objectID](v85, "objectID");
                *(_QWORD *)(v88 + 4) = v90;
                *v89 = v90;

                *(_WORD *)(v88 + 12) = 2112;
                *(_QWORD *)(v88 + 14) = v61;
                v89[1] = v60;
                _os_log_impl((void *)&_mh_execute_header, v86, v87, "Removing attachment from reminder {reminder.objectID: %@, attachment.objectID: %@}", (uint8_t *)v88, 0x16u);
                v91 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v89, 2, v91);
                swift_slowDealloc(v89, -1, -1);
                v92 = v88;
                v52 = v97;
                swift_slowDealloc(v92, -1, -1);
              }
              else
              {

                v86 = v85;
              }

              -[NSObject setReminder:](v56, "setReminder:", 0);
              goto LABEL_39;
            }
          }
LABEL_60:
          v61 = v60;
        }
LABEL_39:

        if (v54 == v53)
          goto LABEL_74;
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      if (v52 < 0)
        v93 = v52;
      else
        v93 = v52 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v52);
      v53 = _CocoaArrayWrapper.endIndex.getter(v93);
      v51 = swift_bridgeObjectRelease();
    }
LABEL_74:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

double sub_100228294(void *a1, void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  void (*v42)(id *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  BOOL v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  char v82;
  Swift::Int v83;
  id v84;
  Swift::Int v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  char v89;
  uint64_t v90;
  id v91;
  char v92;
  id v93;
  uint64_t v94;
  id v95;
  NSObject *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  double result;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  id v128[4];
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  _QWORD v132[5];

  v9 = (uint64_t)&selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v10 = objc_msgSend(a1, "hashtags");
  v114 = a1;
  if (!v10)
    goto LABEL_9;
  v11 = v10;
  v108 = a4;
  v109 = a5;
  v110 = a2;
  v120 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
  v122 = sub_1000E51DC((unint64_t *)&qword_10083B670, &qword_10083DAC0, REMHashtag_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v11, v120, v122);

  swift_bridgeObjectRetain(v12);
  v14 = sub_1001EA218(v13);
  v15 = objc_msgSend(a1, "accountID", swift_bridgeObjectRelease().n128_f64[0]);
  v16 = objc_msgSend(a1, "objectID");
  v17 = type metadata accessor for REMHashtagCDIngestor();
  v18 = swift_allocObject(v17, 32, 7);
  *(_QWORD *)(v18 + 16) = v15;
  *(_QWORD *)(v18 + 24) = v16;
  sub_1005D2C5C((uint64_t)v14, v18);
  swift_release(v18);
  swift_release(v14);
  v19 = v12 & 0xC000000000000001;
  if ((v12 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      a2 = (void *)v12;
    else
      a2 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
    v20 = __CocoaSet.count.getter(a2);
    if (!v20)
      goto LABEL_23;
    v9 = v20;
    specialized ContiguousArray.reserveCapacity(_:)(v20);
    v129 = __CocoaSet.startIndex.getter(a2);
    v130 = v21;
    v131 = 1;
    if (v9 < 0)
    {
      __break(1u);
LABEL_9:
      v12 = (uint64_t)&_swiftEmptySetSingleton;
      goto LABEL_67;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v12 + 16);
    if (!v9)
      goto LABEL_23;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    v129 = sub_100364E8C(v12);
    v130 = v22;
    v131 = v23 & 1;
  }
  v24 = v12 & 0xFFFFFFFFFFFFFF8;
  if (v12 < 0)
    v24 = v12;
  v125 = v24;
  do
  {
    while (1)
    {
      v30 = v129;
      v31 = v130;
      v32 = v131;
      sub_100364B7C(v129, v130, v131, v12);
      v34 = v33;
      v35 = objc_msgSend(v33, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v37 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
      v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized ContiguousArray._endMutation()(v38);
      if (v19)
        break;
      v25 = sub_10036456C(v30, v31, v32, v12);
      v27 = v26;
      v29 = v28;
      sub_1000E515C(v30, v31, v32);
      v129 = v25;
      v130 = v27;
      v131 = v29 & 1;
      if (!--v9)
        goto LABEL_22;
    }
    if ((v32 & 1) == 0)
      goto LABEL_107;
    v39 = __CocoaSet.Index.handleBitPattern.getter(v30, v31);
    if (v39)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v41 = sub_10001A630(&qword_10083C2F8);
    v42 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v128, v41);
    __CocoaSet.formIndex(after:isUnique:)(v43, isUniquelyReferenced_nonNull_native, v125);
    v42(v128, 0);
    --v9;
  }
  while (v9);
LABEL_22:
  sub_1000E515C(v129, v130, v131);
LABEL_23:
  sub_10011F104((uint64_t)_swiftEmptyArrayStorage);
  v117 = v44;
  swift_bridgeObjectRelease();
  if (v19)
  {
    if (v12 < 0)
      v46 = v12;
    else
      v46 = v12 & 0xFFFFFFFFFFFFFF8;
    v47 = __CocoaSet.makeIterator()(v46);
    v45 = Set.Iterator.init(_cocoa:)(v132, v47, v120, v122);
    v12 = v132[0];
    v126 = v132[1];
    v48 = v132[2];
    v49 = v132[3];
    v50 = v132[4];
  }
  else
  {
    v49 = 0;
    v51 = -1 << *(_BYTE *)(v12 + 32);
    v126 = v12 + 56;
    v48 = ~v51;
    v52 = -v51;
    if (v52 < 64)
      v53 = ~(-1 << v52);
    else
      v53 = -1;
    v50 = v53 & *(_QWORD *)(v12 + 56);
  }
  v54 = 0;
  v115 = 0;
  v107 = v48;
  v123 = (unint64_t)(v48 + 64) >> 6;
  while (2)
  {
    v112 = v54;
LABEL_34:
    v55 = v49;
    v56 = v50;
    do
    {
      if (v12 < 0)
      {
        v58 = __CocoaSet.Iterator.next()(v45);
        if (!v58)
          goto LABEL_66;
        v59 = v58;
        v129 = v58;
        swift_unknownObjectRetain(v58);
        swift_dynamicCast(v128, &v129, (char *)&type metadata for Swift.AnyObject + 8, v120, 7);
        v60 = v128[0];
        swift_unknownObjectRelease(v59);
        v49 = v55;
        v50 = v56;
        if (!v60)
          goto LABEL_66;
      }
      else
      {
        if (v56)
        {
          v50 = (v56 - 1) & v56;
          v57 = __clz(__rbit64(v56)) | (v55 << 6);
          v49 = v55;
        }
        else
        {
          v49 = v55 + 1;
          if (__OFADD__(v55, 1))
            goto LABEL_100;
          if (v49 >= v123)
            goto LABEL_66;
          v61 = *(_QWORD *)(v126 + 8 * v49);
          if (!v61)
          {
            v62 = v55 + 2;
            if (v55 + 2 >= v123)
              goto LABEL_66;
            v61 = *(_QWORD *)(v126 + 8 * v62);
            if (v61)
              goto LABEL_48;
            v62 = v55 + 3;
            if (v55 + 3 >= v123)
              goto LABEL_66;
            v61 = *(_QWORD *)(v126 + 8 * v62);
            if (v61)
            {
LABEL_48:
              v49 = v62;
            }
            else
            {
              v49 = v55 + 4;
              if (v55 + 4 >= v123)
                goto LABEL_66;
              v61 = *(_QWORD *)(v126 + 8 * v49);
              if (!v61)
              {
                v64 = v55 + 5;
                do
                {
                  if (v123 == v64)
                    goto LABEL_66;
                  v61 = *(_QWORD *)(v126 + 8 * v64++);
                }
                while (!v61);
                v49 = v64 - 1;
              }
            }
          }
          v50 = (v61 - 1) & v61;
          v57 = __clz(__rbit64(v61)) + (v49 << 6);
        }
        v60 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v57);
        if (!v60)
          goto LABEL_66;
      }
      v63 = objc_msgSend(v60, "type", v107);

      if (!v63)
      {
        v65 = __OFADD__(v115++, 1);
        if (v65)
        {
          __break(1u);
LABEL_107:
          __break(1u);
        }
        goto LABEL_34;
      }
      v55 = v49;
      v56 = v50;
    }
    while (v63 != (id)1);
    v54 = v112 + 1;
    if (!__OFADD__(v112, 1))
      continue;
    break;
  }
  __break(1u);
LABEL_66:
  sub_1000C6560(v12);
  v12 = v117;
  *v108 = v115;
  a2 = v110;
  *v109 = v112;
  v9 = (uint64_t)&selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_67:
  v66 = objc_msgSend(a2, *(SEL *)(v9 + 2088), v107);
  if (v66)
  {
    v67 = v66;
    v68 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v69 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v70 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v67, v68, v69);

    v128[0] = v70;
    v71 = sub_10001A630(&qword_10083BDF8);
    v72 = sub_1000A5F84(&qword_10083BE00, &qword_10083BDF8, (uint64_t)&protocol conformance descriptor for Set<A>);
    v49 = Sequence.elements<A>(ofType:)(v68, v71, v68, v72);
    swift_bridgeObjectRelease();
    if ((unint64_t)v49 >> 62)
      goto LABEL_101;
    v73 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    v116 = v49;
    while (v73)
    {
      v74 = 0;
      v119 = v12 & 0xC000000000000001;
      v75 = v12 & 0xFFFFFFFFFFFFFF8;
      if (v12 < 0)
        v75 = v12;
      v111 = v49 + 32;
      v113 = v75;
      v124 = v12 + 56;
      v127 = v49 & 0xC000000000000001;
      v121 = v73;
      v118 = v12;
      while (1)
      {
        v76 = v127
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v116)
            : *(id *)(v111 + 8 * v74);
        v49 = (uint64_t)v76;
        v65 = __OFADD__(v74++, 1);
        if (v65)
          break;
        v128[0] = 0;
        v77 = objc_msgSend(v76, "remObjectIDWithError:", v128);
        v78 = v128[0];
        if (!v77)
        {
          v103 = v128[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v78);

          swift_willThrow(v104);
          return result;
        }
        v79 = v77;
        if (v119)
        {
          v80 = v128[0];
          v81 = v79;
          v82 = __CocoaSet.contains(_:)(v81, v113);

          if ((v82 & 1) == 0)
            goto LABEL_90;
LABEL_73:

          if (v74 == v121)
            goto LABEL_105;
        }
        else
        {
          if (*(_QWORD *)(v12 + 16))
          {
            v83 = *(_QWORD *)(v12 + 40);
            v84 = v128[0];
            v85 = NSObject._rawHashValue(seed:)(v83);
            v86 = -1 << *(_BYTE *)(v12 + 32);
            v87 = v85 & ~v86;
            if (((*(_QWORD *)(v124 + ((v87 >> 3) & 0xFFFFFFFFFFFFF8)) >> v87) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v88 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v87);
              v89 = static NSObject.== infix(_:_:)(v88);

              if ((v89 & 1) == 0)
              {
                v90 = ~v86;
                while (1)
                {
                  v87 = (v87 + 1) & v90;
                  if (((*(_QWORD *)(v124 + ((v87 >> 3) & 0xFFFFFFFFFFFFF8)) >> v87) & 1) == 0)
                    goto LABEL_90;
                  v91 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v87);
                  v92 = static NSObject.== infix(_:_:)(v91);

                  if ((v92 & 1) != 0)
                    goto LABEL_73;
                }
              }
              goto LABEL_73;
            }
          }
          else
          {
            v93 = v128[0];
          }
LABEL_90:
          if (qword_100837000 != -1)
            swift_once(&qword_100837000, sub_10021EBB8);
          v94 = type metadata accessor for Logger(0);
          sub_10001AAA8(v94, (uint64_t)qword_100841018);
          v95 = v79;
          v96 = v114;
          v97 = Logger.logObject.getter(v96);
          v98 = static os_log_type_t.info.getter(v97);
          if (os_log_type_enabled(v97, v98))
          {
            v99 = swift_slowAlloc(22, -1);
            v100 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v99 = 138412546;
            v101 = -[NSObject objectID](v96, "objectID");
            *(_QWORD *)(v99 + 4) = v101;
            *v100 = v101;

            *(_WORD *)(v99 + 12) = 2112;
            *(_QWORD *)(v99 + 14) = v95;
            v100[1] = v79;
            _os_log_impl((void *)&_mh_execute_header, v97, v98, "Removing hashtag from reminder {reminder.objectID: %@, hashtag.objectID: %@}", (uint8_t *)v99, 0x16u);
            v102 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v100, 2, v102);
            swift_slowDealloc(v100, -1, -1);
            swift_slowDealloc(v99, -1, -1);
          }
          else
          {

            v97 = v96;
          }

          objc_msgSend((id)v49, "setReminder:", 0);
          v12 = v118;
          if (v74 == v121)
            goto LABEL_105;
        }
      }
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      if (v49 < 0)
        v106 = v49;
      else
        v106 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v73 = _CocoaArrayWrapper.endIndex.getter(v106);
      swift_bridgeObjectRelease();
      v116 = v49;
    }
LABEL_105:
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100228D18(void *a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  char **v8;
  id v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  char v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  char v67;
  id v68;
  char v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE v92[32];
  uint64_t v93;
  _OWORD v94[2];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;

  v88 = a2;
  v3 = type metadata accessor for NSFastEnumerationIterator(0);
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v5 = __chkstk_darwin(v3).n128_u64[0];
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v87 = a1;
  v9 = objc_msgSend(a1, "recurrenceRules", v5);
  if (!v9)
  {
    v90 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_18;
  }
  v11 = v9;
  v12 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v14 = type metadata accessor for REMRecurrenceRuleCDIngestor();
  v15 = swift_allocObject(v14, 16, 7);
  sub_1005D8454(v13, v15);
  swift_release(v15);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v25 = v13;
    else
      v25 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v16 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
  }
  else
  {
    v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_4:
      *(_QWORD *)&v95 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v16);
      if (v16 < 0)
      {
        __break(1u);
        return;
      }
      v91 = v4;
      v17 = 0;
      do
      {
        if ((v13 & 0xC000000000000001) != 0)
          v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v13);
        else
          v18 = *(id *)(v13 + 8 * v17 + 32);
        v19 = v18;
        ++v17;
        v20 = objc_msgSend(v18, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v22 = *(_QWORD *)(v95 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized ContiguousArray._endMutation()(v23);
      }
      while (v16 != v17);
      v24 = (_QWORD *)v95;
      swift_bridgeObjectRelease();
      v4 = v91;
      v8 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  v24 = _swiftEmptyArrayStorage;
LABEL_17:
  sub_10011F104((uint64_t)v24);
  v90 = v26;
  *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_18:
  v27 = objc_msgSend(v88, v8[286], v10);
  if (v27)
  {
    v97 = (unint64_t)_swiftEmptyArrayStorage;
    v28 = v27;
    NSOrderedSet.makeIterator()(v29);
    v80 = v28;

    v30 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()(&v95, v3, v30);
    while (v96)
    {
      sub_10001A6CC(&v95, v94);
      sub_10001A670((uint64_t)v94, (uint64_t)v92);
      v32 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
      if ((swift_dynamicCast(&v93, v92, (char *)&type metadata for Any + 8, v32, 6) & 1) == 0)
        v93 = 0;
      v33 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
      v34 = v93;
      if (v93)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
        v36 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v35 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v36 >= v35 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1);
        v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized Array._endMutation()(v31);
      }
      dispatch thunk of IteratorProtocol.next()(&v95, v3, v30);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v38 = v97;
    if (v97 >> 62)
      goto LABEL_65;
    v39 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v39)
    {
      v40 = 0;
      v91 = v38 & 0xC000000000000001;
      v85 = v38 & 0xFFFFFFFFFFFFFF8;
      v84 = v38 + 32;
      v89 = v90 & 0xC000000000000001;
      v41 = v90 & 0xFFFFFFFFFFFFFF8;
      if (v90 < 0)
        v41 = v90;
      v86 = v41;
      v81 = v90 + 56;
      v37.n128_u64[0] = 138412546;
      v82 = v37;
      v83 = v38;
      while (1)
      {
        if (v91)
        {
          v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v38);
        }
        else
        {
          if (v40 >= *(_QWORD *)(v85 + 16))
            goto LABEL_64;
          v43 = *(id *)(v84 + 8 * v40);
        }
        v42 = v43;
        if (__OFADD__(v40++, 1))
          break;
        v45 = -[NSObject remObjectID](v43, "remObjectID");
        if (!v45)
        {
          if (qword_100837000 != -1)
            swift_once(&qword_100837000, sub_10021EBB8);
          v49 = type metadata accessor for Logger(0);
          sub_10001AAA8(v49, (uint64_t)qword_100841018);
          v50 = v88;
          v47 = v42;
          v42 = Logger.logObject.getter(v47);
          v51 = static os_log_type_t.error.getter(v42);
          if (os_log_type_enabled(v42, v51))
          {
            v52 = swift_slowAlloc(22, -1);
            v53 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v52 = v82.n128_u32[0];
            v54 = -[NSObject objectID](v50, "objectID");
            *(_QWORD *)(v52 + 4) = v54;
            *v53 = v54;

            *(_WORD *)(v52 + 12) = 2112;
            v55 = -[NSObject objectID](v47, "objectID");
            *(_QWORD *)(v52 + 14) = v55;
            v53[1] = v55;

            _os_log_impl((void *)&_mh_execute_header, v42, v51, "Can't merge recurrence rule for reminder because cdRecurrenceRule.remObjectID is nil {cdReminder.objectID: %@, cdRecurrenceRule.objectID: %@}", (uint8_t *)v52, 0x16u);
            v56 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v53, 2, v56);
            v57 = v53;
            v38 = v83;
            swift_slowDealloc(v57, -1, -1);
            swift_slowDealloc(v52, -1, -1);
          }
          else
          {

            v42 = v50;
          }
          goto LABEL_34;
        }
        v46 = v45;
        if (v89)
        {
          v47 = v45;
          v48 = __CocoaSet.contains(_:)(v47, v86);

          if ((v48 & 1) == 0)
            goto LABEL_56;
        }
        else
        {
          if (!*(_QWORD *)(v90 + 16))
            goto LABEL_56;
          v58 = v90;
          v59 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v90 + 40));
          v60 = -1 << *(_BYTE *)(v58 + 32);
          v61 = v59 & ~v60;
          if (((*(_QWORD *)(v81 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
            goto LABEL_56;
          sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v62 = *(id *)(*(_QWORD *)(v90 + 48) + 8 * v61);
          v63 = static NSObject.== infix(_:_:)(v62);

          if ((v63 & 1) == 0)
          {
            v64 = ~v60;
            v65 = (v61 + 1) & v64;
            if (((*(_QWORD *)(v81 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
              goto LABEL_56;
            v66 = *(id *)(*(_QWORD *)(v90 + 48) + 8 * v65);
            v67 = static NSObject.== infix(_:_:)(v66);

            if ((v67 & 1) == 0)
            {
              while (1)
              {
                v65 = (v65 + 1) & v64;
                if (((*(_QWORD *)(v81 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                  break;
                v68 = *(id *)(*(_QWORD *)(v90 + 48) + 8 * v65);
                v69 = static NSObject.== infix(_:_:)(v68);

                if ((v69 & 1) != 0)
                  goto LABEL_55;
              }
LABEL_56:
              if (qword_100837000 != -1)
                swift_once(&qword_100837000, sub_10021EBB8);
              v70 = type metadata accessor for Logger(0);
              sub_10001AAA8(v70, (uint64_t)qword_100841018);
              v47 = v46;
              v71 = v87;
              v72 = Logger.logObject.getter(v71);
              v73 = static os_log_type_t.info.getter(v72);
              if (os_log_type_enabled(v72, v73))
              {
                v74 = swift_slowAlloc(22, -1);
                v75 = (_QWORD *)swift_slowAlloc(16, -1);
                *(_DWORD *)v74 = v82.n128_u32[0];
                v76 = -[NSObject objectID](v71, "objectID");
                *(_QWORD *)(v74 + 4) = v76;
                *v75 = v76;

                *(_WORD *)(v74 + 12) = 2112;
                *(_QWORD *)(v74 + 14) = v47;
                v75[1] = v46;
                _os_log_impl((void *)&_mh_execute_header, v72, v73, "Removing recurrenceRule from reminder {reminder.objectID: %@, recurrenceRule.objectID: %@}", (uint8_t *)v74, 0x16u);
                v77 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v75, 2, v77);
                swift_slowDealloc(v75, -1, -1);
                v78 = v74;
                v38 = v83;
                swift_slowDealloc(v78, -1, -1);
              }
              else
              {

                v72 = v71;
              }

              -[NSObject setReminder:](v42, "setReminder:", 0);
              goto LABEL_34;
            }
          }
LABEL_55:
          v47 = v46;
        }
LABEL_34:

        if (v40 == v39)
          goto LABEL_69;
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      if (v38 < 0)
        v79 = v38;
      else
        v79 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v39 = _CocoaArrayWrapper.endIndex.getter(v79);
      v37 = swift_bridgeObjectRelease();
    }
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_100229634(void *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Class isa;
  uint64_t v53;
  Class v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = sub_100220394();
  if (!v2)
  {
    v6 = (uint64_t)v5;
    v7 = objc_msgSend(a1, "dueDateDeltaAlertsToUpsert");
    if (v7)
    {
      v8 = v7;
      v9 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
      v10 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    }
    else
    {
      v10 = 0;
    }
    v11 = objc_msgSend(a1, "dueDateDeltaAlertIdentifiersToDelete");
    if (v11)
    {
      v12 = v11;
      v13 = type metadata accessor for UUID(0);
      v14 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = (uint8_t *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v13, v14);

    }
    else
    {
      v15 = 0;
    }
    v16 = sub_1002229AC(v10, v15, v6);
    v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      if (qword_100837000 != -1)
        swift_once(&qword_100837000, sub_10021EBB8);
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_100841018);
      v20 = a2;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = swift_slowAlloc(32, -1);
        v59 = v55;
        *(_DWORD *)v23 = 136446210;
        v56 = v20;
        v24 = objc_msgSend(v20, "remObjectID");
        if (v24)
        {
          v25 = v24;
          v26 = objc_msgSend(v24, "description");

          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

        }
        else
        {
          v27 = 7104878;
          v29 = 0xE300000000000000;
        }
        v57 = sub_10001A820(v27, v29, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
        v20 = v56;

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "REMReminderStorageCDIngestor.mergeDueDateDeltaAlerts: Setting 'cdReminder.dueDateDeltaAlertsData' {reminderID: %{public}s}", v23, 0xCu);
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

      }
      if ((unint64_t)v18 >> 62)
      {
        if (v18 < 0)
          v53 = v18;
        else
          v53 = v18 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v18);
        if (_CocoaArrayWrapper.endIndex.getter(v53))
          goto LABEL_27;
      }
      else
      {
        v42 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        *(_QWORD *)&v43 = swift_bridgeObjectRetain(v18).n128_u64[0];
        if (v42)
        {
LABEL_27:
          sub_1000CD1AC(v18);
          v45 = (void *)v44;
          v59 = v44;
          v46 = type metadata accessor for RDDueDateDeltaAlerts();
          v47 = sub_10009FC50(&qword_10083C300, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts, (uint64_t)&unk_1006A7398);
          v49 = REMJSONRepresentable.toJSONData()(v46, v47, v48);
          v51 = v50;
          sub_1000A70E4(v49, v50);
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71C8(v49, v51);
          objc_msgSend(v20, "setDueDateDeltaAlertsData:", isa);

          objc_msgSend(v20, "setCachedDeserializedDueDateDeltaAlerts:", v45);
          sub_1000A71C8(v49, v51);
          swift_bridgeObjectRelease();

LABEL_35:
          sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
          v54 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(a1, "setFetchedDueDateDeltaAlerts:", v54, swift_bridgeObjectRelease().n128_f64[0]);

          return;
        }
      }
      objc_msgSend(v20, "setDueDateDeltaAlertsData:", 0, v43);
      objc_msgSend(v20, "setCachedDeserializedDueDateDeltaAlerts:", 0);
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    if (qword_100837000 != -1)
      swift_once(&qword_100837000, sub_10021EBB8);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100841018);
    v31 = a2;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v59 = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = objc_msgSend(v31, "remObjectID");
      if (v36)
      {
        v37 = v36;
        v38 = objc_msgSend(v36, "description");

        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

      }
      else
      {
        v39 = 7104878;
        v41 = 0xE300000000000000;
      }
      v57 = sub_10001A820(v39, v41, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "REMReminderStorageCDIngestor.mergeDueDateDeltaAlerts: Noop to 'cdReminder.dueDateDeltaAlertsData' {reminderID: %s}", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100229CC0(void *a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  _QWORD *v42;
  char *v43;
  __n128 v44;
  _QWORD *v45;
  NSObject *v46;
  _QWORD *v47;
  id v48;
  id v49;
  char *v50;
  NSUUID v51;
  Class isa;
  char *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  Class v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  objc_class *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  objc_class *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  Class v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSString v116;
  unsigned __int8 v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSString v128;
  unsigned __int8 v129;
  NSObject *v130;
  NSString v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  NSObject *v138;
  NSString v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  NSObject *v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;
  id v147;
  id v148;
  id v149;
  uint64_t v150;
  int64_t v151;
  _QWORD *v152;
  unsigned __int8 *v153;
  unint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  NSString v162;
  unsigned int v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, _QWORD, uint64_t);
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  unsigned __int8 v183;
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  void *v193;
  uint64_t v194;
  uint64_t ObjCClassFromMetadata;
  NSString v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  __n128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  _QWORD *v236;
  id v237;
  NSObject *v238;
  char *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242[2];
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  char v246[8];
  _QWORD v247[2];
  unsigned __int8 v248;
  id v249;
  id v250;
  char v251;
  uint64_t v252;
  char v253;
  _QWORD *v254;
  char v255;
  BOOL v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  BOOL v260;
  __int16 v261;

  v5 = v4;
  v240 = a4;
  v9 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v198 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for URL(0);
  v212 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v204 = (char *)&v198 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v14);
  v211 = (char *)&v198 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DateComponents(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v228 = (char *)&v198 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v214 = (char *)&v198 - v20;
  v21 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v21);
  v210 = (char *)&v198 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v209 = (char *)&v198 - v24;
  v219 = type metadata accessor for CharacterSet(0);
  v218 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v217 = (char *)&v198 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for Date(0);
  v233 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v231 = (char *)&v198 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v27);
  v208 = (char *)&v198 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v207 = (char *)&v198 - v30;
  __chkstk_darwin(v31);
  v206 = (char *)&v198 - v32;
  __chkstk_darwin(v33);
  v205 = (char *)&v198 - v34;
  __chkstk_darwin(v35);
  v227 = (char *)&v198 - v36;
  v230 = type metadata accessor for UUID(0);
  v226 = *(_QWORD *)(v230 - 8);
  *(_QWORD *)&v37 = __chkstk_darwin(v230).n128_u64[0];
  v225 = (char *)&v198 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = a2;
  v39 = -[NSObject createResolutionTokenMapIfNecessary](a2, "createResolutionTokenMapIfNecessary", v37);
  v40 = objc_msgSend(a1, "resolutionTokenMap");
  v235 = v39;
  if (!v40)
  {
    if (qword_100837000 != -1)
      swift_once(&qword_100837000, sub_10021EBB8);
    v141 = type metadata accessor for Logger(0);
    sub_10001AAA8(v141, (uint64_t)qword_100841018);
    swift_bridgeObjectRetain_n(a3, 2);
    v142 = a1;
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v143, (os_log_type_t)v144))
    {
      LODWORD(v240) = v144;
      v145 = swift_slowAlloc(22, -1);
      v146 = (_QWORD *)swift_slowAlloc(8, -1);
      v147 = (id)swift_slowAlloc(32, -1);
      v242[0] = (uint64_t)v147;
      *(_DWORD *)v145 = 138543618;
      v148 = objc_msgSend(v142, "objectID");
      v223 = a3;
      v149 = v148;
      v245 = v148;
      v239 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246);
      v241 = v146;
      *v146 = v149;
      v150 = v223;

      *(_WORD *)(v145 + 12) = 2082;
      v151 = *(_QWORD *)(v150 + 16);
      v152 = _swiftEmptyArrayStorage;
      if (v151)
      {
        v237 = v147;
        v238 = v143;
        v245 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v151, 0);
        v152 = v245;
        v153 = (unsigned __int8 *)(v150 + 32);
        v154 = v245[2];
        v155 = 2 * v154;
        do
        {
          v156 = *v153++;
          v157 = sub_10021E440(v156);
          v159 = v158;
          v245 = v152;
          v160 = v152[3];
          if (v154 >= v160 >> 1)
          {
            sub_1001C1B0C(v160 > 1, v154 + 1, 1);
            v152 = v245;
          }
          v152[2] = v154 + 1;
          v161 = &v152[v155];
          v161[4] = v157;
          v161[5] = v159;
          v155 += 2;
          ++v154;
          --v151;
        }
        while (v151);
        v39 = v235;
        v143 = v238;
        v147 = v237;
      }
      v188 = Array.description.getter(v152, &type metadata for String);
      v190 = v189;
      swift_bridgeObjectRelease();
      v245 = (_QWORD *)sub_10001A820(v188, v190, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v239);
      swift_bridgeObjectRelease_n(v223, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v143, (os_log_type_t)v240, "REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v145, 0x16u);
      v191 = sub_10001A630((uint64_t *)&unk_100839E70);
      v192 = v241;
      swift_arrayDestroy(v241, 1, v191);
      swift_slowDealloc(v192, -1, -1);
      swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v147, -1, -1);
      swift_slowDealloc(v145, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v193 = (void *)objc_opt_self(REMError);
    v194 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v194);
    v196 = String._bridgeToObjectiveC()();
    objc_msgSend(v193, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v196);

    swift_willThrow(v197);
    return;
  }
  v220 = v17;
  v221 = v16;
  v215 = v10;
  v216 = v9;
  v222 = v40;
  v41 = sub_100405990(v40, a3);
  v237 = v41;
  v261 = 0;
  v244 = 0;
  v245 = 0;
  v246[0] = 1;
  v260 = 0;
  v243 = 0;
  v42 = *(_QWORD **)(a3 + 16);
  if (!v42)
  {
    v203 = 0;
    v224 = 0xE000000000000000;
    goto LABEL_117;
  }
  v201 = v12;
  v43 = (char *)(a3 + 32);
  v223 = a3;
  v44 = swift_bridgeObjectRetain(a3);
  v259 = 0;
  v203 = 0;
  v45 = 0;
  v199 = (_QWORD *)((char *)v42 - 1);
  v224 = 0xE000000000000000;
  v44.n128_u64[0] = 136315138;
  v202 = v44;
  v200 = (char *)&type metadata for Any + 8;
  v229 = (unint64_t)"daIsNotificationsCollection";
  v46 = v238;
  v236 = v42;
  v239 = (char *)(a3 + 32);
LABEL_4:
  if (v45 <= v42)
    v47 = v42;
  else
    v47 = v45;
  v241 = v47;
  while (2)
  {
    if (v241 == v45)
    {
      __break(1u);
      goto LABEL_127;
    }
    v54 = *((unsigned __int8 *)v45 + (_QWORD)v43);
    switch(*((_BYTE *)v45 + (_QWORD)v43))
    {
      case 0:
        v48 = objc_msgSend(a1, "objectID");
        v49 = objc_msgSend(v48, "uuid");

        v50 = v225;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

        v51.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        v43 = v239;
        isa = v51.super.isa;
        v53 = v50;
        v42 = v236;
        (*(void (**)(char *, uint64_t))(v226 + 8))(v53, v230);
        -[NSObject setIdentifier:](v46, "setIdentifier:", isa);
        goto LABEL_9;
      case 1:
        isa = (Class)objc_msgSend(a1, "daCalendarItemUniqueIdentifier");
        -[NSObject setDaCalendarItemUniqueIdentifier:](v46, "setDaCalendarItemUniqueIdentifier:", isa);
        goto LABEL_9;
      case 2:
        isa = (Class)objc_msgSend(a1, "externalIdentifier");
        -[NSObject setExternalIdentifier:](v46, "setExternalIdentifier:", isa);
        goto LABEL_9;
      case 3:
        isa = (Class)objc_msgSend(a1, "externalModificationTag");
        -[NSObject setExternalModificationTag:](v46, "setExternalModificationTag:", isa);
        goto LABEL_9;
      case 4:
        isa = (Class)objc_msgSend(a1, "daSyncToken");
        -[NSObject setDaSyncToken:](v46, "setDaSyncToken:", isa);
        goto LABEL_9;
      case 5:
        isa = (Class)objc_msgSend(a1, "daPushKey");
        -[NSObject setDaPushKey:](v46, "setDaPushKey:", isa);
        goto LABEL_9;
      case 6:
        if (qword_100837010 != -1)
          swift_once(&qword_100837010, sub_10021EF78);
        v55 = qword_100871D40;
        v56 = v229 | 0x8000000000000000;
        if (!*(_QWORD *)(qword_100871D40 + 16))
          goto LABEL_61;
        swift_bridgeObjectRetain(qword_100871D40);
        v57 = sub_10001A6DC(0xD000000000000017, v56);
        if ((v58 & 1) != 0)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v55 + 56) + 16 * v57 + 8));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_61:
          swift_bridgeObjectRelease();
          if (qword_100837310 != -1)
            swift_once(&qword_100837310, sub_10038B34C);
          v108 = type metadata accessor for Logger(0);
          v109 = sub_10001AAA8(v108, (uint64_t)qword_100847400);
          v110 = Logger.logObject.getter(v109);
          v111 = static os_log_type_t.error.getter(v110);
          if (os_log_type_enabled(v110, v111))
          {
            v112 = v5;
            v113 = swift_slowAlloc(12, -1);
            v114 = swift_slowAlloc(32, -1);
            v242[0] = v114;
            *(_DWORD *)v113 = v202.n128_u32[0];
            *(_QWORD *)(v113 + 4) = sub_10001A820(0xD000000000000017, v229 | 0x8000000000000000, v242);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v110, v111, "Unknown ingestable key {key: %s}", (uint8_t *)v113, 0xCu);
            swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v114, -1, -1);
            v115 = v113;
            v5 = v112;
            v42 = v236;
            swift_slowDealloc(v115, -1, -1);
          }

        }
        v116 = String._bridgeToObjectiveC()();
        v117 = objc_msgSend(v39, "mergeWithMap:forKey:", v237, v116, swift_bridgeObjectRelease().n128_f64[0]);

        if ((v117 & 1) == 0)
          goto LABEL_77;
        v118 = objc_msgSend(a1, "minimumSupportedVersion");
        v46 = v238;
        -[NSObject setMinimumSupportedVersion:](v238, "setMinimumSupportedVersion:", v118);
        v43 = v239;
        goto LABEL_10;
      case 7:
      case 0x14:
      case 0x1A:
        goto LABEL_10;
      case 8:
        v232 = v5;
        v59 = objc_msgSend(a1, "titleDocument");
        v60 = sub_100403738(8);
        v62 = sub_10021FE88(v59, v60, v61, (uint64_t)v237, *(_BYTE *)(v240 + 16));
        v64 = v63;
        v66 = v65;
        v68 = v67;

        *(_QWORD *)&v69 = swift_bridgeObjectRelease().n128_u64[0];
        if (v68 == 1)
          goto LABEL_33;
        if (v64 >> 60 == 15)
        {
          v70 = 0;
        }
        else
        {
          sub_1000A70E4((uint64_t)v62, v64);
          v70 = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71B4((uint64_t)v62, v64);
        }
        v39 = v235;
        v130 = v238;
        -[NSObject setTitleDocument:](v238, "setTitleDocument:", v70, v69);

        if (!v68)
        {
          sub_1000A71B4((uint64_t)v62, v64);
          v5 = v232;
          v46 = v130;
          goto LABEL_96;
        }
        v131 = String._bridgeToObjectiveC()();
        -[NSObject setTitle:](v130, "setTitle:", v131);

        v242[0] = v66;
        v242[1] = v68;
        v132 = v217;
        static CharacterSet.whitespacesAndNewlines.getter();
        v133 = sub_1000E525C();
        v134 = StringProtocol.trimmingCharacters(in:)(v132, &type metadata for String, v133);
        v136 = v135;
        (*(void (**)(char *, uint64_t))(v218 + 8))(v132, v219);
        sub_1000A71B4((uint64_t)v62, v64);
        swift_bridgeObjectRelease();
        v137 = HIBYTE(v136) & 0xF;
        if ((v136 & 0x2000000000000000) == 0)
          v137 = v134 & 0xFFFFFFFFFFFFLL;
        if (v137)
        {
          swift_bridgeObjectRelease();
          v203 = v66;
          v224 = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v5 = v232;
        v46 = v238;
        goto LABEL_95;
      case 0xF:
        sub_100228D18(a1, v46);
        goto LABEL_10;
      case 0x15:
        v232 = v5;
        v77 = objc_msgSend(a1, "notesDocument");
        v78 = sub_100403738(21);
        v80 = sub_10021FE88(v77, v78, v79, (uint64_t)v237, *(_BYTE *)(v240 + 16));
        v82 = v81;
        v84 = v83;

        *(_QWORD *)&v85 = swift_bridgeObjectRelease().n128_u64[0];
        if (v84 == 1)
        {
LABEL_33:
          v39 = v235;
          v5 = v232;
          v46 = v238;
        }
        else
        {
          if (v82 >> 60 == 15)
          {
            v107 = 0;
          }
          else
          {
            sub_1000A70E4((uint64_t)v80, v82);
            v107 = Data._bridgeToObjectiveC()().super.isa;
            sub_1000A71B4((uint64_t)v80, v82);
          }
          v138 = v238;
          -[NSObject setNotesDocument:](v238, "setNotesDocument:", v107, v85);

          if (v84)
          {
            v139 = String._bridgeToObjectiveC()();
            -[NSObject setNotes:](v138, "setNotes:", v139, swift_bridgeObjectRelease().n128_f64[0]);
            sub_1000A71B4((uint64_t)v80, v82);

          }
          else
          {
            sub_1000A71B4((uint64_t)v80, v82);
          }
          v5 = v232;
          v46 = v138;
LABEL_95:
          v39 = v235;
        }
LABEL_96:
        v42 = v236;
        v43 = v239;
        goto LABEL_10;
      case 0x16:
        sub_10022781C(a1, v46, v240, &v260);
        goto LABEL_10;
      case 0x17:
        sub_100226710(a1, v46, v240, (_BYTE *)&v261 + 1, &v261, &v245);
        if (v5)
          goto LABEL_124;
        goto LABEL_10;
      case 0x18:
        sub_100226FAC(a1, (uint64_t)v46);
        if (v5)
          goto LABEL_124;
        goto LABEL_10;
      case 0x19:
        sub_100228294(a1, v46, v240, &v243, &v244);
        if (!v5)
          goto LABEL_10;
LABEL_124:

        swift_bridgeObjectRelease();
        goto LABEL_120;
      case 0x1B:
        v86 = objc_msgSend(a1, "dueDateDeltaAlertsToUpsert");
        if (v86)
        {
          v87 = v86;
          v88 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
          v89 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v87, v88);

          if ((unint64_t)v89 >> 62)
          {
            v140 = v89 < 0 ? v89 : v89 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v89);
            v90 = _CocoaArrayWrapper.endIndex.getter(v140);
            swift_bridgeObjectRelease();
          }
          else
          {
            v90 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v90)
            goto LABEL_101;
        }
        goto LABEL_48;
      case 0x1C:
        v91 = objc_msgSend(a1, "dueDateDeltaAlertIdentifiersToDelete");
        if (!v91)
          goto LABEL_10;
        v92 = v91;
        v93 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v94 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v92, v230, v93);

        v95 = *(_QWORD *)(v94 + 16);
        swift_bridgeObjectRelease();
        if (!v95)
        {
LABEL_48:
          v43 = v239;
LABEL_10:
          v45 = (_QWORD *)((char *)v45 + 1);
          if (v42 == v45)
          {
            swift_bridgeObjectRelease();
            v12 = v201;
            if ((v259 & 1) != 0)
              goto LABEL_113;
            goto LABEL_117;
          }
          continue;
        }
LABEL_101:
        v43 = v239;
        if (v199 != v45)
        {
          v45 = (_QWORD *)((char *)v45 + 1);
          v259 = 1;
          goto LABEL_4;
        }
LABEL_127:
        swift_bridgeObjectRelease();
        v12 = v201;
LABEL_113:
        sub_100403738(26);
        v162 = String._bridgeToObjectiveC()();
        v163 = objc_msgSend(v39, "mergeWithMap:forKey:", v237, v162, swift_bridgeObjectRelease().n128_f64[0]);

        if (v163)
        {
          v164 = objc_autoreleasePoolPush();
          sub_100229634(a1, v46);
          if (!v5)
          {
            objc_autoreleasePoolPop(v164);
            goto LABEL_117;
          }
          objc_autoreleasePoolPop(v164);
LABEL_119:

LABEL_120:
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_117:
          static Calendar.current.getter(v41);
          v165 = sub_10001A630(&qword_1008412D0);
          v166 = type metadata accessor for Calendar.Component(0);
          v167 = *(_QWORD *)(v166 - 8);
          v168 = v12;
          v169 = *(_QWORD *)(v167 + 72);
          v170 = *(unsigned __int8 *)(v167 + 80);
          v171 = (v170 + 32) & ~v170;
          v172 = swift_allocObject(v165, v171 + 2 * v169, v170 | 7);
          *(_OWORD *)(v172 + 16) = xmmword_1006A3C40;
          v173 = v172 + v171;
          v174 = *(void (**)(uint64_t, _QWORD, uint64_t))(v167 + 104);
          v174(v173, enum case for Calendar.Component.hour(_:), v166);
          v174(v173 + v169, enum case for Calendar.Component.minute(_:), v166);
          v175 = sub_10011F870(v172);
          swift_setDeallocating(v172);
          swift_arrayDestroy(v173, 2, v166);
          v176 = swift_deallocClassInstance(v172, 32, 7);
          v177 = v231;
          Date.init()(v176);
          v178 = v228;
          Calendar.dateComponents(_:from:)(v175, v177);
          v179 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v233 + 8))(v177, v234, v179);
          v180 = (*(uint64_t (**)(char *, uint64_t))(v215 + 8))(v168, v216);
          v181 = DateComponents.fifteenMinuteBin.getter(v180);
          LOBYTE(v166) = v182;
          (*(void (**)(char *, uint64_t))(v220 + 8))(v178, v221);
          if ((v166 & 1) != 0)
            goto LABEL_119;
          v183 = objc_msgSend(a1, "isRecurrent");
          v184 = objc_msgSend(a1, "flagged");
          v185 = objc_msgSend(a1, "priority");
          v247[0] = v203;
          v247[1] = v224;
          v248 = v183;
          v249 = v184;
          v250 = v185;
          v251 = HIBYTE(v261);
          v252 = v181;
          v253 = v261;
          v254 = v245;
          v255 = v246[0];
          v256 = v260;
          v257 = v244;
          v258 = v244;
          __chkstk_darwin(v185);
          *(&v198 - 2) = (uint64_t)v247;
          v187 = static os_log_type_t.info.getter(v186);
          measureTimeElapsed(_:level:block:)(0xD000000000000019, 0x80000001006FD5C0, v187, sub_10022DB6C, &v198 - 4);
          swift_bridgeObjectRelease();

        }
        return;
      case 0x22:
        v96 = (objc_class *)objc_msgSend(a1, "siriFoundInAppsData");
        isa = v96;
        if (v96)
        {
          v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
          v99 = v98;

          isa = Data._bridgeToObjectiveC()().super.isa;
          v100 = v97;
          v43 = v239;
          v101 = v99;
          v46 = v238;
          sub_1000A71C8(v100, v101);
        }
        -[NSObject setSiriFoundInAppsData:](v46, "setSiriFoundInAppsData:", isa);
        goto LABEL_9;
      case 0x23:
        v102 = (objc_class *)objc_msgSend(a1, "lastBannerPresentationDate");
        isa = v102;
        if (v102)
        {
          v103 = v231;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v102);

          v104 = v233;
          v105 = v227;
          v106 = v234;
          (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v227, v103, v234);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v106);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v105, 1, v106) == 1)
          {
            isa = 0;
          }
          else
          {
            isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v106);
          }
          v46 = v238;
          v42 = v236;
          v43 = v239;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v233 + 56))(v227, 1, 1, v234);
        }
        -[NSObject setLastBannerPresentationDate:](v46, "setLastBannerPresentationDate:", isa);
LABEL_9:

        goto LABEL_10;
      default:
        if (qword_100837010 != -1)
          swift_once(&qword_100837010, sub_10021EF78);
        v71 = qword_100871D40;
        v72 = sub_10021E440(v54);
        v74 = v73;
        if (*(_QWORD *)(v71 + 16))
        {
          swift_bridgeObjectRetain(v71);
          v75 = sub_10001A6DC(v72, v74);
          if ((v76 & 1) != 0)
          {
            swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 16 * v75 + 8));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v42 = v236;
            goto LABEL_75;
          }
          v232 = a1;
          swift_bridgeObjectRelease();
        }
        else
        {
          v232 = a1;
        }
        swift_bridgeObjectRelease();
        v119 = v5;
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v120 = type metadata accessor for Logger(0);
        v121 = sub_10001AAA8(v120, (uint64_t)qword_100847400);
        v122 = Logger.logObject.getter(v121);
        v123 = static os_log_type_t.error.getter(v122);
        if (os_log_type_enabled(v122, v123))
        {
          v124 = swift_slowAlloc(12, -1);
          v125 = swift_slowAlloc(32, -1);
          v242[0] = v125;
          *(_DWORD *)v124 = v202.n128_u32[0];
          *(_QWORD *)(v124 + 4) = sub_10001A820(v72, v74, v242);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "Unknown ingestable key {key: %s}", (uint8_t *)v124, 0xCu);
          swift_arrayDestroy(v125, 1, v200);
          v126 = v125;
          v39 = v235;
          swift_slowDealloc(v126, -1, -1);
          v127 = v124;
          v42 = v236;
          swift_slowDealloc(v127, -1, -1);
        }

        v5 = v119;
        a1 = v232;
LABEL_75:
        v128 = String._bridgeToObjectiveC()();
        v129 = objc_msgSend(v39, "mergeWithMap:forKey:", v237, v128, swift_bridgeObjectRelease().n128_f64[0]);

        if ((v129 & 1) != 0)
          __asm { BR              X9 }
LABEL_77:
        v46 = v238;
        v43 = v239;
        goto LABEL_10;
    }
  }
}

void sub_10022C004(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10022C040()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A7330;
  v3 = objc_msgSend(v0, "accountID");
  *(_QWORD *)(v2 + 32) = v3;
  specialized Array._endMutation()(v3);
  return v2;
}

void sub_10022C218(void *a1, void *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  char *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t ObjCClassFromMetadata;
  NSString v29;
  uint64_t v30;
  _QWORD v31[22];
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  char v38[8];
  id v39;
  _QWORD v40[13];

  v37 = a4;
  v7 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v31[17] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v32);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v31[19] = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v36 = a2;
  v35 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v13);
  v33 = a1;
  v14 = objc_msgSend(a1, "resolutionTokenMap");
  if (v14)
  {
    v15 = (uint64_t)v14;
    v16 = sub_10001A630(&qword_1008412C8);
    inited = swift_initStackObject(v16, v38);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_BYTE *)(inited + 32) = a3;
    v31[20] = sub_1004059B4(v15, inited);
    swift_setDeallocating(inited);
    v18 = (char *)&loc_10022C3E4 + dword_10022DB3C[a3];
    v31[21] = v15;
    __asm { BR              X10 }
  }
  if (qword_100837000 != -1)
    swift_once(&qword_100837000, sub_10021EBB8);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100841018);
  v20 = v33;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = (_QWORD *)swift_slowAlloc(8, -1);
    v40[12] = swift_slowAlloc(32, -1);
    *(_DWORD *)v23 = 138543618;
    v25 = objc_msgSend(v20, "objectID");
    v39 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
    *v24 = v25;

    *(_WORD *)(v23 + 12) = 2082;
    __asm { BR              X10 }
  }

  v26 = (void *)objc_opt_self(REMError);
  v27 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v27);
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v26, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v29);

  swift_willThrow(v30);
}

uint64_t sub_10022DB6C()
{
  uint64_t v0;

  return sub_100220330(*(_OWORD **)(v0 + 16));
}

uint64_t sub_10022DB84(uint64_t a1, uint64_t a2)
{
  return sub_100380990(a2);
}

uint64_t sub_10022DB90(uint64_t a1, uint64_t a2)
{
  return sub_10037BF48(a1, a2);
}

id sub_10022DB98@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = sub_100189814(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10022DBC4(uint64_t a1, uint64_t a2)
{
  return sub_100380738(a2);
}

NSObject *sub_10022DBD0@<X0>(void **a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;
  NSObject *result;

  result = sub_1003042BC(*a1, 0);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10022DC00(uint64_t a1, uint64_t a2)
{
  return sub_1003804E0(a2);
}

NSObject *sub_10022DC0C@<X0>(NSObject **a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;
  NSObject *result;

  result = sub_10026CF88(*a1, 0, 0);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10022DC40(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v20 - v11;
  v13 = objc_msgSend(a1, "account", v10);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "identifier");

    if (v15)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v16, 1, v2);
    sub_1000A5CA8((uint64_t)v8, (uint64_t)v12, (uint64_t *)&unk_100839C80);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
      v18 = sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
      v17 = UUID.uuidString.getter(v18);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v17;
    }
    sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for REMReminderStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10022DE50 + 4 * byte_1006B0401[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10022DE84 + 4 * byte_1006B03FC[v4]))();
}

uint64_t sub_10022DE84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DE8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022DE94);
  return result;
}

uint64_t sub_10022DEA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022DEA8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10022DEAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DEB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMReminderStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMReminderStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMReminderStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDB)
    goto LABEL_17;
  if (a2 + 37 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 37) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 37;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 37;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 37;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x26;
  v8 = v6 - 38;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMReminderStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 37 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 37) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDA)
    return ((uint64_t (*)(void))((char *)&loc_10022DFAC + 4 * byte_1006B040B[v4]))();
  *a1 = a2 + 37;
  return ((uint64_t (*)(void))((char *)sub_10022DFE0 + 4 * byte_1006B0406[v4]))();
}

uint64_t sub_10022DFE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022DFE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022DFF0);
  return result;
}

uint64_t sub_10022DFFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10022E004);
  *(_BYTE *)result = a2 + 37;
  return result;
}

uint64_t sub_10022E008(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022E010(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMReminderStorageCDIngestor.ValueKey()
{
  return &type metadata for REMReminderStorageCDIngestor.ValueKey;
}

uint64_t sub_10022E02C()
{
  return sub_1000A5F84(&qword_100841368, &qword_100841370, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10022E05C()
{
  unint64_t result;

  result = qword_100841378;
  if (!qword_100841378)
  {
    result = swift_getWitnessTable(&unk_1006B054C, &type metadata for REMReminderStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100841378);
  }
  return result;
}

uint64_t sub_10022E0A0()
{
  return sub_1000A5F84(&qword_100841380, &qword_100841388, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10022E0D0()
{
  unint64_t result;

  result = qword_100841390;
  if (!qword_100841390)
  {
    result = swift_getWitnessTable(&unk_1006B0624, &type metadata for REMReminderStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100841390);
  }
  return result;
}

uint64_t sub_10022E114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  id v99;
  uint64_t v100;
  id v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  int v135;
  uint8_t *v136;
  int64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint8_t *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char v212[8];
  _QWORD *v213;
  char v214[8];

  v204 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v202 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v191 = (char *)&v154 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_10001A630(&qword_100841490);
  v186 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = (char *)&v154 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_10001A630(&qword_100841498);
  v189 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v183 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_10001A630(&qword_1008414A0);
  v193 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v185 = (char *)&v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_10001A630(&qword_1008414A8);
  v197 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v188 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_10001A630(&qword_1008414B0);
  v200 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v192 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_10001A630(&qword_1008414B8);
  v203 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v194 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_10001A630(&qword_1008414C0);
  v206 = *(uint8_t **)(v205 - 8);
  __chkstk_darwin(v205);
  v195 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_10001A630(&qword_1008414C8);
  v208 = *(_QWORD **)(v207 - 8);
  __chkstk_darwin(v207);
  v199 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for REMNotifyPublisher(0);
  v180 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10001A630(&qword_1008414D0);
  v181 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_10001A630((uint64_t *)&unk_1008414D8);
  v165 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v13 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v14);
  v16 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_10001A630(&qword_1008414E8);
  v158 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v18 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_10001A630(&qword_1008414F0);
  v161 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v20 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_10001A630(&qword_1008414F8);
  v166 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v156 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_10001A630(&qword_100841500);
  v168 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v157 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_10001A630(&qword_100841508);
  v171 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v160 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_10001A630((uint64_t *)&unk_100841510);
  v172 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v162 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = v0;
  v213 = (_QWORD *)sub_100399F04(*(void **)(v0 + 24), 0xD000000000000022, 0x80000001006FD740, 0);
  v211 = *(_QWORD **)(v0 + 16);
  v25 = v211;
  v175 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v174 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56);
  v174(v16, 1, 1, v175);
  v26 = v25;
  v27 = sub_10001A630((uint64_t *)&unk_10083EF50);
  v28 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v210 = v28;
  v29 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v173 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v211, v16, v27, v28, v29, v173);
  sub_10000882C((uint64_t)v16, &qword_10083A970);

  swift_release(v213);
  v30 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v30, v214);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  v32 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v33 = objc_msgSend((id)swift_getObjCClassFromMetadata(v32), "cdEntityName");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *(_QWORD *)(inited + 32) = v34;
  *(_QWORD *)(inited + 40) = v36;
  v37 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
  v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "cdEntityName");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  *(_QWORD *)(inited + 48) = v39;
  *(_QWORD *)(inited + 56) = v41;
  v42 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
  v43 = objc_msgSend((id)swift_getObjCClassFromMetadata(v42), "cdEntityName");
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  *(_QWORD *)(inited + 64) = v44;
  *(_QWORD *)(inited + 72) = v46;
  v47 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 3, &type metadata for String);
  v48 = swift_allocObject(&unk_1007EA8F0, 24, 7);
  *(_QWORD *)(v48 + 16) = v47;
  swift_bridgeObjectRetain(v47);
  v49 = sub_10001A630((uint64_t *)&unk_10083DB60);
  v50 = sub_1000A5F84(&qword_100841520, &qword_1008414E8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v51 = v155;
  Publisher.map<A>(_:)(sub_100188E48, v48, v155, v49, v50);
  swift_release(v48);
  v52 = sub_1000A5F84(&qword_100841528, (uint64_t *)&unk_1008414D8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v53 = v163;
  Publisher.filter(_:)(sub_1000F27FC, 0, v163, v52);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v13, v53);
  v54 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v158 + 8))(v18, v51, v54);
  v55 = sub_1000A5F84(&qword_100841530, &qword_1008414F0, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v56 = v159;
  v57 = v156;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10022FB10, 0, 0, 0, 0, 0, 0, 0, v159, v55);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v20, v56);
  v58 = sub_1000A5F84((unint64_t *)&unk_100841538, &qword_1008414F8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v59 = v157;
  v60 = v164;
  Publisher.tryMap<A>(_:)(REMCDList.cleanUpAfterLocalObjectMerge(), 0, v164, &type metadata for () + 1, v58);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v57, v60);
  v61 = sub_10001A630((uint64_t *)&unk_10083AA20);
  v166 = v61;
  v62 = sub_1000A5F84(&qword_100841548, &qword_100841500, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v63 = v160;
  v64 = v167;
  Publisher.mapError<A>(_:)(sub_10022FBDC, 0, v167, v61, v62, &protocol self-conformance witness table for Error);
  (*(void (**)(char *, uint64_t))(v168 + 8))(v59, v64);
  v65 = sub_1000A5F84(&qword_100841550, &qword_100841508, (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  v66 = v162;
  v67 = v169;
  Publisher.replaceError(with:)(v65, v169, v65);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v63, v67);
  v68 = sub_1000A5F84(&qword_100841558, (uint64_t *)&unk_100841510, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v69 = v170;
  v70 = Publisher.eraseToAnyPublisher()(v170, v68);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v66, v69);
  v71 = sub_10022FBE8();
  v72 = v176;
  REMNotifyPublisher.init(name:accessQueue:)(0xD000000000000021, 0x80000001006F4E30, v71);
  v73 = sub_10009FC50(&qword_100841560, (uint64_t (*)(uint64_t))&type metadata accessor for REMNotifyPublisher, (uint64_t)&protocol conformance descriptor for REMNotifyPublisher);
  v74 = v178;
  v75 = v177;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10022FE3C, 0, 0, 0, 0, 0, 0, 0, v178, v73);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v72, v74);
  v76 = sub_1000A5F84(&qword_100841568, &qword_1008414D0, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v77 = v179;
  v78 = Publisher.eraseToAnyPublisher()(v179, v76);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v75, v77);
  v79 = sub_10001A630(&qword_100841570);
  v80 = swift_allocObject(v79, 48, 7);
  *(_OWORD *)(v80 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v80 + 32) = v70;
  *(_QWORD *)(v80 + 40) = v78;
  v213 = (_QWORD *)v80;
  specialized Array._endMutation()(v80);
  v81 = v213;
  v181 = v70;
  swift_retain();
  v180 = v78;
  swift_retain();
  v82 = sub_10001A630(&qword_100841578);
  v83 = sub_1000A5F84(&qword_100841580, &qword_100841578, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v84 = v182;
  Publishers.MergeMany.init(_:)(v81, v82, v83);
  v85 = v209;
  v213 = *(_QWORD **)(v209 + 16);
  v86 = v213;
  v87 = v175;
  v88 = v174;
  v174(v16, 1, 1, v175);
  v89 = sub_1000A5F84(&qword_100841588, &qword_100841490, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v90 = v86;
  v91 = v183;
  v92 = v184;
  v93 = v173;
  Publisher.receive<A>(on:options:)(&v213, v16, v184, v210, v89, v173);
  sub_10000882C((uint64_t)v16, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v186 + 8))(v84, v92);
  v94 = swift_allocObject(&unk_1007EA918, 24, 7);
  swift_weakInit(v94 + 16, v85);
  v95 = sub_1000A5F84(&qword_100841590, &qword_100841498, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v96 = v187;
  v97 = v185;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100233BD8, v94, 0, 0, 0, 0, 0, 0, v187, v95);
  swift_release(v94);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v91, v96);
  v98 = v191;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(60);
  v213 = *(_QWORD **)(v85 + 16);
  v99 = v213;
  v88(v16, 1, 1, v87);
  v100 = sub_1000A5F84(&qword_100841598, &qword_1008414A0, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v101 = v99;
  v102 = v188;
  v103 = v190;
  Publisher.debounce<A>(for:scheduler:options:)(v98, &v213, v16, v190, v210, v100, v93);
  sub_10000882C((uint64_t)v16, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v202 + 8))(v98, v204);
  (*(void (**)(char *, uint64_t))(v193 + 8))(v97, v103);
  v104 = swift_allocObject(&unk_1007EA918, 24, 7);
  swift_weakInit(v104 + 16, v85);
  v105 = sub_10001A630(&qword_1008415A0);
  v106 = sub_1000A5F84(&qword_1008415A8, &qword_1008414A8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v107 = v192;
  v108 = v196;
  Publisher.tryMap<A>(_:)(sub_100233BE0, v104, v196, v105, v106);
  swift_release(v104);
  (*(void (**)(char *, uint64_t))(v197 + 8))(v102, v108);
  v109 = sub_1000A5F84(&qword_1008415B0, &qword_1008414B0, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v110 = v194;
  v111 = v198;
  Publisher.mapError<A>(_:)(sub_100230604, 0, v198, v166, v109, &protocol self-conformance witness table for Error);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v107, v111);
  v213 = _swiftEmptyArrayStorage;
  v112 = sub_1000A5F84(&qword_1008415B8, &qword_1008414B8, (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  v113 = v195;
  v114 = v201;
  Publisher.replaceError(with:)(&v213, v201, v112);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v110, v114);
  v115 = swift_allocObject(&unk_1007EA918, 24, 7);
  swift_weakInit(v115 + 16, v85);
  v116 = sub_1000A5F84(&qword_1008415C0, &qword_1008414C0, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v117 = v205;
  v118 = v199;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100233BF8, v115, 0, 0, 0, 0, 0, 0, v205, v116);
  swift_release(v115);
  (*((void (**)(char *, uint64_t))v206 + 1))(v113, v117);
  v119 = sub_10001A630(&qword_1008415C8);
  v120 = sub_1000A5F84(&qword_1008415D0, &qword_1008414C8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v121 = sub_1000A5F84(&qword_1008415D8, &qword_1008415C8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v122 = v207;
  v123 = (_QWORD *)Publisher.multicast<A>(_:)(sub_100230988, 0, v207, v119, v120, v121);
  v124 = ((uint64_t (*)(char *, uint64_t))v208[1])(v118, v122);
  v125 = *(_QWORD *)(v85 + 32);
  v126 = *(_QWORD *)(v125 + 16);
  if (v126)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v85 + 32));
    v127 = 32;
    do
    {
      v128 = *(_QWORD *)(v125 + v127);
      v213 = v123;
      swift_unknownObjectRetain(v128);
      v129 = sub_10001A630(&qword_1008415E0);
      v130 = sub_1000A5F84(&qword_1008415E8, &qword_1008415E0, (uint64_t)&protocol conformance descriptor for Publishers.Multicast<A, B>);
      v131 = (void *)Publisher.eraseToAnyPublisher()(v129, v130);
      sub_1002397F0(v131);
      swift_unknownObjectRelease(v128);
      swift_release(v131);
      v127 += 16;
      --v126;
    }
    while (v126);
    swift_bridgeObjectRelease();
    v85 = v209;
  }
  Publishers.Multicast.connect()(&v213, v124);
  swift_beginAccess(v85 + 48, &v211, 33, 0);
  sub_100233C00((uint64_t)&v213, v85 + 48);
  swift_endAccess(&v211);
  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v132 = type metadata accessor for Logger(0);
  sub_10001AAA8(v132, (uint64_t)qword_1008413A0);
  v133 = swift_retain_n(v85);
  v134 = Logger.logObject.getter(v133);
  v135 = static os_log_type_t.default.getter(v134);
  if (os_log_type_enabled(v134, (os_log_type_t)v135))
  {
    LODWORD(v210) = v135;
    v136 = (uint8_t *)swift_slowAlloc(12, -1);
    v208 = (_QWORD *)swift_slowAlloc(32, -1);
    v213 = v208;
    *(_DWORD *)v136 = 136446210;
    v137 = *(_QWORD *)(v125 + 16);
    v138 = _swiftEmptyArrayStorage;
    if (v137)
    {
      v206 = v136;
      v207 = (uint64_t)v134;
      v211 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v125);
      sub_1001C1B0C(0, v137, 0);
      v139 = 32;
      v138 = v211;
      do
      {
        v140 = *(_QWORD *)(v125 + v139);
        v141 = *(_QWORD *)(v140 + 16);
        v142 = *(_QWORD *)(v140 + 24);
        v211 = v138;
        v144 = v138[2];
        v143 = v138[3];
        swift_bridgeObjectRetain(v142);
        if (v144 >= v143 >> 1)
        {
          sub_1001C1B0C(v143 > 1, v144 + 1, 1);
          v138 = v211;
        }
        v138[2] = v144 + 1;
        v145 = &v138[2 * v144];
        v145[4] = v141;
        v145[5] = v142;
        v139 += 16;
        --v137;
      }
      while (v137);
      swift_bridgeObjectRelease();
      v85 = v209;
      v134 = v207;
      v136 = v206;
    }
    v211 = v138;
    v147 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v148 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
    v149 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v147, v148);
    v151 = v150;
    swift_bridgeObjectRelease();
    v211 = (_QWORD *)sub_10001A820(v149, v151, (uint64_t *)&v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    swift_release_n(v85);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v210, "TimelineEngine started with processors: %{public}s", v136, 0xCu);
    v152 = v208;
    swift_arrayDestroy(v208, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v152, -1, -1);
    swift_slowDealloc(v136, -1, -1);
    swift_release(v181);
    swift_release(v180);

    v146 = v123;
  }
  else
  {

    swift_release(v123);
    swift_release_n(v85);
    swift_release(v180);
    v146 = (_QWORD *)v181;
  }
  return swift_release(v146);
}

void sub_10022F6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  v2 = sub_10001A630(&qword_1008415F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  v5 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v31 = (uint64_t)&v30 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_100841600);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 64);
  v34 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v35 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  v33 = _swiftEmptyArrayStorage;
  if (!v15)
    goto LABEL_7;
LABEL_4:
  v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v23)) + (v16 << 6))
  {
    v19 = *(_QWORD *)(a1 + 48);
    v20 = sub_10001A630((uint64_t *)&unk_100839C80);
    sub_10011D420(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * i, (uint64_t)v11);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)&v11[*(int *)(v9 + 48)] = v21;
    swift_bridgeObjectRetain(v21);
    sub_1002321E4((uint64_t)v11, v21, (uint64_t)v4);
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100841600);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v36) == 1)
    {
      sub_10000882C((uint64_t)v4, &qword_1008415F0);
      if (v15)
        goto LABEL_4;
    }
    else
    {
      v25 = v31;
      sub_1000B8680((uint64_t)v4, v31, type metadata accessor for RDTimelineEngineLocationReminder);
      sub_1000B8680(v25, v32, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
        v33 = (_QWORD *)sub_1002CA08C(0, v33[2] + 1, 1, (unint64_t)v33);
      v27 = v33[2];
      v26 = v33[3];
      if (v27 >= v26 >> 1)
        v33 = (_QWORD *)sub_1002CA08C(v26 > 1, v27 + 1, 1, (unint64_t)v33);
      v28 = v32;
      v29 = v33;
      v33[2] = v27 + 1;
      sub_1000B8680(v28, (uint64_t)v29+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v27, type metadata accessor for RDTimelineEngineLocationReminder);
      if (v15)
        goto LABEL_4;
    }
LABEL_7:
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v22 >= v35)
      goto LABEL_29;
    v23 = *(_QWORD *)(v34 + 8 * v22);
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_29;
      v23 = *(_QWORD *)(v34 + 8 * v16);
      if (!v23)
      {
        v16 = v22 + 2;
        if (v22 + 2 >= v35)
          goto LABEL_29;
        v23 = *(_QWORD *)(v34 + 8 * v16);
        if (!v23)
        {
          v16 = v22 + 3;
          if (v22 + 3 >= v35)
            goto LABEL_29;
          v23 = *(_QWORD *)(v34 + 8 * v16);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v15 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v35)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v23 = *(_QWORD *)(v34 + 8 * v24);
  if (v23)
  {
    v16 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v35)
      goto LABEL_29;
    v23 = *(_QWORD *)(v34 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10022FA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008413A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008413A0);
  if (qword_100837660 != -1)
    swift_once(&qword_100837660, sub_1004A18FC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872100);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10022FB10()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008413A0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "TimelineEngine storeDidChangePublisher triggered", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_10022FBDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100230610(a1, "TimelineEngine could not handle database changes because %s", a2);
}

uint64_t sub_10022FBE8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v25 = *(_QWORD *)(v0 - 8);
  v26 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v27 = (_QWORD *)type metadata accessor for REMNotifyPublisher(0);
  v13 = sub_10001A630((uint64_t *)&unk_100841650);
  v14 = String.init<A>(reflecting:)(&v27, v13);
  v23 = v15;
  v24 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v16 = static OS_dispatch_queue.global(qos:)(v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v17);
  v27 = _swiftEmptyArrayStorage;
  v18 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v3, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v24, v23, v8, v5, v2, v16);
}

void sub_10022FE3C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008413A0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "TimelineEngine significantTimeChangedPublisher triggered", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_10022FF08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  _BYTE v18[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    return result;
  v8 = result;
  v9 = *(void **)(result + 16);
  *v6 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (qword_100837018 != -1)
LABEL_9:
    swift_once(&qword_100837018, sub_10022FA80);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_1008413A0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "TimelineEngine will go through debouncer", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(_BYTE *)(v8 + 96);
  *(_BYTE *)(v8 + 96) = 1;
  sub_1002309C0(v16);
  return swift_release(v8);
}

void sub_1002300B0(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *Strong;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  char v62[16];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;

  v3 = v2;
  v6 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RDTimelineEngineDueReminder(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for RDTimelineEngineReminder(0);
  v56 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - v17;
  a1 += 16;
  swift_beginAccess(a1, v57, 0, 0);
  Strong = (_QWORD *)swift_weakLoadStrong(a1);
  v20 = _swiftEmptyArrayStorage;
  if (Strong)
  {
    v21 = Strong;
    v53 = v9;
    v22 = *Strong;
    v52 = xmmword_1006B0660;
    v64 = xmmword_1006B0660;
    v66 = 0;
    v67[0] = 0;
    v65 = 0;
    *(_QWORD *)((char *)v67 + 6) = 0;
    v63 = v22;
    sub_100355208((uint64_t)&v64, (uint64_t)sub_100233C84, (uint64_t)v62);
    if (v2)
    {
      swift_release(v21);
      return;
    }
    v47 = v7;
    v54 = v15;
    v51 = v21;
    v49 = a2;
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v50 = 0;
      *(_QWORD *)&v64 = _swiftEmptyArrayStorage;
      v25 = v23;
      sub_1001C216C(0, v24, 0);
      v26 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v48 = v25;
      v27 = v25 + v26;
      v28 = *(_QWORD *)(v11 + 72);
      v55 = v28;
      do
      {
        sub_1000151E8(v27, (uint64_t)v13, type metadata accessor for RDTimelineEngineDueReminder);
        sub_1000151E8((uint64_t)v13, (uint64_t)v18, type metadata accessor for RDTimelineEngineDueReminder);
        swift_storeEnumTagMultiPayload(v18, v68, 0);
        sub_10001C744((uint64_t)v13, type metadata accessor for RDTimelineEngineDueReminder);
        v29 = (_QWORD *)v64;
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        {
          sub_1001C216C(0, v29[2] + 1, 1);
          v28 = v55;
          v29 = (_QWORD *)v64;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_1001C216C(v30 > 1, v31 + 1, 1);
          v28 = v55;
          v29 = (_QWORD *)v64;
        }
        v29[2] = v31 + 1;
        sub_1000B8680((uint64_t)v18, (uint64_t)v29+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v31, type metadata accessor for RDTimelineEngineReminder);
        v27 += v28;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      v3 = v50;
    }
    else
    {
      swift_bridgeObjectRelease();
      v29 = _swiftEmptyArrayStorage;
    }
    v32 = v51;
    v58 = v52;
    v60 = 0;
    v61[0] = 0;
    v59 = 0;
    *(_QWORD *)((char *)v61 + 6) = 0;
    sub_10035562C((uint64_t)&v58, (uint64_t)sub_100231FF0, 0);
    if (v3)
    {
      swift_release(v32);
      swift_bridgeObjectRelease();
      return;
    }
    v34 = v33;
    v35 = *(_QWORD *)(v33 + 16);
    if (v35)
    {
      v50 = 0;
      *(_QWORD *)&v64 = _swiftEmptyArrayStorage;
      sub_1001C216C(0, v35, 0);
      v36 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      v55 = v34;
      v37 = v34 + v36;
      v38 = *(_QWORD *)(v47 + 72);
      v39 = (uint64_t)v53;
      v40 = (uint64_t)v54;
      do
      {
        sub_1000151E8(v37, v39, type metadata accessor for RDTimelineEngineLocationReminder);
        sub_1000151E8(v39, v40, type metadata accessor for RDTimelineEngineLocationReminder);
        swift_storeEnumTagMultiPayload(v40, v68, 1);
        sub_10001C744(v39, type metadata accessor for RDTimelineEngineLocationReminder);
        v41 = (_QWORD *)v64;
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        {
          sub_1001C216C(0, v41[2] + 1, 1);
          v39 = (uint64_t)v53;
          v41 = (_QWORD *)v64;
        }
        v43 = v41[2];
        v42 = v41[3];
        if (v43 >= v42 >> 1)
        {
          sub_1001C216C(v42 > 1, v43 + 1, 1);
          v39 = (uint64_t)v53;
          v41 = (_QWORD *)v64;
        }
        v41[2] = v43 + 1;
        v44 = (uint64_t)v41
            + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))
            + *(_QWORD *)(v56 + 72) * v43;
        v40 = (uint64_t)v54;
        sub_1000B8680((uint64_t)v54, v44, type metadata accessor for RDTimelineEngineReminder);
        v37 += v38;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v41 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)&v64 = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v41);
    sub_1001E2D00(v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v51);
    v20 = (_QWORD *)v64;
    a2 = v49;
  }
  *a2 = v20;
}

uint64_t sub_100230604@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100230610(a1, "TimelineEngine could not fetch reminders because %s", a2);
}

uint64_t sub_100230610@<X0>(uint64_t *a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = *a1;
  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_1008413A0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v5;
    v17 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_errorRetain(v5);
    v12 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v13 = String.init<A>(describing:)(&v16, v12);
    v16 = sub_10001A820(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a2, v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  *a3 = v5;
  return swift_errorRetain(v5);
}

uint64_t sub_1002307E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  _BYTE v18[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    return result;
  v8 = result;
  v9 = *(void **)(result + 16);
  *v6 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (qword_100837018 != -1)
LABEL_9:
    swift_once(&qword_100837018, sub_10022FA80);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_1008413A0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "TimelineEngine is now going to multicast event to processors", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(_BYTE *)(v8 + 96);
  *(_BYTE *)(v8 + 96) = 0;
  sub_1002309C0(v16);
  return swift_release(v8);
}

uint64_t sub_100230988()
{
  uint64_t v0;

  v0 = sub_10001A630(&qword_1008415C8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return PassthroughSubject.init()();
}

void sub_1002309C0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *oslog;

  if (*(_BYTE *)(v1 + 96) != (a1 & 1))
  {
    v2 = v1;
    if (*(_BYTE *)(v1 + 96))
    {
      v3 = os_transaction_create("com.apple.remindd.RDTimelineEngine.debouncingEvents");
      v4 = *(_QWORD *)(v1 + 88);
      *(_QWORD *)(v1 + 88) = v3;
      swift_unknownObjectRelease(v4);
      if (qword_100837018 != -1)
        swift_once(&qword_100837018, sub_10022FA80);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_10001AAA8(v5, (uint64_t)qword_1008413A0);
      oslog = Logger.logObject.getter(v6);
      v7 = static os_log_type_t.default.getter(oslog);
      if (os_log_type_enabled(oslog, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v7, "os_transaction INIT {name: com.apple.remindd.RDTimelineEngine.debouncingEvents}", v8, 2u);
        swift_slowDealloc(v8, -1, -1);
      }

    }
    else
    {
      if (qword_100837018 != -1)
        swift_once(&qword_100837018, sub_10022FA80);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001AAA8(v9, (uint64_t)qword_1008413A0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction RELEASE {name: com.apple.remindd.RDTimelineEngine.debouncingEvents}", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      v14 = *(_QWORD *)(v2 + 88);
      *(_QWORD *)(v2 + 88) = 0;
      swift_unknownObjectRelease(v14);
    }
  }
}

void sub_100230BA4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Class isa;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  Class v47;
  void *v48;
  uint64_t v49;
  id v50;
  Class v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v76;
  Swift::String v77;
  id v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91[48];
  uint64_t i;
  uint64_t v93;
  unint64_t v94;
  char v95[80];
  _QWORD *v96;

  v88 = a2;
  v82 = a1;
  v79 = a3;
  v3 = sub_10001A630(&qword_1008415F8);
  __chkstk_darwin(v3);
  v90 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RDTimelineEngineDueReminder(0);
  v89 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v85 = (uint64_t)&v78 - v7;
  v80 = _s10PredicatesOMa(0);
  __chkstk_darwin(v80);
  v81 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v84, v95);
  *(_OWORD *)(inited + 16) = xmmword_1006B0670;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B0710);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006B0748);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006B0788);
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1006B07B8);
  KeyPath = swift_getKeyPath(&unk_1006B07F0);
  *(_QWORD *)(inited + 64) = KeyPath;
  v93 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = v93;
  v96 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 5, 0);
  v12 = 0;
  v13 = (uint64_t)v96;
  do
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v11);
      v15 = v14;
    }
    else
    {
      v15 = *(_QWORD *)(v11 + 8 * v12 + 32);
      v14 = swift_retain();
    }
    v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v14);
    if (!v17)
      goto LABEL_60;
    v18 = v16;
    v19 = v17;
    swift_release(v15);
    v96 = (_QWORD *)v13;
    v21 = *(_QWORD *)(v13 + 16);
    v20 = *(_QWORD *)(v13 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_1001C1B0C(v20 > 1, v21 + 1, 1);
      v13 = (uint64_t)v96;
    }
    ++v12;
    *(_QWORD *)(v13 + 16) = v21 + 1;
    v22 = v13 + 16 * v21;
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v19;
  }
  while (v12 != 5);
  swift_bridgeObjectRelease();
  v23 = swift_initStackObject(v84, v91);
  *(_OWORD *)(v23 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v23 + 32) = swift_getKeyPath(&unk_1006B0820);
  v24 = swift_getKeyPath(&unk_1006B0858);
  *(_QWORD *)(v23 + 40) = v24;
  v93 = v23;
  specialized Array._endMutation()(v24);
  v25 = v93;
  v26 = objc_msgSend((id)objc_opt_self(REMCDReminder), "fetchRequest");
  objc_msgSend(v26, "setResultType:", 0);
  v27 = (uint64_t)v81;
  swift_storeEnumTagMultiPayload(v81, v80, 65);
  sub_10000D2C0();
  v29 = v28;
  sub_10001C744(v27, _s10PredicatesOMa);
  objc_msgSend(v26, "setPredicate:", v29);

  objc_msgSend(v26, "setReturnsDistinctResults:", 0);
  sub_1001DFBD0(v13);
  swift_release(v13);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v96 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 2, 0);
  v31 = v96;
  if ((v25 & 0xC000000000000001) != 0)
  {
    v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    v12 = v32;
  }
  else
  {
    v12 = *(_QWORD *)(v25 + 32);
    v32 = swift_retain();
  }
  v33 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v32);
  if (!v34)
    goto LABEL_62;
  v35 = v33;
  v36 = v34;
  swift_release(v12);
  v38 = v31[2];
  v37 = v31[3];
  if (v38 >= v37 >> 1)
  {
    sub_1001C1B0C(v37 > 1, v38 + 1, 1);
    v31 = v96;
  }
  v31[2] = v38 + 1;
  v39 = &v31[2 * v38];
  v39[4] = v35;
  v39[5] = v36;
  if ((v25 & 0xC000000000000001) != 0)
  {
    v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v25);
    v12 = v40;
  }
  else
  {
    v12 = *(_QWORD *)(v25 + 40);
    v40 = swift_retain();
  }
  v41 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v40);
  if (!v42)
    goto LABEL_62;
  v15 = v41;
  v43 = v42;
  swift_release(v12);
  v96 = v31;
  v45 = v31[2];
  v44 = v31[3];
  v12 = v45 + 1;
  if (v45 >= v44 >> 1)
  {
    sub_1001C1B0C(v44 > 1, v45 + 1, 1);
    v31 = v96;
  }
  v31[2] = v12;
  v46 = &v31[2 * v45];
  v46[4] = v15;
  v46[5] = v43;
  swift_bridgeObjectRelease();
  v47 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v31);
  objc_msgSend(v26, "setRelationshipKeyPathsForPrefetching:", v47);

  if (qword_100837248 != -1)
    swift_once(&qword_100837248, sub_10033CF30);
  v48 = (void *)qword_100871E30;
  if (qword_100871E30)
  {
    v49 = swift_allocObject(v84, 40, 7);
    *(_OWORD *)(v49 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v49 + 32) = v48;
    v93 = v49;
    specialized Array._endMutation()(v49);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v50 = v48;
    v51 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "setSortDescriptors:", v51, swift_bridgeObjectRelease().n128_f64[0]);

  }
  v52 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v53 = v83;
  v54 = NSManagedObjectContext.fetch<A>(_:)(v26, v52);
  if (v53)
  {

  }
  else
  {
    v55 = v54;
    v84 = (unint64_t)v54 >> 62;
    if ((unint64_t)v54 >> 62)
    {
      if (v54 < 0)
        v74 = v54;
      else
        v74 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v54);
      v56 = _CocoaArrayWrapper.endIndex.getter(v74);
    }
    else
    {
      v56 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v54);
    }
    v57 = (uint64_t)v90;
    v78 = v26;
    if (v56)
    {
      if (v56 < 1)
      {
        __break(1u);
LABEL_60:
        v93 = 0;
        v94 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v75._object = (void *)0x80000001006F8C10;
        v75._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v75);
        for (i = v15; ; i = v12)
        {
          v76 = sub_10001A630((uint64_t *)&unk_10083AEC0);
          _print_unlocked<A, B>(_:_:)(&i, &v93, v76, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v93, v94, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
          __break(1u);
LABEL_62:
          v93 = 0;
          v94 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v77._object = (void *)0x80000001006F8C10;
          v77._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v77);
        }
      }
      v58 = 0;
      v59 = _swiftEmptyArrayStorage;
      do
      {
        if ((v55 & 0xC000000000000001) != 0)
          v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v55);
        else
          v60 = *(id *)(v55 + 8 * v58 + 32);
        v61 = v60;
        sub_100231658(v60, v57);
        v57 = (uint64_t)v90;

        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v57, 1, v87) == 1)
        {
          sub_10000882C(v57, &qword_1008415F8);
        }
        else
        {
          v62 = v57;
          v63 = v85;
          sub_1000B8680(v62, v85, type metadata accessor for RDTimelineEngineDueReminder);
          sub_1000B8680(v63, v86, type metadata accessor for RDTimelineEngineDueReminder);
          if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
            v59 = (_QWORD *)sub_1002CA078(0, v59[2] + 1, 1, (unint64_t)v59);
          v65 = v59[2];
          v64 = v59[3];
          if (v65 >= v64 >> 1)
            v59 = (_QWORD *)sub_1002CA078(v64 > 1, v65 + 1, 1, (unint64_t)v59);
          v59[2] = v65 + 1;
          sub_1000B8680(v86, (uint64_t)v59+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(_QWORD *)(v89 + 72) * v65, type metadata accessor for RDTimelineEngineDueReminder);
          v57 = (uint64_t)v90;
        }
        ++v58;
      }
      while (v56 != v58);
    }
    else
    {
      v59 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    if (qword_100837018 != -1)
      swift_once(&qword_100837018, sub_10022FA80);
    v66 = type metadata accessor for Logger(0);
    sub_10001AAA8(v66, (uint64_t)qword_1008413A0);
    swift_bridgeObjectRetain_n(v59, 2);
    swift_bridgeObjectRetain(v55);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc(22, -1);
      *(_DWORD *)v70 = 134218240;
      if (v84)
      {
        if (v55 < 0)
          v72 = v55;
        else
          v72 = v55 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v55);
        v71 = _CocoaArrayWrapper.endIndex.getter(v72);
        swift_bridgeObjectRelease();
      }
      else
      {
        v71 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v93 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2048;
      v73 = v59[2];
      swift_bridgeObjectRelease();
      v93 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "TimelineEngine fetched %ld DUE reminders and returning %ld", (uint8_t *)v70, 0x16u);
      swift_slowDealloc(v70, -1, -1);

      *v79 = v59;
    }
    else
    {

      swift_bridgeObjectRelease_n(v55, 2);
      swift_bridgeObjectRelease_n(v59, 2);
      *v79 = v59;
    }
  }
}

uint64_t sub_100231658@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  id v44;
  void *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  id v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  void *v58;
  Class isa;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  int v68;
  id v69;
  __n128 v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned __int8 v96;
  void (*v97)(char *, uint64_t);
  int *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, char *, uint64_t);
  void (*v102)(uint64_t, char *, uint64_t);
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;

  v4 = type metadata accessor for Logger(0);
  v106 = *(_QWORD *)(v4 - 8);
  v107 = v4;
  __chkstk_darwin(v4);
  v105 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v6);
  v109 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DateComponents(0);
  v8 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v108 = (char *)&v100 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v100 - v17;
  v114 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v111 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v113 = (char *)&v100 - v21;
  __chkstk_darwin(v22);
  v112 = (char *)&v100 - v23;
  v24 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v24);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v100 - v28;
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v104 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v34 = __chkstk_darwin(v33).n128_u64[0];
  v115 = (char *)&v100 - v35;
  v117 = a1;
  v36 = objc_msgSend(a1, "list", v34);
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
LABEL_7:
    v41 = (uint64_t *)&unk_100839C80;
LABEL_8:
    sub_10000882C((uint64_t)v29, v41);
LABEL_24:
    v87 = type metadata accessor for RDTimelineEngineDueReminder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(a2, 1, 1, v87);
  }
  v37 = v36;
  v118 = a2;
  v38 = objc_msgSend(v36, "identifier");

  if (v38)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v26, v39, 1, v30);
  sub_1000A5CA8((uint64_t)v26, (uint64_t)v29, (uint64_t *)&unk_100839C80);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  a2 = v118;
  if (v40 == 1)
    goto LABEL_7;
  v42 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v43 = v115;
  v42(v115, v29, v30);
  v44 = objc_msgSend(v117, "displayDateDate");
  if (!v44)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v18, 1, 1, v114);
    goto LABEL_20;
  }
  v45 = v44;
  v102 = (void (*)(uint64_t, char *, uint64_t))v42;
  v103 = v8;
  v46 = v113;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

  v47 = v116;
  v48 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
  v49 = v114;
  v48(v18, v46, v114);
  v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v50(v18, 0, 1, v49);
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v51(v18, 1, v49) == 1)
  {
LABEL_20:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v30);
    v86 = (uint64_t)v18;
LABEL_23:
    sub_10000882C(v86, (uint64_t *)&unk_1008380D0);
    a2 = v118;
    goto LABEL_24;
  }
  v48(v112, v18, v49);
  v52 = objc_msgSend(v117, "dueDate");
  v53 = v49;
  if (!v52)
  {
    v50(v15, 1, 1, v49);
    goto LABEL_22;
  }
  v54 = v52;
  v55 = v113;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

  v56 = v55;
  v43 = v115;
  v48(v15, v56, v53);
  v50(v15, 0, 1, v53);
  if (v51(v15, 1, v53) == 1)
  {
LABEL_22:
    (*(void (**)(char *, uint64_t))(v116 + 8))(v112, v53);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v30);
    v86 = (uint64_t)v15;
    goto LABEL_23;
  }
  v57 = v111;
  v101 = (void (*)(uint64_t, char *, uint64_t))v48;
  v48(v111, v15, v53);
  v58 = (void *)objc_opt_self(REMCDReminder);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v60 = v117;
  v61 = objc_msgSend(v117, "displayDateIsAllDay");
  v62 = objc_msgSend(v60, "timeZone");
  v63 = objc_msgSend(v58, "dueDateComponentsWithDueDate:isAllDay:timeZoneName:", isa, v61, v62);

  if (!v63)
  {
    v29 = v109;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v109, 1, 1, v110);
    a2 = v118;
    goto LABEL_26;
  }
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v63);

  v64 = v103;
  v65 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
  v29 = v109;
  v66 = v10;
  v67 = v110;
  v65(v109, v66, v110);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v29, 0, 1, v67);
  v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v29, 1, v67);
  a2 = v118;
  if (v68 == 1)
  {
LABEL_26:
    v89 = *(void (**)(char *, uint64_t))(v116 + 8);
    v90 = v114;
    v89(v57, v114);
    v89(v112, v90);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v115, v30);
    v41 = (uint64_t *)&unk_100841610;
    goto LABEL_8;
  }
  v109 = (char *)v65;
  v65(v108, v29, v67);
  v69 = objc_msgSend(v117, "recurrenceRules");
  if (v69)
  {
    v71 = v69;
    v119 = (uint64_t)v69;
    v72 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    v73 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    v74 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v75 = Sequence.elements<A>(ofType:)(v72, v73, v72, v74);

    v76 = v115;
    if (qword_100837018 != -1)
      swift_once(&qword_100837018, sub_10022FA80);
    v77 = v107;
    v78 = sub_10001AAA8(v107, (uint64_t)qword_1008413A0);
    v79 = v105;
    v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v78, v77);
    v119 = v75;
    __chkstk_darwin(v80);
    *(&v100 - 2) = (uint64_t)v79;
    v81 = sub_10001A630(&qword_100851BE0);
    v82 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v83 = sub_1000A5F84(&qword_100841310, &qword_100851BE0, (uint64_t)&protocol conformance descriptor for [A]);
    v84 = Sequence.map<A>(skippingError:_:)(sub_100233CEC, &v100 - 4, sub_10021F4EC, 0, v81, v82, v83);
    v67 = v110;
    v85 = v114;
    v103 = v84;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
    v70 = swift_bridgeObjectRelease();
  }
  else
  {
    v103 = 0;
    v85 = v114;
    v76 = v115;
  }
  v91 = v104;
  (*(void (**)(char *, char *, uint64_t, __n128))(v31 + 16))(v104, v76, v30, v70);
  v92 = v116;
  v94 = v112;
  v93 = v113;
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v113, v112, v85);
  v95 = v85;
  v96 = objc_msgSend(v117, "displayDateIsAllDay");
  v97 = *(void (**)(char *, uint64_t))(v92 + 8);
  v97(v111, v95);
  v97(v94, v95);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v76, v30);
  v98 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
  v99 = v118;
  ((void (*)(uint64_t, char *, uint64_t))v109)(v118 + v98[7], v108, v67);
  v102(v99, v91, v30);
  v101(v99 + v98[5], v93, v95);
  *(_BYTE *)(v99 + v98[6]) = v96;
  *(_QWORD *)(v99 + v98[8]) = v103;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v98 - 1) + 56))(v99, 0, 1, v98);
}

void sub_100231FF0(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_10034FA6C(a1);
  if (!v2)
  {
    v5 = v4;
    sub_10022F6C4((uint64_t)v4);
    v7 = v6;
    if (qword_100837018 != -1)
      swift_once(&qword_100837018, sub_10022FA80);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_1008413A0);
    swift_bridgeObjectRetain(v5);
    v9 = swift_bridgeObjectRetain_n(v7, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 134218496;
      v16 = v5[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      *(_WORD *)(v12 + 12) = 2048;
      v15 = a2;
      v13 = v5[2];
      swift_bridgeObjectRelease();
      v16 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2048;
      v14 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      v16 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "TimelineEngine fetched (keys: %ld, values: %ld) LOCATION reminders and returning %ld", (uint8_t *)v12, 0x20u);
      swift_slowDealloc(v12, -1, -1);

      *v15 = v7;
    }
    else
    {

      swift_bridgeObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease_n(v7, 2);
      *a2 = v7;
    }
  }
}

uint64_t sub_1002321E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  __n128 v29;
  id v30;
  void *v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  v6 = sub_10001A630(&qword_1008415F0);
  __chkstk_darwin(v6);
  v47 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - v9;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v46 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v48 = (char *)&v35 - v18;
  sub_10011D420(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v48, v13, v14);
    v26 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v27(v10, 1, 1, v26);
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v33 = a2;
      else
        v33 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v28 = _CocoaArrayWrapper.endIndex.getter(v33);
      if (v28)
        goto LABEL_9;
    }
    else
    {
      v28 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v29 = swift_bridgeObjectRetain(a2);
      if (v28)
      {
LABEL_9:
        v35 = v27;
        v36 = v26;
        v37 = v10;
        v38 = a3;
        v45 = a2 & 0xC000000000000001;
        v42 = &v49;
        v29.n128_u64[0] = 136315138;
        v41 = v29;
        v39 = v15;
        v40 = (char *)&type metadata for Any + 8;
        v43 = v28;
        v44 = a2;
        if ((a2 & 0xC000000000000001) != 0)
          v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        else
          v30 = *(id *)(a2 + 32);
        v31 = v30;
        sub_1002327A8(v30, v47);
        swift_bridgeObjectRelease();

        v10 = v37;
        sub_10000882C((uint64_t)v37, &qword_1008415F0);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v48, v14);
        v32 = v47;
        v35(v47, 0, 1, v36);
        sub_1000A5CA8((uint64_t)v32, (uint64_t)v10, &qword_1008415F0);
        a3 = v38;
        return sub_1000A5CA8((uint64_t)v10, a3, &qword_1008415F0);
      }
    }
    v34 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v48, v14, v34);
    return sub_1000A5CA8((uint64_t)v10, a3, &qword_1008415F0);
  }
  sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001AAA8(v19, (uint64_t)qword_1008413A0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "TimelineEngine fetched some location triggers with nil reminder identifier", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a3, 1, 1, v24);
}

uint64_t sub_1002327A8@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t ObjCClassFromMetadata;
  NSString v32;
  uint64_t v33;
  uint64_t result;
  int v35;
  char *v36;
  uint64_t v37;
  id v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  uint64_t v44;
  char *v45;
  double v46;
  uint64_t v47;
  id v48;
  double v49;
  uint64_t v50;
  id v51;
  double v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  id v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __n128 v79;
  void (*v80)(char *, uint64_t, __n128);
  char *v81;
  uint64_t v82;
  unint64_t v83;
  __n128 v84;
  os_log_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t (*v89)(uint64_t, char *, uint64_t);
  uint64_t v90;
  char *v91;
  int v92;
  os_log_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  double v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105[3];
  uint64_t v106;

  v97 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v91 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v98 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v99 = (char *)&v91 - v13;
  __chkstk_darwin(v14);
  v100 = (char *)&v91 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v91 - v17;
  *(_QWORD *)&v103 = 0xD000000000000019;
  *((_QWORD *)&v103 + 1) = 0x80000001006F4F50;
  v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v20 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v19);
  swift_unknownObjectRelease(v19);
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v20);
    swift_unknownObjectRelease(v20);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  if (!v106)
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_9;
  }
  v101 = v18;
  v21 = swift_dynamicCast(v8, v105, (char *)&type metadata for Any + 8, v9, 6);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v22(v8, v21 ^ 1u, 1, v9);
  v23 = v10;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v24(v8, 1, v9) == 1)
  {
LABEL_9:
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
    v29 = (void *)objc_opt_self(REMError);
    v30 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v30);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v32);

    return swift_willThrow(v33);
  }
  v96 = v23;
  v25 = v8;
  v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v26(v101, v25, v9);
  *(_QWORD *)&v103 = 0xD00000000000001ELL;
  *((_QWORD *)&v103 + 1) = 0x80000001006FD7B0;
  v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v28 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v27);
  swift_unknownObjectRelease(v27);
  if (v28)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v28);
    swift_unknownObjectRelease(v28);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  if (!v106)
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
    v22(v5, 1, 1, v9);
    goto LABEL_16;
  }
  v35 = swift_dynamicCast(v5, v105, (char *)&type metadata for Any + 8, v9, 6);
  v22(v5, v35 ^ 1u, 1, v9);
  if (v24(v5, 1, v9) == 1)
  {
LABEL_16:
    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
    v40 = (void *)objc_opt_self(REMError);
    v41 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v42 = swift_getObjCClassFromMetadata(v41);
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "unexpectedNilPropertyWithClass:property:", v42, v43);

    swift_willThrow(v44);
    return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v101, v9);
  }
  v36 = v100;
  v26(v100, v5, v9);
  *(_QWORD *)&v103 = 0x656475746974616CLL;
  *((_QWORD *)&v103 + 1) = 0xE800000000000000;
  v37 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v38 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v37);
  swift_unknownObjectRelease(v37);
  v39 = v101;
  if (v38)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v38);
    swift_unknownObjectRelease(v38);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  v45 = v99;
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  if (!v106)
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
    goto LABEL_37;
  }
  if ((swift_dynamicCast(&v102, v105, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) == 0)
    goto LABEL_37;
  v46 = v102;
  *(_QWORD *)&v103 = 0x64757469676E6F6CLL;
  *((_QWORD *)&v103 + 1) = 0xE900000000000065;
  v47 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v48 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v47);
  swift_unknownObjectRelease(v47);
  if (v48)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v48);
    swift_unknownObjectRelease(v48);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  if (!v106)
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
    goto LABEL_37;
  }
  if ((swift_dynamicCast(&v102, v105, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) == 0)
    goto LABEL_37;
  v49 = v102;
  *(_QWORD *)&v103 = 0x737569646172;
  *((_QWORD *)&v103 + 1) = 0xE600000000000000;
  v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v51 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v50);
  swift_unknownObjectRelease(v50);
  if (v51)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v51);
    swift_unknownObjectRelease(v51);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  if (!v106)
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
    goto LABEL_37;
  }
  if ((swift_dynamicCast(&v102, v105, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) == 0)
  {
LABEL_37:
    v55 = (void *)objc_opt_self(REMError);
    v56 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v57 = swift_getObjCClassFromMetadata(v56);
    v58 = String._bridgeToObjectiveC()();
    objc_msgSend(v55, "unexpectedNilPropertyWithClass:property:", v57, v58);

    swift_willThrow(v59);
    v60 = *(void (**)(char *, uint64_t))(v96 + 8);
    v60(v36, v9);
    return ((uint64_t (*)(char *, uint64_t))v60)(v39, v9);
  }
  v52 = v102;
  *(_QWORD *)&v103 = 0x6E6F697461636F6CLL;
  *((_QWORD *)&v103 + 1) = 0xEB00000000444955;
  v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v103, &type metadata for String);
  v54 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v53);
  swift_unknownObjectRelease(v53);
  if (v54)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v54);
    swift_unknownObjectRelease(v54);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  v95 = v26;
  if (v106)
  {
    if ((swift_dynamicCast(&v102, v105, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      goto LABEL_44;
  }
  else
  {
    sub_10000882C((uint64_t)v105, (uint64_t *)&unk_10083D5B0);
  }
  v105[0] = 0;
  v105[1] = 0xE000000000000000;
  Double.write<A>(to:)(v105, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  Double.write<A>(to:)(v105, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  Double.write<A>(to:)(v105, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
LABEL_44:
  v61 = objc_allocWithZone((Class)CLCircularRegion);
  v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v63 = objc_msgSend(v61, "initWithCenter:radius:identifier:", v62, v46, v49, v52);

  if (qword_100837018 != -1)
    swift_once(&qword_100837018, sub_10022FA80);
  v64 = type metadata accessor for Logger(0);
  sub_10001AAA8(v64, (uint64_t)qword_1008413A0);
  v65 = v96;
  v66 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v66(v45, v39, v9);
  v67 = v98;
  v66(v98, v36, v9);
  v68 = (char *)v63;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.debug.getter();
  v71 = v70;
  v72 = os_log_type_enabled(v69, v70);
  v99 = v68;
  if (v72)
  {
    v73 = swift_slowAlloc(32, -1);
    v94 = swift_slowAlloc(96, -1);
    v105[0] = v94;
    *(_DWORD *)v73 = 136315650;
    v93 = v69;
    v92 = v71;
    v74 = CLRegion.stringRepresentation.getter();
    *(_QWORD *)&v103 = sub_10001A820(v74, v75, v105);
    v91 = (char *)&v103 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, (char *)&v103 + 8);

    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 12) = 2080;
    v76 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v77 = dispatch thunk of CustomStringConvertible.description.getter(v9, v76);
    *(_QWORD *)&v103 = sub_10001A820(v77, v78, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, (char *)&v103 + 8);
    v79 = swift_bridgeObjectRelease();
    v80 = *(void (**)(char *, uint64_t, __n128))(v65 + 8);
    v80(v45, v9, v79);
    *(_WORD *)(v73 + 22) = 2080;
    v36 = v100;
    v81 = v98;
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v9, v76);
    *(_QWORD *)&v103 = sub_10001A820(v82, v83, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v91);
    v84 = swift_bridgeObjectRelease();
    v80(v81, v9, v84);
    v85 = v93;
    _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v92, "TimelineEngine: Converted fetched dictionary to RDTimelineEngineLocationReminder {region: %s, reminder: %s, list: %s}", (uint8_t *)v73, 0x20u);
    v86 = v94;
    swift_arrayDestroy(v94, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v73, -1, -1);

  }
  else
  {

    v87 = *(void (**)(char *, uint64_t))(v65 + 8);
    v87(v45, v9);
    v87(v67, v9);

  }
  v88 = v97;
  v89 = (uint64_t (*)(uint64_t, char *, uint64_t))v95;
  v95(v97, v36, v9);
  v90 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  result = v89((uint64_t)&v88[*(int *)(v90 + 20)], v39, v9);
  *(_QWORD *)&v88[*(int *)(v90 + 24)] = v99;
  return result;
}

uint64_t sub_1002334D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_10000882C(v0 + 48, &qword_100841488);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 97, 7);
}

uint64_t type metadata accessor for RDTimelineEngine()
{
  return objc_opt_self(_TtC7remindd16RDTimelineEngine);
}

_QWORD *sub_100233540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_10001A630(&qword_1008415F8);
  __chkstk_darwin(v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RDTimelineEngineDueReminder(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v28 = (uint64_t)v24 - v10;
  v30 = type metadata accessor for RDTimelineEngineReminder(0);
  __chkstk_darwin(v30);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return _swiftEmptyArrayStorage;
  v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v29 = *(_QWORD *)(v14 + 72);
  v24[1] = a1;
  swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  v26 = v8;
  v27 = v5;
  v25 = v6;
  do
  {
    sub_1000151E8(v18, (uint64_t)v16, type metadata accessor for RDTimelineEngineReminder);
    sub_1000151E8((uint64_t)v16, (uint64_t)v12, type metadata accessor for RDTimelineEngineReminder);
    if (swift_getEnumCaseMultiPayload(v12, v30) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
      sub_10001C744((uint64_t)v12, type metadata accessor for RDTimelineEngineReminder);
    }
    else
    {
      sub_1000B8680((uint64_t)v12, (uint64_t)v4, type metadata accessor for RDTimelineEngineDueReminder);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    sub_10001C744((uint64_t)v16, type metadata accessor for RDTimelineEngineReminder);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10000882C((uint64_t)v4, &qword_1008415F8);
    }
    else
    {
      v20 = v28;
      sub_1000B8680((uint64_t)v4, v28, type metadata accessor for RDTimelineEngineDueReminder);
      sub_1000B8680(v20, (uint64_t)v8, type metadata accessor for RDTimelineEngineDueReminder);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = (_QWORD *)sub_1002CA078(0, v19[2] + 1, 1, (unint64_t)v19);
      v22 = v19[2];
      v21 = v19[3];
      if (v22 >= v21 >> 1)
        v19 = (_QWORD *)sub_1002CA078(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      v6 = v25;
      v19[2] = v22 + 1;
      v8 = v26;
      sub_1000B8680((uint64_t)v26, (uint64_t)v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22, type metadata accessor for RDTimelineEngineDueReminder);
      v5 = v27;
    }
    v18 += v29;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v19;
}

_QWORD *sub_100233868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_10001A630(&qword_1008415F0);
  __chkstk_darwin(v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v28 = (uint64_t)v24 - v10;
  v30 = type metadata accessor for RDTimelineEngineReminder(0);
  __chkstk_darwin(v30);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return _swiftEmptyArrayStorage;
  v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v29 = *(_QWORD *)(v14 + 72);
  v24[1] = a1;
  swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  v26 = v8;
  v27 = v5;
  v25 = v6;
  do
  {
    sub_1000151E8(v18, (uint64_t)v16, type metadata accessor for RDTimelineEngineReminder);
    sub_1000151E8((uint64_t)v16, (uint64_t)v12, type metadata accessor for RDTimelineEngineReminder);
    if (swift_getEnumCaseMultiPayload(v12, v30) == 1)
    {
      sub_1000B8680((uint64_t)v12, (uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
      sub_10001C744((uint64_t)v12, type metadata accessor for RDTimelineEngineReminder);
    }
    sub_10001C744((uint64_t)v16, type metadata accessor for RDTimelineEngineReminder);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10000882C((uint64_t)v4, &qword_1008415F0);
    }
    else
    {
      v20 = v28;
      sub_1000B8680((uint64_t)v4, v28, type metadata accessor for RDTimelineEngineLocationReminder);
      sub_1000B8680(v20, (uint64_t)v8, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = (_QWORD *)sub_1002CA08C(0, v19[2] + 1, 1, (unint64_t)v19);
      v22 = v19[2];
      v21 = v19[3];
      if (v22 >= v21 >> 1)
        v19 = (_QWORD *)sub_1002CA08C(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      v6 = v25;
      v19[2] = v22 + 1;
      v8 = v26;
      sub_1000B8680((uint64_t)v26, (uint64_t)v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22, type metadata accessor for RDTimelineEngineLocationReminder);
      v5 = v27;
    }
    v18 += v29;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_100233B90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100233BB4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100233BD8(uint64_t a1)
{
  uint64_t v1;

  return sub_10022FF08(a1, v1);
}

void sub_100233BE0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1002300B0(v1, a1);
}

uint64_t sub_100233BF8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002307E4(a1, v1);
}

uint64_t sub_100233C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100841488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RDTimelineEngineLocationReminder(uint64_t a1)
{
  return sub_10001522C(a1, qword_100841758, (uint64_t)&nominal type descriptor for RDTimelineEngineLocationReminder);
}

uint64_t type metadata accessor for RDTimelineEngineReminder(uint64_t a1)
{
  return sub_10001522C(a1, qword_100841808, (uint64_t)&nominal type descriptor for RDTimelineEngineReminder);
}

uint64_t type metadata accessor for RDTimelineEngineDueReminder(uint64_t a1)
{
  return sub_10001522C(a1, qword_1008416B8, (uint64_t)&nominal type descriptor for RDTimelineEngineDueReminder);
}

void sub_100233C84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100230BA4(a1, *(_QWORD *)(v2 + 16), a2);
}

const char *sub_100233CBC()
{
  return "timeZone";
}

const char *sub_100233CD8()
{
  return "recurrenceRules";
}

uint64_t sub_100233CEC(uint64_t a1, uint64_t a2)
{
  return sub_1002222AC(a1, a2);
}

_QWORD *sub_100233CF4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[8];
    v17 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t sub_100233DE8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
}

uint64_t sub_100233E7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[8];
  v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_100233F44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_10023401C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1002340E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1002341AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002341B8);
}

uint64_t sub_1002341B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for DateComponents(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t sub_100234290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023429C);
}

uint64_t sub_10023429C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for DateComponents(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8]) = a2;
  return result;
}

uint64_t sub_100234364(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = &unk_1006B08A0;
      result = type metadata accessor for DateComponents(319);
      if (v5 <= 0x3F)
      {
        v6[3] = *(_QWORD *)(result - 8) + 64;
        v6[4] = &unk_1006B08B8;
        swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_100234414(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v10;
    v11 = v10;
  }
  return a1;
}

void sub_1002344C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

}

uint64_t sub_100234520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = v9;
  return a1;
}

uint64_t sub_1002345A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v8);
  v10 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v11 = v9;

  return a1;
}

uint64_t sub_100234628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002346A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);

  return a1;
}

uint64_t sub_100234728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100234734);
}

uint64_t sub_100234734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002347B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002347BC);
}

uint64_t sub_1002347BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100234834(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1002348AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for UUID(0);
    v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 20)), (_QWORD *)((char *)a2 + *(int *)(v10 + 20)), v8);
      v11 = *(int *)(v10 + 24);
      v12 = *(void **)((char *)a2 + v11);
      *(_QWORD *)((char *)a1 + v11) = v12;
      v13 = v12;
      v14 = a1;
      v15 = a3;
      v16 = 1;
    }
    else
    {
      v18 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      v19 = v18[5];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *((_BYTE *)a1 + v18[6]) = *((_BYTE *)a2 + v18[6]);
      v23 = v18[7];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      v27 = v18[8];
      v28 = *(_QWORD *)((char *)a2 + v27);
      *(_QWORD *)((char *)a1 + v27) = v28;
      swift_bridgeObjectRetain(v28);
      v14 = a1;
      v15 = a3;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

double sub_100234A1C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v5(a1 + *(int *)(v6 + 20), v4);

  }
  else
  {
    v8 = type metadata accessor for RDTimelineEngineDueReminder(0);
    v9 = a1 + *(int *)(v8 + 20);
    v10 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    v11 = a1 + *(int *)(v8 + 28);
    v12 = type metadata accessor for DateComponents(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_100234B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v8(a1 + *(int *)(v9 + 20), a2 + *(int *)(v9 + 20), v7);
    v10 = *(int *)(v9 + 24);
    v11 = *(void **)(a2 + v10);
    *(_QWORD *)(a1 + v10) = v11;
    v12 = v11;
    v13 = 1;
  }
  else
  {
    v14 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
    v15 = v14[5];
    v16 = a1 + v15;
    v17 = a2 + v15;
    v18 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    *(_BYTE *)(a1 + v14[6]) = *(_BYTE *)(a2 + v14[6]);
    v19 = v14[7];
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = type metadata accessor for DateComponents(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = v14[8];
    v24 = *(_QWORD *)(a2 + v23);
    *(_QWORD *)(a1 + v23) = v24;
    swift_bridgeObjectRetain(v24);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v13);
  return a1;
}

uint64_t sub_100234C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_10001C744(a1, type metadata accessor for RDTimelineEngineReminder);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v8(a1 + *(int *)(v9 + 20), a2 + *(int *)(v9 + 20), v7);
      v10 = *(int *)(v9 + 24);
      v11 = *(void **)(a2 + v10);
      *(_QWORD *)(a1 + v10) = v11;
      v12 = v11;
      v13 = 1;
    }
    else
    {
      v14 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      v15 = v14[5];
      v16 = a1 + v15;
      v17 = a2 + v15;
      v18 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_BYTE *)(a1 + v14[6]) = *(_BYTE *)(a2 + v14[6]);
      v19 = v14[7];
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = type metadata accessor for DateComponents(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v23 = v14[8];
      v24 = *(_QWORD *)(a2 + v23);
      *(_QWORD *)(a1 + v23) = v24;
      swift_bridgeObjectRetain(v24);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v13);
  }
  return a1;
}

uint64_t sub_100234D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for RDTimelineEngineLocationReminder(0);
    v8(a1 + *(int *)(v9 + 20), a2 + *(int *)(v9 + 20), v7);
    v10 = (int *)(v9 + 24);
    v11 = 1;
  }
  else
  {
    v12 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
    v13 = v12[5];
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_BYTE *)(a1 + v12[6]) = *(_BYTE *)(a2 + v12[6]);
    v17 = v12[7];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for DateComponents(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    v11 = 0;
    v10 = v12 + 8;
  }
  *(_QWORD *)(a1 + *v10) = *(_QWORD *)(a2 + *v10);
  swift_storeEnumTagMultiPayload(a1, a3, v11);
  return a1;
}

uint64_t sub_100234EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10001C744(a1, type metadata accessor for RDTimelineEngineReminder);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for RDTimelineEngineLocationReminder(0);
      v8(a1 + *(int *)(v9 + 20), a2 + *(int *)(v9 + 20), v7);
      v10 = (int *)(v9 + 24);
      v11 = 1;
    }
    else
    {
      v12 = (int *)type metadata accessor for RDTimelineEngineDueReminder(0);
      v13 = v12[5];
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_BYTE *)(a1 + v12[6]) = *(_BYTE *)(a2 + v12[6]);
      v17 = v12[7];
      v18 = a1 + v17;
      v19 = a2 + v17;
      v20 = type metadata accessor for DateComponents(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      v11 = 0;
      v10 = v12 + 8;
    }
    *(_QWORD *)(a1 + *v10) = *(_QWORD *)(a2 + *v10);
    swift_storeEnumTagMultiPayload(a1, a3, v11);
  }
  return a1;
}

uint64_t sub_100235008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for RDTimelineEngineDueReminder(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for RDTimelineEngineLocationReminder(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDGroceryCorrectionCache(uint64_t a1)
{
  uint64_t result;

  result = qword_100841860;
  if (!qword_100841860)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDGroceryCorrectionCache);
  return result;
}

uint64_t sub_1002350C4(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_100871D50);
}

uint64_t sub_100235110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841840);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841840);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002351A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  __chkstk_darwin(v0);
  v26 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v12 = type metadata accessor for RDGroceryCorrectionCache(0);
  v29 = (_QWORD *)v12;
  v13 = sub_10001A630(&qword_1008418C0);
  v14 = String.init<A>(reflecting:)(&v29, v13);
  v24 = v15;
  v25 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v16 = static OS_dispatch_queue.global(qos:)(v11);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static DispatchQoS.unspecified.getter(v17);
  v29 = _swiftEmptyArrayStorage;
  v18 = sub_1001BAB10();
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v19, v20, v2, v18);
  v21 = v26;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v26, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v24, v7, v4, v21, v16);
  *(_QWORD *)(swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52)) + qword_100841858) = &_swiftEmptySetSingleton;
  result = REMCache.init(cacheQueue:countLimit:)(v22, 0);
  qword_100871D48 = result;
  return result;
}

uint64_t sub_100235410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52)) + qword_100841858) = &_swiftEmptySetSingleton;
  return REMCache.init(cacheQueue:countLimit:)(a1, a2);
}

uint64_t sub_10023546C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  os_log_type_t type;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v36;
  uint64_t v38;
  uint64_t v39;

  v13 = v12;
  if (qword_100837020 != -1)
    swift_once(&qword_100837020, sub_100235110);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100841840);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRetain_n(a6, 2);
  swift_bridgeObjectRetain_n(a8, 2);
  v36 = a9;
  v20 = Logger.logObject.getter(v36);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v33 = v13;
    v22 = swift_slowAlloc(52, -1);
    v31 = (_QWORD *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(128, -1);
    v39 = v32;
    *(_DWORD *)v22 = 136316162;
    swift_bridgeObjectRetain(a2);
    v38 = sub_10001A820(a1, a2, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a2, 3);
    type = v21;
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v38 = sub_10001A820(a3, a4, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a6);
    v38 = sub_10001A820(a5, a6, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a6, 3);
    *(_WORD *)(v22 + 32) = 2080;
    swift_bridgeObjectRetain(a8);
    v38 = sub_10001A820(a7, a8, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a8, 3);
    *(_WORD *)(v22 + 42) = 2112;
    v38 = (uint64_t)v36;
    v23 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    *v31 = v36;

    _os_log_impl((void *)&_mh_execute_header, v20, type, "RDGroceryCorrectionCache: Recording {%s: (from: %s, to: %s, locale: %s} in list: %@", (uint8_t *)v22, 0x34u);
    v24 = sub_10001A630((uint64_t *)&unk_100839E70);
    v25 = a5;
    swift_arrayDestroy(v31, 1, v24);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v32, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v26 = v22;
    v13 = v33;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a8, 2);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    v25 = a5;
  }
  v27 = (_QWORD *)swift_allocObject(&unk_1007EA940, 112, 7);
  v27[2] = v36;
  v27[3] = a1;
  v27[4] = a2;
  v27[5] = a3;
  v27[6] = a4;
  v27[7] = v25;
  v27[8] = a6;
  v27[9] = a7;
  v27[10] = a8;
  v27[11] = v13;
  v27[12] = a11;
  v27[13] = a12;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a8);
  v28 = v36;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)(a10, sub_100236E14, v27);
  return swift_release(v27);
}

uint64_t sub_1002358BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32[6];
  _QWORD v33[3];
  id v34;
  _BYTE v35[104];

  v19 = REMCacheContext.object(forKey:)(a2);
  if (v19)
  {
    v20 = v19;
    REMStructWrapper.value.getter(v33);
    swift_release(v20);
    v21 = v33[0];
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v32[5] = a10;
    v33[0] = v21;
    v32[0] = a5;
    v32[1] = a6;
    v32[2] = a7;
    v32[3] = a8;
    v32[4] = a9;
    sub_10028CFB4(v32, a3, a4, isUniquelyReferenced_nonNull_native);
    v23 = v33[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33[0] = v23;
    v24 = sub_10001A630(&qword_1008418B8);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = REMStructWrapper.init(_:)(v33);
    REMCacheContext.setObject(_:forKey:)(v25, a2);
    swift_release(v25);
  }
  else
  {
    v26 = sub_10001A630(&qword_1008418B0);
    inited = swift_initStackObject(v26, v35);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = a3;
    *(_QWORD *)(inited + 40) = a4;
    *(_QWORD *)(inited + 48) = a5;
    *(_QWORD *)(inited + 56) = a6;
    *(_QWORD *)(inited + 64) = a7;
    *(_QWORD *)(inited + 72) = a8;
    *(_QWORD *)(inited + 80) = a9;
    *(_QWORD *)(inited + 88) = a10;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    v33[0] = sub_1002B09A0(inited);
    v28 = sub_10001A630(&qword_1008418B8);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    v29 = REMStructWrapper.init(_:)(v33);
    REMCacheContext.setObject(_:forKey:)(v29, a2);
    swift_release(v29);
    swift_beginAccess(a11 + qword_100841858, v33, 33, 0);
    sub_1002DB2CC((Swift::Int *)&v34, a2);
    swift_endAccess(v33);

  }
  return a12(a1);
}

uint64_t sub_100235AF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *v1;
  v4 = swift_allocObject(&unk_1007EA968, 24, 7);
  *(_QWORD *)(v4 + 16) = _swiftEmptyDictionarySingleton;
  v5 = (_QWORD *)swift_allocObject(&unk_1007EA990, 40, 7);
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadAndWrite(_:operations:)(a1, sub_100236EA4, v5);
  swift_release(v4);
  return swift_release(v5);
}

void sub_100235B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  __n128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  int64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  BOOL v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t MetatypeMetadata;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  BOOL v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  BOOL v138;
  _QWORD *v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t i;
  id v168;
  int64_t v169;
  uint64_t v170;
  char *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  int64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  int64_t v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[3];
  char v191[8];
  _QWORD *v192;
  uint64_t v193;
  char v194[8];
  _QWORD v195[5];

  v173 = a4;
  v166 = a1;
  v180 = type metadata accessor for REMAnalyticsEvent(0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (uint64_t *)((char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (_QWORD *)(a2 + qword_100841858);
  swift_beginAccess(v7, v194, 1, 0);
  v161 = v7;
  v8 = *v7;
  if ((*v7 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v9 = *v7;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v12 = sub_10011A5DC();
    Set.Iterator.init(_cocoa:)(v195, v10, v11, v12);
    v14 = v195[0];
    v165 = v195[1];
    v15 = v195[2];
    v16 = v195[3];
    v17 = v195[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(v8 + 32);
    v19 = *(_QWORD *)(v8 + 56);
    v165 = v8 + 56;
    v20 = ~v18;
    v21 = -v18;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v17 = v22 & v19;
    v13 = swift_bridgeObjectRetain(v8);
    v15 = v20;
    v16 = 0;
  }
  v23 = 0;
  v185 = (_QWORD *)(a3 + 16);
  v163 = v14 & 0x7FFFFFFFFFFFFFFFLL;
  v160 = v15;
  v164 = (unint64_t)(v15 + 64) >> 6;
  v177 = enum case for REMAnalyticsEvent.groceryCorrection(_:);
  v13.n128_u64[0] = 136446722;
  v172 = v13;
  v171 = (char *)&type metadata for Any + 8;
  v162 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v14; ; v14 = i)
  {
    if (v14 < 0)
    {
      v26 = __CocoaSet.Iterator.next()(v14);
      if (!v26)
        goto LABEL_191;
      v27 = v26;
      v192 = (_QWORD *)v26;
      v28 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_unknownObjectRetain(v27);
      swift_dynamicCast(&v193, &v192, v162, v28, 7);
      v29 = (void *)v193;
      swift_unknownObjectRelease(v27);
      v30 = v29;
      v25 = v16;
      v170 = v17;
      if (!v29)
        goto LABEL_191;
    }
    else
    {
      if (v17)
      {
        v170 = (v17 - 1) & v17;
        v24 = __clz(__rbit64(v17)) | (v16 << 6);
        v25 = v16;
      }
      else
      {
        v31 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_200;
        if (v31 >= v164)
        {
LABEL_191:
          sub_1000C6560(i);
          REMCacheContext.clearAll()();
          *v161 = &_swiftEmptySetSingleton;
          swift_bridgeObjectRelease();
          return;
        }
        v32 = *(_QWORD *)(v165 + 8 * v31);
        if (!v32)
        {
          v33 = v16 + 2;
          if (v16 + 2 >= v164)
            goto LABEL_191;
          v32 = *(_QWORD *)(v165 + 8 * v33);
          if (v32)
            goto LABEL_26;
          v33 = v16 + 3;
          if (v16 + 3 >= v164)
            goto LABEL_191;
          v32 = *(_QWORD *)(v165 + 8 * v33);
          if (v32)
          {
LABEL_26:
            v31 = v33;
          }
          else
          {
            v31 = v16 + 4;
            if (v16 + 4 >= v164)
              goto LABEL_191;
            v32 = *(_QWORD *)(v165 + 8 * v31);
            if (!v32)
            {
              v159 = v16 + 5;
              do
              {
                if (v164 == v159)
                  goto LABEL_191;
                v32 = *(_QWORD *)(v165 + 8 * v159++);
              }
              while (!v32);
              v31 = v159 - 1;
            }
          }
          v14 = i;
        }
        v170 = (v32 - 1) & v32;
        v25 = v31;
        v24 = __clz(__rbit64(v32)) + (v31 << 6);
      }
      v30 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v24);
      if (!v30)
        goto LABEL_191;
    }
    v169 = v25;
    v34 = v30;
    v35 = REMCacheContext.object(forKey:)(v30);
    if (v35)
      break;

LABEL_12:
    v16 = v169;
    v17 = v170;
  }
  v36 = v35;
  v168 = v34;
  REMStructWrapper.value.getter(&v193);
  swift_release(v36);
  v37 = 0;
  v38 = *(_QWORD *)(v193 + 64);
  v174 = v193 + 64;
  v182 = v193;
  v39 = 1 << *(_BYTE *)(v193 + 32);
  if (v39 < 64)
    v40 = ~(-1 << v39);
  else
    v40 = -1;
  v41 = v40 & v38;
  v175 = (unint64_t)(v39 + 63) >> 6;
  while (1)
  {
    if (v41)
    {
      v55 = __clz(__rbit64(v41));
      v56 = (v41 - 1) & v41;
      v57 = v55 | (v37 << 6);
    }
    else
    {
      v58 = __OFADD__(v37++, 1);
      if (v58)
      {
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }
      if (v37 >= v175)
        goto LABEL_11;
      v59 = *(_QWORD *)(v174 + 8 * v37);
      if (!v59)
      {
        v60 = v37 + 1;
        if (v37 + 1 >= v175)
          goto LABEL_11;
        v59 = *(_QWORD *)(v174 + 8 * v60);
        if (!v59)
        {
          v60 = v37 + 2;
          if (v37 + 2 >= v175)
            goto LABEL_11;
          v59 = *(_QWORD *)(v174 + 8 * v60);
          if (!v59)
          {
            v60 = v37 + 3;
            if (v37 + 3 >= v175)
            {
LABEL_11:

              swift_release(v182);
              goto LABEL_12;
            }
            v59 = *(_QWORD *)(v174 + 8 * v60);
            if (!v59)
            {
              while (1)
              {
                v37 = v60 + 1;
                if (__OFADD__(v60, 1))
                  goto LABEL_195;
                if (v37 >= v175)
                  goto LABEL_11;
                v59 = *(_QWORD *)(v174 + 8 * v37);
                ++v60;
                if (v59)
                  goto LABEL_50;
              }
            }
          }
        }
        v37 = v60;
      }
LABEL_50:
      v56 = (v59 - 1) & v59;
      v57 = __clz(__rbit64(v59)) + (v37 << 6);
    }
    v61 = (uint64_t *)(*(_QWORD *)(v182 + 56) + 48 * v57);
    v62 = (_QWORD *)v61[1];
    v186 = *v61;
    v63 = v61[3];
    v188 = v61[2];
    v64 = v61[4];
    v65 = v61[5];
    v66 = v185;
    swift_beginAccess(v185, &v193, 32, 0);
    v67 = *v66;
    v68 = *(_QWORD *)(*v66 + 16);
    swift_bridgeObjectRetain(v65);
    v187 = v56;
    v189 = v64;
    if (v68)
    {
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
      v69 = sub_10001A6DC(v64, v65);
      if ((v70 & 1) != 0)
      {
        v183 = v23;
        v71 = *(_QWORD **)(*(_QWORD *)(v67 + 56) + 8 * v69);
        swift_endAccess(&v193);
        swift_bridgeObjectRetain(v71);
        swift_bridgeObjectRelease();
        v72 = v71[2];
        v73 = v186;
        if (v72)
        {
          v74 = v71[4];
          v75 = (_QWORD *)v71[5];
          v76 = v74 == v186 && v75 == v62;
          if (v76 || (_stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, v186, v62, 0) & 1) != 0)
            goto LABEL_103;
          if (v72 != 1)
          {
            v115 = v71[6];
            v116 = (_QWORD *)v71[7];
            v117 = v115 == v73 && v116 == v62;
            if (v117 || (_stringCompareWithSmolCheck(_:_:expecting:)(v115, v116, v73, v62, 0) & 1) != 0)
              goto LABEL_103;
            if (v72 != 2)
            {
              v139 = v71 + 9;
              v140 = 2;
              while (1)
              {
                v141 = v37;
                v142 = v140 + 1;
                if (__OFADD__(v140, 1))
                  break;
                v143 = *(v139 - 1);
                v144 = (_QWORD *)*v139;
                if (v143 == v186 && v144 == v62)
                {
                  v37 = v141;
                  v73 = v186;
                  goto LABEL_103;
                }
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v143, v144, v186, v62, 0) & 1) != 0)
                {
                  v37 = v141;
                  v73 = v186;
                  goto LABEL_103;
                }
                v139 += 2;
                ++v140;
                v76 = v142 == v72;
                v37 = v141;
                if (v76)
                  goto LABEL_60;
              }
LABEL_196:
              __break(1u);
              goto LABEL_197;
            }
          }
        }
LABEL_60:
        v73 = v186;
        if (v186 != 0x6C6E6F6974636573 || v62 != (_QWORD *)0xEB00000000737365)
        {
          v77 = 0xE900000000000064;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v186, v62, 0x6C6E6F6974636573, 0xEB00000000737365, 0) & 1) == 0)
          {
            v186 = 0x65746365746F7270;
            if (!v72)
              goto LABEL_109;
            goto LABEL_104;
          }
        }
LABEL_103:
        swift_bridgeObjectRetain(v62);
        v77 = (unint64_t)v62;
        v186 = v73;
        if (!v72)
          goto LABEL_109;
LABEL_104:
        v118 = v71[4];
        v119 = v71[5];
        if (v118 == v188 && v119 == v63
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, v188, v63, 0) & 1) != 0)
        {
          goto LABEL_107;
        }
        if (v72 == 1)
          goto LABEL_109;
        if ((v121 = v71[6], v122 = v71[7], v121 == v188) && v122 == v63
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, v188, v63, 0) & 1) != 0)
        {
LABEL_107:
          v42 = v65;
          v47 = v77;
          swift_bridgeObjectRelease();
          v23 = v183;
          goto LABEL_163;
        }
        if (v72 == 2)
        {
LABEL_109:
          swift_bridgeObjectRelease();
          v23 = v183;
LABEL_110:
          v120 = v188;
          if (v188 == 0x6C6E6F6974636573 && v63 == 0xEB00000000737365)
          {
            v42 = v65;
            v47 = v77;
            goto LABEL_163;
          }
          v42 = v65;
          v47 = v77;
          goto LABEL_162;
        }
        v181 = v62;
        v184 = v37;
        v123 = v71 + 9;
        v124 = 2;
        while (1)
        {
          v125 = v124 + 1;
          if (__OFADD__(v124, 1))
            break;
          v126 = *(v123 - 1);
          v127 = *v123;
          if (v126 == v188 && v127 == v63)
          {
            v37 = v184;
            goto LABEL_107;
          }
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v126, v127, v188, v63, 0) & 1) != 0)
          {
            v37 = v184;
            goto LABEL_107;
          }
          v123 += 2;
          ++v124;
          if (v125 == v72)
          {
            swift_bridgeObjectRelease();
            v23 = v183;
            v37 = v184;
            goto LABEL_110;
          }
        }
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      v184 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      v184 = v37;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
    }
    swift_endAccess(&v193);
    v78 = sub_1001C6154(v64, v65, 0, 1);
    if (!v23)
      break;
    if (qword_100837020 != -1)
      swift_once(&qword_100837020, sub_100235110);
    v79 = type metadata accessor for Logger(0);
    sub_10001AAA8(v79, (uint64_t)qword_100841840);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    swift_errorRetain(v23);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    v80 = swift_errorRetain(v23);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    v83 = os_log_type_enabled(v81, v82);
    v176 = v63;
    if (v83)
    {
      v84 = swift_slowAlloc(32, -1);
      v188 = swift_slowAlloc(96, -1);
      v192 = (_QWORD *)v188;
      *(_DWORD *)v84 = v172.n128_u32[0];
      v193 = v173;
      MetatypeMetadata = swift_getMetatypeMetadata(v173);
      v86 = String.init<A>(describing:)(&v193, MetatypeMetadata);
      *(_QWORD *)(v84 + 4) = sub_10001A820(v86, v87, (uint64_t *)&v192);
      swift_bridgeObjectRelease();
      *(_WORD *)(v84 + 12) = 2082;
      swift_bridgeObjectRetain(v65);
      *(_QWORD *)(v84 + 14) = sub_10001A820(v189, v65, (uint64_t *)&v192);
      swift_bridgeObjectRelease_n(v63, 2);
      swift_bridgeObjectRelease_n(v62, 2);
      v42 = v65;
      swift_bridgeObjectRelease_n(v65, 3);
      *(_WORD *)(v84 + 22) = 2082;
      swift_getErrorValue(v23, v191, v190);
      v88 = Error.rem_errorDescription.getter(v190[1], v190[2]);
      *(_QWORD *)(v84 + 24) = sub_10001A820(v88, v89, (uint64_t *)&v192);
      swift_bridgeObjectRelease();
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "%{public}s: Failed to retrieve intelligentCategoryNamesFromTrial {groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v84, 0x20u);
      v90 = v188;
      swift_arrayDestroy(v188, 3, v171);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v84, -1, -1);
    }
    else
    {
      v42 = v65;
      swift_bridgeObjectRelease_n(v65, 2);
      swift_bridgeObjectRelease_n(v63, 2);
      swift_bridgeObjectRelease_n(v62, 2);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    v37 = v184;
    swift_errorRelease(v23);
    v23 = 0;
    v44 = 0x65746365746F7270;
    v45 = 0xE900000000000064;
    v46 = 0x65746365746F7270;
    v47 = 0xE900000000000064;
LABEL_37:
    type metadata accessor for REMAnalyticsManager(0, v43);
    v49 = static REMAnalyticsManager.shared.getter(v48);
    swift_bridgeObjectRelease();
    v50 = swift_bridgeObjectRelease();
    v51 = v178;
    *v178 = v46;
    v51[1] = v47;
    v51[2] = v44;
    v51[3] = v45;
    v51[4] = v189;
    v51[5] = v42;
    v52 = v179;
    v53 = v180;
    v54.n128_f64[0] = (*(double (**)(uint64_t *, _QWORD, uint64_t, __n128))(v179 + 104))(v51, v177, v180, v50);
    REMAnalyticsManager.post(event:)(v51, v54);
    swift_release(v49);
    (*(void (**)(uint64_t *, uint64_t))(v52 + 8))(v51, v53);
    v41 = v187;
  }
  v91 = v78;
  v183 = 0;
  v92 = v185;
  swift_beginAccess(v185, &v193, 33, 0);
  swift_bridgeObjectRetain(v65);
  v181 = v91;
  swift_bridgeObjectRetain(v91);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v92);
  v192 = (_QWORD *)*v92;
  v94 = (uint64_t)v192;
  *v92 = 0x8000000000000000;
  v96 = sub_10001A6DC(v64, v65);
  v97 = *(_QWORD *)(v94 + 16);
  v98 = (v95 & 1) == 0;
  v99 = v97 + v98;
  if (__OFADD__(v97, v98))
    goto LABEL_193;
  v100 = v95;
  if (*(_QWORD *)(v94 + 24) >= v99)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1002D70F4();
  }
  else
  {
    sub_1002CEEA4(v99, isUniquelyReferenced_nonNull_native);
    v101 = sub_10001A6DC(v189, v65);
    if ((v100 & 1) != (v102 & 1))
      goto LABEL_201;
    v96 = v101;
  }
  v23 = v183;
  v103 = v181;
  v104 = v192;
  if ((v100 & 1) != 0)
  {
    v105 = v192[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v105 + 8 * v96) = v103;
  }
  else
  {
    v192[(v96 >> 6) + 8] |= 1 << v96;
    v106 = (_QWORD *)(v104[6] + 16 * v96);
    *v106 = v189;
    v106[1] = v65;
    *(_QWORD *)(v104[7] + 8 * v96) = v103;
    v107 = v104[2];
    v58 = __OFADD__(v107, 1);
    v108 = v107 + 1;
    if (v58)
      goto LABEL_194;
    v104[2] = v108;
    swift_bridgeObjectRetain(v65);
  }
  *v185 = v104;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(&v193);
  v109 = v103[2];
  v110 = v186;
  if (!v109)
    goto LABEL_89;
  v111 = v103[4];
  v112 = (_QWORD *)v103[5];
  v113 = v111 == v186 && v112 == v62;
  if (v113 || (_stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, v186, v62, 0) & 1) != 0)
    goto LABEL_152;
  if (v109 == 1)
    goto LABEL_89;
  v129 = v181[6];
  v130 = (_QWORD *)v181[7];
  if (v129 == v110 && v130 == v62)
    goto LABEL_152;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v129, v130, v110, v62, 0) & 1) != 0)
    goto LABEL_152;
  if (v109 != 2)
  {
    swift_bridgeObjectRetain(v181);
    v132 = (_QWORD *)(v131 + 72);
    v133 = 2;
    while (1)
    {
      v134 = v133 + 1;
      if (__OFADD__(v133, 1))
        goto LABEL_198;
      v135 = *(v132 - 1);
      v136 = (_QWORD *)*v132;
      v137 = v186;
      v138 = v135 == v186 && v136 == v62;
      if (v138 || (_stringCompareWithSmolCheck(_:_:expecting:)(v135, v136, v186, v62, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v23 = v183;
        v110 = v137;
        goto LABEL_152;
      }
      v132 += 2;
      ++v133;
      if (v134 == v109)
      {
        swift_bridgeObjectRelease();
        v23 = v183;
        v110 = v186;
        break;
      }
    }
  }
LABEL_89:
  if (v110 == 0x6C6E6F6974636573 && v62 == (_QWORD *)0xEB00000000737365
    || (v114 = 0xE900000000000064,
        (_stringCompareWithSmolCheck(_:_:expecting:)(v110, v62, 0x6C6E6F6974636573, 0xEB00000000737365, 0) & 1) != 0))
  {
LABEL_152:
    swift_bridgeObjectRetain(v62);
    v114 = (unint64_t)v62;
    v186 = v110;
    if (v109)
      goto LABEL_153;
LABEL_158:
    swift_bridgeObjectRelease();
LABEL_159:
    v42 = v65;
    v47 = v114;
    v37 = v184;
    if (v188 == 0x6C6E6F6974636573 && v63 == 0xEB00000000737365)
      goto LABEL_163;
    v120 = v188;
LABEL_162:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v120, v63, 0x6C6E6F6974636573, 0xEB00000000737365, 0) & 1) == 0)
    {
      v44 = 0x65746365746F7270;
      v45 = 0xE900000000000064;
      goto LABEL_164;
    }
LABEL_163:
    v43 = swift_bridgeObjectRetain(v63);
    v45 = v63;
    v44 = v188;
LABEL_164:
    v46 = v186;
    goto LABEL_37;
  }
  v186 = 0x65746365746F7270;
  if (!v109)
    goto LABEL_158;
LABEL_153:
  v146 = v181[4];
  v147 = v181[5];
  if (v146 == v188 && v147 == v63 || (_stringCompareWithSmolCheck(_:_:expecting:)(v146, v147, v188, v63, 0) & 1) != 0)
  {
LABEL_156:
    v42 = v65;
    v47 = v114;
    swift_bridgeObjectRelease();
    v37 = v184;
    goto LABEL_163;
  }
  if (v109 == 1)
    goto LABEL_158;
  v148 = v181[6];
  v149 = v181[7];
  if (v148 == v188 && v149 == v63 || (_stringCompareWithSmolCheck(_:_:expecting:)(v148, v149, v188, v63, 0) & 1) != 0)
    goto LABEL_156;
  if (v109 == 2)
    goto LABEL_158;
  swift_bridgeObjectRetain(v181);
  v151 = (uint64_t *)(v150 + 72);
  v152 = 2;
  v153 = v188;
  while (1)
  {
    v154 = v152 + 1;
    if (__OFADD__(v152, 1))
      break;
    v155 = *(v151 - 1);
    v156 = *v151;
    v157 = v155 == v153 && v156 == v63;
    if (v157
      || (v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v155, v156, v188, v63, 0), v153 = v188, (v158 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      v23 = v183;
      goto LABEL_156;
    }
    v151 += 2;
    ++v152;
    if (v154 == v109)
    {
      swift_bridgeObjectRelease_n(v181, 2);
      v23 = v183;
      goto LABEL_159;
    }
  }
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100236D6C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100841858));
}

uint64_t sub_100236D7C()
{
  uint64_t v0;

  v0 = REMCache.deinit();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100841858));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100236DB8()
{
  return type metadata accessor for RDGroceryCorrectionCache(0);
}

uint64_t sub_100236DC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100236E14(uint64_t a1)
{
  uint64_t v1;

  return sub_1002358BC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(uint64_t (**)(uint64_t))(v1 + 96));
}

uint64_t sub_100236E54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100236E78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100236EA4(uint64_t a1)
{
  uint64_t *v1;

  sub_100235B9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100236EB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A630(&qword_1008418C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v9 = *(_QWORD *)(updated - 8);
  if (v7)
  {
    sub_100238E28(a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), (uint64_t)v6);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, v10, 1, updated);
  Optional.tryUnwrap(_:file:line:)(a2, 0xD000000000000013, 0x80000001006FDA80, 0xD0000000000000A9, 0x80000001006FD840, 103, v4);
  return sub_100239534((uint64_t)v6);
}

uint64_t sub_100236FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  v5 = (_QWORD *)((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100236EB0(a1, v5);
  if (!v1)
  {
    v6 = objc_msgSend(*(id *)((char *)v5 + *(int *)(updated + 28)), "list");
    v9[1] = v6;
    v7 = sub_10001A630((uint64_t *)&unk_100843F50);
    Optional.tryUnwrap(_:file:line:)(&v10, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v7);

    updated = v10;
    sub_100238E6C((uint64_t)v5);
  }
  return updated;
}

void sub_100237114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t updated;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t i;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _BYTE *v56;
  void *v57;
  id v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSString v65;
  Swift::String v66;
  Swift::String v67;
  NSString v68;
  id v69;
  _BYTE v70[4];
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::OpaquePointer_optional v86;

  v3 = v2;
  v85 = a1;
  v5 = type metadata accessor for RDUserNotificationCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v41 = a2;
    else
      v41 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v41);
  }
  else
  {
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    v13 = v12;
  }
  v78 = v8;
  v79 = v6;
  v80 = v12;
  if (v13)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_41:
        swift_bridgeObjectRelease();
        v51 = (_QWORD *)v83;
        v52 = v80;
        v53 = v75;
        goto LABEL_43;
      }
      v14 = *(id *)(a2 + 32);
    }
    v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 0;
  }
  v81 = (uint64_t)v15;
  v16 = sub_10001A630(&qword_1008444B0);
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD000000000000037, 0x80000001006FD800, 0xD0000000000000A9, 0x80000001006FD840, 43, v16);
  if (v2)
  {

    return;
  }
  v76 = v5;

  v77 = (id)v83;
  v17 = objc_msgSend((id)v83, "title");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v81 = v19;
  v82 = v21;
  v22 = sub_10001A630((uint64_t *)&unk_10083A370);
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD000000000000021, 0x80000001006FD8F0, 0xD0000000000000A9, 0x80000001006FD840, 44, v22);
  v75 = (void *)v13;
  swift_bridgeObjectRelease();
  v24 = v83;
  v23 = v84;
  v25 = v85;
  sub_100236EB0(v85, v11);
  v73 = v24;
  v74 = v23;
  v3 = 0;
  v26 = (void *)sub_100238A64((uint64_t)v11);
  sub_100238E6C((uint64_t)v11);
  if (v26)
  {
    v27 = objc_msgSend(v26, "shortName");

    v28 = (uint64_t)v75;
    if (v27)
    {
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

    }
    else
    {
      v72 = 0;
      v30 = 0;
    }
    v25 = v85;
  }
  else
  {
    v72 = 0;
    v30 = 0;
    v28 = (uint64_t)v75;
  }
  v31 = (void *)sub_100236FD8(v25);
  v75 = v30;
  v32 = objc_msgSend(v31, "name");

  if (v32)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v81 = v33;
  v82 = v35;
  Optional.tryUnwrap(_:file:line:)(&v83, 0xD00000000000001CLL, 0x80000001006FD920, 0xD0000000000000A9, 0x80000001006FD840, 46, v22);
  v36 = (uint64_t)v75;
  swift_bridgeObjectRelease();
  v37 = v83;
  v38 = v84;
  v39 = (void *)sub_100236FD8(v85);
  v71 = objc_msgSend(v39, "shouldCategorizeGroceryItems");

  v11 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  v40 = v73;
  v73 = v37;
  sub_1002390C0(v72, v36, v40, v74, v80, v37, v38, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setBody:", v42, swift_bridgeObjectRelease().n128_f64[0]);

  v83 = (unint64_t)_swiftEmptyArrayStorage;
  if (v28)
  {
    v75 = (void *)v38;
    if (v28 < 1)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n(a2, 2);
    for (i = 0; i != v28; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      else
        v45 = *(id *)(a2 + 8 * i + 32);
      v46 = v45;
      v47 = objc_msgSend(v45, "remObjectID");

      if (v47)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
        v49 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v50 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v49 >= v50 >> 1)
        {
          v74 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1);
          v49 = v74;
        }
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
        specialized Array._endMutation()(v44);
      }
    }
    goto LABEL_41;
  }
  swift_bridgeObjectRetain(a2);
  v51 = _swiftEmptyArrayStorage;
  v53 = (void *)v38;
  v52 = v80;
LABEL_43:
  swift_bridgeObjectRelease();
  v86.value._rawValue = v51;
  UNMutableNotificationContent.setReminderIDs(_:)(v86);
  swift_bridgeObjectRelease();
  v54 = (void *)sub_100236FD8(v85);
  v56 = v78;
  v55 = v79;
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = v54;
    v58 = objc_msgSend(v54, "remObjectID");

    UNMutableNotificationContent.setListID(_:)(v58);
    v59 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
    if (v52 != 1)
      v59 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
    v60 = v76;
    v61 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v55 + 104))(v56, *v59, v76);
    v62 = RDUserNotificationCategory.rawValue.getter(v61);
    v64 = v63;
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v56, v60);
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setCategoryIdentifier:", v65);

    v83 = v62;
    v84 = v64;
    swift_bridgeObjectRetain(v64);
    v66._countAndFlagsBits = 45;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v84);
    v67._countAndFlagsBits = v73;
    v67._object = v53;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setThreadIdentifier:", v68, swift_bridgeObjectRelease().n128_f64[0]);

    v69 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
    objc_msgSend(v11, "setSound:", v69);

  }
}

uint64_t sub_10023792C()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_100237934()
{
  uint64_t *v0;

  sub_100237114(*v0, v0[1]);
}

void sub_10023794C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001D60E8(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1002379CC(v5);
  *a1 = v3;
}

void sub_1002379CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  Swift::Int v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  Swift::Int v129;
  char *v130;
  Swift::Int v131;
  uint64_t v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v2 = v1;
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v135 = *(_QWORD *)(updated - 8);
  v136 = updated;
  v5 = __chkstk_darwin(updated);
  v132 = (uint64_t)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v142 = (uint64_t)&v126 - v8;
  v9 = __chkstk_darwin(v7);
  v139 = (uint64_t)&v126 - v10;
  __chkstk_darwin(v9);
  v138 = (uint64_t)&v126 - v11;
  v12 = a1[1];
  v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0)
      goto LABEL_145;
    if (v12)
      sub_100238394(0, v12, 1, a1);
    return;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_153;
  v129 = v13;
  if (v12 < 2)
  {
    v18 = _swiftEmptyArrayStorage;
    v134 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
    if (v12 != 1)
    {
      v21 = _swiftEmptyArrayStorage[2];
      v20 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v128 = v18;
      if (v21 >= 2)
      {
        v117 = *a1;
        do
        {
          v118 = v21 - 2;
          if (v21 < 2)
            goto LABEL_140;
          if (!v117)
            goto LABEL_152;
          v111 = v20;
          v119 = v20 + 32;
          v120 = *(_QWORD *)&v20[16 * v118 + 32];
          v121 = *(_QWORD *)&v20[16 * v21 + 24];
          sub_1002385B8(v117 + *(_QWORD *)(v135 + 72) * v120, v117 + *(_QWORD *)(v135 + 72) * *(_QWORD *)&v119[16 * v21 - 16], v117 + *(_QWORD *)(v135 + 72) * v121, v134);
          if (v2)
            goto LABEL_119;
          if (v121 < v120)
            goto LABEL_141;
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
            v111 = sub_1001D52E4((uint64_t)v111);
          if (v118 >= *((_QWORD *)v111 + 2))
            goto LABEL_142;
          v122 = &v111[16 * v118 + 32];
          *(_QWORD *)v122 = v120;
          *((_QWORD *)v122 + 1) = v121;
          v123 = *((_QWORD *)v111 + 2);
          if (v21 > v123)
            goto LABEL_143;
          v20 = v111;
          memmove(&v111[16 * v21 + 16], &v111[16 * v21 + 32], 16 * (v123 - v21));
          *((_QWORD *)v111 + 2) = v123 - 1;
          v21 = v123 - 1;
        }
        while (v123 > 2);
      }
      v124 = v20;
LABEL_121:
      swift_bridgeObjectRelease(v124);
      v125 = v128;
      v128[2] = 0;
      swift_bridgeObjectRelease(v125);
      return;
    }
    v128 = _swiftEmptyArrayStorage;
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v136);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v135 + 80);
    v128 = (_QWORD *)v16;
    v134 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v20 = (char *)_swiftEmptyArrayStorage;
  v140 = a1;
  while (1)
  {
    v22 = v19;
    v23 = v19 + 1;
    v133 = v19;
    if (v19 + 1 >= v12)
    {
      v38 = v19 + 1;
      goto LABEL_59;
    }
    v137 = *a1;
    v24 = v137;
    v25 = *(_QWORD *)(v135 + 72);
    v26 = v138;
    sub_100238E28(v137 + v25 * v23, v138);
    v27 = v139;
    sub_100238E28(v24 + v25 * v22, v139);
    v28 = type metadata accessor for Date(0);
    v141 = sub_100238EA8();
    LODWORD(v143) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v27, v28, v141);
    sub_100238E6C(v27);
    v29 = v26;
    v30 = v137;
    sub_100238E6C(v29);
    v31 = v25;
    v144 = v25;
    if (v22 + 2 >= v12)
    {
      v38 = v22 + 2;
      if ((v143 & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      v127 = v2;
      v130 = v20;
      v32 = v25 * v23;
      v33 = v22 + 2;
      v34 = v31 * (v22 + 2);
      do
      {
        v35 = v138;
        sub_100238E28(v30 + v34, v138);
        v36 = v139;
        sub_100238E28(v30 + v32, v139);
        v37 = dispatch thunk of static Comparable.< infix(_:_:)(v35, v36, v28, v141);
        sub_100238E6C(v36);
        sub_100238E6C(v35);
        if (((v143 ^ v37) & 1) != 0)
        {
          v20 = v130;
          v2 = v127;
          v38 = v33;
          v22 = v133;
          v31 = v144;
          if ((v143 & 1) == 0)
            goto LABEL_39;
          goto LABEL_27;
        }
        v31 = v144;
        v30 += v144;
        ++v33;
      }
      while (v12 != v33);
      v38 = v12;
      v20 = v130;
      v2 = v127;
      v22 = v133;
      if ((v143 & 1) == 0)
        goto LABEL_39;
    }
LABEL_27:
    if (v38 < v22)
      goto LABEL_146;
    if (v22 < v38)
      break;
LABEL_39:
    v48 = v140;
    if (v38 < v12)
      goto LABEL_42;
LABEL_59:
    if (v38 < v22)
      goto LABEL_139;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v141 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v20 = sub_1001D4DF0(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    v67 = *((_QWORD *)v20 + 2);
    v66 = *((_QWORD *)v20 + 3);
    v21 = v67 + 1;
    if (v67 >= v66 >> 1)
      v20 = sub_1001D4DF0((char *)(v66 > 1), v67 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v21;
    v68 = v20 + 32;
    v69 = &v20[16 * v67 + 32];
    v70 = v141;
    *(_QWORD *)v69 = v22;
    *((_QWORD *)v69 + 1) = v70;
    if (v67)
    {
      while (1)
      {
        v71 = v21 - 1;
        if (v21 >= 4)
        {
          v76 = &v68[16 * v21];
          v77 = *((_QWORD *)v76 - 8);
          v78 = *((_QWORD *)v76 - 7);
          v82 = __OFSUB__(v78, v77);
          v79 = v78 - v77;
          if (v82)
            goto LABEL_128;
          v81 = *((_QWORD *)v76 - 6);
          v80 = *((_QWORD *)v76 - 5);
          v82 = __OFSUB__(v80, v81);
          v74 = v80 - v81;
          v75 = v82;
          if (v82)
            goto LABEL_129;
          v83 = v21 - 2;
          v84 = &v68[16 * v21 - 32];
          v86 = *(_QWORD *)v84;
          v85 = *((_QWORD *)v84 + 1);
          v82 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          if (v82)
            goto LABEL_131;
          v82 = __OFADD__(v74, v87);
          v88 = v74 + v87;
          if (v82)
            goto LABEL_134;
          if (v88 >= v79)
          {
            v106 = &v68[16 * v71];
            v108 = *(_QWORD *)v106;
            v107 = *((_QWORD *)v106 + 1);
            v82 = __OFSUB__(v107, v108);
            v109 = v107 - v108;
            if (v82)
              goto LABEL_138;
            v99 = v74 < v109;
            goto LABEL_96;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v100 = *((_QWORD *)v20 + 4);
            v101 = *((_QWORD *)v20 + 5);
            v82 = __OFSUB__(v101, v100);
            v93 = v101 - v100;
            v94 = v82;
            goto LABEL_90;
          }
          v73 = *((_QWORD *)v20 + 4);
          v72 = *((_QWORD *)v20 + 5);
          v82 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          v75 = v82;
        }
        if ((v75 & 1) != 0)
          goto LABEL_130;
        v83 = v21 - 2;
        v89 = &v68[16 * v21 - 32];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v92 = __OFSUB__(v90, v91);
        v93 = v90 - v91;
        v94 = v92;
        if (v92)
          goto LABEL_133;
        v95 = &v68[16 * v71];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v82 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v82)
          goto LABEL_136;
        if (__OFADD__(v93, v98))
          goto LABEL_137;
        if (v93 + v98 >= v74)
        {
          v99 = v74 < v98;
LABEL_96:
          if (v99)
            v71 = v83;
          goto LABEL_98;
        }
LABEL_90:
        if ((v94 & 1) != 0)
          goto LABEL_132;
        v102 = &v68[16 * v71];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v82 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v82)
          goto LABEL_135;
        if (v105 < v93)
          goto LABEL_15;
LABEL_98:
        v110 = v71 - 1;
        if (v71 - 1 >= v21)
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!*v140)
          goto LABEL_150;
        v111 = v20;
        v112 = &v68[16 * v110];
        v113 = *(_QWORD *)v112;
        v114 = &v68[16 * v71];
        v115 = *((_QWORD *)v114 + 1);
        sub_1002385B8(*v140 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v112, *v140 + *(_QWORD *)(v135 + 72) * *(_QWORD *)v114, *v140 + *(_QWORD *)(v135 + 72) * v115, v134);
        if (v2)
        {
LABEL_119:
          v124 = v111;
          goto LABEL_121;
        }
        if (v115 < v113)
          goto LABEL_125;
        if (v71 > *((_QWORD *)v111 + 2))
          goto LABEL_126;
        *(_QWORD *)v112 = v113;
        *(_QWORD *)&v68[16 * v110 + 8] = v115;
        v116 = *((_QWORD *)v111 + 2);
        if (v71 >= v116)
          goto LABEL_127;
        v20 = v111;
        v21 = v116 - 1;
        memmove(&v68[16 * v71], v114 + 16, 16 * (v116 - 1 - v71));
        *((_QWORD *)v111 + 2) = v116 - 1;
        if (v116 <= 2)
          goto LABEL_15;
      }
    }
    v21 = 1;
LABEL_15:
    a1 = v140;
    v19 = v141;
    v12 = v140[1];
    if (v141 >= v12)
    {
      v18 = v128;
      goto LABEL_107;
    }
  }
  v130 = v20;
  v131 = v12;
  v39 = 0;
  v40 = v31 * (v38 - 1);
  v41 = v38 * v31;
  v42 = v22;
  v43 = v22 * v31;
  do
  {
    if (v42 != v38 + v39 - 1)
    {
      v46 = v137;
      if (!v137)
        goto LABEL_151;
      v47 = v137 + v43;
      v143 = v137 + v40;
      sub_100238EF0(v137 + v43, v132);
      if (v43 < v40 || v47 >= v46 + v41)
      {
        v44 = v46 + v43;
        v45 = v143;
        swift_arrayInitWithTakeFrontToBack(v44);
      }
      else
      {
        v45 = v143;
        if (v43 != v40)
          swift_arrayInitWithTakeBackToFront(v47);
      }
      sub_100238EF0(v132, v45);
      v12 = v131;
      v31 = v144;
    }
    ++v42;
    --v39;
    v40 -= v31;
    v41 -= v31;
    v43 += v31;
  }
  while (v42 < v38 + v39);
  v48 = v140;
  v20 = v130;
  v22 = v133;
  if (v38 >= v12)
    goto LABEL_59;
LABEL_42:
  if (__OFSUB__(v38, v22))
    goto LABEL_144;
  if (v38 - v22 >= v129)
    goto LABEL_59;
  if (__OFADD__(v22, v129))
    goto LABEL_147;
  if (v22 + v129 >= v12)
    v49 = v12;
  else
    v49 = v22 + v129;
  if (v49 >= v22)
  {
    if (v38 != v49)
    {
      v130 = v20;
      v127 = v2;
      v50 = type metadata accessor for Date(0);
      v51 = v38;
      v52 = v50;
      v53 = *(_QWORD *)(v135 + 72);
      v144 = v53 * (v51 - 1);
      v141 = v51;
      v137 = v53;
      v54 = v51 * v53;
      v131 = v49;
      do
      {
        v55 = 0;
        while (1)
        {
          v143 = v22;
          v56 = *v48;
          v57 = v54;
          v58 = v54 + v55 + *v48;
          v59 = v138;
          sub_100238E28(v58, v138);
          v60 = v139;
          sub_100238E28(v144 + v55 + v56, v139);
          v61 = sub_100238EA8();
          LOBYTE(v56) = dispatch thunk of static Comparable.< infix(_:_:)(v59, v60, v52, v61);
          sub_100238E6C(v60);
          sub_100238E6C(v59);
          if ((v56 & 1) == 0)
            break;
          v62 = *v48;
          if (!*v48)
            goto LABEL_149;
          v54 = v57;
          v63 = v62 + v57 + v55;
          v64 = v62 + v144 + v55;
          sub_100238EF0(v63, v142);
          swift_arrayInitWithTakeFrontToBack(v63);
          sub_100238EF0(v142, v64);
          v55 -= v137;
          v22 = v143 + 1;
          v48 = v140;
          if (v141 == v143 + 1)
            goto LABEL_52;
        }
        v54 = v57;
LABEL_52:
        v144 += v137;
        v54 += v137;
        ++v141;
        v22 = v133;
      }
      while (v141 != v131);
      v38 = v131;
      v2 = v127;
      v20 = v130;
    }
    goto LABEL_59;
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100238394(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a1;
  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v7 = *(_QWORD *)(updated - 8);
  v8 = __chkstk_darwin(updated);
  v33 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  result = __chkstk_darwin(v10);
  v15 = (char *)&v26 - v14;
  v32 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v7 + 72);
    v35 = v17 * (v32 - 1);
    v30 = v16;
    v31 = v17;
    v34 = v17 * v32;
LABEL_5:
    v18 = 0;
    v19 = v28;
    while (1)
    {
      v20 = *a4;
      sub_100238E28(v34 + v18 + *a4, (uint64_t)v15);
      sub_100238E28(v35 + v18 + v20, (uint64_t)v12);
      v21 = sub_100238EA8();
      LOBYTE(v20) = dispatch thunk of static Comparable.< infix(_:_:)(v15, v12, v30, v21);
      sub_100238E6C((uint64_t)v12);
      result = sub_100238E6C((uint64_t)v15);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        v35 += v31;
        v34 += v31;
        if (++v32 == v27)
          return result;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = a4;
      v24 = v22 + v34 + v18;
      v25 = v22 + v35 + v18;
      sub_100238EF0(v24, v33);
      swift_arrayInitWithTakeFrontToBack(v24);
      result = sub_100238EF0(v33, v25);
      v18 -= v31;
      ++v19;
      a4 = v23;
      if (v32 == v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002385B8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t updated;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v8 = __chkstk_darwin(updated);
  v48 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v51 = a1;
  v50 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v28 = a4 + v18;
      v49 = a4 + v18;
      v51 = a2;
      v46 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        v30 = type metadata accessor for Date(0);
        v31 = -v13;
        v45 = a4;
        do
        {
          v32 = a3 + v31;
          sub_100238E28(v28 + v31, (uint64_t)v11);
          v33 = a2 + v31;
          v34 = a3;
          v35 = (uint64_t)v11;
          v36 = v48;
          sub_100238E28(a2 + v31, v48);
          v37 = sub_100238EA8();
          v38 = dispatch thunk of static Comparable.< infix(_:_:)(v35, v36, v30, v37);
          v39 = v36;
          v11 = (char *)v35;
          sub_100238E6C(v39);
          sub_100238E6C(v35);
          if ((v38 & 1) != 0)
          {
            if (v34 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v32);
              v41 = v45;
            }
            else
            {
              v40 = v34 == a2;
              v41 = v45;
              if (!v40)
                swift_arrayInitWithTakeBackToFront(v32);
            }
            v51 += v31;
          }
          else
          {
            v42 = v49;
            v49 += v31;
            if (v34 < v42 || v32 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v32);
            }
            else if (v34 != v42)
            {
              swift_arrayInitWithTakeBackToFront(v32);
            }
            v33 = a2;
            v41 = v45;
          }
          v28 = v49;
          if (v49 <= v41)
            break;
          a2 = v33;
          a3 = v32;
        }
        while (v33 > v46);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v46 = a4 + v17;
    v49 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = type metadata accessor for Date(0);
      do
      {
        v21 = v13;
        sub_100238E28(a2, (uint64_t)v11);
        v22 = v48;
        sub_100238E28(a4, v48);
        v23 = sub_100238EA8();
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v11, v22, v20, v23);
        sub_100238E6C(v22);
        sub_100238E6C((uint64_t)v11);
        v25 = v51;
        if ((v24 & 1) != 0)
        {
          v13 = v21;
          v26 = a2 + v21;
          if (v51 < a2 || v51 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v51);
          }
          else if (v51 == a2)
          {
            v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v51);
          }
        }
        else
        {
          v13 = v21;
          v27 = v50 + v21;
          if (v51 < v50 || v51 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v51);
          }
          else if (v51 != v50)
          {
            swift_arrayInitWithTakeBackToFront(v51);
          }
          v50 = v27;
          v26 = a2;
        }
        v51 = v25 + v13;
        a4 = v50;
        if (v50 >= v46)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_60:
    sub_1001D51A8(&v51, &v50, (uint64_t *)&v49);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100238A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;

  v3 = sub_100293F54();
  if (!v3)
    return 0;
  v4 = (void *)v3;
  v5 = a1;
  sub_1002941E0();
  if (v1)
  {

  }
  else
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "remObjectID");

    v20 = v8;
    v9 = sub_10001A630((uint64_t *)&unk_100844910);
    Optional.tryUnwrap(_:file:line:)(&v21, 0xD000000000000019, 0x80000001006FDA40, 0xD0000000000000A9, 0x80000001006FD840, 114, v9);

    v10 = v21;
    v11 = objc_msgSend(*(id *)(a1+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)), "list");
    v12 = sub_10001A630((uint64_t *)&unk_100843F50);
    Optional.tryUnwrap(_:file:line:)(&v20, 0x7265646E696D6572, 0xED00007473696C2ELL, 0xD000000000000095, 0x80000001006FD9A0, 152, v12);

    v13 = v20;
    v14 = objc_msgSend(v20, "remObjectID", v11);

    v20 = v14;
    Optional.tryUnwrap(_:file:line:)(&v21, 0xD000000000000016, 0x80000001006FDA60, 0xD0000000000000A9, 0x80000001006FD840, 115, v9);

    v16 = v21;
    v17 = v10;
    v18 = v16;
    sub_1003CD720(v4);
    v5 = v19;

  }
  return v5;
}

_QWORD *sub_100238CCC(_QWORD *a1)
{
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  v3 = *(_QWORD *)(updated - 8);
  __chkstk_darwin(updated);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10023794C(&v16);
  v6 = v16;
  v7 = v16[2];
  if (v7)
  {
    v16 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    v8 = (uint64_t)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100238E28(v8, (uint64_t)v5);
      v10 = *(id *)&v5[*(int *)(updated + 28)];
      v11 = sub_100238E6C((uint64_t)v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized ContiguousArray._endMutation()(v13);
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_release(v6);
  }
  else
  {
    swift_release(v16);
  }
  return a1;
}

uint64_t sub_100238E28(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_100238E6C(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

unint64_t sub_100238EA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100842190;
  if (!qword_100842190)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100842190);
  }
  return result;
}

uint64_t sub_100238EF0(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t destroy for RDAddedReminderNotificationContent(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s7remindd34RDAddedReminderNotificationContentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for RDAddedReminderNotificationContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for RDAddedReminderNotificationContent(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDAddedReminderNotificationContent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDAddedReminderNotificationContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAddedReminderNotificationContent()
{
  return &type metadata for RDAddedReminderNotificationContent;
}

uint64_t sub_1002390C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  NSString v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  if (a2)
  {
    if (a5 == 1)
    {
      swift_bridgeObjectRetain(a2);
      v14 = (id)_REMGetLocalizedString(65);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A630((uint64_t *)&unk_10083A270);
      v19 = swift_allocObject(v18, 152, 7);
      *(_OWORD *)(v19 + 16) = xmmword_1006A3C20;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      v20 = sub_1000184F8();
      *(_QWORD *)(v19 + 32) = a1;
      *(_QWORD *)(v19 + 40) = a2;
      *(_QWORD *)(v19 + 96) = &type metadata for String;
      *(_QWORD *)(v19 + 104) = v20;
      *(_QWORD *)(v19 + 64) = v20;
      *(_QWORD *)(v19 + 72) = a3;
      *(_QWORD *)(v19 + 80) = a4;
      *(_QWORD *)(v19 + 136) = &type metadata for String;
      *(_QWORD *)(v19 + 144) = v20;
      *(_QWORD *)(v19 + 112) = a6;
      *(_QWORD *)(v19 + 120) = a7;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a7);
      v21 = static String.localizedStringWithFormat(_:_:)(v15, v17, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21;
    }
    if ((a8 & 1) != 0)
    {
      if (a5 >= 2)
      {
        v52 = a1;
        swift_bridgeObjectRetain(a2);
        v31 = (void *)_REMGetLocalizedString(70);
LABEL_14:
        v33 = v31;
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        v37 = sub_10001A630((uint64_t *)&unk_10083A270);
        v38 = swift_allocObject(v37, 152, 7);
        *(_OWORD *)(v38 + 16) = xmmword_1006A3C20;
        *(_QWORD *)(v38 + 56) = &type metadata for String;
        v39 = sub_1000184F8();
        *(_QWORD *)(v38 + 32) = v52;
        *(_QWORD *)(v38 + 40) = a2;
        *(_QWORD *)(v38 + 96) = &type metadata for Int;
        *(_QWORD *)(v38 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v38 + 64) = v39;
        *(_QWORD *)(v38 + 72) = a5;
        *(_QWORD *)(v38 + 136) = &type metadata for String;
        *(_QWORD *)(v38 + 144) = v39;
        *(_QWORD *)(v38 + 112) = a6;
        *(_QWORD *)(v38 + 120) = a7;
        swift_bridgeObjectRetain(a7);
        v30 = static String.localizedStringWithFormat(_:_:)(v34, v36, v38);
        goto LABEL_19;
      }
    }
    else if (a5 >= 2)
    {
      v52 = a1;
      swift_bridgeObjectRetain(a2);
      v31 = (void *)_REMGetLocalizedString(67);
      goto LABEL_14;
    }
LABEL_17:
    v40 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(84);
    v41._object = (void *)0x80000001006FD940;
    v41._countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v41);
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "internalErrorWithDebugDescription:", v43, swift_bridgeObjectRelease().n128_f64[0]);

    return swift_willThrow(v44);
  }
  if (a5 != 1)
  {
    if ((a8 & 1) != 0)
    {
      if (a5 < 2)
        goto LABEL_17;
      v32 = (void *)_REMGetLocalizedString(71);
    }
    else
    {
      if (a5 < 2)
        goto LABEL_17;
      v32 = (void *)_REMGetLocalizedString(68);
    }
    v45 = v32;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49 = sub_10001A630((uint64_t *)&unk_10083A270);
    v50 = swift_allocObject(v49, 112, 7);
    *(_OWORD *)(v50 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v50 + 56) = &type metadata for Int;
    *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v50 + 32) = a5;
    *(_QWORD *)(v50 + 96) = &type metadata for String;
    *(_QWORD *)(v50 + 104) = sub_1000184F8();
    *(_QWORD *)(v50 + 72) = a6;
    *(_QWORD *)(v50 + 80) = a7;
    swift_bridgeObjectRetain(a7);
    v30 = static String.localizedStringWithFormat(_:_:)(v46, v48, v50);
    goto LABEL_19;
  }
  v23 = (id)_REMGetLocalizedString(66);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = sub_10001A630((uint64_t *)&unk_10083A270);
  v28 = swift_allocObject(v27, 112, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v29 = sub_1000184F8();
  *(_QWORD *)(v28 + 32) = a3;
  *(_QWORD *)(v28 + 40) = a4;
  *(_QWORD *)(v28 + 96) = &type metadata for String;
  *(_QWORD *)(v28 + 104) = v29;
  *(_QWORD *)(v28 + 64) = v29;
  *(_QWORD *)(v28 + 72) = a6;
  *(_QWORD *)(v28 + 80) = a7;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a7);
  v30 = static String.localizedStringWithFormat(_:_:)(v24, v26, v28);
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_100239534(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_1008418C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100239574(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  char v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  char v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v7._countAndFlagsBits = UUID.uuidString.getter(a1);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v5 = 0x7C6C61636F6CLL;
    v6 = 0xE600000000000000;
  }
  v9 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v4);
  if (!v9 || (v10 = sub_10001A6DC(v5, v6), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease(v6);
    v6 = v4;
    if (!v4)
    {
      v14._countAndFlagsBits = UUID.uuidString.getter(v13);
      v15 = v14._object;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v15);
      v3 = 0x7C6C61636F6CLL;
      v6 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain(v4);
    v17._countAndFlagsBits = UUID.uuidString.getter(v16);
    v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    if (v3 == 0x7C6C61636F6CLL && v6 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(0xE600000000000000);
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v6, 0x7C6C61636F6CLL, 0xE600000000000000, 0);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(0xE600000000000000);
      if ((v20 & 1) != 0)
        return 0;
      v22._countAndFlagsBits = UUID.uuidString.getter(v21);
      v23 = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(v23);
      v6 = 0xE600000000000000;
      if (*(_QWORD *)(a2 + 16))
      {
        v10 = sub_10001A6DC(0x7C6C61636F6CLL, 0xE600000000000000);
        if ((v24 & 1) != 0)
          goto LABEL_6;
      }
    }
    v12 = 0;
    goto LABEL_13;
  }
LABEL_6:
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10);
  swift_bridgeObjectRetain(v12);
LABEL_13:
  swift_bridgeObjectRelease(v6);
  return v12;
}

uint64_t sub_100239760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008418D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008418D0);
  if (qword_100837660 != -1)
    swift_once(&qword_100837660, sub_1004A18FC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872100);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002397F0(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v2 = v1;
  v44 = *v2;
  v4 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_1008419A8);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_1008419B0);
  v11 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  v41 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_1008419B8);
  v15 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  v43 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v2[8];
  v45 = a1;
  v19 = swift_allocObject(&unk_1007EAA80, 32, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = 1;
  swift_retain_n(v18);
  v20 = sub_10001A630(&qword_1008419C0);
  v21 = sub_1000A5F84(&qword_1008419C8, &qword_1008419C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100188E74, v19, 0, 0, 0, 0, 0, 0, v20, v21);
  swift_release(v18);
  swift_release(v19);
  v45 = (id)v2[6];
  v22 = v45;
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 1, 1, v23);
  v24 = sub_1000D30A4();
  v25 = sub_1000A5F84(&qword_1008419D0, &qword_1008419A8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v26 = sub_10009FC50((unint64_t *)&qword_1008380B0, (uint64_t (*)(uint64_t))sub_1000D30A4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v27 = v22;
  Publisher.receive<A>(on:options:)(&v45, v6, v7, v24, v25, v26);
  sub_10000882C((uint64_t)v6, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
  v28 = swift_allocObject(&unk_1007EAAA8, 24, 7);
  swift_weakInit(v28 + 16, v2);
  v29 = sub_10001A630(&qword_1008419D8);
  v30 = sub_1000A5F84(&qword_1008419E0, &qword_1008419B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = v40;
  Publisher.map<A>(_:)(sub_10023DB38, v28, v40, v29, v30);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v31);
  v32 = v2[8];
  v33 = (_QWORD *)swift_allocObject(&unk_1007EAAD0, 40, 7);
  v33[2] = sub_10023AC9C;
  v33[3] = 0;
  v33[4] = v32;
  sub_1000A5F84(&qword_1008419E8, &qword_1008419B8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain_n(v32);
  v34 = v42;
  v35 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v2, sub_10023DB6C, v33, 0, 0, v42, v44);
  swift_release(v32);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v34);
  v36 = v2[7];
  v2[7] = v35;
  return swift_release(v36);
}

uint64_t sub_100239BFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __n128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v21[24];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v21, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v12 = result;
    v13 = sub_100233540(v10);
    Date.init()(v13);
    v14 = sub_100239D50((uint64_t)v13, (uint64_t)v9);
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v15);
    v16 = sub_100233868(v10);
    v17 = sub_10023A804(v16);
    swift_bridgeObjectRelease();
    v20 = v14;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    sub_1001E2D14(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release(v12);
    v19 = v20;
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  *a3 = v19;
  return result;
}

_QWORD *sub_100239D50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char v109[16];
  uint64_t v110;
  uint64_t v111;
  char v112[16];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];
  _QWORD *v116;

  v5 = *v2;
  v99 = sub_10001A630(&qword_100841A00);
  __chkstk_darwin(v99);
  v107 = (uint64_t)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_100839A98);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v92 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v91 = (uint64_t)&v87 - v11;
  __chkstk_darwin(v12);
  v97 = (uint64_t)&v87 - v13;
  __chkstk_darwin(v14);
  v106 = (uint64_t)&v87 - v15;
  v105 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v16 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (uint64_t)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v100 = (uint64_t)&v87 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v87 - v21;
  v23 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  __chkstk_darwin(v23);
  v95 = (uint64_t)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v96 = (uint64_t)&v87 - v26;
  __chkstk_darwin(v27);
  v29 = (char *)&v87 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v87 - v31;
  v113 = a2;
  v90 = a1;
  v33 = sub_10020094C((void (*)(uint64_t))sub_10023DBBC, (uint64_t)v112, a1);
  v110 = a2;
  v111 = v5;
  v34 = sub_1003517F8((void (*)(_QWORD, __n128))sub_10023DBD8, (uint64_t)v109, (uint64_t)v33);
  swift_bridgeObjectRelease();
  v115[0] = (uint64_t)v34;
  swift_bridgeObjectRetain(v34);
  sub_10023B4B8(v115);
  v35 = swift_bridgeObjectRelease();
  v36 = v115[0];
  v37 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56);
  v94 = v7;
  v98 = v37;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v37)(v32, 1, 1, v7, v35);
  v116 = _swiftEmptyArrayStorage;
  v38 = *(_QWORD *)(v36 + 16);
  v108 = v32;
  if (v38)
  {
    v39 = (uint64_t)v32;
    v103 = v8;
    v40 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v88 = v36;
    v101 = v40;
    v41 = v36 + v40;
    v102 = *(_QWORD *)(v16 + 72);
    v42 = v94;
    v43 = v96;
    while (1)
    {
      sub_1000151E8(v41, (uint64_t)v22, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_100008868(v39, (uint64_t)v29, (uint64_t *)&unk_10084BDD0);
      v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
      if (v45((uint64_t)v29, 1, v42) == 1)
      {
        sub_10000882C(v39, (uint64_t *)&unk_10084BDD0);
        sub_10000882C((uint64_t)v29, (uint64_t *)&unk_10084BDD0);
        sub_100008868((uint64_t)&v22[*(int *)(v105 + 24)], v39, (uint64_t *)&unk_10084BDD0);
        sub_1000151E8((uint64_t)v22, v104, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v46 = (unint64_t)v116;
        if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
          v46 = sub_1002CA0A0(0, *(_QWORD *)(v46 + 16) + 1, 1, v46);
        v48 = *(_QWORD *)(v46 + 16);
        v47 = *(_QWORD *)(v46 + 24);
        if (v48 >= v47 >> 1)
          v46 = sub_1002CA0A0(v47 > 1, v48 + 1, 1, v46);
        *(_QWORD *)(v46 + 16) = v48 + 1;
        v44 = v102;
        sub_10023DB78(v104, v46 + v101 + v48 * v102);
        v116 = (_QWORD *)v46;
      }
      else
      {
        v49 = v106;
        sub_100128FE0((uint64_t)v29, v106);
        v50 = &v22[*(int *)(v105 + 24)];
        sub_100008868(v49, v43, &qword_100839A98);
        v98(v43, 0, 1, v42);
        v51 = v107 + *(int *)(v99 + 48);
        v52 = (uint64_t)v50;
        v53 = v107;
        sub_100008868(v52, v107, (uint64_t *)&unk_10084BDD0);
        sub_100008868(v43, v51, (uint64_t *)&unk_10084BDD0);
        if (v45(v53, 1, v42) == 1)
        {
          sub_10000882C(v43, (uint64_t *)&unk_10084BDD0);
          v54 = &qword_100841A00;
          if (v45(v51, 1, v42) != 1)
            goto LABEL_20;
          sub_10000882C(v107, (uint64_t *)&unk_10084BDD0);
        }
        else
        {
          v55 = v95;
          sub_100008868(v53, v95, (uint64_t *)&unk_10084BDD0);
          v56 = v45(v51, 1, v42);
          v54 = &qword_100841A00;
          v57 = v97;
          if (v56 == 1)
            goto LABEL_19;
          sub_100128FE0(v51, v97);
          v58 = type metadata accessor for Date(0);
          v93 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v59 = v57;
          v60 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v57, v58, v93);
          v61 = v91;
          sub_100008868(v55, v91, &qword_100839A98);
          v62 = v59;
          v63 = v61;
          v64 = v92;
          sub_100008868(v62, v92, &qword_100839A98);
          if ((v60 & 1) == 0)
          {
            sub_10000882C(v64, &qword_100839A98);
            sub_10000882C(v63, &qword_100839A98);
            sub_10000882C(v97, &qword_100839A98);
            v54 = (uint64_t *)&unk_10084BDD0;
            v42 = v94;
LABEL_19:
            v67 = v96;
            sub_10000882C(v96, (uint64_t *)&unk_10084BDD0);
            v68 = v55;
            v43 = v67;
            sub_10000882C(v68, &qword_100839A98);
LABEL_20:
            sub_10000882C(v107, v54);
LABEL_21:
            sub_1000151E8((uint64_t)v22, v100, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
            v69 = (unint64_t)v116;
            if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
              v69 = sub_1002CA0A0(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
            v71 = *(_QWORD *)(v69 + 16);
            v70 = *(_QWORD *)(v69 + 24);
            if (v71 >= v70 >> 1)
              v69 = sub_1002CA0A0(v70 > 1, v71 + 1, 1, v69);
            *(_QWORD *)(v69 + 16) = v71 + 1;
            v44 = v102;
            sub_10023DB78(v100, v69 + v101 + v71 * v102);
            v116 = (_QWORD *)v69;
            sub_10000882C(v106, &qword_100839A98);
            goto LABEL_4;
          }
          v42 = v94;
          LODWORD(v93) = dispatch thunk of static Equatable.== infix(_:_:)(v63 + *(int *)(v94 + 36), v64 + *(int *)(v94 + 36), v58, v93);
          sub_10000882C(v64, &qword_100839A98);
          sub_10000882C(v63, &qword_100839A98);
          sub_10000882C(v97, &qword_100839A98);
          v65 = v96;
          sub_10000882C(v96, (uint64_t *)&unk_10084BDD0);
          v66 = v55;
          v43 = v65;
          sub_10000882C(v66, &qword_100839A98);
          sub_10000882C(v107, (uint64_t *)&unk_10084BDD0);
          if ((v93 & 1) == 0)
            goto LABEL_21;
        }
        sub_10000882C(v106, &qword_100839A98);
        v44 = v102;
      }
LABEL_4:
      sub_10001C744((uint64_t)v22, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v41 += v44;
      --v38;
      v39 = (uint64_t)v108;
      if (!v38)
      {
        v72 = v88;
        goto LABEL_28;
      }
    }
  }
  v72 = v36;
LABEL_28:
  swift_release(v72);
  v73 = v90;
  v74 = v89;
  if (qword_100837030 != -1)
    swift_once(&qword_100837030, sub_100239760);
  v75 = type metadata accessor for Logger(0);
  sub_10001AAA8(v75, (uint64_t)qword_1008418D0);
  v76 = v116;
  swift_retain_n(v74);
  swift_bridgeObjectRetain_n(v73, 2);
  v77 = swift_bridgeObjectRetain_n(v76, 2);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(32, -1);
    v81 = swift_slowAlloc(32, -1);
    v115[0] = v81;
    *(_DWORD *)v80 = 136446722;
    v82 = *(_QWORD *)(v74 + 16);
    v83 = *(_QWORD *)(v74 + 24);
    swift_bridgeObjectRetain(v83);
    v114 = sub_10001A820(v82, v83, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
    swift_release_n(v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 12) = 2048;
    v84 = *(_QWORD *)(v73 + 16);
    swift_bridgeObjectRelease();
    v114 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 22) = 2048;
    v85 = v76[2];
    swift_bridgeObjectRelease();
    v114 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "%{public}s filtered %ld reminders down to %ld", (uint8_t *)v80, 0x20u);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

  }
  else
  {
    swift_release_n(v74);

    swift_bridgeObjectRelease_n(v73, 2);
    swift_bridgeObjectRelease_n(v76, 2);
  }
  sub_10000882C((uint64_t)v108, (uint64_t *)&unk_10084BDD0);
  swift_beginAccess(&v116, v115, 0, 0);
  return v116;
}

_QWORD *sub_10023A804(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  Class isa;
  id v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v40 = type metadata accessor for RDTimelineEngineLocationReminder(0);
  v2 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = a1;
  v43 = a1;
  v9 = sub_10001A630(&qword_1008419F0);
  v10 = sub_1000A5F84(&qword_1008419F8, &qword_1008419F0, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = Sequence.unique<A>(by:)(sub_10023B330, 0, v9, &type metadata for String, v10, &protocol witness table for String);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v43 = _swiftEmptyArrayStorage;
    sub_1001C21C4(0, v12, 0);
    v13 = (void *)objc_opt_self(REMList);
    v14 = *(unsigned __int8 *)(v2 + 80);
    v36[1] = v11;
    v15 = v11 + ((v14 + 32) & ~v14);
    v38 = *(_QWORD *)(v2 + 72);
    v39 = v13;
    v16 = v43;
    do
    {
      sub_1000151E8(v15, (uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v18 = objc_msgSend(v39, "objectIDWithUUID:", isa);

      v19 = (char *)v8 + *(int *)(v5 + 24);
      v20 = sub_10001A630(&qword_100839A98);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
      v21 = *(void **)&v4[*(int *)(v40 + 24)];
      *v8 = v18;
      v8[1] = 0;
      v8[2] = 0xE000000000000000;
      *(_QWORD *)((char *)v8 + *(int *)(v5 + 28)) = v21;
      v22 = v21;
      sub_10001C744((uint64_t)v4, type metadata accessor for RDTimelineEngineLocationReminder);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1001C21C4(0, v16[2] + 1, 1);
        v16 = v43;
      }
      v24 = v16[2];
      v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        sub_1001C21C4(v23 > 1, v24 + 1, 1);
        v16 = v43;
      }
      v16[2] = v24 + 1;
      sub_10023DB78((uint64_t)v8, (uint64_t)v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v24);
      v15 += v38;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = _swiftEmptyArrayStorage;
  }
  v26 = v36[2];
  v25 = v37;
  if (qword_100837030 != -1)
    swift_once(&qword_100837030, sub_100239760);
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_1008418D0);
  swift_retain();
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v16);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(32, -1);
    v32 = (_QWORD *)swift_slowAlloc(32, -1);
    v43 = v32;
    *(_DWORD *)v31 = 136446722;
    v33 = *(_QWORD *)(v26 + 16);
    v34 = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain(v34);
    v41 = sub_10001A820(v33, v34, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_release(v26);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2048;
    v41 = v25[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2048;
    v41 = v16[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s filtered %ld LOCATION reminders down to %ld", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v26);
  }
  return v16;
}

void sub_10023AC9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;

  v2 = *a2;
  v3 = objc_autoreleasePoolPush();
  sub_10047AE7C(v2);
  objc_autoreleasePoolPop(v3);
}

double sub_10023ACDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a3;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RDTimelineEngineDueReminder(0);
  v30 = *(int *)(v15 + 32);
  v16 = *(_QWORD *)(a1 + v30);
  if (v16)
  {
    v17 = (int *)v15;
    if ((static Date.< infix(_:_:)(a1 + *(int *)(v15 + 20), a2) & 1) != 0)
    {
      v18 = v17[7];
      v29 = a2;
      v19 = a1 + v18;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v11);
      v28 = v19;
      sub_100454C58(v16, v29, (uint64_t)v7, (uint64_t)v10);
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
      {
        v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v21(v14, v10, v11);
        v22 = type metadata accessor for UUID(0);
        v23 = v31;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v31, a1, v22);
        v21((char *)(v23 + v17[5]), v14, v11);
        v24 = *(_BYTE *)(a1 + v17[6]);
        v25 = v23 + v17[7];
        v26 = type metadata accessor for DateComponents(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v25, v28, v26);
        v27 = *(_QWORD *)(a1 + v30);
        *(_BYTE *)(v23 + v17[6]) = v24;
        *(_QWORD *)(v23 + v17[8]) = v27;
        *(_QWORD *)&result = swift_bridgeObjectRetain(v27).n128_u64[0];
        return result;
      }
      sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    }
  }
  sub_1000151E8(a1, v31, type metadata accessor for RDTimelineEngineDueReminder);
  return result;
}

uint64_t sub_10023AF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v54 = a3;
  v52 = a2;
  v50 = sub_10001A630(&qword_100841A08);
  __chkstk_darwin(v50);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - v7;
  v53 = sub_10001A630(&qword_100839A98);
  v45 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v51 = (uint64_t)&v44 - v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v44 - v21;
  v23 = a1 + *(int *)(type metadata accessor for RDTimelineEngineDueReminder(0) + 20);
  v55 = v14;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v49(v22, v23, v13);
  v24 = (void *)objc_opt_self(REMList);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v24, "objectIDWithUUID:", isa);

  v28 = Date.addingTimeInterval(_:)(v27, -900.0);
  Date.addingTimeInterval(_:)(v28, 300.0);
  v48 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v19, v16, v13);
  if ((result & 1) != 0)
  {
    v46 = v26;
    v47 = v22;
    v30 = (uint64_t)v10;
    v31 = v50;
    v32 = &v8[*(int *)(v50 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v33(v8, v19, v13);
    v33(v32, v16, v13);
    v34 = &v5[*(int *)(v31 + 48)];
    v35 = (void (*)(char *, char *, uint64_t))v49;
    v49(v5, (uint64_t)v8, v13);
    v35(v34, v32, v13);
    v33((char *)v30, v5, v13);
    v36 = *(void (**)(char *, uint64_t))(v55 + 8);
    v36(v34, v13);
    v37 = &v5[*(int *)(v31 + 48)];
    v33(v5, v8, v13);
    v33(v37, v32, v13);
    v38 = v53;
    v33((char *)(v30 + *(int *)(v53 + 36)), v37, v13);
    v36(v5, v13);
    v39 = v51;
    sub_100128FE0(v30, v51);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v39 + *(int *)(v38 + 36), v52, v13, v48) & 1) != 0)
    {

      sub_10000882C(v39, &qword_100839A98);
      v36(v47, v13);
      v40 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v54, 1, 1, v40);
    }
    else
    {
      v36(v47, v13);
      v41 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
      v42 = v54;
      v43 = (uint64_t)v54 + *(int *)(v41 + 24);
      sub_100128FE0(v39, v43);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v38);
      *v42 = v46;
      v42[1] = 0;
      v42[2] = 0xE000000000000000;
      *(_QWORD *)((char *)v42 + *(int *)(v41 + 28)) = 0;
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v42, 0, 1, v41);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10023B330(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for RDTimelineEngineLocationReminder(0) + 24));
  v4 = objc_opt_self(CLCircularRegion);
  v5 = swift_dynamicCastObjCClass(v3, v4);
  if (v5)
  {
    v6 = (void *)v5;
    v13 = 0;
    v14 = 0xE000000000000000;
    v7 = v3;
    objc_msgSend(v6, "center");
    Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v8._countAndFlagsBits = 44;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    objc_msgSend(v6, "center");
    Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

    v9 = v13;
    v10 = v14;
  }
  else
  {
    v11 = objc_msgSend(v3, "identifier");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v10 = v12;

  }
  *a2 = v9;
  a2[1] = v10;
}

uint64_t sub_10023B454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for RDRelevantShortcutsProcessor()
{
  return objc_opt_self(_TtC7remindd28RDRelevantShortcutsProcessor);
}

void sub_10023B4B8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001D60FC(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10023B538(v5);
  *a1 = v3;
}

void sub_10023B538(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  id *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  char *v66;
  unint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  id *v72;
  uint64_t v73;
  id *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  id *v115;
  id v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::Int v131;
  uint64_t v132;
  unint64_t v133;
  Swift::Int v134;
  Swift::Int v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  Swift::Int v140;
  _QWORD *v141;
  uint64_t v142;
  id *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  int v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  id v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  Swift::Int v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  uint64_t v196;
  char v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  _QWORD *v234;
  Swift::Int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  id *v240;
  id *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  Swift::Int v250;
  id *v251;
  unint64_t v252;
  id *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  Swift::Int v267;
  Swift::Int v268;
  id *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int (*v273)(uint64_t, uint64_t, uint64_t);
  Swift::Int v274;
  id *v275;
  uint64_t v276;
  uint64_t v277;

  v2 = type metadata accessor for UUID(0);
  v263 = *(_QWORD *)(v2 - 8);
  v264 = v2;
  __chkstk_darwin(v2);
  v260 = (char *)&v230 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v259 = (char *)&v230 - v5;
  __chkstk_darwin(v6);
  v244 = (char *)&v230 - v7;
  __chkstk_darwin(v8);
  v243 = (char *)&v230 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v230 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v230 - v14;
  v16 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  __chkstk_darwin(v16);
  v18 = (char *)&v230 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v270 = (uint64_t)&v230 - v20;
  __chkstk_darwin(v21);
  v248 = (char *)&v230 - v22;
  __chkstk_darwin(v23);
  v249 = (uint64_t)&v230 - v24;
  __chkstk_darwin(v25);
  v237 = (uint64_t)&v230 - v26;
  __chkstk_darwin(v27);
  v238 = (uint64_t)&v230 - v28;
  v271 = sub_10001A630(&qword_100839A98);
  v265 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v256 = (uint64_t)&v230 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v258 = (uint64_t)&v230 - v31;
  __chkstk_darwin(v32);
  v239 = (uint64_t)&v230 - v33;
  __chkstk_darwin(v34);
  v36 = (char *)&v230 - v35;
  __chkstk_darwin(v37);
  v236 = (uint64_t)&v230 - v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v230 - v40;
  v277 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v254 = *(_QWORD *)(v277 - 8);
  __chkstk_darwin(v277);
  v247 = (uint64_t)&v230 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v272 = (uint64_t)&v230 - v44;
  __chkstk_darwin(v45);
  v269 = (id *)((char *)&v230 - v46);
  __chkstk_darwin(v47);
  v49 = (id *)((char *)&v230 - v48);
  __chkstk_darwin(v50);
  v52 = (id *)((char *)&v230 - v51);
  __chkstk_darwin(v53);
  v253 = (id *)((char *)&v230 - v54);
  __chkstk_darwin(v55);
  v241 = (id *)((char *)&v230 - v56);
  __chkstk_darwin(v57);
  v240 = (id *)((char *)&v230 - v58);
  v59 = a1[1];
  v60 = _minimumMergeRunLength(_:)(v59);
  if (v60 >= v59)
  {
    if ((v59 & 0x8000000000000000) == 0)
    {
      if (v59)
        sub_10023C9DC(0, v59, 1, a1);
      return;
    }
    goto LABEL_173;
  }
  if (v59 >= 0)
    v61 = v59;
  else
    v61 = v59 + 1;
  if (v59 < -1)
    goto LABEL_181;
  v235 = v60;
  if (v59 >= 2)
  {
    v232 = v15;
    v233 = v12;
    v62 = v61 >> 1;
    v63 = static Array._allocateBufferUninitialized(minimumCapacity:)(v61 >> 1, v277);
    *(_QWORD *)(v63 + 16) = v62;
    v64 = *(unsigned __int8 *)(v254 + 80);
    v234 = (_QWORD *)v63;
    v252 = v63 + ((v64 + 32) & ~v64);
LABEL_13:
    v65 = 0;
    v66 = (char *)_swiftEmptyArrayStorage;
    v261 = v18;
    v262 = a1;
    v255 = v36;
    v231 = v41;
    v275 = v49;
    v251 = v52;
    while (1)
    {
      v68 = v65 + 1;
      v246 = v66;
      v250 = v65;
      if (v65 + 1 >= v59)
      {
        v97 = (uint64_t)v269;
        goto LABEL_57;
      }
      v274 = v59;
      v69 = *a1;
      v70 = v65;
      v71 = *(_QWORD *)(v254 + 72);
      v268 = v65 + 1;
      v72 = v240;
      sub_1000151E8(v69 + v71 * v68, (uint64_t)v240, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v242 = v69;
      v276 = v71;
      v73 = v69 + v71 * v70;
      v74 = v241;
      sub_1000151E8(v73, (uint64_t)v241, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v75 = v238;
      sub_100008868((uint64_t)v72 + *(int *)(v277 + 24), v238, (uint64_t *)&unk_10084BDD0);
      v273 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v265 + 48);
      if (v273(v75, 1, v271) == 1)
        goto LABEL_20;
      v76 = (uint64_t)v231;
      sub_100128FE0(v238, (uint64_t)v231);
      v77 = (uint64_t)v74 + *(int *)(v277 + 24);
      v78 = v76;
      v79 = v237;
      sub_100008868(v77, v237, (uint64_t *)&unk_10084BDD0);
      v80 = v273(v79, 1, v271);
      v81 = (uint64_t)v248;
      if (v80 == 1)
        break;
      v98 = v79;
      v99 = v236;
      sub_100128FE0(v98, v236);
      LODWORD(v267) = static Date.< infix(_:_:)(v78, v99);
      sub_10000882C(v99, &qword_100839A98);
      sub_10000882C(v78, &qword_100839A98);
LABEL_27:
      sub_10001C744((uint64_t)v241, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_10001C744((uint64_t)v240, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v59 = v274;
      v49 = v275;
      if (v250 + 2 >= v274)
      {
        v97 = (uint64_t)v269;
        v68 = v250 + 2;
        goto LABEL_43;
      }
      v266 = v276 * v268;
      v100 = v242;
      v268 = v250 + 2;
      v245 = v276 * (v250 + 2);
      v101 = (uint64_t)v253;
      while (1)
      {
        v102 = (id *)v101;
        sub_1000151E8(v100 + v245, v101, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_1000151E8(v100 + v266, (uint64_t)v52, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v103 = v249;
        sub_100008868((uint64_t)v102 + *(int *)(v277 + 24), v249, (uint64_t *)&unk_10084BDD0);
        v104 = v273(v103, 1, v271);
        v105 = v103;
        if (v104 != 1)
        {
          sub_100128FE0(v249, (uint64_t)v36);
          sub_100008868((uint64_t)v52 + *(int *)(v277 + 24), v81, (uint64_t *)&unk_10084BDD0);
          if (v273(v81, 1, v271) != 1)
          {
            v123 = v239;
            sub_100128FE0(v81, v239);
            v122 = static Date.< infix(_:_:)(v36, v123);
            sub_10000882C(v123, &qword_100839A98);
            sub_10000882C((uint64_t)v36, &qword_100839A98);
            v97 = (uint64_t)v269;
            goto LABEL_38;
          }
          sub_10000882C((uint64_t)v36, &qword_100839A98);
          v105 = v81;
          v102 = v253;
        }
        sub_10000882C(v105, (uint64_t *)&unk_10084BDD0);
        v106 = objc_msgSend(*v102, "uuid");
        v107 = v243;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

        v109 = UUID.uuidString.getter(v108);
        v111 = v110;
        v112 = *(void (**)(char *, uint64_t))(v263 + 8);
        v113 = v107;
        v114 = v264;
        v112(v113, v264);
        v115 = v52;
        v116 = objc_msgSend(*v52, "uuid");
        v117 = v244;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v116);

        v119 = UUID.uuidString.getter(v118);
        v121 = v120;
        v112(v117, v114);
        if (v109 != v119)
          goto LABEL_35;
        if (v111 == v121)
        {
          swift_bridgeObjectRelease_n(v111, 2);
          v122 = 0;
        }
        else
        {
LABEL_35:
          v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v111, v119, v121, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        a1 = v262;
        v36 = v255;
        v97 = (uint64_t)v269;
        v49 = v275;
        v52 = v115;
LABEL_38:
        sub_10001C744((uint64_t)v52, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10001C744((uint64_t)v253, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        if (((v267 ^ v122) & 1) != 0)
          break;
        v100 += v276;
        ++v268;
        v59 = v274;
        v81 = (uint64_t)v248;
        v101 = (uint64_t)v253;
        if (v274 == v268)
        {
          v68 = v274;
          v18 = v261;
          v97 = (uint64_t)v269;
          goto LABEL_43;
        }
      }
      v18 = v261;
      v68 = v268;
      v59 = v274;
LABEL_43:
      v66 = v246;
      v65 = v250;
      if ((v267 & 1) != 0)
      {
        if (v68 >= v250)
        {
          if (v250 < v68)
          {
            v124 = 0;
            v125 = v276 * (v68 - 1);
            v126 = v68 * v276;
            v127 = v250;
            v128 = v250 * v276;
            do
            {
              if (v127 != v68 + v124 - 1)
              {
                v131 = v68;
                v132 = v242;
                if (!v242)
                  goto LABEL_179;
                v133 = v242 + v128;
                v273 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v242 + v125);
                sub_10023DB78(v242 + v128, v247);
                if (v128 < v125 || v133 >= v132 + v126)
                {
                  v129 = v132 + v128;
                  v130 = (uint64_t)v273;
                  swift_arrayInitWithTakeFrontToBack(v129);
                }
                else
                {
                  v130 = (uint64_t)v273;
                  if (v128 != v125)
                    swift_arrayInitWithTakeBackToFront(v133);
                }
                sub_10023DB78(v247, v130);
                v66 = v246;
                v68 = v131;
                v59 = v274;
                v49 = v275;
              }
              ++v127;
              --v124;
              v125 -= v276;
              v126 -= v276;
              v128 += v276;
            }
            while (v127 < v68 + v124);
            v18 = v261;
            v36 = v255;
            v97 = (uint64_t)v269;
            v65 = v250;
            v52 = v251;
          }
          goto LABEL_57;
        }
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
        goto LABEL_176;
      }
LABEL_57:
      if (v68 >= v59)
        goto LABEL_85;
      v185 = __OFSUB__(v68, v65);
      v134 = v68 - v65;
      if (v185)
        goto LABEL_172;
      if (v134 >= v235)
        goto LABEL_84;
      if (__OFADD__(v250, v235))
        goto LABEL_175;
      if (v250 + v235 >= v59)
        v135 = v59;
      else
        v135 = v250 + v235;
      if (v135 < v250)
      {
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
        __break(1u);
        return;
      }
      if (v68 == v135)
      {
        v65 = v250;
        goto LABEL_85;
      }
      v136 = *(_QWORD *)(v254 + 72);
      v276 = v136 * (v68 - 1);
      v266 = v136;
      v137 = v68 * v136;
      v245 = v135;
      while (2)
      {
        v139 = 0;
        v140 = v250;
        v267 = v137;
        v268 = v68;
        while (2)
        {
          v141 = a1;
          v142 = *a1;
          v274 = v137 + v139;
          sub_1000151E8(v137 + v139 + v142, (uint64_t)v49, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          v273 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v276 + v139);
          sub_1000151E8(v276 + v139 + v142, v97, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          v143 = (id *)v97;
          v144 = v270;
          sub_100008868((uint64_t)v49 + *(int *)(v277 + 24), v270, (uint64_t *)&unk_10084BDD0);
          v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v265 + 48);
          v146 = v145(v144, 1, v271);
          v147 = v144;
          if (v146 != 1)
          {
            v148 = v258;
            sub_100128FE0(v270, v258);
            sub_100008868((uint64_t)v143 + *(int *)(v277 + 24), (uint64_t)v18, (uint64_t *)&unk_10084BDD0);
            if (v145((uint64_t)v18, 1, v271) == 1)
            {
              sub_10000882C(v148, &qword_100839A98);
              v147 = (uint64_t)v18;
              v143 = v269;
              break;
            }
            v164 = v256;
            sub_100128FE0((uint64_t)v18, v256);
            v163 = static Date.< infix(_:_:)(v148, v164);
            sub_10000882C(v164, &qword_100839A98);
            sub_10000882C(v148, &qword_100839A98);
            a1 = v141;
LABEL_80:
            v97 = (uint64_t)v269;
            sub_10001C744((uint64_t)v269, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
            sub_10001C744((uint64_t)v49, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
            if ((v163 & 1) == 0)
              goto LABEL_69;
            v165 = *a1;
            v137 = v267;
            if (!*a1)
              goto LABEL_177;
            v166 = v165 + v267 + v139;
            v167 = v165 + v276 + v139;
            sub_10023DB78(v166, v272);
            swift_arrayInitWithTakeFrontToBack(v166);
            sub_10023DB78(v272, v167);
            v139 -= v266;
            ++v140;
            v138 = v268;
            v49 = v275;
            if (v268 == v140)
              goto LABEL_70;
            continue;
          }
          break;
        }
        sub_10000882C(v147, (uint64_t *)&unk_10084BDD0);
        v149 = objc_msgSend(*v49, "uuid");
        v150 = v259;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v149);

        v152 = UUID.uuidString.getter(v151);
        v154 = v153;
        v155 = v264;
        v156 = *(void (**)(char *, uint64_t))(v263 + 8);
        v156(v150, v264);
        v157 = objc_msgSend(*v143, "uuid");
        v158 = v260;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v157);

        v160 = UUID.uuidString.getter(v159);
        v162 = v161;
        v156(v158, v155);
        if (v152 != v160 || v154 != v162)
        {
          v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v152, v154, v160, v162, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v18 = v261;
          a1 = v262;
          v49 = v275;
          goto LABEL_80;
        }
        swift_bridgeObjectRelease_n(v154, 2);
        v97 = (uint64_t)v269;
        sub_10001C744((uint64_t)v269, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v49 = v275;
        sub_10001C744((uint64_t)v275, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v18 = v261;
        a1 = v262;
LABEL_69:
        v137 = v267;
        v138 = v268;
LABEL_70:
        v68 = v138 + 1;
        v276 += v266;
        v137 += v266;
        if (v68 != v245)
          continue;
        break;
      }
      v68 = v245;
      v36 = v255;
      v66 = v246;
      v52 = v251;
LABEL_84:
      v65 = v250;
LABEL_85:
      if (v68 < v65)
      {
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v66);
      v268 = v68;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        v66 = v246;
      else
        v66 = sub_1001D4DF0(0, *((_QWORD *)v246 + 2) + 1, 1, v246);
      v170 = *((_QWORD *)v66 + 2);
      v169 = *((_QWORD *)v66 + 3);
      v67 = v170 + 1;
      if (v170 >= v169 >> 1)
        v66 = sub_1001D4DF0((char *)(v169 > 1), v170 + 1, 1, v66);
      *((_QWORD *)v66 + 2) = v67;
      v171 = v66 + 32;
      v172 = &v66[16 * v170 + 32];
      v173 = v268;
      *(_QWORD *)v172 = v250;
      *((_QWORD *)v172 + 1) = v173;
      if (v170)
      {
        while (1)
        {
          v174 = v67 - 1;
          if (v67 >= 4)
          {
            v179 = &v171[16 * v67];
            v180 = *((_QWORD *)v179 - 8);
            v181 = *((_QWORD *)v179 - 7);
            v185 = __OFSUB__(v181, v180);
            v182 = v181 - v180;
            if (v185)
              goto LABEL_156;
            v184 = *((_QWORD *)v179 - 6);
            v183 = *((_QWORD *)v179 - 5);
            v185 = __OFSUB__(v183, v184);
            v177 = v183 - v184;
            v178 = v185;
            if (v185)
              goto LABEL_157;
            v186 = v67 - 2;
            v187 = &v171[16 * v67 - 32];
            v189 = *(_QWORD *)v187;
            v188 = *((_QWORD *)v187 + 1);
            v185 = __OFSUB__(v188, v189);
            v190 = v188 - v189;
            if (v185)
              goto LABEL_159;
            v185 = __OFADD__(v177, v190);
            v191 = v177 + v190;
            if (v185)
              goto LABEL_162;
            if (v191 >= v182)
            {
              v209 = &v171[16 * v174];
              v211 = *(_QWORD *)v209;
              v210 = *((_QWORD *)v209 + 1);
              v185 = __OFSUB__(v210, v211);
              v212 = v210 - v211;
              if (v185)
                goto LABEL_166;
              v202 = v177 < v212;
              goto LABEL_122;
            }
          }
          else
          {
            if (v67 != 3)
            {
              v203 = *((_QWORD *)v66 + 4);
              v204 = *((_QWORD *)v66 + 5);
              v185 = __OFSUB__(v204, v203);
              v196 = v204 - v203;
              v197 = v185;
              goto LABEL_116;
            }
            v176 = *((_QWORD *)v66 + 4);
            v175 = *((_QWORD *)v66 + 5);
            v185 = __OFSUB__(v175, v176);
            v177 = v175 - v176;
            v178 = v185;
          }
          if ((v178 & 1) != 0)
            goto LABEL_158;
          v186 = v67 - 2;
          v192 = &v171[16 * v67 - 32];
          v194 = *(_QWORD *)v192;
          v193 = *((_QWORD *)v192 + 1);
          v195 = __OFSUB__(v193, v194);
          v196 = v193 - v194;
          v197 = v195;
          if (v195)
            goto LABEL_161;
          v198 = &v171[16 * v174];
          v200 = *(_QWORD *)v198;
          v199 = *((_QWORD *)v198 + 1);
          v185 = __OFSUB__(v199, v200);
          v201 = v199 - v200;
          if (v185)
            goto LABEL_164;
          if (__OFADD__(v196, v201))
            goto LABEL_165;
          if (v196 + v201 >= v177)
          {
            v202 = v177 < v201;
LABEL_122:
            if (v202)
              v174 = v186;
            goto LABEL_124;
          }
LABEL_116:
          if ((v197 & 1) != 0)
            goto LABEL_160;
          v205 = &v171[16 * v174];
          v207 = *(_QWORD *)v205;
          v206 = *((_QWORD *)v205 + 1);
          v185 = __OFSUB__(v206, v207);
          v208 = v206 - v207;
          if (v185)
            goto LABEL_163;
          if (v208 < v196)
            goto LABEL_15;
LABEL_124:
          v213 = v174 - 1;
          if (v174 - 1 >= v67)
          {
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
            goto LABEL_167;
          }
          if (!*a1)
            goto LABEL_178;
          v214 = v66;
          v215 = &v171[16 * v213];
          v216 = *(_QWORD *)v215;
          v217 = &v171[16 * v174];
          v218 = *((_QWORD *)v217 + 1);
          v219 = v257;
          sub_10023CF64(*a1 + *(_QWORD *)(v254 + 72) * *(_QWORD *)v215, *a1 + *(_QWORD *)(v254 + 72) * *(_QWORD *)v217, *a1 + *(_QWORD *)(v254 + 72) * v218, v252);
          if (v219)
          {
            v221 = v234;
LABEL_134:
            swift_bridgeObjectRelease();
            v221[2] = 0;
            swift_bridgeObjectRelease();
            return;
          }
          if (v218 < v216)
            goto LABEL_153;
          if (v174 > *((_QWORD *)v214 + 2))
            goto LABEL_154;
          *(_QWORD *)v215 = v216;
          *(_QWORD *)&v171[16 * v213 + 8] = v218;
          v220 = *((_QWORD *)v214 + 2);
          if (v174 >= v220)
            goto LABEL_155;
          v257 = 0;
          v67 = v220 - 1;
          memmove(&v171[16 * v174], v217 + 16, 16 * (v220 - 1 - v174));
          v66 = v214;
          *((_QWORD *)v214 + 2) = v220 - 1;
          v202 = v220 > 2;
          v36 = v255;
          v49 = v275;
          v52 = v251;
          if (!v202)
            goto LABEL_15;
        }
      }
      v67 = 1;
LABEL_15:
      v59 = a1[1];
      v65 = v268;
      v18 = v261;
      if (v268 >= v59)
        goto LABEL_136;
    }
    sub_10000882C(v78, &qword_100839A98);
    v75 = v79;
    v74 = v241;
    v72 = v240;
LABEL_20:
    sub_10000882C(v75, (uint64_t *)&unk_10084BDD0);
    v82 = objc_msgSend(*v72, "uuid");
    v83 = v232;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v82);

    v85 = UUID.uuidString.getter(v84);
    v87 = v86;
    v88 = *(void (**)(char *, uint64_t))(v263 + 8);
    v89 = v83;
    v90 = v264;
    v88(v89, v264);
    v91 = objc_msgSend(*v74, "uuid");
    v92 = v233;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v91);

    v94 = UUID.uuidString.getter(v93);
    v96 = v95;
    v88(v92, v90);
    if (v85 == v94 && v87 == v96)
    {
      swift_bridgeObjectRelease_n(v87, 2);
      LODWORD(v267) = 0;
    }
    else
    {
      LODWORD(v267) = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v94, v96, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v18 = v261;
    a1 = v262;
    v81 = (uint64_t)v248;
    v52 = v251;
    goto LABEL_27;
  }
  v252 = (unint64_t)_swiftEmptyArrayStorage
       + ((*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80));
  v234 = _swiftEmptyArrayStorage;
  if (v59 == 1)
  {
    v232 = v15;
    v233 = v12;
    goto LABEL_13;
  }
  v67 = _swiftEmptyArrayStorage[2];
  v66 = (char *)_swiftEmptyArrayStorage;
LABEL_136:
  if (v67 >= 2)
  {
    v222 = *a1;
    v221 = v234;
    while (1)
    {
      v223 = v67 - 2;
      if (v67 < 2)
        goto LABEL_168;
      if (!v222)
        goto LABEL_180;
      v224 = v66;
      v225 = *(_QWORD *)&v66[16 * v223 + 32];
      v226 = *(_QWORD *)&v66[16 * v67 + 24];
      v227 = v257;
      sub_10023CF64(v222 + *(_QWORD *)(v254 + 72) * v225, v222 + *(_QWORD *)(v254 + 72) * *(_QWORD *)&v66[16 * v67 + 16], v222 + *(_QWORD *)(v254 + 72) * v226, v252);
      if (v227)
        goto LABEL_134;
      if (v226 < v225)
        goto LABEL_169;
      v257 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native(v224) & 1) == 0)
        v224 = sub_1001D52E4((uint64_t)v224);
      if (v223 >= *((_QWORD *)v224 + 2))
        goto LABEL_170;
      v228 = &v224[16 * v223 + 32];
      *(_QWORD *)v228 = v225;
      *((_QWORD *)v228 + 1) = v226;
      v229 = *((_QWORD *)v224 + 2);
      if (v67 > v229)
        goto LABEL_171;
      memmove(&v224[16 * v67 + 16], &v224[16 * v67 + 32], 16 * (v229 - v67));
      v66 = v224;
      *((_QWORD *)v224 + 2) = v229 - 1;
      v67 = v229 - 1;
      if (v229 <= 2)
        goto LABEL_149;
    }
  }
  v221 = v234;
LABEL_149:
  swift_bridgeObjectRelease();
  v221[2] = 0;
  swift_bridgeObjectRelease();
}

void sub_10023C9DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  _BYTE *v40;
  id v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t);
  id v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  id *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _QWORD *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  id *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id *v88;

  v66 = a1;
  v7 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  __chkstk_darwin(v7);
  v71 = &v64[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v70 = &v64[-v10];
  v11 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  __chkstk_darwin(v11);
  v68 = &v64[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v76 = &v64[-v14];
  v15 = sub_10001A630(&qword_100839A98);
  v74 = *(_QWORD *)(v15 - 8);
  v75 = v15;
  __chkstk_darwin(v15);
  v67 = &v64[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v19 = &v64[-v18];
  v86 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  __chkstk_darwin(v86);
  v82 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v23 = (id *)&v64[-v22];
  __chkstk_darwin(v24);
  v27 = (id *)&v64[-v26];
  v79 = a3;
  v65 = a2;
  if (a3 != a2)
  {
    v28 = *(_QWORD *)(v25 + 72);
    v87 = v28 * (v79 - 1);
    v77 = v28;
    v29 = v28 * v79;
    v80 = v19;
    v81 = v23;
    v88 = (id *)&v64[-v26];
    v69 = a4;
    v30 = (uint64_t)v76;
LABEL_6:
    v32 = 0;
    v85 = v66;
    v78 = v29;
    while (1)
    {
      v33 = *a4;
      v84 = v29 + v32;
      v34 = v29 + v32 + v33;
      v35 = v27;
      sub_1000151E8(v34, (uint64_t)v27, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v83 = v87 + v32;
      sub_1000151E8(v87 + v32 + v33, (uint64_t)v23, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_100008868((uint64_t)v35 + *(int *)(v86 + 24), v30, (uint64_t *)&unk_10084BDD0);
      v36 = v75;
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
      v38 = v37(v30, 1, v75);
      v39 = v30;
      if (v38 != 1)
      {
        sub_100128FE0(v30, (uint64_t)v19);
        v40 = v68;
        sub_100008868((uint64_t)v23 + *(int *)(v86 + 24), (uint64_t)v68, (uint64_t *)&unk_10084BDD0);
        if (v37((uint64_t)v40, 1, v36) != 1)
        {
          v57 = (uint64_t)v40;
          v58 = v67;
          sub_100128FE0(v57, (uint64_t)v67);
          v56 = static Date.< infix(_:_:)(v80, v58);
          v59 = (uint64_t)v80;
          sub_10000882C((uint64_t)v58, &qword_100839A98);
          v19 = (_BYTE *)v59;
          sub_10000882C(v59, &qword_100839A98);
          goto LABEL_15;
        }
        sub_10000882C((uint64_t)v19, &qword_100839A98);
        v39 = (uint64_t)v40;
        v35 = v88;
      }
      sub_10000882C(v39, (uint64_t *)&unk_10084BDD0);
      v41 = objc_msgSend(*v35, "uuid");
      v42 = v70;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

      v44 = UUID.uuidString.getter(v43);
      v45 = v23;
      v47 = v46;
      v48 = v73;
      v49 = *(void (**)(_BYTE *, uint64_t))(v72 + 8);
      v49(v42, v73);
      v50 = objc_msgSend(*v45, "uuid");
      v51 = v71;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v50);

      v53 = UUID.uuidString.getter(v52);
      v55 = v54;
      v49(v51, v48);
      if (v44 == v53 && v47 == v55)
      {
        swift_bridgeObjectRelease_n(v47, 2);
        v23 = v81;
        sub_10001C744((uint64_t)v81, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v31 = v88;
        sub_10001C744((uint64_t)v88, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v27 = v31;
        a4 = v69;
        v19 = v80;
        v29 = v78;
LABEL_5:
        v87 += v77;
        v29 += v77;
        if (++v79 == v65)
          return;
        goto LABEL_6;
      }
      v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v47, v53, v55, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v69;
      v19 = v80;
      v23 = v81;
LABEL_15:
      sub_10001C744((uint64_t)v23, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v60 = v88;
      sub_10001C744((uint64_t)v88, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v27 = v60;
      v29 = v78;
      if ((v56 & 1) == 0)
        goto LABEL_5;
      v61 = *a4;
      if (!*a4)
      {
        __break(1u);
        return;
      }
      v62 = v61 + v78 + v32;
      v63 = v61 + v87 + v32;
      sub_10023DB78(v62, (uint64_t)v82);
      swift_arrayInitWithTakeFrontToBack(v62);
      sub_10023DB78((uint64_t)v82, v63);
      v32 -= v77;
      ++v85;
      v23 = v81;
      v27 = v88;
      if (v79 == v85)
        goto LABEL_5;
    }
  }
}

uint64_t sub_10023CF64(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  id *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  id *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;

  v8 = type metadata accessor for UUID(0);
  v128 = *(_QWORD *)(v8 - 8);
  v129 = v8;
  __chkstk_darwin(v8);
  v122 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v121 = (char *)&v113 - v11;
  __chkstk_darwin(v12);
  v125 = (char *)&v113 - v13;
  __chkstk_darwin(v14);
  v123 = (char *)&v113 - v15;
  v16 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  __chkstk_darwin(v16);
  v119 = (uint64_t)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v127 = (unint64_t)&v113 - v19;
  __chkstk_darwin(v20);
  v118 = (uint64_t)&v113 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v113 - v23;
  v25 = sub_10001A630(&qword_100839A98);
  v133 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v115 = (uint64_t)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v117 = (uint64_t)&v113 - v28;
  __chkstk_darwin(v29);
  v114 = (uint64_t)&v113 - v30;
  __chkstk_darwin(v31);
  v116 = (uint64_t)&v113 - v32;
  v135 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  __chkstk_darwin(v135);
  __chkstk_darwin(v33);
  v124 = (id *)((char *)&v113 - v34);
  __chkstk_darwin(v35);
  v132 = (uint64_t)&v113 - v36;
  __chkstk_darwin(v37);
  v40 = (id *)((char *)&v113 - v39);
  v42 = *(_QWORD *)(v41 + 72);
  if (!v42)
  {
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (a2 - a1 == 0x8000000000000000 && v42 == -1)
    goto LABEL_79;
  v43 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v42 == -1)
    goto LABEL_80;
  v44 = (uint64_t)(a2 - a1) / v42;
  v138 = a1;
  v137 = a4;
  v45 = v43 / v42;
  v130 = v25;
  v131 = v42;
  if (v44 >= v43 / v42)
  {
    if (v45 < 0)
      goto LABEL_81;
    v47 = v45 * v42;
    v134 = (id *)v38;
    if (a4 < a2 || a2 + v47 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v77 = a4 + v47;
    v136 = a4 + v47;
    v138 = a2;
    v123 = (char *)a1;
    v78 = v47 < 1 || a1 >= a2;
    v79 = (uint64_t)v124;
    if (v78)
    {
LABEL_77:
      sub_1001D51B4(&v138, &v137, (uint64_t *)&v136);
      return 1;
    }
    v80 = -(uint64_t)v131;
    v120 = a4;
    v132 = -(uint64_t)v131;
    while (1)
    {
      v81 = a3;
      sub_1000151E8(v77 + v80, v79, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v131 = a2;
      v82 = a2 + v80;
      v125 = (char *)(a2 + v80);
      v83 = v134;
      sub_1000151E8(v82, (uint64_t)v134, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      v84 = v135;
      v85 = v127;
      sub_100008868(v79 + *(int *)(v135 + 24), v127, (uint64_t *)&unk_10084BDD0);
      v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48);
      v87 = (id *)v79;
      v88 = v130;
      if (v86(v85, 1, v130) == 1)
        goto LABEL_56;
      v89 = v117;
      sub_100128FE0(v127, v117);
      v85 = v119;
      sub_100008868((uint64_t)v83 + *(int *)(v84 + 24), v119, (uint64_t *)&unk_10084BDD0);
      if (v86(v85, 1, v88) == 1)
        break;
      v106 = v85;
      v107 = v115;
      sub_100128FE0(v106, v115);
      v104 = static Date.< infix(_:_:)(v89, v107);
      sub_10000882C(v107, &qword_100839A98);
      sub_10000882C(v89, &qword_100839A98);
      v79 = (uint64_t)v124;
      v105 = (char *)v131;
LABEL_62:
      v108 = v132;
      v109 = v81 + v132;
      sub_10001C744((uint64_t)v134, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      sub_10001C744(v79, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
      if ((v104 & 1) != 0)
      {
        if (v81 < (unint64_t)v105 || v109 >= (unint64_t)v105)
        {
          v110 = v125;
          swift_arrayInitWithTakeFrontToBack(v81 + v108);
        }
        else
        {
          v110 = v125;
          if ((char *)v81 != v105)
            swift_arrayInitWithTakeBackToFront(v81 + v108);
        }
        v80 = v132;
        v138 += v132;
      }
      else
      {
        v111 = v136;
        v136 += v108;
        if (v81 < v111 || v109 >= v111)
        {
          swift_arrayInitWithTakeFrontToBack(v81 + v108);
        }
        else if (v81 != v111)
        {
          swift_arrayInitWithTakeBackToFront(v81 + v108);
        }
        v110 = v105;
        v80 = v132;
      }
      v77 = v136;
      if (v136 > a4)
      {
        a2 = (unint64_t)v110;
        a3 = v81 + v108;
        if (v110 > v123)
          continue;
      }
      goto LABEL_77;
    }
    sub_10000882C(v89, &qword_100839A98);
    v83 = v134;
    v87 = v124;
LABEL_56:
    v126 = (char *)v81;
    sub_10000882C(v85, (uint64_t *)&unk_10084BDD0);
    v90 = objc_msgSend(*v87, "uuid");
    v91 = v121;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v90);

    v93 = UUID.uuidString.getter(v92);
    v95 = v94;
    v96 = v129;
    v97 = *(void (**)(char *, uint64_t))(v128 + 8);
    v97(v91, v129);
    v98 = objc_msgSend(*v83, "uuid");
    v99 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v98);

    v101 = UUID.uuidString.getter(v100);
    v103 = v102;
    v97(v99, v96);
    if (v93 == v101 && v95 == v103)
    {
      swift_bridgeObjectRelease_n(v95, 2);
      v104 = 0;
    }
    else
    {
      v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v101, v103, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v81 = (unint64_t)v126;
    a4 = v120;
    v79 = (uint64_t)v124;
    v105 = (char *)v131;
    goto LABEL_62;
  }
  if ((v44 & 0x8000000000000000) == 0)
  {
    v46 = v44 * v42;
    if (a4 < a1 || a1 + v46 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v127 = a4 + v46;
    v136 = a4 + v46;
    if (v46 >= 1 && a2 < a3)
    {
      v134 = v40;
      v126 = v24;
      while (1)
      {
        sub_1000151E8(a2, (uint64_t)v40, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v49 = v132;
        sub_1000151E8(a4, v132, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_100008868((uint64_t)v40 + *(int *)(v135 + 24), (uint64_t)v24, (uint64_t *)&unk_10084BDD0);
        v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 48);
        v51 = v50(v24, 1, v25);
        v52 = (uint64_t)v24;
        if (v51 != 1)
        {
          v53 = v116;
          sub_100128FE0((uint64_t)v24, v116);
          v54 = v118;
          sub_100008868(v49 + *(int *)(v135 + 24), v118, (uint64_t *)&unk_10084BDD0);
          if (v50((char *)v54, 1, v25) != 1)
          {
            v72 = v54;
            v73 = v114;
            sub_100128FE0(v72, v114);
            v71 = static Date.< infix(_:_:)(v53, v73);
            sub_10000882C(v73, &qword_100839A98);
            sub_10000882C(v53, &qword_100839A98);
            v24 = v126;
            goto LABEL_31;
          }
          sub_10000882C(v53, &qword_100839A98);
          v52 = v54;
          v40 = v134;
        }
        sub_10000882C(v52, (uint64_t *)&unk_10084BDD0);
        v55 = objc_msgSend(*v40, "uuid");
        v56 = v123;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

        v58 = UUID.uuidString.getter(v57);
        v59 = (id *)v49;
        v61 = v60;
        v62 = v129;
        v63 = *(void (**)(char *, uint64_t))(v128 + 8);
        v63(v56, v129);
        v64 = objc_msgSend(*v59, "uuid");
        v65 = v125;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

        v67 = UUID.uuidString.getter(v66);
        v69 = v68;
        v63(v65, v62);
        if (v58 == v67 && v61 == v69)
        {
          swift_bridgeObjectRelease_n(v61, 2);
          sub_10001C744(v132, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          sub_10001C744((uint64_t)v134, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
          v25 = v130;
          v70 = v131;
          v24 = v126;
LABEL_36:
          v74 = v138;
          v76 = v137 + v70;
          if (v138 < v137 || v138 >= v76)
          {
            swift_arrayInitWithTakeFrontToBack(v138);
          }
          else if (v138 != v137)
          {
            swift_arrayInitWithTakeBackToFront(v138);
          }
          v137 = v76;
          v75 = a2;
          goto LABEL_42;
        }
        v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v61, v67, v69, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = v130;
        v24 = v126;
        v49 = v132;
LABEL_31:
        sub_10001C744(v49, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        sub_10001C744((uint64_t)v134, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
        v70 = v131;
        if ((v71 & 1) == 0)
          goto LABEL_36;
        v74 = v138;
        v75 = a2 + v131;
        if (v138 < a2 || v138 >= v75)
        {
          swift_arrayInitWithTakeFrontToBack(v138);
        }
        else if (v138 == a2)
        {
          v74 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v138);
        }
LABEL_42:
        v138 = v74 + v70;
        a4 = v137;
        v40 = v134;
        if (v137 < v127)
        {
          a2 = v75;
          if (v75 < a3)
            continue;
        }
        goto LABEL_77;
      }
    }
    goto LABEL_77;
  }
LABEL_81:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10023DA60(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *a2;
  a3(a1, &v11);
  v6 = *(_QWORD *)(a5 + 48);
  v9[2] = a5;
  v9[3] = 1;
  v10 = v6;
  v7 = type metadata accessor for UnfairLock(0);
  swift_retain(v6);
  Lock.sync<A>(_:)(sub_100188F4C, v9, v7, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  return swift_release(v10);
}

uint64_t sub_10023DAF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10023DB14()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10023DB38@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100239BFC(a1, v2, a2);
}

uint64_t sub_10023DB40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10023DB6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10023DA60(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10023DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10023DBBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10023ACDC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10023DBD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10023AF14(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10023DBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841A10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841A10);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10023DC80(uint64_t a1)
{
  sub_10023DCA8(a1, (SEL *)&selRef_setConcatenatedContainerIDsWithLocalContainerIDPrefix_, &OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix);
}

void sub_10023DC94(uint64_t a1)
{
  sub_10023DCA8(a1, (SEL *)&selRef_setConcatenatedElementIDsWithLocalElementIDPrefix_, &OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix);
}

void sub_10023DCA8(uint64_t a1, SEL *a2, _QWORD *a3)
{
  char *v3;
  void *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;

  v5 = v3;
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = &v3[*a3];
    v8 = *(_QWORD *)v7;
    v9 = *((_QWORD *)v7 + 1);
    v10 = sub_10001A630(&qword_100841A60);
    v11 = sub_1000A5F84((unint64_t *)&qword_100841A68, &qword_100841A60, (uint64_t)&protocol conformance descriptor for Set<A>);
    v12 = sub_1000E525C();
    Sequence<>.joined(separator:)(v8, v9, v10, v11, v12);
    v14 = v13;
    swift_bridgeObjectRelease(a1);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, *a2, v15, swift_bridgeObjectRelease(v14).n128_f64[0]);

  }
  else
  {
    objc_msgSend(v3, *a2, 0, swift_bridgeObjectRelease(a1).n128_f64[0]);
  }
}

uint64_t sub_10023DDC0(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v19;
  Swift::Double v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - v12;
  sub_10023E15C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  Date.init(timeIntervalSinceReferenceDate:)((double)(int)objc_msgSend(v2, "lastAccessedSinceReferenceDate"));
  v14 = sub_10023F5B0();
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v13, v7, v14);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  if ((v15 & 1) != 0)
  {
    v16(v13, v7);
    return 0;
  }
  v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
  objc_msgSend(v2, "setLastAccessedSinceReferenceDate:", Int32.init(timeIntervalSinceReferenceDate:)(v20));
  v16(v10, v7);
  if (qword_100837038 != -1)
    swift_once(&qword_100837038, sub_10023DBF0);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100841A10);
  v22 = v2;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v36 = v34;
    *(_DWORD *)v25 = 136315138;
    v26 = objc_msgSend(v22, "remObjectID");
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, "description");

      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

    }
    else
    {
      v31 = 0xE300000000000000;
      v29 = 7104878;
    }
    v35 = sub_10001A820(v29, v31, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Updated lastAccessed in REMCDManualSortHint {objectID: %s}", v25, 0xCu);
    v17 = 1;
    v32 = v34;
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v16(v13, v7);
  }
  else
  {

    v16(v13, v7);
    return 1;
  }
  return v17;
}

uint64_t sub_10023E15C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t);
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD, uint64_t);
  void *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = type metadata accessor for DateComponents(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1);
  v42 = v9;
  v43 = v5;
  v44 = a2;
  v45 = v8;
  v46 = v15;
  v47 = v4;
  v18 = Date.init()(v14);
  static Calendar.current.getter(v18);
  if (a1 == 1)
  {
    v19 = sub_10001A630(&qword_1008412D0);
    v20 = type metadata accessor for Calendar.Component(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(_QWORD *)(v21 + 72);
    v23 = *(unsigned __int8 *)(v21 + 80);
    v24 = (v23 + 32) & ~v23;
    v25 = swift_allocObject(v19, v24 + 3 * v22, v23 | 7);
    *(_OWORD *)(v25 + 16) = xmmword_1006A3C20;
    v26 = v25 + v24;
    v27 = *(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104);
    v27(v26, enum case for Calendar.Component.year(_:), v20);
    v27(v26 + v22, enum case for Calendar.Component.month(_:), v20);
    v27(v26 + 2 * v22, enum case for Calendar.Component.day(_:), v20);
    v28 = sub_1002E6FB8(v25);
    swift_setDeallocating(v25);
    swift_arrayDestroy(v26, 3, v20);
    swift_deallocClassInstance(v25, 32, 7);
    Calendar.dateComponents(_:from:)(v28, v17);
    v29 = v28;
  }
  else
  {
    v31 = sub_10001A630(&qword_1008412D0);
    v32 = type metadata accessor for Calendar.Component(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(_QWORD *)(v33 + 72);
    v35 = *(unsigned __int8 *)(v33 + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject(v31, v36 + 2 * v34, v35 | 7);
    *(_OWORD *)(v37 + 16) = xmmword_1006A3C40;
    v38 = v37 + v36;
    v39 = *(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104);
    v39(v38, enum case for Calendar.Component.year(_:), v32);
    v39(v38 + v34, enum case for Calendar.Component.month(_:), v32);
    v40 = sub_1002E6FB8(v37);
    swift_setDeallocating(v37);
    swift_arrayDestroy(v38, 2, v32);
    swift_deallocClassInstance(v37, 32, 7);
    Calendar.dateComponents(_:from:)(v40, v17);
    v29 = v40;
  }
  v41 = swift_bridgeObjectRelease(v29);
  Calendar.date(from:)(v7, v41);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v47);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v46);
}

void sub_10023E4C4(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *oslog;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100837038 != -1)
      swift_once(&qword_100837038, sub_10023DBF0);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100841A10);
    swift_bridgeObjectRetain(a4);
    sub_1000D026C(a1, 1);
    swift_bridgeObjectRetain(a4);
    v14 = sub_1000D026C(a1, 1);
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v25 = v17;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain(a4);
      v24 = sub_10001A820(a3, a4, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue(a1, v23, v22);
      v18 = Error.localizedDescription.getter(v22[1], v22[2]);
      v20 = v19;
      v24 = sub_10001A820(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease(v20);
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Failed to update lastAccessed in REMCDManualSortHint {objectID: %s, error: %s}", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      sub_1000D0278(a1, 1);
    }
    else
    {
      sub_1000D0278(a1, 1);
      swift_bridgeObjectRelease_n(a4, 2);
      sub_1000D0278(a1, 1);
      sub_1000D0278(a1, 1);

    }
  }
  else if ((a1 & 1) != 0)
  {
    if (qword_100837038 != -1)
      swift_once(&qword_100837038, sub_10023DBF0);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_100841A10);
    v8 = swift_bridgeObjectRetain_n(a4, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v25 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain(a4);
      v24 = sub_10001A820(a3, a4, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updated lastAccessed in REMCDManualSortHint {objectID: %s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
}

uint64_t sub_10023E8A4(int a1, char a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  unint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(_QWORD, _QWORD);
  uint64_t v33;
  void *v34;
  char *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t ObjCClassFromMetadata;
  NSString v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t (*v48)(char *, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD, _QWORD);
  _QWORD aBlock[5];
  char *v53;

  v5 = v4;
  v51 = a3;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v44 - v17;
  sub_10023E15C(a2, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
    return v51(0, 0);
  }
  v49 = a1;
  v50 = a4;
  v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v19(v18, v11, v12);
  Date.init(timeIntervalSinceReferenceDate:)((double)(int)objc_msgSend(v5, "lastAccessedSinceReferenceDate"));
  v20 = sub_10023F5B0();
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v16, v12);
  if ((v21 & 1) != 0)
  {
    v22(v18, v12);
    return v51(0, 0);
  }
  v48 = (uint64_t (*)(char *, uint64_t))v22;
  v24 = objc_msgSend(v5, "storeControllerManagedObjectContext");
  if (v24)
  {
    v25 = v24;
    v45 = v24;
    v26 = objc_msgSend(v5, "objectID");
    v46 = v26;
    v27 = objc_msgSend(v5, "remObjectID");
    v47 = v27;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    v28 = *(unsigned __int8 *)(v13 + 80);
    v29 = (v28 + 56) & ~v28;
    v30 = v29 + v14;
    v31 = (char *)swift_allocObject(&unk_1007EAB00, v29 + v14 + 1, v28 | 7);
    *((_QWORD *)v31 + 2) = v25;
    *((_QWORD *)v31 + 3) = v26;
    v33 = v50;
    v32 = v51;
    *((_QWORD *)v31 + 4) = v27;
    *((_QWORD *)v31 + 5) = v32;
    *((_QWORD *)v31 + 6) = v33;
    v19(&v31[v29], v16, v12);
    v31[v30] = v49 & 1;
    aBlock[4] = sub_10023F688;
    v53 = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EAB18;
    v34 = _Block_copy(aBlock);
    v35 = v53;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    swift_retain(v33);
    swift_release(v35);
    objc_msgSend(v36, "performBlock:", v34);
    _Block_release(v34);

  }
  else
  {
    v39 = (void *)objc_opt_self(REMError);
    v40 = type metadata accessor for REMCDManualSortHint();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v40);
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v39, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v42);

    v51(v43, 1);
  }
  return v48(v18, v12);
}

void sub_10023EC54(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::Double v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v35[2];
  void (*v36)(id, uint64_t);
  id v37;

  v35[1] = a5;
  v36 = a4;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v16 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v37);
  v17 = v37;
  if (v16)
  {
    v18 = v16;
    v19 = type metadata accessor for REMCDManualSortHint();
    v20 = swift_dynamicCastClass(v18, v19);
    if (!v20)
    {
      v29 = v17;

      if (a3)
        v30 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", a3);
      else
        v30 = objc_msgSend((id)objc_opt_self(REMError), "unexpectedError");
      v34 = v30;
      swift_errorRetain(v34);
      v36(v34, 1);
      swift_errorRelease(v34);
      v33 = (uint64_t)v34;
      goto LABEL_14;
    }
    v21 = (void *)v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a6, v12);
    v22 = Date.timeIntervalSinceReferenceDate.getter(v17);
    objc_msgSend(v21, "setLastAccessedSinceReferenceDate:", Int32.init(timeIntervalSinceReferenceDate:)(v22));
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((a7 & 1) == 0)
    {
LABEL_6:
      v36((id)1, 0);

      return;
    }
    v37 = 0;
    v23 = objc_msgSend(a1, "save:", &v37);
    v24 = v37;
    if (v23)
    {
      v25 = v37;
      goto LABEL_6;
    }
    v31 = v37;
    v27 = _convertNSErrorToError(_:)(v24);

    swift_willThrow(v32);
  }
  else
  {
    v26 = v37;
    v27 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v28);
  }
  swift_errorRetain(v27);
  v36((id)v27, 1);
  swift_errorRelease(v27);
  v33 = v27;
LABEL_14:
  swift_errorRelease(v33);
}

id sub_10023F04C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDManualSortHint();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for REMCDManualSortHint()
{
  return objc_opt_self(REMCDManualSortHint);
}

uint64_t sub_10023F108(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  __n128 v48;
  uint64_t v49;
  uint64_t result;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;

  v4 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  v5 = __chkstk_darwin(v4);
  v54 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMHashtagLabelSpecifier(0, v5);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (_QWORD **)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v8 + 96))(v11, v7);
    v13 = *v11;
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v51 = v11;
      v52 = a2;
      v57 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v14, 0);
      v15 = sub_10028F928(v13);
      v17 = v16;
      v19 = v18 & 1;
      v53 = v13 + 56;
      while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(v13 + 32))
      {
        if (((*(_QWORD *)(v53 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_22;
        if (*(_DWORD *)(v13 + 36) != (_DWORD)v17)
          goto LABEL_23;
        v20 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v15);
        v21 = v20[1];
        v55 = *v20;
        v56 = v21;
        swift_bridgeObjectRetain(v21);
        v22 = (uint64_t)v54;
        static Locale.current.getter(v23);
        v24 = type metadata accessor for Locale(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v22, 0, 1, v24);
        v25 = sub_1000E525C();
        v26 = StringProtocol.foldedStringForWriting(locale:)(v22, &type metadata for String, v25);
        v28 = v27;
        sub_10000882C(v22, (uint64_t *)&unk_10083FBE0);
        swift_bridgeObjectRelease();
        v29 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
        {
          sub_1001C1B0C(0, v29[2] + 1, 1);
          v29 = v57;
        }
        v31 = v29[2];
        v30 = v29[3];
        v7 = v31 + 1;
        if (v31 >= v30 >> 1)
        {
          sub_1001C1B0C(v30 > 1, v31 + 1, 1);
          v29 = v57;
        }
        v29[2] = v7;
        v32 = &v29[2 * v31];
        v32[4] = v26;
        v32[5] = v28;
        v33 = sub_10036456C(v15, v17, v19 & 1, v13);
        v15 = v33;
        v17 = v34;
        v19 = v35 & 1;
        if (!--v14)
        {
          sub_1000E515C(v33, v34, v35 & 1);
          swift_bridgeObjectRelease();
          v11 = v51;
          a2 = v52;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      swift_release(v55);
      __break(1u);
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    v29 = _swiftEmptyArrayStorage;
LABEL_19:
    v55 = (uint64_t)v29;
    swift_bridgeObjectRetain(v29);
    sub_10042AADC(&v55);
    swift_bridgeObjectRelease();
    v37 = sub_10001A630(&qword_100841A70);
    v38 = (char *)v11 + *(int *)(v37 + 64);
    v39 = v55;
    __chkstk_darwin(v37);
    *(&v51 - 2) = a2;
    v40 = sub_100350A88((void (*)(uint64_t *__return_ptr, _QWORD *, __n128))sub_10023F6CC, (uint64_t)(&v51 - 4), v39);
    swift_release(v39);
    v55 = (uint64_t)v40;
    v41 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v42 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
    v43 = BidirectionalCollection<>.joined(separator:)(9406690, 0xA300000000000000, v41, v42);
    v45 = v44;
    swift_bridgeObjectRelease();
    v55 = 9406690;
    v56 = 0xA300000000000000;
    v46._countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v56);
    v47._countAndFlagsBits = 9406690;
    v47._object = (void *)0xA300000000000000;
    String.append(_:)(v47);
    v48 = swift_bridgeObjectRelease();
    v36 = v55;
    v49 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0, v48);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v38, v49);
    return v36;
  }
  if (v12 == enum case for REMHashtagLabelSpecifier.allLabels(_:))
    return 0;
  if (v12 == enum case for REMHashtagLabelSpecifier.noLabels(_:))
    return 0x6174687361486F6ELL;
LABEL_24:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
  __break(1u);
  return result;
}

unint64_t sub_10023F5B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839DB0;
  if (!qword_100839DB0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100839DB0);
  }
  return result;
}

uint64_t sub_10023F5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;

  swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10023F688()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10023EC54(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(id, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), v0 + v2, *(_BYTE *)(v0 + v2 + *(_QWORD *)(v1 + 64)));
}

uint64_t sub_10023F6CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD **)(v2 + 16);
  v5 = *a1;
  v6 = a1[1];
  v7 = v4[3];
  v8 = v4[4];
  sub_10000A388(v4, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7, v8);
  *a2 = result;
  a2[1] = v10;
  return result;
}

id sub_10023F73C(void (**a1)(char *, uint64_t, __n128), void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  int v30;
  uint64_t v31;
  char *v32;
  void (**v33)(char *, uint64_t, __n128);
  id v34;
  id v35;
  double v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  void (**v46)(char *, uint64_t, __n128);
  char *v47;
  unint64_t *v48;
  void (**v49)(char *, uint64_t, __n128);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  char v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  id v71;
  uint64_t v72;
  uint64_t (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __n128 v85;
  void (*v86)(char *, uint64_t, __n128);
  uint64_t v87;
  unsigned __int8 v88;
  void *v89;
  id v90;
  uint64_t v91;
  NSString v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSString v99;
  uint64_t v100;
  uint64_t v101;
  NSString v102;
  id v103;
  uint64_t v104;
  uint64_t (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 v117;
  void (*v118)(char *, uint64_t, __n128);
  void (*v119)(char *, uint64_t);
  char *v120;
  unsigned __int8 v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  id v128;
  id v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  _QWORD *v133;
  id v134;
  char *v135;
  unint64_t *v136;
  void (**v137)(char *, uint64_t, __n128);
  id v138;
  void *v139;
  id v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  id v171;
  uint64_t v172;
  void (**v173)(char *, uint64_t, __n128);
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  NSString v180;
  double v181;
  NSString v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  id result;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(char *, char *, uint64_t);
  char *v200;
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  uint8_t *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  __n128 v210;
  void (*v211)(char *, uint64_t, __n128);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  NSString v219;
  double v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __n128 v230;
  unsigned int *v231;
  NSString v232;
  uint64_t v233;
  char *v234;
  uint64_t (*v235)(char *, _QWORD, uint64_t);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(char *, uint64_t);
  NSString v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  NSString v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  NSString v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  void *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  void (**v288)(char *, uint64_t, __n128);
  id v289;
  uint64_t v290;
  uint64_t v291;
  Swift::OpaquePointer_optional v292;
  Swift::OpaquePointer_optional v293;

  v281 = a3;
  v284 = a2;
  v288 = a1;
  v287 = type metadata accessor for RDUserNotificationCategory(0);
  v285 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v286 = (char *)&v278 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_100850D20);
  __chkstk_darwin(v5);
  v7 = (char *)&v278 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMNotificationIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v279 = (char *)&v278 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v280 = (char *)&v278 - v13;
  v14 = __chkstk_darwin(v12);
  v282 = (char *)&v278 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v278 - v17;
  v19 = __chkstk_darwin(v16);
  v283 = (char *)&v278 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v278 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v278 - v24;
  v26 = type metadata accessor for RDUserNotificationType(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (unint64_t *)((char *)&v278 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v289 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v27 + 16))(v29, v3, v26);
  v30 = (*(uint64_t (**)(unint64_t *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    (*(void (**)(char *, unint64_t *, uint64_t))(v9 + 32))(v25, v29, v8);
    v31 = v8;
    v32 = v25;
    if (v288)
    {
      v33 = v288;
      REMNotificationIdentifier.init(reminder:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v31);
      v34 = v289;
      UNMutableNotificationContent.setNotificationIdentifier(_:)(v7);
      sub_10000882C((uint64_t)v7, &qword_100850D20);
      v35 = objc_msgSend(v33, "legacyNotificationIdentifier");
      if (v35)
      {
        v37 = v35;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v40 = v39;

        sub_100241BD4(v38, v40);
        *(_QWORD *)&v36 = swift_bridgeObjectRelease(v40).n128_u64[0];
      }
      objc_msgSend(v34, "setInterruptionLevel:", 2, v36);
      v41 = objc_msgSend(v33, "titleDocument");
      if (v41)
      {
        v42 = v41;
        v43 = objc_msgSend(v41, "string");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v45 = v44;

      }
      else
      {
        v45 = 0xE000000000000000;
      }
      v92 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setTitle:", v92, swift_bridgeObjectRelease(v45).n128_f64[0]);

      v94 = v285;
      v93 = v286;
      v95 = v287;
      v96 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104))(v286, enum case for RDUserNotificationCategory.reminderAlarm(_:), v287);
      RDUserNotificationCategory.rawValue.getter(v96);
      v98 = v97;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
      v99 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setThreadIdentifier:", v99, swift_bridgeObjectRelease(v98).n128_f64[0]);

      sub_100245224(v33);
      v101 = v100;
      v102 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setCategoryIdentifier:", v102, swift_bridgeObjectRelease(v101).n128_f64[0]);

      objc_msgSend(v34, "setShouldPreventNotificationDismissalAfterDefaultAction:", 1);
      v103 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
      objc_msgSend(v34, "setSound:", v103);

      sub_1002459DC(v34, v33);
      goto LABEL_28;
    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v72 = type metadata accessor for Logger(0);
    sub_10001AAA8(v72, (uint64_t)qword_100841A78);
    v73 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
    v74 = v73(v23, v25, v31);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = swift_slowAlloc(32, -1);
      v288 = (void (**)(char *, uint64_t, __n128))v9;
      v79 = v78;
      v291 = v78;
      v287 = (uint64_t)v32;
      *(_DWORD *)v77 = 136315138;
      v80 = v283;
      v73(v283, v23, v31);
      v81 = String.init<A>(describing:)(v80, v31);
      v82 = v31;
      v84 = v83;
      v290 = sub_10001A820(v81, v83, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      v85 = swift_bridgeObjectRelease(v84);
      v86 = v288[1];
      v86(v23, v82, v85);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}", v77, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      ((void (*)(uint64_t, uint64_t))v86)(v287, v82);
      return v289;
    }

    v119 = *(void (**)(char *, uint64_t))(v9 + 8);
    v119(v23, v31);
    v120 = v32;
    goto LABEL_43;
  }
  v46 = v288;
  if (v30 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v47 = v18;
    v48 = v29;
    v31 = v8;
    (*(void (**)(char *, unint64_t *, uint64_t))(v9 + 32))(v18, v48, v8);
    if (v46)
    {
      v49 = v46;
      REMNotificationIdentifier.init(reminder:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      v34 = v289;
      UNMutableNotificationContent.setNotificationIdentifier(_:)(v7);
      sub_10000882C((uint64_t)v7, &qword_100850D20);
      v51 = v285;
      v50 = v286;
      v32 = v47;
      v52 = v287;
      v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104))(v286, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v287);
      RDUserNotificationCategory.rawValue.getter(v53);
      v55 = v54;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
      v56 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setCategoryIdentifier:", v56, swift_bridgeObjectRelease(v55).n128_f64[0]);

      objc_msgSend(v34, "setShouldPreventNotificationDismissalAfterDefaultAction:", 1);
      v57 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
      objc_msgSend(v34, "setSound:", v57);

      sub_1002459DC(v34, v49);
LABEL_28:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v31);
      return v34;
    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v104 = type metadata accessor for Logger(0);
    sub_10001AAA8(v104, (uint64_t)qword_100841A78);
    v105 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
    v106 = v282;
    v107 = v105(v282, v47, v8);
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v108, v109))
    {
      v110 = (uint8_t *)swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      v287 = (uint64_t)v47;
      v288 = (void (**)(char *, uint64_t, __n128))v9;
      v112 = v111;
      v291 = v111;
      *(_DWORD *)v110 = 136315138;
      v113 = v283;
      v105(v283, v106, v31);
      v114 = String.init<A>(describing:)(v113, v31);
      v116 = v115;
      v290 = sub_10001A820(v114, v115, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      v117 = swift_bridgeObjectRelease(v116);
      v118 = v288[1];
      v118(v106, v31, v117);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "Trying to create a todayNotificationForSingleReminder content without a reminder. Returning empty content. {notificationIdentifier: %s}", v110, 0xCu);
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v110, -1, -1);

      ((void (*)(uint64_t, uint64_t))v118)(v287, v31);
      return v289;
    }

    v119 = *(void (**)(char *, uint64_t))(v9 + 8);
    v119(v106, v8);
    v120 = v47;
LABEL_43:
    v119(v120, v31);
    return v289;
  }
  if (v30 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v58 = (void *)*v29;
    v59 = v284;
    if (v284)
    {
      sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      v60 = v59;
      v61 = objc_msgSend(v60, "objectID");
      v62 = static NSObject.== infix(_:_:)(v61);

      if ((v62 & 1) != 0)
      {
        v63 = v58;
        v34 = v289;
        UNMutableNotificationContent.setListID(_:)(v58);

        v65 = v285;
        v64 = v286;
        v66 = v287;
        v67 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104))(v286, enum case for RDUserNotificationCategory.caldavSharedList(_:), v287);
        RDUserNotificationCategory.rawValue.getter(v67);
        v69 = v68;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v66);
        v70 = String._bridgeToObjectiveC()();
        objc_msgSend(v34, "setCategoryIdentifier:", v70, swift_bridgeObjectRelease(v69).n128_f64[0]);

        v71 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
        objc_msgSend(v34, "setSound:", v71);

LABEL_116:
        return v34;
      }

    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v125 = type metadata accessor for Logger(0);
    sub_10001AAA8(v125, (uint64_t)qword_100841A78);
    v126 = v59;
    v127 = v58;
    v128 = v126;
    v129 = v127;
    v130 = Logger.logObject.getter(v129);
    v131 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v130, v131))
    {
      v132 = swift_slowAlloc(22, -1);
      v133 = (_QWORD *)swift_slowAlloc(8, -1);
      v288 = (void (**)(char *, uint64_t, __n128))swift_slowAlloc(32, -1);
      v291 = (uint64_t)v288;
      *(_DWORD *)v132 = 136315394;
      if (v59)
        v134 = objc_msgSend(v128, "objectID");
      else
        v134 = 0;
      v290 = (uint64_t)v134;
      v167 = sub_10001A630((uint64_t *)&unk_100844910);
      v168 = Optional.descriptionOrNil.getter(v167);
      v170 = v169;

      v290 = sub_10001A820(v168, v170, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);

      swift_bridgeObjectRelease(v170);
      *(_WORD *)(v132 + 12) = 2112;
      v290 = (uint64_t)v129;
      v171 = v129;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      *v133 = v129;

      _os_log_impl((void *)&_mh_execute_header, v130, v131, "(caldavSharedList) Trying to create a notificationContent with a list whose objectID doesn't match with the listID in the enum. Returning empty content. {list.objectID: %s, enum.listID: %@}", (uint8_t *)v132, 0x16u);
      v172 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v133, 1, v172);
      swift_slowDealloc(v133, -1, -1);
      v173 = v288;
      swift_arrayDestroy(v288, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v132, -1, -1);

    }
    else
    {

    }
    return v289;
  }
  if (v30 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v87 = *v29;
    if (v281)
    {
      v88 = sub_100307D6C(v281, *v29);
      v34 = v289;
      if ((v88 & 1) != 0)
      {
        if ((unint64_t)v87 >> 62)
        {
          if (v87 < 0)
            v261 = v87;
          else
            v261 = v87 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v87);
          v262 = _CocoaArrayWrapper.endIndex.getter(v261);
          swift_bridgeObjectRelease(v87);
          v89 = v284;
          if (v262)
          {
LABEL_23:
            if (v89)
            {
              v60 = v89;
              v292.value._rawValue = (void *)swift_bridgeObjectRetain(v87);
              UNMutableNotificationContent.setReminderIDs(_:)(v292);
              v90 = objc_msgSend(v60, "objectID", swift_bridgeObjectRelease(v87).n128_f64[0]);
              ((void (*)(void))UNMutableNotificationContent.setListID(_:))();

              if ((unint64_t)v87 >> 62)
              {
                if (v87 < 0)
                  v229 = v87;
                else
                  v229 = v87 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v87);
                v91 = _CocoaArrayWrapper.endIndex.getter(v229);
                swift_bridgeObjectRelease(v87);
              }
              else
              {
                v91 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              v230 = swift_bridgeObjectRelease(v87);
              v231 = (unsigned int *)&enum case for RDUserNotificationCategory.singleAssignmentNotification(_:);
              if (v91 != 1)
                v231 = (unsigned int *)&enum case for RDUserNotificationCategory.multipleAssignmentsNotification(_:);
LABEL_115:
              v255 = v285;
              v254 = v286;
              v256 = v287;
              v257 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v285 + 104))(v286, *v231, v287, v230);
              RDUserNotificationCategory.rawValue.getter(v257);
              v259 = v258;
              (*(void (**)(char *, uint64_t))(v255 + 8))(v254, v256);
              v260 = String._bridgeToObjectiveC()();
              objc_msgSend(v34, "setCategoryIdentifier:", v260, swift_bridgeObjectRelease(v259).n128_f64[0]);

              v71 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
              objc_msgSend(v34, "setSound:", v71);
              goto LABEL_116;
            }
            if (qword_100837040 != -1)
              swift_once(&qword_100837040, sub_100241804);
            v212 = type metadata accessor for Logger(0);
            sub_10001AAA8(v212, (uint64_t)qword_100841A78);
            v213 = swift_bridgeObjectRetain(v87);
            v157 = Logger.logObject.getter(v213);
            v158 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v157, v158))
            {
              v159 = (uint8_t *)swift_slowAlloc(12, -1);
              v160 = swift_slowAlloc(32, -1);
              v291 = v160;
              *(_DWORD *)v159 = 136315138;
              v214 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v215 = swift_bridgeObjectRetain(v87);
              v216 = Array.description.getter(v215, v214);
              v218 = v217;
              swift_bridgeObjectRelease(v87);
              v290 = sub_10001A820(v216, v218, &v291);
              v34 = v289;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
              swift_bridgeObjectRelease_n(v87, 2);
              swift_bridgeObjectRelease(v218);
              v166 = "Trying to create an assignment notification content without a list. Returning empty content. {reminderIDs: %s}";
              goto LABEL_133;
            }
LABEL_134:

            swift_bridgeObjectRelease_n(v87, 2);
            return v34;
          }
        }
        else
        {
          v89 = v284;
          if (*(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_23;
        }
        if (qword_100837040 != -1)
          swift_once(&qword_100837040, sub_100241804);
        v263 = type metadata accessor for Logger(0);
        sub_10001AAA8(v263, (uint64_t)qword_100841A78);
        v264 = swift_bridgeObjectRetain(v87);
        v157 = Logger.logObject.getter(v264);
        v158 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v157, v158))
        {
          v159 = (uint8_t *)swift_slowAlloc(12, -1);
          v160 = swift_slowAlloc(32, -1);
          v291 = v160;
          *(_DWORD *)v159 = 136315138;
          v265 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v266 = swift_bridgeObjectRetain(v87);
          v267 = Array.description.getter(v266, v265);
          v269 = v268;
          swift_bridgeObjectRelease(v87);
          v290 = sub_10001A820(v267, v269, &v291);
          v34 = v289;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
          swift_bridgeObjectRelease_n(v87, 2);
          swift_bridgeObjectRelease(v269);
          v166 = "Trying to create an assignment notification content with 0 reminderIDs. Returning empty content. {reminderIDs: %s}";
          goto LABEL_133;
        }
        goto LABEL_134;
      }
      if (qword_100837040 != -1)
        swift_once(&qword_100837040, sub_100241804);
      v155 = type metadata accessor for Logger(0);
      sub_10001AAA8(v155, (uint64_t)qword_100841A78);
      v156 = swift_bridgeObjectRetain(v87);
      v157 = Logger.logObject.getter(v156);
      v158 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v157, v158))
        goto LABEL_134;
      v159 = (uint8_t *)swift_slowAlloc(12, -1);
      v160 = swift_slowAlloc(32, -1);
      v291 = v160;
      *(_DWORD *)v159 = 136315138;
      v161 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v162 = swift_bridgeObjectRetain(v87);
      v163 = Array.description.getter(v162, v161);
      v165 = v164;
      swift_bridgeObjectRelease(v87);
      v290 = sub_10001A820(v163, v165, &v291);
      v34 = v289;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease(v165);
      v166 = "Trying to create an assignment notification content with inconsistent reminderIDs in parameters. Returning "
             "empty content. {reminderIDs: %s}";
LABEL_133:
      _os_log_impl((void *)&_mh_execute_header, v157, v158, v166, v159, 0xCu);
      swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v160, -1, -1);
      swift_slowDealloc(v159, -1, -1);

      return v34;
    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v143 = type metadata accessor for Logger(0);
    sub_10001AAA8(v143, (uint64_t)qword_100841A78);
    v144 = swift_bridgeObjectRetain(v87);
    v145 = Logger.logObject.getter(v144);
    v146 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v145, v146))
    {
      v147 = (uint8_t *)swift_slowAlloc(12, -1);
      v148 = swift_slowAlloc(32, -1);
      v291 = v148;
      *(_DWORD *)v147 = 136315138;
      v149 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v150 = swift_bridgeObjectRetain(v87);
      v151 = Array.description.getter(v150, v149);
      v153 = v152;
      swift_bridgeObjectRelease(v87);
      v290 = sub_10001A820(v151, v153, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease(v153);
      v154 = "Trying to create an assignment notification content without reminderIDs. Returning empty content. {reminderIDs: %s}";
LABEL_71:
      _os_log_impl((void *)&_mh_execute_header, v145, v146, v154, v147, 0xCu);
      swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v148, -1, -1);
      swift_slowDealloc(v147, -1, -1);

      return v289;
    }
    goto LABEL_72;
  }
  if (v30 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v87 = *v29;
    if (!v281)
    {
      if (qword_100837040 != -1)
        swift_once(&qword_100837040, sub_100241804);
      v183 = type metadata accessor for Logger(0);
      sub_10001AAA8(v183, (uint64_t)qword_100841A78);
      v184 = swift_bridgeObjectRetain(v87);
      v145 = Logger.logObject.getter(v184);
      v146 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v145, v146))
      {
        v147 = (uint8_t *)swift_slowAlloc(12, -1);
        v148 = swift_slowAlloc(32, -1);
        v291 = v148;
        *(_DWORD *)v147 = 136315138;
        v185 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v186 = Array.description.getter(v87, v185);
        v188 = v187;
        v290 = sub_10001A820(v186, v187, &v291);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
        swift_bridgeObjectRelease_n(v87, 2);
        swift_bridgeObjectRelease(v188);
        v154 = "Trying to create a shared list update notification without reminderIDs. Returning empty content. {reminderIDs: %s}";
        goto LABEL_71;
      }
LABEL_72:

      swift_bridgeObjectRelease_n(v87, 2);
      return v289;
    }
    v121 = sub_100307D6C(v281, *v29);
    v34 = v289;
    if ((v121 & 1) == 0)
    {
      if (qword_100837040 != -1)
        swift_once(&qword_100837040, sub_100241804);
      v190 = type metadata accessor for Logger(0);
      sub_10001AAA8(v190, (uint64_t)qword_100841A78);
      v191 = swift_bridgeObjectRetain(v87);
      v157 = Logger.logObject.getter(v191);
      v158 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v157, v158))
        goto LABEL_134;
      v159 = (uint8_t *)swift_slowAlloc(12, -1);
      v160 = swift_slowAlloc(32, -1);
      v291 = v160;
      *(_DWORD *)v159 = 136315138;
      v192 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v193 = Array.description.getter(v87, v192);
      v195 = v194;
      v290 = sub_10001A820(v193, v194, &v291);
      v34 = v289;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease(v195);
      v166 = "Trying to create a shared list update notification with inconsistent reminderIDs in parameters. Returning e"
             "mpty content. {reminderIDs: %s}";
      goto LABEL_133;
    }
    if ((unint64_t)v87 >> 62)
    {
      if (v87 < 0)
        v270 = v87;
      else
        v270 = v87 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v87);
      v271 = _CocoaArrayWrapper.endIndex.getter(v270);
      swift_bridgeObjectRelease(v87);
      v122 = v284;
      if (v271)
      {
LABEL_39:
        if (v122)
        {
          v60 = v122;
          v293.value._rawValue = (void *)swift_bridgeObjectRetain(v87);
          UNMutableNotificationContent.setReminderIDs(_:)(v293);
          v123 = objc_msgSend(v60, "objectID", swift_bridgeObjectRelease(v87).n128_f64[0]);
          ((void (*)(void))UNMutableNotificationContent.setListID(_:))();

          if ((unint64_t)v87 >> 62)
          {
            if (v87 < 0)
              v253 = v87;
            else
              v253 = v87 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v87);
            v124 = _CocoaArrayWrapper.endIndex.getter(v253);
            swift_bridgeObjectRelease(v87);
          }
          else
          {
            v124 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v230 = swift_bridgeObjectRelease(v87);
          v231 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
          if (v124 != 1)
            v231 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
          goto LABEL_115;
        }
        if (qword_100837040 != -1)
          swift_once(&qword_100837040, sub_100241804);
        v247 = type metadata accessor for Logger(0);
        sub_10001AAA8(v247, (uint64_t)qword_100841A78);
        v248 = swift_bridgeObjectRetain(v87);
        v157 = Logger.logObject.getter(v248);
        v158 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v157, v158))
        {
          v159 = (uint8_t *)swift_slowAlloc(12, -1);
          v160 = swift_slowAlloc(32, -1);
          v291 = v160;
          *(_DWORD *)v159 = 136315138;
          v249 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v250 = Array.description.getter(v87, v249);
          v252 = v251;
          v290 = sub_10001A820(v250, v251, &v291);
          v34 = v289;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
          swift_bridgeObjectRelease_n(v87, 2);
          swift_bridgeObjectRelease(v252);
          v166 = "Trying to create a shared list update notification content without a list. Returning empty content. {reminderIDs: %s}";
          goto LABEL_133;
        }
        goto LABEL_134;
      }
    }
    else
    {
      v122 = v284;
      if (*(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_39;
    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v272 = type metadata accessor for Logger(0);
    sub_10001AAA8(v272, (uint64_t)qword_100841A78);
    v273 = swift_bridgeObjectRetain(v87);
    v157 = Logger.logObject.getter(v273);
    v158 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v157, v158))
    {
      v159 = (uint8_t *)swift_slowAlloc(12, -1);
      v160 = swift_slowAlloc(32, -1);
      v291 = v160;
      *(_DWORD *)v159 = 136315138;
      v274 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v275 = Array.description.getter(v87, v274);
      v277 = v276;
      v290 = sub_10001A820(v275, v276, &v291);
      v34 = v289;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease(v277);
      v166 = "Trying to create a shared list update notification with 0 reminderIDs. Returning empty content. {reminderIDs: %s}";
      goto LABEL_133;
    }
    goto LABEL_134;
  }
  if (v30 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    (*(void (**)(unint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v135 = v280;
    v136 = v29;
    v31 = v8;
    (*(void (**)(char *, unint64_t *, uint64_t))(v9 + 32))(v280, v136, v8);
    if (v46)
    {
      v137 = v46;
      REMNotificationIdentifier.init(reminder:)();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      v34 = v289;
      UNMutableNotificationContent.setNotificationIdentifier(_:)(v7);
      sub_10000882C((uint64_t)v7, &qword_100850D20);
      objc_msgSend(v34, "setInterruptionLevel:", 2);
      v138 = objc_msgSend(v137, "titleDocument");
      if (v138)
      {
        v139 = v138;
        v140 = objc_msgSend(v138, "string");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
        v142 = v141;

      }
      else
      {
        v142 = 0xE000000000000000;
      }
      v232 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setTitle:", v232, swift_bridgeObjectRelease(v142).n128_f64[0]);

      v233 = v285;
      v234 = v286;
      v235 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104);
      v236 = v287;
      v237 = v235(v286, enum case for RDUserNotificationCategory.reminderAlarm(_:), v287);
      RDUserNotificationCategory.rawValue.getter(v237);
      v239 = v238;
      v240 = *(void (**)(char *, uint64_t))(v233 + 8);
      v240(v234, v236);
      v241 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setThreadIdentifier:", v241, swift_bridgeObjectRelease(v239).n128_f64[0]);

      v242 = v235(v234, enum case for RDUserNotificationCategory.dueDateDeltaAlarm(_:), v236);
      RDUserNotificationCategory.rawValue.getter(v242);
      v244 = v243;
      v240(v234, v236);
      v245 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "setCategoryIdentifier:", v245, swift_bridgeObjectRelease(v244).n128_f64[0]);

      objc_msgSend(v34, "setShouldPreventNotificationDismissalAfterDefaultAction:", 1);
      v246 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
      objc_msgSend(v34, "setSound:", v246);

      sub_1002459DC(v34, v137);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v280, v31);
      return v34;
    }
    if (qword_100837040 != -1)
      swift_once(&qword_100837040, sub_100241804);
    v197 = type metadata accessor for Logger(0);
    sub_10001AAA8(v197, (uint64_t)qword_100841A78);
    v198 = v9;
    v199 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
    v200 = v279;
    v201 = v199(v279, v135, v8);
    v202 = Logger.logObject.getter(v201);
    v203 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v202, v203))
    {
      v204 = (uint8_t *)swift_slowAlloc(12, -1);
      v205 = swift_slowAlloc(32, -1);
      v291 = v205;
      *(_DWORD *)v204 = 136315138;
      v288 = (void (**)(char *, uint64_t, __n128))(v204 + 4);
      v206 = v283;
      v199(v283, v200, v31);
      v207 = String.init<A>(describing:)(v206, v31);
      v209 = v208;
      v290 = sub_10001A820(v207, v208, &v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291);
      v210 = swift_bridgeObjectRelease(v209);
      v211 = *(void (**)(char *, uint64_t, __n128))(v198 + 8);
      v211(v200, v31, v210);
      _os_log_impl((void *)&_mh_execute_header, v202, v203, "Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}", v204, 0xCu);
      swift_arrayDestroy(v205, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v205, -1, -1);
      swift_slowDealloc(v204, -1, -1);

      ((void (*)(char *, uint64_t))v211)(v280, v31);
      return v289;
    }

    v119 = *(void (**)(char *, uint64_t))(v198 + 8);
    v119(v200, v8);
    v120 = v135;
    goto LABEL_43;
  }
  if (v30 == enum case for RDUserNotificationType.todayNotification(_:))
  {
    v175 = v285;
    v174 = v286;
    v176 = v287;
    v177 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104))(v286, enum case for RDUserNotificationCategory.todayNotification(_:), v287);
    RDUserNotificationCategory.rawValue.getter(v177);
    v179 = v178;
    (*(void (**)(char *, uint64_t))(v175 + 8))(v174, v176);
    v180 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v181 = swift_bridgeObjectRelease(v179).n128_u64[0];
    v34 = v289;
    objc_msgSend(v289, "setCategoryIdentifier:", v180, v181);

    v182 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "soundWithAlertType:", 11);
    objc_msgSend(v34, "setSound:", v182);
LABEL_94:

    return v34;
  }
  v34 = v289;
  if (v30 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
  {
    v196 = (unsigned int *)&enum case for RDUserNotificationCategory.todayNotificationBadge(_:);
LABEL_93:
    v224 = v285;
    v223 = v286;
    v225 = v287;
    v226 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v285 + 104))(v286, *v196, v287);
    RDUserNotificationCategory.rawValue.getter(v226);
    v228 = v227;
    (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v225);
    v182 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v228);
    objc_msgSend(v34, "setCategoryIdentifier:", v182);
    goto LABEL_94;
  }
  if (v30 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
  {
    v219 = (id)_REMGetLocalizedString(21);
    if (!v219)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v222 = v221;
      v219 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v220 = swift_bridgeObjectRelease(v222).n128_u64[0];
    }
    objc_msgSend(v34, "setBody:", v219, v220);

    v196 = (unsigned int *)&enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
    goto LABEL_93;
  }
  result = (id)_diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
  __break(1u);
  return result;
}

uint64_t sub_100241804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841A78);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841A78);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100241894(uint64_t a1, void *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  Class isa;
  Class v15;
  id v16;
  NSString v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  Class v32;
  NSString v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a4;
  v44 = a5;
  v42[0] = a3;
  v6 = type metadata accessor for RDUserNotificationCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  RDUserNotificationCategory.rawValue.getter(v8);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v42[1] = sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v15 = Array._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend((id)objc_opt_self(UNMutableNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v13, isa, v15, 0);

  v17 = (id)_REMGetLocalizedString(48);
  if (!v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v20 = v19;
    v17 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v20).n128_u64[0];
  }
  objc_msgSend(v16, "setHiddenPreviewsBodyPlaceholder:", v17, v18, v42[0]);

  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for RDUserNotificationCategory.singleAssignmentNotification(_:), v6);
  v21 = sub_1002451DC();
  dispatch thunk of RawRepresentable.rawValue.getter(&v47, v6, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v45, v6, v21);
  v22 = v48;
  v23 = v46;
  if (v47 == v45 && v48 == v46)
  {
    v24 = swift_bridgeObjectRelease_n(v48, 2);
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v45, v46, 0);
    swift_bridgeObjectRelease(v22);
    v24 = swift_bridgeObjectRelease(v23);
    if ((v25 & 1) == 0)
      a2 = (void *)v42[0];
  }
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v24);
  v26 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1006A8550;
  v28 = v43;
  *(_QWORD *)(v27 + 32) = v43;
  *(_QWORD *)(v27 + 40) = a2;
  v47 = v27;
  specialized Array._endMutation()(v27);
  v29 = v47;
  v30 = a2;
  v31 = v28;
  v32 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setActions:", v32, swift_bridgeObjectRelease(v29).n128_f64[0]);

  v33 = (id)_REMGetLocalizedString(47);
  if (!v33)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v36 = v35;
    v33 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v34 = swift_bridgeObjectRelease(v36).n128_u64[0];
  }
  objc_msgSend(v16, "setCategorySummaryFormat:", v33, v34);

  v37 = v16;
  v38 = v44;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
  v40 = *(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v39 = *(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v40 >= v39 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1);
  v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
  specialized Array._endMutation()(v41);

}

void sub_100241BD4(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25[5];
  _BYTE v26[64];

  v3 = v2;
  if (qword_100837040 != -1)
    swift_once(&qword_100837040, sub_100241804);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_100841A78);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v25[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&v23 = sub_10001A820(a1, a2, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 8);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Setting BLTBulletinContextKeyWatchLegacyMapKey to %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v12 = sub_10001A630(&qword_100841AB0);
  inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", 393216);
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  swift_bridgeObjectRetain(a2);
  v14 = sub_1002AFCC0(inited);
  *(_QWORD *)&v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(BLTBulletinContextKeyWatchLegacyMapKey);
  *((_QWORD *)&v23 + 1) = v15;
  AnyHashable.init<A>(_:)(v25, &v23, &type metadata for String, &protocol witness table for String);
  v16 = sub_10001A630(&qword_100841AB8);
  v24 = v16;
  *(_QWORD *)&v23 = v14;
  v17 = objc_msgSend(v3, "userInfo");
  v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v22 = v18;
  if (v16)
  {
    sub_10001A6CC(&v23, v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    sub_10028C16C(v21, (uint64_t)v25, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10020DA24((uint64_t)v25);
  }
  else
  {
    sub_10000882C((uint64_t)&v23, (uint64_t *)&unk_10083D5B0);
    sub_1002CB0A0((uint64_t)v25, v21);
    sub_10020DA24((uint64_t)v25);
    sub_10000882C((uint64_t)v21, (uint64_t *)&unk_10083D5B0);
    v18 = v22;
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setUserInfo:", isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

}

void sub_100241F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = a3;
  v17[9] = a1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v17[7] = (char *)v17 - v7;
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v11 = type metadata accessor for Date(0);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __asm { BR              X10 }
}

void sub_1002420F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  Class isa;
  id v21;
  void *v22;
  NSString v23;

  *(_QWORD *)(v7 - 120) = v2;
  *(_QWORD *)(v7 - 112) = a1;
  v8 = v1;
  v9 = *v6;
  v10 = objc_msgSend(v9, "displayDate");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    objc_msgSend(v12, "setDoesRelativeDateFormatting:", 1);
    objc_msgSend(v12, "setDateStyle:", 1);
    objc_msgSend(v12, "setTimeStyle:", 1);
    if (objc_msgSend(v9, "isOverdue"))
    {
      v13 = objc_msgSend(v11, "date");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v14 = v8;
      v15 = *(_QWORD *)(v7 - 112);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v15);
      sub_100454FEC(v9, *(_QWORD *)(v7 - 96), v5, v4);
      sub_10000882C(v5, (uint64_t *)&unk_1008380D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v15) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v3, v4, v15);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v21 = objc_msgSend(v12, "stringFromDate:", isa);

        static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v15);
        goto LABEL_8;
      }
      sub_10000882C(v4, (uint64_t *)&unk_1008380D0);
    }
    v16 = objc_msgSend(v11, "date");
    v17 = *(_QWORD *)(v7 - 120);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, _QWORD))(v8 + 8))(v17, *(_QWORD *)(v7 - 112));
    v19 = objc_msgSend(v12, "stringFromDate:", v18);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  }
LABEL_8:
  v22 = *(void **)(v7 - 88);
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setBody:", v23, swift_bridgeObjectRelease().n128_f64[0]);

}

id sub_100242DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString v9;
  NSURL *v10;
  void *v11;
  void *v12;
  NSDictionary v13;
  id v14;
  id v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v23;

  v5 = v4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  if (a4)
  {
    v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v13.super.isa = 0;
  }
  v23 = 0;
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "attachmentWithIdentifier:URL:options:error:", v9, v12, v13.super.isa, &v23);

  v15 = v23;
  if (v14)
  {
    v16 = type metadata accessor for URL(0);
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v18 = v15;
    v17(a3, v16);
  }
  else
  {
    v19 = v23;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow(v20);
    v21 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a3, v21);
  }
  return v14;
}

uint64_t sub_100242F2C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = type metadata accessor for RDUserNotificationCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0x726F4D7478656E2ELL;
  v9 = (void *)0xEC000000676E696ELL;
  switch(a1)
  {
    case 0:
    case 3:
      goto LABEL_4;
    case 1:
      v9 = (void *)0xEE006E6F6F6E7265;
      v8 = 0x746641736968742ELL;
      goto LABEL_4;
    case 2:
      v9 = (void *)0xE800000000000000;
      v8 = 0x746867696E6F742ELL;
LABEL_4:
      v10 = (a2 & 1) == 0;
      if ((a2 & 1) != 0)
        v11 = 0x646E656B6565772ELL;
      else
        v11 = 0;
      if (v10)
        v12 = (void *)0xE000000000000000;
      else
        v12 = (void *)0xE800000000000000;
      v21 = 0;
      v22 = 0xE000000000000000;
      v13 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for RDUserNotificationCategory.reminderAlarm(_:), v4);
      v14 = RDUserNotificationCategory.rawValue.getter(v13);
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRelease(v22);
      v21 = v14;
      v22 = v16;
      v17._countAndFlagsBits = v8;
      v17._object = v9;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v9);
      v18._countAndFlagsBits = v11;
      v18._object = v12;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v12);
      result = v21;
      break;
    default:
      type metadata accessor for REMReminderNextThirdsHour(0);
      v21 = a1;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v20, &v21, v20, &type metadata for Int);
      __break(1u);
      break;
  }
  return result;
}

_QWORD *sub_1002430E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  id v28;
  NSString v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  id v40;
  NSString v41;
  NSString v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  id v52;
  NSString v53;
  NSString v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, _QWORD, _QWORD *);
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_BYTE *, char *, _QWORD *);
  _BYTE *v69;
  int v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  NSString v79;
  id v80;
  NSString v81;
  NSString v82;
  uint64_t (*v83)(_BYTE *, _QWORD, _QWORD *);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_BYTE *, _QWORD *);
  id v88;
  uint64_t v89;
  uint64_t v90;
  NSString v91;
  id v92;
  NSString v93;
  NSString v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  NSString v102;
  id v103;
  NSString v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void *object;
  void *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSString v120;
  double v121;
  id v122;
  NSString v123;
  NSString v124;
  double v125;
  id v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  NSString v135;
  id v136;
  NSString v137;
  NSString v138;
  double v139;
  NSString v140;
  Class v141;
  Class v142;
  id v143;
  uint64_t v144;
  uint64_t inited;
  id v146;
  void *v147;
  id v148;
  _QWORD *v149;
  void *v150;
  id v151;
  id v152;
  id v153;
  _QWORD *v154;
  id v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void *v159;
  id v160;
  id v161;
  id v162;
  _QWORD *v163;
  id v164;
  id v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  id v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  id v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  void *v179;
  id v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  void *v184;
  id v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  Class v190;
  NSString v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  NSString v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  NSString v208;
  Class isa;
  Class v210;
  id v211;
  NSString v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  NSString v231;
  id v232;
  NSString v233;
  NSString v234;
  id v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  NSString v244;
  Class v245;
  Class v246;
  id v247;
  NSString v248;
  double v249;
  uint64_t v250;
  uint64_t v251;
  id v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  id v263;
  uint64_t v264;
  uint64_t v265;
  NSString v266;
  id v267;
  NSString v268;
  NSString v269;
  id v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  NSString v276;
  Class v277;
  Class v278;
  id v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  Class v284;
  NSString v285;
  double v286;
  uint64_t v287;
  uint64_t v288;
  id v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  void (*v297)(char *, _QWORD, _QWORD *);
  void *v298;
  char v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  NSString v305;
  Class v306;
  _QWORD *v307;
  Class v308;
  _BYTE *v309;
  id v310;
  id v311;
  uint64_t v312;
  uint64_t v313;
  NSString v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  void (*v324)(char *, _QWORD, _QWORD *);
  void *v325;
  char v326;
  uint64_t v327;
  _BYTE *v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  NSString v333;
  Class v334;
  _QWORD *v335;
  Class v336;
  id v337;
  id v338;
  uint64_t v339;
  uint64_t v340;
  NSString v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  _BYTE v347[4];
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  __int128 v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  int v362;
  int v363;
  __int128 v364;
  char *v365;
  unsigned int v366;
  _QWORD *v367;
  unsigned int v368;
  unsigned int v369;
  unint64_t v370;
  int v371;
  _BYTE *v372;
  unsigned int v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  _BYTE *v381;
  unint64_t v382;
  unsigned int v383;
  unsigned int v384;
  __int128 v385;
  _BYTE *v386;
  _BYTE *v387;
  id v388;
  id v389;
  id v390;
  id v391;
  uint64_t v392;
  _BYTE *v393;
  uint64_t v394;
  id v395;
  id v396;
  id v397;
  id v398;
  _QWORD *v399;
  char *v400;
  char v401[12];
  uint64_t v402;
  unint64_t v403;

  v394 = type metadata accessor for RDUserNotificationAction(0);
  v375 = *(_QWORD *)(v394 - 8);
  __chkstk_darwin(v394);
  v393 = &v347[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1 = (_QWORD *)type metadata accessor for RDUserNotificationCategory(0);
  v2 = *(v1 - 1);
  v3 = __chkstk_darwin(v1);
  v5 = &v347[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v3);
  v8 = &v347[-v7];
  v9 = __chkstk_darwin(v6);
  v372 = &v347[-v10];
  v11 = __chkstk_darwin(v9);
  v381 = &v347[-v12];
  v403 = (unint64_t)_swiftEmptyArrayStorage;
  v13 = static RDUserNotificationCategory.allCases.getter(v11);
  v14 = (unint64_t *)v13;
  v378 = *(_QWORD *)(v13 + 16);
  if (!v378)
  {
    swift_bridgeObjectRelease(v13);
    return _swiftEmptyArrayStorage;
  }
  v15 = 0;
  v358 = 0;
  v16 = *(unsigned __int8 *)(v2 + 80);
  v380 = enum case for RDUserNotificationCategory.reminderAlarm(_:);
  v357 = (v16 + 32) & ~v16;
  v379 = v13 + v357;
  v371 = enum case for RDUserNotificationCategory.todayNotification(_:);
  v366 = enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:);
  v363 = enum case for RDUserNotificationCategory.todayNotificationBadge(_:);
  v362 = enum case for RDUserNotificationCategory.caldavSharedList(_:);
  v361 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
  v360 = enum case for RDUserNotificationCategory.singleAssignmentNotification(_:);
  v359 = enum case for RDUserNotificationCategory.multipleAssignmentsNotification(_:);
  v355 = enum case for RDUserNotificationCategory.sharedListSingleReminderAddedNotification(_:);
  v356 = v16 | 7;
  v365 = "sWithLocalElementIDPrefix";
  v370 = 0x80000001006FDBB0;
  v385 = xmmword_1006A3BF0;
  v364 = xmmword_1006A7330;
  v351 = xmmword_1006A3C40;
  v354 = enum case for RDUserNotificationCategory.sharedListMultipleRemindersAddedNotification(_:);
  v350 = enum case for RDUserNotificationCategory.sharedListSingleReminderCompletedNotification(_:);
  v349 = enum case for RDUserNotificationCategory.sharedListMultipleRemindersCompletedNotification(_:);
  v373 = enum case for RDUserNotificationAction.markAsCompleted(_:);
  v353 = enum case for RDUserNotificationAction.viewAssignmentInList(_:);
  v352 = enum case for RDUserNotificationAction.declineAssignment(_:);
  v369 = enum case for RDUserNotificationAction.snoozeForOneHour(_:);
  v368 = enum case for RDUserNotificationAction.snoozeForOneDay(_:);
  v384 = enum case for RDUserNotificationAction.snoozeToNextThirds(_:);
  v383 = enum case for RDUserNotificationAction.snoozeToNextWeekend(_:);
  v367 = v1;
  v377 = v2;
  v386 = v5;
  v387 = v8;
  v376 = (unint64_t *)v13;
  v348 = enum case for RDUserNotificationCategory.dueDateDeltaAlarm(_:);
  while (2)
  {
    if (v15 >= v14[2])
      goto LABEL_91;
    v67 = *(_QWORD *)(v2 + 72);
    v68 = *(uint64_t (**)(_BYTE *, char *, _QWORD *))(v2 + 16);
    v69 = v381;
    v68(v381, (char *)(v379 + v67 * v15), v1);
    v70 = (*(uint64_t (**)(_BYTE *, _QWORD *))(v2 + 88))(v69, v1);
    if (v70 != v380)
    {
      if (v70 == v371)
      {
LABEL_49:
        v203 = v15;
        v204 = v372;
        v205 = (*(uint64_t (**)(_BYTE *))(v2 + 104))(v372);
        RDUserNotificationCategory.rawValue.getter(v205);
        v207 = v206;
        (*(void (**)(_BYTE *, _QWORD *))(v2 + 8))(v204, v1);
        v208 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v207);
        sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v210 = Array._bridgeToObjectiveC()().super.isa;
        v211 = objc_msgSend((id)objc_opt_self(UNMutableNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v208, isa, v210, 3);

        v212 = (id)_REMGetLocalizedString(22);
        if (!v212)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v215 = v214;
          v212 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v213 = swift_bridgeObjectRelease(v215).n128_u64[0];
        }
        objc_msgSend(v211, "setHiddenPreviewsBodyPlaceholder:", v212, v213);

        v216 = v211;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v216);
        v218 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v217 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v15 = v203;
        if (v218 >= v217 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v217 > 1);
        v219 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v218, v216);
        specialized Array._endMutation()(v219);

        v14 = v376;
        goto LABEL_5;
      }
      if (v70 == v366)
      {
        v220 = v15;
        v221 = v375;
        v222 = v366;
        v224 = v393;
        v223 = v394;
        v225 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v375 + 104))(v393, v373, v394);
        RDUserNotificationAction.rawValue.getter(v225);
        v227 = v226;
        (*(void (**)(_BYTE *, uint64_t))(v221 + 8))(v224, v223);
        v228 = (id)_REMGetLocalizedString(26);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v228);
        v230 = v229;

        v231 = String._bridgeToObjectiveC()();
        v232 = objc_msgSend((id)objc_opt_self(UNNotificationActionIcon), "iconWithSystemImageName:", v231);

        v2 = v377;
        v233 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v227);
        v234 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v230);
        v235 = objc_msgSend((id)objc_opt_self(UNNotificationAction), "actionWithIdentifier:title:options:icon:", v233, v234, 0, v232);

        v236 = v372;
        v237 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(v2 + 104))(v372, v222, v1);
        RDUserNotificationCategory.rawValue.getter(v237);
        v239 = v238;
        (*(void (**)(_BYTE *, _QWORD *))(v2 + 8))(v236, v1);
        v240 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v241 = swift_allocObject(v240, 40, 7);
        *(_OWORD *)(v241 + 16) = v364;
        *(_QWORD *)(v241 + 32) = v235;
        v402 = v241;
        specialized Array._endMutation()(v241);
        v242 = v402;
        v243 = v235;
        v244 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v239);
        sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
        v245 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v242);
        v246 = Array._bridgeToObjectiveC()().super.isa;
        v247 = objc_msgSend((id)objc_opt_self(UNMutableNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v244, v245, v246, 3);

        v248 = (id)_REMGetLocalizedString(22);
        if (!v248)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v251 = v250;
          v248 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v249 = swift_bridgeObjectRelease(v251).n128_u64[0];
        }
        objc_msgSend(v247, "setHiddenPreviewsBodyPlaceholder:", v248, v249);

        v252 = v247;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v252);
        v254 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v253 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v8 = v387;
        if (v254 >= v253 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v253 > 1);
        v255 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v254, v252);
        specialized Array._endMutation()(v255);

      }
      else
      {
        if (v70 == v363 || v70 == v362)
          goto LABEL_5;
        if (v70 == v361)
          goto LABEL_49;
        if (v70 == v360 || v70 == v359)
        {
          v18 = v375;
          v400 = *(char **)(v375 + 104);
          v374 = v15;
          v19 = v393;
          v20 = v394;
          v21 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v400)(v393, v353, v394);
          RDUserNotificationAction.rawValue.getter(v21);
          v23 = v22;
          v399 = *(_QWORD **)(v18 + 8);
          ((void (*)(_BYTE *, uint64_t))v399)(v19, v20);
          v24 = (id)_REMGetLocalizedString(44);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          v26 = v25;

          v27 = String._bridgeToObjectiveC()();
          v398 = (id)objc_opt_self(UNNotificationActionIcon);
          v28 = objc_msgSend(v398, "iconWithSystemImageName:", v27);

          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v23);
          v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          v395 = (id)objc_opt_self(UNNotificationAction);
          v397 = objc_msgSend(v395, "actionWithIdentifier:title:options:icon:", v29, v30, 4, v28);

          v31 = v352;
          v32 = v20;
          v33 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v400)(v19, v352, v20);
          RDUserNotificationAction.rawValue.getter(v33);
          v35 = v34;
          ((void (*)(_BYTE *, uint64_t))v399)(v19, v20);
          v36 = (id)_REMGetLocalizedString(45);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v38 = v37;

          v39 = String._bridgeToObjectiveC()();
          v40 = objc_msgSend(v398, "iconWithSystemImageName:", v39);

          v41 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v35);
          v42 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v43 = swift_bridgeObjectRelease(v38).n128_u64[0];
          v44 = v395;
          v396 = objc_msgSend(v395, "actionWithIdentifier:title:options:icon:", v41, v42, 0, v40, v43);

          v45 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v400)(v19, v31, v32);
          RDUserNotificationAction.rawValue.getter(v45);
          v47 = v46;
          ((void (*)(_BYTE *, uint64_t))v399)(v19, v32);
          v48 = (id)_REMGetLocalizedString(46);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v50 = v49;

          v51 = String._bridgeToObjectiveC()();
          v52 = objc_msgSend(v398, "iconWithSystemImageName:", v51);

          v53 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v47);
          v54 = String._bridgeToObjectiveC()();
          v55 = v50;
          v5 = v386;
          v56 = objc_msgSend(v44, "actionWithIdentifier:title:options:icon:", v53, v54, 0, v52, swift_bridgeObjectRelease(v55).n128_f64[0]);

          v57 = sub_10001A630(&qword_100841A98);
          v58 = v357;
          v59 = swift_allocObject(v57, v357 + 2 * v67, v356);
          v60 = v59 + v58;
          v61 = *(void (**)(uint64_t, _QWORD, _QWORD *))(v377 + 104);
          v61(v59 + v58, v360, v367);
          v61(v59 + v58 + v67, v359, v367);
          v63 = v396;
          v62 = v397;
          v64 = v358;
          sub_100241894(v60, v396, (uint64_t)v56, v397, &v403);
          v1 = v367;
          sub_100241894(v60 + v67, v63, (uint64_t)v56, v62, &v403);
          v358 = v64;

          v14 = v376;
          v8 = v387;
          swift_setDeallocating(v59);
          v65 = v60;
          v2 = v377;
          swift_arrayDestroy(v65, 2, v1);
          v66 = v59;
          v15 = v374;
          swift_deallocClassInstance(v66, 32, 7);
          goto LABEL_5;
        }
        if (v70 == v355 || v70 == v354)
        {
          v374 = v15;
          v293 = sub_10001A630(&qword_100841A98);
          v294 = v357;
          v295 = swift_allocObject(v293, v357 + 2 * v67, v356);
          *(_OWORD *)(v295 + 16) = v351;
          v399 = (_QWORD *)v295;
          v296 = (char *)(v295 + v294);
          v297 = *(void (**)(char *, _QWORD, _QWORD *))(v2 + 104);
          v297(v296, v355, v1);
          v400 = v296;
          v297(&v296[v67], v354, v1);
          v298 = (void *)objc_opt_self(UNMutableNotificationCategory);
          v299 = 0;
          v300 = 0;
          do
          {
            v301 = v299;
            v302 = v68(v8, &v400[v300 * v67], v1);
            RDUserNotificationCategory.rawValue.getter(v302);
            v304 = v303;
            v305 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v304);
            sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
            v306 = Array._bridgeToObjectiveC()().super.isa;
            v307 = v1;
            v308 = Array._bridgeToObjectiveC()().super.isa;
            v309 = v8;
            v310 = objc_msgSend(v298, "categoryWithIdentifier:actions:intentIdentifiers:options:", v305, v306, v308, 0);

            v311 = (id)_REMGetLocalizedString(69);
            static String._unconditionallyBridgeFromObjectiveC(_:)(v311);
            v313 = v312;

            v314 = String._bridgeToObjectiveC()();
            objc_msgSend(v310, "setHiddenPreviewsBodyPlaceholder:", v314, swift_bridgeObjectRelease(v313).n128_f64[0]);

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v315);
            v317 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v316 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v317 >= v316 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v316 > 1);
            v318 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v317, v310);
            specialized Array._endMutation()(v318);
            v2 = v377;
            (*(void (**)(_BYTE *, _QWORD *))(v377 + 8))(v309, v307);
            v299 = 1;
            v300 = 1;
            v1 = v307;
            v8 = v309;
          }
          while ((v301 & 1) == 0);
          v319 = v399;
          swift_setDeallocating(v399);
          swift_arrayDestroy(v400, v319[2], v1);
          swift_deallocClassInstance(v319, 32, 7);
          v5 = v386;
          goto LABEL_55;
        }
        if (v70 == v350 || v70 == v349)
        {
          v374 = v15;
          v320 = sub_10001A630(&qword_100841A98);
          v321 = v357;
          v322 = swift_allocObject(v320, v357 + 2 * v67, v356);
          *(_OWORD *)(v322 + 16) = v351;
          v399 = (_QWORD *)v322;
          v323 = (char *)(v322 + v321);
          v324 = *(void (**)(char *, _QWORD, _QWORD *))(v2 + 104);
          v324(v323, v350, v1);
          v400 = v323;
          v324(&v323[v67], v349, v1);
          v325 = (void *)objc_opt_self(UNMutableNotificationCategory);
          v326 = 0;
          v327 = 0;
          v328 = v5;
          do
          {
            v329 = v326;
            v330 = v68(v328, &v400[v327 * v67], v1);
            RDUserNotificationCategory.rawValue.getter(v330);
            v332 = v331;
            v333 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v332);
            sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
            v334 = Array._bridgeToObjectiveC()().super.isa;
            v335 = v1;
            v336 = Array._bridgeToObjectiveC()().super.isa;
            v337 = objc_msgSend(v325, "categoryWithIdentifier:actions:intentIdentifiers:options:", v333, v334, v336, 0);

            v338 = (id)_REMGetLocalizedString(76);
            static String._unconditionallyBridgeFromObjectiveC(_:)(v338);
            v340 = v339;

            v341 = String._bridgeToObjectiveC()();
            objc_msgSend(v337, "setHiddenPreviewsBodyPlaceholder:", v341, swift_bridgeObjectRelease(v340).n128_f64[0]);

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v342);
            v344 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v343 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v344 >= v343 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v343 > 1);
            v345 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v344, v337);
            specialized Array._endMutation()(v345);
            v2 = v377;
            (*(void (**)(_BYTE *, _QWORD *))(v377 + 8))(v328, v335);
            v326 = 1;
            v327 = 1;
            v1 = v335;
          }
          while ((v329 & 1) == 0);
          v346 = v399;
          swift_setDeallocating(v399);
          swift_arrayDestroy(v400, v346[2], v1);
          swift_deallocClassInstance(v346, 32, 7);
          v5 = v328;
          v8 = v387;
          goto LABEL_55;
        }
        v256 = v348;
        if (v70 != v348)
        {
LABEL_92:
          result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
          __break(1u);
          return result;
        }
        v220 = v15;
        v257 = v375;
        v259 = v393;
        v258 = v394;
        v260 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v375 + 104))(v393, v373, v394);
        RDUserNotificationAction.rawValue.getter(v260);
        v262 = v261;
        (*(void (**)(_BYTE *, uint64_t))(v257 + 8))(v259, v258);
        v263 = (id)_REMGetLocalizedString(26);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
        v265 = v264;

        v266 = String._bridgeToObjectiveC()();
        v267 = objc_msgSend((id)objc_opt_self(UNNotificationActionIcon), "iconWithSystemImageName:", v266);

        v268 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v262);
        v269 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v265);
        v270 = objc_msgSend((id)objc_opt_self(UNNotificationAction), "actionWithIdentifier:title:options:icon:", v268, v269, 0, v267);

        v271 = v377;
        v272 = v372;
        v273 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(v377 + 104))(v372, v256, v1);
        RDUserNotificationCategory.rawValue.getter(v273);
        v275 = v274;
        (*(void (**)(_BYTE *, _QWORD *))(v271 + 8))(v272, v1);
        v276 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v275);
        sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
        v277 = Array._bridgeToObjectiveC()().super.isa;
        v278 = Array._bridgeToObjectiveC()().super.isa;
        v279 = objc_msgSend((id)objc_opt_self(UNMutableNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v276, v277, v278, 3);

        v280 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v281 = swift_allocObject(v280, 40, 7);
        *(_OWORD *)(v281 + 16) = v364;
        *(_QWORD *)(v281 + 32) = v270;
        v402 = v281;
        specialized Array._endMutation()(v281);
        v282 = v402;
        v283 = v270;
        v284 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v279, "setActions:", v284, swift_bridgeObjectRelease(v282).n128_f64[0]);

        v285 = (id)_REMGetLocalizedString(22);
        if (!v285)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v288 = v287;
          v285 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v286 = swift_bridgeObjectRelease(v288).n128_u64[0];
        }
        objc_msgSend(v279, "setHiddenPreviewsBodyPlaceholder:", v285, v286);

        v289 = v279;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v289);
        v291 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v290 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v8 = v387;
        if (v291 >= v290 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v290 > 1);
        v292 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v291, v289);
        specialized Array._endMutation()(v292);

        v2 = v377;
      }
      v14 = v376;
      v15 = v220;
      goto LABEL_5;
    }
    v374 = v15;
    v71 = v375;
    v396 = *(id *)(v375 + 104);
    v72 = v393;
    v1 = (_QWORD *)v394;
    v73 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v396)(v393, v373, v394);
    RDUserNotificationAction.rawValue.getter(v73);
    v75 = v74;
    v395 = *(id *)(v71 + 8);
    ((void (*)(_BYTE *, _QWORD *))v395)(v72, v1);
    v76 = (id)_REMGetLocalizedString(26);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v78 = v77;

    v79 = String._bridgeToObjectiveC()();
    v398 = (id)objc_opt_self(UNNotificationActionIcon);
    v80 = objc_msgSend(v398, "iconWithSystemImageName:", v79);

    v81 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v75);
    v82 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v78);
    v397 = (id)objc_opt_self(UNNotificationAction);
    v391 = objc_msgSend(v397, "actionWithIdentifier:title:options:icon:", v81, v82, 0, v80);

    v83 = (uint64_t (*)(_BYTE *, _QWORD, _QWORD *))v396;
    v84 = ((uint64_t (*)(_BYTE *, _QWORD, _QWORD *))v396)(v72, v369, v1);
    RDUserNotificationAction.rawValue.getter(v84);
    v86 = v85;
    v87 = (void (*)(_BYTE *, _QWORD *))v395;
    ((void (*)(_BYTE *, _QWORD *))v395)(v72, v1);
    v88 = (id)_REMGetLocalizedString(29);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    v90 = v89;

    v91 = String._bridgeToObjectiveC()();
    v92 = objc_msgSend(v398, "iconWithSystemImageName:", v91);

    v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v86);
    v94 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v95 = swift_bridgeObjectRelease(v90).n128_u64[0];
    v389 = objc_msgSend(v397, "actionWithIdentifier:title:options:icon:", v93, v94, 0, v92, v95);

    v96 = v83(v72, v368, v1);
    RDUserNotificationAction.rawValue.getter(v96);
    v98 = v97;
    v87(v72, v1);
    v99 = (id)_REMGetLocalizedString(28);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    v101 = v100;

    v102 = String._bridgeToObjectiveC()();
    v103 = objc_msgSend(v398, "iconWithSystemImageName:", v102);

    v14 = (unint64_t *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v98);
    v104 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v105 = swift_bridgeObjectRelease(v101).n128_u64[0];
    v390 = objc_msgSend(v397, "actionWithIdentifier:title:options:icon:", v14, v104, 0, v103, v105);

    v388 = (id)objc_opt_self(UNMutableNotificationCategory);
    v106 = 0;
    while (2)
    {
      if (v106 >= 3)
      {
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      v107 = v106;
      v108 = 0;
      v109 = 0;
      v392 = (uint64_t)*(&off_1007DAFC0 + v107 + 4);
      v382 = v107 + 1;
      do
      {
        if (v109 >= 2)
        {
          __break(1u);
          goto LABEL_89;
        }
        LODWORD(v400) = v108;
        v110 = *((unsigned __int8 *)&off_1007DAFF8 + v109 + 32);
        v399 = (_QWORD *)sub_100242F2C(v392, *((_BYTE *)&off_1007DAFF8 + v109 + 32));
        v112 = v111;
        object = REMReminderNextThirdsHour.stringForSnoozingUntil()()._object;
        v114 = REMReminderNextThirdsHour.systemImageStringForSnoozingUntil()()._object;
        v115 = v393;
        v116 = v394;
        v117 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v396)(v393, v384, v394);
        RDUserNotificationAction.rawValue.getter(v117);
        v119 = v118;
        ((void (*)(_BYTE *, uint64_t))v395)(v115, v116);
        v120 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v121 = swift_bridgeObjectRelease(v114).n128_u64[0];
        v122 = objc_msgSend(v398, "iconWithSystemImageName:", v120, v121);

        v123 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v119);
        v124 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v125 = swift_bridgeObjectRelease(object).n128_u64[0];
        v1 = objc_msgSend(v397, "actionWithIdentifier:title:options:icon:", v123, v124, 0, v122, v125);

        v126 = 0;
        if (v110 == 1)
        {
          v127 = v393;
          v128 = v394;
          v129 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v396)(v393, v383, v394);
          RDUserNotificationAction.rawValue.getter(v129);
          v131 = v130;
          ((void (*)(_BYTE *, uint64_t))v395)(v127, v128);
          v132 = (id)_REMGetLocalizedString(31);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
          v134 = v133;

          v135 = String._bridgeToObjectiveC()();
          v136 = objc_msgSend(v398, "iconWithSystemImageName:", v135);

          v137 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v131);
          v138 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v139 = swift_bridgeObjectRelease(v134).n128_u64[0];
          v126 = objc_msgSend(v397, "actionWithIdentifier:title:options:icon:", v137, v138, 0, v136, v139);

        }
        v140 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v112);
        sub_1000151B0(0, &qword_100841A90, UNNotificationAction_ptr);
        v141 = Array._bridgeToObjectiveC()().super.isa;
        v142 = Array._bridgeToObjectiveC()().super.isa;
        v143 = objc_msgSend(v388, "categoryWithIdentifier:actions:intentIdentifiers:options:", v140, v141, v142, 3);

        objc_msgSend(v143, "addPrivateOptions:", 8519680);
        v144 = sub_10001A630(&qword_100841AA0);
        inited = swift_initStackObject(v144, v401);
        *(_OWORD *)(inited + 16) = v385;
        v146 = v391;
        v147 = v389;
        *(_QWORD *)(inited + 32) = v391;
        *(_QWORD *)(inited + 40) = v147;
        v148 = v390;
        *(_QWORD *)(inited + 48) = v1;
        *(_QWORD *)(inited + 56) = v148;
        *(_QWORD *)(inited + 64) = v126;
        *(_QWORD *)(inited + 72) = 0;
        v402 = inited;
        specialized Array._endMutation()(inited);
        v149 = (_QWORD *)v402;
        v402 = (uint64_t)_swiftEmptyArrayStorage;
        v150 = (void *)v149[4];
        if (!v150)
        {
          v160 = v126;
          v161 = v146;
          v162 = v147;
          v163 = v1;
          v164 = v148;
          v159 = (void *)v149[5];
          if (!v159)
            goto LABEL_24;
LABEL_21:
          v165 = v159;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v165);
          v167 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v166 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v167 >= v166 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v166 > 1);
          v168 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v167, v165);
          specialized Array._endMutation()(v168);
          goto LABEL_24;
        }
        v151 = v150;
        v152 = v146;
        v153 = v147;
        v154 = v1;
        v155 = v148;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v126);
        v157 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v156 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v157 >= v156 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1);
        v158 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v157, v151);
        specialized Array._endMutation()(v158);
        v159 = (void *)v149[5];
        if (v159)
          goto LABEL_21;
LABEL_24:
        v169 = (void *)v149[6];
        if (v169)
        {
          v170 = v169;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v170);
          v172 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v171 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v172 >= v171 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v171 > 1);
          v173 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v172, v170);
          specialized Array._endMutation()(v173);
        }
        v174 = (void *)v149[7];
        if (v174)
        {
          v175 = v174;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v175);
          v177 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v176 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v177 >= v176 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v176 > 1);
          v178 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v177, v175);
          specialized Array._endMutation()(v178);
        }
        v179 = (void *)v149[8];
        if (v179)
        {
          v180 = v179;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v180);
          v182 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v181 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v182 >= v181 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v181 > 1);
          v183 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v182, v180);
          specialized Array._endMutation()(v183);
        }
        v184 = (void *)v149[9];
        if (v184)
        {
          v185 = v184;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v185);
          v187 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v186 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v187 >= v186 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v186 > 1);
          v188 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v187, v185);
          specialized Array._endMutation()(v188);
        }
        v189 = v402;
        swift_bridgeObjectRelease(v149);
        v190 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v143, "setActions:", v190, swift_bridgeObjectRelease(v189).n128_f64[0]);

        v191 = (id)_REMGetLocalizedString(23);
        if (!v191)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v194 = v193;
          v191 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v192 = swift_bridgeObjectRelease(v194).n128_u64[0];
        }
        objc_msgSend(v143, "setCategorySummaryFormat:", v191, v192);

        v195 = (id)_REMGetLocalizedString(22);
        v5 = v386;
        if (!v195)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v198 = v197;
          v195 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v196 = swift_bridgeObjectRelease(v198).n128_u64[0];
        }
        objc_msgSend(v143, "setHiddenPreviewsBodyPlaceholder:", v195, v196);

        v199 = v143;
        v14 = &v403;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v199);
        v201 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v200 = *(_QWORD *)((v403 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v201 >= v200 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v200 > 1);
        v202 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v201, v199);
        specialized Array._endMutation()(v202);

        v108 = 1;
        v109 = &_mh_execute_header.magic + 1;
        v8 = v387;
      }
      while ((v400 & 1) == 0);
      v106 = v382;
      if (v382 != 3)
        continue;
      break;
    }

    v1 = v367;
    v2 = v377;
LABEL_55:
    v14 = v376;
    v15 = v374;
LABEL_5:
    if (++v15 != v378)
      continue;
    break;
  }
LABEL_89:
  swift_bridgeObjectRelease(v14);
  return (_QWORD *)v403;
}

unint64_t sub_1002451DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100841AA8;
  if (!qword_100841AA8)
  {
    v1 = type metadata accessor for RDUserNotificationCategory(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RDUserNotificationCategory, v1);
    atomic_store(result, (unint64_t *)&qword_100841AA8);
  }
  return result;
}

uint64_t sub_100245224(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  id v26;
  void *v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v33 = a1;
  v1 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Calendar(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v9);
  v12 = sub_10001A630(&qword_1008412D0);
  v13 = type metadata accessor for Calendar.Component(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v12, v16 + *(_QWORD *)(v14 + 72), v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1006A3C00;
  v18 = v17 + v16;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v18, enum case for Calendar.Component.hour(_:), v13);
  v19 = sub_1002E6FB8(v17);
  swift_setDeallocating(v17);
  swift_arrayDestroy(v18, 1, v13);
  v20 = swift_deallocClassInstance(v17, 32, 7);
  Date.init()(v20);
  Calendar.dateComponents(_:from:)(v19, v3);
  v21 = swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t, __n128))(v31 + 8))(v3, v32, v21);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v30);
  v23 = DateComponents.hour.getter(v22);
  LOBYTE(v6) = v24;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if ((v6 & 1) != 0)
    v23 = 0;
  v25 = objc_msgSend((id)objc_opt_self(REMSnoozeTimeUtils), "nextThirdsHourFromHour:", v23);
  v26 = objc_msgSend(v33, "dueDateComponents");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "rem_isWeekendDateComponents");

  }
  else
  {
    v28 = 0;
  }
  return sub_100242F2C((uint64_t)v25, v28);
}

id sub_10024548C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSURL *v29;
  void *v30;
  void *v31;
  id v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64[16];
  id v65;
  uint64_t v66;

  v57 = a5;
  v59 = a3;
  v60 = a4;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v58 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v57 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v57 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v57 - v17;
  v19 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v65 = 0;
  v20 = objc_msgSend(v19, "rem_createProtectedTemporaryDirectoryIfNeededWithError:", &v65);
  v21 = v65;
  if (v20)
  {
    v22 = v20;
    v61 = v8;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v21;

    v24 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v25 = objc_msgSend(v24, "globallyUniqueString");

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    URL.appendingPathComponent(_:isDirectory:)(v26, v28, 1);
    swift_bridgeObjectRelease(v28);
    URL._bridgeToObjectiveC()(v29);
    v31 = v30;
    v65 = 0;
    LODWORD(v28) = objc_msgSend(v19, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v30, 1, 0, &v65);

    v32 = v65;
    if ((_DWORD)v28)
    {
      v65 = a1;
      v66 = a2;
      swift_bridgeObjectRetain(a2);
      v33._countAndFlagsBits = 1735290926;
      v33._object = (void *)0xE400000000000000;
      String.append(_:)(v33);
      v34 = (uint64_t)v65;
      v35 = v66;
      v36 = v32;
      URL.appendingPathComponent(_:)(v34, v35);
      Data.write(to:options:)(v13, 0, v59, v60);
      v43 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v13, v7);
      if (v57)
        v44 = sub_1003B0B88(v57);
      else
        v44 = 0;
      sub_1000151B0(0, &qword_100841AC0, UNNotificationAttachment_ptr);
      v55 = sub_100242DAC(v34, v35, v43, v44);

      v56 = *(void (**)(char *, uint64_t))(v61 + 8);
      v56(v13, v7);
      v56(v16, v7);
      v56(v18, v7);
      return v55;
    }
    v40 = v65;
    v38 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v41);
    v42 = *(void (**)(char *, uint64_t))(v61 + 8);
    v42(v16, v7);
    v42(v18, v7);
  }
  else
  {
    v37 = v65;
    v38 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v39);
  }
  if (qword_100837040 != -1)
    swift_once(&qword_100837040, sub_100241804);
  v45 = type metadata accessor for Logger(0);
  sub_10001AAA8(v45, (uint64_t)qword_100841A78);
  swift_errorRetain(v38);
  v46 = swift_errorRetain(v38);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (void *)swift_slowAlloc(32, -1);
    v65 = v50;
    *(_DWORD *)v49 = 136315138;
    swift_getErrorValue(v38, v64, v63);
    v51 = Error.localizedDescription.getter(v63[1], v63[2]);
    v53 = v52;
    v62 = sub_10001A820(v51, v52, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
    swift_bridgeObjectRelease(v53);
    swift_errorRelease(v38);
    swift_errorRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error creating UNNotificationAttachment from UIImage {error: %s}", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    swift_errorRelease(v38);
  }
  else
  {
    swift_errorRelease(v38);
    swift_errorRelease(v38);
    swift_errorRelease(v38);

  }
  return 0;
}

void sub_1002459DC(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  UIImage *v17;
  NSData *v18;
  NSData *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class isa;
  double v35;
  id v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMApplicationIconFormat(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a2, "userActivity");
  if (v12)
  {
    v13 = v12;
    v36 = a1;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for REMApplicationIconFormat.notificationShortLook(_:), v8);
    v14 = (void *)REMUserActivity.appIconAndName(format:scale:)(v11, 3.0);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v14)
    {
      swift_bridgeObjectRelease(v16);
      v17 = (UIImage *)objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v14, 0, 3.0);
      v18 = UIImagePNGRepresentation(v17);
      if (v18)
      {
        v19 = v18;
        v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

        sub_1000A70E4(v20, v22);
        v23 = objc_msgSend(a2, "objectID");
        v24 = objc_msgSend(v23, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v25 = (void *)UUID.uuidString.getter();
        v27 = v26;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v28 = sub_1002AFDD4((uint64_t)_swiftEmptyArrayStorage);
        v29 = sub_10024548C(v25, v27, v20, v22, v28);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v28);
        if (v29)
        {
          v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v31 = swift_allocObject(v30, 40, 7);
          *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
          *(_QWORD *)(v31 + 32) = v29;
          v37 = v31;
          specialized Array._endMutation()(v31);
          v32 = v37;
          sub_1000151B0(0, &qword_100841AC0, UNNotificationAttachment_ptr);
          v33 = v29;
          isa = Array._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)&v35 = swift_bridgeObjectRelease(v32).n128_u64[0];
          objc_msgSend(v36, "setAttachments:", isa, v35);
          sub_1000A71C8(v20, v22);
          sub_1000A71C8(v20, v22);

          v13 = v33;
        }
        else
        {
          sub_1000A71C8(v20, v22);
          sub_1000A71C8(v20, v22);
        }
      }
      else
      {

        v13 = v14;
      }
    }

  }
}

uint64_t sub_100245CEC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100841B00, (uint64_t (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation, (uint64_t)&protocol conformance descriptor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100245D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841AC8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841AC8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100245DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint8_t *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  NSObject **v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint8_t *v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject **v42;
  void *v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  NSString v51;
  uint64_t v52;
  NSObject *v53;
  Class isa;
  NSObject *v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint8_t *v65;
  uint8_t *v66;
  uint64_t v67;
  void *v68;
  Swift::String v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  Swift::String v74;
  Swift::String v75;
  NSString v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint8_t *v80;
  uint8_t *v81;
  int v82;
  NSObject **v83;
  NSObject *v84;
  unint64_t v85;
  uint8_t *v86;

  v4 = _s10PredicatesOMa(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters.reminderID.getter(v5);
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v10 + 32) = v8;
  v84 = v10;
  specialized Array._endMutation()(v10);
  *(_QWORD *)v7 = v84;
  v7[8] = 1;
  swift_storeEnumTagMultiPayload(v7, v4, 0);
  v11 = qword_100837260;
  v12 = v8;
  if (v11 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v13 = sub_100340EC0((uint64_t)v7, (objc_class *)qword_100871E48, a2, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);

    return;
  }
  v14 = v13;
  if (!((unint64_t)v13 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_29:
    swift_bridgeObjectRelease();
    if (qword_100837048 == -1)
    {
LABEL_30:
      v61 = type metadata accessor for Logger(0);
      sub_10001AAA8(v61, (uint64_t)qword_100841AC8);
      v16 = (uint8_t *)v12;
      v62 = Logger.logObject.getter(v16);
      v63 = static os_log_type_t.error.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v64 = 138412290;
        v84 = v16;
        v65 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
        v66 = v86;
        *(_QWORD *)v86 = v16;

        _os_log_impl((void *)&_mh_execute_header, v62, v63, "permanentlyHiddenReminders: Failed to get reminder of reminderID: %@.", v64, 0xCu);
        v67 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v66, 1, v67);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v64, -1, -1);
      }
      else
      {

        v62 = v16;
      }

      v68 = (void *)objc_opt_self(REMError);
      v84 = 0;
      v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v69._countAndFlagsBits = 0xD000000000000044;
      v69._object = (void *)0x80000001006FDC20;
      String.append(_:)(v69);
      v70 = -[uint8_t description](v16, "description");
      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v73 = v72;

      v74._countAndFlagsBits = v71;
      v74._object = v73;
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._countAndFlagsBits = 46;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
      v76 = String._bridgeToObjectiveC()();
      objc_msgSend(v68, "internalErrorWithDebugDescription:", v76, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v77);
      goto LABEL_34;
    }
LABEL_38:
    swift_once(&qword_100837048, sub_100245D28);
    goto LABEL_30;
  }
  if (v13 < 0)
    v59 = v13;
  else
    v59 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  swift_bridgeObjectRelease();
  if (!v60)
    goto LABEL_29;
LABEL_7:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    goto LABEL_10;
  }
  if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_38;
  }
  v15 = (uint8_t *)*(id *)(v14 + 32);
LABEL_10:
  v16 = v15;
  v17 = -[uint8_t account](v15, "account", swift_bridgeObjectRelease().n128_f64[0]);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "recentlyDeletedInfoAsData");
    if (v19)
    {
      v20 = v19;
      v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      type metadata accessor for RDRecentlyDeletedInfo(0);
      sub_10009FC50(&qword_100841B08, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006C45CC);
      static REMJSONRepresentable.fromJSONData(_:)(&v84, v21, v23);
      sub_1000A71C8(v21, v23);
      v53 = v84;
      v86 = v16;
      isa = v84[2].isa;
      v55 = v12;
      swift_bridgeObjectRetain(isa);
      sub_1002466CC(v56, v55);
      v58 = v57;
      v16 = v86;
      swift_bridgeObjectRelease();
      swift_release(v53);
    }
    else
    {
      if (qword_100837048 != -1)
        swift_once(&qword_100837048, sub_100245D28);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_100841AC8);
      v34 = v12;
      v55 = Logger.logObject.getter(v34);
      v35 = static os_log_type_t.default.getter(v55);
      v36 = v35;
      if (os_log_type_enabled(v55, v35))
      {
        v37 = swift_slowAlloc(12, -1);
        v82 = v36;
        v38 = (uint8_t *)v37;
        v83 = (NSObject **)swift_slowAlloc(8, -1);
        v84 = v34;
        v86 = v16;
        *(_DWORD *)v38 = 138412290;
        v80 = v38 + 4;
        v81 = v38;
        v79 = &v85;
        v39 = v34;
        v16 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v79);
        *v83 = v34;

        v40 = v81;
        _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v82, "permanentlyHiddenReminders: No recentlyDeletedInfo for account of reminderID: %@.", v81, 0xCu);
        v41 = sub_10001A630((uint64_t *)&unk_100839E70);
        v42 = v83;
        swift_arrayDestroy(v83, 1, v41);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v40, -1, -1);
        v58 = 0;
      }
      else
      {

        v58 = 0;
        v55 = v34;
      }
    }

    REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result.init(isPermanentlyHidden:)(v58 & 1);
    goto LABEL_35;
  }
  if (qword_100837048 != -1)
    swift_once(&qword_100837048, sub_100245D28);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100841AC8);
  v25 = v12;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v83 = (NSObject **)swift_slowAlloc(8, -1);
    v84 = v25;
    v86 = v28;
    *(_DWORD *)v28 = 138412290;
    v29 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
    v30 = v83;
    *v83 = v25;

    v31 = v86;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "permanentlyHiddenReminders: Failed to get account of reminderID: %@.", v86, 0xCu);
    v32 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v30, 1, v32);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {

    v26 = v25;
  }

  v43 = (void *)objc_opt_self(REMError);
  v84 = 0;
  v85 = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v44._object = (void *)0x80000001006FDBD0;
  v44._countAndFlagsBits = 0xD000000000000043;
  String.append(_:)(v44);
  v45 = -[NSObject description](v25, "description");
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 46;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "internalErrorWithDebugDescription:", v51, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v52);
LABEL_34:

LABEL_35:
  sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
}

void sub_1002466CC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v30 = a2;
  v3 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v27 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_22;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v27)
      goto LABEL_25;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_25;
      v22 = *(_QWORD *)(v26 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v27)
          goto LABEL_25;
        v22 = *(_QWORD *)(v26 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v27)
            goto LABEL_25;
          v22 = *(_QWORD *)(v26 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_22:
    sub_10011FECC(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
      goto LABEL_26;
    sub_10011FF10((uint64_t)v12, (uint64_t)v9);
    v24 = objc_msgSend(v30, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    LOBYTE(v24) = static UUID.== infix(_:_:)(v9, v5);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
    sub_10001C744((uint64_t)v9, type metadata accessor for RDPermanentlyHiddenReminder);
    if ((v24 & 1) != 0)
    {
      swift_release(a1);
      return;
    }
  }
  v23 = v21 + 4;
  if (v23 >= v27)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v12, 1, 1, v6, v17);
LABEL_26:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v27)
      goto LABEL_25;
    v22 = *(_QWORD *)(v26 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_1002469E4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100841B48, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesTrainer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100246A20(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_1001C1B0C(0, v1, 0);
    v3 = sub_1000E1B14(v2);
    v5 = 0;
    v6 = v2 + 64;
    v7 = *(_BYTE *)(v2 + 32);
    v37 = v2;
    v38 = v2 + 80;
    v34 = v1;
    v35 = v4;
    v36 = v2 + 64;
    while ((v3 & 0x8000000000000000) == 0 && (uint64_t)v3 < 1 << v7)
    {
      v11 = v3 >> 6;
      if ((*(_QWORD *)(v6 + 8 * (v3 >> 6)) & (1 << v3)) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(v2 + 36) != v4)
        goto LABEL_33;
      v39 = v5;
      v40 = 1 << v3;
      v41 = v3;
      v12 = *(_QWORD *)(v2 + 48) + 16 * v3;
      v13 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v12 + 8));
        swift_bridgeObjectRetain(v13);
        sub_1001C1B0C(0, v14, 0);
        v15 = (_QWORD *)(v13 + 40);
        do
        {
          v17 = *(v15 - 1);
          v16 = *v15;
          v18 = _swiftEmptyArrayStorage[2];
          v19 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain(*v15);
          if (v18 >= v19 >> 1)
            sub_1001C1B0C(v19 > 1, v18 + 1, 1);
          v15 += 4;
          _swiftEmptyArrayStorage[2] = v18 + 1;
          v20 = &_swiftEmptyArrayStorage[2 * v18];
          v20[4] = v17;
          v20[5] = v16;
          --v14;
        }
        while (v14);
      }
      else
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v12 + 8));
        swift_bridgeObjectRetain(v13);
      }
      v21 = sub_10001A630((uint64_t *)&unk_10083AE10);
      v22 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
      v23 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v21, v22);
      v25 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = _swiftEmptyArrayStorage[2];
      v26 = _swiftEmptyArrayStorage[3];
      if (v27 >= v26 >> 1)
        sub_1001C1B0C(v26 > 1, v27 + 1, 1);
      _swiftEmptyArrayStorage[2] = v27 + 1;
      v28 = &_swiftEmptyArrayStorage[2 * v27];
      v28[4] = v23;
      v28[5] = v25;
      v2 = v37;
      v7 = *(_BYTE *)(v37 + 32);
      v8 = 1 << v7;
      if (v41 >= 1 << v7)
        goto LABEL_34;
      v6 = v36;
      v29 = *(_QWORD *)(v36 + 8 * v11);
      if ((v29 & v40) == 0)
        goto LABEL_35;
      v4 = v35;
      if (*(_DWORD *)(v37 + 36) != v35)
        goto LABEL_36;
      v30 = v29 & (-2 << (v41 & 0x3F));
      if (v30)
      {
        v8 = __clz(__rbit64(v30)) | v41 & 0xFFFFFFFFFFFFFFC0;
        v9 = v34;
        v10 = v39;
      }
      else
      {
        v31 = v11 + 1;
        v32 = (v8 + 63) >> 6;
        v9 = v34;
        if (v11 + 1 < v32)
        {
          v33 = *(_QWORD *)(v36 + 8 * v31);
          if (v33)
          {
LABEL_27:
            v8 = __clz(__rbit64(v33)) + (v31 << 6);
          }
          else
          {
            while (v32 - 2 != v11)
            {
              v33 = *(_QWORD *)(v38 + 8 * v11++);
              if (v33)
              {
                v31 = v11 + 1;
                goto LABEL_27;
              }
            }
          }
        }
        v10 = v39;
      }
      v5 = v10 + 1;
      v3 = v8;
      if (v5 == v9)
        return;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
}

_QWORD *sub_100246D70(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = v2;
  v4 = sub_10001A630(&qword_100841C98);
  v5 = sub_1000A5F84(&qword_100841CC0, &qword_100841C98, (uint64_t)&protocol conformance descriptor for Series<A>);
  v6 = dispatch thunk of Sequence.underestimatedCount.getter(v4, v5);
  v29 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v6 & ~(v6 >> 63), 0);
  v7 = _swiftEmptyArrayStorage;
  v26 = v1;
  swift_retain();
  result = (_QWORD *)dispatch thunk of Sequence.makeIterator()(v4, v5);
  if (v6 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (v6)
  {
    v9 = v28;
    do
    {
      result = dispatch thunk of _AnyIteratorBoxBase.next()(&v24, result);
      v25 = v24;
      if (!v24)
        goto LABEL_21;
      a1(&v26, &v25);
      if (v3)
      {
        swift_release(v7);
        swift_release(v9);
        v22 = v25;
        goto LABEL_18;
      }
      v3 = 0;
      result = (_QWORD *)swift_release(v25);
      v11 = v26;
      v10 = v27;
      v29 = v7;
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        result = (_QWORD *)sub_1001C1B0C(v12 > 1, v13 + 1, 1);
        v7 = v29;
      }
      v7[2] = v13 + 1;
      v14 = &v7[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
    }
    while (--v6);
  }
  v15 = v28;
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()(&v26, result);
    v16 = v26;
    if (!v26)
    {
      swift_release(v15);
      return v7;
    }
    v25 = v26;
    a1(&v26, &v25);
    if (v3)
      break;
    v3 = 0;
    result = (_QWORD *)swift_release(v16);
    v17 = v26;
    v18 = v27;
    v29 = v7;
    v20 = v7[2];
    v19 = v7[3];
    if (v20 >= v19 >> 1)
    {
      result = (_QWORD *)sub_1001C1B0C(v19 > 1, v20 + 1, 1);
      v7 = v29;
    }
    v7[2] = v20 + 1;
    v21 = &v7[2 * v20];
    v21[4] = v17;
    v21[5] = v18;
  }
  swift_release(v7);
  swift_release(v15);
  v22 = v16;
LABEL_18:
  swift_release(v22);
  return v7;
}

_QWORD *sub_100246FBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;

  v25 = a1;
  v2 = sub_10001A630(&qword_100841CD8);
  v3 = sub_1000A5F84(&qword_100841CF8, &qword_100841CD8, (uint64_t)&protocol conformance descriptor for Series<A>);
  v4 = dispatch thunk of Sequence.underestimatedCount.getter(v2, v3);
  v24 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  v5 = _swiftEmptyArrayStorage;
  v23[0] = a1;
  swift_retain();
  result = (_QWORD *)dispatch thunk of Sequence.makeIterator()(v2, v3);
  if (v4 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (v4)
  {
    do
    {
      result = dispatch thunk of _AnyIteratorBoxBase.next()(v23, result);
      v7 = v23[0];
      if (!v23[0])
        goto LABEL_14;
      v8 = REMSuggestedList.listIdentifier.getter(result);
      v10 = v9;
      result = (_QWORD *)swift_release(v7);
      v24 = v5;
      v12 = v5[2];
      v11 = v5[3];
      if (v12 >= v11 >> 1)
      {
        result = (_QWORD *)sub_1001C1B0C(v11 > 1, v12 + 1, 1);
        v5 = v24;
      }
      v5[2] = v12 + 1;
      v13 = &v5[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
    }
    while (--v4);
  }
  v14 = v23[1];
  while (1)
  {
    v15 = dispatch thunk of _AnyIteratorBoxBase.next()(v23, result);
    v16 = v23[0];
    if (!v23[0])
      break;
    v17 = REMSuggestedList.listIdentifier.getter(v15);
    v19 = v18;
    result = (_QWORD *)swift_release(v16);
    v24 = v5;
    v21 = v5[2];
    v20 = v5[3];
    if (v21 >= v20 >> 1)
    {
      result = (_QWORD *)sub_1001C1B0C(v20 > 1, v21 + 1, 1);
      v5 = v24;
    }
    v5[2] = v21 + 1;
    v22 = &v5[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
  }
  swift_release(v14);
  return v5;
}

uint64_t sub_10024719C(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t *);
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  _QWORD *v34;

  v29 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_100840780);
  v28 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100846C40);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = _swiftEmptyArrayStorage;
  v34 = _swiftEmptyArrayStorage;
  v8 = sub_1000A5F84(&qword_100841D00, (uint64_t *)&unk_100840780, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  dispatch thunk of Sequence.makeIterator()(v3, v8);
  v9 = &v7[*(int *)(v5 + 36)];
  v10 = sub_1000A5F84(&qword_100846C50, (uint64_t *)&unk_100840780, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  v11 = *(_QWORD *)v9;
  dispatch thunk of Collection.endIndex.getter(v32, v3, v10);
  if (v11 == v32[0])
  {
LABEL_2:
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100846C40);
    return (uint64_t)v30;
  }
  else
  {
    v30 = _swiftEmptyArrayStorage;
    v25 = a2;
    v26 = v7;
    while (1)
    {
      v17 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v32, v9, v3, v10);
      v19 = *v18;
      v17(v32, 0);
      v20 = v27;
      v21 = v28;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v27, v7, v3);
      dispatch thunk of Collection.formIndex(after:)(v9, v3, v10);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v3);
      v33 = v19;
      v22 = v31;
      v23 = v29(&v33);
      if (v22)
        break;
      v31 = 0;
      if ((v23 & 1) != 0)
      {
        v24 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          sub_1001C2038(0, v24[2] + 1, 1);
        v13 = v34;
        v15 = v34[2];
        v14 = v34[3];
        if (v15 >= v14 >> 1)
        {
          sub_1001C2038(v14 > 1, v15 + 1, 1);
          v13 = v34;
        }
        v13[2] = v15 + 1;
        v30 = v13;
        v13[v15 + 4] = v19;
      }
      v16 = *(_QWORD *)v9;
      v7 = v26;
      dispatch thunk of Collection.endIndex.getter(v32, v3, v10);
      if (v16 == v32[0])
        goto LABEL_2;
    }
    sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100846C40);
    return swift_release(v30);
  }
}

void sub_100247474(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  id v22;
  _QWORD *v23;

  v6 = 0;
  v23 = _swiftEmptyArrayStorage;
  v7 = *(_QWORD *)(a3 + 64);
  v20 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v21 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v6 >= v21)
    goto LABEL_29;
  v16 = *(_QWORD *)(v20 + 8 * v6);
  if (v16)
    goto LABEL_19;
  v17 = v6 + 1;
  if (v6 + 1 >= v21)
  {
LABEL_29:
    swift_release(a3);
    return;
  }
  v16 = *(_QWORD *)(v20 + 8 * v17);
  if (!v16)
  {
    v17 = v6 + 2;
    if (v6 + 2 >= v21)
      goto LABEL_29;
    v16 = *(_QWORD *)(v20 + 8 * v17);
    if (!v16)
    {
      v17 = v6 + 3;
      if (v6 + 3 >= v21)
        goto LABEL_29;
      v16 = *(_QWORD *)(v20 + 8 * v17);
      if (!v16)
      {
        v17 = v6 + 4;
        if (v6 + 4 < v21)
        {
          v16 = *(_QWORD *)(v20 + 8 * v17);
          if (v16)
            goto LABEL_18;
          while (1)
          {
            v6 = v17 + 1;
            if (__OFADD__(v17, 1))
              break;
            if (v6 >= v21)
              goto LABEL_29;
            v16 = *(_QWORD *)(v20 + 8 * v6);
            ++v17;
            if (v16)
              goto LABEL_19;
          }
LABEL_31:
          __break(1u);
          return;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_18:
  v6 = v17;
LABEL_19:
  v10 = (v16 - 1) & v16;
  for (i = __clz(__rbit64(v16)) + (v6 << 6); ; i = v13 | (v6 << 6))
  {
    v22 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v18 = v22;
    v19 = a1(&v22);
    if (v3)
      break;
    if ((v19 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      v11 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v18);
      specialized ContiguousArray._endMutation()(v12);
      if (!v10)
        goto LABEL_7;
    }
    else
    {

      if (!v10)
        goto LABEL_7;
    }
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }
  swift_release(a3);

  swift_release(v23);
}

void sub_1002476A0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(id *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD v36[5];
  _QWORD *v37;

  v4 = v3;
  v5 = a3;
  v6 = a1;
  v37 = _swiftEmptyArrayStorage;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v10 = sub_1002564FC();
    a1 = (uint64_t (*)(id *))Set.Iterator.init(_cocoa:)(v36, v8, v9, v10);
    v5 = v36[0];
    v32 = v36[1];
    v11 = v36[2];
    v12 = v36[3];
    v13 = v36[4];
  }
  else
  {
    v12 = 0;
    v14 = -1 << *(_BYTE *)(a3 + 32);
    v32 = a3 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a3 + 56);
    v11 = v15;
  }
  v31 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(a1);
    if (!v21)
      goto LABEL_41;
    v22 = v21;
    v33 = v21;
    v23 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v34;
    swift_unknownObjectRelease(v22);
    v20 = v12;
    v18 = v13;
    if (!v24)
      goto LABEL_41;
LABEL_31:
    v35 = v24;
    v27 = v6(&v35);
    if (v4)
    {

      sub_1000C6560(v5);
      swift_release(v37);
      return;
    }
    if ((v27 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v24);
      a1 = (uint64_t (*)(id *))specialized ContiguousArray._endMutation()(v29);
    }
    else
    {

    }
    v12 = v20;
    v13 = v18;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
    v20 = v12;
LABEL_30:
    v24 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    if (!v24)
      goto LABEL_41;
    goto LABEL_31;
  }
  v20 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v20 >= v31)
      goto LABEL_41;
    v25 = *(_QWORD *)(v32 + 8 * v20);
    if (!v25)
    {
      v26 = v12 + 2;
      if (v12 + 2 >= v31)
        goto LABEL_41;
      v25 = *(_QWORD *)(v32 + 8 * v26);
      if (v25)
        goto LABEL_28;
      v26 = v12 + 3;
      if (v12 + 3 >= v31)
        goto LABEL_41;
      v25 = *(_QWORD *)(v32 + 8 * v26);
      if (v25)
        goto LABEL_28;
      v26 = v12 + 4;
      if (v12 + 4 >= v31)
        goto LABEL_41;
      v25 = *(_QWORD *)(v32 + 8 * v26);
      if (v25)
      {
LABEL_28:
        v20 = v26;
      }
      else
      {
        v20 = v12 + 5;
        if (v12 + 5 >= v31)
          goto LABEL_41;
        v25 = *(_QWORD *)(v32 + 8 * v20);
        if (!v25)
        {
          v30 = v12 + 6;
          while (v31 != v30)
          {
            v25 = *(_QWORD *)(v32 + 8 * v30++);
            if (v25)
            {
              v20 = v30 - 1;
              goto LABEL_29;
            }
          }
LABEL_41:
          sub_1000C6560(v5);
          return;
        }
      }
    }
LABEL_29:
    v18 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v20 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_1002479DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841B10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841B10);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_100247A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  if (!a2)
  {
    Hasher._combine(_:)(0);
    if (a4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v9, a1, a2);
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

Swift::Int sub_100247B3C()
{
  uint64_t *v0;

  return sub_100247A6C(*v0, v0[1], v0[2], v0[3]);
}

void sub_100247B48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1[1];
  v3 = v1[2];
  v5 = v1[3];
  if (v4)
  {
    v6 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v6, v4);
    swift_bridgeObjectRelease(v4);
    if (v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v5);
      String.hash(into:)(a1, v3, v5);
      swift_bridgeObjectRelease(v5);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

Swift::Int sub_100247C0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  if (!v2)
  {
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v3, v2);
  swift_bridgeObjectRelease(v2);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100247CD0(uint64_t *a1, uint64_t *a2)
{
  return sub_100250CCC(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void sub_100247CEC(uint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(char *, unint64_t, uint64_t)@<X3>, void (*a4)(_QWORD, _QWORD)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD, _QWORD);
  void *v99;
  uint64_t v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t KeyPath;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  void (*v117)(char *, unint64_t, uint64_t);
  char *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  __n128 v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  BOOL v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 v156;
  id v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  _QWORD *v182;
  unint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __n128 v207;
  uint64_t v208;
  __n128 v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  uint64_t *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  char **v221;
  uint64_t v222;
  uint64_t v223;
  Swift::Int v224;
  Swift::Int v225;
  unint64_t v226;
  uint64_t v227;
  void (*v228)(_QWORD, _QWORD);
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  __n128 v234;
  uint64_t v235;
  char *v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  char *v243;
  char v244;
  unint64_t v245;
  unint64_t v246;
  id v247;
  void (*v248)(_QWORD, _QWORD);
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  NSObject *v260;
  os_log_type_t v261;
  uint8_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t **v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  __n128 v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  unint64_t v276;
  uint64_t v277;
  _BOOL8 v278;
  uint64_t v279;
  char v280;
  unint64_t v281;
  char v282;
  unint64_t *v283;
  unint64_t **v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  __n128 v293;
  char *v294;
  uint64_t v295;
  char v296;
  uint64_t (*v297)(char *, uint64_t, uint64_t);
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  os_log_type_t v301;
  uint8_t *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  __n128 v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  __n128 v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  __n128 v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  void (*v326)(char *, unint64_t, uint64_t);
  uint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  __n128 v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  _QWORD *v339;
  char *v340;
  __n128 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  __n128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void (*v365)(_QWORD *, char *, uint64_t);
  char *v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  double v371;
  void (*v372)(char *, uint64_t);
  char *v373;
  uint64_t v374;
  int64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD v379[2];
  unint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  char *v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char **v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void (*v430)(char *, unint64_t, uint64_t);
  id v431;
  char *v432;
  char *v433;
  char *v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  char *v438;
  __int128 v439;
  char *v440;
  _QWORD *v441;
  void (*v442)(_QWORD, _QWORD);
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  char v449[8];
  uint64_t v450[5];

  v430 = (void (*)(char *, unint64_t, uint64_t))a3;
  v431 = a2;
  v446 = a1;
  v403 = a5;
  v405 = sub_10001A630(&qword_100841C20);
  v396 = *(_QWORD *)(v405 - 8);
  __chkstk_darwin(v405);
  v383 = (char *)v379 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v384 = (uint64_t)v379 - v8;
  v401 = sub_10001A630(&qword_100841C28);
  __chkstk_darwin(v401);
  v400 = (_QWORD *)((char *)v379 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A630(&qword_100841C30);
  __chkstk_darwin(v10);
  v402 = (char *)v379 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100841C38);
  __chkstk_darwin(v12);
  v407 = (char *)v379 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_100841C40);
  __chkstk_darwin(v14);
  v404 = (char *)v379 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_100841C48);
  __chkstk_darwin(v16);
  v406 = (char *)v379 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v399 = sub_10001A630(&qword_100841C50);
  __chkstk_darwin(v399);
  v397 = (char *)v379 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v398 = (uint64_t)v379 - v20;
  __chkstk_darwin(v21);
  v419 = (uint64_t)v379 - v22;
  v23 = sub_10001A630(&qword_100841C58);
  __chkstk_darwin(v23);
  v395 = (char *)v379 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v409 = sub_10001A630(&qword_100841C60);
  __chkstk_darwin(v409);
  v392 = (_QWORD *)((char *)v379 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v390 = (_QWORD *)((char *)v379 - v27);
  __chkstk_darwin(v28);
  v394 = (uint64_t)v379 - v29;
  __chkstk_darwin(v30);
  v418 = (uint64_t)v379 - v31;
  v408 = sub_10001A630(&qword_100841C68);
  __chkstk_darwin(v408);
  v389 = (uint64_t)v379 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v393 = (_QWORD *)((char *)v379 - v34);
  v36 = __chkstk_darwin(v35);
  v417 = (uint64_t)v379 - v37;
  v387 = type metadata accessor for REMTitleEmbeddingConfig(0, v36);
  v386 = *(_QWORD *)(v387 - 8);
  __chkstk_darwin(v387);
  v385 = (char *)v379 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v415 = sub_10001A630((uint64_t *)&unk_100840780);
  v414 = *(_QWORD *)(v415 - 8);
  __chkstk_darwin(v415);
  v382 = (char *)v379 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v413 = (char *)v379 - v41;
  v420 = sub_10001A630(&qword_100841C70);
  __chkstk_darwin(v420);
  v433 = (char *)v379 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v416 = (char **)((char *)v379 - v44);
  __chkstk_darwin(v45);
  v424 = (uint64_t)v379 - v46;
  v47 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v47);
  v388 = (uint64_t)v379 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v425 = (uint64_t)v379 - v50;
  v411 = type metadata accessor for REMSuggestedAttributeInputDataFrame(0, v51);
  v410 = *(_QWORD *)(v411 - 8);
  __chkstk_darwin(v411);
  v426 = (char *)v379 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v423 = sub_10001A630(&qword_100841C78);
  v422 = *(_QWORD *)(v423 - 8);
  __chkstk_darwin(v423);
  v421 = (char *)v379 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v428 = type metadata accessor for URL(0);
  v427 = *(_QWORD *)(v428 - 8);
  __chkstk_darwin(v428);
  v412 = (char *)v379 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v381 = (char *)v379 - v56;
  __chkstk_darwin(v57);
  v435 = (uint64_t)v379 - v58;
  v59 = type metadata accessor for TrainingContext(0);
  __chkstk_darwin(v59);
  v441 = (_QWORD *)((char *)v379 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = (unint64_t *)type metadata accessor for REMSuggestedAttributesTrainer.Parameters(0);
  v437 = *(v61 - 1);
  __chkstk_darwin(v61);
  v438 = (char *)v379 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A630(&qword_100841C80);
  *(_QWORD *)&v439 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v432 = (char *)v379 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v440 = (char *)v379 - v66;
  v67 = sub_10001A630((uint64_t *)&unk_100844660);
  v68 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v434 = (char *)v379 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v70);
  v436 = (char *)v379 - v71;
  __chkstk_darwin(v72);
  v74 = (uint64_t)v379 - v73;
  __chkstk_darwin(v75);
  v77 = (uint64_t)v379 - v76;
  v78 = type metadata accessor for Date(0);
  v444 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v391 = (char *)v379 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v445 = (char *)v379 - v81;
  v83 = Date.init()(v82);
  v442 = a4;
  v84 = REMSuggestedAttributesTrainer.Parameters.allowLocalOverrides.getter(v83);
  v443 = v78;
  if ((v84 & 1) != 0)
  {
    v429 = v63;
    v85 = (void *)(*(uint64_t (**)(void))((char *)v446
                                       + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                                       + 16))();
    v86 = sub_10009FC50(&qword_100841CB8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesTrainer.Parameters);
    v87 = v85;
    v88 = v447;
    Partial<A>.init(dictionary:)(v85, v61, v86);
    if (v88)
    {

      (*(void (**)(char *, uint64_t))(v444 + 8))(v445, v443);
      return;
    }
    v380 = v59;
    v89 = (unint64_t)v446;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v74, v77, v67);
    v91 = sub_1002CA0B4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v93 = *(_QWORD *)(v91 + 16);
    v92 = *(_QWORD *)(v91 + 24);
    v94 = v91;
    v95 = v93 + 1;
    v447 = 0;
    if (v93 >= v92 >> 1)
    {
LABEL_185:
      v375 = v95;
      v376 = sub_1002CA0B4(v92 > 1, v95, 1, v94);
      v95 = v375;
      v94 = v376;
    }
    v96 = (_QWORD *)v94;
    *(_QWORD *)(v94 + 16) = v95;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v68 + 32))(v94+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v93, v74, v67);

    v97 = v77;
    v90 = v96;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v97, v67);
    v63 = v429;
    v78 = v443;
  }
  else
  {
    v380 = v59;
    v89 = (unint64_t)v446;
    v90 = _swiftEmptyArrayStorage;
  }
  v98 = v442;
  if ((REMSuggestedAttributesTrainer.Parameters.allowCloudOverrides.getter() & 1) == 0)
  {
    v104 = v438;
    v105 = v437;
    while (1)
    {
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), unint64_t *))(v105 + 16))(v104, v98, v61);
      v110 = swift_bridgeObjectRetain(v90);
      v93 = (unint64_t)v440;
      PartialOverride.init(full:partials:)(v104, v90, v61, v110);
      KeyPath = swift_getKeyPath(&unk_1006B0DE8);
      PartialOverride.subscript.getter(v450, KeyPath, v63, &protocol witness table for Bool);
      swift_release(KeyPath);
      if (LOBYTE(v450[0]) != 1)
      {
        swift_bridgeObjectRelease();
        if (qword_100837050 != -1)
          swift_once(&qword_100837050, sub_1002479DC);
        v130 = type metadata accessor for Logger(0);
        v131 = sub_10001AAA8(v130, (uint64_t)qword_100841B10);
        v132 = Logger.logObject.getter(v131);
        v133 = static os_log_type_t.default.getter(v132);
        if (os_log_type_enabled(v132, v133))
        {
          v134 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v134 = 0;
          _os_log_impl((void *)&_mh_execute_header, v132, v133, "SuggestedAttributes Training is enabled on iOS: NO", v134, 2u);
          swift_slowDealloc(v134, -1, -1);
        }

        v135 = sub_1002557D8();
        v136 = swift_allocError(&type metadata for ModelSkippedError, v135, 0, 0);
        swift_willThrow(v136);
        (*(void (**)(char *, uint64_t))(v444 + 8))(v445, v443);
        (*(void (**)(unint64_t, uint64_t))(v439 + 8))(v93, v63);
        return;
      }
      v379[1] = v90;
      if (qword_100837050 != -1)
LABEL_181:
        swift_once(&qword_100837050, sub_1002479DC);
      v112 = type metadata accessor for Logger(0);
      v379[0] = sub_10001AAA8(v112, (uint64_t)qword_100841B10);
      v113 = Logger.logObject.getter(v379[0]);
      v114 = static os_log_type_t.default.getter(v113);
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "SuggestedAttributes Training is enabled on iOS: NO", v115, 2u);
        swift_slowDealloc(v115, -1, -1);
      }

      v116 = v439;
      v117 = *(void (**)(char *, unint64_t, uint64_t))(v439 + 16);
      v118 = v432;
      v117(v432, v93, v63);
      v119 = swift_getKeyPath(&unk_1006B0E18);
      v77 = v430;
      v120 = v431;
      PartialOverride.subscript.getter(v450, v119, v63, &protocol witness table for Int);
      swift_release(v119);
      v121 = v450[0];
      v122 = type metadata accessor for MersenneTwister(0);
      swift_allocObject(v122, *(unsigned int *)(v122 + 48), *(unsigned __int16 *)(v122 + 52));
      v123 = MersenneTwister.init(seed:)(v121);
      v124 = v380;
      v125 = v441;
      *(_QWORD *)((char *)v441 + *(int *)(v380 + 28)) = v123;
      (*(void (**)(_QWORD *, char *, uint64_t))(v116 + 32))(v125, v118, v63);
      *(_QWORD *)((char *)v125 + *(int *)(v124 + 20)) = v77;
      *(_QWORD *)((char *)v125 + *(int *)(v124 + 24)) = v120;
      v430 = v117;
      v117(v118, (unint64_t)v125, v63);
      v126 = swift_getKeyPath(&unk_1006B0E48);
      PartialOverride.subscript.getter(v450, v126, v63, &protocol witness table for Bool);
      swift_release(v126);
      v434 = *(char **)(v116 + 8);
      ((void (*)(char *, uint64_t))v434)(v118, v63);
      LODWORD(v125) = LOBYTE(v450[0]);
      sub_1000151B0(0, (unint64_t *)&qword_10083F1E0, REMPaths_ptr);
      if ((_DWORD)v125 == 1)
      {
        v127 = v447;
        static REMPaths.writableURLForMLModel()();
        v128 = v127;
        if (v127)
          goto LABEL_21;
      }
      else
      {
        v137 = v447;
        static REMPaths.temporaryURLForMLModel()();
        v128 = v137;
        if (v137)
        {
LABEL_21:
          v129 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v444 + 8))(v445, v443, v129);
          sub_10001C744((uint64_t)v441, type metadata accessor for TrainingContext);
          ((void (*)(unint64_t, uint64_t))v434)(v93, v63);
          return;
        }
      }
      v138 = swift_getKeyPath(&unk_1006B0E78);
      PartialOverride.subscript.getter(v450, v138, v63, &protocol witness table for Int);
      swift_release(v138);
      v139 = sub_100255528(v450[0], (unint64_t)v120);
      v447 = v128;
      if (v128)
      {
        v140 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v444 + 8))(v445, v443, v140);
        (*(void (**)(uint64_t, uint64_t))(v427 + 8))(v435, v428);
        sub_10001C744((uint64_t)v441, type metadata accessor for TrainingContext);
        ((void (*)(unint64_t, uint64_t))v434)(v93, v63);
        return;
      }
      v67 = v139;
      swift_bridgeObjectRetain_n(v139, 2);
      v142 = Logger.logObject.getter(v141);
      v143 = static os_log_type_t.default.getter(v142);
      v144 = os_log_type_enabled(v142, v143);
      v380 = (unint64_t)v67 >> 62;
      if (v144)
      {
        v145 = v63;
        v146 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v146 = 134217984;
        if ((unint64_t)v67 >> 62)
        {
          if (v67 < 0)
            v378 = v67;
          else
            v378 = v67 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v67);
          v147 = _CocoaArrayWrapper.endIndex.getter(v378);
          swift_bridgeObjectRelease();
        }
        else
        {
          v147 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        v450[0] = v147;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v450, &v450[1]);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v142, v143, "Done fetching reminder data source array for training. %ld distinct reminders fetched", v146, 0xCu);
        swift_slowDealloc(v146, -1, -1);

        v63 = v145;
      }
      else
      {

        swift_bridgeObjectRelease_n(v67, 2);
      }
      if (v380)
      {
LABEL_193:
        if (v67 < 0)
          v377 = v67;
        else
          v377 = v67 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v67);
        v148 = _CocoaArrayWrapper.endIndex.getter(v377);
        swift_bridgeObjectRelease();
      }
      else
      {
        v148 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v149 = swift_getKeyPath(&unk_1006B0EA8);
      PartialOverride.subscript.getter(v450, v149, v63, &protocol witness table for Int);
      swift_release(v149);
      if (v148 < v450[0])
        goto LABEL_38;
      v153 = swift_getKeyPath(&unk_1006B0ED8);
      v68 = (unint64_t)v421;
      PartialOverride.subscript.getter(v153, v63);
      swift_release(v153);
      v154 = swift_getKeyPath(&unk_1006B0F08);
      v155 = v423;
      PartialOverride.subscript.getter(v450, v154, v423, &protocol witness table for Int);
      swift_release(v154);
      (*(void (**)(unint64_t, uint64_t))(v422 + 8))(v68, v155);
      if (LOBYTE(v450[1]) != 1 && v148 < v450[0])
      {
LABEL_38:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v150 = sub_100255F80();
        v151 = swift_allocError(&_s19SampleTooSmallErrorVN, v150, 0, 0);
        *v152 = v148;
        swift_willThrow(v151);
        (*(void (**)(char *, uint64_t))(v444 + 8))(v445, v443);
        (*(void (**)(uint64_t, uint64_t))(v427 + 8))(v435, v428);
        sub_10001C744((uint64_t)v441, type metadata accessor for TrainingContext);
        ((void (*)(unint64_t, uint64_t))v434)(v93, v63);
        return;
      }
      v156 = swift_bridgeObjectRetain(v67);
      REMSuggestedAttributeInputDataFrame.init(reminderDataSourceArray:)(v156);
      v450[0] = 0;
      v157 = objc_msgSend((id)v77, "fetchDefaultListWithError:", v450);
      v158 = v157;
      if (v450[0])
      {
        v159 = (id)v450[0];

        swift_willThrow(v160);
        v161 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v425, 1, 1, v161);
        v447 = 0;
        v77 = (uint64_t)v433;
      }
      else
      {
        v77 = (uint64_t)v433;
        if (v157)
        {
          v162 = objc_msgSend(v157, "objectID");

          v163 = objc_msgSend(v162, "uuid");
          v164 = v425;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v163);

          v165 = type metadata accessor for UUID(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 56))(v164, 0, 1, v165);
        }
        else
        {
          v166 = type metadata accessor for UUID(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 56))(v425, 1, 1, v166);
        }
      }
      if (v380)
      {
        if (v67 < 0)
          v167 = v67;
        else
          v167 = v67 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v67, 2);
        v74 = _CocoaArrayWrapper.endIndex.getter(v167);
        swift_bridgeObjectRelease();
      }
      else
      {
        v74 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v67);
      }
      v429 = v63;
      if (v74)
      {
        v438 = (char *)(v67 & 0xC000000000000001);
        v446 = _swiftEmptyDictionarySingleton;
        v77 = 4;
        v437 = v67;
        v436 = (char *)v74;
        do
        {
          if (v438)
          {
            v169 = specialized _ArrayBuffer._getElementSlowPath(_:)(v77 - 4, v67);
          }
          else
          {
            v169 = *(_QWORD *)(v67 + 8 * v77);
            swift_retain();
          }
          v442 = (void (*)(_QWORD, _QWORD))(v77 - 3);
          if (__OFADD__(v77 - 4, 1))
          {
            __break(1u);
LABEL_180:
            __break(1u);
            goto LABEL_181;
          }
          v93 = ((uint64_t (*)(void))dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter)();
          v171 = v170;
          *(_QWORD *)&v439 = v169;
          v172 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listName.getter();
          v63 = v173;
          v174 = v446;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v446);
          v450[0] = (uint64_t)v174;
          v68 = sub_10001A6DC(v93, v171);
          v177 = v174[2];
          v178 = (v176 & 1) == 0;
          v179 = v177 + v178;
          if (__OFADD__(v177, v178))
            goto LABEL_180;
          v67 = v176;
          if (v174[3] >= v179)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1002D6574();
          }
          else
          {
            sub_1002CCF14(v179, isUniquelyReferenced_nonNull_native);
            v180 = sub_10001A6DC(v93, v171);
            if ((v67 & 1) != (v181 & 1))
            {
LABEL_204:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return;
            }
            v68 = v180;
          }
          v182 = (_QWORD *)v450[0];
          v446 = (uint64_t *)v450[0];
          if ((v67 & 1) != 0)
          {
            v168 = (uint64_t *)(*(_QWORD *)(v450[0] + 56) + 16 * v68);
            swift_bridgeObjectRelease();
            *v168 = v172;
            v168[1] = v63;
          }
          else
          {
            *(_QWORD *)(v450[0] + 8 * (v68 >> 6) + 64) |= 1 << v68;
            v183 = (unint64_t *)(v182[6] + 16 * v68);
            *v183 = v93;
            v183[1] = v171;
            v184 = (uint64_t *)(v182[7] + 16 * v68);
            *v184 = v172;
            v184[1] = v63;
            v185 = v182[2];
            v186 = __OFADD__(v185, 1);
            v187 = v185 + 1;
            if (v186)
            {
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
              goto LABEL_193;
            }
            v182[2] = v187;
            swift_bridgeObjectRetain(v171);
          }
          v67 = v437;
          v74 = (uint64_t)v436;
          swift_release(v439);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v77;
        }
        while (v442 != (void (*)(_QWORD, _QWORD))v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v67);
        v61 = _swiftEmptyDictionarySingleton;
        v188 = 4;
        while (1)
        {
          v89 = v188 - 4;
          v442 = (void (*)(_QWORD, _QWORD))v188;
          if (v438)
          {
            v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v188 - 4, v67);
          }
          else
          {
            v87 = *(_QWORD *)(v67 + 8 * v188);
            swift_retain();
          }
          v92 = v89 + 1;
          *(_QWORD *)&v439 = v89 + 1;
          if (__OFADD__(v89, 1))
            break;
          v190 = ((uint64_t (*)(void))dispatch thunk of REMSuggestedAttributeReminderDataSource.title.getter)();
          v192 = v190;
          v193 = v191;
          v194 = HIBYTE(v191) & 0xF;
          if ((v191 & 0x2000000000000000) == 0)
            v194 = v190;
          v195 = 7;
          if (((v191 >> 60) & ((v190 & 0x800000000000000) == 0)) != 0)
            v195 = 11;
          v196 = v195 | (v194 << 16);
          v197 = String.index(_:offsetBy:limitedBy:)(15, 50, v196, v190, v191);
          if ((v198 & 1) != 0)
            v199 = v196;
          else
            v199 = v197;
          v200 = String.subscript.getter(15, v199, v192, v193);
          v202 = v201;
          v204 = v203;
          v206 = v205;
          v207 = swift_bridgeObjectRelease();
          v67 = static String._fromSubstring(_:)(v200, v202, v204, v206, v207);
          v63 = v208;
          v209 = swift_bridgeObjectRelease();
          v431 = (id)v87;
          v93 = dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter(v209);
          v74 = v210;
          v77 = swift_isUniquelyReferenced_nonNull_native(v61);
          v450[0] = (uint64_t)v61;
          v87 = (unint64_t)v61;
          v89 = sub_10001A6DC(v67, v63);
          v92 = v61[2];
          v95 = (v211 & 1) == 0;
          v212 = v92 + v95;
          if (__OFADD__(v92, v95))
            goto LABEL_183;
          v68 = v211;
          if ((uint64_t)v61[3] >= v212)
          {
            if ((v77 & 1) == 0)
              sub_1002D6574();
          }
          else
          {
            sub_1002CCF14(v212, v77);
            v213 = sub_10001A6DC(v67, v63);
            if ((v68 & 1) != (v214 & 1))
              goto LABEL_204;
            v89 = v213;
          }
          v77 = (uint64_t)v433;
          v61 = (unint64_t *)v450[0];
          if ((v68 & 1) != 0)
          {
            v189 = (unint64_t *)(*(_QWORD *)(v450[0] + 56) + 16 * v89);
            swift_bridgeObjectRelease();
            *v189 = v93;
            v189[1] = v74;
          }
          else
          {
            *(_QWORD *)(v450[0] + 8 * (v89 >> 6) + 64) |= 1 << v89;
            v215 = (uint64_t *)(v61[6] + 16 * v89);
            *v215 = v67;
            v215[1] = v63;
            v216 = (unint64_t *)(v61[7] + 16 * v89);
            *v216 = v93;
            v216[1] = v74;
            v217 = v61[2];
            v186 = __OFADD__(v217, 1);
            v218 = v217 + 1;
            if (v186)
              goto LABEL_190;
            v61[2] = v218;
            swift_bridgeObjectRetain(v63);
          }
          v67 = v437;
          v74 = (uint64_t)v436;
          swift_release(v431);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v188 = (uint64_t)v442 + 1;
          if ((_QWORD)v439 == v74)
            goto LABEL_93;
        }
        __break(1u);
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      v61 = _swiftEmptyDictionarySingleton;
      v446 = _swiftEmptyDictionarySingleton;
LABEL_93:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v61);
      v219 = (char *)v447;
      sub_10024AA98((int64_t)v441, (uint64_t)v61, v435, v77);
      v220 = v219;
      swift_bridgeObjectRelease();
      if (v219)
      {
        v221 = v416;
        *v416 = v219;
        swift_storeEnumTagMultiPayload(v221, v420, 1);
        v220 = 0;
      }
      else
      {
        swift_storeEnumTagMultiPayload(v77, v420, 0);
        v221 = v416;
        sub_1000A5CA8(v77, (uint64_t)v416, &qword_100841C70);
      }
      sub_1000A5CA8((uint64_t)v221, v424, &qword_100841C70);
      swift_bridgeObjectRelease();
      if (v74 < 0)
      {
        v222 = 100;
      }
      else if (v74 >= 100)
      {
        v222 = 100;
      }
      else
      {
        v222 = v74;
      }
      if (v380)
      {
        if (v67 < 0)
          v223 = v67;
        else
          v223 = v67 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v67);
        v77 = _CocoaArrayWrapper.endIndex.getter(v223);
        swift_bridgeObjectRelease();
        if (v77 < 0)
        {
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          swift_once(&qword_100836F00, sub_1001B9C44);
LABEL_174:
          v349 = sub_10001A630((uint64_t *)&unk_10083F1A8);
          v350 = sub_1000A5F84(&qword_100841CA0, (uint64_t *)&unk_10083F1A8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          Subject<>.send()(v349, v350);
          v343 = v429;
LABEL_175:
          *(_QWORD *)&v439 = v67;
          v351 = v222;
          Result.eraseToCodableError()(v408);
          Result.eraseToCodableError()(v420);
          Result.eraseToCodableError()(v68);
          v352 = v392;
          sub_100008868(v418, (uint64_t)v392, &qword_100841C60);
          if (swift_getEnumCaseMultiPayload(v352, v409) == 1)
          {
            v353 = *v352;
            v354 = v220;
            v355 = (uint64_t)v400;
            *v400 = v353;
            v356 = 1;
          }
          else
          {
            v357 = v384;
            sub_1000A5CA8((uint64_t)v352, v384, &qword_100841C20);
            v358 = *(int *)(v405 + 48);
            v359 = &v383[v358];
            v360 = v357 + v358;
            v362 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord(0, v361);
            v363 = *(_QWORD *)(v362 - 8);
            v364 = v360;
            v343 = v429;
            (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v359, v364, v362);
            v365 = *(void (**)(_QWORD *, char *, uint64_t))(v363 + 32);
            v355 = (uint64_t)v400;
            v365(v400, v359, v362);
            v354 = v404;
            sub_10000882C(v357, &qword_100841C20);
            v356 = 0;
          }
          v366 = v402;
          v367 = v401;
          swift_storeEnumTagMultiPayload(v355, v401, v356);
          Result.eraseToCodableError()(v367);
          v368 = sub_10000882C(v355, &qword_100841C28);
          v369 = v391;
          Date.init()(v368);
          v370 = v445;
          v371 = Date.timeIntervalSince(_:)(v445);
          v372 = *(void (**)(char *, uint64_t))(v444 + 8);
          v373 = v369;
          v374 = v443;
          v372(v373, v443);
          REMSuggestedAttributesTrainer.Result.init(embedding:anchoredBubble:corebehavior:intentionalWord:trainingDuration:)(v406, v354, v407, v366, v371);
          swift_release(v351);
          swift_release(v439);
          sub_10000882C(v419, &qword_100841C50);
          sub_10000882C(v418, &qword_100841C60);
          sub_10000882C(v417, &qword_100841C68);
          sub_10000882C(v424, &qword_100841C70);
          v372(v370, v374);
          sub_10000882C(v425, (uint64_t *)&unk_100839C80);
          (*(void (**)(char *, uint64_t))(v410 + 8))(v426, v411);
          v442(v435, v428);
          sub_10001C744((uint64_t)v441, type metadata accessor for TrainingContext);
          ((void (*)(char *, uint64_t))v434)(v440, v343);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v77);
          return;
        }
        swift_bridgeObjectRetain(v67);
        v101 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v223);
        swift_bridgeObjectRelease();
      }
      else
      {
        v101 = *(uint64_t **)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if ((uint64_t)v101 < v222)
        goto LABEL_202;
      if ((v67 & 0xC000000000000001) != 0 && v222)
      {
        v101 = (uint64_t *)type metadata accessor for REMSuggestedAttributeReminderDataSource(0);
        v224 = 0;
        do
        {
          v225 = v224 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v224);
          v224 = v225;
        }
        while (v222 != v225);
      }
      if (v380)
      {
        if (v67 < 0)
          v227 = v67;
        else
          v227 = v67 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v67);
        v436 = (char *)_CocoaArrayWrapper.subscript.getter(0, v222, v227);
        v442 = v228;
        v63 = v229;
        v226 = v230;
        swift_bridgeObjectRelease_n(v67, 2);
      }
      else
      {
        v63 = 0;
        v436 = (char *)(v67 & 0xFFFFFFFFFFFFFF8);
        v442 = (void (*)(_QWORD, _QWORD))((v67 & 0xFFFFFFFFFFFFFF8) + 32);
        v226 = (2 * v222) | 1;
      }
      v438 = 0;
      v231 = v226 >> 1;
      v74 = (uint64_t)_swiftEmptyDictionarySingleton;
      if (v63 == v231)
      {
        v77 = (uint64_t)_swiftEmptyDictionarySingleton;
LABEL_121:
        v437 = v77;
        swift_unknownObjectRelease(v436);
        v232 = v413;
        v233 = v426;
        v235 = REMSuggestedAttributeInputDataFrame.index.getter(v234);
        v89 = (unint64_t)v379;
        __chkstk_darwin(v235);
        v379[-2] = v233;
        v236 = v438;
        v237 = sub_1003511A8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100255910, (uint64_t)&v379[-4]);
        v436 = v236;
        (*(void (**)(char *, uint64_t))(v414 + 8))(v232, v415);
        v450[0] = (uint64_t)_swiftEmptyDictionarySingleton;
        v77 = v237[2];
        v433 = (char *)v237;
        if (v77)
        {
          v61 = v237 + 7;
          v439 = xmmword_1006A3C00;
          while (1)
          {
            v63 = *(v61 - 3);
            v68 = *(v61 - 2);
            v67 = *(v61 - 1);
            v93 = *v61;
            swift_bridgeObjectRetain_n(*v61, 2);
            swift_bridgeObjectRetain(v68);
            v87 = sub_10001A6DC(v67, v93);
            v92 = *(_QWORD *)(v74 + 16);
            v95 = (v239 & 1) == 0;
            v240 = v92 + v95;
            if (__OFADD__(v92, v95))
              break;
            v89 = v239;
            if (*(_QWORD *)(v74 + 24) < v240)
            {
              sub_1002CE7C4(v240, 1);
              v74 = v450[0];
              v241 = sub_10001A6DC(v67, v93);
              if ((v89 & 1) != (v242 & 1))
                goto LABEL_204;
              v87 = v241;
            }
            if ((v89 & 1) != 0)
            {
              v442 = (void (*)(_QWORD, _QWORD))v63;
              swift_bridgeObjectRelease();
              v447 = v74;
              v243 = *(char **)(v74 + 56);
              v89 = *(_QWORD *)&v243[8 * v87];
              v244 = swift_isUniquelyReferenced_nonNull_native(v89);
              v438 = v243;
              *(_QWORD *)&v243[8 * v87] = v89;
              if ((v244 & 1) == 0)
              {
                v89 = (unint64_t)sub_1002C87D8(0, *(_QWORD *)(v89 + 16) + 1, 1, (_QWORD *)v89);
                *(_QWORD *)&v438[8 * v87] = v89;
              }
              v246 = *(_QWORD *)(v89 + 16);
              v245 = *(_QWORD *)(v89 + 24);
              v247 = (id)(v246 + 1);
              v248 = v442;
              if (v246 >= v245 >> 1)
              {
                v431 = (id)(v246 + 1);
                v249 = sub_1002C87D8((_QWORD *)(v245 > 1), v246 + 1, 1, (_QWORD *)v89);
                v247 = v431;
                v89 = (unint64_t)v249;
                *(_QWORD *)&v438[8 * v87] = v249;
              }
              *(_QWORD *)(v89 + 16) = v247;
              v238 = (_QWORD *)(v89 + 32 * v246);
              v238[4] = v248;
              v238[5] = v68;
              v238[6] = v67;
              v238[7] = v93;
              v74 = v447;
            }
            else
            {
              v250 = sub_10001A630(&qword_100841C90);
              v251 = swift_allocObject(v250, 64, 7);
              *(_OWORD *)(v251 + 16) = v439;
              *(_QWORD *)(v251 + 32) = v63;
              *(_QWORD *)(v251 + 40) = v68;
              *(_QWORD *)(v251 + 48) = v67;
              *(_QWORD *)(v251 + 56) = v93;
              *(_QWORD *)(v74 + 8 * (v87 >> 6) + 64) |= 1 << v87;
              v252 = (uint64_t *)(*(_QWORD *)(v74 + 48) + 16 * v87);
              *v252 = v67;
              v252[1] = v93;
              *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v87) = v251;
              v253 = *(_QWORD *)(v74 + 16);
              v186 = __OFADD__(v253, 1);
              v254 = v253 + 1;
              if (v186)
                goto LABEL_191;
              *(_QWORD *)(v74 + 16) = v254;
            }
            v61 += 4;
            if (!--v77)
              goto LABEL_136;
          }
LABEL_184:
          __break(1u);
          goto LABEL_185;
        }
LABEL_136:
        swift_bridgeObjectRelease();
        v255 = v436;
        sub_100246A20(v74);
        v257 = v256;
        v258 = v255;
        swift_release(v74);
        swift_bridgeObjectRetain_n(v257, 2);
        v260 = Logger.logObject.getter(v259);
        v261 = static os_log_type_t.default.getter(v260);
        if (os_log_type_enabled(v260, v261))
        {
          v447 = (uint64_t)v255;
          v262 = (uint8_t *)swift_slowAlloc(12, -1);
          v263 = swift_slowAlloc(32, -1);
          v450[0] = v263;
          *(_DWORD *)v262 = 136315138;
          swift_bridgeObjectRetain(v257);
          v265 = Array.description.getter(v264, &type metadata for String);
          v267 = v266;
          swift_bridgeObjectRelease();
          v448 = sub_10001A820(v265, v267, v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v448, v449);
          swift_bridgeObjectRelease_n(v257, 2);
          v258 = (char *)v447;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v260, v261, "Training REMFilteredTitleEmbedding with %s", v262, 0xCu);
          swift_arrayDestroy(v263, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v263, -1, -1);
          swift_slowDealloc(v262, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v257, 2);
        }
        v288 = v443;
        v289 = v427;
        v290 = v412;
        v291 = type metadata accessor for REMFilteredTitleEmbedding(0);
        swift_allocObject(v291, *(unsigned int *)(v291 + 48), *(unsigned __int16 *)(v291 + 52));
        v292 = REMFilteredTitleEmbedding.init(from:stopWordThresholdByPercent:)(v257, 0.8);
        if (v258)
        {
          sub_10000882C(v424, &qword_100841C70);
          v293 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v444 + 8))(v445, v288, v293);
          sub_10000882C(v425, (uint64_t *)&unk_100839C80);
          (*(void (**)(char *, uint64_t))(v410 + 8))(v426, v411);
          (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v435, v428);
          sub_10001C744((uint64_t)v441, type metadata accessor for TrainingContext);
          ((void (*)(char *, uint64_t))v434)(v440, v429);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        v67 = v292;
        v447 = 0;
        v294 = v385;
        REMFilteredTitleEmbedding.config()();
        v295 = v435;
        v296 = REMTitleEmbeddingConfig.saveConfig(to:)(v435);
        (*(void (**)(char *, uint64_t))(v386 + 8))(v294, v387);
        v297 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v289 + 16);
        v298 = v428;
        if ((v296 & 1) != 0)
        {
          v290 = v381;
          v299 = v297(v381, v295, v428);
          v300 = Logger.logObject.getter(v299);
          v301 = static os_log_type_t.info.getter(v300);
          if (os_log_type_enabled(v300, v301))
          {
            v302 = (uint8_t *)swift_slowAlloc(12, -1);
            v303 = swift_slowAlloc(32, -1);
            v450[0] = v303;
            *(_DWORD *)v302 = 136315138;
            v442 = (void (*)(_QWORD, _QWORD))(v302 + 4);
            v304 = URL.absoluteString.getter(v303);
            v448 = sub_10001A820(v304, v305, v450);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v448, v449);
            v306 = swift_bridgeObjectRelease();
            v442 = *(void (**)(_QWORD, _QWORD))(v427 + 8);
            ((void (*)(char *, uint64_t, __n128))v442)(v290, v428, v306);
            v307 = "embedding config file saved to %s";
            goto LABEL_161;
          }
LABEL_162:
          v442 = *(void (**)(_QWORD, _QWORD))(v289 + 8);
          v442(v290, v298);
        }
        else
        {
          v308 = v297(v290, v295, v428);
          v300 = Logger.logObject.getter(v308);
          v301 = static os_log_type_t.error.getter(v300);
          if (!os_log_type_enabled(v300, v301))
            goto LABEL_162;
          v302 = (uint8_t *)swift_slowAlloc(12, -1);
          v303 = swift_slowAlloc(32, -1);
          v450[0] = v303;
          *(_DWORD *)v302 = 136315138;
          v442 = (void (*)(_QWORD, _QWORD))(v302 + 4);
          v309 = URL.absoluteString.getter(v303);
          v448 = sub_10001A820(v309, v310, v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v448, v449);
          v311 = swift_bridgeObjectRelease();
          v442 = *(void (**)(_QWORD, _QWORD))(v427 + 8);
          ((void (*)(char *, uint64_t, __n128))v442)(v290, v428, v311);
          v307 = "failed saving embedding config file to %s";
LABEL_161:
          _os_log_impl((void *)&_mh_execute_header, v300, v301, v307, v302, 0xCu);
          swift_arrayDestroy(v303, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v303, -1, -1);
          swift_slowDealloc(v302, -1, -1);
        }

        v312 = (uint64_t *)v395;
        v313 = REMSuggestedAttributeInputDataFrame.title.getter();
        swift_retain();
        v314 = v447;
        v315 = sub_100255928(v313);
        v316 = v314;
        swift_release(v313);
        swift_release(v67);
        v450[0] = REMFilteredTitleEmbedding.vector(for:)(0, 0xE000000000000000, v317);
        v318 = sub_10001A630(&qword_100841C98);
        swift_allocObject(v318, *(unsigned int *)(v318 + 48), *(unsigned __int16 *)(v318 + 52));
        v222 = Series.init(_:defaultValue:)(v315, v450);
        v450[3] = v291;
        v450[4] = (uint64_t)&protocol witness table for REMFilteredTitleEmbedding;
        v450[0] = v67;
        v319 = v388;
        sub_100008868(v425, v388, (uint64_t *)&unk_100839C80);
        v320 = type metadata accessor for UUID(0);
        v321 = *(_QWORD *)(v320 - 8);
        LODWORD(v314) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v321 + 48))(v319, 1, v320);
        v322 = swift_retain();
        if ((_DWORD)v314 == 1)
        {
          sub_10000882C(v319, (uint64_t *)&unk_100839C80);
        }
        else
        {
          UUID.uuidString.getter(v322);
          (*(void (**)(uint64_t, uint64_t))(v321 + 8))(v319, v320);
        }
        v323 = v435;
        v324 = v389;
        sub_10024BB7C((uint64_t)v441, v222, (uint64_t)v426, v389);
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v450);
        if (v316)
        {
          v325 = v393;
          *v393 = v316;
          swift_storeEnumTagMultiPayload(v325, v408, 1);
        }
        else
        {
          swift_storeEnumTagMultiPayload(v324, v408, 0);
          v325 = v393;
          sub_1000A5CA8(v324, (uint64_t)v393, &qword_100841C68);
        }
        v326 = (void (*)(char *, _QWORD *, uint64_t))v430;
        v327 = v405;
        sub_1000A5CA8((uint64_t)v325, v417, &qword_100841C68);
        v328 = v390;
        sub_10024D4CC(v323, (uint64_t)v441, (uint64_t *)v67, v450, v390);
        v329 = v328;
        v330 = v328;
        v331 = v409;
        swift_storeEnumTagMultiPayload(v329, v409, 0);
        v332 = (uint64_t)v330;
        v333 = v394;
        sub_1000A5CA8(v332, v394, &qword_100841C60);
        v334 = v396;
        sub_1000A5CA8(v333, v418, &qword_100841C60);
        Result.valueOrNil()(v331);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v334 + 48))(v312, 1, v327) == 1)
        {
          sub_10000882C((uint64_t)v312, &qword_100841C58);
          swift_bridgeObjectRelease();
          v77 = 0;
        }
        else
        {
          v336 = *v312;
          v337 = (char *)v312 + *(int *)(v327 + 48);
          v338 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord(0, v335);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v338 - 8) + 8))(v337, v338);
          swift_retain();
          v339 = sub_100255D24(v222);
          swift_bridgeObjectRelease();
          swift_release(v336);
          v340 = v382;
          Series.index.getter(v341);
          strcpy((char *)v450, "missing intent");
          HIBYTE(v450[1]) = -18;
          v342 = sub_10001A630(&qword_100841CA8);
          swift_allocObject(v342, *(unsigned int *)(v342 + 48), *(unsigned __int16 *)(v342 + 52));
          v77 = Series.init(_:index:defaultValue:)(v339, v340, v450);
          swift_release(v336);
        }
        v343 = v429;
        v344 = (uint64_t)v397;
        swift_retain();
        v345 = (uint64_t)v446;
        swift_bridgeObjectRetain(v446);
        sub_10024E124(v441, v426, (_QWORD *)v77, v345, v344);
        v447 = 0;
        swift_release(v77);
        swift_bridgeObjectRelease();
        v68 = v399;
        swift_storeEnumTagMultiPayload(v344, v399, 0);
        v346 = v398;
        sub_1000A5CA8(v344, v398, &qword_100841C50);
        v220 = v404;
        sub_1000A5CA8(v346, v419, &qword_100841C50);
        v347 = v432;
        v326(v432, v441, v343);
        v348 = swift_getKeyPath(&unk_1006B0E48);
        PartialOverride.subscript.getter(v450, v348, v343, &protocol witness table for Bool);
        swift_release(v348);
        ((void (*)(char *, uint64_t))v434)(v347, v343);
        if (LOBYTE(v450[0]) == 1)
        {
          if (qword_100836F00 == -1)
            goto LABEL_174;
          goto LABEL_203;
        }
        goto LABEL_175;
      }
      v77 = (uint64_t)_swiftEmptyDictionarySingleton;
      *(_QWORD *)&v439 = v231;
      while (v63 < v231)
      {
        v67 = *((_QWORD *)v442 + v63);
        v270 = swift_retain();
        v93 = dispatch thunk of REMSuggestedAttributeReminderDataSource.title.getter(v270);
        v68 = v271;
        v61 = (unint64_t *)dispatch thunk of REMSuggestedAttributeReminderDataSource.listUUIDString.getter(v272);
        v447 = v273;
        v101 = (uint64_t *)v77;
        v274 = swift_isUniquelyReferenced_nonNull_native(v77);
        v450[0] = (uint64_t)v101;
        v276 = sub_10001A6DC(v93, v68);
        v277 = v101[2];
        v278 = (v275 & 1) == 0;
        v279 = v277 + v278;
        if (__OFADD__(v277, v278))
          goto LABEL_187;
        v280 = v275;
        if (v101[3] >= v279)
        {
          if ((v274 & 1) != 0)
          {
            v77 = v450[0];
            if ((v275 & 1) != 0)
              goto LABEL_139;
          }
          else
          {
            v101 = v450;
            sub_1002D6574();
            v77 = v450[0];
            if ((v280 & 1) != 0)
              goto LABEL_139;
          }
        }
        else
        {
          sub_1002CCF14(v279, v274);
          v101 = (uint64_t *)v450[0];
          v281 = sub_10001A6DC(v93, v68);
          if ((v280 & 1) != (v282 & 1))
            goto LABEL_204;
          v276 = v281;
          v77 = v450[0];
          if ((v280 & 1) != 0)
          {
LABEL_139:
            v268 = (unint64_t **)(*(_QWORD *)(v77 + 56) + 16 * v276);
            swift_bridgeObjectRelease();
            v269 = v447;
            *v268 = v61;
            v268[1] = (unint64_t *)v269;
            goto LABEL_140;
          }
        }
        *(_QWORD *)(v77 + 8 * (v276 >> 6) + 64) |= 1 << v276;
        v283 = (unint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v276);
        *v283 = v93;
        v283[1] = v68;
        v284 = (unint64_t **)(*(_QWORD *)(v77 + 56) + 16 * v276);
        v285 = v447;
        *v284 = v61;
        v284[1] = (unint64_t *)v285;
        v286 = *(_QWORD *)(v77 + 16);
        v186 = __OFADD__(v286, 1);
        v287 = v286 + 1;
        if (v186)
          goto LABEL_192;
        *(_QWORD *)(v77 + 16) = v287;
        swift_bridgeObjectRetain(v68);
LABEL_140:
        v74 = (uint64_t)_swiftEmptyDictionarySingleton;
        v231 = v439;
        ++v63;
        swift_release(v67);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v231 == v63)
          goto LABEL_121;
      }
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      v74 = sub_1002CA0B4(0, *(_QWORD *)(v74 + 16) + 1, 1, v74);
LABEL_12:
      v104 = v438;
      v446 = v101;
      v108 = *(_QWORD *)(v74 + 16);
      v107 = *(_QWORD *)(v74 + 24);
      v109 = v74;
      if (v108 >= v107 >> 1)
        v109 = sub_1002CA0B4(v107 > 1, v108 + 1, 1, v74);
      v98 = v442;
      v105 = v437;
      *(_QWORD *)(v109 + 16) = v108 + 1;
      v90 = (_QWORD *)v109;
      (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v109+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v108, v434, v67);

      (*(void (**)(char *, uint64_t))(v68 + 8))(v436, v67);
      v63 = v429;
    }
  }
  v74 = (uint64_t)v90;
  v429 = v63;
  v99 = (void *)(*(uint64_t (**)(void))(v89
                                     + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource))();
  v100 = sub_10009FC50(&qword_100841CB8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesTrainer.Parameters);
  v101 = v99;
  v102 = v436;
  v103 = v447;
  Partial<A>.init(dictionary:)(v99, v61, v100);
  if (!v103)
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v434, v102, v67);
    v106 = swift_isUniquelyReferenced_nonNull_native(v74);
    v447 = 0;
    if ((v106 & 1) == 0)
      goto LABEL_188;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v444 + 8))(v445, v78);
}

uint64_t sub_10024AA98@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t KeyPath;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __n128 v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  __n128 v100;
  __n128 v101;
  uint64_t v102;
  BOOL v103;
  unint64_t v104;
  int64_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v114;
  __n128 v115;
  void (*v116)(_BYTE *, uint64_t, __n128);
  __n128 v117;
  __n128 v118;
  void (*v119)(_BYTE *, uint64_t, __n128);
  uint64_t *v120;
  __n128 v121;
  void (*v122)(_BYTE *, uint64_t, __n128);
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  void (*v126)(_BYTE *, uint64_t, __n128);
  __n128 v127;
  void (*v128)(_BYTE *, uint64_t, __n128);
  __n128 v129;
  void (*v130)(_BYTE *, uint64_t, __n128);
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  double v136;
  _BYTE *v137;
  double v138;
  void (*v139)(_BYTE *, uint64_t);
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  _BYTE v143[12];
  int v144;
  _BYTE *v145;
  int v146;
  int v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t v152;
  void (*v153)(_BYTE *, uint64_t);
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  void (*v166)(_BYTE *, int64_t, uint64_t, __n128);
  int64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[2];

  v157 = a3;
  v163 = a2;
  v152 = a4;
  v5 = sub_10001A630(&qword_100841D10);
  v6 = __chkstk_darwin(v5);
  v156 = &v143[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for REMSuggestedAttributeOutput(0, v6);
  v169 = *(_QWORD *)(v8 - 8);
  v170 = v8;
  __chkstk_darwin(v8);
  v164 = &v143[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v165 = &v143[-v11];
  v12 = type metadata accessor for URL(0);
  v158 = *(_QWORD *)(v12 - 8);
  v159 = v12;
  __chkstk_darwin(v12);
  v160 = &v143[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v150 = &v143[-v15];
  v16 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v16 - 8);
  v162 = v16;
  __chkstk_darwin(v16);
  v151 = &v143[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v20 = &v143[-v19];
  v21 = sub_10001A630(&qword_100841D18);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v155 = &v143[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v26 = &v143[-v25];
  v27 = sub_10001A630(&qword_100841C80);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v154 = &v143[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __chkstk_darwin(v30);
  v33 = &v143[-v32];
  v166 = *(void (**)(_BYTE *, int64_t, uint64_t, __n128))(v28 + 16);
  v167 = a1;
  v166(&v143[-v32], a1, v27, v31);
  KeyPath = swift_getKeyPath(&unk_1006B1148);
  PartialOverride.subscript.getter(KeyPath, v27);
  swift_release(KeyPath);
  v35 = *(void (**)(_BYTE *, uint64_t))(v28 + 8);
  v36 = v21;
  v37 = v35;
  v35(v33, v27);
  v38 = swift_getKeyPath(&unk_1006B1178);
  PartialOverride.subscript.getter(v172, v38, v36, &protocol witness table for Bool);
  swift_release(v38);
  v39 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  v40 = ((uint64_t (*)(_BYTE *, uint64_t))v39)(v26, v36);
  if (LOBYTE(v172[0]) != 1)
  {
    v61 = sub_1002557D8();
    v62 = swift_allocError(&type metadata for ModelSkippedError, v61, 0, 0);
    return swift_willThrow(v62);
  }
  v149 = v20;
  Date.init()(v40);
  v41 = (int64_t)v166;
  v42 = v167;
  ((void (*)(_BYTE *, int64_t, uint64_t))v166)(v33, v167, v27);
  v43 = swift_getKeyPath(&unk_1006B1148);
  v153 = v39;
  v44 = v43;
  PartialOverride.subscript.getter(v43, v27);
  swift_release(v44);
  v37(v33, v27);
  v45 = swift_getKeyPath(&unk_1006B11A8);
  PartialOverride.subscript.getter(v172, v45, v36, &protocol witness table for Bool);
  swift_release(v45);
  v153(v26, v36);
  if (LOBYTE(v172[0]) == 1)
  {
    v148 = v36;
    v46 = v163;
    if (qword_100837050 == -1)
      goto LABEL_4;
    goto LABEL_82;
  }
  v46 = v163;
  v63 = v157;
  v64 = v160;
  if (qword_100837050 != -1)
    swift_once(&qword_100837050, sub_1002479DC);
  v65 = type metadata accessor for Logger(0);
  v66 = sub_10001AAA8(v65, (uint64_t)qword_100841B10);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.default.getter(v67);
  v69 = os_log_type_enabled(v67, v68);
  v42 = v158;
  v27 = v159;
  v37 = (void (*)(_BYTE *, uint64_t))v156;
  if (v69)
  {
    v70 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "REMSuggestedAttributesTrainer: tuning anchoredBubbleModel", v70, 2u);
    v71 = v70;
    v64 = v160;
    swift_slowDealloc(v71, -1, -1);
  }

  type metadata accessor for REMAnchoredBubbleModel(0);
  v72 = v168;
  v73 = static REMAnchoredBubbleModel.train(titleList:distanceScale:usePCA:)(v46, 0, 1, 1);
  v59 = v72;
  if (v72)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v161 + 8))(v149, v162);
  while (2)
  {
    v168 = v73;
    v74 = dispatch thunk of REMAnchoredBubbleModel.save(path:)(v63);
    v157 = v59;
    if ((v74 & 1) != 0)
    {
      if (qword_100837050 != -1)
LABEL_84:
        swift_once(&qword_100837050, sub_1002479DC);
      v75 = type metadata accessor for Logger(0);
      sub_10001AAA8(v75, (uint64_t)qword_100841B10);
      v64 = v150;
      v76 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v42 + 16))(v150, v63, v27);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.default.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v42 = swift_slowAlloc(12, -1);
        v79 = swift_slowAlloc(32, -1);
        v172[0] = v79;
        *(_DWORD *)v42 = 136315138;
        v27 = v42 + 12;
        v167 = v42 + 4;
        v80 = URL.absoluteString.getter(v79);
        v171 = sub_10001A820(v80, v81, v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
        v82 = swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t, __n128))(v158 + 8))(v64, v159, v82);
        v83 = "REMSuggestedAttributesTrainer: anchoredBubbleModel saved to %s";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v77, v78, v83, (uint8_t *)v42, 0xCu);
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v42, -1, -1);
        goto LABEL_26;
      }
    }
    else
    {
      if (qword_100837050 != -1)
        swift_once(&qword_100837050, sub_1002479DC);
      v84 = type metadata accessor for Logger(0);
      sub_10001AAA8(v84, (uint64_t)qword_100841B10);
      v85 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v42 + 16))(v64, v63, v27);
      v77 = Logger.logObject.getter(v85);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v42 = swift_slowAlloc(12, -1);
        v79 = swift_slowAlloc(32, -1);
        v172[0] = v79;
        *(_DWORD *)v42 = 136315138;
        v27 = v42 + 12;
        v167 = v42 + 4;
        v86 = URL.absoluteString.getter(v79);
        v171 = sub_10001A820(v86, v87, v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
        v88 = swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t, __n128))(v158 + 8))(v64, v159, v88);
        v83 = "REMSuggestedAttributesTrainer: failed to save anchoredBubbleModel to %s";
        goto LABEL_24;
      }
    }
    (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v64, v27);
LABEL_26:

    v89 = *(_QWORD *)(v46 + 64);
    v166 = (void (*)(_BYTE *, int64_t, uint64_t, __n128))(v46 + 64);
    v90 = 1 << *(_BYTE *)(v46 + 32);
    LODWORD(v158) = enum case for REMSuggestedAttributeOutput.list(_:);
    if (v90 < 64)
      v91 = ~(-1 << v90);
    else
      v91 = -1;
    v92 = v91 & v89;
    v167 = (unint64_t)(v90 + 63) >> 6;
    v145 = v164 + 8;
    LODWORD(v156) = enum case for REMSuggestedAttributeOutput.pasteboardURL(_:);
    LODWORD(v155) = enum case for REMSuggestedAttributeOutput.recurrenceFrequency(_:);
    LODWORD(v154) = enum case for REMSuggestedAttributeOutput.location(_:);
    LODWORD(v153) = enum case for REMSuggestedAttributeOutput.dueDate(_:);
    LODWORD(v150) = enum case for REMSuggestedAttributeOutput.assignee(_:);
    LODWORD(v148) = enum case for REMSuggestedAttributeOutput.flagged(_:);
    v147 = enum case for REMSuggestedAttributeOutput.priority(_:);
    v146 = enum case for REMSuggestedAttributeOutput.tag(_:);
    v144 = enum case for REMSuggestedAttributeOutput.contact(_:);
    swift_bridgeObjectRetain(v46);
    v159 = 0;
    v160 = 0;
    v41 = 0;
    if (v92)
    {
LABEL_30:
      v93 = __clz(__rbit64(v92));
      v92 &= v92 - 1;
      v94 = v93 | (v41 << 6);
      goto LABEL_31;
    }
    while (1)
    {
      v103 = __OFADD__(v41++, 1);
      if (v103)
      {
        __break(1u);
        goto LABEL_80;
      }
      if (v41 >= v167)
        goto LABEL_78;
      v104 = *((_QWORD *)v166 + v41);
      if (v104)
        goto LABEL_43;
      v105 = v41 + 1;
      if (v41 + 1 >= v167)
        goto LABEL_78;
      v104 = *((_QWORD *)v166 + v105);
      if (!v104)
      {
        v105 = v41 + 2;
        if (v41 + 2 >= v167)
          goto LABEL_78;
        v104 = *((_QWORD *)v166 + v105);
        if (!v104)
        {
          v105 = v41 + 3;
          if (v41 + 3 >= v167)
          {
LABEL_78:
            v131 = v149;
            v132 = v163;
            v133 = swift_release(v163);
            v134 = (double)v159 / (double)(uint64_t)v160;
            v135 = *(_QWORD *)(v132 + 16);
            v136 = (double)(uint64_t)v160 / (double)v135;
            v137 = v151;
            Date.init()(v133);
            v138 = Date.timeIntervalSince(_:)(v131);
            v139 = *(void (**)(_BYTE *, uint64_t))(v161 + 8);
            v140 = v137;
            v141 = v131;
            v142 = v162;
            v139(v140, v162);
            REMSuggestedAttributesTrainer.Result.AnchoredBubble.init(precision:recall:skippedRemindersCount:trainingSetCount:validationSetCount:trainingDuration:)(0, v135, 0, v134, v136, v138);
            swift_release(v168);
            return ((uint64_t (*)(_BYTE *, uint64_t))v139)(v141, v142);
          }
          v104 = *((_QWORD *)v166 + v105);
          if (!v104)
            break;
        }
      }
      v41 = v105;
LABEL_43:
      v92 = (v104 - 1) & v104;
      v94 = __clz(__rbit64(v104)) + (v41 << 6);
LABEL_31:
      v95 = 16 * v94;
      v96 = (uint64_t *)(*(_QWORD *)(v46 + 48) + v95);
      v97 = *v96;
      v98 = v96[1];
      v99 = (uint64_t *)(*(_QWORD *)(v46 + 56) + v95);
      v63 = *v99;
      v42 = v99[1];
      swift_bridgeObjectRetain(v98);
      v100 = swift_bridgeObjectRetain(v42);
      dispatch thunk of REMAnchoredBubbleModel.predict(title:)(v97, v98, v100);
      v101 = swift_bridgeObjectRelease();
      v27 = v169;
      v102 = v170;
      if ((*(unsigned int (**)(void (*)(_BYTE *, uint64_t), uint64_t, uint64_t, __n128))(v169 + 48))(v37, 1, v170, v101) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10000882C((uint64_t)v37, &qword_100841D10);
        if (v92)
          goto LABEL_30;
      }
      else
      {
        (*(void (**)(_BYTE *, void (*)(_BYTE *, uint64_t), uint64_t))(v27 + 32))(v165, v37, v102);
        v103 = __OFADD__(v160++, 1);
        if (v103)
          goto LABEL_81;
        v106 = v164;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 16))(v164, v165, v102);
        v107 = (*(uint64_t (**)(_BYTE *, uint64_t))(v27 + 88))(v106, v102);
        if (v107 == (_DWORD)v158)
        {
          (*(void (**)(_BYTE *, uint64_t))(v27 + 96))(v106, v102);
          v108 = sub_10001A630(&qword_100841D48);
          v109 = *(_QWORD *)&v106[*(int *)(v108 + 48)];
          v110 = REMSuggestedList.listIdentifier.getter(v108);
          v112 = v27;
          if (v63 == v110 && v42 == v111)
          {
            swift_release(v109);
            v117 = swift_bridgeObjectRelease_n(v42, 2);
            (*(void (**)(_BYTE *, uint64_t, __n128))(v27 + 8))(v165, v170, v117);
          }
          else
          {
            v27 = v111;
            v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v42, v110, v111, 0);
            swift_bridgeObjectRelease();
            swift_release(v109);
            v114 = swift_bridgeObjectRelease();
            (*(void (**)(_BYTE *, uint64_t, __n128))(v112 + 8))(v165, v170, v114);
            if ((v63 & 1) == 0)
            {
LABEL_60:
              v27 = (uint64_t)v164;
              goto LABEL_68;
            }
          }
          v103 = __OFADD__(v159++, 1);
          if (v103)
          {
            __break(1u);
            goto LABEL_84;
          }
          goto LABEL_60;
        }
        if (v107 != (_DWORD)v156 && v107 != (_DWORD)v155)
        {
          if (v107 == (_DWORD)v154)
          {
            (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
            v118 = swift_bridgeObjectRelease();
            v119 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
            v27 = (uint64_t)v164;
            v119(v164, v102, v118);
            v120 = (uint64_t *)&unk_100841D40;
          }
          else
          {
            if (v107 != (_DWORD)v153)
            {
              if (v107 == (_DWORD)v150)
              {
                (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
                v125 = swift_bridgeObjectRelease();
                v126 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
                v27 = (uint64_t)v164;
                v126(v164, v102, v125);

                goto LABEL_68;
              }
              if (v107 != (_DWORD)v148 && v107 != v147)
              {
                if (v107 == v146)
                {
                  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
                  v127 = swift_bridgeObjectRelease();
                  v128 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
                  v27 = (uint64_t)v164;
                  v128(v164, v102, v127);
                  sub_10001A630(&qword_100841D28);
                  swift_bridgeObjectRelease();
                  goto LABEL_68;
                }
                if (v107 != v144)
                {
                  result = _diagnoseUnexpectedEnumCase<A>(type:)(v102, v102);
                  __break(1u);
                  return result;
                }
                (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
                v129 = swift_bridgeObjectRelease();
                v130 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
                v27 = (uint64_t)v164;
                v130(v164, v102, v129);
                v120 = (uint64_t *)&unk_100841D20;
                goto LABEL_67;
              }
              goto LABEL_57;
            }
            (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
            v121 = swift_bridgeObjectRelease();
            v122 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
            v27 = (uint64_t)v164;
            v122(v164, v102, v121);
            v120 = (uint64_t *)&unk_100841D38;
          }
LABEL_67:
          v123 = sub_10001A630(v120);
          swift_release(*(_QWORD *)(v27 + *(int *)(v123 + 48)));
          goto LABEL_68;
        }
LABEL_57:
        (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v165, v102);
        v115 = swift_bridgeObjectRelease();
        v116 = *(void (**)(_BYTE *, uint64_t, __n128))(v27 + 96);
        v27 = (uint64_t)v164;
        v116(v164, v102, v115);
LABEL_68:
        v124 = type metadata accessor for REMSuggestedAttributeOutput.Source(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 8))(v27, v124);
        if (v92)
          goto LABEL_30;
      }
    }
    while (1)
    {
      v41 = v105 + 1;
      if (__OFADD__(v105, 1))
        break;
      if (v41 >= v167)
        goto LABEL_78;
      v104 = *((_QWORD *)v166 + v41);
      ++v105;
      if (v104)
        goto LABEL_43;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    swift_once(&qword_100837050, sub_1002479DC);
LABEL_4:
    v47 = type metadata accessor for Logger(0);
    v48 = sub_10001AAA8(v47, (uint64_t)qword_100841B10);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "REMSuggestedAttributesTrainer: anchoredBubbleModel using .defaultWordDistanceScale", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    type metadata accessor for REMAnchoredBubbleModel(0);
    v52 = v154;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v41)(v154, v42, v27);
    v53 = swift_getKeyPath(&unk_1006B1148);
    v54 = v155;
    PartialOverride.subscript.getter(v53, v27);
    swift_release(v53);
    v37(v52, v27);
    v55 = swift_getKeyPath(&unk_1006B11D8);
    v56 = v148;
    PartialOverride.subscript.getter(v172, v55, v148, &protocol witness table for Double);
    swift_release(v55);
    v153(v54, v56);
    v57 = v168;
    v58 = static REMAnchoredBubbleModel.train(titleList:distanceScale:usePCA:)(v46, v172[0], 0, 1);
    v59 = v57;
    if (!v57)
    {
      v73 = v58;
      v42 = v158;
      v27 = v159;
      v37 = (void (*)(_BYTE *, uint64_t))v156;
      v63 = v157;
      v64 = v160;
      continue;
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v161 + 8))(v149, v162);
  }
}

uint64_t sub_10024BA88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v4 = REMSuggestedAttributeInputDataFrame.iloc(_:)(*a1);
  v5 = REMSuggestedAttributeInput.list.getter();
  v6 = swift_release(v4);
  LOBYTE(v4) = REMSuggestedList.isValid.getter(v6);
  result = swift_release(v5);
  if ((v4 & 1) != 0)
  {
    v8 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v3);
    v9 = REMSuggestedAttributeInput.title.getter();
    v11 = v10;
    swift_release(v8);
    v12 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v3);
    v13 = REMSuggestedAttributeInput.list.getter();
    v14 = swift_release(v12);
    v15 = REMSuggestedList.listIdentifier.getter(v14);
    v17 = v16;
    result = swift_release(v13);
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v15 = 0;
    v17 = 0;
  }
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v17;
  return result;
}

uint64_t sub_10024BB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, char *);
  uint64_t KeyPath;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, char *, _QWORD *);
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint8_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t result;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  _BOOL4 v133;
  uint64_t v134;
  char *v135;
  uint8_t *v136;
  id v137;
  id v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  __n128 v144;
  uint64_t v145;
  _QWORD *v146;
  __n128 v147;
  char *v148;
  uint64_t v149;
  char *v150;
  double v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  __n128 v156;
  uint64_t v157;
  uint64_t inited;
  unint64_t v159;
  __n128 v160;
  char *v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _QWORD *v185;
  __n128 v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  uint64_t v201;
  double v202;
  void (*v203)(char *, uint64_t);
  uint64_t v204;
  char *v205;
  void *v206;
  NSString v207;
  uint64_t v208;
  void *v209;
  NSString v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  void (*v221)(unint64_t, _QWORD *, __n128);
  char *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  char *v236;
  _QWORD *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t, char *);
  char *v244;
  char *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  double v255;
  char v256[8];
  char v257[8];
  double v258;
  char v259[8];
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;

  v242 = a3;
  v233 = a2;
  v216 = a4;
  v219 = type metadata accessor for URL(0);
  v218 = *(_QWORD *)(v219 - 8);
  v5 = __chkstk_darwin(v219);
  v236 = (char *)&v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for REMSuggestedAttributesTrainer.Result.Embedding(0, v5);
  v226 = *(_QWORD *)(v234 - 8);
  v7 = __chkstk_darwin(v234);
  v232 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = type metadata accessor for REMSuggestedAttributesAccuracy(0, v7);
  v230 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v229 = (char *)&v212 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v241 = (char *)&v212 - v12;
  v250 = type metadata accessor for MultiClassificationMetric(0, v11);
  v249 = *(_QWORD *)(v250 - 8);
  __chkstk_darwin(v250);
  v228 = (char *)&v212 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v244 = (char *)&v212 - v15;
  __chkstk_darwin(v16);
  v253 = (char *)&v212 - v17;
  v18 = sub_10001A630((uint64_t *)&unk_100840780);
  __chkstk_darwin(v18);
  v248 = (char *)&v212 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v252 = (char *)&v212 - v21;
  v22 = (_QWORD *)type metadata accessor for Date(0);
  v246 = *(v22 - 1);
  __chkstk_darwin(v22);
  v227 = (char *)&v212 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v245 = (char *)&v212 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v212 - v27;
  v29 = sub_10001A630(&qword_100841CF0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v212 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = (_QWORD *)sub_10001A630(&qword_100841C80);
  v34 = *(v33 - 1);
  __chkstk_darwin(v33);
  v247 = (char *)&v212 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v212 - v38;
  v40 = *(void (**)(char *, uint64_t, _QWORD *))(v34 + 16);
  v251 = a1;
  v243 = (void (*)(char *, uint64_t, char *))v40;
  ((void (*)(char *, uint64_t, _QWORD *, __n128))v40)((char *)&v212 - v38, a1, v33, v37);
  KeyPath = swift_getKeyPath(&unk_1006B1088);
  PartialOverride.subscript.getter(KeyPath, v33);
  swift_release(KeyPath);
  v42 = *(_QWORD **)(v34 + 8);
  v238 = v39;
  ((void (*)(char *, _QWORD *))v42)(v39, v33);
  v43 = swift_getKeyPath(&unk_1006B10B8);
  PartialOverride.subscript.getter(&v258, v43, v29, &protocol witness table for Bool);
  swift_release(v43);
  v44 = *(char **)(v30 + 8);
  v45 = ((uint64_t (*)(char *, uint64_t))v44)(v32, v29);
  if (LOBYTE(v258) != 1)
  {
    v61 = sub_1002557D8();
    v62 = swift_allocError(&type metadata for ModelSkippedError, v61, 0, 0);
    return swift_willThrow(v62);
  }
  v237 = v42;
  v240 = v32;
  v215 = v29;
  v225 = REMSuggestedAttributeInputDataFrame.list.getter(v45);
  Date.init()(v225);
  if (qword_100837050 != -1)
    goto LABEL_80;
  while (1)
  {
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001AAA8(v46, (uint64_t)qword_100841B10);
    v48 = v246;
    v49 = *(uint64_t (**)(char *, char *, _QWORD *))(v246 + 16);
    v50 = (unint64_t)v245;
    v222 = v28;
    v51 = v49(v245, v28, v22);
    v224 = v47;
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    v54 = os_log_type_enabled(v52, v53);
    v235 = v33;
    v223 = v22;
    v239 = v44;
    if (v54)
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      *(double *)&v56 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v258 = *(double *)&v56;
      *(_DWORD *)v55 = 136446210;
      v221 = (void (*)(unint64_t, _QWORD *, __n128))(v55 + 4);
      v57 = Date.description.getter(v56);
      v262 = sub_10001A820(v57, v58, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v262, &v263);
      v59 = swift_bridgeObjectRelease();
      v221 = *(void (**)(unint64_t, _QWORD *, __n128))(v48 + 8);
      v221(v50, v22, v59);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "trainEvaluatekNN started at %{public}s", v55, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      v60 = v55;
      v33 = v235;
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      v221 = *(void (**)(unint64_t, _QWORD *, __n128))(v48 + 8);
      ((void (*)(unint64_t, _QWORD *))v221)(v50, v22);
    }

    v64 = v247;
    v65 = v251;
    v243(v247, v251, (char *)v33);
    v66 = swift_getKeyPath(&unk_1006B10E8);
    PartialOverride.subscript.getter(&v258, v66, v33, &protocol witness table for Double);
    swift_release(v66);
    ((void (*)(char *, _QWORD *))v237)(v64, v33);
    if (v258 > 0.0)
      v67 = v258;
    else
      v67 = 0.0;
    v262 = *(_QWORD *)(v65 + *(int *)(type metadata accessor for TrainingContext(0) + 28));
    swift_retain();
    v68 = v242;
    v70 = REMSuggestedAttributeInputDataFrame.index.getter(v69);
    v71 = &v212;
    __chkstk_darwin(v70);
    *(&v212 - 2) = v68;
    v72 = v254;
    v258 = COERCE_DOUBLE(sub_10024719C(sub_1002563C4, (uint64_t)(&v212 - 4)));
    sub_100250B54();
    v74 = *(_QWORD *)&v258;
    v75 = *(_QWORD *)(*(_QWORD *)&v258 + 16);
    if (v67 <= 1.0)
      v76 = 1.0 - v67;
    else
      v76 = 0.0;
    v73.n128_f64[0] = v76 * (double)v75;
    if ((~v73.n128_u64[0] & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      swift_unknownObjectRelease(v74);
      v94 = sub_1001EA240(v74, v74 + 32, (uint64_t)v71, (2 * v50) | 1);
      goto LABEL_35;
    }
    if (v73.n128_f64[0] <= -9.22337204e18)
      goto LABEL_82;
    if (v73.n128_f64[0] >= 9.22337204e18)
      goto LABEL_83;
    v254 = v72;
    v77 = (uint64_t)v73.n128_f64[0];
    v50 = sub_100206860((uint64_t)v73.n128_f64[0], *(_QWORD *)&v258, v73);
    v71 = v78;
    v80 = v79;
    v82 = v81;
    if ((v81 & 1) == 0)
    {
      swift_retain();
      goto LABEL_18;
    }
    v83 = type metadata accessor for __ContiguousArrayStorageBase(0);
    swift_unknownObjectRetain_n(v50, 2);
    swift_retain();
    v84 = (_QWORD *)swift_dynamicCastClass(v50, v83);
    if (!v84)
    {
      swift_unknownObjectRelease(v50);
      v84 = _swiftEmptyArrayStorage;
    }
    v85 = v84[2];
    v86 = swift_release(v84);
    if (__OFSUB__(v82 >> 1, v80))
    {
      __break(1u);
LABEL_88:
      swift_unknownObjectRelease(v86);
LABEL_18:
      v33 = sub_1001EA240(v50, (uint64_t)v71, v80, v82);
      goto LABEL_25;
    }
    v86 = v50;
    if (v85 != (v82 >> 1) - v80)
      goto LABEL_88;
    v33 = (_QWORD *)swift_dynamicCastClass(v50, v83);
    if (!v33)
    {
      swift_unknownObjectRelease(v50);
      v33 = _swiftEmptyArrayStorage;
    }
LABEL_25:
    swift_unknownObjectRelease(v50);
    v87 = v75 - v77;
    if (__OFSUB__(v75, v77))
      goto LABEL_84;
    if ((v87 & 0x8000000000000000) != 0)
      goto LABEL_85;
    v214 = v77;
    v50 = *(_QWORD *)(v74 + 16);
    v88 = v50 >= v87;
    v89 = (uint64_t *)(v50 - v87);
    if (v88)
      v71 = v89;
    else
      v71 = 0;
    v90 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v91 = swift_unknownObjectRetain_n(v74, 2);
    v92 = (_QWORD *)swift_dynamicCastClass(v91, v90);
    if (!v92)
    {
      swift_unknownObjectRelease(v74);
      v92 = _swiftEmptyArrayStorage;
    }
    v93 = v92[2];
    swift_release(v92);
    if (v93 != v50 - (_QWORD)v71)
      goto LABEL_86;
    v94 = (char *)swift_dynamicCastClass(v74, v90);
    if (!v94)
    {
      swift_unknownObjectRelease(v74);
      v94 = (char *)_swiftEmptyArrayStorage;
    }
LABEL_35:
    swift_unknownObjectRelease(v74);
    v95 = dispatch thunk of Series.iloc(index:)(v33);
    v96 = dispatch thunk of Series.iloc(index:)(v33);
    swift_release(v33);
    v97 = dispatch thunk of Series.iloc(index:)(v94);
    v220 = v94;
    v98 = dispatch thunk of Series.iloc(index:)(v94);
    v99 = ((uint64_t (*)(void))dispatch thunk of Series.values.getter)();
    v100 = (char *)v254;
    v101 = sub_100246FBC(v96);
    v102 = type metadata accessor for REMkNNByTitleEmbedding(0);
    v103 = *(unsigned int *)(v102 + 48);
    v104 = *(unsigned __int16 *)(v102 + 52);
    v212 = v102;
    swift_allocObject(v102, v103, v104);
    v105 = REMkNNByTitleEmbedding.init(vectors:labels:)(v99, v101);
    v261 = 1;
    v254 = v97;
    v245 = (char *)v105;
    v106 = (char *)sub_100255AF4(v97);
    v252 = v100;
    v108 = *((_QWORD *)v106 + 2);
    v246 = v98;
    v213 = v96;
    v217 = v95;
    v247 = v106;
    if (v108)
    {
      v109 = v106;
      v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain(v106);
      specialized ContiguousArray.reserveCapacity(_:)(v108);
      type metadata accessor for REMSuggestedList(0);
      v110 = v109 + 40;
      do
      {
        v112 = *(v110 - 1);
        v111 = *v110;
        v113 = swift_bridgeObjectRetain(*v110);
        v114 = REMSuggestedList.__allocating_init(stringLiteral:)(v112, v111, v113);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v114);
        v115 = *(_QWORD *)(*(_QWORD *)&v258 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v115);
        v116 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v114);
        specialized ContiguousArray._endMutation()(v116);
        v110 += 2;
        --v108;
      }
      while (v108);
      v117 = v258;
      v107 = swift_bridgeObjectRelease();
      v98 = v246;
    }
    else
    {
      v117 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    }
    v118 = v248;
    Series.index.getter(v107);
    type metadata accessor for REMSuggestedList(0);
    v258 = COERCE_DOUBLE(((uint64_t (*)(void))static REMSuggestedList.defaultValue.getter)());
    v33 = (_QWORD *)sub_10001A630(&qword_100841CD8);
    swift_allocObject(v33, *((unsigned int *)v33 + 12), *((unsigned __int16 *)v33 + 26));
    v119 = Series.init(_:index:defaultValue:)(*(_QWORD *)&v117, v118, &v258);
    v260 = (char *)v119;
    swift_retain();
    swift_retain();
    MultiClassificationMetric.init<A>(groundTruth:prediction:)(v98, v119);
    v120 = v238;
    v28 = (char *)v235;
    v243(v238, v251, (char *)v235);
    v121 = swift_getKeyPath(&unk_1006B1088);
    v122 = v240;
    PartialOverride.subscript.getter(v121, v28);
    swift_release(v121);
    v22 = v237;
    ((void (*)(char *, char *))v237)(v120, v28);
    v123 = swift_getKeyPath(&unk_1006B1118);
    v124 = v215;
    PartialOverride.subscript.getter(&v258, v123, v215, &protocol witness table for Int);
    swift_release(v123);
    ((void (*)(char *, uint64_t))v239)(v122, v124);
    v125 = v249;
    if (*(uint64_t *)&v258 < 3)
      goto LABEL_44;
    v243(v120, v251, v28);
    v126 = swift_getKeyPath(&unk_1006B1088);
    PartialOverride.subscript.getter(v126, v28);
    swift_release(v126);
    ((void (*)(char *, char *))v22)(v120, v28);
    v44 = (char *)swift_getKeyPath(&unk_1006B1118);
    v127 = v240;
    PartialOverride.subscript.getter(&v258, v44, v124, &protocol witness table for Int);
    swift_release(v44);
    result = ((uint64_t (*)(char *, uint64_t))v239)(v127, v124);
    v128 = *(_QWORD *)&v258 + 1;
    if (__OFADD__(*(_QWORD *)&v258, 1))
      break;
    if (v128 < 3)
      goto LABEL_90;
    if (*(_QWORD *)&v258 == 2)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      v129 = *(double *)&v261;
      v131 = Logger.logObject.getter(v130);
      v132 = static os_log_type_t.default.getter(v131);
      v133 = os_log_type_enabled(v131, v132);
      v134 = v230;
      v135 = v238;
      if (v133)
      {
        v136 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v136 = 134349056;
        v258 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, v259);
        _os_log_impl((void *)&_mh_execute_header, v131, v132, "best k for kNN model is %{public}ld", v136, 0xCu);
        swift_slowDealloc(v136, -1, -1);
      }

      v137 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
      swift_beginAccess(&v261, &v258, 0, 0);
      v138 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v261);
      objc_msgSend(v137, "setBestKForKNN:", v138);

      v139 = v253;
      v140 = MultiClassificationMetric.correctIndices.getter();
      __chkstk_darwin(v140);
      v141 = v242;
      *(&v212 - 2) = v242;
      v142 = v252;
      v143 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_100256408, (uint64_t)(&v212 - 4), v140);
      v144 = swift_bridgeObjectRelease();
      v145 = MultiClassificationMetric.incorrectIndices.getter(v144);
      __chkstk_darwin(v145);
      *(&v212 - 2) = v141;
      *(&v212 - 1) = (uint64_t)&v260;
      v146 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_100256424, (uint64_t)(&v212 - 4), v145);
      v147 = swift_bridgeObjectRelease();
      v148 = v228;
      (*(void (**)(char *, char *, uint64_t, __n128))(v249 + 16))(v228, v139, v250, v147);
      v149 = REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)(v143, v146, v148);
      v150 = v227;
      Date.init()(v149);
      v151 = Date.timeIntervalSince(_:)(v222);
      v152 = ((uint64_t (*)(char *, _QWORD *))v221)(v150, v223);
      v153 = Logger.logObject.getter(v152);
      v154 = static os_log_type_t.default.getter(v153);
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v155 = 134349056;
        v255 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, v256);
        _os_log_impl((void *)&_mh_execute_header, v153, v154, "kNN model training time: %{public}f", v155, 0xCu);
        swift_slowDealloc(v155, -1, -1);
      }

      type metadata accessor for Analytics(0, v156);
      v157 = sub_10001A630((uint64_t *)&unk_10083A260);
      inited = swift_initStackObject(v157, v257);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
      strcpy((char *)(inited + 32), "list_accuracy");
      *(_WORD *)(inited + 46) = -4864;
      MultiClassificationMetric.accuracy.getter(inited);
      *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
      *(_QWORD *)(inited + 56) = 0x616E5F6C65646F6DLL;
      *(_QWORD *)(inited + 64) = 0xEA0000000000656DLL;
      sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      *(_QWORD *)(inited + 72) = NSString.init(stringLiteral:)("kNN", 3, 2);
      v159 = sub_1002AF09C(inited);
      static Analytics.postEvent(_:payload:duration:)(0xD00000000000001ALL, 0x80000001006FDCD0, v159, 0, 1);
      v160 = swift_bridgeObjectRelease();
      v161 = v229;
      v162 = v231;
      (*(void (**)(char *, char *, uint64_t, __n128))(v134 + 16))(v229, v241, v231, v160);
      v163 = v232;
      REMSuggestedAttributesTrainer.Result.Embedding.init(listAccuracy:skippedRemindersCount:trainingSetCount:validationSetCount:trainingDuration:)(v161, 0, v214, *((_QWORD *)v220 + 2), v151);
      v164 = v235;
      v243(v135, v251, (char *)v235);
      v165 = swift_getKeyPath(&unk_1006B0E48);
      PartialOverride.subscript.getter(&v255, v165, v164, &protocol witness table for Bool);
      swift_release(v165);
      ((void (*)(char *, _QWORD *))v237)(v135, v164);
      LODWORD(v161) = LOBYTE(v255);
      sub_1000151B0(0, (unint64_t *)&qword_10083F1E0, REMPaths_ptr);
      v166 = v217;
      if ((_DWORD)v161 == 1)
        static REMPaths.writableURLForMLModel()();
      else
        static REMPaths.temporaryURLForMLModel()();
      v167 = v234;
      v168 = v249;
      v169 = v245;
      if (v142)
      {
        swift_release(v254);
        swift_release(v169);
        swift_release(v246);
        swift_release(v220);
        swift_release(v225);
        swift_release(v166);
        swift_release(v213);
        (*(void (**)(char *, uint64_t))(v226 + 8))(v163, v167);
LABEL_53:
        (*(void (**)(char *, uint64_t))(v134 + 8))(v241, v162);
        (*(void (**)(char *, uint64_t))(v168 + 8))(v253, v250);
LABEL_54:
        swift_release(v262);
        ((void (*)(char *, _QWORD *))v221)(v222, v223);
        return swift_release(v260);
      }
      v170 = *((_QWORD *)v220 + 2);
      v171 = swift_release(v220);
      if (v170)
      {
        v172 = dispatch thunk of Series.values.getter(v171);
        v173 = v225;
        v174 = sub_100246FBC(v225);
        swift_allocObject(v212, *(unsigned int *)(v212 + 48), *(unsigned __int16 *)(v212 + 52));
        v175 = REMkNNByTitleEmbedding.init(vectors:labels:)(v172, v174);
        v176 = v236;
        if ((REMkNNByTitleEmbedding.save(to:with:)(v236, 0, 0) & 1) == 0)
        {
          v206 = (void *)objc_opt_self(REMError);
          v207 = String._bridgeToObjectiveC()();
          objc_msgSend(v206, "internalErrorWithDebugDescription:", v207);

          swift_willThrow(v208);
          swift_release(v246);
          swift_release(v173);
          swift_release(v217);
          swift_release(v213);
          swift_release(v254);
          swift_release(v175);
          swift_release(v169);
          (*(void (**)(char *, uint64_t))(v218 + 8))(v176, v219);
          (*(void (**)(char *, uint64_t))(v226 + 8))(v163, v234);
          (*(void (**)(char *, uint64_t))(v134 + 8))(v241, v162);
          (*(void (**)(char *, uint64_t))(v249 + 8))(v253, v250);
          goto LABEL_54;
        }
        swift_release(v246);
        v177 = v173;
        v178 = v217;
        v166 = v213;
        v179 = v254;
        v168 = v249;
      }
      else
      {
        v205 = v236;
        if ((REMkNNByTitleEmbedding.save(to:with:)(v236, 0, 0) & 1) == 0)
        {
          v209 = (void *)objc_opt_self(REMError);
          v210 = String._bridgeToObjectiveC()();
          objc_msgSend(v209, "internalErrorWithDebugDescription:", v210);

          swift_willThrow(v211);
          swift_release(v246);
          swift_release(v225);
          swift_release(v166);
          swift_release(v213);
          swift_release(v254);
          swift_release(v169);
          (*(void (**)(char *, uint64_t))(v218 + 8))(v205, v219);
          (*(void (**)(char *, uint64_t))(v226 + 8))(v163, v234);
          goto LABEL_53;
        }
        v175 = v254;
        v178 = v225;
        v179 = v213;
        v177 = v246;
      }
      swift_release(v177);
      swift_release(v178);
      swift_release(v166);
      swift_release(v179);
      swift_release(v175);
      swift_release(v245);
      (*(void (**)(char *, uint64_t))(v218 + 8))(v236, v219);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v241, v162);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v253, v250);
      swift_release(v262);
      ((void (*)(char *, _QWORD *))v221)(v222, v223);
      (*(void (**)(uint64_t, char *, uint64_t))(v226 + 32))(v216, v163, v234);
      return swift_release(v260);
    }
    v180 = *(_QWORD *)&v258 - 2;
    if ((unint64_t)(*(_QWORD *)&v258 - 2) >= 0xFFFFFFFFFFFFFFFDLL)
      v180 = -3;
    v181 = (char *)(v180 + 3);
    v182 = 3;
    v240 = (char *)(*(_QWORD *)&v258 + 1);
    v239 = v181;
    while ((char *)v182 != v181)
    {
      if ((v182 & 1) != 0)
      {
        __chkstk_darwin(result);
        *(&v212 - 2) = (uint64_t)v245;
        *(&v212 - 1) = v183;
        v184 = v252;
        v185 = sub_100246D70((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100256440);
        v252 = v184;
        v187 = v185[2];
        if (v187)
        {
          v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
          specialized ContiguousArray.reserveCapacity(_:)(v187);
          v188 = v185 + 5;
          do
          {
            v190 = *(v188 - 1);
            v189 = *v188;
            v191 = swift_bridgeObjectRetain(*v188);
            v192 = REMSuggestedList.__allocating_init(stringLiteral:)(v190, v189, v191);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v192);
            v193 = *(_QWORD *)(*(_QWORD *)&v258 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v193);
            v194 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v193, v192);
            specialized ContiguousArray._endMutation()(v194);
            v188 += 2;
            --v187;
          }
          while (v187);
          v195 = v258;
          v125 = v249;
        }
        else
        {
          v195 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        }
        v196 = v248;
        v197 = Series.index.getter(v186);
        v258 = COERCE_DOUBLE(static REMSuggestedList.defaultValue.getter(v197));
        swift_allocObject(v33, *((unsigned int *)v33 + 12), *((unsigned __int16 *)v33 + 26));
        v28 = (char *)Series.init(_:index:defaultValue:)(*(_QWORD *)&v195, v196, &v258);
        v198 = v246;
        swift_retain();
        swift_retain();
        v22 = v244;
        v199 = MultiClassificationMetric.init<A>(groundTruth:prediction:)(v198, v28);
        v44 = v253;
        v200 = MultiClassificationMetric.accuracy.getter(v199);
        v202 = MultiClassificationMetric.accuracy.getter(v201);
        v203 = *(void (**)(char *, uint64_t))(v125 + 8);
        if (v200 >= v202)
        {
          v203((char *)v22, v250);
          swift_bridgeObjectRelease();
          result = swift_release(v28);
        }
        else
        {
          v204 = v250;
          v203(v44, v250);
          swift_bridgeObjectRelease();
          v261 = v182;
          swift_release(v260);
          v260 = v28;
          result = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v125 + 32))(v44, v22, v204);
          v247 = (char *)v185;
        }
        v128 = (uint64_t)v240;
        v181 = v239;
      }
      if (++v182 == v128)
        goto LABEL_44;
    }
    __break(1u);
LABEL_80:
    swift_once(&qword_100837050, sub_1002479DC);
  }
  __break(1u);
LABEL_90:
  __break(1u);
  return result;
}

uint64_t sub_10024D4CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X4>, _QWORD *a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  char v33;
  uint64_t v34;

  v29 = a2;
  v30 = a1;
  v7 = *a3;
  v27 = a4;
  v28 = v7;
  v8 = sub_10001A630(&qword_100841C78);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(sub_10001A630(&qword_100841C20) + 48);
  v26 = a5;
  v13 = (uint64_t)a5 + v12;
  v14 = type metadata accessor for REMSuggestedAttributesTrainer(0);
  v15 = dispatch thunk of Series.values.getter(v14);
  KeyPath = swift_getKeyPath(&unk_1006B0ED8);
  v17 = sub_10001A630(&qword_100841C80);
  PartialOverride.subscript.getter(KeyPath, v17);
  swift_release(KeyPath);
  v18 = swift_getKeyPath(&unk_1006B0F08);
  PartialOverride.subscript.getter(&v32, v18, v8, &protocol witness table for Int);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v32;
  v20 = v33;
  v21 = *(_QWORD *)(v29 + *(int *)(type metadata accessor for TrainingContext(0) + 28));
  v31[3] = v28;
  v31[4] = &protocol witness table for REMFilteredTitleEmbedding;
  v31[0] = a3;
  swift_retain();
  v22 = v21;
  v23 = v34;
  v24 = sub_10024D6A8(v13, v15, v30, v19, v20, v22, (void (*)(_QWORD, _QWORD))v31, 0, 0);
  swift_bridgeObjectRelease();
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
  if (v23)
    *v27 = v23;
  else
    *v26 = v24;
  return result;
}

uint64_t sub_10024D6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void (*a7)(_QWORD, _QWORD), uint64_t (*a8)(char *, unint64_t, uint64_t), uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char *v55;
  char *v56;
  double v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  __n128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  __n128 v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  double v118;
  void (*v119)(char *, uint64_t);
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  void (*v143)(_QWORD, _QWORD);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t (*v149)(char *, unint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[3];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v143 = a7;
  v149 = a8;
  v150 = a2;
  v138 = a1;
  v139 = a4;
  v142 = a3;
  v145 = a9;
  v140 = type metadata accessor for KMeansAutoTuner.KMeanTuningHistory(0);
  v130 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v132 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v131 = (char *)&v126 - v13;
  v15 = __chkstk_darwin(v14);
  v129 = (char *)&v126 - v16;
  v134 = type metadata accessor for RDIntentClusterModel.TuningSnapshot(0, v15);
  v133 = *(_QWORD *)(v134 - 8);
  v17 = __chkstk_darwin(v134);
  v141 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for KMeans.TrainingMetrics(0, v17);
  v155 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v20 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v126 - v22;
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v126 - v26;
  v137 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord(0, v25);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v29 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v126 - v32;
  v128 = type metadata accessor for RDIntentClusterModel.ModelSnapshot(0, v31);
  v34 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v36 = (char *)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Date(0);
  v146 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v135 = (char *)&v126 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v147 = (char *)&v126 - v39;
  Date.init()(v40);
  if ((a5 & 1) != 0)
  {
    v64 = v142;
    v63 = v143;
    v65 = v144;
    v66 = v150;
    v127 = v29;
    if ((unint64_t)v150 >> 62)
    {
      if (v150 < 0)
        v125 = v150;
      else
        v125 = v150 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v150);
      v67 = _CocoaArrayWrapper.endIndex.getter(v125);
      v41 = swift_bridgeObjectRelease();
    }
    else
    {
      v67 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v67 >= 10)
      v68 = 10;
    else
      v68 = v67;
    type metadata accessor for RDIntentClusterModel(0, v41);
    v153 = type metadata accessor for MersenneTwister(0);
    v154 = sub_10009FC50(&qword_100841BF0, (uint64_t (*)(uint64_t))&type metadata accessor for MersenneTwister, (uint64_t)&protocol conformance descriptor for MersenneTwister);
    v152[0] = a6;
    swift_retain();
    v69 = v141;
    v70 = static RDIntentClusterModel.modelByTuning(_:writeTo:minK:maxK:maxIter:embedding:randomGenerator:filename:)(v141, v66, v64, 3, v68, 100, v63, v152, v149, v145);
    if (!v65)
    {
      v142 = v68;
      v144 = v70;
      v145 = 0;
      v72 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v152);
      v139 = RDIntentClusterModel.TuningSnapshot.bestK.getter(v72);
      v128 = RDIntentClusterModel.TuningSnapshot.intentionalWords.getter();
      v73 = v129;
      v74 = ((uint64_t (*)(void))RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter)();
      v75 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter(v74);
      v76 = *(void (**)(char *, uint64_t))(v130 + 8);
      v76(v73, v140);
      v77 = *(_QWORD *)(v75 + 16);
      v143 = (void (*)(_QWORD, _QWORD))v76;
      if (v77)
      {
        v152[0] = _swiftEmptyArrayStorage;
        sub_1001C1F04(0, v77, 0);
        v78 = *(unsigned __int8 *)(v155 + 80);
        v149 = (uint64_t (*)(char *, unint64_t, uint64_t))v75;
        v79 = v75 + ((v78 + 32) & ~v78);
        v150 = *(_QWORD *)(v155 + 72);
        v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v155 + 16);
        do
        {
          v81 = v151;
          v82 = v80(v27, v79, v151);
          v83 = KMeans.TrainingMetrics.clusterVariances.getter(v82);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v27, v81);
          v84 = (_QWORD *)v152[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v152[0]) & 1) == 0)
          {
            sub_1001C1F04(0, v84[2] + 1, 1);
            v84 = (_QWORD *)v152[0];
          }
          v86 = v84[2];
          v85 = v84[3];
          if (v86 >= v85 >> 1)
          {
            sub_1001C1F04(v85 > 1, v86 + 1, 1);
            v84 = (_QWORD *)v152[0];
          }
          v84[2] = v86 + 1;
          v84[v86 + 4] = v83;
          v79 += v150;
          --v77;
        }
        while (v77);
        v87 = swift_bridgeObjectRelease();
        v69 = v141;
        v76 = (void (*)(char *, uint64_t))v143;
      }
      else
      {
        v87 = swift_bridgeObjectRelease();
        v84 = _swiftEmptyArrayStorage;
      }
      v88 = v131;
      v89 = RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter(v87);
      v90 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter(v89);
      v76(v88, v140);
      v91 = *(_QWORD *)(v90 + 16);
      if (v91)
      {
        v152[0] = _swiftEmptyArrayStorage;
        sub_1001C1ED8(0, v91, 0);
        v92 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
        v131 = (char *)v90;
        v93 = v90 + v92;
        v94 = *(_QWORD *)(v155 + 72);
        v149 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v155 + 16);
        v150 = v94;
        do
        {
          v95 = v151;
          v96 = v149(v27, v93, v151);
          v97 = KMeans.TrainingMetrics.clusterSizes.getter(v96);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v27, v95);
          v98 = (_QWORD *)v152[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v152[0]) & 1) == 0)
          {
            sub_1001C1ED8(0, v98[2] + 1, 1);
            v98 = (_QWORD *)v152[0];
          }
          v100 = v98[2];
          v99 = v98[3];
          if (v100 >= v99 >> 1)
          {
            sub_1001C1ED8(v99 > 1, v100 + 1, 1);
            v98 = (_QWORD *)v152[0];
          }
          v98[2] = v100 + 1;
          v98[v100 + 4] = v97;
          v93 += v150;
          --v91;
        }
        while (v91);
        v101 = swift_bridgeObjectRelease();
        v69 = v141;
        v76 = (void (*)(char *, uint64_t))v143;
      }
      else
      {
        v101 = swift_bridgeObjectRelease();
        v98 = _swiftEmptyArrayStorage;
      }
      v102 = v132;
      v103 = RDIntentClusterModel.TuningSnapshot.kmeansTuningHistory.getter(v101);
      v104 = KMeansAutoTuner.KMeanTuningHistory.modelMetricHistory.getter(v103);
      v76(v102, v140);
      v105 = *(_QWORD *)(v104 + 16);
      if (v105)
      {
        v152[0] = _swiftEmptyArrayStorage;
        sub_1001C1EBC(0, v105, 0);
        v106 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
        v143 = (void (*)(_QWORD, _QWORD))v104;
        v107 = v104 + v106;
        v108 = *(_QWORD *)(v155 + 72);
        v149 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v155 + 16);
        v150 = v108;
        do
        {
          v109 = v151;
          v110 = v149(v27, v107, v151);
          v111 = KMeans.TrainingMetrics.mse.getter(v110);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v27, v109);
          v112 = (_QWORD *)v152[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v152[0]) & 1) == 0)
          {
            sub_1001C1EBC(0, v112[2] + 1, 1);
            v112 = (_QWORD *)v152[0];
          }
          v114 = v112[2];
          v113 = v112[3];
          if (v114 >= v113 >> 1)
          {
            sub_1001C1EBC(v113 > 1, v114 + 1, 1);
            v112 = (_QWORD *)v152[0];
          }
          v112[2] = v114 + 1;
          *(double *)&v112[v114 + 4] = v111;
          v107 += v150;
          --v105;
        }
        while (v105);
        swift_bridgeObjectRelease();
        v69 = v141;
      }
      else
      {
        swift_bridgeObjectRelease();
        v112 = _swiftEmptyArrayStorage;
      }
      v116 = v135;
      Date.init()(v115);
      v117 = v147;
      v118 = Date.timeIntervalSince(_:)(v147);
      v119 = *(void (**)(char *, uint64_t))(v146 + 8);
      v120 = v116;
      v121 = v148;
      v119(v120, v148);
      v122 = v127;
      REMSuggestedAttributesTrainer.Result.IntentionalWordTuned.init(bestK:bestClusterLabels:minK:maxK:clusterVariances:clusterSizes:mse:trainingDuration:)(v139, v128, 3, v142, v84, v98, v112, v118);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v69, v134);
      v119(v117, v121);
      v123 = v136;
      v124 = v137;
      (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v122, enum case for REMSuggestedAttributesTrainer.Result.IntentionalWord.fromTuning(_:), v137);
      (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v138, v122, v124);
      return v144;
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v148);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v152);
  }
  type metadata accessor for RDIntentClusterModel(0, v41);
  v153 = type metadata accessor for MersenneTwister(0);
  v154 = sub_10009FC50(&qword_100841BF0, (uint64_t (*)(uint64_t))&type metadata accessor for MersenneTwister, (uint64_t)&protocol conformance descriptor for MersenneTwister);
  v152[0] = a6;
  swift_retain();
  v42 = v144;
  v43 = static RDIntentClusterModel.modelByTraining(_:writeTo:k:embedding:randomGenerator:filename:)(v36, v150, v142, v139, v143, v152, v149, v145);
  if (v42)
    goto LABEL_10;
  v144 = v43;
  v44 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v152);
  v145 = 0;
  v150 = RDIntentClusterModel.ModelSnapshot.intentionalWords.getter(v44);
  v45 = ((uint64_t (*)(void))RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter)();
  v149 = (uint64_t (*)(char *, unint64_t, uint64_t))KMeans.TrainingMetrics.clusterVariances.getter(v45);
  v46 = *(uint64_t (**)(char *, uint64_t))(v155 + 8);
  v47 = v151;
  v48 = v46(v27, v151);
  v49 = RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter(v48);
  v50 = KMeans.TrainingMetrics.clusterSizes.getter(v49);
  v51 = v46(v23, v47);
  v52 = RDIntentClusterModel.ModelSnapshot.kmeansMetrics.getter(v51);
  v53 = KMeans.TrainingMetrics.mse.getter(v52);
  v54 = v46(v20, v47);
  v55 = v135;
  Date.init()(v54);
  v56 = v147;
  v57 = Date.timeIntervalSince(_:)(v147);
  v58 = *(void (**)(char *, uint64_t))(v146 + 8);
  v59 = v55;
  v60 = v148;
  v58(v59, v148);
  REMSuggestedAttributesTrainer.Result.IntentionalWordPrescribed.init(clusterLabels:clusterVariances:clusterSizes:mse:trainingDuration:)(v150, v149, v50, v53, v57);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v128);
  v58(v56, v60);
  v61 = v136;
  v62 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v33, enum case for REMSuggestedAttributesTrainer.Result.IntentionalWord.prescribed(_:), v137);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v138, v33, v62);
  return v144;
}

void sub_10024E124(_QWORD *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, _QWORD *, uint64_t, __n128);
  uint64_t KeyPath;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  void (*v76)(char *, uint64_t);
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  void (*v87)(uint64_t, _QWORD *);
  void (*v88)(char *, _QWORD *, uint64_t);
  char *v89;
  _QWORD *v90;
  void (*v91)(char *, _QWORD *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t *v99;
  unint64_t *v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  void (*v108)(char *, _QWORD *, uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, _QWORD *);
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  void (*v136)(char *, _QWORD *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t inited;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  Class isa;
  double v159;
  char *v160;
  _QWORD *v161;
  void (*v162)(char *, _QWORD *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  Class v177;
  uint64_t v178;
  __n128 v179;
  void (*v180)(char *, uint64_t);
  unsigned int v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  __n128 v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  unint64_t v201;
  _QWORD *v202;
  void (*v203)(char *, uint64_t);
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  char isUniquelyReferenced_nonNull_native;
  void (*v214)(char *, uint64_t);
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  _QWORD *v238;
  __n128 v239;
  uint64_t v240;
  _QWORD *v241;
  __n128 v242;
  char *v243;
  char *v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  __n128 v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _QWORD *v283;
  __n128 v284;
  uint64_t v285;
  _QWORD *v286;
  __n128 v287;
  char *v288;
  unint64_t v289;
  char *v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  __n128 v313;
  char *v314;
  __n128 v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  __n128 v325;
  uint64_t v326;
  _QWORD *v327;
  __n128 v328;
  char *v329;
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  NSNumber v333;
  NSNumber v334;
  unint64_t v335;
  __n128 v336;
  void (*v337)(char *, char *, uint64_t, __n128);
  char *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  double v347;
  char *v348;
  uint64_t v349;
  void (*v350)(char *, uint64_t);
  void (*v351)(char *, uint64_t);
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t *v357;
  void (*v358)(char *, _QWORD *, uint64_t);
  char *v359;
  char *v360;
  char *v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  char *v388;
  uint64_t v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  char *v401;
  __int128 v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t v405;
  void (*v406)(char *, uint64_t);
  _QWORD *v407;
  _QWORD *v408;
  unint64_t v409[3];
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char v418[112];

  v377 = a4;
  v404 = a3;
  v395 = a2;
  v372 = a5;
  v6 = type metadata accessor for REMSuggestedLocation.LocationValue(0);
  v364 = *(_QWORD *)(v6 - 8);
  v365 = v6;
  v7 = __chkstk_darwin(v6);
  v366 = (char *)&v356 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v373 = type metadata accessor for REMSuggestedAttributesAccuracy(0, v7);
  v379 = *(_QWORD *)(v373 - 8);
  __chkstk_darwin(v373);
  v371 = (char *)&v356 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v370 = (char *)&v356 - v11;
  __chkstk_darwin(v12);
  v369 = (char *)&v356 - v13;
  __chkstk_darwin(v14);
  v381 = (char *)&v356 - v15;
  __chkstk_darwin(v16);
  v383 = (char *)&v356 - v17;
  v19 = __chkstk_darwin(v18);
  v385 = (char *)&v356 - v20;
  v389 = type metadata accessor for MultiClassificationMetric(0, v19);
  v380 = *(_QWORD *)(v389 - 8);
  __chkstk_darwin(v389);
  v367 = (char *)&v356 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v382 = (char *)&v356 - v23;
  __chkstk_darwin(v24);
  v388 = (char *)&v356 - v25;
  __chkstk_darwin(v26);
  v384 = (char *)&v356 - v27;
  v28 = sub_10001A630((uint64_t *)&unk_100840780);
  v29 = *(_QWORD **)(v28 - 8);
  v375 = v28;
  v376 = v29;
  __chkstk_darwin(v28);
  v374 = (char *)&v356 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A630(&qword_100841CC8);
  v362 = *(_QWORD *)(v31 - 8);
  v363 = (_QWORD *)v31;
  __chkstk_darwin(v31);
  v361 = (char *)&v356 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v400 = type metadata accessor for URL(0);
  v396 = *(_QWORD *)(v400 - 8);
  __chkstk_darwin(v400);
  v405 = (uint64_t)&v356 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v399 = (char *)&v356 - v35;
  v36 = type metadata accessor for Date(0);
  v397 = *(_QWORD *)(v36 - 8);
  v398 = v36;
  __chkstk_darwin(v36);
  v368 = (char *)&v356 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v401 = (char *)&v356 - v39;
  v40 = (_QWORD *)sub_10001A630(&qword_100841CD0);
  v407 = (_QWORD *)*(v40 - 1);
  __chkstk_darwin(v40);
  v391 = (char *)&v356 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v387 = (char *)&v356 - v43;
  __chkstk_darwin(v44);
  v403 = (uint64_t *)((char *)&v356 - v45);
  __chkstk_darwin(v46);
  *(_QWORD *)&v402 = (char *)&v356 - v47;
  __chkstk_darwin(v48);
  v50 = (char *)&v356 - v49;
  v51 = sub_10001A630(&qword_100841C80);
  v52 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v390 = (char *)&v356 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v386 = (char *)&v356 - v55;
  __chkstk_darwin(v56);
  v394 = (char *)&v356 - v57;
  __chkstk_darwin(v58);
  v393 = (char *)&v356 - v59;
  v61 = __chkstk_darwin(v60);
  v63 = (char *)&v356 - v62;
  v64 = *(void (**)(char *, _QWORD *, uint64_t, __n128))(v52 + 16);
  v408 = a1;
  v64((char *)&v356 - v62, a1, v51, v61);
  KeyPath = swift_getKeyPath(&unk_1006B0F38);
  PartialOverride.subscript.getter(KeyPath, v51);
  swift_release(KeyPath);
  v66 = *(void (**)(char *, uint64_t))(v52 + 8);
  v67 = v63;
  v66(v63, v51);
  v68 = swift_getKeyPath(&unk_1006B0F68);
  PartialOverride.subscript.getter(v409, v68, v40, &protocol witness table for Bool);
  swift_release(v68);
  v69 = (_QWORD *)v407[1];
  v392 = v50;
  v407 = v40;
  v70 = ((uint64_t (*)(char *, _QWORD *))v69)(v50, v40);
  if (LOBYTE(v409[0]) != 1)
  {
    v77 = sub_1002557D8();
    v78 = swift_allocError(&type metadata for ModelSkippedError, v77, 0, 0);
    swift_willThrow(v78);
    return;
  }
  v378 = v69;
  Date.init()(v70);
  ((void (*)(char *, _QWORD *, uint64_t))v64)(v67, v408, v51);
  v71 = swift_getKeyPath(&unk_1006B0E48);
  PartialOverride.subscript.getter(v409, v71, v51, &protocol witness table for Bool);
  swift_release(v71);
  v359 = v67;
  v66(v67, v51);
  v72 = LOBYTE(v409[0]);
  sub_1000151B0(0, (unint64_t *)&qword_10083F1E0, REMPaths_ptr);
  v73 = v51;
  v74 = v66;
  v75 = v399;
  v76 = v406;
  if (v72 == 1)
    static REMPaths.writableURLForMLModel()();
  else
    static REMPaths.temporaryURLForMLModel()();
  if (v76)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v397 + 8))(v401, v398, v400);
    return;
  }
  v360 = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v396 + 16))(v405, v75, v400);
  v79 = v393;
  v80 = v408;
  ((void (*)(char *, _QWORD *, uint64_t))v64)(v393, v408, v73);
  v81 = v66;
  v82 = swift_getKeyPath(&unk_1006B0F38);
  v83 = v402;
  PartialOverride.subscript.getter(v82, v73);
  swift_release(v82);
  v74(v79, v73);
  v84 = swift_getKeyPath(&unk_1006B0F98);
  v85 = v407;
  PartialOverride.subscript.getter(v409, v84, v407, &protocol witness table for Double);
  swift_release(v84);
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))v64;
  v87 = (void (*)(uint64_t, _QWORD *))v378;
  ((void (*)(uint64_t, _QWORD *))v378)(v83, v85);
  v88 = v86;
  *(_QWORD *)&v402 = v409[0];
  v89 = v394;
  v90 = v80;
  v91 = (void (*)(char *, _QWORD *, uint64_t))v88;
  v88(v394, v90, v73);
  v92 = swift_getKeyPath(&unk_1006B0F38);
  v93 = (uint64_t)v403;
  PartialOverride.subscript.getter(v92, v73);
  swift_release(v92);
  v406 = v81;
  v81(v89, v73);
  v94 = v73;
  v95 = swift_getKeyPath(&unk_1006B0FC8);
  PartialOverride.subscript.getter(&v413, v95, v85, &protocol witness table for Double);
  swift_release(v95);
  v87(v93, v85);
  v96 = v413;
  v97 = type metadata accessor for RDCoreBehaviorModel(0);
  swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
  v98 = v360;
  v99 = sub_10042C018(v405, v402, 0, v96, 0);
  v360 = v98;
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v396 + 8))(v399, v400);
    (*(void (**)(char *, uint64_t))(v397 + 8))(v401, v398);
    return;
  }
  v100 = v99;
  v101 = v359;
  v102 = v408;
  v358 = v91;
  v91(v359, v408, v94);
  v103 = swift_getKeyPath(&unk_1006B0F38);
  v104 = v392;
  PartialOverride.subscript.getter(v103, v94);
  swift_release(v103);
  v405 = v94;
  v406(v101, v94);
  v105 = swift_getKeyPath(&unk_1006B0FF8);
  PartialOverride.subscript.getter(v409, v105, v85, &protocol witness table for UInt);
  swift_release(v105);
  ((void (*)(char *, _QWORD *))v378)(v104, v85);
  v106 = v102;
  v107 = v85;
  if (v409[0])
    sub_100428D2C(v409[0]);
  v357 = v100;
  v108 = v358;
  v109 = v359;
  v110 = v405;
  v358(v359, v106, v405);
  v111 = swift_getKeyPath(&unk_1006B0F38);
  v112 = v392;
  PartialOverride.subscript.getter(v111, v110);
  swift_release(v111);
  v406(v109, v110);
  v113 = swift_getKeyPath(&unk_1006B1028);
  PartialOverride.subscript.getter(v409, v113, v107, &protocol witness table for UInt);
  swift_release(v113);
  v114 = (void (*)(char *, _QWORD *))v378;
  ((void (*)(char *, _QWORD *))v378)(v112, v107);
  v115 = v409[0];
  v108(v109, v408, v110);
  v116 = swift_getKeyPath(&unk_1006B0F38);
  PartialOverride.subscript.getter(v116, v110);
  swift_release(v116);
  v406(v109, v110);
  v117 = swift_getKeyPath(&unk_1006B1058);
  PartialOverride.subscript.getter(v409, v117, v107, &protocol witness table for UInt);
  swift_release(v117);
  v114(v112, v107);
  v118 = v409[0];
  v403 = (_QWORD *)v115;
  v119 = __CFADD__(v115, v409[0]);
  *(_QWORD *)&v402 = v115 + v409[0];
  v120 = v404;
  if (v119)
    goto LABEL_105;
  v121 = v386;
  v358(v386, v408, v110);
  v122 = swift_getKeyPath(&unk_1006B0F38);
  v123 = v387;
  PartialOverride.subscript.getter(v122, v110);
  swift_release(v122);
  v406(v121, v110);
  v124 = swift_getKeyPath(&unk_1006B0FC8);
  PartialOverride.subscript.getter(v409, v124, v107, &protocol witness table for Double);
  swift_release(v124);
  v114(v123, v107);
  v125 = v357;
  v126 = v360;
  sub_100428EDC(v395, (uint64_t)v120, (void *)v402, 0, *(double *)v409);
  v132 = v400;
  v131 = v401;
  v133 = v396;
  if (v126)
  {
    swift_release(v125);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v399, v132);
    (*(void (**)(char *, uint64_t, uint64_t))(v397 + 8))(v131, v398, v134);
    return;
  }
  if (v118 <= 2 && v129 == 1)
  {
    *(_QWORD *)&v130 = 134217984;
    v402 = v130;
    while (1)
    {
      v135 = (char *)v403 + v118 + 1;
      if (__CFADD__(v403, v118 + 1))
        goto LABEL_104;
      v136 = v358;
      if (qword_100837050 != -1)
        swift_once(&qword_100837050, sub_1002479DC);
      v137 = type metadata accessor for Logger(0);
      v138 = sub_10001AAA8(v137, (uint64_t)qword_100841B10);
      v139 = Logger.logObject.getter(v138);
      v140 = static os_log_type_t.default.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        v141 = swift_slowAlloc(12, -1);
        *(_DWORD *)v141 = v402;
        *(_QWORD *)(v141 + 4) = v135;
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "CoreBehavior terminated early. Retrying with support = %lu", (uint8_t *)v141, 0xCu);
        v142 = v141;
        v136 = v358;
        swift_slowDealloc(v142, -1, -1);
      }

      v143 = v390;
      v144 = v405;
      v136(v390, v408, v405);
      v145 = swift_getKeyPath(&unk_1006B0F38);
      v146 = v391;
      PartialOverride.subscript.getter(v145, v144);
      swift_release(v145);
      v406(v143, v144);
      v147 = swift_getKeyPath(&unk_1006B0FC8);
      v148 = v407;
      PartialOverride.subscript.getter(v409, v147, v407, &protocol witness table for Double);
      swift_release(v147);
      ((void (*)(char *, _QWORD *))v378)(v146, v148);
      sub_100428EDC(v395, (uint64_t)v404, v135, 0, *(double *)v409);
      if (v118 != 2)
      {
        ++v118;
        if (v149 == 1)
          continue;
      }
      break;
    }
  }
  v360 = 0;
  v356 = v128;
  v386 = v127;
  *(_QWORD *)&v402 = objc_opt_self(REMUserDefaults);
  v394 = (char *)objc_msgSend((id)v402, "daemonUserDefaults");
  v150 = sub_10001A630(&qword_10084EF10);
  inited = swift_initStackObject(v150, v418);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  *(_QWORD *)(inited + 32) = 0x74726F70707573;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = UInt._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x656D7473756A6461;
  *(_QWORD *)(inited + 64) = 0xEA0000000000746ELL;
  *(NSNumber *)(inited + 72) = UInt._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x6E656469666E6F63;
  *(_QWORD *)(inited + 88) = 0xEA00000000006563;
  v152 = v359;
  v153 = v405;
  v358(v359, v408, v405);
  v154 = swift_getKeyPath(&unk_1006B0F38);
  v155 = v392;
  PartialOverride.subscript.getter(v154, v153);
  swift_release(v154);
  v406(v152, v153);
  v156 = swift_getKeyPath(&unk_1006B0FC8);
  v157 = v407;
  PartialOverride.subscript.getter(v409, v156, v407, &protocol witness table for Double);
  swift_release(v156);
  ((void (*)(char *, _QWORD *))v378)(v155, v157);
  *(NSNumber *)(inited + 96) = Double._bridgeToObjectiveC()();
  sub_1002B083C(inited);
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v159 = swift_bridgeObjectRelease().n128_u64[0];
  v160 = v394;
  objc_msgSend(v394, "setCoreBehaviorTrainingParameters:", isa, v159);

  v161 = v408;
  v162 = v358;
  v358(v152, v408, v153);
  v163 = swift_getKeyPath(&unk_1006B0F38);
  PartialOverride.subscript.getter(v163, v153);
  swift_release(v163);
  v406(v152, v153);
  v164 = swift_getKeyPath(&unk_1006B1028);
  PartialOverride.subscript.getter(v409, v164, v157, &protocol witness table for UInt);
  swift_release(v164);
  v165 = ((uint64_t (*)(char *, _QWORD *))v378)(v155, v157);
  v166 = (double)v409[0];
  v167 = v166 / (double)REMSuggestedAttributeInputDataFrame.size.getter(v165);
  v162(v152, v161, v153);
  v168 = swift_getKeyPath(&unk_1006B0F38);
  PartialOverride.subscript.getter(v168, v153);
  swift_release(v168);
  v406(v152, v153);
  v169 = swift_getKeyPath(&unk_1006B0FC8);
  PartialOverride.subscript.getter(v409, v169, v157, &protocol witness table for Double);
  swift_release(v169);
  ((void (*)(char *, _QWORD *))v378)(v155, v157);
  v170 = v409[0];
  v171 = objc_msgSend((id)v402, "daemonUserDefaults");
  v172 = sub_10001A630(&qword_10083ADC0);
  v173 = swift_initStackObject(v172, &v417);
  *(_OWORD *)(v173 + 16) = xmmword_1006A3C00;
  strcpy((char *)v409, "coreBehavior");
  BYTE5(v409[1]) = 0;
  HIWORD(v409[1]) = -5120;
  AnyHashable.init<A>(_:)((_QWORD *)(v173 + 32), v409, &type metadata for String, &protocol witness table for String);
  v174 = sub_10001A630(&qword_10083F438);
  v175 = swift_initStackObject(v174, &v416);
  *(_OWORD *)(v175 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v175 + 32) = 0x65766974616C6572;
  *(_QWORD *)(v175 + 40) = 0xEF74726F70707553;
  *(double *)(v175 + 48) = v167;
  *(_QWORD *)(v175 + 56) = 0x6E656469666E6F63;
  *(_QWORD *)(v175 + 64) = 0xEA00000000006563;
  *(_QWORD *)(v175 + 72) = v170;
  v176 = sub_1002AF0A8(v175);
  *(_QWORD *)(v173 + 96) = sub_10001A630(&qword_10083F1F0);
  *(_QWORD *)(v173 + 72) = v176;
  sub_1002B007C(v173);
  v177 = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v171, "setSuggestedAttributesHarvestingOverrides:", v177, swift_bridgeObjectRelease().n128_f64[0]);

  v178 = sub_1000151B0(0, (unint64_t *)&unk_10084A870, BMMiningTask_ptr);
  v180 = _swiftEmptyArrayStorage;
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(v178), "respondsToSelector:", "supportsTaskSpecificEvents"))
  {
    v181 = objc_msgSend((id)objc_opt_self(BMMiningTask), "supportsTaskSpecificEvents");
    v182 = v360;
    v184 = v374;
    v183 = v375;
    if (v181)
    {
      v185 = (uint64_t)v357 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
      v186 = swift_beginAccess((char *)v357 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules, v409, 0, 0);
      v187 = v361;
      v188 = v362;
      v189 = v185;
      v190 = v363;
      (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v362 + 16))(v361, v189, v363, v186);
      v191 = OrderedDictionary.values.getter(v190);
      (*(void (**)(char *, _QWORD *))(v188 + 8))(v187, v190);
      v192 = v377;
      swift_bridgeObjectRetain(v377);
      v378 = sub_100250D7C(v191, v192);
      v360 = v182;
      swift_bridgeObjectRelease();
      v179 = swift_bridgeObjectRelease();
      v193 = (uint64_t)v395;
      v180 = _swiftEmptyArrayStorage;
    }
    else
    {
      v378 = _swiftEmptyArrayStorage;
      v193 = (uint64_t)v395;
    }
    v194 = v376;
  }
  else
  {
    v378 = _swiftEmptyArrayStorage;
    v193 = (uint64_t)v395;
    v183 = v375;
    v194 = v376;
    v184 = v374;
  }
  v195 = v404;
  v196 = REMSuggestedAttributeInputDataFrame.index.getter(v179);
  __chkstk_darwin(v196);
  *(&v356 - 4) = (uint64_t)v357;
  *(&v356 - 3) = v193;
  v354 = v195;
  v197 = v360;
  v198 = sub_100200A9C((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1002560D8);
  v392 = v197;
  ((void (*)(char *, uint64_t))v194[1])(v184, v183);
  v415 = (unint64_t)_swiftEmptyArrayStorage;
  v199 = *(char **)(v198 + 16);
  v393 = (char *)v198;
  v394 = v199;
  if (v199)
  {
    *(_QWORD *)&v402 = v198 + 32;
    swift_bridgeObjectRetain(v198);
    v201 = 0;
    v202 = _swiftEmptyArrayStorage;
    v203 = _swiftEmptyArrayStorage;
    while (v201 < *((_QWORD *)v200 + 2))
    {
      v204 = *(_QWORD *)(v402 + 8 * v201);
      v205 = *(_QWORD *)(v204 + 16);
      if (v205)
      {
        v404 = (_QWORD *)v201;
        v406 = (void (*)(char *, uint64_t))v203;
        swift_bridgeObjectRetain(v204);
        v403 = (_QWORD *)v204;
        v206 = (_BYTE *)(v204 + 80);
        do
        {
          if (!*v206)
          {
            v208 = *((_QWORD *)v206 - 6);
            v209 = (_QWORD *)*((_QWORD *)v206 - 4);
            v210 = *((_QWORD *)v206 - 3);
            v211 = *((_QWORD *)v206 - 2);
            v212 = (_QWORD *)*((_QWORD *)v206 - 1);
            v405 = *((_QWORD *)v206 - 5);
            sub_100256288(v208, v405, (uint64_t)v209, v210, v211, (uint64_t)v212, 0);
            swift_retain();
            swift_bridgeObjectRetain(v211);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v406);
            v407 = v212;
            v408 = v209;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              v214 = v406;
            else
              v214 = sub_1002CA0C8(0, *((_QWORD *)v406 + 2) + 1, 1, v406);
            v216 = v214[2];
            v215 = v214[3];
            if (v216 >= v215 >> 1)
              v214 = sub_1002CA0C8((_QWORD *)(v215 > 1), v216 + 1, 1, (void (*)(char *, uint64_t))v214);
            v214[2] = v216 + 1;
            v406 = (void (*)(char *, uint64_t))v214;
            v214[v216 + 4] = v404;
            v217 = swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v217);
            v219 = *(_QWORD *)((v415 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v218 = *(_QWORD *)((v415 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v219 >= v218 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v218 > 1);
            v220 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v219, v208);
            specialized Array._endMutation()(v220);
            if ((swift_isUniquelyReferenced_nonNull_native(v202) & 1) == 0)
              v202 = sub_1002C8224(0, v202[2] + 1, 1, v202);
            v221 = v405;
            v223 = v202[2];
            v222 = v202[3];
            v224 = v202;
            if (v223 >= v222 >> 1)
              v224 = sub_1002C8224((_QWORD *)(v222 > 1), v223 + 1, 1, v202);
            v224[2] = v223 + 1;
            v202 = v224;
            v207 = &v224[2 * v223];
            v207[4] = v210;
            v207[5] = v211;
            swift_release(v208);
            sub_1002562EC(v208, v221, (uint64_t)v408, v210, v211, (uint64_t)v407, 0);
          }
          v206 += 56;
          --v205;
        }
        while (v205);
        swift_bridgeObjectRelease();
        v203 = v406;
        v200 = v393;
        v201 = (unint64_t)v404;
      }
      if ((char *)++v201 == v394)
      {
        v180 = v203;
        swift_bridgeObjectRelease();
        v225 = (_QWORD *)v415;
        v226 = v202;
        goto LABEL_54;
      }
    }
    __break(1u);
    goto LABEL_102;
  }
  v225 = _swiftEmptyArrayStorage;
  v226 = _swiftEmptyArrayStorage;
LABEL_54:
  sub_10001A630(&qword_100841CD8);
  type metadata accessor for REMSuggestedList(0);
  swift_bridgeObjectRetain(v225);
  swift_bridgeObjectRetain((void (*)(char *, uint64_t))v180);
  v413 = static REMSuggestedList.defaultValue.getter(v227);
  v228 = Series.__allocating_init(_:index:defaultValue:)(v225, (void (*)(char *, uint64_t))v180, &v413);
  v229 = sub_10001A630(&qword_100841CA8);
  v413 = 0;
  v414 = 0xE000000000000000;
  swift_bridgeObjectRetain((void (*)(char *, uint64_t))v180);
  swift_bridgeObjectRetain(v226);
  v376 = v226;
  v406 = (void (*)(char *, uint64_t))v180;
  v387 = (char *)v229;
  v231 = Series.__allocating_init(_:index:defaultValue:)(v230, (void (*)(char *, uint64_t))v180, &v413);
  v232 = (uint64_t)v395;
  v233 = REMSuggestedAttributeInputDataFrame.list.getter(v231);
  swift_retain();
  v234 = v384;
  v235 = MultiClassificationMetric.init<A>(groundTruth:prediction:)(v233, v228);
  v236 = MultiClassificationMetric.correctIndices.getter(v235);
  __chkstk_darwin(v236);
  v355 = (_QWORD *)v231;
  v237 = v392;
  v238 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1002560F8, (uint64_t)(&v356 - 4), v236);
  v239 = swift_bridgeObjectRelease();
  v240 = MultiClassificationMetric.incorrectIndices.getter(v239);
  __chkstk_darwin(v240);
  *(&v356 - 4) = v232;
  *(&v356 - 3) = v228;
  v374 = (char *)v231;
  v375 = v228;
  v354 = (_QWORD *)v231;
  v241 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_100256114, (uint64_t)(&v356 - 6), v240);
  v391 = v237;
  v242 = swift_bridgeObjectRelease();
  v243 = v388;
  v390 = *(char **)(v380 + 16);
  ((void (*)(char *, char *, uint64_t, __n128))v390)(v388, v234, v389, v242);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)(v238, v241, v243);
  v412 = (unint64_t)_swiftEmptyArrayStorage;
  if (v394)
  {
    v392 = v393 + 32;
    swift_bridgeObjectRetain(v393);
    v245 = 0;
    v246 = _swiftEmptyArrayStorage;
    v408 = _swiftEmptyArrayStorage;
    while (v245 < *((_QWORD *)v244 + 2))
    {
      v247 = *(_QWORD *)&v392[8 * v245];
      v248 = *(_QWORD *)(v247 + 16);
      if (v248)
      {
        v403 = (_QWORD *)v245;
        swift_bridgeObjectRetain(v247);
        *(_QWORD *)&v402 = v247;
        v249 = (_BYTE *)(v247 + 80);
        do
        {
          if (*v249 == 2)
          {
            v251 = *((_QWORD *)v249 - 6);
            v252 = (_QWORD *)*((_QWORD *)v249 - 5);
            v253 = *((_QWORD *)v249 - 3);
            v255 = *((_QWORD *)v249 - 2);
            v254 = *((_QWORD *)v249 - 1);
            v404 = (_QWORD *)*((_QWORD *)v249 - 4);
            v405 = v254;
            sub_100256288(v251, (uint64_t)v252, (uint64_t)v404, v253, v255, v254, 2);
            swift_retain();
            swift_bridgeObjectRetain(v255);
            v256 = swift_isUniquelyReferenced_nonNull_native(v408);
            v407 = v252;
            if ((v256 & 1) != 0)
              v257 = v408;
            else
              v257 = sub_1002CA0C8(0, v408[2] + 1, 1, v408);
            v259 = v257[2];
            v258 = v257[3];
            if (v259 >= v258 >> 1)
              v257 = sub_1002CA0C8((_QWORD *)(v258 > 1), v259 + 1, 1, v257);
            v257[2] = v259 + 1;
            v408 = v257;
            v257[v259 + 4] = v403;
            v260 = swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v260);
            v262 = *(_QWORD *)((v412 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v261 = *(_QWORD *)((v412 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v262 >= v261 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v261 > 1);
            v263 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v262, v251);
            specialized Array._endMutation()(v263);
            if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) == 0)
              v246 = sub_1002C8224(0, v246[2] + 1, 1, v246);
            v264 = v404;
            v266 = v246[2];
            v265 = v246[3];
            v267 = v246;
            if (v266 >= v265 >> 1)
              v267 = sub_1002C8224((_QWORD *)(v265 > 1), v266 + 1, 1, v246);
            v267[2] = v266 + 1;
            v246 = v267;
            v250 = &v267[2 * v266];
            v250[4] = v253;
            v250[5] = v255;
            swift_release(v251);
            sub_1002562EC(v251, (uint64_t)v407, (uint64_t)v264, v253, v255, v405, 2);
          }
          v249 += 56;
          --v248;
        }
        while (v248);
        swift_bridgeObjectRelease();
        v244 = v393;
        v245 = (unint64_t)v403;
      }
      if ((char *)++v245 == v394)
      {
        swift_bridgeObjectRelease();
        v268 = (_QWORD *)v412;
        v269 = v246;
        v270 = v408;
        goto LABEL_77;
      }
    }
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    return;
  }
  v268 = _swiftEmptyArrayStorage;
  v269 = _swiftEmptyArrayStorage;
  v270 = _swiftEmptyArrayStorage;
LABEL_77:
  sub_10001A630(&qword_100841CE0);
  v271 = type metadata accessor for REMSuggestedWeekDay(0);
  swift_bridgeObjectRetain(v268);
  v272 = swift_bridgeObjectRetain(v270);
  v273 = static REMSuggestedWeekDay.nilValue.getter(v272);
  swift_allocObject(v271, *(unsigned int *)(v271 + 48), *(unsigned __int16 *)(v271 + 52));
  v413 = REMSuggestedWeekDay.init(_:)(v273);
  v274 = Series.__allocating_init(_:index:defaultValue:)(v268, v270, &v413);
  v413 = 0;
  v414 = 0xE000000000000000;
  swift_bridgeObjectRetain(v270);
  swift_bridgeObjectRetain(v269);
  v363 = v269;
  v408 = v270;
  v276 = Series.__allocating_init(_:index:defaultValue:)(v275, v270, &v413);
  v277 = (uint64_t)v395;
  v278 = REMSuggestedAttributeInputDataFrame.dueDayOfWeek.getter();
  swift_retain();
  v279 = v382;
  v280 = MultiClassificationMetric.init<A>(groundTruth:prediction:)(v278, v274);
  v281 = MultiClassificationMetric.correctIndices.getter(v280);
  __chkstk_darwin(v281);
  v355 = (_QWORD *)v276;
  v282 = v391;
  v283 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_100256160, (uint64_t)(&v356 - 4), v281);
  v284 = swift_bridgeObjectRelease();
  v285 = MultiClassificationMetric.incorrectIndices.getter(v284);
  __chkstk_darwin(v285);
  *(&v356 - 4) = v277;
  *(&v356 - 3) = v274;
  v361 = (char *)v276;
  v362 = v274;
  v354 = (_QWORD *)v276;
  v286 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1002561A0, (uint64_t)(&v356 - 6), v285);
  v360 = v282;
  v287 = swift_bridgeObjectRelease();
  v288 = v388;
  ((void (*)(char *, char *, uint64_t, __n128))v390)(v388, v279, v389, v287);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)(v283, v286, v288);
  v411 = (unint64_t)_swiftEmptyArrayStorage;
  if (v394)
  {
    v289 = 0;
    v290 = v393;
    v391 = v393 + 32;
    v291 = _swiftEmptyArrayStorage;
    v407 = _swiftEmptyArrayStorage;
    while (v289 < *((_QWORD *)v290 + 2))
    {
      v292 = *(_QWORD *)&v391[8 * v289];
      v293 = *(_QWORD *)(v292 + 16);
      if (v293)
      {
        *(_QWORD *)&v402 = v289;
        swift_bridgeObjectRetain(v292);
        v392 = (char *)v292;
        v294 = (_BYTE *)(v292 + 80);
        do
        {
          if (*v294 == 1)
          {
            v297 = *((_QWORD *)v294 - 6);
            v296 = *((_QWORD *)v294 - 5);
            v298 = *((_QWORD *)v294 - 3);
            v300 = *((_QWORD *)v294 - 2);
            v299 = *((_QWORD *)v294 - 1);
            v404 = (_QWORD *)*((_QWORD *)v294 - 4);
            v405 = v296;
            v403 = (_QWORD *)v299;
            sub_100256288(v297, v296, (uint64_t)v404, v298, v300, v299, 1);
            swift_retain();
            swift_bridgeObjectRetain(v300);
            if ((swift_isUniquelyReferenced_nonNull_native(v407) & 1) != 0)
              v301 = v407;
            else
              v301 = sub_1002CA0C8(0, v407[2] + 1, 1, v407);
            v303 = v301[2];
            v302 = v301[3];
            if (v303 >= v302 >> 1)
              v301 = sub_1002CA0C8((_QWORD *)(v302 > 1), v303 + 1, 1, v301);
            v301[2] = v303 + 1;
            v407 = v301;
            v301[v303 + 4] = v402;
            v304 = swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v304);
            v306 = *(_QWORD *)((v411 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v305 = *(_QWORD *)((v411 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v306 >= v305 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v305 > 1);
            v307 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v306, v297);
            specialized Array._endMutation()(v307);
            if ((swift_isUniquelyReferenced_nonNull_native(v291) & 1) == 0)
              v291 = sub_1002C8224(0, v291[2] + 1, 1, v291);
            v309 = v291[2];
            v308 = v291[3];
            v310 = v291;
            if (v309 >= v308 >> 1)
              v310 = sub_1002C8224((_QWORD *)(v308 > 1), v309 + 1, 1, v291);
            v291 = v310;
            v310[2] = v309 + 1;
            v295 = &v310[2 * v309];
            v295[4] = v298;
            v295[5] = v300;
            swift_release(v297);
            sub_1002562EC(v297, v405, (uint64_t)v404, v298, v300, (uint64_t)v403, 1);
          }
          v294 += 56;
          --v293;
        }
        while (v293);
        swift_bridgeObjectRelease();
        v290 = v393;
        v289 = v402;
      }
      if ((char *)++v289 == v394)
      {
        swift_bridgeObjectRelease();
        v311 = (_QWORD *)v411;
        v312 = v407;
        goto LABEL_100;
      }
    }
    goto LABEL_103;
  }
  swift_bridgeObjectRelease();
  v311 = _swiftEmptyArrayStorage;
  v291 = _swiftEmptyArrayStorage;
  v312 = _swiftEmptyArrayStorage;
LABEL_100:
  v403 = v291;
  sub_10001A630(&qword_100841CE8);
  type metadata accessor for REMSuggestedLocation(0, v313);
  v314 = v366;
  (*(void (**)(char *, _QWORD, uint64_t))(v364 + 104))(v366, enum case for REMSuggestedLocation.LocationValue.notAvailable(_:), v365);
  swift_bridgeObjectRetain(v311);
  v315 = swift_bridgeObjectRetain(v312);
  v413 = REMSuggestedLocation.__allocating_init(_:)(v314, v315);
  v316 = Series.__allocating_init(_:index:defaultValue:)(v311, v312, &v413);
  v413 = 0;
  v414 = 0xE000000000000000;
  swift_bridgeObjectRetain(v312);
  swift_bridgeObjectRetain(v291);
  v318 = (_QWORD *)Series.__allocating_init(_:index:defaultValue:)(v317, v312, &v413);
  v319 = (uint64_t)v395;
  v320 = REMSuggestedAttributeInputDataFrame.location.getter();
  swift_retain();
  v321 = v388;
  v405 = v316;
  v322 = MultiClassificationMetric.init<A>(groundTruth:prediction:)(v320, v316);
  v323 = MultiClassificationMetric.correctIndices.getter(v322);
  __chkstk_darwin(v323);
  v355 = v318;
  v407 = v318;
  v324 = v360;
  v404 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_1002561F8, (uint64_t)(&v356 - 4), v323);
  v325 = swift_bridgeObjectRelease();
  v326 = MultiClassificationMetric.incorrectIndices.getter(v325);
  __chkstk_darwin(v326);
  *(&v356 - 4) = v319;
  *(&v356 - 3) = v316;
  v354 = v318;
  v327 = sub_100200848((void (*)(_QWORD *__return_ptr, uint64_t *))sub_100256234, (uint64_t)(&v356 - 6), v326);
  v360 = v324;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v328 = swift_bridgeObjectRelease();
  v329 = v367;
  ((void (*)(char *, char *, uint64_t, __n128))v390)(v367, v321, v389, v328);
  REMSuggestedAttributesAccuracy.init(correctSample:incorrectSample:metrics:)(v404, v327, v329);
  type metadata accessor for Analytics(0, v330);
  v331 = sub_10001A630((uint64_t *)&unk_10083A260);
  v332 = swift_initStackObject(v331, &v410);
  *(_OWORD *)(v332 + 16) = xmmword_1006A5130;
  *(_QWORD *)(v332 + 32) = 0xD000000000000014;
  *(_QWORD *)(v332 + 40) = 0x80000001006FDCF0;
  MultiClassificationMetric.accuracy.getter(v332);
  v333.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v332 + 48) = v333;
  strcpy((char *)(v332 + 56), "list_accuracy");
  *(_WORD *)(v332 + 70) = -4864;
  MultiClassificationMetric.accuracy.getter(v333.super.super.isa);
  v334.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v332 + 72) = v334;
  *(_QWORD *)(v332 + 80) = 0xD000000000000011;
  *(_QWORD *)(v332 + 88) = 0x80000001006FDD10;
  MultiClassificationMetric.accuracy.getter(v334.super.super.isa);
  *(NSNumber *)(v332 + 96) = Double._bridgeToObjectiveC()();
  *(_QWORD *)(v332 + 104) = 0x616E5F6C65646F6DLL;
  *(_QWORD *)(v332 + 112) = 0xEA0000000000656DLL;
  sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
  *(_QWORD *)(v332 + 120) = NSString.init(stringLiteral:)("corebehavior", 12, 2);
  v335 = sub_1002AF09C(v332);
  static Analytics.postEvent(_:payload:duration:)(0xD00000000000001ALL, 0x80000001006FDCD0, v335, 0, 1);
  v336 = swift_bridgeObjectRelease();
  v337 = *(void (**)(char *, char *, uint64_t, __n128))(v379 + 16);
  v338 = v369;
  v339 = v373;
  v337(v369, v385, v373, v336);
  v340 = v370;
  ((void (*)(char *, char *, uint64_t))v337)(v370, v383, v339);
  v341 = v371;
  v342 = ((uint64_t (*)(char *, char *, uint64_t))v337)(v371, v381, v339);
  v343 = *(_QWORD *)(v377 + 16);
  v344 = REMSuggestedAttributeInputDataFrame.size.getter(v342);
  v345 = REMSuggestedAttributeInputDataFrame.size.getter(v344);
  v346 = v368;
  Date.init()(v345);
  v347 = Date.timeIntervalSince(_:)(v401);
  v408 = *(_QWORD **)(v397 + 8);
  v348 = v346;
  v349 = v398;
  ((void (*)(char *, uint64_t))v408)(v348, v398);
  REMSuggestedAttributesTrainer.Result.CoreBehavior.init(listAccuracy:dueDayOfWeekAccuracy:alarmLocationAccuracy:minedRuleCount:filteredOutRulesCount:distinctListCount:trainingSetCount:validationSetCount:trainingDuration:topRules:)(v338, v340, v341, v386, v356, v343, v344, v345, v347, v378);
  swift_release(v375);
  swift_release(v362);
  swift_release(v405);
  swift_release(v407);
  swift_release(v361);
  swift_release(v374);
  swift_release(v357);
  v350 = *(void (**)(char *, uint64_t))(v379 + 8);
  v350(v381, v339);
  v351 = *(void (**)(char *, uint64_t))(v380 + 8);
  v352 = v389;
  v351(v388, v389);
  v350(v383, v339);
  v351(v382, v352);
  v350(v385, v339);
  v351(v384, v352);
  (*(void (**)(char *, uint64_t))(v396 + 8))(v399, v400);
  ((void (*)(char *, uint64_t, uint64_t))v408)(v401, v349, v353);
}

uint64_t sub_100250368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100008868(a1, a2, (uint64_t *)&unk_100839C80);
}

void sub_100250398(_QWORD *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  v5 = *a1;
  v6 = REMSuggestedAttributeInputDataFrame.iloc(_:)(*a1);
  if (a2)
  {
    dispatch thunk of Series.iloc(_:)(v9, v5);
    v7 = v9[0];
    a2 = v9[1];
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_1004296A8(v6, v7, a2, 0, 0);
  swift_release(v6);
  swift_bridgeObjectRelease();
  *a3 = v8;
}

uint64_t sub_100250448@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  uint64_t result;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v14 = 0x5D7473694C3A565BLL;
  v4 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v3);
  v5 = REMSuggestedAttributeInput.description.getter();
  v7 = v6;
  swift_release(v4);
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 2314;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  dispatch thunk of Series.iloc(_:)(&v13, v3);
  object = v13._object;
  String.append(_:)(v13);
  result = swift_bridgeObjectRelease(object);
  v12 = v15;
  *a2 = v14;
  a2[1] = v12;
  return result;
}

uint64_t sub_100250528@<X0>(uint64_t *a1@<X0>, Swift::Int a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  uint64_t result;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *a1;
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v19 = a3;
  v20 = a4;
  v9 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v8);
  v10 = REMSuggestedAttributeInput.description.getter();
  v12 = v11;
  swift_release(v9);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 2314;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  dispatch thunk of Series.iloc(_:)(&v18, v8);
  object = v18._object;
  String.append(_:)(v18);
  result = swift_bridgeObjectRelease(object);
  v17 = v20;
  *a5 = v19;
  a5[1] = v17;
  return result;
}

uint64_t sub_10025061C@<X0>(uint64_t *a1@<X0>, Swift::Int a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, _QWORD *a5@<X8>, uint64_t (*a6)(_QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD *v16;
  uint64_t countAndFlagsBits;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  uint64_t result;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *a1;
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = a3;
  v28 = a4;
  v10 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v9);
  v11 = REMSuggestedAttributeInput.description.getter();
  v13 = v12;
  swift_release(v10);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 540945696;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  v16 = dispatch thunk of Series.iloc(_:)(&v26, v9);
  countAndFlagsBits = v26._countAndFlagsBits;
  v18 = a6(v16);
  v20 = v19;
  swift_release(countAndFlagsBits);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 2314;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  dispatch thunk of Series.iloc(_:)(&v26, v9);
  object = v26._object;
  String.append(_:)(v26);
  result = swift_bridgeObjectRelease(object);
  v25 = v28;
  *a5 = v27;
  a5[1] = v25;
  return result;
}

uint64_t sub_10025076C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = REMSuggestedAttributeInputDataFrame.iloc(_:)(*a1);
  v2 = REMSuggestedAttributeInput.list.getter();
  v3 = swift_release(v1);
  LOBYTE(v1) = REMSuggestedList.isValid.getter(v3);
  swift_release(v2);
  return v1 & 1;
}

uint64_t sub_1002507CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;

  v24 = a4;
  v23[1] = a2;
  v6 = sub_10001A630(&qword_100841CF0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100841C80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a3, v10, v12);
  KeyPath = swift_getKeyPath(&unk_1006B1088);
  PartialOverride.subscript.getter(KeyPath, v10);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = swift_getKeyPath(&unk_1006B1118);
  PartialOverride.subscript.getter(&v25, v17, v6, &protocol witness table for Int);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)(v15, v25);
  if (v19)
    v20 = result;
  else
    v20 = 0;
  v21 = 0xE000000000000000;
  if (v19)
    v21 = v19;
  v22 = v24;
  *v24 = v20;
  v22[1] = v21;
  return result;
}

uint64_t sub_10025094C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t result;
  uint64_t v9;

  v3 = REMSuggestedAttributeInputDataFrame.iloc(_:)(*a1);
  v4 = REMSuggestedAttributeInput.description.getter();
  v6 = v5;
  swift_release(v3);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  result = swift_bridgeObjectRelease(v6);
  *a2 = 0x5D7473694C3A565BLL;
  a2[1] = v9;
  return result;
}

uint64_t sub_1002509E4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t result;
  uint64_t v20;

  v5 = *a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v6 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v5);
  v7 = REMSuggestedAttributeInput.description.getter();
  v9 = v8;
  swift_release(v6);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 540945696;
  v11._object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  v12 = *a2;
  swift_retain(*a2);
  dispatch thunk of Series.iloc(_:)(&v20, v5);
  v13 = swift_release(v12);
  v14 = v20;
  v15 = REMSuggestedList.description.getter(v13);
  v17 = v16;
  swift_release(v14);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  result = swift_bridgeObjectRelease(v17);
  *a3 = 0x5D7473694C3A585BLL;
  a3[1] = 0xE800000000000000;
  return result;
}

uint64_t sub_100250B10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for REMSuggestedAttributesHashtag()
{
  return objc_opt_self(_TtC7reminddP33_6240F52A24477015CB0EA7B9FFA808B529REMSuggestedAttributesHashtag);
}

void sub_100250B54()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = type metadata accessor for MersenneTwister(0);
    v5 = sub_10009FC50(&qword_100841BF0, (uint64_t (*)(uint64_t))&type metadata accessor for MersenneTwister, (uint64_t)&protocol conformance descriptor for MersenneTwister);
    v6 = 0;
    while (1)
    {
      v8 = dispatch thunk of RandomNumberGenerator.next()(v4, v5);
      v9 = ((unint64_t)v8 * (unsigned __int128)v2) >> 64;
      if (v2 > v8 * v2)
      {
        v10 = -(uint64_t)v2 % v2;
        if (v10 > v8 * v2)
        {
          do
            v11 = dispatch thunk of RandomNumberGenerator.next()(v4, v5);
          while (v10 > v11 * v2);
          v9 = ((unint64_t)v11 * (unsigned __int128)v2) >> 64;
        }
      }
      v12 = v6 + v9;
      if (__OFADD__(v6, v9))
        break;
      if (v6 != v12)
      {
        v13 = *(_QWORD *)(v1 + 16);
        if (v6 >= v13)
          goto LABEL_19;
        if (v12 >= v13)
          goto LABEL_20;
        v14 = *(_QWORD *)(v1 + 32 + 8 * v6);
        v15 = *(_QWORD *)(v1 + 32 + 8 * v12);
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
          v1 = sub_1001D6110(v1);
        v16 = *(_QWORD *)(v1 + 16);
        if (v6 >= v16)
          goto LABEL_21;
        *(_QWORD *)(v1 + 32 + 8 * v6) = v15;
        if (v12 >= v16)
          goto LABEL_22;
        *(_QWORD *)(v1 + 32 + 8 * v12) = v14;
        *v17 = v1;
      }
      --v2;
      if (v6++ == v3)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_100250CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (!a2)
  {
    if (a6)
      return 0;
    goto LABEL_8;
  }
  if (!a6)
    return 0;
  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
LABEL_8:
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0) & 1) != 0))
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_100250D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1001C1B0C(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      break;
    v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = sub_10042B57C(v6, a2);
      v10 = v9;

      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1001C1B0C(v11 > 1, v12 + 1, 1);
      ++v5;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      if (v3 == v5)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *sub_100250EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v4)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      sub_100316FE4(v7);
      if (v2)
      {
        swift_release(_swiftEmptyArrayStorage);

        return _swiftEmptyArrayStorage;
      }
      v10 = v9;
      v11 = objc_msgSend(v9, "iCalendarDescription");

      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        sub_1001C1B0C(v15 > 1, v16 + 1, 1);
      ++v6;
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10025107C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t ObjCClassFromMetadata;
  NSString v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  char *v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  NSString v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  Class isa;
  NSString v96;
  id v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char v108;
  char v109;
  __n128 v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  Class v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  __n128 v137;
  NSObject *v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  __n128 v145;
  char *v146;
  char *v147;
  char *v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v164)(char *, uint64_t, uint64_t);
  void (*v165)(char *, char *);
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint8_t *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v179 = type metadata accessor for REMSuggestedLocation.LocationValue(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v157 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for Calendar(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v4);
  v173 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for DateComponents(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v170 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v171 = (uint8_t *)&v157 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v172 = (unint64_t)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v183 = (uint64_t)&v157 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v157 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v185 = v16;
  v186 = v17;
  __chkstk_darwin(v16);
  v181 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v184 = (char *)&v157 - v20;
  v21 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v21);
  v23 = (char *)&v157 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v157 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v157 - v28;
  v30 = type metadata accessor for UUID(0);
  v196 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v166 = (char *)&v157 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v176 = (char *)&v157 - v33;
  __chkstk_darwin(v34);
  v182 = (char *)&v157 - v35;
  __chkstk_darwin(v36);
  v188 = (char *)&v157 - v37;
  *(_QWORD *)&v191 = 0x696669746E656469;
  *((_QWORD *)&v191 + 1) = 0xEA00000000007265;
  v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v187 = a1;
  v39 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v38);
  swift_unknownObjectRelease(v38);
  if (v39)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v39);
    swift_unknownObjectRelease(v39);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  v40 = v196;
  if (!v195)
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v29, 1, 1, v30);
    goto LABEL_9;
  }
  v41 = swift_dynamicCast(v29, &v193, (char *)&type metadata for Any + 8, v30, 6);
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  v42(v29, v41 ^ 1u, 1, v30);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  if (v43(v29, 1, v30) == 1)
  {
LABEL_9:
    sub_10000882C((uint64_t)v29, (uint64_t *)&unk_100839C80);
    v46 = (void *)objc_opt_self(REMError);
    v47 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v47);
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v46, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v49);

    swift_willThrow(v50);
    return ObjCClassFromMetadata;
  }
  v165 = *(void (**)(char *, char *))(v40 + 32);
  v165(v188, v29);
  strcpy((char *)&v191, "creationDate");
  BYTE13(v191) = 0;
  HIWORD(v191) = -5120;
  v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v45 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v44);
  swift_unknownObjectRelease(v44);
  if (v45)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v45);
    swift_unknownObjectRelease(v45);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  v51 = v186;
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (!v195)
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v15, 1, 1, v185);
    goto LABEL_16;
  }
  v52 = v185;
  v53 = swift_dynamicCast(v15, &v193, (char *)&type metadata for Any + 8, v185, 6);
  v163 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  v163(v15, v53 ^ 1u, 1, v52);
  v164 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v164(v15, 1, v52) == 1)
  {
LABEL_16:
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_1008380D0);
    v56 = (void *)objc_opt_self(REMError);
    v57 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v57);
    v58 = String._bridgeToObjectiveC()();
    objc_msgSend(v56, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v58);

    swift_willThrow(v59);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v196 + 8))(v188, v30);
    return ObjCClassFromMetadata;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v184, v15, v52);
  *(_QWORD *)&v191 = 0x6564692E7473696CLL;
  *((_QWORD *)&v191 + 1) = 0xEF7265696669746ELL;
  v54 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v55 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v54);
  swift_unknownObjectRelease(v54);
  if (v55)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v55);
    swift_unknownObjectRelease(v55);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  v60 = v186;
  v61 = v184;
  if (!v195)
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
    v42(v26, 1, 1, v30);
    goto LABEL_23;
  }
  v62 = swift_dynamicCast(v26, &v193, (char *)&type metadata for Any + 8, v30, 6);
  v42(v26, v62 ^ 1u, 1, v30);
  if (v43(v26, 1, v30) == 1)
  {
LABEL_23:
    sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);
    v66 = (void *)objc_opt_self(REMError);
    v67 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v67);
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v66, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v68);

    swift_willThrow(v69);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v185);
    goto LABEL_24;
  }
  v63 = v182;
  ((void (*)(char *, char *, uint64_t))v165)(v182, v26, v30);
  *(_QWORD *)&v191 = 0x656C746974;
  *((_QWORD *)&v191 + 1) = 0xE500000000000000;
  v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v65 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v64);
  swift_unknownObjectRelease(v64);
  if (v65)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v65);
    swift_unknownObjectRelease(v65);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  v71 = v180;
  v72 = v183;
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v160 = v189;
      v73 = v190;
      goto LABEL_32;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v160 = 0;
  v73 = 0xE000000000000000;
LABEL_32:
  v159 = v73;
  type metadata accessor for REMSuggestedList(0);
  v165 = *(void (**)(char *, char *))(v196 + 16);
  ((void (*)(char *, char *, uint64_t))v165)(v23, v63, v30);
  v42(v23, 0, 1, v30);
  v74 = REMSuggestedList.__allocating_init(listUUID:)(v23);
  *(_QWORD *)&v191 = 0x6D616E2E7473696CLL;
  *((_QWORD *)&v191 + 1) = 0xE900000000000065;
  v75 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v76 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v75);
  swift_unknownObjectRelease(v75);
  if (v76)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v76);
    swift_unknownObjectRelease(v76);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  v77 = v185;
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v158 = v189;
      v78 = v190;
      goto LABEL_40;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v158 = 0;
  v78 = 0xE000000000000000;
LABEL_40:
  v157 = v78;
  v193 = 0x64656767616C66;
  v194 = 0xE700000000000000;
  v79 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v193, &type metadata for String);
  v80 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v79);
  swift_unknownObjectRelease(v79);
  if (v80)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v80);
    swift_unknownObjectRelease(v80);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) != 0)
    {
      v161 = v189;
      goto LABEL_48;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v161 = 0;
LABEL_48:
  v193 = 0x797469726F697270;
  v194 = 0xE800000000000000;
  v81 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v193, &type metadata for String);
  v82 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v81);
  swift_unknownObjectRelease(v81);
  if (v82)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v82);
    swift_unknownObjectRelease(v82);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) != 0)
    {
      v83 = v189;
      goto LABEL_56;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v83 = 0;
LABEL_56:
  *(_QWORD *)&v191 = 0x65746144657564;
  *((_QWORD *)&v191 + 1) = 0xE700000000000000;
  v84 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v85 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v84);
  swift_unknownObjectRelease(v84);
  if (v85)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v85);
    swift_unknownObjectRelease(v85);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    v86 = swift_dynamicCast(v72, &v193, (char *)&type metadata for Any + 8, v77, 6) ^ 1;
    v87 = v72;
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
    v87 = v72;
    v86 = 1;
  }
  v163((char *)v87, v86, 1, v77);
  v193 = 0x7961446C6C61;
  v194 = 0xE600000000000000;
  v88 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v193, &type metadata for String);
  v89 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v88);
  swift_unknownObjectRelease(v88);
  if (v89)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v89);
    swift_unknownObjectRelease(v89);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  v162 = v74;
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v90 = v189;
      goto LABEL_70;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v90 = 0;
LABEL_70:
  v193 = 0x656E6F5A656D6974;
  v194 = 0xE800000000000000;
  v91 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v193, &type metadata for String);
  v92 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v91);
  swift_unknownObjectRelease(v91);
  if (v92)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v92);
    swift_unknownObjectRelease(v92);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  v93 = v172;
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if (swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for String, 6))v94 = v190;
    else
      v94 = 0;
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
    v94 = 0;
  }
  v172 = v83;
  sub_100008868(v72, v93, (uint64_t *)&unk_1008380D0);
  if (v164((char *)v93, 1, v77) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v93, v77);
  }
  if (v94)
  {
    v96 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v96 = 0;
  }
  v97 = objc_msgSend((id)objc_opt_self(REMCDReminder), "dueDateComponentsWithDueDate:isAllDay:timeZoneName:", isa, v90, v96);

  if (!v97)
  {
    v101 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v174 + 56))(v173, 1, 1, v175);
    v104 = v186;
    goto LABEL_90;
  }
  v98 = v170;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v97);

  v99 = v174;
  v100 = *(void (**)(char *, char *, uint64_t))(v174 + 32);
  v101 = (uint64_t)v173;
  v102 = v175;
  v100(v173, v98, v175);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56))(v101, 0, 1, v102);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v101, 1, v102);
  v104 = v186;
  if (v103 == 1)
  {
LABEL_90:
    sub_10000882C(v101, (uint64_t *)&unk_100841610);
    v113 = type metadata accessor for REMSuggestedWeekDay(0);
    v115 = static REMSuggestedWeekDay.nilValue.getter(v114);
    swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
    v173 = (char *)REMSuggestedWeekDay.init(_:)(v115);
    v111 = v181;
    goto LABEL_91;
  }
  v105 = ((uint64_t (*)(uint8_t *, uint64_t, uint64_t))v100)(v171, v101, v102);
  v106 = v167;
  static Calendar.current.getter(v105);
  v107 = DateComponents.dayOfWeek(with:)(v106);
  v109 = v108;
  (*(void (**)(char *, uint64_t))(v168 + 8))(v106, v169);
  if ((v109 & 1) != 0)
  {
    type metadata accessor for REMSuggestedWeekDay(0);
    v107 = static REMSuggestedWeekDay.nilValue.getter(v110);
  }
  v111 = v181;
  v112 = type metadata accessor for REMSuggestedWeekDay(0);
  swift_allocObject(v112, *(unsigned int *)(v112 + 48), *(unsigned __int16 *)(v112 + 52));
  v173 = (char *)REMSuggestedWeekDay.init(_:)(v107);
  (*(void (**)(uint8_t *, uint64_t))(v99 + 8))(v171, v102);
LABEL_91:
  type metadata accessor for ClassificationLabel(0);
  v116 = static ClassificationLabel.nilLabel.getter();
  v118 = v117;
  v119 = type metadata accessor for REMSuggestedContact(0);
  swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
  v180 = REMSuggestedContact.init(stringLiteral:)(v116, v118);
  strcpy((char *)&v191, "contactHandles");
  HIBYTE(v191) = -18;
  v120 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v191, &type metadata for String);
  v121 = objc_msgSend(v187, "__swift_objectForKeyedSubscript:", v120);
  swift_unknownObjectRelease(v120);
  if (v121)
  {
    _bridgeAnyObjectToAny(_:)(&v191, v121);
    swift_unknownObjectRelease(v121);
  }
  else
  {
    v191 = 0u;
    v192 = 0u;
  }
  v122 = v188;
  sub_1000A5CA8((uint64_t)&v191, (uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  if (v195)
  {
    if ((swift_dynamicCast(&v189, &v193, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v124 = v189;
      v123 = v190;
      sub_1000A70E4(v189, v190);
      v125 = Data._bridgeToObjectiveC()().super.isa;
      v126 = objc_msgSend((id)objc_opt_self(REMContactRepresentation), "representationFromData:", v125);
      sub_1000A71C8(v124, v123);

      if (v126)
      {
        swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
        v187 = v126;
        v127 = REMSuggestedContact.init(_:)();
        v77 = v185;
        if (v71)
        {
          if (qword_100837050 != -1)
            swift_once(&qword_100837050, sub_1002479DC);
          v128 = type metadata accessor for Logger(0);
          sub_10001AAA8(v128, (uint64_t)qword_100841B10);
          v129 = v166;
          v130 = ((uint64_t (*)(char *, char *, uint64_t))v165)(v166, v188, v30);
          v131 = Logger.logObject.getter(v130);
          v132 = static os_log_type_t.error.getter(v131);
          LODWORD(v175) = v132;
          if (os_log_type_enabled(v131, v132))
          {
            v133 = (uint8_t *)swift_slowAlloc(12, -1);
            v174 = swift_slowAlloc(32, -1);
            v193 = v174;
            v171 = v133;
            *(_DWORD *)v133 = 136315138;
            v111 = v181;
            v170 = (char *)(v133 + 4);
            v134 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v135 = dispatch thunk of CustomStringConvertible.description.getter(v30, v134);
            *(_QWORD *)&v191 = sub_10001A820(v135, v136, &v193);
            v77 = v185;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, (char *)&v191 + 8);
            v137 = swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t, __n128))(v196 + 8))(v129, v30, v137);
            v138 = v131;
            v139 = v171;
            _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v175, "Invalid REMContactRepresentation when initializing REMSuggestedContact {reminderIdentifier: %s}", v171, 0xCu);
            v140 = v174;
            swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v140, -1, -1);
            swift_slowDealloc(v139, -1, -1);
            swift_errorRelease(v71);

            sub_1000A71C8(v124, v123);
          }
          else
          {
            sub_1000A71C8(v124, v123);

            (*(void (**)(char *, uint64_t))(v196 + 8))(v129, v30);
            swift_errorRelease(v71);

          }
        }
        else
        {
          v141 = v127;
          swift_release(v180);
          sub_1000A71C8(v124, v123);

          v180 = v141;
        }
      }
      else
      {
        sub_1000A71C8(v124, v123);
        v77 = v185;
      }
      v122 = v188;
      v104 = v186;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v193, (uint64_t *)&unk_10083D5B0);
  }
  v142 = v184;
  v143 = v176;
  ((void (*)(char *, char *, uint64_t))v165)(v176, v122, v30);
  v144 = v77;
  v145.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v104 + 16))(v111, v142, v77);
  type metadata accessor for REMSuggestedLocation(0, v145);
  v146 = v143;
  v147 = v111;
  v148 = v177;
  v149.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v178 + 104))(v177, enum case for REMSuggestedLocation.LocationValue.notAvailable(_:), v179);
  v150 = REMSuggestedLocation.__allocating_init(_:)(v148, v149);
  v151 = v30;
  v152 = v172;
  if ((v172 & 0x8000000000000000) == 0)
  {
    v153 = v150;
    v154 = v161 != 0;
    v155 = type metadata accessor for REMSuggestedAttributeReminderDataSource(0);
    swift_allocObject(v155, *(unsigned int *)(v155 + 48), *(unsigned __int16 *)(v155 + 52));
    ObjCClassFromMetadata = REMSuggestedAttributeReminderDataSource.init(title:reminderIdentifier:creationDate:list:listName:dueDayOfWeek:location:flagged:priority:tags:contact:recurrences:)(v160, v159, v146, v147, v162, v158, v157, v173, v153, v154, v152, &_swiftEmptySetSingleton, v180, &_swiftEmptySetSingleton);
    v156 = *(void (**)(char *, uint64_t))(v196 + 8);
    v156(v182, v151);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v142, v144);
    v156(v188, v151);
    sub_10000882C(v183, (uint64_t *)&unk_1008380D0);
    return ObjCClassFromMetadata;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_1002528B4(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  Class v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  BOOL v58;
  id v59;
  int v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  Swift::Int v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint8_t *v88;
  BOOL v89;
  BOOL v90;
  __n128 v91;
  uint64_t v92;
  id v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  Swift::Int v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint8_t *v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::Int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  unint64_t v127;
  BOOL v128;
  BOOL v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::String v152;
  uint64_t v153;
  __n128 v154;
  char *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  __n128 v163;
  char *v164;
  id v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint8_t *v172;
  unint64_t v173;
  char v174[8];
  uint64_t v175;
  uint64_t v176;
  char v177[8];
  __int128 v178;
  __int128 v179;
  _QWORD v180[2];
  __int128 v181;
  __int128 v182;
  char v183[16];
  uint64_t v184;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v164 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v171 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v168 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s10PredicatesOMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v11, v12, 62);
  sub_10000D2C0();
  v14 = v13;
  sub_10001C744((uint64_t)v11, _s10PredicatesOMa);
  i = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v16 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v17 = (unint64_t)objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "entity");
  objc_msgSend((id)i, "setEntity:", v17);

  objc_msgSend((id)i, "setAffectedStores:", 0);
  objc_msgSend((id)i, "setPredicate:", v14);
  objc_msgSend((id)i, "setResultType:", 2);

  objc_msgSend((id)i, "setFetchBatchSize:", a1);
  v18 = (unsigned __int128)((uint64_t)a1 * (__int128)5) >> 64;
  v156 = a1;
  if (v18 == (uint64_t)(5 * a1) >> 63)
  {
    v172 = (uint8_t *)a2;
    v173 = v2;
    v166 = v7;
    v165 = (id)i;
    objc_msgSend((id)i, "setFetchLimit:");
    a2 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(a2, v183);
    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
    KeyPath = swift_getKeyPath(&unk_1006B0B10);
    *(_QWORD *)(inited + 32) = KeyPath;
    *(_QWORD *)&v178 = inited;
    specialized Array._endMutation()(KeyPath);
    v21 = v178;
    *(_QWORD *)&v181 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, 1, 0);
    v22 = v181;
    if ((v21 & 0xC000000000000001) != 0)
    {
      v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
      v24 = v23;
    }
    else
    {
      v24 = *(_QWORD *)(v21 + 32);
      v23 = swift_retain();
    }
    v25 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v23);
    if (!v26)
    {
LABEL_148:
      *(_QWORD *)&v178 = 0;
      *((_QWORD *)&v178 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v152._object = (void *)0x80000001006F8C10;
      v152._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v152);
      v180[0] = v24;
      v153 = sub_10001A630((uint64_t *)&unk_10083AEC0);
      _print_unlocked<A, B>(_:_:)(v180, &v178, v153, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v178, *((_QWORD *)&v178 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
      __break(1u);
      goto LABEL_149;
    }
    v17 = v25;
    v7 = v26;
    swift_release(v24);
    a1 = *(_QWORD *)(v22 + 16);
    v18 = *(_QWORD *)(v22 + 24);
    i = a1 + 1;
    if (a1 < v18 >> 1)
      goto LABEL_7;
  }
  else
  {
LABEL_141:
    __break(1u);
  }
  sub_1001C1B0C(v18 > 1, i, 1);
  v22 = v181;
LABEL_7:
  *(_QWORD *)(v22 + 16) = i;
  v27 = v22 + 16 * a1;
  *(_QWORD *)(v27 + 32) = v17;
  *(_QWORD *)(v27 + 40) = v7;
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v22);
  objc_msgSend(v165, "setRelationshipKeyPathsForPrefetching:", isa);

  v29 = swift_allocObject(a2, 48, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1006A8550;
  if (qword_100837230 != -1)
    swift_once(&qword_100837230, sub_10033CEE8);
  v30 = (void *)qword_100871E18;
  *(_QWORD *)(v29 + 32) = qword_100871E18;
  v31 = qword_100837240;
  v32 = v30;
  if (v31 != -1)
    v32 = (id)swift_once(&qword_100837240, sub_10033CF18);
  v33 = (void *)qword_100871E28;
  *(_QWORD *)(v29 + 40) = qword_100871E28;
  *(_QWORD *)&v178 = v29;
  specialized Array._endMutation()(v32);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v34 = v33;
  v35 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v165, "setSortDescriptors:", v35, swift_bridgeObjectRelease().n128_f64[0]);

  v36 = swift_allocObject(a2, 128, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1006B0A60;
  *(_QWORD *)(v36 + 32) = swift_getKeyPath(&unk_1006B0B48);
  *(_QWORD *)(v36 + 40) = swift_getKeyPath(&unk_1006B0B78);
  *(_QWORD *)(v36 + 48) = swift_getKeyPath(&unk_1006B0BB0);
  *(_QWORD *)(v36 + 56) = swift_getKeyPath(&unk_1006B0C00);
  *(_QWORD *)(v36 + 64) = swift_getKeyPath(&unk_1006B0C50);
  *(_QWORD *)(v36 + 72) = swift_getKeyPath(&unk_1006B0C88);
  *(_QWORD *)(v36 + 80) = swift_getKeyPath(&unk_1006B0CB8);
  *(_QWORD *)(v36 + 88) = swift_getKeyPath(&unk_1006B0CE8);
  *(_QWORD *)(v36 + 96) = swift_getKeyPath(&unk_1006B0D20);
  *(_QWORD *)(v36 + 104) = swift_getKeyPath(&unk_1006B0D50);
  *(_QWORD *)(v36 + 112) = swift_getKeyPath(&unk_1006B0D88);
  v37 = swift_getKeyPath(&unk_1006B0DC0);
  *(_QWORD *)(v36 + 120) = v37;
  *(_QWORD *)&v178 = v36;
  specialized Array._endMutation()(v37);
  v38 = v178;
  *(_QWORD *)&v181 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 12, 0);
  v39 = v181;
  for (i = 4; i != 16; ++i)
  {
    if ((v38 & 0xC000000000000001) != 0)
    {
      v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v38);
      v24 = v40;
    }
    else
    {
      v24 = *(_QWORD *)(v38 + 8 * i);
      v40 = swift_retain();
    }
    v41 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v40);
    if (!v42)
      goto LABEL_148;
    v43 = v41;
    v44 = v42;
    *((_QWORD *)&v179 + 1) = &type metadata for String;
    swift_release(v24);
    *(_QWORD *)&v178 = v43;
    *((_QWORD *)&v178 + 1) = v44;
    *(_QWORD *)&v181 = v39;
    v7 = *(_QWORD *)(v39 + 16);
    v45 = *(_QWORD *)(v39 + 24);
    if (v7 >= v45 >> 1)
    {
      sub_1001C1C48(v45 > 1, v7 + 1, 1);
      v39 = v181;
    }
    *(_QWORD *)(v39 + 16) = v7 + 1;
    sub_10001A6CC(&v178, (_OWORD *)(v39 + 32 * v7 + 32));
  }
  swift_bridgeObjectRelease();
  v46 = (char *)&type metadata for Any;
  v47 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v39);
  v48 = v165;
  objc_msgSend(v165, "setPropertiesToFetch:", v47);

  v49 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v50 = v173;
  v51 = NSManagedObjectContext.fetch<A>(_:)(v48, v49);
  if (v50)
  {

    return;
  }
  v53 = v51;
  v158 = 0;
  v184 = (uint64_t)_swiftEmptyArrayStorage;
  v167 = v51;
  if (v51 >> 62)
  {
LABEL_144:
    if (v53 < 0)
      v151 = v53;
    else
      v151 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v53);
    v54 = _CocoaArrayWrapper.endIndex.getter(v151);
    v52 = swift_bridgeObjectRelease();
  }
  else
  {
    v54 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v55 = (uint64_t)v164;
  a2 = v166;
  if (!v54)
  {
    v162 = &_swiftEmptySetSingleton;
LABEL_137:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  v17 = 0;
  v170 = v167 & 0xC000000000000001;
  v161 = v167 & 0xFFFFFFFFFFFFFF8;
  v160 = v167 + 32;
  v155 = (char *)&v181 + 8;
  v162 = &_swiftEmptySetSingleton;
  a1 = (unint64_t)&unk_10083D5B0;
  v52.n128_u64[0] = 136446466;
  v163 = v52;
  v159 = v46 + 8;
  v52.n128_u64[0] = 136315138;
  v154 = v52;
  v169 = v54;
  while (1)
  {
    if (v170)
    {
      v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v167);
    }
    else
    {
      v18 = *(_QWORD *)(v161 + 16);
      if (v17 >= v18)
        goto LABEL_140;
      v57 = *(id *)(v160 + 8 * v17);
    }
    v7 = (unint64_t)v57;
    v58 = __OFADD__(v17++, 1);
    if (v58)
    {
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    *(_QWORD *)&v181 = 0x6564692E7473696CLL;
    *((_QWORD *)&v181 + 1) = 0xEF7265696669746ELL;
    i = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v181, &type metadata for String);
    v59 = objc_msgSend((id)v7, "__swift_objectForKeyedSubscript:", i);
    swift_unknownObjectRelease(i);
    if (v59)
    {
      _bridgeAnyObjectToAny(_:)(&v181, v59);
      swift_unknownObjectRelease(v59);
    }
    else
    {
      v181 = 0u;
      v182 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v181, (uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
    if (!*((_QWORD *)&v179 + 1))
    {
      sub_10000882C((uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v171 + 56))(v55, 1, 1, a2);
LABEL_41:
      v173 = v17;
      v63 = v55;
      sub_10000882C(v55, (uint64_t *)&unk_100839C80);
      if (qword_100837050 != -1)
        swift_once(&qword_100837050, sub_1002479DC);
      v64 = type metadata accessor for Logger(0);
      sub_10001AAA8(v64, (uint64_t)qword_100841B10);
      v7 = (unint64_t)(id)v7;
      v65 = Logger.logObject.getter(v7);
      v66 = static os_log_type_t.error.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = swift_slowAlloc(22, -1);
        v68 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v181 = v68;
        *(_DWORD *)v67 = v163.n128_u32[0];
        *(_QWORD *)(v67 + 4) = sub_10001A820(0x6564692E7473696CLL, 0xEF7265696669746ELL, (uint64_t *)&v181);
        *(_WORD *)(v67 + 12) = 2082;
        *(_QWORD *)&v178 = 0x6564692E7473696CLL;
        *((_QWORD *)&v178 + 1) = 0xEF7265696669746ELL;
        v69 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v178, &type metadata for String);
        v70 = objc_msgSend((id)v7, "__swift_objectForKeyedSubscript:", v69);
        swift_unknownObjectRelease(v69);
        if (v70)
        {
          _bridgeAnyObjectToAny(_:)(&v178, v70);
          swift_unknownObjectRelease(v70);
        }
        else
        {
          v178 = 0u;
          v179 = 0u;
        }
        a1 = (unint64_t)&unk_10083D5B0;
        v71 = sub_10001A630((uint64_t *)&unk_10083D5B0);
        v72 = Optional.descriptionOrNil.getter(v71);
        i = v73;
        sub_10000882C((uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
        *(_QWORD *)(v67 + 14) = sub_10001A820(v72, i, (uint64_t *)&v181);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unexpected nil %{public}s in fetched reminder dictionary {value: %{public}s}", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy(v68, 2, v159);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);

        a2 = v166;
        v46 = (char *)&type metadata for Any;
        v56 = (void *)v169;
      }
      else
      {

        v56 = (void *)v169;
        a1 = (unint64_t)&unk_10083D5B0;
      }
      v55 = v63;
      v17 = v173;
      goto LABEL_27;
    }
    v60 = swift_dynamicCast(v55, &v178, v46 + 8, a2, 6);
    v61 = v171;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v171 + 56))(v55, v60 ^ 1u, 1, a2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v55, 1, a2) == 1)
      goto LABEL_41;
    (*(void (**)(char *, uint64_t, uint64_t))(v171 + 32))(v168, v55, a2);
    *(_QWORD *)&v181 = 0x656C746974;
    *((_QWORD *)&v181 + 1) = 0xE500000000000000;
    i = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v181, &type metadata for String);
    v62 = objc_msgSend((id)v7, "__swift_objectForKeyedSubscript:", i);
    swift_unknownObjectRelease(i);
    if (v62)
    {
      _bridgeAnyObjectToAny(_:)(&v181, v62);
      swift_unknownObjectRelease(v62);
    }
    else
    {
      v181 = 0u;
      v182 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v181, (uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
    if (!*((_QWORD *)&v179 + 1))
    {
      sub_10000882C((uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
LABEL_69:
      if (qword_100837050 != -1)
        swift_once(&qword_100837050, sub_1002479DC);
      v92 = type metadata accessor for Logger(0);
      sub_10001AAA8(v92, (uint64_t)qword_100841B10);
      v93 = (id)v7;
      v7 = Logger.logObject.getter(v93);
      v94 = static os_log_type_t.error.getter(v7);
      if (os_log_type_enabled((os_log_t)v7, v94))
      {
        v95 = swift_slowAlloc(22, -1);
        v96 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v181 = v96;
        *(_DWORD *)v95 = v163.n128_u32[0];
        *(_QWORD *)(v95 + 4) = sub_10001A820(0x656C746974, 0xE500000000000000, (uint64_t *)&v181);
        *(_WORD *)(v95 + 12) = 2080;
        *(_QWORD *)&v178 = 0x656C746974;
        *((_QWORD *)&v178 + 1) = 0xE500000000000000;
        v97 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v178, &type metadata for String);
        v98 = objc_msgSend(v93, "__swift_objectForKeyedSubscript:", v97);
        swift_unknownObjectRelease(v97);
        if (v98)
        {
          _bridgeAnyObjectToAny(_:)(&v178, v98);
          swift_unknownObjectRelease(v98);
        }
        else
        {
          v178 = 0u;
          v179 = 0u;
        }
        a1 = (unint64_t)&unk_10083D5B0;
        v116 = sub_10001A630((uint64_t *)&unk_10083D5B0);
        v117 = Optional.descriptionOrNil.getter(v116);
        i = v118;
        sub_10000882C((uint64_t)&v178, (uint64_t *)&unk_10083D5B0);
        *(_QWORD *)(v95 + 14) = sub_10001A820(v117, i, (uint64_t *)&v181);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v94, "Unexpected nil %{public}s in fetched reminder dictionary {value: %s}", (uint8_t *)v95, 0x16u);
        swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
        v119 = v96;
        v46 = (char *)&type metadata for Any;
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v95, -1, -1);

        a2 = v166;
        (*(void (**)(char *, unint64_t))(v171 + 8))(v168, v166);
        v56 = (void *)v169;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v171 + 8))(v168, a2);
        v56 = (void *)v169;
        a1 = (unint64_t)&unk_10083D5B0;
      }
      v55 = (uint64_t)v164;
      goto LABEL_27;
    }
    v74 = swift_dynamicCast(v180, &v178, v46 + 8, &type metadata for String, 6);
    if ((v74 & 1) == 0)
      goto LABEL_69;
    v157 = (void *)v7;
    v76 = (uint8_t *)v180[0];
    v75 = v180[1];
    v77 = UUID.uuidString.getter(v74);
    v46 = v78;
    v79 = v162;
    v80 = v162[2];
    v173 = v75;
    v172 = v76;
    if (v80)
    {
      Hasher.init(_seed:)(&v178, v162[5]);
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v46);
      String.hash(into:)(&v178, v77, v46);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v75);
      String.hash(into:)(&v178, v76, v75);
      swift_bridgeObjectRelease();
      v81 = Hasher._finalize()();
      v82 = -1 << *((_BYTE *)v79 + 32);
      v7 = v81 & ~v82;
      v83 = v79 + 7;
      if (((*(_QWORD *)((char *)v79 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v7) & 1) != 0)
      {
        v84 = ~v82;
        v85 = v79[6];
        while (1)
        {
          v86 = (_QWORD *)(v85 + 32 * v7);
          v87 = (char *)v86[1];
          if (v87)
          {
            v88 = (uint8_t *)v86[2];
            i = v86[3];
            v89 = *v86 == v77 && v87 == v46;
            if (v89 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v86, v87, v77, v46, 0) & 1) != 0)
            {
              if (i)
              {
                v90 = v88 == v172 && i == v173;
                if (v90 || (_stringCompareWithSmolCheck(_:_:expecting:)(v88, i, v172, v173, 0) & 1) != 0)
                  break;
              }
            }
          }
          v7 = (v7 + 1) & v84;
          if (((*(_QWORD *)((char *)v83 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
            goto LABEL_75;
        }
        v91 = swift_bridgeObjectRelease();
        a2 = v166;
        (*(void (**)(char *, unint64_t, __n128))(v171 + 8))(v168, v166, v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v55 = (uint64_t)v164;
        v46 = (char *)&type metadata for Any;
        v56 = (void *)v169;
        a1 = (unint64_t)&unk_10083D5B0;
        goto LABEL_27;
      }
LABEL_75:
      v79 = v162;
      swift_bridgeObjectRelease();
      v75 = v173;
      v76 = v172;
    }
    Hasher.init(_seed:)(&v178, v79[5]);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v79);
    String.hash(into:)(&v178, v77, v46);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v75);
    String.hash(into:)(&v178, v76, v75);
    swift_bridgeObjectRelease();
    v99 = Hasher._finalize()();
    v100 = -1 << *((_BYTE *)v79 + 32);
    v101 = v99 & ~v100;
    v102 = v79 + 7;
    if (((*(_QWORD *)((char *)v79 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v101) & 1) != 0)
    {
      v103 = ~v100;
      v104 = v79[6];
      while (1)
      {
        v105 = (_QWORD *)(v104 + 32 * v101);
        v106 = (char *)v105[1];
        if (v106)
        {
          v107 = (uint8_t *)v105[2];
          i = v105[3];
          v108 = *v105 == v77 && v106 == v46;
          if (v108 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v105, v106, v77, v46, 0) & 1) != 0)
          {
            if (i)
            {
              v109 = v107 == v172 && i == v173;
              if (v109 || (_stringCompareWithSmolCheck(_:_:expecting:)(v107, i, v172, v173, 0) & 1) != 0)
                break;
            }
          }
        }
        v101 = (v101 + 1) & v103;
        if (((*(_QWORD *)((char *)v102 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
          goto LABEL_93;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = (uint64_t)v162;
      swift_bridgeObjectRelease();
      v7 = (unint64_t)v157;
      v110 = v158;
      v111 = sub_10025107C(v157);
      if (!v110)
      {
        v112 = v111;
        goto LABEL_126;
      }
      goto LABEL_120;
    }
LABEL_93:
    v113 = v162;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v113);
    *(_QWORD *)&v181 = v113;
    v115 = v113[2];
    i = v113[3];
    swift_bridgeObjectRetain(v46);
    v7 = v173;
    swift_bridgeObjectRetain(v173);
    if (i <= v115)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1002E361C();
LABEL_118:
    v53 = v181;
    *(_QWORD *)(v181 + ((v101 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v101;
    v130 = (uint64_t *)(*(_QWORD *)(v53 + 48) + 32 * v101);
    *v130 = v77;
    v130[1] = (uint64_t)v46;
    v131 = v173;
    v130[2] = (uint64_t)v172;
    v130[3] = v131;
    v132 = *(_QWORD *)(v53 + 16);
    v58 = __OFADD__(v132, 1);
    v133 = v132 + 1;
    if (v58)
    {
      __break(1u);
      goto LABEL_144;
    }
    *(_QWORD *)(v53 + 16) = v133;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (unint64_t)v157;
    v110 = v158;
    v134 = sub_10025107C(v157);
    if (!v110)
    {
      v112 = v134;
      v162 = (_QWORD *)v53;
LABEL_126:
      v158 = 0;
      v55 = (uint64_t)v164;
      a2 = v166;
      v46 = (char *)&type metadata for Any;
      a1 = (unint64_t)&unk_10083D5B0;
      v145 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v145);
      v147 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v146 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v147 >= v146 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v146 > 1);
      v148 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v147, v112);
      specialized Array._endMutation()(v148);
      swift_release(v112);
      i = v184;
      if ((unint64_t)v184 >> 62)
      {
        if (v184 < 0)
          v150 = v184;
        else
          v150 = v184 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v184);
        v149 = _CocoaArrayWrapper.endIndex.getter(v150);

        swift_bridgeObjectRelease();
      }
      else
      {
        v149 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      (*(void (**)(char *, uint64_t))(v171 + 8))(v168, a2);
      if (v149 >= v156)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_131;
    }
LABEL_120:
    v55 = (uint64_t)v164;
    a1 = (unint64_t)&unk_10083D5B0;
    v162 = (_QWORD *)v53;
    if (qword_100837050 != -1)
      swift_once(&qword_100837050, sub_1002479DC);
    v158 = 0;
    v135 = type metadata accessor for Logger(0);
    sub_10001AAA8(v135, (uint64_t)qword_100841B10);
    swift_errorRetain(v110);
    v136 = swift_errorRetain(v110);
    v137 = Logger.logObject.getter(v136);
    v138 = static os_log_type_t.error.getter(v137);
    if (os_log_type_enabled(v137, v138))
    {
      v139 = swift_slowAlloc(12, -1);
      v173 = v17;
      v140 = (uint8_t *)v139;
      v141 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v178 = v141;
      *(_DWORD *)v140 = v154.n128_u32[0];
      i = (unint64_t)(v140 + 12);
      v172 = v140 + 4;
      swift_getErrorValue(v110, v177, v174);
      v142 = Error.rem_errorDescription.getter(v175, v176);
      *(_QWORD *)&v181 = sub_10001A820(v142, v143, (uint64_t *)&v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v155);
      swift_bridgeObjectRelease();
      swift_errorRelease(v110);
      swift_errorRelease(v110);
      _os_log_impl((void *)&_mh_execute_header, v137, v138, "failed to convert fetched reminder dictionary {error: %s}", v140, 0xCu);
      v46 = (char *)&type metadata for Any;
      swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      v144 = v140;
      v55 = (uint64_t)v164;
      v17 = v173;
      swift_slowDealloc(v144, -1, -1);

      swift_errorRelease(v110);
      a2 = v166;
      (*(void (**)(char *, unint64_t))(v171 + 8))(v168, v166);
    }
    else
    {

      swift_errorRelease(v110);
      swift_errorRelease(v110);
      swift_errorRelease(v110);

      a2 = v166;
      (*(void (**)(char *, unint64_t))(v171 + 8))(v168, v166);
      v46 = (char *)&type metadata for Any;
    }
LABEL_131:
    v56 = (void *)v169;
LABEL_27:
    if ((void *)v17 == v56)
      goto LABEL_137;
  }
  v120 = v115 + 1;
  if (isUniquelyReferenced_nonNull_native)
    sub_1002DEDDC(v120);
  else
    sub_1002E4BAC(v120);
  i = v181;
  Hasher.init(_seed:)(&v178, *(_QWORD *)(v181 + 40));
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v46);
  String.hash(into:)(&v178, v77, v46);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(&v178, v172, v7);
  swift_bridgeObjectRelease();
  v121 = Hasher._finalize()();
  v122 = -1 << *(_BYTE *)(i + 32);
  v101 = v121 & ~v122;
  v7 = i + 56;
  if (((*(_QWORD *)(i + 56 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
    goto LABEL_118;
  v123 = ~v122;
  v124 = *(_QWORD *)(i + 48);
  while (1)
  {
    v125 = (_QWORD *)(v124 + 32 * v101);
    v126 = (char *)v125[1];
    if (v126)
    {
      i = v125[2];
      v127 = v125[3];
      v128 = *v125 == v77 && v126 == v46;
      if (v128 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v125, v126, v77, v46, 0) & 1) != 0)
      {
        if (v127)
        {
          v129 = (uint8_t *)i == v172 && v127 == v173;
          if (v129 || (_stringCompareWithSmolCheck(_:_:expecting:)(i, v127, v172, v173, 0) & 1) != 0)
            break;
        }
      }
    }
    v101 = (v101 + 1) & v123;
    if (((*(_QWORD *)(v7 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
      goto LABEL_118;
  }
LABEL_149:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s8KeyTupleVN);
  __break(1u);
}

uint64_t sub_1002541B4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  unsigned int *v20;
  __n128 v21;
  char v22;
  __n128 v23;
  __n128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  uint64_t v33;

  v2 = type metadata accessor for REMSuggestedLocation.LocationValue(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  strcpy((char *)v32, "contactLabel");
  BYTE5(v32[1]) = 0;
  HIWORD(v32[1]) = -5120;
  v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v32, &type metadata for String);
  v7 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v6);
  swift_unknownObjectRelease(v6);
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(&v30, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v30, (uint64_t)v32, (uint64_t *)&unk_10083D5B0);
  if (v33)
  {
    v8 = swift_dynamicCast(&v28, v32, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v9 = v28;
    if (!v8)
      v9 = 0;
    v27 = v9;
    if (v8)
      v10 = v29;
    else
      v10 = 0;
  }
  else
  {
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_10083D5B0);
    v27 = 0;
    v10 = 0;
  }
  v32[0] = 0x656C746974;
  v32[1] = 0xE500000000000000;
  v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v32, &type metadata for String);
  v12 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v11);
  swift_unknownObjectRelease(v11);
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(&v30, v12);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v30, (uint64_t)v32, (uint64_t *)&unk_10083D5B0);
  if (v33)
  {
    v13 = swift_dynamicCast(&v28, v32, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v13)
      v14 = v28;
    else
      v14 = 0;
    if (v13)
      v15 = v29;
    else
      v15 = 0;
  }
  else
  {
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_10083D5B0);
    v14 = 0;
    v15 = 0;
  }
  *(_QWORD *)&v30 = 0x74696D69786F7270;
  *((_QWORD *)&v30 + 1) = 0xE900000000000079;
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v30, &type metadata for String);
  v17 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v16);
  swift_unknownObjectRelease(v16);
  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(&v30, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v30, (uint64_t)v32, (uint64_t *)&unk_10083D5B0);
  if (v33)
  {
    if ((swift_dynamicCast(&v28, v32, (char *)&type metadata for Any + 8, &type metadata for Int16, 6) & 1) != 0)
    {
      v19 = (__int16)v28;
      if (!v10)
        goto LABEL_28;
LABEL_32:
      swift_bridgeObjectRelease();
      v14 = v27;
      v15 = v10;
      goto LABEL_33;
    }
  }
  else
  {
    sub_10000882C((uint64_t)v32, (uint64_t *)&unk_10083D5B0);
  }
  v19 = 0;
  if (v10)
    goto LABEL_32;
LABEL_28:
  if (!v15)
  {
    type metadata accessor for REMSuggestedLocation(0, v18);
    v20 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.notAvailable(_:);
    goto LABEL_38;
  }
LABEL_33:
  if ((String.containsNameOfHomeLocation.getter(v14, v15) & 1) != 0)
  {
    v21 = swift_bridgeObjectRelease();
    type metadata accessor for REMSuggestedLocation(0, v21);
    *v5 = v19;
    v20 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.home(_:);
  }
  else
  {
    v22 = String.containsNameOfWorkLocation.getter(v14, v15);
    v23 = swift_bridgeObjectRelease();
    type metadata accessor for REMSuggestedLocation(0, v23);
    if ((v22 & 1) != 0)
    {
      *v5 = v19;
      v20 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.work(_:);
    }
    else
    {
      v20 = (unsigned int *)&enum case for REMSuggestedLocation.LocationValue.other(_:);
    }
  }
LABEL_38:
  v24.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *v20, v2);
  return REMSuggestedLocation.__allocating_init(_:)(v5, v24);
}

void sub_100254590(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  Class v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  __n128 v57;
  _BYTE *v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  char v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  __n128 v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  id v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  Class v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[4];
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  Class v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void (*v150)(void);
  uint64_t v151;
  _BYTE *v152;
  void (*v153)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v154;
  _BYTE *v155;
  _BYTE *v156;
  _BYTE *v157;
  unint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t (*v163)(_BYTE *, uint64_t, __n128);
  uint64_t (*v164)(_BYTE *, _QWORD, uint64_t);
  uint64_t v165;
  _BYTE *v166;
  unint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _OWORD v174[2];
  uint64_t v175[4];
  unint64_t v176;

  v3 = v2;
  v169 = type metadata accessor for REMSuggestedLocation.LocationValue(0);
  v162 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v168 = &v139[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v161 = &v139[-v8];
  __chkstk_darwin(v9);
  v152 = &v139[-v10];
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v160 = &v139[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v156 = &v139[-v14];
  __chkstk_darwin(v15);
  v17 = &v139[-v16];
  __chkstk_darwin(v18);
  v155 = &v139[-v19];
  v171 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v166 = &v139[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v24 = &v139[-v23];
  v164 = (uint64_t (*)(_BYTE *, _QWORD, uint64_t))((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v138 = a1;
    else
      v138 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v25 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v26 = _swiftEmptyArrayStorage;
  v170 = a1;
  v157 = v17;
  v167 = a2;
  if (v25)
  {
    v175[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    v165 = v3;
    v27 = 0;
    v26 = (_QWORD *)v175[0];
    v28 = a1 & 0xC000000000000001;
    do
    {
      if (v28)
      {
        v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27, a1);
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 8 * v27 + 32);
        swift_retain();
      }
      ((void (*)(void))dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter)();
      swift_release(v29);
      v175[0] = (uint64_t)v26;
      v31 = v26[2];
      v30 = v26[3];
      if (v31 >= v30 >> 1)
      {
        sub_1001C1BE4(v30 > 1, v31 + 1, 1);
        v26 = (_QWORD *)v175[0];
      }
      ++v27;
      v26[2] = v31 + 1;
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v20 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v31, v24, v171);
      a1 = v170;
    }
    while (v25 != v27);
    v3 = v165;
  }
  v32 = sub_10034E8A4((uint64_t)v26);
  if (v3)
    goto LABEL_14;
  v33 = v32;
  swift_bridgeObjectRetain(v26);
  v35 = sub_10011EF34(v34);
  swift_bridgeObjectRelease();
  v175[0] = v33;
  swift_bridgeObjectRetain(v33);
  v36 = sub_10001A630(&qword_100841BF8);
  v37 = sub_1000A5F84(&qword_100841C00, &qword_100841BF8, (uint64_t)&protocol conformance descriptor for [A : B].Keys);
  v38 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v39 = Sequence.compactMapToSet<A>(_:)(sub_100250368, 0, v36, v171, v37, v38);
  v151 = v33;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v39 + 16) <= *(_QWORD *)(v35 + 16) >> 3)
  {
    v175[0] = v35;
    sub_10059BA14(v39);
    swift_bridgeObjectRelease();
    v40 = (void *)v175[0];
  }
  else
  {
    v40 = sub_10021658C(v39, v35);
    swift_bridgeObjectRelease();
  }
  v41 = sub_1001E987C((uint64_t)v40);
  swift_bridgeObjectRelease();
  v42 = v167;
  v43 = sub_10034EF84((uint64_t)v41, v167);
  v44 = (uint64_t)v160;
  v148 = v43;
  swift_release(v41);
  v147 = sub_1002A4B28((uint64_t)v26, v42);
  v45 = sub_1003CFD00((uint64_t)v26, v42);
  v143 = 0;
  v46 = v45;
  swift_bridgeObjectRelease();
  if (v164)
  {
    if (a1 < 0)
      v48 = a1;
    else
      v48 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v47 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  else
  {
    v47 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  if (!v47)
  {
LABEL_108:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v49 = 0;
  v145 = a1 & 0xC000000000000001;
  v142 = a1 & 0xFFFFFFFFFFFFFF8;
  v141 = a1 + 32;
  v140 = enum case for REMSuggestedLocation.LocationValue.vehicle(_:);
  LODWORD(v165) = enum case for REMSuggestedLocation.LocationValue.notAvailable(_:);
  v154 = (char *)&type metadata for Any + 8;
  v144 = v47;
  v146 = v46;
  while (2)
  {
    if (v145)
    {
      v50 = specialized _ArrayBuffer._getElementSlowPath(_:)(v49, a1);
      v51 = __OFADD__(v49, 1);
      v52 = v49 + 1;
      if (v51)
        goto LABEL_115;
    }
    else
    {
      if (v49 >= *(_QWORD *)(v142 + 16))
        goto LABEL_116;
      v50 = *(_QWORD *)(v141 + 8 * v49);
      swift_retain();
      v51 = __OFADD__(v49, 1);
      v52 = v49 + 1;
      if (v51)
        goto LABEL_115;
    }
    v149 = v52;
    ((void (*)(void))dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter)();
    v53 = (uint64_t)v155;
    v54 = v171;
    v150 = *(void (**)(void))(v20 + 16);
    v150();
    v153 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56);
    v153(v53, 0, 1, v54);
    if (*(_QWORD *)(v151 + 16))
    {
      sub_1002C6CCC(v53);
      v56 = v55;
      sub_10000882C(v53, (uint64_t *)&unk_100839C80);
      if ((v56 & 1) != 0)
      {
        type metadata accessor for REMSuggestedLocation(0, v57);
        v58 = v152;
        v59.n128_f64[0] = (*(double (**)(_BYTE *, _QWORD, uint64_t))(v162 + 104))(v152, v140, v169);
        v60 = REMSuggestedLocation.__allocating_init(_:)(v58, v59);
        dispatch thunk of REMSuggestedAttributeReminderDataSource.location.setter(v60);
      }
    }
    else
    {
      sub_10000882C(v53, (uint64_t *)&unk_100839C80);
    }
    v164 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v162 + 104);
    v61 = v164(v161, v165, v169);
    v167 = v50;
    v62 = dispatch thunk of REMSuggestedAttributeReminderDataSource.location.getter(v61);
    v63 = REMSuggestedLocation.locationValueDescription.getter();
    v65 = v64;
    v66 = swift_release(v62);
    v68 = REMSuggestedLocation.LocationValue.description.getter(v66);
    if (v63 == v68 && v65 == v67)
    {
      v69 = swift_bridgeObjectRelease_n(v65, 2);
      v163 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v162 + 8);
      v70 = v163(v161, v169, v69);
    }
    else
    {
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v68, v67, 0);
      swift_bridgeObjectRelease();
      v72 = swift_bridgeObjectRelease();
      v163 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v162 + 8);
      v70 = v163(v161, v169, v72);
      if ((v71 & 1) == 0)
        goto LABEL_60;
    }
    v73 = (uint64_t)v157;
    dispatch thunk of REMSuggestedAttributeReminderDataSource.reminderIdentifier.getter(v70);
    v153(v73, 0, 1, v171);
    v74 = (uint64_t)v156;
    if (!*(_QWORD *)(v148 + 16) || (v75 = sub_1002C6CCC(v73), v73 = (uint64_t)v157, (v76 & 1) == 0))
    {
      sub_10000882C(v73, (uint64_t *)&unk_100839C80);
      goto LABEL_61;
    }
    v77 = *(_QWORD *)(*(_QWORD *)(v148 + 56) + 8 * v75);
    swift_bridgeObjectRetain(v77);
    sub_10000882C(v73, (uint64_t *)&unk_100839C80);
    if ((unint64_t)v77 >> 62)
    {
      if (v77 < 0)
        v137 = v77;
      else
        v137 = v77 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v77);
      v78 = _CocoaArrayWrapper.endIndex.getter(v137);
      swift_bridgeObjectRelease();
      if (!v78)
      {
LABEL_107:
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
    else
    {
      v78 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v78)
        goto LABEL_107;
    }
    if (v78 < 1)
      goto LABEL_118;
    v79 = 0;
    v158 = v77 & 0xC000000000000001;
    v159 = v77;
    v80 = v78;
    do
    {
      if (v158)
        v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v79, v77);
      else
        v83 = *(id *)(v77 + 8 * v79 + 32);
      v84 = v83;
      v85 = v164(v168, v165, v169);
      v86 = dispatch thunk of REMSuggestedAttributeReminderDataSource.location.getter(v85);
      v87 = REMSuggestedLocation.locationValueDescription.getter();
      v89 = v88;
      v90 = swift_release(v86);
      v92 = REMSuggestedLocation.LocationValue.description.getter(v90);
      if (v87 == v92 && v89 == v91)
      {
        v81 = swift_bridgeObjectRelease_n(v89, 2);
        v163(v168, v169, v81);
LABEL_49:
        v82 = sub_1002541B4(v84);
        dispatch thunk of REMSuggestedAttributeReminderDataSource.location.setter(v82);
        goto LABEL_50;
      }
      v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v89, v92, v91, 0);
      swift_bridgeObjectRelease();
      v94 = swift_bridgeObjectRelease();
      v163(v168, v169, v94);
      if ((v93 & 1) != 0)
        goto LABEL_49;
LABEL_50:
      ++v79;

      v77 = v159;
    }
    while (v80 != v79);
    swift_bridgeObjectRelease();
    v44 = (uint64_t)v160;
LABEL_60:
    v74 = (uint64_t)v156;
LABEL_61:
    v95 = v171;
    ((void (*)(uint64_t, _BYTE *, uint64_t))v150)(v74, v166, v171);
    v153(v74, 0, 1, v95);
    if (!*(_QWORD *)(v147 + 16) || (v96 = sub_1002C6CCC(v74), (v97 & 1) == 0))
    {
      sub_10000882C(v74, (uint64_t *)&unk_100839C80);
      v114 = v167;
      goto LABEL_94;
    }
    v98 = *(_QWORD *)(*(_QWORD *)(v147 + 56) + 8 * v96);
    swift_bridgeObjectRetain(v98);
    sub_10000882C(v74, (uint64_t *)&unk_100839C80);
    v176 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v98 >> 62)
    {
      if (v98 < 0)
        v116 = v98;
      else
        v116 = v98 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v98);
      v99 = _CocoaArrayWrapper.endIndex.getter(v116);
      if (!v99)
        goto LABEL_92;
LABEL_65:
      if (v99 >= 1)
      {
        v100 = 0;
        while (1)
        {
          if ((v98 & 0xC000000000000001) != 0)
            v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v100, v98);
          else
            v101 = *(id *)(v98 + 8 * v100 + 32);
          v102 = v101;
          *(_QWORD *)&v174[0] = 1701667182;
          *((_QWORD *)&v174[0] + 1) = 0xE400000000000000;
          v103 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v174, &type metadata for String);
          v104 = objc_msgSend(v102, "__swift_objectForKeyedSubscript:", v103);
          swift_unknownObjectRelease(v103);
          if (v104)
          {
            _bridgeAnyObjectToAny(_:)(v174, v104);
            swift_unknownObjectRelease(v104);
          }
          else
          {
            memset(v174, 0, sizeof(v174));
          }
          sub_1000A5CA8((uint64_t)v174, (uint64_t)v175, (uint64_t *)&unk_10083D5B0);
          if (v175[3])
          {
            if ((swift_dynamicCast(&v172, v175, v154, &type metadata for String, 6) & 1) != 0)
            {
              v106 = v172;
              v105 = v173;
              v107 = HIBYTE(v173) & 0xF;
              if ((v173 & 0x2000000000000000) == 0)
                v107 = v172 & 0xFFFFFFFFFFFFLL;
              if (v107)
              {
                v108 = type metadata accessor for REMSuggestedAttributesHashtag();
                v109 = swift_allocObject(v108, 32, 7);
                *(_QWORD *)(v109 + 16) = v106;
                *(_QWORD *)(v109 + 24) = v105;

                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v110);
                v112 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v111 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v112 >= v111 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1);
                v113 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v112, v109);
                specialized Array._endMutation()(v113);
              }
              else
              {

                swift_bridgeObjectRelease();
              }
              a1 = v170;
              goto LABEL_69;
            }
          }
          else
          {
            sub_10000882C((uint64_t)v175, (uint64_t *)&unk_10083D5B0);
          }

LABEL_69:
          if (v99 == ++v100)
          {
            swift_bridgeObjectRelease();
            v115 = (_QWORD *)v176;
            goto LABEL_93;
          }
        }
      }
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      return;
    }
    v99 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v98);
    if (v99)
      goto LABEL_65;
LABEL_92:
    swift_bridgeObjectRelease();
    v115 = _swiftEmptyArrayStorage;
LABEL_93:
    swift_bridgeObjectRelease();
    v175[0] = (uint64_t)v115;
    v117 = sub_10001A630(&qword_100841C08);
    v118 = sub_1000A5F84(&qword_100841C10, &qword_100841C08, (uint64_t)&protocol conformance descriptor for [A]);
    v119 = sub_10009FC50(&qword_100841C18, (uint64_t (*)(uint64_t))type metadata accessor for REMSuggestedAttributesHashtag, (uint64_t)&unk_1006B0AE0);
    v120 = Sequence<>.canonicalTagSet.getter(v117, v118, v119);
    v121 = swift_bridgeObjectRelease();
    v114 = v167;
    dispatch thunk of REMSuggestedAttributeReminderDataSource.tags.setter(v120, v121);
    v44 = (uint64_t)v160;
LABEL_94:
    v122 = v171;
    ((void (*)(uint64_t, _BYTE *, uint64_t))v150)(v44, v166, v171);
    v153(v44, 0, 1, v122);
    v123 = v146;
    v49 = v149;
    if (!*((_QWORD *)v146 + 2) || (v124 = sub_1002C6CCC(v44), (v125 & 1) == 0))
    {
      sub_10000882C(v44, (uint64_t *)&unk_100839C80);
      (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v166, v171);
      swift_release(v114);
      goto LABEL_27;
    }
    v126 = *(_QWORD *)(*((_QWORD *)v123 + 7) + 8 * v124);
    swift_bridgeObjectRetain(v126);
    sub_10000882C(v44, (uint64_t *)&unk_100839C80);
    v127 = v143;
    v128 = sub_100250EDC(v126);
    v143 = v127;
    if (!v127)
    {
      v129 = v128;
      swift_bridgeObjectRelease();
      v130 = Set.init(minimumCapacity:)(v129[2], &type metadata for String, &protocol witness table for String);
      *(_QWORD *)&v174[0] = v130;
      v131 = v129[2];
      if (v131)
      {
        v132 = v129 + 5;
        do
        {
          v133 = *(v132 - 1);
          v134 = *v132;
          swift_bridgeObjectRetain(*v132);
          sub_1002DB0E4(v175, v133, v134);
          swift_bridgeObjectRelease();
          v132 += 2;
          --v131;
        }
        while (v131);
        v135 = swift_bridgeObjectRelease();
        v136 = *(_QWORD *)&v174[0];
        v44 = (uint64_t)v160;
        v114 = v167;
      }
      else
      {
        v136 = v130;
        v135 = swift_bridgeObjectRelease();
      }
      dispatch thunk of REMSuggestedAttributeReminderDataSource.recurrences.setter(v136, v135);
      swift_release(v114);
      (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v166, v171);
      v49 = v149;
LABEL_27:
      if (v49 == v144)
        goto LABEL_108;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v114);
  (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v166, v171);
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRelease();
}

unint64_t sub_100255528(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (qword_100837050 != -1)
    swift_once(&qword_100837050, sub_1002479DC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100841B10);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v14 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetching ReminderDataSource for training batch by batch {batchsize: %ld}", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_autoreleasePoolPush();
  sub_1002528B4(a1, a2);
  if (!v2)
  {
    sub_100254590(v11, a2);
    a2 = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease();
  }
  objc_autoreleasePoolPop(v10);
  return a2;
}

const char *sub_1002556AC()
{
  return "objectID";
}

id sub_1002556B8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "objectID");
  *a2 = result;
  return result;
}

const char *sub_100255730()
{
  return "allDay";
}

const char *sub_10025575C()
{
  return "contactHandles";
}

uint64_t type metadata accessor for TrainingContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100841DA8;
  if (!qword_100841DA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrainingContext);
  return result;
}

uint64_t sub_1002557AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_1002557D8()
{
  unint64_t result;

  result = qword_100841C88;
  if (!qword_100841C88)
  {
    result = swift_getWitnessTable(&unk_1006B1304, &type metadata for ModelSkippedError);
    atomic_store(result, (unint64_t *)&qword_100841C88);
  }
  return result;
}

uint64_t sub_10025581C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.randomSeed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100255844@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.shouldSaveModel.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100255870@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.maxSampleCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100255898@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.minimumSampleCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002558C0()
{
  return REMSuggestedAttributesTrainer.Parameters.intentionalWord.getter();
}

uint64_t sub_1002558E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = REMSuggestedAttributesTrainer.Parameters.IntentionalWord.k.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100255910@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024BA88(a1, a2);
}

_QWORD *sub_100255928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v24 = a1;
  v2 = sub_10001A630(&qword_100841CA8);
  v3 = sub_1000A5F84(&qword_100841D08, &qword_100841CA8, (uint64_t)&protocol conformance descriptor for Series<A>);
  v4 = dispatch thunk of Sequence.underestimatedCount.getter(v2, v3);
  v23 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v4);
  v20 = a1;
  swift_retain();
  result = (_QWORD *)dispatch thunk of Sequence.makeIterator()(v2, v3);
  if (v4 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (v4)
  {
    do
    {
      result = dispatch thunk of _AnyIteratorBoxBase.next()(&v20, result);
      if (!v21)
        goto LABEL_10;
      v7 = REMFilteredTitleEmbedding.vector(for:)(v20, v21, v6);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v10);
    }
    while (--v4);
  }
  v11 = v22;
  dispatch thunk of _AnyIteratorBoxBase.next()(&v20, result);
  v13 = v21;
  if (v21)
  {
    v14 = v20;
    do
    {
      v15 = REMFilteredTitleEmbedding.vector(for:)(v14, v13, v12);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v17 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      v19 = specialized ContiguousArray._endMutation()(v18);
      dispatch thunk of _AnyIteratorBoxBase.next()(&v20, v19);
      v14 = v20;
      v13 = v21;
    }
    while (v21);
  }
  swift_release(v11);
  return v23;
}

_QWORD *sub_100255AF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  _QWORD *v26;
  uint64_t v27;

  v27 = a1;
  v2 = sub_10001A630(&qword_100841C98);
  v3 = sub_1000A5F84(&qword_100841CC0, &qword_100841C98, (uint64_t)&protocol conformance descriptor for Series<A>);
  v4 = dispatch thunk of Sequence.underestimatedCount.getter(v2, v3);
  v26 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  v5 = _swiftEmptyArrayStorage;
  v25[0] = a1;
  swift_retain();
  result = (_QWORD *)dispatch thunk of Sequence.makeIterator()(v2, v3);
  if (v4 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  if (v4)
  {
    do
    {
      result = dispatch thunk of _AnyIteratorBoxBase.next()(v25, result);
      v7 = v25[0];
      if (!v25[0])
        goto LABEL_23;
      v8 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)(v25[0], 1);
      v10 = v9;
      result = (_QWORD *)swift_release(v7);
      if (v10)
        v11 = v8;
      else
        v11 = 0;
      if (!v10)
        v10 = 0xE000000000000000;
      v26 = v5;
      v13 = v5[2];
      v12 = v5[3];
      if (v13 >= v12 >> 1)
      {
        result = (_QWORD *)sub_1001C1B0C(v12 > 1, v13 + 1, 1);
        v5 = v26;
      }
      v5[2] = v13 + 1;
      v14 = &v5[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
    }
    while (--v4);
  }
  v15 = v25[1];
  dispatch thunk of _AnyIteratorBoxBase.next()(v25, result);
  for (i = v25[0]; v25[0]; i = v25[0])
  {
    v17 = REMkNNByTitleEmbedding.predict(for:neighborCountToConsider:)(i, 1);
    v19 = v18;
    v20 = swift_release(i);
    if (v19)
      v21 = v17;
    else
      v21 = 0;
    if (!v19)
      v19 = 0xE000000000000000;
    v26 = v5;
    v23 = v5[2];
    v22 = v5[3];
    if (v23 >= v22 >> 1)
    {
      v20 = sub_1001C1B0C(v22 > 1, v23 + 1, 1);
      v5 = v26;
    }
    v5[2] = v23 + 1;
    v24 = &v5[2 * v23];
    v24[4] = v21;
    v24[5] = v19;
    dispatch thunk of _AnyIteratorBoxBase.next()(v25, v20);
  }
  swift_release(v15);
  return v5;
}

_QWORD *sub_100255D24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD v24[2];
  _QWORD *v25;
  uint64_t v26;

  v26 = a1;
  v2 = sub_10001A630(&qword_100841C98);
  v3 = sub_1000A5F84(&qword_100841CC0, &qword_100841C98, (uint64_t)&protocol conformance descriptor for Series<A>);
  v4 = dispatch thunk of Sequence.underestimatedCount.getter(v2, v3);
  v25 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  v5 = _swiftEmptyArrayStorage;
  v24[0] = a1;
  swift_retain();
  result = (_QWORD *)dispatch thunk of Sequence.makeIterator()(v2, v3);
  if (v4 < 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  if (v4)
  {
    do
    {
      result = dispatch thunk of _AnyIteratorBoxBase.next()(v24, result);
      v7 = v24[0];
      if (!v24[0])
        goto LABEL_24;
      v8 = RDIntentClusterModel.predict(for:)(v24[0]);
      v10 = v9;
      result = (_QWORD *)swift_release(v7);
      if (v10)
        v11 = v8;
      else
        v11 = 0x20676E697373696DLL;
      if (!v10)
        v10 = 0xEE00746E65746E69;
      v25 = v5;
      v13 = v5[2];
      v12 = v5[3];
      if (v13 >= v12 >> 1)
      {
        result = (_QWORD *)sub_1001C1B0C(v12 > 1, v13 + 1, 1);
        v5 = v25;
      }
      v5[2] = v13 + 1;
      v14 = &v5[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
    }
    while (--v4);
  }
  v15 = v24[1];
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()(v24, result);
    v16 = v24[0];
    if (!v24[0])
      break;
    v17 = RDIntentClusterModel.predict(for:)(v24[0]);
    v19 = v18;
    result = (_QWORD *)swift_release(v16);
    if (v19)
      v20 = v17;
    else
      v20 = 0x20676E697373696DLL;
    if (!v19)
      v19 = 0xEE00746E65746E69;
    v25 = v5;
    v22 = v5[2];
    v21 = v5[3];
    if (v22 >= v21 >> 1)
    {
      result = (_QWORD *)sub_1001C1B0C(v21 > 1, v22 + 1, 1);
      v5 = v25;
    }
    v5[2] = v22 + 1;
    v23 = &v5[2 * v22];
    v23[4] = v20;
    v23[5] = v19;
  }
  swift_release(v15);
  return v5;
}

unint64_t sub_100255F80()
{
  unint64_t result;

  result = qword_100841CB0;
  if (!qword_100841CB0)
  {
    result = swift_getWitnessTable(&unk_1006B12C4, &_s19SampleTooSmallErrorVN);
    atomic_store(result, (unint64_t *)&qword_100841CB0);
  }
  return result;
}

uint64_t sub_100255FC4()
{
  return REMSuggestedAttributesTrainer.Parameters.coreBehavior.getter();
}

uint64_t sub_100255FE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

void sub_100256010(double *a1@<X8>)
{
  *a1 = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.validationRelativeSupport.getter();
}

void sub_100256038(double *a1@<X8>)
{
  *a1 = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.confidence.getter();
}

uint64_t sub_100256060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.feedbackResetVersion.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100256088@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.support.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002560B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.CoreBehavior.adjustment.getter();
  *a1 = result;
  return result;
}

void sub_1002560D8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100250398(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1002560F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100250448(a1, a2);
}

uint64_t sub_100256114@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10025061C(a1, 20, 0x5D7473694C3A585BLL, 0xE800000000000000, a2, (uint64_t (*)(_QWORD *))&REMSuggestedList.description.getter);
}

uint64_t sub_100256160@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100250528(a1, 20, 0x65576575443A565BLL, 0xEE005D7961446B65, a2);
}

uint64_t sub_1002561A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10025061C(a1, 26, 0x65576575443A585BLL, 0xEE005D7961446B65, a2, (uint64_t (*)(_QWORD *))&REMSuggestedWeekDay.description.getter);
}

uint64_t sub_1002561F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100250528(a1, 18, 0x7461636F4C3A565BLL, 0xEC0000005D6E6F69, a2);
}

uint64_t sub_100256234@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10025061C(a1, 24, 0x7461636F4C3A585BLL, 0xEC0000005D6E6F69, a2, (uint64_t (*)(_QWORD *))&dispatch thunk of ClassificationLabel.description.getter);
}

uint64_t sub_100256288(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      swift_retain(result);
      goto LABEL_4;
    case 3:
    case 4:
      goto LABEL_4;
    case 5:
      swift_bridgeObjectRetain(a2);
      a5 = a6;
LABEL_4:
      result = swift_bridgeObjectRetain(a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002562EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 1:
    case 2:
    case 6:
      swift_release(result);
      goto LABEL_4;
    case 3:
    case 4:
      goto LABEL_4;
    case 5:
      swift_bridgeObjectRelease(a2);
      a5 = a6;
LABEL_4:
      result = swift_bridgeObjectRelease(a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100256350()
{
  return REMSuggestedAttributesTrainer.Parameters.embedding.getter();
}

uint64_t sub_100256370@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.Embedding.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

void sub_10025639C(double *a1@<X8>)
{
  *a1 = REMSuggestedAttributesTrainer.Parameters.validationSetProportion.getter();
}

uint64_t sub_1002563C4(_QWORD *a1)
{
  return sub_10025076C(a1) & 1;
}

uint64_t sub_1002563E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.Embedding.neighborsToConsider.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100256408@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10025094C(a1, a2);
}

uint64_t sub_100256424@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1002509E4(a1, *(_QWORD **)(v2 + 24), a2);
}

uint64_t sub_100256440@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1002507CC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10025645C()
{
  return REMSuggestedAttributesTrainer.Parameters.anchoredBubble.getter();
}

uint64_t sub_10025647C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.enabledOniOS.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1002564A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.overrideLocalWordDistanceScale.getter();
  *a1 = result & 1;
  return result;
}

void sub_1002564D4(double *a1@<X8>)
{
  *a1 = REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.defaultWordDistanceScale.getter();
}

unint64_t sub_1002564FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008448D0;
  if (!qword_1008448D0)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_10083AE90, off_1007D6708);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1008448D0);
  }
  return result;
}

ValueMetadata *_s19SampleTooSmallErrorVMa()
{
  return &_s19SampleTooSmallErrorVN;
}

ValueMetadata *type metadata accessor for ModelSkippedError()
{
  return &type metadata for ModelSkippedError;
}

uint64_t *sub_100256574(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_10001A630(&qword_100841C80);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = (uint64_t)v10;
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = (uint64_t)v11;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v12 = v10;
    v13 = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_100256620(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100841C80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  return swift_release(*(_QWORD *)(a1 + a2[7]));
}

uint64_t sub_100256680(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v6 = sub_10001A630(&qword_100841C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = v9;
  v12 = v10;
  swift_retain();
  return a1;
}

uint64_t sub_100256704(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_10001A630(&qword_100841C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[6];
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  v15 = a3[7];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_retain();
  swift_release(v16);
  return a1;
}

uint64_t sub_1002567A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001A630(&qword_100841C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100256818(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_10001A630(&qword_100841C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  v11 = a3[7];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_1002568A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002568B4);
}

uint64_t sub_1002568B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_10001A630(&qword_100841C80);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100256934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100256940);
}

uint64_t sub_100256940(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A630(&qword_100841C80);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_1002569BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100256A40(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100256A40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100841DB8)
  {
    v2 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters(255);
    v3 = type metadata accessor for PartialOverride(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100841DB8);
  }
}

uint64_t _s8KeyTupleVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *_s8KeyTupleVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s8KeyTupleVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *_s8KeyTupleVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s8KeyTupleVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s8KeyTupleVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s8KeyTupleVMa()
{
  return &_s8KeyTupleVN;
}

unint64_t sub_100256C6C()
{
  unint64_t result;

  result = qword_100841DF0;
  if (!qword_100841DF0)
  {
    result = swift_getWitnessTable(&unk_1006B125C, &_s8KeyTupleVN);
    atomic_store(result, (unint64_t *)&qword_100841DF0);
  }
  return result;
}

uint64_t sub_100256CB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100256CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *, _QWORD *, __n128);
  __n128 v6;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v5 = *(uint64_t (**)(_QWORD *, _QWORD *, __n128))(a1 + 32);
  v10[3] = swift_getObjectType(a2);
  v10[0] = a2;
  v9[3] = swift_getObjectType(a3);
  v9[0] = a3;
  swift_unknownObjectRetain(a2);
  v6 = swift_unknownObjectRetain(a3);
  v7 = v5(v10, v9, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v9);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
  return v7;
}

uint64_t sub_100256D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100841DF8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100841DF8);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100256DEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100256E20 + 4 * byte_1006B1350[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_100256E20()
{
  return 1701869940;
}

uint64_t sub_100256E30()
{
  return 1701667182;
}

unint64_t sub_100256E40()
{
  return 0xD000000000000018;
}

uint64_t sub_100257070(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100256DEC(*a1);
  v5 = v4;
  v6 = sub_100256DEC(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1002570F8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_100256DEC(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100257158(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_100256DEC(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100257198(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_100256DEC(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002571F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100259B98(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100257220@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100256DEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100257248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100259B98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10025726C()
{
  unsigned __int8 *v0;

  return sub_100256DEC(*v0);
}

void sub_100257274(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF7E0;
}

uint64_t sub_100257284(char *a1, char *a2)
{
  return sub_1002B4270(*a1, *a2);
}

Swift::Int sub_100257290()
{
  char *v0;

  return sub_1004F4C1C(*v0);
}

uint64_t sub_100257298(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000016;
  else
    v2 = 0xD000000000000011;
  if (*v1)
    v3 = 0x80000001006F4270;
  else
    v3 = 0x80000001006F4250;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1002572F8(uint64_t a1)
{
  char *v1;

  return sub_1002B2440(a1, *v1);
}

uint64_t sub_100257300@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DBAE8;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10025730C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000016;
  else
    v2 = 0xD000000000000011;
  v3 = 0x80000001006F4250;
  if (*v1)
    v3 = 0x80000001006F4270;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100257350@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DBAE8;
  return sub_100149788(a1, v2, a2);
}

unint64_t sub_10025735C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000011;
}

void sub_10025739C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0048;
}

Swift::Int sub_1002573AC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x737473696CLL, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002573F8(uint64_t a1)
{
  return String.hash(into:)(a1, 0x737473696CLL, 0xE500000000000000);
}

Swift::Int sub_10025740C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x737473696CLL, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100257454@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E0070, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1002574A4(_QWORD *a1@<X8>)
{
  *a1 = 0x737473696CLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1002574BC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEEC8, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100257510()
{
  return 0x737473696CLL;
}

void sub_100257524(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E00A8;
}

uint64_t sub_100257534(char *a1, char *a2)
{
  return sub_1002B41C8(*a1, *a2);
}

Swift::Int sub_100257540()
{
  char *v0;

  return sub_1004F4CA0(*v0);
}

uint64_t sub_100257548(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD00000000000001ALL;
  else
    v2 = 0xD000000000000018;
  if (*v1)
    v3 = 0x80000001006F42B0;
  else
    v3 = 0x80000001006F4290;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1002575A8(uint64_t a1)
{
  char *v1;

  return sub_1002B24C0(a1, *v1);
}

uint64_t sub_1002575B0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DBB38;
  return sub_1001496D8(v2, a1, a2);
}

void sub_1002575BC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD00000000000001ALL;
  else
    v2 = 0xD000000000000018;
  v3 = 0x80000001006F4290;
  if (*v1)
    v3 = 0x80000001006F42B0;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100257600@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DBB38;
  return sub_100149788(a1, v2, a2);
}

unint64_t sub_10025760C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001ALL;
  else
    return 0xD000000000000018;
}

void sub_10025764C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E00D0;
}

void sub_10025765C()
{
  uint64_t v0;

  sub_100257678();
  qword_100871D60 = v0;
}

void sub_100257678()
{
  JUMPOUT(0x1002578A8);
}

NSString sub_100257A88(char a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  NSString v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t ObjCClassFromMetadata;
  uint64_t v24;
  id v26;
  uint64_t v27;
  _QWORD *v28;

  v3 = v1;
  if ((a1 & 1) != 0)
  {
    if (objc_msgSend(v1, "hasDeserializedListIDsMergeableOrdering"))
    {
      v4 = objc_msgSend(v1, "serializedListIDsMergeableOrdering");
      if (v4)
      {
        v5 = v4;
        v6 = (NSString)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v8 = v7;

      }
      else
      {
        v6 = 0;
        v8 = 0xF000000000000000;
      }
      v12 = sub_10001A630(&qword_10083A6E0);
      Optional.tryUnwrap(_:file:line:)(&v26, 0xD000000000000061, 0x80000001006FDDD0, 0xD00000000000008ELL, 0x80000001006FDE40, 702, v12);
      sub_1000A71B4((uint64_t)v6, v8);
      if (!v2)
      {
        v6 = v26;
        if (qword_100837058 != -1)
          swift_once(&qword_100837058, sub_100256D5C);
        v13 = type metadata accessor for Logger(0);
        sub_10001AAA8(v13, (uint64_t)qword_100841DF8);
        v14 = v3;
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.info.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 138543362;
          v18 = objc_msgSend(v14, "objectID");
          v26 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
          v19 = v28;
          *v28 = v18;

          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Serialized to data from REMListStorage.listIDsMergeableOrdering during ingesting. {objectID: %{public}@}", v17, 0xCu);
          v20 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v19, 1, v20);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v17, -1, -1);

        }
        else
        {

        }
      }
    }
    else
    {
      v10 = objc_msgSend(v1, "listIDsMergeableOrderingData");
      if (v10)
      {
        v11 = v10;
        v6 = (NSString)static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);

      }
      else
      {
        v21 = (void *)objc_opt_self(REMError);
        v22 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v22);
        v6 = String._bridgeToObjectiveC()();
        objc_msgSend(v21, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v6);

        swift_willThrow(v24);
      }
    }
  }
  else
  {
    v9 = objc_msgSend(v1, "listIDsMergeableOrdering");
    return 0;
  }
  return v6;
}

uint64_t sub_100257DE0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, char a8)
{
  void *v8;
  void *v9;
  id v17;
  NSString v18;
  unsigned int v19;
  id v20;
  void *v21;
  NSString v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  NSObject *log;
  uint64_t v40;
  _QWORD v41[2];
  _OWORD v42[2];
  uint64_t v43[4];

  v9 = v8;
  v17 = objc_msgSend(v8, "createResolutionTokenMapIfNecessary");
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "mergeWithMap:forKey:", a7, v18);

  if ((a8 & 1) == 0)
  {
    v20 = objc_msgSend(v9, "remObjectID");
    if (!v20)
    {
      if (qword_100837058 != -1)
        swift_once(&qword_100837058, sub_100256D5C);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_100841DF8);
      v25 = v9;
      swift_bridgeObjectRetain_n(a5, 2);
      v26 = v25;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        log = v27;
        v30 = (_QWORD *)swift_slowAlloc(8, -1);
        v40 = swift_slowAlloc(32, -1);
        v43[0] = v40;
        *(_DWORD *)v29 = 138412546;
        v31 = objc_msgSend(v26, "objectID");
        *(_QWORD *)&v42[0] = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, (char *)v42 + 8);
        *v30 = v31;

        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain(a5);
        *(_QWORD *)&v42[0] = sub_10001A820(a4, a5, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, (char *)v42 + 8);
        swift_bridgeObjectRelease_n(a5, 3);
        _os_log_impl((void *)&_mh_execute_header, log, v28, "Can't merge list ordering for account because remObjectID is nil {account.objectID: %@, key: %s}", (uint8_t *)v29, 0x16u);
        v32 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v30, 1, v32);
        swift_slowDealloc(v30, -1, -1);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a5, 2);
      }

      return 0;
    }
    v21 = v20;
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v9, "valueForKey:", v22);

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)(v42, v23);
      swift_unknownObjectRelease(v23);
    }
    else
    {
      memset(v42, 0, sizeof(v42));
    }
    sub_1000A5CA8((uint64_t)v42, (uint64_t)v43, (uint64_t *)&unk_10083D5B0);
    if (v43[3])
    {
      v33 = swift_dynamicCast(v41, v43, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v33)
        a1 = v41[0];
      else
        a1 = 0;
      if (v33)
        v34 = v41[1];
      else
        v34 = 0xF000000000000000;
      if (a3)
        goto LABEL_20;
    }
    else
    {
      sub_10000882C((uint64_t)v43, (uint64_t *)&unk_10083D5B0);
      a1 = 0;
      v34 = 0xF000000000000000;
      if (a3)
      {
LABEL_20:
        v35 = a3;
        v36 = sub_1002586AC(a1, v34, a6, a4, a5, v21);

        sub_1000A71B4(a1, v34);
        return v36;
      }
    }

    return a1;
  }

  if (!v19)
    return 0;
  sub_1000A70D0(a1, a2);
  return a1;
}

uint64_t sub_10025820C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[24];

  swift_beginAccess(a4 + 16, v11, 33, 0);
  v7 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
  v10 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0x8000000000000000;
  sub_10028D154(a2, v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a4 + 16) = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess(v11);
}

void sub_1002582A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_100258314(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  void *v25;
  _BYTE v26[32];

  sub_10001A670(a1, (uint64_t)v26);
  v5 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  if ((swift_dynamicCast(&v25, v26, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v6 = v25;
  sub_10001A670(a2, (uint64_t)v26);
  if ((swift_dynamicCast(&v25, v26, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {

    return 0;
  }
  v7 = v25;
  if ((objc_msgSend(v6, "daIsNotificationsCollection") & 1) != 0)
  {
    if ((objc_msgSend(v7, "daIsNotificationsCollection") & 1) != 0)
      goto LABEL_20;
    v8 = 0;
  }
  else if ((uint64_t)objc_msgSend(v6, "daDisplayOrder") < 1)
  {
    if (objc_msgSend(v7, "daIsNotificationsCollection"))
    {

      return 1;
    }
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (uint64_t)objc_msgSend(v6, "daDisplayOrder");
    if ((objc_msgSend(v7, "daIsNotificationsCollection") & 1) != 0)
    {
      if (!v8)
        goto LABEL_20;

      if (v8 < 0)
        return -1;
      return 1;
    }
  }
  if ((uint64_t)objc_msgSend(v7, "daDisplayOrder") >= 1)
  {
    v10 = objc_msgSend(v7, "daDisplayOrder");
    if ((id)v8 == v10)
    {
      if ((unint64_t)(v8 - 1) <= 0x7FFFFFFFFFFFFFFDLL)
      {

        return 0;
      }
      goto LABEL_20;
    }
    v18 = (uint64_t)v10;

    if (v8 < v18)
      return -1;
    return 1;
  }
  if (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {

    return -1;
  }
LABEL_20:
  v11 = objc_msgSend(v6, "remObjectID");
  v12 = objc_msgSend(v7, "remObjectID");
  if (v11)
  {
    swift_beginAccess(a3, v26, 32, 0);
    v13 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v14 = v11;
      v15 = sub_1002C66DC((uint64_t)v14);
      if ((v16 & 1) != 0)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
        swift_endAccess(v26);

        goto LABEL_31;
      }
      swift_endAccess(v26);

    }
    else
    {
      swift_endAccess(v26);
    }
  }
  v17 = -1;
LABEL_31:
  if (!v12)
    goto LABEL_39;
  swift_beginAccess(a3, v26, 32, 0);
  v19 = *a3;
  if (!*(_QWORD *)(*a3 + 16))
  {
    swift_endAccess(v26);
LABEL_38:
    v24 = v6;

    v6 = v11;
    v11 = v24;
LABEL_39:

    if (v17 == -1)
      return 0;
    else
      return -1;
  }
  v20 = v12;
  v21 = sub_1002C66DC((uint64_t)v20);
  if ((v22 & 1) == 0)
  {
    swift_endAccess(v26);

    v12 = v7;
    v11 = v6;
    v7 = v20;
    v6 = v20;
    goto LABEL_38;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
  swift_endAccess(v26);

  if (v17 == v23)
    return 0;
  if (v17 < v23)
    return -1;
  else
    return 1;
}

uint64_t type metadata accessor for REMAccountStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd27REMAccountStorageCDIngestor);
}

_UNKNOWN **sub_10025867C()
{
  return &off_1007EADF8;
}

_UNKNOWN **sub_100258688()
{
  return &off_1007EADC8;
}

_UNKNOWN **sub_100258694()
{
  return &off_1007EAD98;
}

_UNKNOWN **sub_1002586A0()
{
  return &off_1007EAD68;
}

uint64_t sub_1002586AC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[3];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  id v46;

  v7 = v6;
  if (a2 >> 60 == 15)
  {
    v8 = objc_msgSend(v6, "serializedData");
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);

  }
  else
  {
    objc_allocWithZone((Class)REMCRMergeableOrderedSet);
    sub_1000A70D0(a1, a2);
    v16 = a3;
    v30 = sub_100259BE8((uint64_t)v16);

    v46 = 0;
    v31 = objc_msgSend(v30, "mergedOrderedSetWithOrderedSet:error:", v7, &v46);
    v32 = v46;
    if (v31)
    {
      v33 = v31;
      v34 = v46;
      v35 = objc_msgSend(v33, "serializedData");
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);

      sub_1000A71B4(a1, a2);
    }
    else
    {
      v37 = v46;
      v38 = _convertNSErrorToError(_:)(v32);

      swift_willThrow(v39);
      if (qword_100837058 != -1)
        swift_once(&qword_100837058, sub_100256D5C);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_100841DF8);
      v18 = a6;
      swift_bridgeObjectRetain(a5);
      swift_errorRetain(v38);
      v19 = v18;
      swift_bridgeObjectRetain(a5);
      v20 = swift_errorRetain(v38);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc(32, -1);
        v24 = (_QWORD *)swift_slowAlloc(8, -1);
        v40 = (void *)swift_slowAlloc(64, -1);
        v46 = v40;
        *(_DWORD *)v23 = 138412802;
        v44 = (uint64_t)v19;
        v41 = a1;
        v25 = a4;
        v26 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        *v24 = v19;

        *(_WORD *)(v23 + 12) = 2080;
        swift_bridgeObjectRetain(a5);
        v44 = sub_10001A820(v25, a5, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        swift_bridgeObjectRelease_n(a5, 3);
        *(_WORD *)(v23 + 22) = 2080;
        swift_getErrorValue(v38, v43, v42);
        v27 = Error.localizedDescription.getter(v42[1], v42[2]);
        v44 = sub_10001A820(v27, v28, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        swift_bridgeObjectRelease();
        swift_errorRelease(v38);
        swift_errorRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to merge ordered set for {objectID: %@, key: %s, error: %s}", (uint8_t *)v23, 0x20u);
        v29 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v24, 1, v29);
        swift_slowDealloc(v24, -1, -1);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        swift_errorRelease(v38);
        sub_1000A71B4(v41, a2);
      }
      else
      {
        sub_1000A71B4(a1, a2);
        swift_errorRelease(v38);
        swift_bridgeObjectRelease_n(a5, 2);

        swift_errorRelease(v38);
        swift_errorRelease(v38);

      }
      return 0;
    }
  }
  return v9;
}

void sub_100258B18(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001D6124(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_100258B80(v4);
  *a1 = v2;
}

void sub_100258B80(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = v4;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_100259208((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
            v86 = sub_1001D52E4((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Int64);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D4DF0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1001D4DF0((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_100259208((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100259208(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1001D4FA4(&v24, &v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

id sub_100259474(void *a1)
{
  id v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  NSString v29;
  Class isa;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  objc_class *v37;
  Class v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  objc_class *v42;
  Class v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;

  v50 = 0;
  v3 = objc_msgSend(a1, "remObjectIDWithError:", &v50);
  v4 = v50;
  if (v3)
  {
    v5 = v3;
    v6 = v50;
    v49 = (int)objc_msgSend(a1, "type");
    v7 = objc_msgSend(a1, "name");
    if (v7)
    {
      v8 = v7;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

    }
    else
    {
      v10 = 0;
    }
    v13 = objc_msgSend(a1, "listIDsMergeableOrdering");
    if (v13)
    {
      v14 = v13;
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      if (qword_100837058 != -1)
        swift_once(&qword_100837058, sub_100256D5C);
      v18 = type metadata accessor for Logger(0);
      sub_10001AAA8(v18, (uint64_t)qword_100841DF8);
      v19 = v5;
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = v20;
        v23 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v22 = 138543362;
        v50 = v19;
        v24 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
        *v23 = v5;

        v25 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v23, 1, v25);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

      }
      v15 = 0;
      v17 = 0xC000000000000000;
    }
    if (v10)
      v26 = v10;
    else
      v26 = 0xE000000000000000;
    v27 = objc_allocWithZone((Class)REMAccountStorage);
    v28 = v5;
    v29 = String._bridgeToObjectiveC()();
    v1 = objc_msgSend(v27, "initWithObjectID:type:name:nullableListIDsMergeableOrdering:", v28, v49, v29, 0, swift_bridgeObjectRelease(v26).n128_f64[0]);

    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, "setListIDsMergeableOrderingData:", isa);

    objc_msgSend(v1, "setListIDsMergeableOrdering:", 0);
    v31 = objc_msgSend(a1, "externalIdentifier");
    objc_msgSend(v1, "setExternalIdentifier:", v31);

    v32 = objc_msgSend(a1, "externalModificationTag");
    objc_msgSend(v1, "setExternalModificationTag:", v32);

    v33 = objc_msgSend(a1, "daSyncToken");
    objc_msgSend(v1, "setDaSyncToken:", v33);

    v34 = objc_msgSend(a1, "daPushKey");
    objc_msgSend(v1, "setDaPushKey:", v34);

    v35 = objc_msgSend(a1, "daConstraintsDescriptionPath");
    objc_msgSend(v1, "setDaConstraintsDescriptionPath:", v35);

    objc_msgSend(v1, "setDaAllowsCalendarAddDeleteModify:", objc_msgSend(a1, "daAllowsCalendarAddDeleteModify"));
    objc_msgSend(v1, "setDaWasMigrated:", objc_msgSend(a1, "daWasMigrated"));
    objc_msgSend(v1, "setDaSupportsSharedCalendars:", objc_msgSend(a1, "daSupportsSharedCalendars"));
    objc_msgSend(v1, "setDebugSyncDisabled:", objc_msgSend(a1, "debugSyncDisabled"));
    objc_msgSend(v1, "setInactive:", objc_msgSend(a1, "inactive"));
    objc_msgSend(v1, "setDidChooseToMigrate:", objc_msgSend(a1, "didChooseToMigrate"));
    objc_msgSend(v1, "setDidChooseToMigrateLocally:", objc_msgSend(a1, "didChooseToMigrateLocally"));
    objc_msgSend(v1, "setDidFinishMigration:", objc_msgSend(a1, "didFinishMigration"));
    objc_msgSend(v1, "setPersistenceCloudSchemaVersion:", objc_msgSend(a1, "persistenceCloudSchemaVersion"));
    v36 = objc_msgSend(a1, "personID");
    objc_msgSend(v1, "setPersonID:", v36);

    v37 = (objc_class *)objc_msgSend(a1, "personIDSalt");
    v38 = v37;
    if (v37)
    {
      v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v41 = v40;

      v38 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v39, v41);
    }
    objc_msgSend(v1, "setPersonIDSalt:", v38);

    objc_msgSend(v1, "setResolutionTokenMap:", 0);
    v42 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
    v43 = v42;
    if (v42)
    {
      v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

      v43 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v44, v46);
    }
    objc_msgSend(v1, "setResolutionTokenMapData:", v43);

    objc_msgSend(v1, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));
    objc_msgSend(v1, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));
    sub_1000A71C8(v15, v17);

  }
  else
  {
    v11 = v50;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v12);
  }
  return v1;
}

uint64_t sub_100259B98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DBB88, a1, a2, &unk_100837A30);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1A)
    return 26;
  else
    return v3;
}

id sub_100259BE8(uint64_t a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v10;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = 0;
  v4 = objc_msgSend(v1, "initWithReplicaIDSource:serializedData:error:", a1, isa, &v10);

  v5 = v10;
  if (v4)
  {
    v6 = v10;
  }
  else
  {
    v7 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
  }
  return v4;
}

void sub_100259CB4(void *a1, void *a2)
{
  id v4;
  id v5;
  char v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::Bool v15;
  Swift::String v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  if (objc_msgSend(a1, "type") == (id)1)
  {
    v4 = objc_msgSend(a1, "objectID");
    v5 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v6 = static NSObject.== infix(_:_:)(v4);

    if ((v6 & 1) == 0)
    {
      v7 = objc_msgSend(a2, "managedObjectContext");
      if (v7
        && (v8 = v7, v9 = objc_msgSend(v7, "transactionAuthor"),
                     v8,
                     v9))
      {
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        v13._object = (void *)0x80000001006FA020;
        v13._countAndFlagsBits = 0xD000000000000010;
        if (String.hasPrefix(_:)(v13)
          || (v14._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(REMToolBundleIdentifier),
              v15 = String.hasPrefix(_:)(v14),
              swift_bridgeObjectRelease(),
              v15)
          || (v16._countAndFlagsBits = 0xD000000000000016,
              v16._object = (void *)0x80000001006FDDB0,
              String.hasPrefix(_:)(v16)))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v34 = v10;
          v35 = v12;
          v32 = 0x747365746378;
          v33 = 0xE600000000000000;
          v24 = sub_1000E525C();
          if ((StringProtocol.contains<A>(_:)(&v32, &type metadata for String, &type metadata for String, v24, v24) & 1) != 0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            if (qword_100837058 != -1)
              swift_once(&qword_100837058, sub_100256D5C);
            v25 = type metadata accessor for Logger(0);
            sub_10001AAA8(v25, (uint64_t)qword_100841DF8);
            swift_bridgeObjectRetain(v12);
            v27 = Logger.logObject.getter(v26);
            v28 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v27, v28))
            {
              v29 = (uint8_t *)swift_slowAlloc(12, -1);
              v30 = swift_slowAlloc(32, -1);
              v34 = v30;
              *(_DWORD *)v29 = 136315138;
              swift_bridgeObjectRetain(v12);
              v32 = sub_10001A820(v10, v12, &v34);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
              swift_bridgeObjectRelease_n(v12, 3);
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "Creating Extraneous Local Account {author: %s}", v29, 0xCu);
              swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v30, -1, -1);
              swift_slowDealloc(v29, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v12, 2);
            }
          }
        }
      }
      else
      {
        if (qword_100837058 != -1)
          swift_once(&qword_100837058, sub_100256D5C);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_100841DF8);
        v31 = a1;
        v18 = Logger.logObject.getter(v31);
        v19 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc(12, -1);
          v21 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v20 = 138412290;
          v34 = (uint64_t)v31;
          v22 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
          *v21 = v31;

          _os_log_impl((void *)&_mh_execute_header, v18, v19, "NSManagedObjectContext missing author when updating account.type {storage: %@}", v20, 0xCu);
          v23 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v21, 1, v23);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v20, -1, -1);

        }
        else
        {

        }
      }
    }
  }
}

void sub_10025A194(void *a1, uint64_t a2, SEL *a3, const char *a4, const char *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  char **v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v8 = objc_msgSend(a1, *a3);
  if (v8)
  {
    v9 = v8;
    if (qword_100837058 != -1)
      swift_once(&qword_100837058, sub_100256D5C);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100841DF8);
    v11 = v9;
    v12 = a1;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter(v13);
    v15 = &selRef_isConcealed;
    if (os_log_type_enabled(v13, v14))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543618;
      v18 = objc_msgSend(v12, "remObjectID");
      v41 = (uint64_t)v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v17 = v18;

      *(_WORD *)(v16 + 12) = 2048;
      v19 = objc_msgSend(v11, "topLevelElementIDs");
      v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

      if ((unint64_t)v21 >> 62)
      {
        if (v21 < 0)
          v39 = v21;
        else
          v39 = v21 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v21);
        v22 = _CocoaArrayWrapper.endIndex.getter(v39);

        swift_bridgeObjectRelease();
      }
      else
      {
        v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      swift_bridgeObjectRelease();
      v41 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);

      _os_log_impl((void *)&_mh_execute_header, v13, v14, a4, (uint8_t *)v16, 0x16u);
      v23 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v17, 1, v23);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      v15 = &selRef_isConcealed;
    }
    else
    {

    }
    v31 = objc_msgSend(v12, v15[432]);
    v32 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v33 = type metadata accessor for REMManualOrderingCDIngestor();
    v34 = swift_allocObject(v33, 32, 7);
    *(_QWORD *)(v34 + 16) = v31;
    *(_QWORD *)(v34 + 24) = v32;
    v35 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v36 = swift_allocObject(v35, 40, 7);
    *(_OWORD *)(v36 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v36 + 32) = v11;
    v41 = v36;
    specialized Array._endMutation()(v36);
    v37 = v41;
    v38 = v11;
    sub_1005D3458(v37, v34);
    swift_release(v34);
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_100837058 != -1)
      swift_once(&qword_100837058, sub_100256D5C);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_100841DF8);
    v40 = a1;
    v25 = Logger.logObject.getter(v40);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138543362;
      v29 = objc_msgSend(v40, "remObjectID");
      v41 = (uint64_t)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v28 = v29;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, a5, v27, 0xCu);
      v30 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10025A640(NSObject *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  _QWORD *v15;
  __n128 v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t ObjCClassFromMetadata;
  NSString v44;
  uint64_t v45;
  _QWORD v46[8];
  __n128 v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t *v54;
  void *v55;
  id v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  v50 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v50 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v50).n128_u64[0];
  v49 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v10);
  v13 = -[NSObject resolutionTokenMap](a1, "resolutionTokenMap");
  v56 = v12;
  if (v13)
  {
    v14 = v13;
    v15 = sub_100405C18((uint64_t)v13, a3);
    v51 = *(_QWORD *)(a3 + 16);
    if (v51)
    {
      v46[3] = v14;
      v46[7] = v9;
      v54 = a4;
      v52 = v4;
      v16 = swift_bridgeObjectRetain(a3);
      v46[4] = 0x80000001006F4290;
      v16.n128_u64[0] = 136315138;
      v47 = v16;
      v48 = "daIsNotificationsCollection";
      v46[5] = a3;
      v46[6] = "";
      v46[1] = (char *)&type metadata for Any + 8;
      v46[2] = 0x80000001006F4360;
      v53 = a1;
      v55 = a2;
      v57 = v15;
      __asm { BR              X8 }
    }

  }
  else
  {
    if (qword_100837058 != -1)
      swift_once(&qword_100837058, sub_100256D5C);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_100841DF8);
    swift_bridgeObjectRetain_n(a3, 2);
    v18 = a1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      LODWORD(v55) = v20;
      v21 = swift_slowAlloc(22, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      v23 = swift_slowAlloc(32, -1);
      v60 = v23;
      *(_DWORD *)v21 = 138543618;
      v24 = -[NSObject objectID](v18, "objectID");
      v58 = v24;
      v54 = &v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      v57 = v22;
      *v22 = v24;

      *(_WORD *)(v21 + 12) = 2082;
      v25 = *(_QWORD *)(a3 + 16);
      v26 = _swiftEmptyArrayStorage;
      if (v25)
      {
        v51 = v23;
        v52 = v21;
        v53 = v19;
        v58 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v25, 0);
        v26 = v58;
        v27 = (unsigned __int8 *)(a3 + 32);
        v28 = v58[2];
        v29 = 2 * v28;
        do
        {
          v30 = *v27++;
          v31 = sub_100256DEC(v30);
          v33 = v32;
          v58 = v26;
          v34 = v26[3];
          if (v28 >= v34 >> 1)
          {
            sub_1001C1B0C(v34 > 1, v28 + 1, 1);
            v26 = v58;
          }
          v26[2] = v28 + 1;
          v35 = &v26[v29];
          v35[4] = v31;
          v35[5] = v33;
          v29 += 2;
          ++v28;
          --v25;
        }
        while (v25);
        v12 = v56;
        v21 = v52;
        v19 = v53;
        v23 = v51;
      }
      v36 = Array.description.getter(v26, &type metadata for String);
      v38 = v37;
      swift_bridgeObjectRelease();
      v58 = (_QWORD *)sub_10001A820(v36, v38, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v54);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v55, "REMAccountStorageCDIngestor: merge(storage:into cdAccount:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v21, 0x16u);
      v39 = sub_10001A630((uint64_t *)&unk_100839E70);
      v40 = v57;
      swift_arrayDestroy(v57, 1, v39);
      swift_slowDealloc(v40, -1, -1);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v41 = (void *)objc_opt_self(REMError);
    v42 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v42);
    v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v41, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v44);

    swift_willThrow(v45);
  }

}

void sub_10025BAF4(id a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  uint64_t i;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  NSString v38;
  int64_t v39;
  double v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  void *v61;
  void *v62;
  id v63;
  NSString v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[5];
  _QWORD v78[6];
  void *v79;

  if ((a3 & 1) == 0)
  {
    v6 = objc_msgSend(a1, "listIDsToUndelete");
    v7 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v8 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

    v75 = v4;
    v68 = v7;
    if ((v9 & 0xC000000000000001) != 0)
    {
      if (v9 < 0)
        v11 = v9;
      else
        v11 = v9 & 0xFFFFFFFFFFFFFF8;
      v12 = __CocoaSet.makeIterator()(v11);
      v10 = Set.Iterator.init(_cocoa:)(v77, v12, v7, v8);
      v9 = v77[0];
      v71 = v77[1];
      v13 = v77[2];
      v14 = v77[3];
      v15 = v77[4];
    }
    else
    {
      v14 = 0;
      v22 = -1 << *(_BYTE *)(v9 + 32);
      v71 = v9 + 56;
      v13 = ~v22;
      v23 = -v22;
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v15 = v24 & *(_QWORD *)(v9 + 56);
    }
    v69 = (unint64_t)(v13 + 64) >> 6;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_20;
LABEL_17:
    v25 = __CocoaSet.Iterator.next()(v10);
    v26 = v75;
    if (v25)
    {
      v27 = v25;
      v76 = v25;
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v79, &v76, (char *)&type metadata for Swift.AnyObject + 8, v68, 7);
      v28 = v79;
      swift_unknownObjectRelease(v27);
      v29 = v14;
      for (i = v15; v28; v28 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v31))
      {
        sub_1003FBE64(0, v28, a4);
        if (v26)
        {
          v49 = v9;
          goto LABEL_79;
        }
        v35 = v34;
        v75 = 0;
        objc_msgSend(v34, "setParentAccount:", a2);
        v36 = objc_msgSend(v35, "createResolutionTokenMapIfNecessary");
        sub_100403B54(3);
        v37 = v9;
        v38 = String._bridgeToObjectiveC()();
        objc_msgSend(v36, "updateForKey:", v38, swift_bridgeObjectRelease().n128_f64[0]);

        v9 = v37;
        v14 = v29;
        v15 = i;
        if (v37 < 0)
          goto LABEL_17;
LABEL_20:
        v26 = v75;
        if (v15)
        {
          i = (v15 - 1) & v15;
          v31 = __clz(__rbit64(v15)) | (v14 << 6);
          v29 = v14;
        }
        else
        {
          v29 = v14 + 1;
          if (__OFADD__(v14, 1))
          {
            __break(1u);
            goto LABEL_85;
          }
          if (v29 >= v69)
            break;
          v32 = *(_QWORD *)(v71 + 8 * v29);
          if (!v32)
          {
            v33 = v14 + 2;
            if (v14 + 2 >= v69)
              break;
            v32 = *(_QWORD *)(v71 + 8 * v33);
            if (v32)
              goto LABEL_29;
            v33 = v14 + 3;
            if (v14 + 3 >= v69)
              break;
            v32 = *(_QWORD *)(v71 + 8 * v33);
            if (v32)
            {
LABEL_29:
              v29 = v33;
            }
            else
            {
              v29 = v14 + 4;
              if (v14 + 4 >= v69)
                break;
              v32 = *(_QWORD *)(v71 + 8 * v29);
              if (!v32)
              {
                v39 = v14 + 5;
                while (v69 != v39)
                {
                  v32 = *(_QWORD *)(v71 + 8 * v39++);
                  if (v32)
                  {
                    v29 = v39 - 1;
                    goto LABEL_30;
                  }
                }
                break;
              }
            }
          }
LABEL_30:
          i = (v32 - 1) & v32;
          v31 = __clz(__rbit64(v32)) + (v29 << 6);
        }
      }
    }
    v66 = v9;
LABEL_82:
    sub_1000C6560(v66);
    return;
  }
  v16 = objc_msgSend(a1, "smartListIDsToUndelete");
  v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v18 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  if ((v19 & 0xC000000000000001) != 0)
  {
    if (v19 < 0)
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFFFFFFFF8;
    v21 = __CocoaSet.count.getter(v20);
  }
  else
  {
    v21 = *(_QWORD *)(v19 + 16);
  }
  *(_QWORD *)&v40 = swift_bridgeObjectRelease().n128_u64[0];
  if (v21)
  {
    v41 = objc_msgSend(a1, "smartListIDsToUndelete", v40);
    v42 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v41, v17, v18);

    v67 = v17;
    if ((v42 & 0xC000000000000001) != 0)
    {
      if (v42 < 0)
        v44 = v42;
      else
        v44 = v42 & 0xFFFFFFFFFFFFFF8;
      v45 = __CocoaSet.makeIterator()(v44);
      v43 = Set.Iterator.init(_cocoa:)(v78, v45, v17, v18);
      v42 = v78[0];
      v72 = v78[1];
      v46 = v78[2];
      v47 = v78[3];
      v48 = v78[4];
    }
    else
    {
      v47 = 0;
      v50 = -1 << *(_BYTE *)(v42 + 32);
      v72 = v42 + 56;
      v51 = ~v50;
      v52 = -v50;
      if (v52 < 64)
        v53 = ~(-1 << v52);
      else
        v53 = -1;
      v48 = v53 & *(_QWORD *)(v42 + 56);
      v46 = v51;
    }
    v70 = (unint64_t)(v46 + 64) >> 6;
    if ((v42 & 0x8000000000000000) == 0)
      goto LABEL_57;
LABEL_54:
    v54 = __CocoaSet.Iterator.next()(v43);
    if (v54)
    {
      v55 = v54;
      v76 = v54;
      swift_unknownObjectRetain(v54);
      swift_dynamicCast(&v79, &v76, (char *)&type metadata for Swift.AnyObject + 8, v67, 7);
      v28 = v79;
      swift_unknownObjectRelease(v55);
      v56 = v47;
      v57 = v48;
      while (v28)
      {
        sub_1003FBE88(1, v28, a4);
        if (v4)
        {
          v49 = v42;
LABEL_79:
          sub_1000C6560(v49);

          return;
        }
        v62 = v61;
        objc_msgSend(v61, "setParentAccount:", a2);
        v63 = objc_msgSend(v62, "createResolutionTokenMapIfNecessary");
        sub_10040335C(1);
        v64 = String._bridgeToObjectiveC()();
        objc_msgSend(v63, "updateForKey:", v64, swift_bridgeObjectRelease().n128_f64[0]);

        v47 = v56;
        v48 = v57;
        if (v42 < 0)
          goto LABEL_54;
LABEL_57:
        if (v48)
        {
          v57 = (v48 - 1) & v48;
          v58 = __clz(__rbit64(v48)) | (v47 << 6);
          v56 = v47;
        }
        else
        {
          v56 = v47 + 1;
          if (__OFADD__(v47, 1))
          {
LABEL_85:
            __break(1u);
            return;
          }
          if (v56 >= v70)
            break;
          v59 = *(_QWORD *)(v72 + 8 * v56);
          if (!v59)
          {
            v60 = v47 + 2;
            if (v47 + 2 >= v70)
              break;
            v59 = *(_QWORD *)(v72 + 8 * v60);
            if (v59)
              goto LABEL_66;
            v60 = v47 + 3;
            if (v47 + 3 >= v70)
              break;
            v59 = *(_QWORD *)(v72 + 8 * v60);
            if (v59)
            {
LABEL_66:
              v56 = v60;
            }
            else
            {
              v56 = v47 + 4;
              if (v47 + 4 >= v70)
                break;
              v59 = *(_QWORD *)(v72 + 8 * v56);
              if (!v59)
              {
                v65 = v47 + 5;
                while (v70 != v65)
                {
                  v59 = *(_QWORD *)(v72 + 8 * v65++);
                  if (v59)
                  {
                    v56 = v65 - 1;
                    goto LABEL_67;
                  }
                }
                break;
              }
            }
          }
LABEL_67:
          v57 = (v59 - 1) & v59;
          v58 = __clz(__rbit64(v59)) + (v56 << 6);
        }
        v28 = *(id *)(*(_QWORD *)(v42 + 48) + 8 * v58);
      }
    }
    v66 = v42;
    goto LABEL_82;
  }
}

void sub_10025C1E4(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  Class isa;
  id v52;
  id v53;
  id v54;
  unsigned __int8 v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  id v65;
  unint64_t aBlock;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v65 = a2;
  v3 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v63 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - v9;
  v11 = swift_allocObject(&unk_1007EAEB0, 24, 7);
  *(_QWORD *)(v11 + 16) = _swiftEmptyDictionarySingleton;
  v12 = objc_msgSend((id)objc_opt_self(REMListStorage), "cdEntityName");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v60 = a1;
  v16 = sub_1000A866C(v13, v15);
  swift_bridgeObjectRelease();
  v70 = sub_10025F8C0;
  v71 = v11;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v67 = 1107296256;
  v68 = sub_100256CB0;
  v69 = &unk_1007EAEC8;
  v17 = _Block_copy(&aBlock);
  v18 = v71;
  v59 = v11;
  swift_retain();
  swift_release(v18);
  objc_msgSend(v16, "enumerateObjectsUsingBlock:", v17);
  _Block_release(v17);

  v19 = swift_allocObject(&unk_1007EAF00, 24, 7);
  *(_QWORD *)(v19 + 16) = v11 + 16;
  v20 = swift_allocObject(&unk_1007EAF28, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10025F8D8;
  *(_QWORD *)(v20 + 24) = v19;
  v58 = v19;
  v70 = sub_1000098EC;
  v71 = v20;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v67 = 1107296256;
  v68 = sub_100256CD4;
  v69 = &unk_1007EAF40;
  v21 = _Block_copy(&aBlock);
  v22 = v71;
  swift_retain();
  swift_release(v22);
  v23 = objc_msgSend(v65, "sortedArrayWithOptions:usingComparator:", 16, v21);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v20, "", 142, 519, 104, 1);
  swift_release(v20);
  if ((v21 & 1) != 0)
  {
    __break(1u);
LABEL_20:
    if (v20 < 0)
      v49 = v20;
    else
      v49 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v28 = _CocoaArrayWrapper.endIndex.getter(v49);
    v29 = v64;
    if (v28)
      goto LABEL_4;
LABEL_24:
    swift_bridgeObjectRelease();
    v48 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

  aBlock = v24;
  v25 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v26 = sub_10001A630(&qword_1008442B0);
  v27 = sub_1000A5F84(&qword_100842038, &qword_1008442B0, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = Sequence.elements<A>(ofType:)(v25, v26, v25, v27);
  swift_bridgeObjectRelease();
  aBlock = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v20 >> 62)
    goto LABEL_20;
  v28 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v20);
  v29 = v64;
  if (!v28)
    goto LABEL_24;
LABEL_4:
  if (v28 < 1)
  {
    __break(1u);
    return;
  }
  v30 = 0;
  v65 = (id)(v20 & 0xC000000000000001);
  v61 = v28;
  v62 = v7;
  do
  {
    if (v65)
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v20);
    else
      v31 = *(id *)(v20 + 8 * v30 + 32);
    v32 = v31;
    v33 = objc_msgSend(v31, "identifier");
    if (v33)
    {
      v34 = v33;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v35 = 0;
    }
    else
    {
      v35 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v7, v35, 1, v3);
    sub_1000A5CA8((uint64_t)v7, (uint64_t)v10, (uint64_t *)&unk_100839C80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v10, 1, v3))
    {
      sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);

    }
    else
    {
      v36 = v3;
      v37 = v20;
      v38 = v63;
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v63, v10, v3);
      v39 = v10;
      v40 = sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
      UUID.uuidString.getter(v40);
      v41 = v36;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v36);
      v42 = String._bridgeToObjectiveC()();

      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v42);
      specialized Array._endMutation()(v46);
      v20 = v37;
      v29 = v64;
      v28 = v61;
      v7 = v62;
      v47 = v41;
      v10 = v39;
      v3 = v47;
    }
    ++v30;
  }
  while (v28 != v30);
  swift_bridgeObjectRelease();
  v48 = (_QWORD *)aBlock;
LABEL_25:
  swift_bridgeObjectRelease();
  sub_1001E060C((uint64_t)v48);
  swift_bridgeObjectRelease();
  v50 = objc_allocWithZone((Class)NSOrderedSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v50, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v53 = v60;
  v54 = objc_msgSend(v60, "orderedSet");
  v55 = objc_msgSend(v54, "isEqual:", v52);

  if ((v55 & 1) != 0)
  {
    v53;
    swift_release(v58);
    swift_release(v59);
  }
  else
  {
    v56 = objc_msgSend(v53, "replicaIDSource");
    objc_msgSend(objc_allocWithZone((Class)REMCRMergeableOrderedSet), "initWithReplicaIDSource:orderedSet:", v56, v52);
    swift_release(v58);
    swift_release(v59);

  }
}

void sub_10025C880(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  id v11;
  __n128 v12;
  unint64_t v13;
  unint64_t *v14;
  char *v15;
  char **v16;
  __objc2_class **v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __objc2_class **v23;
  unint64_t *v24;
  char **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  id v61;
  void *v62;
  char *v63;
  char *v64;
  char *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  int v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  id v117;
  _BYTE v118[32];
  _OWORD v119[2];
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v110 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v107 = (char *)&v106 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v111 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v109 = (uint64_t)&v106 - v6;
  v7 = type metadata accessor for NSFastEnumerationIterator(0);
  v115 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _swiftEmptyArrayStorage;
  v122 = (uint64_t)_swiftEmptyArrayStorage;
  v11 = a1;
  NSOrderedSet.makeIterator()(v12);

  v13 = sub_10025F8F0();
  dispatch thunk of IteratorProtocol.next()(&v120, v7, v13);
  if (v121)
  {
    v14 = (unint64_t *)&qword_100839900;
    v15 = (char *)&type metadata for Any + 8;
    v16 = &selRef_rd_isExcludedFromBackup;
    v17 = off_1007D66E0;
    *(_QWORD *)&v116 = (char *)&type metadata for Any + 8;
    do
    {
      sub_10001A6CC(&v120, v119);
      sub_10001A670((uint64_t)v119, (uint64_t)v118);
      v18 = sub_1000151B0(0, v14, v17);
      if (swift_dynamicCast(&v117, v118, v15, v18, 6))
      {
        v19 = v117;
        if ((objc_msgSend(v117, v16[5]) & 1) == 0)
        {
          v20 = v13;
          v21 = v9;
          v22 = v7;
          v23 = v17;
          v24 = v14;
          v25 = v16;
          v26 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v119);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          v28 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v27 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v28 >= v27 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1);
          v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v19);
          specialized Array._endMutation()(v29);
          v16 = v25;
          v14 = v24;
          v17 = v23;
          v7 = v22;
          v9 = v21;
          v13 = v20;
          v15 = (char *)v116;
          goto LABEL_5;
        }

      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v119);
LABEL_5:
      dispatch thunk of IteratorProtocol.next()(&v120, v7, v13);
    }
    while (v121);
  }
  (*(void (**)(char *, uint64_t))(v115 + 8))(v9, v7);
  v114 = v122;
  if ((unint64_t)v122 >> 62)
  {
    if (v122 < 0)
      v41 = v122;
    else
      v41 = v122 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v122);
    v30 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v30)
      goto LABEL_13;
  }
  else
  {
    v30 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v30)
    {
LABEL_13:
      *(_QWORD *)&v120 = _swiftEmptyArrayStorage;
      sub_1001C2238(0, v30 & ~(v30 >> 63), 0);
      if (v30 < 0)
      {
LABEL_80:
        __break(1u);
        swift_release(v120);
        __break(1u);
        return;
      }
      v31 = 0;
      v10 = (_QWORD *)v120;
      v32 = v114;
      v33 = v114 & 0xC000000000000001;
      v34 = v112;
      do
      {
        if (v33)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v32);
        else
          v35 = *(id *)(v32 + 8 * v31 + 32);
        v36 = v35;
        v37 = objc_msgSend(v35, "daDisplayOrder");

        *(_QWORD *)&v120 = v10;
        v39 = v10[2];
        v38 = v10[3];
        v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          sub_1001C2238(v38 > 1, v39 + 1, 1);
          v32 = v114;
          v10 = (_QWORD *)v120;
        }
        ++v31;
        v10[2] = v40;
        v10[v39 + 4] = v37;
      }
      while (v30 != v31);
      goto LABEL_27;
    }
  }
  v40 = _swiftEmptyArrayStorage[2];
  v42 = _swiftEmptyArrayStorage;
  v34 = v112;
  if (v40)
  {
LABEL_27:
    v43 = 0;
    v42 = _swiftEmptyArrayStorage;
    do
    {
      v46 = v10[v43 + 4];
      if (v46 >= 1)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        *(_QWORD *)&v120 = v42;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001C2238(0, v42[2] + 1, 1);
          v42 = (_QWORD *)v120;
        }
        v45 = v42[2];
        v44 = v42[3];
        if (v45 >= v44 >> 1)
        {
          sub_1001C2238(v44 > 1, v45 + 1, 1);
          v42 = (_QWORD *)v120;
        }
        v42[2] = v45 + 1;
        v42[v45 + 4] = v46;
      }
      ++v43;
    }
    while (v40 != v43);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v120 = v42;
  swift_retain();
  sub_100258B18((uint64_t *)&v120);
  swift_release(v42);
  v113 = v120;
  v48 = v111;
  if (qword_100837058 != -1)
    goto LABEL_78;
  while (1)
  {
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001AAA8(v49, (uint64_t)qword_100841DF8);
    v51 = v114;
    swift_bridgeObjectRetain(v114);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.info.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v55 = 134217984;
      *(_QWORD *)&v120 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, (char *)&v120 + 8);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Going to back propagate ordering changes to CD lists {listsCount: %ld}", v55, 0xCu);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v56 = v51;
    if (v30 < 0)
    {
      __break(1u);
      goto LABEL_80;
    }
    v106 = v50;
    if (!v30)
      break;
    v115 = v30;
    v57 = 0;
    v30 = 0;
    *(_QWORD *)&v116 = *(_QWORD *)(v113 + 16);
    v58 = v51 & 0xC000000000000001;
    v108 = v113 + 32;
    v59 = _swiftEmptyArrayStorage;
    while (1)
    {
      v61 = v58
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v56)
          : *(id *)(v56 + 8 * v30 + 32);
      v62 = v61;
      v63 = (char *)objc_msgSend(v61, "daDisplayOrder", v106);
      v64 = v63;
      if (v30 >= (unint64_t)v116)
      {
        v65 = 0;
      }
      else
      {
        if ((unint64_t)v30 >= *(_QWORD *)(v113 + 16))
          goto LABEL_77;
        v65 = *(char **)(v108 + 8 * v30);
      }
      if (__OFADD__(v57, 1))
        break;
      if ((uint64_t)(v57 + 1) <= (uint64_t)v65)
        v57 = v65;
      else
        ++v57;
      if (v63 != v57)
      {
        objc_msgSend(v62, "setDaDisplayOrder:", v57);
        v66 = objc_msgSend(v62, "identifier");
        if (v66)
        {
          v67 = v66;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v66);

          v68 = 0;
        }
        else
        {
          v68 = 1;
        }
        v69 = v110;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v48, v68, 1, v110);
        v70 = (uint64_t)v48;
        v71 = v109;
        sub_1000A5CA8(v70, v109, (uint64_t *)&unk_100839C80);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v71, 1, v69))
        {
          sub_10000882C(v71, (uint64_t *)&unk_100839C80);
          v72 = 0;
          v73 = 0;
        }
        else
        {
          v74 = v107;
          (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v107, v71, v69);
          v75 = sub_10000882C(v71, (uint64_t *)&unk_100839C80);
          v76 = v69;
          v72 = UUID.uuidString.getter(v75);
          v77 = v34;
          v73 = v78;
          (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v76);
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
          v59 = sub_1002CA338(0, v59[2] + 1, 1, v59);
        v80 = v59[2];
        v79 = v59[3];
        if (v80 >= v79 >> 1)
          v59 = sub_1002CA338((_QWORD *)(v79 > 1), v80 + 1, 1, v59);
        v59[2] = v80 + 1;
        v60 = &v59[4 * v80];
        v60[4] = v72;
        v60[5] = v73;
        v60[6] = v64;
        v60[7] = v57;
        v34 = v112;
        v48 = v111;
        v56 = v114;
      }
      ++v30;

      if (v115 == v30)
        goto LABEL_67;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_once(&qword_100837058, sub_100256D5C);
  }
  v59 = _swiftEmptyArrayStorage;
LABEL_67:
  swift_release(v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v59);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.info.getter(v82);
  if (os_log_type_enabled(v82, (os_log_type_t)v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = swift_slowAlloc(32, -1);
    v86 = v85;
    *(_QWORD *)&v120 = v85;
    *(_DWORD *)v84 = 136315138;
    v87 = v59[2];
    v88 = _swiftEmptyArrayStorage;
    if (v87)
    {
      v112 = v85;
      LODWORD(v113) = v83;
      v114 = (uint64_t)v84;
      v115 = (uint64_t)v82;
      *(_QWORD *)&v119[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v59);
      sub_1001C225C(0, v87, 0);
      v88 = *(_QWORD **)&v119[0];
      v89 = v59 + 7;
      v116 = xmmword_1006A3C40;
      do
      {
        v90 = *(v89 - 3);
        v91 = *(v89 - 2);
        v92 = *(v89 - 1);
        v93 = *v89;
        v94 = sub_10001A630((uint64_t *)&unk_10083A270);
        v95 = swift_allocObject(v94, 112, 7);
        *(_OWORD *)(v95 + 16) = v116;
        *(_QWORD *)(v95 + 56) = &type metadata for Int64;
        *(_QWORD *)(v95 + 64) = &protocol witness table for Int64;
        *(_QWORD *)(v95 + 72) = v93;
        *(_QWORD *)(v95 + 32) = v92;
        *(_QWORD *)(v95 + 96) = &type metadata for Int64;
        *(_QWORD *)(v95 + 104) = &protocol witness table for Int64;
        swift_bridgeObjectRetain_n(v91, 2);
        v96 = String.init(format:_:)(0x203E2D2D20646C25, 0xEB00000000646C25, v95);
        v98 = v97;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v119[0] = v88;
        v100 = v88[2];
        v99 = v88[3];
        if (v100 >= v99 >> 1)
        {
          sub_1001C225C(v99 > 1, v100 + 1, 1);
          v88 = *(_QWORD **)&v119[0];
        }
        v89 += 4;
        v88[2] = v100 + 1;
        v101 = &v88[4 * v100];
        v101[4] = v90;
        v101[5] = v91;
        v101[6] = v96;
        v101[7] = v98;
        --v87;
      }
      while (v87);
      swift_bridgeObjectRelease();
      v84 = (uint8_t *)v114;
      v82 = v115;
      LOBYTE(v83) = v113;
      v86 = v112;
    }
    v102 = sub_10001A630(&qword_10083F4B8);
    v103 = Array.description.getter(v88, v102);
    v105 = v104;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v119[0] = sub_10001A820(v103, v105, (uint64_t *)&v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "Back propagated ordering changes to CD lists - {changes: %s}", v84, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v59, 2);
  }
}

void sub_10025D334(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  char **v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  void ***v36;
  void **v37;
  uint64_t v38;
  uint8_t *v39;
  void **v40;
  uint64_t *v41;
  void **v42;
  char v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  _QWORD *v49;
  void **v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSString v56;
  double v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t ObjCClassFromMetadata;
  NSString v63;
  id v64;
  NSObject *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void **v71;
  id v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  NSObject *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint8_t *v87;
  uint64_t v88;
  NSObject *v89;
  id v90;
  id v91;
  void **v92;
  NSObject *v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  id v107;
  void *v108;
  BOOL v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  NSObject *v131;
  uint64_t v132;
  _QWORD *v133;
  void **v134;
  id v135;
  void **v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  id v144;
  void **v145;
  NSObject *v146;
  int v147;
  _BOOL4 v148;
  _WORD *v149;
  uint8_t *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  id v162;
  void *v163;
  id v164;
  void *v165;
  uint64_t v166;
  id v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  id v176;
  NSObject *v177;
  os_log_type_t v178;
  uint64_t v179;
  _QWORD *v180;
  void **v181;
  id v182;
  uint64_t v183;
  id v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  os_log_t v194;
  uint64_t v195;
  uint8_t *v196;
  void **v197;
  NSString v198;
  void **v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  void **v205;
  id v206;
  void **v207;
  NSObject *v208;
  os_log_type_t v209;
  uint64_t v210;
  void *v211;
  id v212;
  void *v213;
  id v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double v218;
  id v219;
  id v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  id v225;
  NSObject *v226;
  os_log_type_t v227;
  void *v228;
  uint8_t *v229;
  void *v230;
  id v231;
  void *v232;
  id v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  _BYTE *v237;
  uint64_t v238;
  void *v239;
  NSString v240;
  id v241;
  void *v242;
  uint64_t v243;
  void *v244;
  id v245;
  id v246;
  id v247;
  id v248;
  id v249;
  NSObject *v250;
  int v251;
  uint64_t v252;
  id v253;
  void *v254;
  id v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  id v260;
  id v261;
  id v262;
  void *v263;
  id v264;
  unsigned __int8 v265;
  id v266;
  unsigned int v267;
  uint64_t v268;
  _BYTE v269[12];
  int v270;
  _QWORD *v271;
  void **v272;
  uint8_t *v273;
  NSObject *v274;
  void **v275;
  id v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE *v279;
  NSObject *v280;
  void *v281;
  uint64_t v282;
  _BYTE *v283;
  _BYTE *v284;
  os_log_t v285;
  _BYTE *v286;
  void *v287;
  void *v288;
  void *v289;
  _BYTE *v290;
  uint64_t v291;
  id v292;
  _OWORD v293[2];
  uint64_t v294;
  id v295;
  void **aBlock;
  uint64_t v297;
  void (*v298)(uint64_t, void *);
  void *v299;
  uint64_t (*v300)(uint64_t, int, uint64_t);
  uint64_t v301;

  v6 = v4;
  v11 = (_QWORD *)type metadata accessor for UUID(0);
  v12 = *(v11 - 1);
  __chkstk_darwin(v11);
  v286 = &v269[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v278 = &v269[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v279 = &v269[-v17];
  __chkstk_darwin(v18);
  v284 = &v269[-v19];
  __chkstk_darwin(v20);
  v283 = &v269[-v21];
  __chkstk_darwin(v22);
  v285 = (os_log_t)&v269[-v23];
  *(_QWORD *)&v25 = __chkstk_darwin(v24).n128_u64[0];
  v290 = &v269[-v26];
  v27 = objc_msgSend(a3, "listsDADisplayOrderChanged", v25);
  v28 = &selRef_rd_isExcludedFromBackup;
  v291 = v12;
  v292 = v11;
  v281 = a2;
  v282 = a4;
  if (v27)
  {
    v289 = a1;
    if (qword_100837058 != -1)
      swift_once(&qword_100837058, sub_100256D5C);
    v29 = type metadata accessor for Logger(0);
    v30 = (void *)sub_10001AAA8(v29, (uint64_t)qword_100841DF8);
    v31 = a3;
    v288 = v30;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(12, -1);
      v287 = a3;
      v35 = (uint8_t *)v34;
      v36 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      v37 = (void **)-[NSObject remObjectID](v31, "remObjectID");
      aBlock = v37;
      v28 = &selRef_rd_isExcludedFromBackup;
      v12 = v291;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v297);
      *v36 = v37;
      v6 = v4;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Some lists have changes in .daDisplayOrder so DA display orders is taking precedence as the true sort hint - {account: %@}", v35, 0xCu);
      v38 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      v39 = v35;
      a3 = v287;
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    a1 = v289;
    v40 = (void **)objc_msgSend(v31, v28[96]);
    v41 = (uint64_t *)v282;
    if (!v40)
    {
      v45 = v31;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(22, -1);
        v49 = (_QWORD *)swift_slowAlloc(8, -1);
        v50 = (void **)swift_slowAlloc(32, -1);
        aBlock = v50;
        *(_DWORD *)v48 = 138543618;
        v51 = -[NSObject objectID](v45, "objectID");
        *(_QWORD *)&v293[0] = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
        *v49 = v51;

        *(_WORD *)(v48 + 12) = 2082;
        *(_QWORD *)&v293[0] = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v48, 0x16u);
        v52 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v49, 1, v52);
        swift_slowDealloc(v49, -1, -1);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {

      }
      v60 = (void *)objc_opt_self(REMError);
      v61 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v61);
      v63 = String._bridgeToObjectiveC()();
      v64 = objc_msgSend(v60, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v63);
      goto LABEL_90;
    }
    v42 = v40;
    v280 = v31;
    sub_10025C1E4(v40, a1);
    if (v6)
    {

      return;
    }
    v276 = v44;
    if ((v43 & 1) == 0)
    {
      a2 = v281;
LABEL_34:
      -[NSObject setListsDADisplayOrderChanged:](v280, "setListsDADisplayOrderChanged:", 0);

      goto LABEL_35;
    }
    v53 = v280;
    v54 = -[NSObject resolutionTokenMap](v280, "resolutionTokenMap");
    if (!v54)
    {
      v65 = v53;
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = swift_slowAlloc(22, -1);
        v69 = swift_slowAlloc(8, -1);
        v275 = v42;
        v70 = (_QWORD *)v69;
        v71 = (void **)swift_slowAlloc(32, -1);
        aBlock = v71;
        *(_DWORD *)v68 = 138543618;
        v72 = -[NSObject objectID](v65, "objectID");
        *(_QWORD *)&v293[0] = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
        *v70 = v72;

        *(_WORD *)(v68 + 12) = 2082;
        *(_QWORD *)&v293[0] = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "REMAccountStorageCDIngestor: mutateOrdering() cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v68, 0x16u);
        v73 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v70, 1, v73);
        v74 = v70;
        v42 = v275;
        swift_slowDealloc(v74, -1, -1);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v68, -1, -1);

      }
      else
      {

      }
      v80 = (void *)objc_opt_self(REMError);
      v81 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      v82 = swift_getObjCClassFromMetadata(v81);
      v83 = String._bridgeToObjectiveC()();
      objc_msgSend(v80, "unexpectedNilPropertyWithClass:property:", v82, v83);

      swift_willThrow(v84);
      return;
    }
    v275 = v42;
    v277 = 0;
    v55 = v54;
    sub_100403B30(3);
    v56 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
    v274 = v55;
    -[NSObject updateForKey:](v55, "updateForKey:", v56, v57);

    -[NSObject setListIDsMergeableOrdering:](v53, "setListIDsMergeableOrdering:", v276);
    v58 = objc_msgSend(a1, "firstObject");
    if (v58)
    {
      v59 = v58;
      _bridgeAnyObjectToAny(_:)(v293, v58);
      swift_unknownObjectRelease(v59);
    }
    else
    {
      memset(v293, 0, sizeof(v293));
    }
    a2 = v281;
    sub_1000A5CA8((uint64_t)v293, (uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    v6 = v277;
    v42 = v275;
    if (v299)
    {
      v75 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v76 = swift_dynamicCast(&v295, &aBlock, (char *)&type metadata for Any + 8, v75, 6);
      if ((v76 & 1) != 0)
      {
        v287 = a3;
        v77 = v295;
        v78 = objc_msgSend(v295, "account");
        if (v78)
        {
          v79 = v78;
          sub_10025A640(v280, v78, (uint64_t)&off_1007E00F8, v41);
          if (v6)
          {

            return;
          }

          a3 = v287;
          goto LABEL_33;
        }

        a3 = v287;
      }
    }
    else
    {
      v76 = sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
    }
    v79 = Logger.logObject.getter(v76);
    v85 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v79, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v85, "Cannot get any REMCDAccount from the ordered set of lists in the account.", v86, 2u);
      v87 = v86;
      v6 = v277;
      swift_slowDealloc(v87, -1, -1);
    }
LABEL_33:

    a1 = v289;
    goto LABEL_34;
  }
LABEL_35:
  v277 = v6;
  if (qword_100837058 != -1)
    swift_once(&qword_100837058, sub_100256D5C);
  v88 = type metadata accessor for Logger(0);
  v89 = sub_10001AAA8(v88, (uint64_t)qword_100841DF8);
  v90 = a1;
  v91 = a3;
  v92 = (void **)v90;
  v280 = v89;
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v93, (os_log_type_t)v94))
  {

    goto LABEL_64;
  }
  v270 = v94;
  v274 = v93;
  v95 = swift_slowAlloc(22, -1);
  v96 = (_QWORD *)swift_slowAlloc(8, -1);
  v272 = (void **)swift_slowAlloc(32, -1);
  aBlock = v272;
  *(_DWORD *)v95 = 138412546;
  v97 = objc_msgSend(v91, "remObjectID");
  *(_QWORD *)&v293[0] = v97;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
  v271 = v96;
  *v96 = v97;
  v276 = v91;

  v273 = (uint8_t *)v95;
  *(_WORD *)(v95 + 12) = 2080;
  v275 = v92;
  *(_QWORD *)&v293[0] = v92;
  v98 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v99 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
  v100 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v101 = Sequence.elements<A>(ofType:)(v98, v99, v98, v100);
  v102 = v101;
  if ((unint64_t)v101 >> 62)
  {
    if (v101 < 0)
      v126 = v101;
    else
      v126 = v101 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v101);
    v103 = _CocoaArrayWrapper.endIndex.getter(v126);
    v104 = (uint64_t)v285;
    if (v103)
      goto LABEL_40;
  }
  else
  {
    v103 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v101);
    v104 = (uint64_t)v285;
    if (v103)
    {
LABEL_40:
      if (v103 < 1)
      {
        __break(1u);
LABEL_127:
        if (v104 < 0)
          v268 = v104;
        else
          v268 = v104 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v104);
        v156 = _CocoaArrayWrapper.endIndex.getter(v268);
        goto LABEL_68;
      }
      v105 = 0;
      v289 = (void *)(v102 & 0xC000000000000001);
      v106 = _swiftEmptyArrayStorage;
      v287 = (void *)v103;
      v288 = (void *)v102;
      v107 = v292;
      do
      {
        if (v289)
          v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v105, v102);
        else
          v110 = *(id *)(v102 + 8 * v105 + 32);
        v111 = v110;
        v112 = objc_msgSend(v110, "identifier");
        if (v112)
        {
          v113 = v112;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v112);

          v114 = 0;
        }
        else
        {
          v114 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v12 + 56))(v104, v114, 1, v107);
        v115 = v290;
        v116 = v12;
        sub_1000A5CA8(v104, (uint64_t)v290, (uint64_t *)&unk_100839C80);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, id))(v12 + 48))(v115, 1, v107))
        {
          sub_10000882C((uint64_t)v115, (uint64_t *)&unk_100839C80);

          v108 = v287;
        }
        else
        {
          v117 = (uint64_t)v115;
          v118 = v286;
          (*(void (**)(_BYTE *, uint64_t, id))(v12 + 16))(v286, v117, v107);
          v119 = sub_10000882C(v117, (uint64_t *)&unk_100839C80);
          v120 = UUID.uuidString.getter(v119);
          v122 = v121;
          (*(void (**)(_BYTE *, id))(v116 + 8))(v118, v107);

          if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
            v106 = sub_1002C8224(0, v106[2] + 1, 1, v106);
          v108 = v287;
          v124 = v106[2];
          v123 = v106[3];
          if (v124 >= v123 >> 1)
            v106 = sub_1002C8224((_QWORD *)(v123 > 1), v124 + 1, 1, v106);
          v106[2] = v124 + 1;
          v125 = &v106[2 * v124];
          v125[4] = v120;
          v125[5] = v122;
          v12 = v291;
          v104 = (uint64_t)v285;
        }
        v109 = v108 == (void *)++v105;
        v102 = (uint64_t)v288;
      }
      while (!v109);
      goto LABEL_63;
    }
  }
  v106 = _swiftEmptyArrayStorage;
LABEL_63:
  swift_bridgeObjectRelease_n(v102, 2);
  v127 = v273;
  v128 = Array.description.getter(v106, &type metadata for String);
  v130 = v129;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v293[0] = sub_10001A820(v128, v130, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
  v92 = v275;

  swift_bridgeObjectRelease();
  v131 = v274;
  _os_log_impl((void *)&_mh_execute_header, v274, (os_log_type_t)v270, "sorting ordered set account.lists - before - {account: %@, lists: %s}", v127, 0x16u);
  v132 = sub_10001A630((uint64_t *)&unk_100839E70);
  v133 = v271;
  swift_arrayDestroy(v271, 1, v132);
  swift_slowDealloc(v133, -1, -1);
  v134 = v272;
  swift_arrayDestroy(v272, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v134, -1, -1);
  swift_slowDealloc(v127, -1, -1);

  a2 = v281;
  v28 = &selRef_rd_isExcludedFromBackup;
  v91 = v276;
LABEL_64:
  v135 = objc_msgSend(v91, v28[96]);
  if (!v135)
  {
    v176 = v91;
    v177 = Logger.logObject.getter(v176);
    v178 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v177, v178))
    {
      v179 = swift_slowAlloc(22, -1);
      v180 = (_QWORD *)swift_slowAlloc(8, -1);
      v181 = (void **)swift_slowAlloc(32, -1);
      aBlock = v181;
      *(_DWORD *)v179 = 138543618;
      v182 = objc_msgSend(v176, "objectID");
      *(_QWORD *)&v293[0] = v182;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
      *v180 = v182;

      *(_WORD *)(v179 + 12) = 2082;
      *(_QWORD *)&v293[0] = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v293, (char *)v293 + 8);
      _os_log_impl((void *)&_mh_execute_header, v177, v178, "REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v179, 0x16u);
      v183 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v180, 1, v183);
      swift_slowDealloc(v180, -1, -1);
      swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v181, -1, -1);
      swift_slowDealloc(v179, -1, -1);

    }
    else
    {

    }
    v185 = (void *)objc_opt_self(REMError);
    v186 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v187 = swift_getObjCClassFromMetadata(v186);
    v63 = String._bridgeToObjectiveC()();
    v64 = objc_msgSend(v185, "unexpectedNilPropertyWithClass:property:", v187, v63);
LABEL_90:
    v64;

    swift_willThrow(v188);
    return;
  }
  v136 = v92;
  v137 = v135;
  v138 = swift_allocObject(&unk_1007EAE38, 24, 7);
  *(_QWORD *)(v138 + 16) = _swiftEmptyDictionarySingleton;
  v300 = sub_10025F8B8;
  v301 = v138;
  aBlock = _NSConcreteStackBlock;
  v5 = 1107296256;
  v297 = 1107296256;
  v298 = sub_100256CB0;
  v299 = &unk_1007EAE50;
  v139 = v91;
  v140 = _Block_copy(&aBlock);
  v141 = v301;
  swift_retain();
  swift_release(v141);
  v288 = v137;
  objc_msgSend(v137, "enumerateObjectsUsingBlock:", v140);
  _Block_release(v140);
  swift_beginAccess(v138 + 16, v293, 0, 0);
  v142 = *(_QWORD *)(v138 + 16);
  swift_bridgeObjectRetain(v142);
  sub_1000A774C(v136, v142, 0);
  swift_release(v138);
  swift_bridgeObjectRelease();
  v143 = v136;
  v144 = v139;
  v145 = v143;
  v146 = Logger.logObject.getter(v145);
  v147 = static os_log_type_t.debug.getter();
  v148 = os_log_type_enabled(v146, (os_log_type_t)v147);
  v287 = v145;
  if (!v148)
  {

    v184 = v292;
    goto LABEL_93;
  }
  LODWORD(v274) = v147;
  v285 = v146;
  v149 = (_WORD *)swift_slowAlloc(22, -1);
  v150 = (uint8_t *)swift_slowAlloc(8, -1);
  v275 = (void **)swift_slowAlloc(32, -1);
  aBlock = v275;
  *(_DWORD *)v149 = 138412546;
  v151 = objc_msgSend(v144, "remObjectID");
  v295 = v151;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v295, &aBlock);
  v273 = v150;
  *(_QWORD *)v150 = v151;

  v276 = v149;
  v149[6] = 2080;
  v295 = v145;
  v152 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v153 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
  v154 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v155 = Sequence.elements<A>(ofType:)(v152, v153, v152, v154);
  v104 = v155;
  if (v155 >> 62)
    goto LABEL_127;
  v156 = *(_QWORD *)((v155 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v155);
LABEL_68:
  v157 = (uint64_t)v284;
  v158 = (uint64_t)v283;
  if (v156)
  {
    if (v156 < 1)
    {
      __break(1u);
      return;
    }
    v159 = 0;
    v289 = (void *)(v104 & 0xC000000000000001);
    v160 = _swiftEmptyArrayStorage;
    v290 = (_BYTE *)v104;
    v161 = v291;
    do
    {
      if (v289)
        v162 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v159, v104);
      else
        v162 = *(id *)(v104 + 8 * v159 + 32);
      v163 = v162;
      v164 = objc_msgSend(v162, "identifier");
      if (v164)
      {
        v165 = v164;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v164);

        v166 = 0;
      }
      else
      {
        v166 = 1;
      }
      v167 = v292;
      (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v161 + 56))(v157, v166, 1, v292);
      sub_1000A5CA8(v157, v158, (uint64_t *)&unk_100839C80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v161 + 48))(v158, 1, v167))
      {
        sub_10000882C(v158, (uint64_t *)&unk_100839C80);

      }
      else
      {
        v168 = v286;
        (*(void (**)(_BYTE *, uint64_t, id))(v161 + 16))(v286, v158, v167);
        v169 = sub_10000882C(v158, (uint64_t *)&unk_100839C80);
        v170 = UUID.uuidString.getter(v169);
        v172 = v171;
        (*(void (**)(_BYTE *, id))(v161 + 8))(v168, v167);

        if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0)
          v160 = sub_1002C8224(0, v160[2] + 1, 1, v160);
        v174 = v160[2];
        v173 = v160[3];
        v157 = (uint64_t)v284;
        if (v174 >= v173 >> 1)
          v160 = sub_1002C8224((_QWORD *)(v173 > 1), v174 + 1, 1, v160);
        v160[2] = v174 + 1;
        v175 = &v160[2 * v174];
        v175[4] = v170;
        v175[5] = v172;
        v158 = (uint64_t)v283;
      }
      ++v159;
      v104 = (uint64_t)v290;
    }
    while (v156 != v159);
  }
  else
  {
    v160 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n(v104, 2);
  v189 = (uint8_t *)v276;
  v190 = Array.description.getter(v160, &type metadata for String);
  v192 = v191;
  swift_bridgeObjectRelease();
  v295 = (id)sub_10001A820(v190, v192, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v295, &aBlock);
  v193 = v287;

  swift_bridgeObjectRelease();
  v194 = v285;
  _os_log_impl((void *)&_mh_execute_header, v285, (os_log_type_t)v274, "sorting ordered set account.lists - after - {account: %@, lists: %s}", v189, 0x16u);
  v195 = sub_10001A630((uint64_t *)&unk_100839E70);
  v196 = v273;
  swift_arrayDestroy(v273, 1, v195);
  swift_slowDealloc(v196, -1, -1);
  v197 = v275;
  swift_arrayDestroy(v275, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v197, -1, -1);
  swift_slowDealloc(v189, -1, -1);

  a2 = v281;
  v12 = v291;
  v184 = v292;
LABEL_93:
  v198 = String._bridgeToObjectiveC()();
  v199 = (void **)objc_msgSend(a2, "mutableOrderedSetValueForKey:", v198);

  if ((uint64_t)objc_msgSend(v199, "count") >= 1)
  {
    v200 = swift_allocObject(&unk_1007EAE38, 24, 7);
    *(_QWORD *)(v200 + 16) = _swiftEmptyDictionarySingleton;
    v300 = sub_10025F8B8;
    v301 = v200;
    aBlock = _NSConcreteStackBlock;
    v297 = v5;
    v298 = sub_100256CB0;
    v299 = &unk_1007EAE78;
    v201 = _Block_copy(&aBlock);
    v202 = v301;
    swift_retain();
    swift_release(v202);
    objc_msgSend(v288, "enumerateObjectsUsingBlock:", v201);
    _Block_release(v201);
    swift_beginAccess(v200 + 16, &aBlock, 0, 0);
    v203 = *(_QWORD *)(v200 + 16);
    swift_bridgeObjectRetain(v203);
    sub_1000A774C(v199, v203, 0);
    swift_release(v200);
    swift_bridgeObjectRelease();
    v204 = a2;
    v205 = v199;
    v206 = v204;
    v207 = v205;
    v208 = Logger.logObject.getter(v207);
    v209 = static os_log_type_t.info.getter(v208);
    if (os_log_type_enabled(v208, v209))
    {
      v290 = v199;
      v210 = swift_slowAlloc(22, -1);
      v211 = (void *)swift_slowAlloc(32, -1);
      v295 = v211;
      *(_DWORD *)v210 = 136446466;
      v212 = objc_msgSend(v206, "remObjectID");
      if (v212)
      {
        v213 = v212;
        v214 = objc_msgSend(v212, "description");

        v215 = static String._unconditionallyBridgeFromObjectiveC(_:)(v214);
        v217 = v216;

      }
      else
      {
        v215 = 7104878;
        v217 = 0xE300000000000000;
      }
      v294 = sub_10001A820(v215, v217, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

      *(_QWORD *)&v218 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v210 + 12) = 2048;
      v219 = objc_msgSend(v207, "count", v218);

      v294 = (uint64_t)v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

      _os_log_impl((void *)&_mh_execute_header, v208, v209, "REMAccountStorage+CDIngestor.mutateOrdering(): Sorted account.smartLists {account: %{public}s, #smartLists: %ld}", (uint8_t *)v210, 0x16u);
      swift_arrayDestroy(v211, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v211, -1, -1);
      swift_slowDealloc(v210, -1, -1);

      a2 = v281;
      v12 = v291;
      v184 = v292;
      v199 = (void **)v290;
    }
    else
    {

      a2 = v281;
      v184 = v292;
    }
  }
  v220 = objc_msgSend(a2, "identifier");
  if (v220)
  {
    v221 = v220;
    v222 = (uint64_t)v278;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v220);

    v223 = 0;
  }
  else
  {
    v223 = 1;
    v222 = (uint64_t)v278;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v12 + 56))(v222, v223, 1, v184);
  v224 = v279;
  sub_1000A5CA8(v222, (uint64_t)v279, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, id))(v12 + 48))(v224, 1, v184))
  {
    sub_10000882C((uint64_t)v224, (uint64_t *)&unk_100839C80);
LABEL_105:
    v225 = a2;
    v226 = Logger.logObject.getter(v225);
    v227 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v226, v227))
    {
      v290 = v199;
      v228 = a2;
      v229 = (uint8_t *)swift_slowAlloc(12, -1);
      v230 = (void *)swift_slowAlloc(32, -1);
      v295 = v230;
      *(_DWORD *)v229 = 136446210;
      v231 = objc_msgSend(v225, "remObjectID");
      if (v231)
      {
        v232 = v231;
        v233 = objc_msgSend(v231, "description");

        v234 = static String._unconditionallyBridgeFromObjectiveC(_:)(v233);
        v236 = v235;

      }
      else
      {
        v234 = 7104878;
        v236 = 0xE300000000000000;
      }
      v294 = sub_10001A820(v234, v236, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v226, v227, "REMAccountStorage+CDIngestor.mutateOrdering(): Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}", v229, 0xCu);
      swift_arrayDestroy(v230, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v230, -1, -1);
      swift_slowDealloc(v229, -1, -1);

      a2 = v228;
LABEL_120:
      v199 = (void **)v290;
      goto LABEL_121;
    }

    goto LABEL_121;
  }
  v237 = v286;
  (*(void (**)(_BYTE *, _BYTE *, id))(v12 + 16))(v286, v224, v184);
  v238 = sub_10000882C((uint64_t)v224, (uint64_t *)&unk_100839C80);
  UUID.uuidString.getter(v238);
  (*(void (**)(_BYTE *, id))(v12 + 8))(v237, v184);
  v239 = *(void **)(v282 + 80);
  v240 = String._bridgeToObjectiveC()();
  v241 = objc_msgSend(v239, "storeForAccountIdentifier:", v240);
  swift_bridgeObjectRelease();

  if (!v241)
    goto LABEL_105;
  v242 = (void *)sub_10059D3EC();
  v243 = v277;
  sub_10058FC98(v287, v242, v288, v241);
  if (v243)
    swift_errorRelease(v243);
  v277 = 0;
  v244 = v287;
  v245 = a2;
  v246 = v242;
  v247 = v244;
  v248 = v245;
  v249 = v246;
  v250 = Logger.logObject.getter(v249);
  v251 = static os_log_type_t.info.getter(v250);
  if (os_log_type_enabled(v250, (os_log_type_t)v251))
  {
    LODWORD(v291) = v251;
    v290 = v199;
    v252 = swift_slowAlloc(32, -1);
    v289 = (void *)swift_slowAlloc(32, -1);
    v295 = v289;
    *(_DWORD *)v252 = 136446722;
    v253 = objc_msgSend(v248, "remObjectID");
    v292 = v247;
    if (v253)
    {
      v254 = v253;
      v255 = objc_msgSend(v253, "description");

      v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
      v258 = v257;

    }
    else
    {
      v256 = 7104878;
      v258 = 0xE300000000000000;
    }
    v294 = sub_10001A820(v256, v258, (uint64_t *)&v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

    *(_QWORD *)&v259 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v252 + 12) = 2048;
    v260 = objc_msgSend(v249, "count", v259);

    v294 = (uint64_t)v260;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

    *(_WORD *)(v252 + 22) = 2048;
    v261 = v292;
    v262 = objc_msgSend(v292, "count");

    v294 = (uint64_t)v262;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);

    _os_log_impl((void *)&_mh_execute_header, v250, (os_log_type_t)v291, "REMAccountStorage+CDIngestor.mutateOrdering(): Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}", (uint8_t *)v252, 0x20u);
    v263 = v289;
    swift_arrayDestroy(v289, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v263, -1, -1);
    swift_slowDealloc(v252, -1, -1);

    a2 = v281;
    goto LABEL_120;
  }

LABEL_121:
  if ((*(_BYTE *)(v282 + 17) & 1) == 0
    && (v264 = objc_msgSend(a2, "accountTypeHost"),
        v265 = objc_msgSend(v264, "isLocal"),
        v264,
        (v265 & 1) != 0)
    || (v266 = objc_msgSend(a2, "accountTypeHost"),
        v267 = objc_msgSend(v266, "isCalDav"),
        v266,
        v267))
  {
    sub_10025C880(v287);
  }

}

void sub_10025F370(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  NSString v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  NSObject *log;
  uint64_t v43;
  int64_t v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v44 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n(a2, 2);
  v7 = 0;
  v37 = a1;
  v38 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v10 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      if (v10 < v44)
      {
        v11 = *(_QWORD *)(v43 + 8 * v10);
        ++v7;
        if (v11)
          goto LABEL_25;
        v7 = v10 + 1;
        if (v10 + 1 >= v44)
          goto LABEL_43;
        v11 = *(_QWORD *)(v43 + 8 * v7);
        if (v11)
          goto LABEL_25;
        v7 = v10 + 2;
        if (v10 + 2 >= v44)
          goto LABEL_43;
        v11 = *(_QWORD *)(v43 + 8 * v7);
        if (v11)
          goto LABEL_25;
        v7 = v10 + 3;
        if (v10 + 3 >= v44)
          goto LABEL_43;
        v11 = *(_QWORD *)(v43 + 8 * v7);
        if (v11)
          goto LABEL_25;
        v7 = v10 + 4;
        if (v10 + 4 >= v44)
          goto LABEL_43;
        v11 = *(_QWORD *)(v43 + 8 * v7);
        if (v11)
        {
LABEL_25:
          v6 = (v11 - 1) & v11;
          for (i = __clz(__rbit64(v11)) + (v7 << 6); ; i = v8 | (v7 << 6))
          {
            v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
            v14 = v13[1];
            if (!*(_QWORD *)(a2 + 16))
              break;
            v15 = *v13;
            swift_bridgeObjectRetain_n(v13[1], 2);
            v16 = sub_10001A6DC(v15, v14);
            if ((v17 & 1) != 0)
            {
              sub_10001A670(*(_QWORD *)(a2 + 56) + 32 * v16, (uint64_t)&v46);
            }
            else
            {
              v46 = 0u;
              v47 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v47 + 1))
              goto LABEL_6;
            sub_10001A6CC(&v46, &v48);
            v18 = String._bridgeToObjectiveC()();
            v19 = v49;
            v20 = sub_10000A388(&v48, v49);
            v21 = _bridgeAnythingToObjectiveC<A>(_:)(v20, v19);
            v22 = objc_msgSend(a1, "postAccountPropertyChangeNotificationWithKey:changedValue:", v18, v21);

            swift_unknownObjectRelease(v21);
            if ((v22 & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              if (qword_100837058 != -1)
                swift_once(&qword_100837058, sub_100256D5C);
              v23 = type metadata accessor for Logger(0);
              sub_10001AAA8(v23, (uint64_t)qword_100841DF8);
              sub_10001A670((uint64_t)&v48, (uint64_t)&v46);
              v24 = a1;
              swift_bridgeObjectRetain(v14);
              v25 = v24;
              v26 = Logger.logObject.getter(v25);
              v27 = static os_log_type_t.error.getter(v26);
              if (os_log_type_enabled(v26, v27))
              {
                v41 = v27;
                log = v26;
                v28 = swift_slowAlloc(32, -1);
                v40 = swift_slowAlloc(96, -1);
                v50 = v40;
                *(_DWORD *)v28 = 136315650;
                v29 = objc_msgSend(v25, "remObjectID");
                if (v29)
                {
                  v30 = v29;
                  v31 = objc_msgSend(v29, "description");

                  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
                  v33 = v32;

                  v34 = v39;
                  a1 = v37;
                }
                else
                {
                  v33 = 0xE300000000000000;
                  v34 = 7104878;
                }
                *(_QWORD *)(v28 + 4) = sub_10001A820(v34, v33, &v50);

                swift_bridgeObjectRelease();
                *(_WORD *)(v28 + 12) = 2080;
                swift_bridgeObjectRetain(v14);
                *(_QWORD *)(v28 + 14) = sub_10001A820(v15, v14, &v50);
                swift_bridgeObjectRelease_n(v14, 3);
                *(_WORD *)(v28 + 22) = 2080;
                sub_10001A670((uint64_t)&v46, (uint64_t)v45);
                v35 = String.init<A>(describing:)(v45, v38);
                *(_QWORD *)(v28 + 24) = sub_10001A820(v35, v36, &v50);
                swift_bridgeObjectRelease();
                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v46);
                _os_log_impl((void *)&_mh_execute_header, log, v41, "REMCDAccountStorage+CDIngestor: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {remObjectID: %s, changedKey: %s, changedValue: %s}", (uint8_t *)v28, 0x20u);
                swift_arrayDestroy(v40, 3, v38);
                swift_slowDealloc(v40, -1, -1);
                swift_slowDealloc(v28, -1, -1);

              }
              else
              {
                swift_bridgeObjectRelease_n(v14, 2);

                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v46);
              }
            }
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v48);
            if (!v6)
              goto LABEL_8;
LABEL_7:
            v8 = __clz(__rbit64(v6));
            v6 &= v6 - 1;
          }
          v46 = 0u;
          v47 = 0u;
          swift_bridgeObjectRetain(v14);
LABEL_6:
          swift_bridgeObjectRelease();
          sub_10000882C((uint64_t)&v46, (uint64_t *)&unk_10083D5B0);
          if (!v6)
            continue;
          goto LABEL_7;
        }
        v12 = v10 + 5;
        if (v12 < v44)
        {
          v11 = *(_QWORD *)(v43 + 8 * v12);
          if (v11)
          {
            v7 = v12;
            goto LABEL_25;
          }
          while (1)
          {
            v7 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_45;
            if (v7 >= v44)
              break;
            v11 = *(_QWORD *)(v43 + 8 * v7);
            ++v12;
            if (v11)
              goto LABEL_25;
          }
        }
      }
LABEL_43:
      swift_release(a2);
      swift_bridgeObjectRelease();
      return;
    }
    break;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_10025F894()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025F8B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000A85BC(a1, a2, a3, v3);
}

uint64_t sub_10025F8C0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10025820C(a1, a2, a3, v3);
}

uint64_t sub_10025F8C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025F8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100258314(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_10025F8E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10025F8F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840028;
  if (!qword_100840028)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_100840028);
  }
  return result;
}

id sub_10025F938(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 >> 60 == 15)
  {
    if (qword_100837058 != -1)
      swift_once(&qword_100837058, sub_100256D5C);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100841DF8);
    v11 = a6;
    swift_bridgeObjectRetain_n(a5, 2);
    v12 = v11;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = (_QWORD *)swift_slowAlloc(8, -1);
      v28 = swift_slowAlloc(32, -1);
      v30 = v28;
      *(_DWORD *)v15 = 138412546;
      v29 = (uint64_t)v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      *v16 = v12;

      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v29 = sub_10001A820(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected nil mergeable ordering data {objectID: %@, key: %s}", (uint8_t *)v15, 0x16u);
      v18 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
    v23 = objc_allocWithZone((Class)NSOrderedSet);
    v24 = a3;
    v25 = objc_msgSend(v23, "init");
    v26 = objc_msgSend(objc_allocWithZone((Class)REMCRMergeableOrderedSet), "initWithReplicaIDSource:orderedSet:", v24, v25);

  }
  else
  {
    v21 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
    sub_1000A70D0(a1, a2);
    v22 = a3;
    v26 = sub_100259BE8((uint64_t)v22);

    sub_1000A71B4(a1, a2);
  }
  return v26;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMAccountStorageCDIngestor.RelationshipOrderingValueKey;
}

uint64_t storeEnumTagSinglePayload for REMAccountStorageCDIngestor.OrderableRelationshipKey(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10025FF90 + 4 * byte_1006B136A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10025FFB0 + 4 * byte_1006B136F[v4]))();
}

_BYTE *sub_10025FF90(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10025FFB0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10025FFB8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10025FFC0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10025FFC8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10025FFD0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMAccountStorageCDIngestor.OrderableRelationshipKey;
}

uint64_t _s7remindd27REMAccountStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100260038 + 4 * byte_1006B1379[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10026006C + 4 * byte_1006B1374[v4]))();
}

uint64_t sub_10026006C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100260074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026007CLL);
  return result;
}

uint64_t sub_100260088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100260090);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100260094(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026009C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMAccountStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMAccountStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMAccountStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_100260194 + 4 * byte_1006B1383[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_1002601C8 + 4 * byte_1006B137E[v4]))();
}

uint64_t sub_1002601C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002601D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002601D8);
  return result;
}

uint64_t sub_1002601E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002601ECLL);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_1002601F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002601F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAccountStorageCDIngestor.ValueKey()
{
  return &type metadata for REMAccountStorageCDIngestor.ValueKey;
}

uint64_t sub_100260214()
{
  return sub_1000A5F84(&qword_100842040, &qword_100842048, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100260244()
{
  unint64_t result;

  result = qword_100842050;
  if (!qword_100842050)
  {
    result = swift_getWitnessTable(&unk_1006B1504, &type metadata for REMAccountStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100842050);
  }
  return result;
}

uint64_t sub_100260288()
{
  return sub_1000A5F84(&qword_100842058, &qword_100842060, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002602B8()
{
  unint64_t result;

  result = qword_100842068;
  if (!qword_100842068)
  {
    result = swift_getWitnessTable(&unk_1006B15DC, &type metadata for REMAccountStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100842068);
  }
  return result;
}

uint64_t sub_1002602FC()
{
  return sub_1000A5F84(&qword_100842070, &qword_100842078, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10026032C()
{
  unint64_t result;

  result = qword_100842080;
  if (!qword_100842080)
  {
    result = swift_getWitnessTable(&unk_1006B16B4, &type metadata for REMAccountStorageCDIngestor.OrderableRelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100842080);
  }
  return result;
}

uint64_t sub_100260370()
{
  return sub_1000A5F84(&qword_100842088, &qword_100842090, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002603A0()
{
  unint64_t result;

  result = qword_100842098;
  if (!qword_100842098)
  {
    result = swift_getWitnessTable(&unk_1006B178C, &type metadata for REMAccountStorageCDIngestor.RelationshipOrderingValueKey);
    atomic_store(result, (unint64_t *)&qword_100842098);
  }
  return result;
}

uint64_t sub_100260400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008420A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008420A0);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100260490()
{
  return sub_100261878("RDBeforeFirstUnlockNotificationEngine: Going to update lastPresentAlarmDate based on delivered notifications.", (uint64_t)&unk_1007EB390, (uint64_t)sub_100264D8C, (uint64_t)&unk_1007EB3A8);
}

uint64_t sub_1002604B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  id v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  Class isa;
  uint64_t result;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v67 = (char *)&v65 - v6;
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v70 = (char *)&v65 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v65 - v17;
  v73 = (unint64_t)_swiftEmptyArrayStorage;
  v66 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v43 = a1;
    else
      v43 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v19 = _CocoaArrayWrapper.endIndex.getter(v43);
  }
  else
  {
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  v68 = v4;
  v69 = v13;
  v72 = a1;
  if (v19)
  {
    if (v19 < 1)
    {
      __break(1u);
      goto LABEL_62;
    }
    v20 = 0;
    v21 = a1 & 0xC000000000000001;
    do
    {
      if (v21)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a1);
      else
        v24 = *(id *)(a1 + 8 * v20 + 32);
      v25 = v24;
      v26 = objc_msgSend(v24, "request");
      v27 = objc_msgSend(v26, "content");

      LOBYTE(v26) = UNNotificationContent.firesBeforeFirstUnlock.getter();
      if ((v26 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        v22 = *(_QWORD *)(v73 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v25);
        specialized ContiguousArray._endMutation()(v23);
      }
      else
      {

      }
      ++v20;
      a1 = v72;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
    v29 = v73;
    if ((v73 & 0x8000000000000000) != 0)
      goto LABEL_38;
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_38;
  }
  if ((v29 & 0x4000000000000000) == 0)
  {
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
      goto LABEL_39;
LABEL_18:
    v73 = (unint64_t)_swiftEmptyArrayStorage;
    sub_1001C1E48(0, v30 & ~(v30 >> 63), 0);
    if ((v30 & 0x8000000000000000) == 0)
    {
      v31 = 0;
      v71 = v29 & 0xC000000000000001;
      while (1)
      {
        v32 = v71
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29)
            : *(id *)(v29 + 8 * v31 + 32);
        v33 = v32;
        v34 = objc_msgSend(v32, "request");
        v35 = objc_msgSend(v34, "content");

        v36 = objc_msgSend(v35, "date");
        if (!v36)
          break;
        v37 = v70;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

        v38 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v38(v9, v37, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
          goto LABEL_27;
        v38(v18, v9, v10);
LABEL_28:

        v40 = (_QWORD *)v73;
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
        {
          sub_1001C1E48(0, v40[2] + 1, 1);
          v40 = (_QWORD *)v73;
        }
        v42 = v40[2];
        v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_1001C1E48(v41 > 1, v42 + 1, 1);
          v40 = (_QWORD *)v73;
        }
        ++v31;
        v40[2] = v42 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))((unint64_t)v40+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v42, v18, v10);
        v73 = (unint64_t)v40;
        if (v30 == v31)
        {
          swift_release(v29);
          goto LABEL_40;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_27:
      v39 = objc_msgSend(v33, "date");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

      sub_1000EA320((uint64_t)v9);
      goto LABEL_28;
    }
LABEL_62:
    __break(1u);
    result = swift_release(v73);
    __break(1u);
    return result;
  }
LABEL_38:
  swift_bridgeObjectRetain(v29);
  v30 = _CocoaArrayWrapper.endIndex.getter(v44);
  swift_release(v29);
  if (v30)
    goto LABEL_18;
LABEL_39:
  swift_release(v29);
  v40 = _swiftEmptyArrayStorage;
LABEL_40:
  v73 = (unint64_t)v40;
  swift_bridgeObjectRetain(v40);
  sub_100262B9C(&v73);
  v46 = (uint64_t)v68;
  v45 = v69;
  v47 = v72;
  swift_bridgeObjectRelease();
  v48 = v73;
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v49 = type metadata accessor for Logger(0);
  sub_10001AAA8(v49, (uint64_t)qword_1008420A0);
  swift_bridgeObjectRetain_n(v47, 2);
  v50 = swift_retain_n(v48);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.info.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc(22, -1);
    *(_DWORD *)v53 = 134218240;
    if (v66)
    {
      if (v47 < 0)
        v56 = v47;
      else
        v56 = v47 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v47);
      v54 = _CocoaArrayWrapper.endIndex.getter(v56);
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2048;
    v57 = *(_QWORD **)(v48 + 16);
    swift_release(v48);
    v73 = (unint64_t)v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    swift_release(v48);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDBeforeFirstUnlockNotificationEngine: Found %ld delivered notifications, %ld considered for lastPresentAlarmDate.", (uint8_t *)v53, 0x16u);
    swift_slowDealloc(v53, -1, -1);

    v46 = (uint64_t)v68;
    v45 = v69;
  }
  else
  {

    swift_bridgeObjectRelease_n(v47, 2);
    v55 = swift_release_n(v48);
  }
  Date.init()(v55);
  v58 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  __chkstk_darwin(v58);
  *(&v65 - 2) = (uint64_t)v45;
  sub_1004EC844((uint64_t (*)(char *))sub_100264DB8, v48, v46);
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v59(v46, 1, v10) == 1)
  {
    v60 = *(_QWORD *)(v48 + 16);
    v61 = v67;
    if (v60)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v67, v48+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * (v60 - 1), v10);
      v62 = 0;
    }
    else
    {
      v62 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v61, v62, 1, v10);
    swift_release(v48);
    sub_1000EA320(v46);
  }
  else
  {
    swift_release(v48);
    v61 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v67, v46, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v61, 0, 1, v10);
  }
  if (v59((uint64_t)v61, 1, v10) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v61, v10);
  }
  objc_msgSend(v58, "setLastPresentAlarmDate:", isa);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v45, v10);
}

BOOL sub_100260CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return (dispatch thunk of static Comparable.< infix(_:_:)(a2, a1, v4, v5) & 1) == 0;
}

void sub_100260D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  void **aBlock;
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  void *v95;
  void *v96;
  uint64_t v97;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  v85 = *(_QWORD *)(v0 - 8);
  v86 = v0;
  v1 = __chkstk_darwin(v0);
  v84 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v83 = (char *)&v73 - v3;
  v82 = type metadata accessor for DispatchWallTime(0);
  v80 = *(_QWORD *)(v82 - 8);
  v4 = __chkstk_darwin(v82);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v81 = (char *)&v73 - v7;
  v8 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v79 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v89 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v88 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v87 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100261ED8((uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1000EA320((uint64_t)v18);
    if (qword_100837068 != -1)
      swift_once(&qword_100837068, sub_100260400);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_1008420A0);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDBeforeFirstUnlockNotificationEngine: Not going to presenting before first unlock notification as we don't have a due date.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
  else
  {
    v77 = v20;
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    v29 = Date.timeIntervalSinceNow.getter(v28);
    v78 = v19;
    v76 = v22;
    if (v29 <= 0.0)
    {
      if (qword_100837068 != -1)
        swift_once(&qword_100837068, sub_100260400);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_10001AAA8(v58, (uint64_t)qword_1008420A0);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.default.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification now because we have already passed the due date.", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      v63 = v90;
      v86 = *(_QWORD *)(v90 + 16);
      v64 = swift_allocObject(&unk_1007EB2F0, 24, 7);
      swift_weakInit(v64 + 16, v63);
      v96 = sub_100264D84;
      v97 = v64;
      aBlock = _NSConcreteStackBlock;
      v93 = 1107296256;
      v94 = sub_1000094C8;
      v95 = &unk_1007EB358;
      v65 = _Block_copy(&aBlock);
      v66 = swift_retain();
      v67 = v87;
      static DispatchQoS.unspecified.getter(v66);
      v91 = _swiftEmptyArrayStorage;
      v68 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v69 = sub_10001A630((uint64_t *)&unk_100838000);
      v70 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
      v71 = v89;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v69, v70, v11, v68);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v67, v71, v65);
      _Block_release(v65);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v71, v11);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v14);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
      v72 = v97;
      swift_release(v64);
      swift_release(v72);
    }
    else
    {
      v30 = v29;
      if (qword_100837068 != -1)
        swift_once(&qword_100837068, sub_100260400);
      v73 = v12;
      v74 = v14;
      v75 = v11;
      v31 = type metadata accessor for Logger(0);
      v32 = sub_10001AAA8(v31, (uint64_t)qword_1008420A0);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDBeforeFirstUnlockNotificationEngine: Scheduling to present before first unlock notification at a future time.", v35, 2u);
        swift_slowDealloc(v35, -1, -1);
      }

      sub_1000151B0(0, &qword_1008421A0, OS_dispatch_source_ptr);
      v36 = *(_QWORD *)(v90 + 16);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v37 = sub_10009FC50(&qword_1008421A8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
      v38 = sub_10001A630(&qword_1008421B0);
      v39 = sub_1000C4C0C(&qword_1008421B8, &qword_1008421B0);
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v38, v39, v8, v37);
      v40 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v10, v36);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v8);
      ObjectType = swift_getObjectType(v40);
      static DispatchWallTime.now()();
      v42 = v81;
      + infix(_:_:)(v6, v30);
      v43 = *(void (**)(char *, uint64_t))(v80 + 8);
      v44 = v82;
      v43(v6, v82);
      v46 = v85;
      v45 = v86;
      v47 = *(void (**)(char *, _QWORD, uint64_t))(v85 + 104);
      v48 = v83;
      v47(v83, enum case for DispatchTimeInterval.never(_:), v86);
      v49 = v84;
      *(_QWORD *)v84 = 0;
      v47(v49, enum case for DispatchTimeInterval.nanoseconds(_:), v45);
      OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v42, v48, v49, ObjectType);
      v50 = *(void (**)(char *, uint64_t))(v46 + 8);
      v50(v49, v45);
      v50(v48, v45);
      v43(v42, v44);
      v51 = swift_allocObject(&unk_1007EB2F0, 24, 7);
      swift_weakInit(v51 + 16, v90);
      v52 = swift_allocObject(&unk_1007EB318, 32, 7);
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = v40;
      v96 = sub_100264D7C;
      v97 = v52;
      aBlock = _NSConcreteStackBlock;
      v93 = 1107296256;
      v94 = sub_1000094C8;
      v95 = &unk_1007EB330;
      v53 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain(v40);
      v54 = v87;
      static DispatchQoS.unspecified.getter(v55);
      v56 = v89;
      sub_1002617A8();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v54, v56, v53, ObjectType);
      _Block_release(v53);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v75);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v54, v74);
      v57 = v97;
      swift_release(v51);
      swift_release(v57);
      OS_dispatch_source.activate()();
      swift_unknownObjectRelease(v40);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
    }
  }
}

uint64_t sub_100261630(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_100262468();
    return swift_release(v3);
  }
  return result;
}

void sub_100261684(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  uint64_t v10;
  _BYTE v11[24];

  v3 = a1 + 16;
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_1008420A0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification as we're now due.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v3, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v10 = Strong;
    sub_100262468();
    swift_release(v10);
  }
  swift_getObjectType(a2);
  OS_dispatch_source.cancel()();
}

uint64_t sub_1002617A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10001A630((uint64_t *)&unk_100838000);
  v3 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100261854()
{
  return sub_100261878("RDBeforeFirstUnlockNotificationEngine: Trying to release before first unlock notification.", (uint64_t)&unk_1007EB278, (uint64_t)sub_100264D24, (uint64_t)&unk_1007EB290);
}

uint64_t sub_100261878(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  const char *v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v36 = a1;
  *(_QWORD *)&v37 = a2;
  v7 = v4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_1008420A0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v10;
    v20 = v8;
    v21 = v7;
    v22 = v12;
    v23 = v11;
    v24 = a3;
    v25 = a4;
    v26 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v36, v19, 2u);
    v27 = v26;
    a4 = v25;
    a3 = v24;
    v11 = v23;
    v12 = v22;
    v7 = v21;
    v8 = v20;
    v10 = v35;
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = swift_allocObject(v37, 32, 7);
  v37 = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v28 + 16) = v37;
  aBlock[4] = a3;
  v41 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = a4;
  v29 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v37);
  static DispatchQoS.unspecified.getter(v30);
  v39 = _swiftEmptyArrayStorage;
  v31 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A630((uint64_t *)&unk_100838000);
  v33 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v41);
}

void sub_100261B40(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for RDUserNotificationCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)aBlock - v7;
  v9 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11 = v10((char *)aBlock - v7, enum case for RDUserNotificationCategory.beforeFirstUnlock(_:), v2);
  RDUserNotificationCategory.rawValue.getter(v11);
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v8, v2);
  v15 = v10(v6, v9, v2);
  RDUserNotificationCategory.rawValue.getter(v15);
  v17 = v16;
  v14(v6, v2);
  v18 = String._bridgeToObjectiveC()();
  v19 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100261CE8;
  v22 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E18E4;
  aBlock[3] = &unk_1007EB2B8;
  v20 = _Block_copy(aBlock);
  swift_release(v22);
  objc_msgSend(a1, "releaseNotificationWithIdentifier:reference:completion:", v18, v19, v20);
  _Block_release(v20);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v13);

}

void sub_100261CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[8];
  uint64_t v14;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837068 != -1)
      swift_once(&qword_100837068, sub_100260400);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_1008420A0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v13, v12);
      v7 = Error.localizedDescription.getter(v12[1], v12[2]);
      v9 = v8;
      v11 = sub_10001A820(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to dismiss before first unlock notification {error: %s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100261ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  char v61;
  char *v62;
  char v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v72 = (char *)a1;
  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v65 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v66 = (char *)&v65 - v6;
  v7 = __chkstk_darwin(v5);
  v67 = (char *)&v65 - v8;
  v9 = __chkstk_darwin(v7);
  v68 = (char *)&v65 - v10;
  __chkstk_darwin(v9);
  v71 = (char *)&v65 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v13 = __chkstk_darwin(v12);
  v69 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v70 = (uint64_t)&v65 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v65 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v65 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v65 - v24;
  v26 = __chkstk_darwin(v23);
  v73 = (uint64_t)&v65 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v65 - v29;
  __chkstk_darwin(v28);
  v74 = (uint64_t)&v65 - v31;
  v32 = (void *)objc_opt_self(REMUserDefaults);
  v33 = objc_msgSend(v32, "daemonUserDefaults");
  v34 = objc_msgSend(v33, "lastPresentAlarmDate");

  if (v34)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v35 = v2;
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v36(v30, 0, 1, v1);
  }
  else
  {
    v35 = v2;
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v36(v30, 1, 1, v1);
  }
  v37 = (uint64_t)v30;
  v38 = v74;
  sub_1000CDA74(v37, v74);
  v39 = objc_msgSend(v32, "daemonUserDefaults");
  v40 = objc_msgSend(v39, "nextScheduledAlarmDate");

  if (v40)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v41 = 0;
  }
  else
  {
    v41 = 1;
  }
  v42 = v73;
  v36(v25, v41, 1, v1);
  sub_1000CDA74((uint64_t)v25, v42);
  sub_1000CDA2C(v38, (uint64_t)v22);
  v43 = v35;
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v44(v22, 1, v1) != 1)
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v46 = v71;
    v45(v71, v22, v1);
    sub_1000CDA2C(v42, (uint64_t)v19);
    if (v44(v19, 1, v1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v46, v1);
      v38 = v74;
      goto LABEL_11;
    }
    v51 = v68;
    v52 = ((uint64_t (*)(char *, char *, uint64_t))v45)(v68, v19, v1);
    v53 = v67;
    Date.init()(v52);
    v54 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v55 = dispatch thunk of static Comparable.< infix(_:_:)(v53, v46, v1, v54);
    v56 = v43;
    v57 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v58 = v66;
    v57(v66, v51, v1);
    v59 = v65;
    v57(v65, v53, v1);
    if ((v55 & 1) != 0)
    {
      v60 = *(void (**)(char *, uint64_t))(v56 + 8);
      v60(v59, v1);
      v60(v58, v1);
    }
    else
    {
      v61 = dispatch thunk of static Comparable.< infix(_:_:)(v59, v58, v1, v54);
      v60 = *(void (**)(char *, uint64_t))(v56 + 8);
      v60(v59, v1);
      v60(v58, v1);
      if ((v61 & 1) == 0)
      {
        v62 = v71;
        v63 = dispatch thunk of static Comparable.>= infix(_:_:)(v51, v71, v1, v54);
        goto LABEL_19;
      }
    }
    v62 = v71;
    v63 = dispatch thunk of static Comparable.< infix(_:_:)(v51, v71, v1, v54);
LABEL_19:
    if ((v63 & 1) != 0)
      v64 = v51;
    else
      v64 = v62;
    v50 = (uint64_t)v72;
    v57(v72, v64, v1);
    v60(v53, v1);
    v60(v51, v1);
    v60(v62, v1);
    sub_1000EA320(v73);
    sub_1000EA320(v74);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v36)(v50, 0, 1, v1);
  }
  v19 = v22;
LABEL_11:
  sub_1000EA320((uint64_t)v19);
  v47 = v70;
  sub_1000CDA74(v38, v70);
  v48 = v69;
  sub_1000CDA74(v42, v69);
  if (v44((char *)v47, 1, v1) == 1)
  {
    sub_1000CDA74(v48, (uint64_t)v72);
    return sub_1000EA320(v47);
  }
  sub_1000EA320(v48);
  v50 = (uint64_t)v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v72, v47, v1);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v36)(v50, 0, 1, v1);
}

void sub_100262468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  NSString v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v1 = type metadata accessor for RDUserNotificationCategory(0);
  v40 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v38 = (char *)&v38 - v4;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDUserNotificationType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char **)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = v0;
  v16 = *(void **)(v0 + 16);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for RDUserNotificationType.beforeFirstUnlock(_:), v8);
    v18 = sub_10023F73C(0, 0, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100261ED8((uint64_t)v7);
    v19 = type metadata accessor for Date(0);
    v20 = *(_QWORD *)(v19 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) != 1)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
    }
    objc_msgSend(v18, "setDate:", isa);

    v22 = v40;
    v23 = *(void **)(v39 + 24);
    v24 = enum case for RDUserNotificationCategory.beforeFirstUnlock(_:);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 104);
    v26 = v38;
    v27 = v25(v38, enum case for RDUserNotificationCategory.beforeFirstUnlock(_:), v1);
    RDUserNotificationCategory.rawValue.getter(v27);
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30(v26, v1);
    v31 = v41;
    v32 = v25(v41, v24, v1);
    RDUserNotificationCategory.rawValue.getter(v32);
    v34 = v33;
    v30(v31, v1);
    v35 = String._bridgeToObjectiveC()();
    v36 = String._bridgeToObjectiveC()();
    aBlock[4] = sub_1002627D8;
    v43 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E18E4;
    aBlock[3] = &unk_1007EB240;
    v37 = _Block_copy(aBlock);
    swift_release(v43);
    objc_msgSend(v23, "retainNotificationWithIdentifier:reference:content:skipBanner:completion:", v35, v36, v18, 0, v37);
    _Block_release(v37);
    swift_bridgeObjectRelease(v34);

    swift_bridgeObjectRelease(v29);
  }
  else
  {
    __break(1u);
  }
}

void sub_1002627D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[8];
  uint64_t v23;
  _BYTE v24[56];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837068 != -1)
      swift_once(&qword_100837068, sub_100260400);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_1008420A0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v23 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v22, v21);
      v7 = Error.localizedDescription.getter(v21[1], v21[2]);
      v9 = v8;
      v20 = sub_10001A820(v7, v8, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "RDBeforeFirstUnlockNotificationEngine: Unable to post Before First Unlock notification {error: %s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100837068 != -1)
      swift_once(&qword_100837068, sub_100260400);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001AAA8(v10, (uint64_t)qword_1008420A0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDBeforeFirstUnlockNotificationEngine: Posted Before First Unlock notification", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    type metadata accessor for Analytics(0, v15);
    v16 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v16, v24);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 0x696669746E656449;
    *(_QWORD *)(inited + 40) = 0xEA00000000007265;
    sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("Posted Before First Unlock Notification", 39, 2);
    v18 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD00000000000001CLL, 0x80000001006F6BE0, v18, 0, 1);
    swift_bridgeObjectRelease(v18);
  }
}

uint64_t sub_100262B38()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RDBeforeFirstUnlockNotificationEngine()
{
  return objc_opt_self(_TtC7remindd37RDBeforeFirstUnlockNotificationEngine);
}

uint64_t sub_100262B84(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_100263F3C(a2, a3, a4, a5, a6);
}

void sub_100262B9C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001D6138(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100262C1C(v5);
  *a1 = v3;
}

void sub_100262C1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  Swift::Int v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  _QWORD *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  Swift::Int v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  Swift::Int v134;
  char *v135;
  char *v136;
  char *v137;
  Swift::Int v138;
  unint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  Swift::Int v150;
  uint64_t v151;
  uint64_t v152;

  v3 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v137 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v149 = (char *)&v132 - v6;
  __chkstk_darwin(v7);
  v145 = (char *)&v132 - v8;
  __chkstk_darwin(v9);
  v144 = (char *)&v132 - v10;
  v11 = a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if (v11 < 0)
      goto LABEL_140;
    if (v11)
      sub_100263668(0, v11, 1, a1);
    return;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_148;
  v14 = v12;
  v148 = v3;
  v140 = v1;
  if (v11 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v139 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
    v133 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v20 >= 2)
      {
        v124 = *a1;
        do
        {
          v125 = v20 - 2;
          if (v20 < 2)
            goto LABEL_135;
          v126 = v140;
          if (!v124)
            goto LABEL_147;
          v127 = v18;
          v128 = *(_QWORD *)&v18[16 * v125 + 32];
          v129 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_1002638BC(v124 + *(_QWORD *)(v152 + 72) * v128, v124 + *(_QWORD *)(v152 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v124 + *(_QWORD *)(v152 + 72) * v129, v139);
          if (v126)
            goto LABEL_103;
          if (v129 < v128)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v127 = sub_1001D52E4((uint64_t)v18);
          if (v125 >= *((_QWORD *)v127 + 2))
            goto LABEL_137;
          v130 = &v127[16 * v125 + 32];
          *(_QWORD *)v130 = v128;
          *((_QWORD *)v130 + 1) = v129;
          v131 = *((_QWORD *)v127 + 2);
          if (v20 > v131)
            goto LABEL_138;
          v18 = v127;
          memmove(&v127[16 * v20 + 16], &v127[16 * v20 + 32], 16 * (v131 - v20));
          *((_QWORD *)v127 + 2) = v131 - 1;
          v20 = v131 - 1;
          v140 = 0;
        }
        while (v131 > 2);
      }
      swift_bridgeObjectRelease();
      v133[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v15 = v13 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v152 + 80);
    v133 = (_QWORD *)v16;
    v139 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v147 = a1;
  v134 = v14;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    v135 = v18;
    if (v19 + 1 >= v11)
    {
      ++v19;
      v42 = v140;
    }
    else
    {
      v23 = *a1;
      v24 = v152;
      v25 = v19;
      v26 = *(_QWORD *)(v152 + 72);
      v27 = *a1 + v26 * v22;
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v152 + 16);
      v29 = v144;
      v150 = v11;
      v30 = v148;
      v28(v144, v27, v148);
      v31 = v145;
      v28(v145, v23 + v26 * v25, v30);
      LODWORD(v146) = static Date.> infix(_:_:)(v29, v31);
      v32 = *(void (**)(char *, uint64_t))(v24 + 8);
      v32(v31, v30);
      v33 = v30;
      v11 = v150;
      v32(v29, v33);
      v19 = v25 + 2;
      v142 = v23;
      v151 = v26;
      if (v25 + 2 >= v11)
      {
        a1 = v147;
        v42 = v140;
        v41 = v26;
        v21 = v25;
        v14 = v134;
      }
      else
      {
        v138 = v25;
        v143 = v26 * v22;
        v34 = v23;
        v35 = v26 * v19;
        while (1)
        {
          v36 = v19;
          v37 = v144;
          v38 = v148;
          v28(v144, v34 + v35, v148);
          v39 = v145;
          v28(v145, v34 + v143, v38);
          v40 = static Date.> infix(_:_:)(v37, v39);
          v32(v39, v38);
          v32(v37, v38);
          if (((v146 ^ v40) & 1) != 0)
            break;
          v19 = v36 + 1;
          v41 = v151;
          v34 += v151;
          if (v150 == v36 + 1)
          {
            v11 = v150;
            v19 = v150;
            a1 = v147;
            v42 = v140;
            v14 = v134;
            v21 = v138;
            goto LABEL_24;
          }
        }
        a1 = v147;
        v42 = v140;
        v14 = v134;
        v19 = v36;
        v21 = v138;
        v11 = v150;
        v41 = v151;
      }
LABEL_24:
      v18 = v135;
      if ((v146 & 1) != 0)
      {
        if (v19 < v21)
          goto LABEL_141;
        if (v21 < v19)
        {
          v43 = 0;
          v44 = v41 * (v19 - 1);
          v45 = v19 * v41;
          v46 = v21;
          v138 = v21;
          v47 = v21 * v41;
          do
          {
            if (v46 != v19 + v43 - 1)
            {
              v140 = v42;
              v50 = v142;
              if (!v142)
                goto LABEL_146;
              v51 = v142 + v47;
              v52 = v142 + v44;
              v146 = *(char **)(v152 + 32);
              ((void (*)(char *, uint64_t, uint64_t))v146)(v137, v142 + v47, v148);
              if (v47 < v44 || v51 >= v50 + v45)
              {
                v48 = v50 + v47;
                v49 = v148;
                swift_arrayInitWithTakeFrontToBack(v48);
              }
              else
              {
                v49 = v148;
                if (v47 != v44)
                  swift_arrayInitWithTakeBackToFront(v51);
              }
              ((void (*)(uint64_t, char *, uint64_t))v146)(v52, v137, v49);
              a1 = v147;
              v18 = v135;
              v42 = v140;
              v41 = v151;
            }
            ++v46;
            --v43;
            v44 -= v41;
            v45 -= v41;
            v47 += v41;
          }
          while (v46 < v19 + v43);
          v14 = v134;
          v11 = v150;
          v21 = v138;
        }
      }
    }
    if (v19 < v11)
    {
      if (__OFSUB__(v19, v21))
        goto LABEL_139;
      if (v19 - v21 < v14)
        break;
    }
LABEL_56:
    if (v19 < v21)
      goto LABEL_134;
    v71 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v140 = v42;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_1001D4DF0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v74 = *((_QWORD *)v18 + 2);
    v73 = *((_QWORD *)v18 + 3);
    v20 = v74 + 1;
    if (v74 >= v73 >> 1)
      v18 = sub_1001D4DF0((char *)(v73 > 1), v74 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v75 = v18 + 32;
    v76 = &v18[16 * v74 + 32];
    *(_QWORD *)v76 = v71;
    *((_QWORD *)v76 + 1) = v19;
    if (v74)
    {
      while (1)
      {
        v77 = v20 - 1;
        if (v20 >= 4)
        {
          v82 = &v75[16 * v20];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_123;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_124;
          v89 = v20 - 2;
          v90 = &v75[16 * v20 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_126;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_129;
          if (v94 >= v85)
          {
            v112 = &v75[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_133;
            v105 = v80 < v115;
            goto LABEL_93;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v106 = *((_QWORD *)v18 + 4);
            v107 = *((_QWORD *)v18 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_87;
          }
          v79 = *((_QWORD *)v18 + 4);
          v78 = *((_QWORD *)v18 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_125;
        v89 = v20 - 2;
        v95 = &v75[16 * v20 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_128;
        v101 = &v75[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_131;
        if (__OFADD__(v99, v104))
          goto LABEL_132;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_93:
          if (v105)
            v77 = v89;
          goto LABEL_95;
        }
LABEL_87:
        if ((v100 & 1) != 0)
          goto LABEL_127;
        v108 = &v75[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_130;
        if (v111 < v99)
          goto LABEL_14;
LABEL_95:
        v116 = v77 - 1;
        if (v77 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v117 = *a1;
        if (!*a1)
          goto LABEL_145;
        v118 = &v75[16 * v116];
        v119 = *(_QWORD *)v118;
        v120 = &v75[16 * v77];
        v121 = *((_QWORD *)v120 + 1);
        v122 = v140;
        sub_1002638BC(v117 + *(_QWORD *)(v152 + 72) * *(_QWORD *)v118, v117 + *(_QWORD *)(v152 + 72) * *(_QWORD *)v120, v117 + *(_QWORD *)(v152 + 72) * v121, v139);
        v140 = v122;
        if (v122)
        {
LABEL_103:
          swift_bridgeObjectRelease();
          v133[2] = 0;
          swift_bridgeObjectRelease();
          return;
        }
        if (v121 < v119)
          goto LABEL_120;
        if (v77 > *((_QWORD *)v18 + 2))
          goto LABEL_121;
        *(_QWORD *)v118 = v119;
        *(_QWORD *)&v75[16 * v116 + 8] = v121;
        v123 = *((_QWORD *)v18 + 2);
        if (v77 >= v123)
          goto LABEL_122;
        v20 = v123 - 1;
        memmove(&v75[16 * v77], v120 + 16, 16 * (v123 - 1 - v77));
        *((_QWORD *)v18 + 2) = v123 - 1;
        a1 = v147;
        if (v123 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v11 = a1[1];
    v14 = v134;
    if (v19 >= v11)
      goto LABEL_105;
  }
  if (__OFADD__(v21, v14))
    goto LABEL_142;
  if (v21 + v14 >= v11)
    v53 = v11;
  else
    v53 = v21 + v14;
  if (v53 >= v21)
  {
    if (v19 != v53)
    {
      v138 = v21;
      v54 = *(_QWORD *)(v152 + 72);
      v55 = *(void (**)(char *, uint64_t, uint64_t))(v152 + 16);
      v140 = v42;
      v141 = v55;
      v151 = v54 * (v19 - 1);
      v146 = (char *)v19;
      v142 = v54;
      v56 = v19 * v54;
      v57 = v148;
      v136 = (char *)v53;
      do
      {
        v58 = 0;
        v59 = v138;
        v143 = v56;
        while (1)
        {
          v150 = v59;
          v60 = *a1;
          v61 = v56 + v58 + *a1;
          v62 = v144;
          v63 = v141;
          v141(v144, v61, v57);
          v64 = a1;
          v65 = v145;
          v63(v145, v151 + v58 + v60, v57);
          LOBYTE(v63) = static Date.> infix(_:_:)(v62, v65);
          v66 = *(void (**)(char *, uint64_t))(v152 + 8);
          v66(v65, v57);
          v66(v62, v57);
          if ((v63 & 1) == 0)
            break;
          v67 = *v64;
          if (!*v64)
            goto LABEL_144;
          v56 = v143;
          v68 = v67 + v143 + v58;
          v69 = (char *)(v67 + v151 + v58);
          v70 = *(void (**)(char *, uint64_t, uint64_t))(v152 + 32);
          v57 = v148;
          v70(v149, v68, v148);
          swift_arrayInitWithTakeFrontToBack(v68);
          v70(v69, (uint64_t)v149, v57);
          v58 -= v142;
          v59 = v150 + 1;
          a1 = v147;
          if (v146 == (char *)(v150 + 1))
            goto LABEL_49;
        }
        v57 = v148;
        a1 = v64;
        v56 = v143;
LABEL_49:
        v151 += v142;
        v56 += v142;
        ++v146;
      }
      while (v146 != v136);
      v19 = (Swift::Int)v136;
      v42 = v140;
      v18 = v135;
      v21 = v138;
    }
    goto LABEL_56;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100263668(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v29 = a1;
  v7 = type metadata accessor for Date(0);
  v37 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v36 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v33 = (char *)&v27 - v11;
  result = __chkstk_darwin(v10);
  v32 = (char *)&v27 - v13;
  v35 = a3;
  v28 = a2;
  if (a3 != a2)
  {
    v14 = v37[9];
    v30 = (void (*)(char *, uint64_t, uint64_t))v37[2];
    v31 = a4;
    v39 = v14 * (v35 - 1);
    v34 = v14;
    v38 = v14 * v35;
LABEL_5:
    v15 = 0;
    v16 = v29;
    while (1)
    {
      v17 = *a4;
      v18 = v32;
      v19 = v30;
      v30(v32, v38 + v15 + *a4, v7);
      v20 = v33;
      v19(v33, v39 + v15 + v17, v7);
      LOBYTE(v17) = static Date.> infix(_:_:)(v18, v20);
      v21 = (void (*)(char *, uint64_t))v37[1];
      v22 = v20;
      a4 = v31;
      v21(v22, v7);
      result = ((uint64_t (*)(char *, uint64_t))v21)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v39 += v34;
        v38 += v34;
        if (++v35 == v28)
          return result;
        goto LABEL_5;
      }
      v23 = *a4;
      if (!*a4)
        break;
      v24 = v23 + v38 + v15;
      v25 = v23 + v39 + v15;
      v26 = (void (*)(char *, uint64_t, uint64_t))v37[4];
      v26(v36, v24, v7);
      swift_arrayInitWithTakeFrontToBack(v24);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v25, v36, v7);
      v15 -= v34;
      if (v35 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002638BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(char *, unint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = type metadata accessor for Date(0);
  __chkstk_darwin(v8);
  v50 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v49 = (char *)&v44 - v11;
  v51 = v12;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v30 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v32 = -v13;
        v45 = *(void (**)(char *, unint64_t, uint64_t))(v51 + 16);
        v46 = a1;
        v47 = a4;
        v33 = v49;
        do
        {
          v48 = a3 + v32;
          v34 = v45;
          v45(v33, v30 + v32, v8);
          v35 = a2 + v32;
          v36 = v50;
          v34(v50, a2 + v32, v8);
          v37 = static Date.> infix(_:_:)(v33, v36);
          v38 = *(void (**)(char *, uint64_t))(v51 + 8);
          v38(v36, v8);
          v38(v33, v8);
          if ((v37 & 1) != 0)
          {
            v39 = v48;
            if (a3 < a2 || v48 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v48);
              v41 = v46;
              v40 = v47;
            }
            else
            {
              v41 = v46;
              v40 = v47;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v48);
            }
            v54 += v32;
          }
          else
          {
            v42 = v52;
            v52 += v32;
            v39 = v48;
            if (a3 < v42 || v48 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v48);
              v35 = a2;
              v41 = v46;
              v40 = v47;
            }
            else
            {
              v41 = v46;
              v40 = v47;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v48);
              v35 = a2;
            }
          }
          v30 = v52;
          if (v52 <= v40)
            break;
          a2 = v35;
          a3 = v39;
        }
        while (v35 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v48 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v51 + 16);
      do
      {
        v21 = a3;
        v22 = a4;
        v23 = v49;
        v20(v49, a2, v8);
        v24 = v50;
        v20(v50, v22, v8);
        v25 = static Date.> infix(_:_:)(v23, v24);
        v26 = *(void (**)(char *, uint64_t))(v51 + 8);
        v26(v24, v8);
        v26(v23, v8);
        v27 = v54;
        if ((v25 & 1) != 0)
        {
          v28 = a2 + v13;
          if (v54 < a2 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v54);
          }
          else if (v54 == a2)
          {
            v27 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v54);
          }
        }
        else
        {
          v29 = v53 + v13;
          if (v54 < v53 || v54 >= v29)
          {
            swift_arrayInitWithTakeFrontToBack(v54);
          }
          else if (v54 != v53)
          {
            swift_arrayInitWithTakeBackToFront(v54);
          }
          v53 = v29;
          v28 = a2;
        }
        v54 = v27 + v13;
        a4 = v53;
        if (v53 >= v48)
          break;
        a3 = v21;
        a2 = v28;
      }
      while (v28 < v21);
    }
LABEL_60:
    sub_1001D51C0(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100263D90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_1008420A0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDBeforeFirstUnlockNotificationEngine: Updating nextScheduledAlarmDate as we got a new future alarm date.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  sub_1000CDA2C(a1, (uint64_t)v4);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v4, 1, v11) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v11);
  }
  objc_msgSend(v10, "setNextScheduledAlarmDate:", isa);

}

uint64_t sub_100263F3C(void *a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  id *v36;
  void (*v37)(char *, uint64_t, uint64_t, __n128);
  int v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD *, uint64_t);
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  void (*v76)(char *, uint64_t, __n128);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  id v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  __n128 v103;
  uint64_t v104;
  id v105;
  id v106;
  char *v107;
  void (*v108)(uint64_t, char *, uint64_t);
  char *v109;
  uint64_t v110;
  char v111;
  id v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  _QWORD v116[2];
  uint64_t v117;
  void (*v118)(char *, _QWORD *, uint64_t);
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t (*v132)(void);
  uint64_t v133;
  uint64_t v134[2];

  v131 = a5;
  v132 = a4;
  v128 = a3;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v123 = (char *)v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v122 = (char *)v116 - v10;
  v11 = type metadata accessor for Date(0);
  v125 = *(_QWORD *)(v11 - 8);
  v126 = v11;
  __chkstk_darwin(v11);
  v120 = (char *)v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v127 = (char *)v116 - v14;
  __chkstk_darwin(v15);
  v119 = (char *)v116 - v16;
  __chkstk_darwin(v17);
  v124 = (char *)v116 - v18;
  v129 = type metadata accessor for RDUserNotificationAction(0);
  v19 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v121 = (char *)v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)v116 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)v116 - v25;
  v27 = type metadata accessor for RDUserNotificationType(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v130 = (char *)v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)v116 - v31;
  v34 = __chkstk_darwin(v33);
  v36 = (id *)((char *)v116 - v35);
  v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
  v37((char *)v116 - v35, a2, v27, v34);
  v38 = (*(uint64_t (**)(id *, uint64_t))(v28 + 88))(v36, v27);
  if (v38 != enum case for RDUserNotificationType.reminderAlarm(_:)
    && v38 != enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (v38 == enum case for RDUserNotificationType.caldavSharedList(_:))
    {
      (*(void (**)(id *, uint64_t))(v28 + 96))(v36, v27);

      goto LABEL_4;
    }
    if (v38 == enum case for RDUserNotificationType.assignmentNotification(_:)
      || v38 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      (*(void (**)(id *, uint64_t))(v28 + 96))(v36, v27);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (v38 != enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
      if (v38 == enum case for RDUserNotificationType.todayNotification(_:)
        || v38 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
      {
        goto LABEL_4;
      }
      if (v38 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        v59 = v128;
        a2 = v129;
        if (qword_100837068 != -1)
          swift_once(&qword_100837068, sub_100260400);
        v60 = type metadata accessor for Logger(0);
        v61 = sub_10001AAA8(v60, (uint64_t)qword_1008420A0);
        v62 = *(void (**)(char *, _QWORD *, uint64_t))(v19 + 16);
        v62(v26, v59, a2);
        v63 = a1;
        v130 = (char *)v61;
        v64 = Logger.logObject.getter(v63);
        v65 = static os_log_type_t.default.getter(v64);
        if (os_log_type_enabled(v64, v65))
        {
          v66 = swift_slowAlloc(22, -1);
          v118 = v62;
          v67 = v66;
          v117 = swift_slowAlloc(64, -1);
          v134[0] = v117;
          *(_DWORD *)v67 = 136315394;
          v116[1] = v67 + 4;
          v68 = objc_msgSend(v63, "actionIdentifier");
          v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          v71 = v70;

          v133 = sub_10001A820(v69, v71, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);

          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 12) = 2080;
          v73 = RDUserNotificationAction.rawValue.getter(v72);
          v133 = sub_10001A820(v73, v74, v134);
          v59 = v128;
          a2 = v129;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
          v75 = swift_bridgeObjectRelease();
          v76 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
          v76(v26, a2, v75);
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "Processing notification response {actionIdentifier: %s, action: %s}", (uint8_t *)v67, 0x16u);
          v77 = v117;
          swift_arrayDestroy(v117, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v77, -1, -1);
          v78 = v67;
          v62 = v118;
          swift_slowDealloc(v78, -1, -1);
        }
        else
        {

          v76 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
          ((void (*)(char *, uint64_t))v76)(v26, a2);
        }

        v62(v23, v59, a2);
        v79 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v23, a2);
        if ((_DWORD)v79 == enum case for RDUserNotificationAction.defaultDismiss(_:))
        {
          v80 = v124;
          Date.init()(v79);
          v81 = (void *)objc_opt_self(REMUserDefaults);
          v82 = objc_msgSend(v81, "daemonUserDefaults");
          v83 = objc_msgSend(v82, "lastPresentAlarmDate");

          if (v83)
          {
            v84 = v127;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

            v86 = v125;
            v85 = v126;
            v87 = *(void (**)(char *, char *, uint64_t))(v125 + 32);
            v88 = (uint64_t)v122;
            v87(v122, v84, v126);
            v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
            v89(v88, 0, 1, v85);
            v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v88, 1, v85);
            v91 = (uint64_t)v123;
            if (v90 != 1)
            {
              v92 = v119;
              v87(v119, (char *)v88, v85);
              v93 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              if ((dispatch thunk of static Comparable.< infix(_:_:)(v80, v92, v85, v93) & 1) == 0)
              {
                v94 = objc_msgSend(v81, "daemonUserDefaults");
                objc_msgSend(v94, "setLastPresentAlarmDate:", 0);

              }
              (*(void (**)(char *, uint64_t))(v86 + 8))(v92, v85);
LABEL_51:
              v105 = objc_msgSend(v81, "daemonUserDefaults");
              v106 = objc_msgSend(v105, "nextScheduledAlarmDate");

              if (v106)
              {
                v107 = v127;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v106);

                v108 = *(void (**)(uint64_t, char *, uint64_t))(v86 + 32);
                v108(v91, v107, v85);
                v89(v91, 0, 1, v85);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v91, 1, v85) != 1)
                {
                  v109 = v120;
                  v108((uint64_t)v120, (char *)v91, v85);
                  v110 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                  v111 = dispatch thunk of static Comparable.< infix(_:_:)(v80, v109, v85, v110);
                  v52 = v132;
                  if ((v111 & 1) == 0)
                  {
                    v112 = objc_msgSend(v81, "daemonUserDefaults");
                    objc_msgSend(v112, "setNextScheduledAlarmDate:", 0);

                  }
                  (*(void (**)(char *, uint64_t))(v86 + 8))(v109, v85);
                  goto LABEL_58;
                }
              }
              else
              {
                v89(v91, 1, 1, v85);
              }
              sub_1000EA320(v91);
              v52 = v132;
LABEL_58:
              sub_100260D4C();
              v104 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v80, v85);
LABEL_59:
              v113 = Logger.logObject.getter(v104);
              v114 = static os_log_type_t.default.getter(v113);
              if (os_log_type_enabled(v113, v114))
              {
                v115 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v115 = 0;
                _os_log_impl((void *)&_mh_execute_header, v113, v114, "Handled dismissal of before first unlock notification successfully.", v115, 2u);
                swift_slowDealloc(v115, -1, -1);
              }

              goto LABEL_10;
            }
          }
          else
          {
            v86 = v125;
            v85 = v126;
            v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
            v88 = (uint64_t)v122;
            v89((uint64_t)v122, 1, 1, v126);
            v91 = (uint64_t)v123;
          }
          sub_1000EA320(v88);
          goto LABEL_51;
        }
        if ((_DWORD)v79 == enum case for RDUserNotificationAction.debugDismiss(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.markAsCompleted(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.addToReminders(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.viewAssignmentInList(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.declineAssignment(_:)
          || (_DWORD)v79 == enum case for RDUserNotificationAction.viewRemindersInList(_:))
        {
          v95 = v121;
          v96 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v62)(v121, v59, a2);
          v97 = Logger.logObject.getter(v96);
          v98 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v97, v98))
          {
            v99 = (uint8_t *)swift_slowAlloc(12, -1);
            v100 = swift_slowAlloc(32, -1);
            v134[0] = v100;
            *(_DWORD *)v99 = 136315138;
            v101 = RDUserNotificationAction.rawValue.getter(v100);
            v133 = sub_10001A820(v101, v102, v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
            v103 = swift_bridgeObjectRelease();
            v76(v95, a2, v103);
            _os_log_impl((void *)&_mh_execute_header, v97, v98, "Unexpected action for notification type .beforeFirstUnlock {action: %s}", v99, 0xCu);
            swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v100, -1, -1);
            swift_slowDealloc(v99, -1, -1);
          }
          else
          {
            ((void (*)(char *, uint64_t))v76)(v95, a2);
          }

          v52 = v132;
          goto LABEL_59;
        }
      }
      else
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v27, v27);
        __break(1u);
      }
      result = _diagnoseUnexpectedEnumCase<A>(type:)(a2, a2);
      __break(1u);
      return result;
    }
  }
  (*(void (**)(id *, uint64_t))(v28 + 8))(v36, v27);
LABEL_4:
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v39 = type metadata accessor for Logger(0);
  sub_10001AAA8(v39, (uint64_t)qword_1008420A0);
  ((void (*)(char *, uint64_t, uint64_t))v37)(v32, a2, v27);
  v40 = a1;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v128 = (_QWORD *)swift_slowAlloc(8, -1);
    v129 = swift_slowAlloc(32, -1);
    v134[0] = v129;
    *(_DWORD *)v43 = 136315394;
    v44 = v130;
    ((void (*)(char *, char *, uint64_t))v37)(v130, v32, v27);
    v45 = String.init<A>(describing:)(v44, v27);
    v133 = sub_10001A820(v45, v46, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
    v47 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v28 + 8))(v32, v27, v47);
    *(_WORD *)(v43 + 12) = 2112;
    v133 = (uint64_t)v40;
    v48 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
    v49 = v128;
    *v128 = v40;

    _os_log_impl((void *)&_mh_execute_header, v41, v42, "RDBeforeFirstUnlockNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v43, 0x16u);
    v50 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v49, 1, v50);
    swift_slowDealloc(v49, -1, -1);
    v51 = v129;
    swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);

  }
  v52 = v132;
LABEL_10:
  if (qword_100837068 != -1)
    swift_once(&qword_100837068, sub_100260400);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_10001AAA8(v53, (uint64_t)qword_1008420A0);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Completing action handler by calling completionHandler now.", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  return v52();
}

uint64_t sub_100264D00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100264D24()
{
  uint64_t v0;

  sub_100261B40(*(void **)(v0 + 16));
}

uint64_t sub_100264D2C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100264D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100264D7C()
{
  uint64_t v0;

  sub_100261684(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100264D84()
{
  uint64_t v0;

  return sub_100261630(v0);
}

void sub_100264D8C()
{
  sub_1004858A8((uint64_t)sub_1002604B4, 0);
}

BOOL sub_100264DB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100260CD4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100264E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100842280);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842280);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100264E90(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  Class isa;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)objc_msgSend(v2, "purpose", v8);
  if ((unint64_t)(v11 - 1) >= 2)
  {
    if (v11)
    {
      if (qword_100837070 != -1)
        swift_once(&qword_100837070, sub_100264E00);
      v14 = sub_10001AAA8(v6, (uint64_t)qword_100842280);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v14, v6);
      v15 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v16 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown purpose", 15, 2uLL, v15, v16);
      __break(1u);
    }
    else
    {
      sub_100265084(a1, a2);
      if (!v3)
      {
        v12 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
        sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v12, "initWithStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      }
    }
  }
  else
  {
    __chkstk_darwin(v11);
    v17[-2] = v2;
    sub_1000156FC(a2);
  }
}

uint64_t sub_100265084(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *isa;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = v3;
  v6 = a1;
  v7 = objc_msgSend(a1, "accountStoragesForAllGenericAccounts");
  v58 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v58);

  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)qword_100842280);
  swift_bridgeObjectRetain_n(v8, 2);
  v10 = v2;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  v13 = (unint64_t)v8 >> 62;
  if (os_log_type_enabled(v11, v12))
  {
    v59 = v6;
    v14 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(32, -1);
    v65 = v53;
    *(_DWORD *)v14 = 134218242;
    v62 = v3;
    v54 = (unint64_t)v8 >> 62;
    v55 = a2;
    if (v13)
    {
      if (v8 < 0)
        v51 = v8;
      else
        v51 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v15 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v14 + 12) = 2080;
    v17 = objc_msgSend(v10, "name", v16);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v8;
    v21 = v20;

    v63 = sub_10001A820(v18, v21, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);

    v8 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetching all generic account storages {cached#: %ld, name: %s}", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v6 = v59;
    v4 = v62;
    a2 = v55;
    v13 = v54;
  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  if (v13)
  {
    if (v8 < 0)
      v49 = v8;
    else
      v49 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v50 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease();
    if (v50)
      return v8;
  }
  else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return v8;
  }
  swift_bridgeObjectRelease();
  sub_100355A50(a2, (uint64_t)sub_1002659BC, 0);
  if (!v4)
  {
    v8 = v22;
    v23 = (unint64_t)v22 >> 62;
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0)
        v52 = v22;
      else
        v52 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v24 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v25 = v10;
    v26 = v25;
    if (v24)
    {
      swift_bridgeObjectRetain_n(v8, 2);
      v27 = v26;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.info.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v60 = v6;
        v30 = swift_slowAlloc(22, -1);
        v56 = swift_slowAlloc(32, -1);
        v65 = v56;
        *(_DWORD *)v30 = 134218242;
        v57 = v29;
        if (v23)
        {
          if (v8 < 0)
            v41 = v8;
          else
            v41 = v8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v31 = _CocoaArrayWrapper.endIndex.getter(v41);
          swift_bridgeObjectRelease();
        }
        else
        {
          v31 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        v63 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        *(_QWORD *)&v42 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v30 + 12) = 2080;
        v43 = v8;
        v44 = objc_msgSend(v27, "name", v42);
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v47 = v46;

        v8 = v43;
        v63 = sub_10001A820(v45, v47, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v57, "Putting all generic account storages fetched from DB to cache {fetched#: %ld, name: %s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        v6 = v60;
      }
      else
      {

        swift_bridgeObjectRelease_n(v8, 2);
      }
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "setAccountStoragesForAllGenericAccountsWithStorages:", isa);
      goto LABEL_27;
    }
    v32 = v25;
    isa = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(isa, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v65 = v61;
      *(_DWORD *)v35 = 136315138;
      v36 = v8;
      v37 = objc_msgSend(v32, "name");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v8 = v36;
      v63 = sub_10001A820(v38, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, isa, v34, "Couldn't fetch all generic account storages from database {name: %s}", v35, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v35, -1, -1);
LABEL_27:

      return v8;
    }

  }
  return v8;
}

void sub_100265764(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v5).n128_u64[0];
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v3, "purpose", v7);
  if ((unint64_t)v10 >= 3)
  {
    if (qword_100837070 != -1)
      swift_once(&qword_100837070, sub_100264E00);
    v19 = sub_10001AAA8(v5, (uint64_t)qword_100842280);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v19, v5);
    v20 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown purpose", 15, 2uLL, v20, v21);
    __break(1u);
  }
  else
  {
    v11 = (uint64_t)v10 + 3;
    v12 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    sub_10034B07C(v11, 0, 7);
    v14 = v13;
    v15 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "entity");
    objc_msgSend(v15, "setEntity:", v16);

    objc_msgSend(v15, "setAffectedStores:", 0);
    objc_msgSend(v15, "setPredicate:", v14);

    sub_10034DEDC((uint64_t)v15, a1);
    sub_100268FCC(v11, 0, 7);
    if (!v2)
    {
      v17 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
      sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v17, "initWithStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    }
  }
}

void sub_1002659BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;

  v5 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  sub_10034B07C(3, 0, 7);
  v7 = v6;
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v8, "setEntity:", v9);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v7);

  v10 = sub_10034DEDC((uint64_t)v8, a1);
  if (!v2)
    *a2 = v10;
}

void sub_100265AC8(void *a1, uint64_t a2)
{
  sub_100264E90(a1, a2);
}

void sub_100265AE8(uint64_t a1)
{
  sub_100265764(a1);
}

NSString sub_100265B08(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  double v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  NSArray v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  Class v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  Class v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  os_log_type_t v79;
  uint64_t v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = v3;
  v5 = v2;
  v7 = a1;
  v8 = objc_msgSend(a1, "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (!v8)
  {
    if (qword_100837070 != -1)
      swift_once(&qword_100837070, sub_100264E00);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100842280);
    v36 = v5;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v93 = v40;
      *(_DWORD *)v39 = 136315138;
      v41 = objc_msgSend(v36, "name");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v91 = sub_10001A820(v42, v44, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No need to fetching account storage because no active primary CK account is enabled {name: %s}", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    v49 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v47.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v48 = objc_msgSend(v49, "initWithStorages:", v47.super.isa);
    goto LABEL_19;
  }
  v9 = v8;
  type = a2;
  v83 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v83, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v10 + 32) = v9;
  v93 = v10;
  specialized Array._endMutation()(v10);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v89 = v9;
  v11 = v9;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v7, "accountStoragesForAccountObjectIDs:", isa, swift_bridgeObjectRelease(v93).n128_f64[0]);

  v14 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_100842280);
  v17 = v11;
  swift_bridgeObjectRetain_n(v15, 2);
  v18 = v5;
  v19 = v17;
  v20 = v18;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  v23 = (unint64_t)v15 >> 62;
  if (os_log_type_enabled(v21, v22))
  {
    v79 = v22;
    v84 = v7;
    v90 = v3;
    v24 = swift_slowAlloc(32, -1);
    v25 = (_QWORD *)swift_slowAlloc(8, -1);
    v80 = swift_slowAlloc(32, -1);
    v93 = v80;
    *(_DWORD *)v24 = 138412802;
    v91 = (uint64_t)v19;
    v26 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    v78 = v25;
    *v25 = v89;

    *(_WORD *)(v24 + 12) = 2048;
    v81 = v19;
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v77 = v15;
      else
        v77 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v27 = _CocoaArrayWrapper.endIndex.getter(v77);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v27 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v15);
    v91 = v27 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v15).n128_u64[0];
    *(_WORD *)(v24 + 22) = 2080;
    v29 = v20;
    v30 = objc_msgSend(v20, "name", v28);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v91 = sub_10001A820(v31, v33, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v21, v79, "Fetching account storage by ObjectID {input: %@, hit?: %ld, name: %s}", (uint8_t *)v24, 0x20u);
    v34 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v78, 1, v34);
    swift_slowDealloc(v78, -1, -1);
    swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    v4 = v90;
    v7 = v84;
    v19 = v81;
    v23 = (unint64_t)v15 >> 62;
  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
    v29 = v20;
  }
  if (v23)
  {
    if (v15 >= 0)
      v50 = v15 & 0xFFFFFFFFFFFFFF8;
    else
      v50 = v15;
    swift_bridgeObjectRetain(v15);
    v51 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v15);
    if (v51)
    {
      swift_bridgeObjectRetain(v15);
      v52 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(v15);
      if (v52 == 1)
        goto LABEL_16;
      goto LABEL_25;
    }
LABEL_26:
    swift_bridgeObjectRelease(v15);
    v48 = v7;
    sub_100355A50(type, (uint64_t)sub_100266544, 0);
    if (!v4)
    {
      v57 = v55;
      v58 = v19;
      v59 = v29;
      v60 = v58;
      v61 = v59;
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.info.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        typea = v63;
        v64 = swift_slowAlloc(22, -1);
        v82 = (_QWORD *)swift_slowAlloc(8, -1);
        v88 = swift_slowAlloc(32, -1);
        v93 = v88;
        *(_DWORD *)v64 = 138412546;
        v91 = (uint64_t)v60;
        v85 = v7;
        v65 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
        *v82 = v89;

        *(_WORD *)(v64 + 12) = 2080;
        v66 = objc_msgSend(v61, "name");
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        v7 = v85;
        v91 = sub_10001A820(v67, v69, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        swift_bridgeObjectRelease(v69);
        _os_log_impl((void *)&_mh_execute_header, v62, typea, "Putting account storage fetched from primaryActiveCloudKitAccountOptimized() to storage cache {accountID: %@, name: %s}", (uint8_t *)v64, 0x16u);
        v70 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v82, 1, v70);
        swift_slowDealloc(v82, -1, -1);
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v64, -1, -1);

      }
      else
      {

      }
      v71 = Array._bridgeToObjectiveC()().super.isa;
      v72 = swift_allocObject(v83, 40, 7);
      *(_OWORD *)(v72 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v72 + 32) = v60;
      v93 = v72;
      specialized Array._endMutation()(v72);
      v73 = v93;
      v74 = v60;
      v75 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, "setAccountStorages:forAccountObjectIDs:", v71, v75, swift_bridgeObjectRelease(v73).n128_f64[0]);

      v76 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
      v47.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v48 = objc_msgSend(v76, "initWithStorages:", v47.super.isa, swift_bridgeObjectRelease(v57).n128_f64[0]);

      goto LABEL_19;
    }
LABEL_27:

    return v48;
  }
  v45 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v45)
    goto LABEL_26;
  if (v45 != 1)
  {
LABEL_25:
    swift_bridgeObjectRelease(v15);
    v53 = (void *)objc_opt_self(REMError);
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v53, "internalErrorWithDebugDescription:", v48);

    swift_willThrow(v54);
    goto LABEL_27;
  }
LABEL_16:
  v46 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
  v47.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v48 = objc_msgSend(v46, "initWithStorages:", v47.super.isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

LABEL_19:
  return v48;
}

void sub_100266544(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v3 = qword_100872288;
  v4 = (void *)swift_retain(qword_100872288);
  v5 = sub_1003011F8(v4);
  swift_release(v3);
  if (v5)
  {
    v6 = sub_100259474(v5);
    if (v1)
    {

    }
    else
    {
      v10 = v6;
      v11 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v12 = swift_allocObject(v11, 40, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v12 + 32) = v10;
      v13 = v12;
      specialized Array._endMutation()(v12);

      *a1 = v13;
    }
  }
  else
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "internalErrorWithDebugDescription:", v8);

    swift_willThrow(v9);
  }
}

uint64_t sub_100266688()
{
  return sub_100268D30();
}

id sub_10026669C(NSString a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class v15;
  uint64_t v16;
  void (*v17)(_QWORD *@<X8>);
  id v18;
  Class isa;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  id v28;
  Class v29;
  id v30;
  uint64_t v31;
  __int16 v32;
  NSString v33;
  id v34;
  uint64_t v35;

  v3 = v1;
  v5 = objc_msgSend(v3, "fetchOption");
  if (v5 == (id)2)
  {
    __chkstk_darwin(2);
    v32 = 258;
    v33 = a1;
    v16 = sub_10001A630(&qword_10083DFA8);
    v17 = sub_100268FAC;
    goto LABEL_9;
  }
  if (v5 == (id)1)
  {
    __chkstk_darwin(1);
    v32 = 257;
    v33 = a1;
    v16 = sub_10001A630(&qword_10083DFA8);
    v17 = sub_100269030;
LABEL_9:
    NSManagedObjectContext.rem_performAndWait<A>(_:)(&v34, v17, &v31, v16);
    if (!v2)
    {
      v18 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      a1 = objc_msgSend(v18, "initWithAccountIDs:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    }
    return a1;
  }
  if (v5)
  {
    if (qword_100837070 != -1)
      swift_once(&qword_100837070, sub_100264E00);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_100842280);
    v21 = v3;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v24 = 134349056;
      v34 = objc_msgSend(v21, "fetchOption");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs: Unknown REMActiveCloudKitAccountFetchOption %{public}ld", v24, 0xCu);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    v25 = (void *)objc_opt_self(REMError);
    a1 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "internalErrorWithDebugDescription:", a1);

    swift_willThrow(v26);
    return a1;
  }
  v6 = objc_msgSend(a1, "storeController");
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    v9 = objc_msgSend(v8, "inMemoryPrimaryActiveCKAccountREMObjectID");
    if (v9)
    {
      v10 = v9;
      v11 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v12 = swift_allocObject(v11, 40, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v12 + 32) = v10;
      v34 = (id)v12;
      specialized Array._endMutation()(v12);
      v13 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v14 = v10;
      v15 = Array._bridgeToObjectiveC()().super.isa;
      a1 = objc_msgSend(v13, "initWithAccountIDs:", v15, swift_bridgeObjectRelease().n128_f64[0]);

      return a1;
    }

  }
  v28 = objc_allocWithZone((Class)REMAccountsDataViewInvocationREMObjectIDOnlyResult);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v28, "initWithAccountIDs:", v29);

  return v30;
}

id sub_100266ACC(void *a1)
{
  return sub_10026669C(a1);
}

uint64_t *sub_100266AEC(void *a1, uint64_t a2)
{
  _WORD *v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  _WORD *v6;
  Class isa;
  double v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  void *v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  _WORD *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  Class v90;
  Class v91;
  uint64_t v92;
  id v93;
  Class v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  double v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  id v115;
  _QWORD v116[4];
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  char v124[24];
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[16];
  uint64_t v128[3];
  uint64_t v129;
  uint64_t v130;

  v5 = v3;
  v6 = v2;
  v130 = (uint64_t)_swiftEmptyArrayStorage;
  isa = (Class)objc_msgSend(v2, "objectIDs");
  if (!isa)
  {
    v11 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v11);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v122 = a1;
  v12 = objc_msgSend(a1, "accountStoragesForAccountObjectIDs:", isa, v10);

  v13 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  v15 = objc_msgSend(v6, "objectIDs");
  v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  sub_10011F104(v17);
  v19 = v18;
  swift_bridgeObjectRelease();
  v129 = (uint64_t)v19;
  v123 = v3;
  v119 = v13;
  v120 = a2;
  v121 = v16;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v29 = v14;
    else
      v29 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v20 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease();
    if (!v20)
      goto LABEL_18;
  }
  else
  {
    v20 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v20)
      goto LABEL_18;
  }
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_59;
  }
  v21 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v14);
    else
      v22 = *(id *)(v14 + 8 * v21 + 32);
    v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
    v25 = *(_QWORD *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v25 >= v24 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1);
    ++v21;
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    specialized Array._endMutation()(v26);
    v27 = objc_msgSend(v23, "objectID");
    v28 = (void *)sub_10059C234(v27);

  }
  while (v20 != v21);
LABEL_18:
  swift_bridgeObjectRelease();
  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001AAA8(v30, (uint64_t)qword_100842280);
  v16 = v129;
  v32 = v6;
  swift_bridgeObjectRetain_n(v129, 2);
  v4 = v32;
  v19 = Logger.logObject.getter(v4);
  LOBYTE(v20) = static os_log_type_t.info.getter(v19);
  if (!os_log_type_enabled(v19, (os_log_type_t)v20))
  {

    swift_bridgeObjectRelease_n(v129, 2);
    v38 = v123;
    goto LABEL_33;
  }
  v118 = (id)v31;
  v6 = (_WORD *)swift_slowAlloc(42, -1);
  v117 = swift_slowAlloc(32, -1);
  v128[0] = v117;
  *(_DWORD *)v6 = 134218754;
  v33 = objc_msgSend(v4, "objectIDs");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v121);

  if (!((unint64_t)v5 >> 62))
  {
    v34 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);

    goto LABEL_23;
  }
LABEL_59:
  if (v5 < 0)
    v96 = v5;
  else
    v96 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v34 = _CocoaArrayWrapper.endIndex.getter(v96);

  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  v126 = v34;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127);

  v6[6] = 2048;
  swift_beginAccess(&v130, v124, 0, 0);
  if ((unint64_t)v130 >> 62)
  {
    if (v130 < 0)
      v97 = v130;
    else
      v97 = v130 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v130);
    v35 = _CocoaArrayWrapper.endIndex.getter(v97);
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v126 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127);
  v6[11] = 2048;
  if ((v16 & 0xC000000000000001) != 0)
  {
    if (v16 < 0)
      v36 = v16;
    else
      v36 = v16 & 0xFFFFFFFFFFFFFF8;
    v37 = __CocoaSet.count.getter(v36);
  }
  else
  {
    v37 = *(_QWORD *)(v16 + 16);
  }
  swift_bridgeObjectRelease();
  v126 = v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127);
  *(_QWORD *)&v39 = swift_bridgeObjectRelease().n128_u64[0];
  v6[16] = 2080;
  v40 = objc_msgSend(v4, "name", v39);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v126 = sub_10001A820(v41, v43, v128);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "Fetching account storage by ObjectID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}", (uint8_t *)v6, 0x2Au);
  swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v117, -1, -1);
  swift_slowDealloc(v6, -1, -1);

  v38 = v123;
LABEL_33:
  swift_beginAccess(&v129, v128, 0, 0);
  v44 = v129;
  if ((v129 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v129 + 16))
      goto LABEL_38;
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  if (v129 < 0)
    v45 = v129;
  else
    v45 = v129 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v129);
  v46 = __CocoaSet.count.getter(v45);
  swift_bridgeObjectRelease();
  if (!v46)
    goto LABEL_41;
LABEL_38:
  v47 = sub_1001E9108(v44);
  swift_bridgeObjectRelease();
  v48 = &v117;
  __chkstk_darwin(v49);
  v116[2] = v4;
  v116[3] = v47;
  sub_100355A50(v120, (uint64_t)sub_100268F94, (uint64_t)v116);
  if (!v38)
  {
    v51 = v50;
    if ((unint64_t)v50 >> 62)
    {
      if (v50 < 0)
        v98 = v50;
      else
        v98 = v50 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v50);
      v99 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease();
      if (v99)
      {
        swift_bridgeObjectRetain(v51);
        v52 = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease();
        if (((unint64_t)v47 & 0x8000000000000000) != 0)
          goto LABEL_72;
LABEL_45:
        if (((unint64_t)v47 & 0x4000000000000000) == 0)
        {
          v53 = (uint64_t)v47[2];
LABEL_47:
          v54 = v4;
          v55 = v54;
          if (v52 == v53)
          {
            swift_retain_n(v47);
            v56 = v55;
            v57 = Logger.logObject.getter(v56);
            v58 = static os_log_type_t.info.getter(v57);
            v59 = v58;
            if (os_log_type_enabled(v57, v58))
            {
              v60 = swift_slowAlloc(22, -1);
              LODWORD(v120) = v59;
              v61 = v60;
              v118 = (id)swift_slowAlloc(64, -1);
              v126 = (uint64_t)v118;
              *(_DWORD *)v61 = 136315394;
              v62 = swift_retain();
              v63 = Array.description.getter(v62, v121);
              v123 = 0;
              v64 = v63;
              v66 = v65;
              swift_release(v47);
              v125 = sub_10001A820(v64, v66, &v126);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
              swift_release_n(v47);
              *(_QWORD *)&v67 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v61 + 12) = 2080;
              v68 = objc_msgSend(v56, "name", v67, v61 + 14);
              v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
              v71 = v70;

              v125 = sub_10001A820(v69, v71, &v126);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v120, "Putting account storages fetched from DB to cache {objIDs: %s, name: %s}", (uint8_t *)v61, 0x16u);
              v72 = v118;
              swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v72, -1, -1);
              swift_slowDealloc(v61, -1, -1);

            }
            else
            {

              swift_release_n(v47);
            }
            v90 = Array._bridgeToObjectiveC()().super.isa;
            v91 = Array._bridgeToObjectiveC()().super.isa;
            swift_release(v47);
            objc_msgSend(v122, "setAccountStorages:forAccountObjectIDs:", v90, v91);

          }
          else
          {
            v73 = v54;
            v74 = swift_retain();
            v75 = Logger.logObject.getter(v74);
            v76 = static os_log_type_t.info.getter(v75);
            v77 = v76;
            if (os_log_type_enabled(v75, v76))
            {
              v78 = swift_slowAlloc(22, -1);
              LODWORD(v123) = v77;
              v79 = v78;
              v122 = (id)swift_slowAlloc(64, -1);
              v126 = (uint64_t)v122;
              *(_DWORD *)v79 = 136315394;
              v80 = swift_retain();
              v81 = Array.description.getter(v80, v121);
              v83 = v82;
              swift_release(v47);
              v125 = sub_10001A820(v81, v83, &v126);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
              swift_release_n(v47);
              *(_QWORD *)&v84 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v79 + 12) = 2080;
              v121 = v79 + 14;
              v85 = objc_msgSend(v73, "name", v84);
              v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
              v88 = v87;

              v125 = sub_10001A820(v86, v88, &v126);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v123, "Couldn't fetch all requested accounts {objIDs: %s, name: %s}", (uint8_t *)v79, 0x16u);
              v89 = v122;
              swift_arrayDestroy(v122, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v89, -1, -1);
              swift_slowDealloc(v79, -1, -1);

            }
            else
            {

              swift_release_n(v47);
            }
          }
          swift_beginAccess(&v130, &v126, 33, 0);
          sub_1001E2E80(v51);
          swift_endAccess(&v126);
          goto LABEL_56;
        }
LABEL_72:
        swift_bridgeObjectRetain(v47);
        v53 = _CocoaArrayWrapper.endIndex.getter(v100);
        swift_release(v47);
        goto LABEL_47;
      }
    }
    else
    {
      v52 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v52)
      {
        if (((unint64_t)v47 & 0x8000000000000000) != 0)
          goto LABEL_72;
        goto LABEL_45;
      }
    }
    v123 = 0;
    swift_bridgeObjectRelease();
    v101 = v4;
    v102 = swift_retain();
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.info.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = swift_slowAlloc(22, -1);
      v122 = (id)swift_slowAlloc(64, -1);
      v126 = (uint64_t)v122;
      *(_DWORD *)v105 = 136315394;
      v106 = swift_retain();
      v107 = Array.description.getter(v106, v121);
      v109 = v108;
      swift_release(v47);
      v125 = sub_10001A820(v107, v109, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
      swift_release_n(v47);
      *(_QWORD *)&v110 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v105 + 12) = 2080;
      v111 = objc_msgSend(v101, "name", v110);
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v114 = v113;

      v125 = sub_10001A820(v112, v114, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "None of the requested accounts could be fetched {objIDs: %s, name: %s}", (uint8_t *)v105, 0x16u);
      v115 = v122;
      swift_arrayDestroy(v122, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v105, -1, -1);

    }
    else
    {

      swift_release_n(v47);
    }
LABEL_56:
    swift_beginAccess(&v130, &v126, 0, 0);
    v92 = v130;
    v93 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    swift_bridgeObjectRetain(v92);
    v94 = Array._bridgeToObjectiveC()().super.isa;
    v48 = (uint64_t *)objc_msgSend(v93, "initWithStorages:", v94, swift_bridgeObjectRelease().n128_f64[0]);

    swift_bridgeObjectRelease();
    return v48;
  }
  swift_release(v47);
  swift_bridgeObjectRelease();
  return v48;
}

void sub_100267884(void *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  Class isa;
  uint64_t v13;

  v6 = a1;
  sub_100268BAC(a2, v6);

  v7 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  sub_10034B07C(a2, 0, 1);
  v9 = v8;
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setAffectedStores:", isa);

  objc_msgSend(v10, "setPredicate:", v9);
  v13 = sub_10034DEDC((uint64_t)v10, (uint64_t)v6);
  swift_bridgeObjectRelease();

  if (!v3)
    *a3 = v13;
}

id sub_1002679F0(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Class v17;
  id v18;
  Class isa;
  id v20;

  v3 = v1;
  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100842280);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_msgSend(v3, "objectIDs");
  v11 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v12 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v13 = a1;
  sub_100268BAC((uint64_t)v12, v13);

  v14 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  sub_10034B07C((uint64_t)v12, 0, 1);
  v16 = v15;
  v17 = (Class)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v14), "entity");
  -[objc_class setEntity:](v17, "setEntity:", v18);

  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  -[objc_class setAffectedStores:](v17, "setAffectedStores:", isa);

  -[objc_class setPredicate:](v17, "setPredicate:", v16);
  sub_10034DEDC((uint64_t)v17, (uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {

    v20 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v17 = Array._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v20, "initWithStorages:", v17, swift_bridgeObjectRelease().n128_f64[0]);
  }

  return v12;
}

uint64_t *sub_100267CB8(void *a1, uint64_t a2)
{
  return sub_100266AEC(a1, a2);
}

id sub_100267CD8(void *a1)
{
  return sub_1002679F0(a1);
}

uint64_t *sub_100267CF8(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  os_log_type_t v5;
  void *v6;
  char **v9;
  Class isa;
  double v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  Class v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  double v101;
  id v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  unint64_t v107;
  id v108;
  Class v109;
  _QWORD v111[4];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  char v119[24];
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[16];
  uint64_t v123[3];
  uint64_t v124;
  unint64_t v125;

  v6 = v2;
  v125 = (unint64_t)_swiftEmptyArrayStorage;
  v9 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  isa = (Class)objc_msgSend(v2, "externalIdentifiers");
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0, &type metadata for String);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v11 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v118 = a1;
  v12 = objc_msgSend(a1, "accountStoragesForAccountExternalIdentifiers:", isa, v11);

  v115 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v115);

  v14 = objc_msgSend(v6, "externalIdentifiers");
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);

  v16 = sub_10011EE40((uint64_t)v15);
  swift_bridgeObjectRelease();
  v124 = v16;
  v116 = v6;
  v117 = v3;
  v114 = a2;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v30 = v13;
    else
      v30 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v17 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_20;
  }
  else
  {
    v17 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v17)
      goto LABEL_20;
  }
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_43;
  }
  for (i = 0; i != v17; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
    else
      v19 = *(id *)(v13 + 8 * i + 32);
    v20 = v19;
    v21 = objc_msgSend(v19, "externalIdentifier");
    if (v21)
    {
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      v26 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v28 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized Array._endMutation()(v29);
      sub_10059BE6C(v23, v25);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v31 = type metadata accessor for Logger(0);
  v32 = (void *)sub_10001AAA8(v31, (uint64_t)qword_100842280);
  v13 = v124;
  v33 = v116;
  swift_bridgeObjectRetain_n(v124, 2);
  v4 = v33;
  v15 = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v5))
  {
    v116 = v32;
    v9 = (char **)swift_slowAlloc(42, -1);
    v113 = swift_slowAlloc(32, -1);
    v123[0] = v113;
    *(_DWORD *)v9 = 134218754;
    v34 = objc_msgSend(v4, "externalIdentifiers");
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

    v36 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRelease();
    v121 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);

    *((_WORD *)v9 + 6) = 2048;
    swift_beginAccess(&v125, v119, 0, 0);
    v16 = v125;
    if (!(v125 >> 62))
    {
      v37 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_25:
      v121 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      *((_WORD *)v9 + 11) = 2048;
      v38 = *(_QWORD *)(v13 + 16);
      swift_bridgeObjectRelease();
      v121 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      *(_QWORD *)&v39 = swift_bridgeObjectRelease().n128_u64[0];
      *((_WORD *)v9 + 16) = 2080;
      v40 = objc_msgSend(v4, "name", v39);
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v121 = sub_10001A820(v41, v43, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v5, "Fetching account storage by ExtID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}", (uint8_t *)v9, 0x2Au);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      v44 = v117;
      goto LABEL_27;
    }
LABEL_43:
    if (v16 < 0)
      v88 = v16;
    else
      v88 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v37 = _CocoaArrayWrapper.endIndex.getter(v88);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }

  swift_bridgeObjectRelease_n(v124, 2);
  v44 = v117;
LABEL_27:
  swift_beginAccess(&v124, v123, 0, 0);
  if (!*(_QWORD *)(v124 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v45 = sub_1001E8BAC(v124);
  swift_bridgeObjectRelease();
  v46 = &v112;
  __chkstk_darwin(v47);
  v111[2] = v4;
  v111[3] = v45;
  sub_100355A50(v114, (uint64_t)sub_100268F64, (uint64_t)v111);
  if (!v44)
  {
    v49 = v48;
    if ((unint64_t)v48 >> 62)
    {
      if (v48 < 0)
        v89 = v48;
      else
        v89 = v48 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v48);
      v90 = _CocoaArrayWrapper.endIndex.getter(v89);
      swift_bridgeObjectRelease();
      if (v90)
      {
        swift_bridgeObjectRetain(v49);
        v50 = _CocoaArrayWrapper.endIndex.getter(v89);
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v50)
      {
LABEL_33:
        v51 = v45[2];
        v52 = v4;
        v53 = v52;
        if (v50 == v51)
        {
          swift_retain_n(v45);
          v54 = v53;
          v55 = Logger.logObject.getter(v54);
          v56 = static os_log_type_t.info.getter(v55);
          v57 = v56;
          if (os_log_type_enabled(v55, v56))
          {
            v58 = swift_slowAlloc(22, -1);
            v117 = 0;
            v59 = v58;
            v116 = (id)swift_slowAlloc(64, -1);
            v121 = (uint64_t)v116;
            *(_DWORD *)v59 = 136315394;
            LODWORD(v114) = v57;
            v60 = swift_retain();
            v61 = Array.description.getter(v60, &type metadata for String);
            v63 = v62;
            swift_release(v45);
            v120 = sub_10001A820(v61, v63, &v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);
            swift_release_n(v45);
            *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v59 + 12) = 2080;
            v113 = v59 + 14;
            v65 = objc_msgSend(v54, "name", v64);
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
            v68 = v67;

            v120 = sub_10001A820(v66, v68, &v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v114, "Putting account storages fetched from DB to cache {extIds: %s, name: %s}", (uint8_t *)v59, 0x16u);
            v69 = v116;
            swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v69, -1, -1);
            swift_slowDealloc(v59, -1, -1);

          }
          else
          {

            swift_release_n(v45);
          }
          v86 = Array._bridgeToObjectiveC()().super.isa;
          v87 = Array._bridgeToObjectiveC()().super.isa;
          swift_release(v45);
          objc_msgSend(v118, "setAccountStorages:forAccountExternalIdentifiers:", v86, v87);

        }
        else
        {
          v70 = v52;
          v71 = swift_retain();
          v72 = Logger.logObject.getter(v71);
          v73 = static os_log_type_t.info.getter(v72);
          v74 = v73;
          if (os_log_type_enabled(v72, v73))
          {
            v75 = swift_slowAlloc(22, -1);
            v118 = (id)swift_slowAlloc(64, -1);
            v121 = (uint64_t)v118;
            *(_DWORD *)v75 = 136315394;
            LODWORD(v117) = v74;
            v76 = swift_retain();
            v77 = Array.description.getter(v76, &type metadata for String);
            v79 = v78;
            swift_release(v45);
            v120 = sub_10001A820(v77, v79, &v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);
            swift_release_n(v45);
            *(_QWORD *)&v80 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v75 + 12) = 2080;
            v116 = (id)(v75 + 14);
            v81 = objc_msgSend(v70, "name", v80);
            v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
            v84 = v83;

            v120 = sub_10001A820(v82, v84, &v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v117, "Couldn't fetch all requested accounts {extIds: %s, name: %s}", (uint8_t *)v75, 0x16u);
            v85 = v118;
            swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v85, -1, -1);
            swift_slowDealloc(v75, -1, -1);

          }
          else
          {

            swift_release_n(v45);
          }
        }
        swift_beginAccess(&v125, &v121, 33, 0);
        sub_1001E2E80(v49);
        swift_endAccess(&v121);
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRelease();
    v91 = v4;
    v92 = swift_retain();
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.info.getter(v93);
    v95 = v94;
    if (os_log_type_enabled(v93, v94))
    {
      v96 = swift_slowAlloc(22, -1);
      v118 = (id)swift_slowAlloc(64, -1);
      v121 = (uint64_t)v118;
      *(_DWORD *)v96 = 136315394;
      LODWORD(v117) = v95;
      v97 = swift_retain();
      v98 = Array.description.getter(v97, &type metadata for String);
      v100 = v99;
      swift_release(v45);
      v120 = sub_10001A820(v98, v100, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);
      swift_release_n(v45);
      *(_QWORD *)&v101 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v96 + 12) = 2080;
      v102 = objc_msgSend(v91, "name", v101);
      v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      v105 = v104;

      v120 = sub_10001A820(v103, v105, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v117, "None of the requested accounts could be fetched {extIds: %s, name: %s}", (uint8_t *)v96, 0x16u);
      v106 = v118;
      swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v96, -1, -1);

    }
    else
    {

      swift_release_n(v45);
    }
LABEL_55:
    swift_beginAccess(&v125, &v121, 0, 0);
    v107 = v125;
    v108 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    swift_bridgeObjectRetain(v107);
    v109 = Array._bridgeToObjectiveC()().super.isa;
    v46 = (uint64_t *)objc_msgSend(v108, "initWithStorages:", v109, swift_bridgeObjectRelease().n128_f64[0]);

    swift_bridgeObjectRelease();
    return v46;
  }
  swift_release(v45);
  swift_bridgeObjectRelease();
  return v46;
}

void sub_1002689D4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  id v12;
  Class isa;

  v3 = v1;
  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100842280);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_msgSend(v3, "externalIdentifiers");
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);

  sub_100268E5C(v11, a1);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v12 = objc_allocWithZone((Class)REMAccountsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v12, "initWithStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
}

uint64_t *sub_100268B6C(void *a1, uint64_t a2)
{
  return sub_100267CF8(a1, a2);
}

void sub_100268B8C(uint64_t a1)
{
  sub_1002689D4(a1);
}

_QWORD *sub_100268BAC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v5 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v8 = v7;
      v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v10 = objc_msgSend(a2, "persistentStoreOfAccountWithAccountID:", v7);

      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v6);
      }
      ++v5;
      if (v9 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100268D30()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  NSString v6;
  uint64_t v7;

  if (qword_100837070 != -1)
    swift_once(&qword_100837070, sub_100264E00);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842280);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unexpectedly calling the invoke() with the MoC instead of with the storeController for REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = (void *)objc_opt_self(REMError);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "internalErrorWithDebugDescription:", v6);

  return swift_willThrow(v7);
}

uint64_t sub_100268E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;

  v4 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  sub_10034B07C(a1, 0, 2);
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v7, "setEntity:", v8);

  objc_msgSend(v7, "setAffectedStores:", 0);
  objc_msgSend(v7, "setPredicate:", v6);

  v9 = sub_10034DEDC((uint64_t)v7, a2);
  return v9;
}

uint64_t sub_100268F64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = sub_100268E5C(*(_QWORD *)(v2 + 24), a1);
  if (!v3)
    *a2 = result;
  return result;
}

void sub_100268F94(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_100267884(a1, *(_QWORD *)(v2 + 24), a2);
}

void sub_100268FAC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10034CF08(*(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100268FCC(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 6:
      a2 = result;
LABEL_3:
      result = swift_bridgeObjectRelease(a2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100269004(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_100265764(a1);
  if (!v2)
    *a2 = v4;
}

void sub_100269030(_QWORD *a1@<X8>)
{
  sub_100268FAC(a1);
}

uint64_t sub_100269044(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_1008422D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TaggedInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100269080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100842298);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842298);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100269110(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  Swift::Int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  _QWORD *v81;
  int v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  char v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  _QWORD *v158;
  id v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  uint64_t v165;

  v160 = a3;
  v164 = a4;
  v158 = a2;
  v138 = a5;
  v162 = (_QWORD *)type metadata accessor for REMRemindersListDataView.TaggedModel(0);
  v137 = *(v162 - 1);
  __chkstk_darwin(v162);
  v136 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v163 = (char *)&v130 - v8;
  v9 = sub_10001A630(&qword_100839A90);
  __chkstk_darwin(v9);
  v135 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v143 = (uint64_t)&v130 - v13;
  v141 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v12);
  v144 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v134 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v142 = (char *)&v130 - v16;
  v17 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v146 = *(_QWORD *)(v17 - 8);
  v147 = v17;
  __chkstk_darwin(v17);
  v150 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v19);
  v139 = (uint64_t)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v153 = *(_QWORD *)(v21 - 8);
  v154 = (_QWORD *)v21;
  __chkstk_darwin(v21);
  v152 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v151 = (char *)&v130 - v24;
  v25 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v26 = *(_QWORD *)(v25 - 8);
  v148 = v25;
  v149 = v26;
  __chkstk_darwin(v25);
  v133 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v155 = (uint64_t)&v130 - v29;
  v157 = _s10PredicatesOMa(0);
  __chkstk_darwin(v157);
  v145 = (uint64_t *)((char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v156 = (uint64_t *)((char *)&v130 - v32);
  v33 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v33);
  v140 = (uint64_t)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v130 - v36;
  v161 = (_QWORD *)type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate(0);
  v38 = *(v161 - 1);
  __chkstk_darwin(v161);
  v40 = (char *)&v130 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A630(&qword_1008422D8);
  v42 = __chkstk_darwin(v41);
  v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters(0, v42);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v130 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation(0, v47);
  v51 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v50)), "init");
  v52 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v44, 1, 1, v52);
  REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.init(sortingStyle:)(v44);
  v53 = v165;
  v54 = sub_1004D6808();
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);

    return;
  }
  v165 = v54;
  v132 = (void *)a1;
  v130 = v37;
  v131 = 0;
  v55 = v162;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);

  v56 = v164;
  REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter(v57);
  v58 = v161;
  v59 = (*(uint64_t (**)(char *, _QWORD *))(v38 + 88))(v40, v161);
  if (v59 == enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:)
    || v59 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
  {
    (*(void (**)(char *, _QWORD *))(v38 + 96))(v40, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v55;
    v61 = v132;
    goto LABEL_10;
  }
  v60 = v55;
  v61 = v132;
  if (v59 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
  {
LABEL_10:
    v65 = v165;
    if ((unint64_t)v165 >> 62)
    {
      if (v165 < 0)
        v128 = v165;
      else
        v128 = v165 & 0xFFFFFFFFFFFFFF8;
      v129 = sub_1000151B0(0, (unint64_t *)&unk_10083ADC8, REMHashtagLabel_ptr);
      swift_bridgeObjectRetain(v65);
      v67 = _bridgeCocoaArray<A>(_:)(v128, v129);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v165);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v66);
      sub_1000151B0(0, (unint64_t *)&unk_10083ADC8, REMHashtagLabel_ptr);
      v67 = v65;
    }
    v64 = v163;
    v68 = v131;
    v69 = sub_10026A81C((uint64_t)v61, (uint64_t)v56, v67);
    if (v68)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      return;
    }
    v70 = v69;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v62 = v131;
  if (v59 != enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v58, v58);
    __break(1u);
    goto LABEL_36;
  }
  v63 = sub_10026AE5C((uint64_t)v132, (uint64_t)v56);
  v64 = v163;
  if (v62)
    goto LABEL_14;
  v70 = v63;
LABEL_17:
  v71 = (char *)sub_10026B1D8(v61, v160);
  v72 = v60;
  v162 = sub_10026B54C(v70, v61, v56);
  v163 = v71;
  if ((REMRemindersListDataView.TaggedInvocation.Parameters.countCompleted.getter() & 1) != 0)
  {
    v74 = (uint64_t)v156;
    v73 = v157;
    *v156 = v70;
    swift_storeEnumTagMultiPayload(v74, v73, 22);
    swift_bridgeObjectRetain(v70);
    sub_10000D2C0();
    v76 = v75;
    sub_10001C744(v74, _s10PredicatesOMa);
    v77 = (uint64_t)v130;
    v161 = v76;
    sub_1004934D8((uint64_t)v61, (uint64_t)v76);
    v79 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v77, 0, 1, v79);

  }
  else
  {
    v78 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v130, 1, 1, v78);
  }
  v81 = (_QWORD *)sub_10026BC14(v80, (uint64_t)v61, (uint64_t)v158);
  LODWORD(v156) = v82;
  v161 = v81;
  v83 = objc_msgSend(v159, "fetchResultTokenToDiffAgainst");
  sub_100493C24(v83, (uint64_t)v61, v155);

  v84 = v151;
  REMRemindersListDataView.TaggedInvocation.Parameters.remindersPrefetch.getter();
  v86 = (uint64_t *)v152;
  v85 = v153;
  v58 = v154;
  (*(void (**)(char *, char *, _QWORD *))(v153 + 16))(v152, v84, v154);
  v87 = (*(uint64_t (**)(uint64_t *, _QWORD *))(v85 + 88))(v86, v58);
  if (v87 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, _QWORD *))(v85 + 96))(v86, v58);
    v89 = *v86;
    v90 = (uint64_t)v162;
    swift_bridgeObjectRetain(v162);
    v158 = sub_10049BB18(v89, v90, (uint64_t)v132, v160, 0);
    v160 = _swiftEmptyArrayStorage;
    v91 = v150;
LABEL_27:
    v88 = swift_bridgeObjectRelease();
LABEL_28:
    (*(void (**)(char *, _QWORD *, __n128))(v85 + 8))(v84, v58, v88);
    v106 = (uint64_t)v145;
    *v145 = v70;
    swift_storeEnumTagMultiPayload(v106, v157, 22);
    sub_10000D2C0();
    v108 = v107;
    v109 = sub_10001C744(v106, _s10PredicatesOMa);
    REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter(v109);
    v110 = (uint64_t)v91;
    v111 = v132;
    v112 = sub_10049E524((uint64_t)v132, (uint64_t)v108, (uint64_t)v130, v110, v90);
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v110, v147);

    v113 = v140;
    sub_100008868((uint64_t)v130, v140, &qword_100839AA0);
    v114 = v142;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v90, v113, v112 & 1, v158, v160);
    v115 = v143;
    sub_100269F6C(v111, v143);
    v131 = 0;
    v116 = v134;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v134, v114, v141);
    v117 = v135;
    sub_100008868(v115, v135, &qword_100839A90);
    v118 = v163;
    v164 = v163;
    REMRemindersListDataView.TaggedModel.init(flatModel:allHashtagLabels:smartListHashtagLabels:smartListHashtagLabelsUpToDate:taggedSmartList:manualOrderingID:)(v116, v165, v161, v156 & 1, v118, v117);
    v119 = v137;
    v120 = v136;
    (*(void (**)(char *, char *, _QWORD *))(v137 + 16))(v136, v64, v72);
    v121 = v148;
    v122 = v133;
    v123 = v155;
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v133, v155, v148);
    v124 = v64;
    v125 = v119;
    v126 = sub_10009FC50(&qword_1008422E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TaggedModel);
    v127 = sub_10009FC50(&qword_1008422E8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TaggedModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v120, v122, v72, v126, v127);

    (*(void (**)(char *, _QWORD *))(v125 + 8))(v124, v72);
    sub_10000882C(v143, &qword_100839A90);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v141);
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v123, v121);
    sub_10000882C((uint64_t)v130, &qword_100839AA0);
    return;
  }
  v92 = v155;
  v91 = v150;
  if (v87 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    v93 = (uint64_t *)v152;
    v85 = v153;
    v58 = v154;
    (*(void (**)(char *, _QWORD *))(v153 + 96))(v152, v154);
    v94 = *v93;
    v91 = v150;
    v90 = (uint64_t)v162;
    swift_bridgeObjectRetain(v162);
    v158 = sub_10049C4C8(v94, v92, (uint64_t)v132, v160, 0);
    v160 = _swiftEmptyArrayStorage;
LABEL_26:
    v84 = v151;
    goto LABEL_27;
  }
  v95 = (uint64_t *)v152;
  if (v87 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(char *, _QWORD *))(v153 + 96))(v152, v154);
    v96 = v91;
    v97 = v95;
    v98 = *v95;
    v99 = (uint64_t)v97 + *(int *)(sub_10001A630(&qword_100839AA8) + 48);
    v91 = v96;
    v100 = v139;
    sub_100128FE0(v99, v139);
    v90 = (uint64_t)v162;
    swift_bridgeObjectRetain(v162);
    v101 = v98;
    v102 = (uint64_t)v132;
    v103 = v160;
    v158 = sub_10049BB18(v101, v90, (uint64_t)v132, v160, 0);
    v104 = v100;
    v105 = v102;
    v85 = v153;
    v58 = v154;
    v160 = sub_10049CB18(v104, v90, v105, v103, 0);
    sub_10000882C(v139, &qword_100839A98);
    goto LABEL_26;
  }
  v85 = v153;
  v58 = v154;
  v84 = v151;
  if (v87 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    v160 = _swiftEmptyArrayStorage;
    v158 = _swiftEmptyArrayStorage;
    v90 = (uint64_t)v162;
    goto LABEL_28;
  }
LABEL_36:
  _diagnoseUnexpectedEnumCase<A>(type:)(v58, v58);
  __break(1u);
}

void sub_100269F6C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  id v37;

  v37 = a1;
  v4 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_1008422F0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMHashtagLabelSpecifier(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((REMRemindersListDataView.TaggedInvocation.Parameters.shouldFetchManualOrderingID.getter(v13) & 1) != 0)
  {
    v33 = v2;
    if (qword_100837958 != -1)
      swift_once(&qword_100837958, sub_1005B83A8);
    v16 = qword_100872288;
    v17 = (void *)swift_retain();
    v18 = sub_1003011F8(v17);
    v19 = swift_release(v16);
    v37 = v18;
    if (v18)
    {
      REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter(v19);
      sub_10026A334((uint64_t)v6, (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_10000882C((uint64_t)v10, &qword_1008422F0);
        v20 = (void *)objc_opt_self(REMError);
        v36[0] = 0;
        v36[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._object = (void *)0x80000001006FE140;
        v21._countAndFlagsBits = 0xD000000000000051;
        String.append(_:)(v21);
        REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter(v22);
        v23 = v35;
        _print_unlocked<A, B>(_:_:)(v6, v36, v35, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v23);
        v24._countAndFlagsBits = 125;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        v25 = String._bridgeToObjectiveC()();
        objc_msgSend(v20, "invalidParameterErrorWithDescription:", v25, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v26);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
        sub_1000151B0(0, &qword_1008422F8, REMManualOrdering_ptr);
        v29 = v37;
        v30 = v33;
        sub_10026A594((uint64_t)v15, v37);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);

        if (!v30)
        {
          v31 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 0, 1, v31);
        }
      }
    }
    else
    {
      v28 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
      swift_willThrow(v28);
    }
  }
  else
  {
    v27 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
}

void sub_10026A2EC(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
  v3 = REMObjectID.codable.getter();

  *a1 = v3;
}

uint64_t sub_10026A334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 *v13;
  int v14;
  char *v15;
  __n128 v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t result;
  uint64_t v22;

  v4 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (__n128 *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for REMHashtagLabelSpecifier(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (__n128 *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__n128 *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v11);
  v14 = (*(uint64_t (**)(__n128 *, uint64_t))(v5 + 88))(v8, v4);
  if (v14 == enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(__n128 *, uint64_t))(v5 + 96))(v8, v4);
    v15 = (char *)v13 + *(int *)(sub_10001A630(&qword_100841A70) + 64);
    v16 = *v8;
    *v13 = *v8;
    v17 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.Operation.and(_:);
LABEL_5:
    v18 = *v17;
    v19 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v15, v18, v19);
    v20 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.labels(_:);
LABEL_6:
    (*(void (**)(__n128 *, _QWORD, uint64_t))(v10 + 104))(v13, *v20, v9);
    (*(void (**)(uint64_t, __n128 *, uint64_t))(v10 + 32))(a2, v13, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
  if (v14 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    (*(void (**)(__n128 *, uint64_t))(v5 + 96))(v8, v4);
    v15 = (char *)v13 + *(int *)(sub_10001A630(&qword_100841A70) + 64);
    v16 = *v8;
    *v13 = *v8;
    v17 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.Operation.or(_:);
    goto LABEL_5;
  }
  if (v14 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v20 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.allLabels(_:);
    goto LABEL_6;
  }
  if (v14 == enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v20 = (unsigned int *)&enum case for REMHashtagLabelSpecifier.noLabels(_:);
    goto LABEL_6;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
  return result;
}

void sub_10026A594(uint64_t a1, id a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  NSString v20;
  uint64_t v21;
  void *v22;
  NSString v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[5];

  v4 = objc_msgSend(a2, "storeControllerManagedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a2, "remObjectID");
    if (v6)
    {
      v7 = v6;
      sub_1004EF780((uint64_t)&v25);
      if (v26)
      {
        sub_10001BCA8(&v25, (uint64_t)v27);
        v8 = sub_10023F108(a1, v27);
        v10 = v9;
        v11 = sub_10049D5F4((void *)3, v8, v9, v7, v5);
        if (!v11)
          v11 = objc_msgSend((id)objc_opt_self(REMManualOrdering), "newObjectID");
        v12 = v11;
        v13 = REMObjectID.codable.getter(v11);
        REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)(v13, 3, v8, v10);

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      }
      else
      {
        sub_10000882C((uint64_t)&v25, &qword_1008484C0);
        v22 = (void *)objc_opt_self(REMError);
        v23 = String._bridgeToObjectiveC()();
        objc_msgSend(v22, "invalidParameterErrorWithDescription:", v23);

        swift_willThrow(v24);
      }
    }
    else
    {
      v17 = (void *)objc_opt_self(REMError);
      v18 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v18);
      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v20);

      swift_willThrow(v21);
    }
  }
  else
  {
    v14 = (void *)objc_opt_self(REMError);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "internalErrorWithDebugDescription:", v15);

    swift_willThrow(v16);
  }
}

uint64_t sub_10026A81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  __n128 v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  __n128 v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;

  v73 = a3;
  v4 = type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v81 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMHashtagLabelDataView.Operation(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v76 = (char *)&v70 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v70 - v17;
  REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter(v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  v80 = v18;
  v77 = v13;
  v78 = a1;
  if (v20 != enum case for REMRemindersListDataView.HashtagLabelPredicate.and(_:))
  {
    v71 = v11;
    v72 = v10;
    if (v20 == enum case for REMRemindersListDataView.HashtagLabelPredicate.or(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      v21 = *(void **)v9;
      v22 = (void *)*((_QWORD *)v9 + 1);
      v11 = v71;
      v10 = v72;
      v24 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v80, enum case for REMHashtagLabelDataView.Operation.some(_:), v72);
      v23 = (Swift::Int)v81;
      goto LABEL_33;
    }
    if (v20 == enum case for REMRemindersListDataView.HashtagLabelPredicate.allLabels(_:))
    {
      v6 = v73;
      v23 = (Swift::Int)v81;
      if ((unint64_t)v73 >> 62)
      {
        if (v73 < 0)
          v68 = v73;
        else
          v68 = v73 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v73);
        v25 = _CocoaArrayWrapper.endIndex.getter(v68);
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v26 = _swiftEmptyArrayStorage;
      if (!v25)
      {
LABEL_31:
        v11 = v71;
        v21 = (void *)sub_10011EE40((uint64_t)v26);
        v53 = swift_bridgeObjectRelease();
        v24 = v80;
        v10 = v72;
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104))(v80, enum case for REMHashtagLabelDataView.Operation.some(_:), v72, v53);
        v22 = &_swiftEmptySetSingleton;
        goto LABEL_33;
      }
      v82 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v27 = 0;
        v26 = v82;
        v28 = v73;
        v29 = v73 & 0xC000000000000001;
        do
        {
          if (v29)
            v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v28);
          else
            v30 = *(id *)(v28 + 8 * v27 + 32);
          v31 = v30;
          v32 = objc_msgSend(v30, "name");
          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
          v35 = v34;

          v82 = v26;
          v37 = v26[2];
          v36 = v26[3];
          if (v37 >= v36 >> 1)
          {
            sub_1001C1B0C(v36 > 1, v37 + 1, 1);
            v28 = v73;
            v26 = v82;
          }
          ++v27;
          v26[2] = v37 + 1;
          v38 = &v26[2 * v37];
          v38[4] = v33;
          v38[5] = v35;
        }
        while (v25 != v27);
        v23 = (Swift::Int)v81;
        goto LABEL_31;
      }
      __break(1u);
      goto LABEL_46;
    }
    v23 = (Swift::Int)v81;
    if (v20 != enum case for REMRemindersListDataView.HashtagLabelPredicate.noLabels(_:))
    {
LABEL_47:
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
      __break(1u);
      return result;
    }
    v6 = v73;
    if ((unint64_t)v73 >> 62)
    {
      if (v73 < 0)
        v69 = v73;
      else
        v69 = v73 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v73);
      v39 = _CocoaArrayWrapper.endIndex.getter(v69);
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v40 = _swiftEmptyArrayStorage;
    if (v39)
    {
      v82 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v39 & ~(v39 >> 63), 0);
      if (v39 < 0)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v41 = 0;
      v40 = v82;
      v42 = v73;
      v43 = v73 & 0xC000000000000001;
      do
      {
        if (v43)
          v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v42);
        else
          v44 = *(id *)(v42 + 8 * v41 + 32);
        v45 = v44;
        v46 = objc_msgSend(v44, "name");
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

        v82 = v40;
        v51 = v40[2];
        v50 = v40[3];
        if (v51 >= v50 >> 1)
        {
          sub_1001C1B0C(v50 > 1, v51 + 1, 1);
          v42 = v73;
          v40 = v82;
        }
        ++v41;
        v40[2] = v51 + 1;
        v52 = &v40[2 * v51];
        v52[4] = v47;
        v52[5] = v49;
      }
      while (v39 != v41);
      v23 = (Swift::Int)v81;
    }
    v11 = v71;
    v22 = (void *)sub_10011EE40((uint64_t)v40);
    v54 = swift_bridgeObjectRelease();
    v24 = v80;
    v10 = v72;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104))(v80, enum case for REMHashtagLabelDataView.Operation.some(_:), v72, v54);
    v21 = &_swiftEmptySetSingleton;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  v21 = *(void **)v9;
  v22 = (void *)*((_QWORD *)v9 + 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v18, enum case for REMHashtagLabelDataView.Operation.all(_:), v10);
  v23 = (Swift::Int)v81;
  v24 = v18;
LABEL_33:
  v55 = v76;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v76, v24, v10);
  REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.init(include:exclude:operation:)(v21, v22, v55);
  v56 = type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation(0);
  v57 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v56)), "init");
  v58 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.include.getter();
  v59 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.exclude.getter();
  v60 = (uint64_t)v77;
  REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.operation.getter();
  v61 = v79;
  v62 = sub_1004D6EB4(v58, v59, v60, v78);
  v63 = v11;
  if (v61)
  {
    v64 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v64(v60, v10);

    swift_bridgeObjectRelease();
    v65 = swift_bridgeObjectRelease();
    (*(void (**)(Swift::Int, uint64_t, __n128))(v74 + 8))(v23, v75, v65);
  }
  else
  {
    v66 = (uint64_t)v62;
    v64 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v64(v60, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = sub_1002EBC10(v66);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v81, v75);
  }
  v64((uint64_t)v80, v10);
  return v23;
}

Swift::Int sub_10026AE5C(uint64_t a1, uint64_t a2)
{
  uint64_t Subtasks;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v44 = a1;
  v41[1] = a2;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v42 = *(_QWORD *)(Subtasks - 8);
  v43 = Subtasks;
  __chkstk_darwin(Subtasks);
  v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v11);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v41 - v15;
  v17 = _s10PredicatesOMa(0);
  __chkstk_darwin(v17);
  v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v19, v20, 54);
  sub_10000D2C0();
  v22 = v21;
  v23 = sub_10001C744((uint64_t)v19, _s10PredicatesOMa);
  REMRemindersListDataView.TaggedInvocation.Parameters.sortingStyle.getter(v23);
  v24 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v25 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v13, v24, v25);
  swift_storeEnumTagMultiPayload(v13, v11, 2);
  v26 = (uint64_t)v10;
  v27 = v22;
  v28 = v42;
  v29 = sub_1004957D0(v26, (uint64_t)v13, (uint64_t)v16);
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter(v29);
  v30 = v43;
  (*(void (**)(char *, _QWORD, Swift::Int))(v28 + 104))(v4, enum case for REMRemindersListDataView.FetchSubtasks.count(_:), v43);
  v31 = v45;
  v32 = sub_100496780(v44, (uint64_t)v27, (uint64_t)v16, 0, 0, (uint64_t)v7, (uint64_t)v4, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (v31)
  {

    (*(void (**)(char *, Swift::Int))(v28 + 8))(v4, v30);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
  }
  else
  {
    v33 = v32;
    v34 = swift_bridgeObjectRelease();
    (*(void (**)(char *, Swift::Int, __n128))(v28 + 8))(v4, v30, v34);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
    v48 = v33;
    v35 = sub_10001A630(&qword_100842308);
    v36 = type metadata accessor for REMObjectID_Codable(0);
    v37 = sub_10026BDB4();
    v38 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v39 = Sequence.compactMapToSet<A>(_:)(sub_10026A2EC, 0, v35, v36, v37, v38);
    swift_bridgeObjectRelease();
    v30 = sub_1002EBC10(v39);
    swift_bridgeObjectRelease();

  }
  sub_10001C744((uint64_t)v16, _s9UtilitiesO12SortingStyleOMa);
  return v30;
}

id sub_10026B1D8(void *a1, void *a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  NSObject *v29;
  uint64_t v30;
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;

  v5 = REMSmartListTypeTagged;
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v6 = qword_100872290;
  swift_retain();
  v8 = sub_10058E6E0(v5, 0, a1, v6, v7);
  if (v2)
  {
    swift_release(v6);
    if (qword_100837078 != -1)
      swift_once(&qword_100837078, sub_100269080);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100842298);
    swift_errorRetain(v2);
    v11 = swift_errorRetain(v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v29 = v5;
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v33 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_getErrorValue(v2, v32, v31);
      v16 = Error.localizedDescription.getter(v31[1], v31[2]);
      v30 = sub_10001A820(v16, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Creating tagged smart list with empty storage because tagged smart list not found due to error {error: %s}", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      v18 = v14;
      v5 = v29;
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
    }

    v19 = sub_100300818();
    if (v19)
    {
      v20 = (void *)v19;
      v21 = sub_1001A17D0(v5, v19);
      v22 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0));
      v23 = a2;
      v27 = objc_msgSend(v22, "initWithStore:storage:", v23, v21);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      return 0;
    }
  }
  else
  {
    v9 = v8;
    swift_release(v6);
    v24 = sub_1001A0B80(v9);
    v25 = objc_msgSend(objc_allocWithZone((Class)REMSmartList), "initWithStore:storage:", a2, v24);
    v26 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0));
    v27 = (id)REMSmartList_Codable.init(_:)(v25);

  }
  return v27;
}

_QWORD *sub_10026B54C(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t Subtasks;
  __int128 v77;
  uint64_t v78;
  _QWORD v79[5];
  _OWORD v80[2];
  uint64_t v81;
  void *v82;

  v82 = a2;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v74 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v73 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v72 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v70 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.HashtagLabelPredicate(0);
  __chkstk_darwin(v7);
  *(_QWORD *)&v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_1008422F0);
  v10 = __chkstk_darwin(v9);
  *(_QWORD *)&v69 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for REMHashtagLabelSpecifier(0, v10);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v64 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v64 - v23;
  v25 = _s10PredicatesOMa(0);
  __chkstk_darwin(v25);
  v27 = (void **)((char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001A630(&qword_100842300);
  *v27 = a1;
  swift_bridgeObjectRetain(a1);
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter(v28);
  v29 = v25;
  v30 = a3;
  v31 = swift_storeEnumTagMultiPayload(v27, v29, 21);
  REMRemindersListDataView.TaggedInvocation.Parameters.sortingStyle.getter(v31);
  v32 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v33 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v21, v32, v33);
  swift_storeEnumTagMultiPayload(v21, v16, 2);
  sub_1004957D0((uint64_t)v15, (uint64_t)v21, (uint64_t)v24);
  sub_1001D8AD8((uint64_t)v24, (uint64_t)v18);
  LODWORD(v21) = swift_getEnumCaseMultiPayload(v18, v16);
  sub_10001C744((uint64_t)v18, _s9UtilitiesO12SortingStyleOMa);
  if ((_DWORD)v21 == 5)
  {
    if (qword_100837958 != -1)
      swift_once(&qword_100837958, sub_1005B83A8);
    v34 = qword_100872288;
    v35 = (void *)swift_retain();
    v36 = sub_1003011F8(v35);
    swift_release(v34);
    v37 = v69;
    if (v36)
    {
      v38 = objc_msgSend(v36, "remObjectID");
      if (v38)
      {
        v39 = v38;
        sub_1004EF780((uint64_t)&v77);
        if (v78)
        {
          v40 = sub_10001BCA8(&v77, (uint64_t)v79);
          v41 = v66;
          REMRemindersListDataView.TaggedInvocation.Parameters.hashtagLabelPredicate.getter(v40);
          sub_10026A334(v41, v37);
          v42 = v67;
          v43 = v68;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v37, 1, v68) != 1)
          {
            v59 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
            v64 = v39;
            v60 = (uint64_t)v65;
            v59(v65, v37, v43);
            v61 = sub_10023F108(v60, v79);
            v62 = v64;
            sub_10049A714(v82, 3, v61, v63, v64, (uint64_t)v80);
            v69 = v80[0];
            v66 = v80[1];
            v46 = v81;

            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v60, v68);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v79);
            sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);
            v48 = v66;
            v47 = v69;
            goto LABEL_14;
          }

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v79);
          sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);
          v44 = &qword_1008422F0;
          v45 = (__int128 *)v37;
        }
        else
        {
          sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);

          v44 = &qword_1008484C0;
          v45 = &v77;
        }
        sub_10000882C((uint64_t)v45, v44);
      }
      else
      {
        sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);

      }
    }
    else
    {
      sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);
    }
    v46 = 0;
    v47 = 0uLL;
    v48 = 0uLL;
LABEL_14:
    *(_OWORD *)v24 = v47;
    *((_OWORD *)v24 + 1) = v48;
    *((_QWORD *)v24 + 4) = v46;
    *((_QWORD *)v24 + 5) = 0;
    swift_storeEnumTagMultiPayload(v24, v16, 4);
  }
  sub_10000D2C0();
  v50 = v49;
  v51 = (uint64_t)v70;
  v52 = v30;
  REMRemindersListDataView.TaggedInvocation.Parameters.showCompleted.getter(v49);
  v54 = (uint64_t)v73;
  v53 = v74;
  v55 = Subtasks;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, enum case for REMRemindersListDataView.FetchSubtasks.count(_:), Subtasks);
  v56 = v71;
  v57 = sub_100496780((uint64_t)v82, (uint64_t)v50, (uint64_t)v24, 0, 0, v51, v54, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v56)
  {
    v52 = v57;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v51, v75);
  sub_10001C744((uint64_t)v24, _s9UtilitiesO12SortingStyleOMa);
  sub_10001C744((uint64_t)v27, _s10PredicatesOMa);
  return v52;
}

uint64_t sub_10026BC14(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t Style;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a3;
  Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle(0, a1);
  v4 = *(_QWORD *)(Style - 8);
  v5 = __chkstk_darwin(Style);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result(0, v5);
  v8 = *(_QWORD *)(v18 - 8);
  v9 = __chkstk_darwin(v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation(0, v9);
  v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v12)), "init");
  REMRemindersListDataView.TaggedInvocation.Parameters.smartListHashtagLabelsFetchStyle.getter();
  v14 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v15 = v20;
  sub_1004D4F20((uint64_t)v14, &off_1007F7278, v19, (uint64_t)v7, (uint64_t)v11);

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, Style);

  }
  else
  {
    v16 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, Style);
    Style = REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.labels.getter(v16);
    REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.isUpToDate.getter();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v18);
  }
  return Style;
}

unint64_t sub_10026BDB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100842310;
  if (!qword_100842310)
  {
    v1 = sub_1000A5A94(&qword_100842308);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100842310);
  }
  return result;
}

uint64_t sub_10026BE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(a1);
  if (!v3)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v4._object = (void *)0x80000001006F8C10;
    v4._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v4);
    v6 = v1;
    v5 = sub_10001A630((uint64_t *)&unk_1008443D0);
    _print_unlocked<A, B>(_:_:)(&v6, &v7, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v7, v8, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10026BED0(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100842318, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10026BEF4(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100842330, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10026BF18(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10026BF4C + 4 * byte_1006B1A10[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10026BF4C()
{
  return 0x64656E6769737361;
}

uint64_t sub_10026BF6C()
{
  return 0x737574617473;
}

unint64_t sub_10026BF80()
{
  return 0xD000000000000014;
}

unint64_t sub_10026BF9C()
{
  return 0xD000000000000016;
}

void sub_10026BFD4(char *a1)
{
  sub_1002B4918(*a1);
}

void sub_10026BFE0()
{
  char *v0;

  sub_1004F4D24(*v0);
}

void sub_10026BFE8(uint64_t a1)
{
  char *v1;

  sub_1002B6050(a1, *v1);
}

void sub_10026BFF0(uint64_t a1)
{
  char *v1;

  sub_1002B2158(a1, *v1);
}

unint64_t sub_10026BFF8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026C478(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10026C024@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10026BF18(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10026C04C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0120;
}

unint64_t sub_10026C05C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026C478(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10026C080()
{
  unsigned __int8 *v0;

  return sub_10026BF18(*v0);
}

void sub_10026C088(char *a1)
{
  sub_1002B4AE4(*a1);
}

void sub_10026C094()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10026C0E4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7265646E696D6572, 0xEA00000000004449);
  swift_bridgeObjectRelease(0xEA00000000004449);
  return Hasher._finalize()();
}

void sub_10026C15C()
{
  __asm { BR              X10 }
}

uint64_t sub_10026C19C(uint64_t a1)
{
  String.hash(into:)(a1, 0x7265646E696D6572, 0xEA00000000004449);
  return swift_bridgeObjectRelease(0xEA00000000004449);
}

void sub_10026C200(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10026C24C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7265646E696D6572, 0xEA00000000004449);
  swift_bridgeObjectRelease(0xEA00000000004449);
  return Hasher._finalize()();
}

unint64_t sub_10026C2C4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026C4C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10026C2F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10026C324 + 4 * byte_1006B1A22[*v0]))();
}

void sub_10026C324(_QWORD *a1@<X8>)
{
  *a1 = 0x7265646E696D6572;
  a1[1] = 0xEA00000000004449;
}

void sub_10026C344(_QWORD *a1@<X8>)
{
  *a1 = 0x65656E6769737361;
  a1[1] = 0xEA00000000004449;
}

void sub_10026C364(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "originatorID");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10026C388(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0148;
}

unint64_t sub_10026C398@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026C4C0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10026C3BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10026C3F0 + 4 * byte_1006B1A26[*v0]))(0x49746E756F636361, 0xE900000000000044);
}

uint64_t sub_10026C3F0()
{
  return 0x7265646E696D6572;
}

uint64_t sub_10026C420()
{
  return 0x74616E696769726FLL;
}

uint64_t type metadata accessor for REMAssignmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd23REMAssignmentCDIngestor);
}

_UNKNOWN **sub_10026C460()
{
  return &off_1007EB4E8;
}

_UNKNOWN **sub_10026C46C()
{
  return &off_1007EB4B8;
}

unint64_t sub_10026C478(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE730, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_10026C4C0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEDA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

id sub_10026C508(id a1, SEL *a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void (*v36)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t);
  _BYTE *v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  id v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  os_log_t v75;
  uint64_t v76;
  _QWORD *v77;
  const char *v78;
  void (*v79)(_QWORD *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  char *v84;
  os_log_type_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  __n128 v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  _QWORD *v99;
  void (*v100)(id, uint64_t);
  uint64_t v101;
  _BYTE v102[12];
  int v103;
  os_log_t v104;
  id v105;
  char *v106;
  _QWORD *v107;
  id v108;
  const char *v109;
  _QWORD *v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114[4];
  uint64_t v115;
  uint64_t v116;

  v109 = a4;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = &v102[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v102[-v12];
  v113 = type metadata accessor for UUID(0);
  v14 = *(_QWORD **)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = &v102[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v110 = &v102[-v17];
  *(_QWORD *)&v19 = __chkstk_darwin(v18).n128_u64[0];
  v21 = &v102[-v20];
  v22 = objc_msgSend(a1, *a2, v19);
  if (!v22)
    return 0;
  v23 = v22;
  v112 = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  v27 = objc_msgSend(a1, "managedObjectContext");
  if (v27)
  {
    v28 = v27;
    UUID.init(uuidString:)(v24, v26);
    v29 = swift_bridgeObjectRelease();
    v30 = v113;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v14[6])(v13, 1, v113, v29) == 1)
    {

      sub_10011E85C((uint64_t)v13);
      return 0;
    }
    v106 = (char *)a3;
    v36 = (void (*)(_BYTE *, _BYTE *, uint64_t))v14[4];
    v108 = v28;
    v37 = v112;
    v36(v112, v13, v30);
    KeyPath = swift_getKeyPath(&unk_1006B1AA8);
    v107 = (_QWORD *)v14[2];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v107)(v10, v37, v30);
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v14[7])(v10, 0, 1, v30);
    v39 = sub_1002E89B8(KeyPath, (uint64_t)v10);
    swift_release(KeyPath);
    v40 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v41 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v42 = objc_msgSend((id)swift_getObjCClassFromMetadata(v40), "entity");
    objc_msgSend(v41, "setEntity:", v42);

    objc_msgSend(v41, "setAffectedStores:", 0);
    v43 = (void *)v39;
    objc_msgSend(v41, "setPredicate:", v39);
    v44 = v108;
    v45 = NSManagedObjectContext.fetch<A>(_:)(v41, v40);
    if (v4)
    {
      ((void (*)(_BYTE *, uint64_t))v14[1])(v112, v30);

      return a1;
    }
    v46 = v45;
    v47 = v14;
    v48 = v107;
    v105 = v43;
    v114[3] = sub_10001A630(&qword_10083FCF0);
    v114[0] = v46;
    v49 = sub_10001A630(&qword_100851C90);
    throwingCast<A>(_:as:failureMessage:)(&v115, v114, v49, 0, 0, v49);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v114);
    v51 = v115;
    v52 = (void (*)(_QWORD *, uint64_t, uint64_t))v112;
    v53 = v41;
    if ((unint64_t)v115 >> 62)
    {
      if (v115 < 0)
        v81 = v115;
      else
        v81 = v115 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v115);
      v54 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease();
      v55 = v111;
      if (v54)
      {
LABEL_17:
        v111 = v53;
        if ((v51 & 0xC000000000000001) != 0)
        {
          v54 = (uint64_t)v52;
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v51);
          v56 = v110;
        }
        else
        {
          v56 = v110;
          if (!*(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_36:
            swift_once(&qword_100837080, sub_10026BED0);
LABEL_21:
            v57 = type metadata accessor for Logger(0);
            sub_10001AAA8(v57, (uint64_t)qword_100842318);
            v58 = v54;
            v52(v56, v54, v113);
            v59 = v55;
            v60 = a1;
            a1 = v59;
            v61 = v60;
            v62 = Logger.logObject.getter(v61);
            v63 = static os_log_type_t.default.getter(v62);
            v64 = v63;
            if (os_log_type_enabled(v62, v63))
            {
              v65 = swift_slowAlloc(32, -1);
              v110 = (_QWORD *)swift_slowAlloc(8, -1);
              v66 = (const char *)swift_slowAlloc(64, -1);
              v109 = v66;
              v114[0] = (uint64_t)v66;
              *(_DWORD *)v65 = 136446722;
              v104 = v62;
              v103 = v64;
              v67 = UUID.uuidString.getter(v66);
              v115 = sub_10001A820(v67, v68, v114);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
              v69 = swift_bridgeObjectRelease();
              v107 = (_QWORD *)v48[1];
              ((void (*)(_QWORD *, uint64_t, __n128))v107)(v56, v113, v69);
              *(_WORD *)(v65 + 12) = 2112;
              v115 = (uint64_t)a1;
              v70 = a1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
              *v110 = a1;

              *(_WORD *)(v65 + 22) = 2080;
              v71 = objc_msgSend(v61, "loggingDescription");
              v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
              v74 = v73;

              v115 = sub_10001A820(v72, v74, v114);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);

              swift_bridgeObjectRelease();
              v75 = v104;
              _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v103, v106, (uint8_t *)v65, 0x20u);
              v76 = sub_10001A630((uint64_t *)&unk_100839E70);
              v77 = v110;
              swift_arrayDestroy(v110, 1, v76);
              swift_slowDealloc(v77, -1, -1);
              v78 = v109;
              swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v78, -1, -1);
              swift_slowDealloc(v65, -1, -1);

              ((void (*)(_BYTE *, uint64_t))v107)(v112, v113);
            }
            else
            {

              v79 = (void (*)(_QWORD *, uint64_t))v48[1];
              v80 = v113;
              v79(v56, v113);
              v79((_QWORD *)v58, v80);
            }
            return a1;
          }
          v54 = (uint64_t)v52;
          v55 = *(id *)(v51 + 32);
        }
        v52 = (void (*)(_QWORD *, uint64_t, uint64_t))v48;
        v48 = v47;
        swift_bridgeObjectRelease();
        if (qword_100837080 == -1)
          goto LABEL_21;
        goto LABEL_36;
      }
    }
    else
    {
      v54 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10);
      v55 = v111;
      if (v54)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    if (qword_100837080 != -1)
      swift_once(&qword_100837080, sub_10026BED0);
    v82 = type metadata accessor for Logger(0);
    sub_10001AAA8(v82, (uint64_t)qword_100842318);
    ((void (*)(id, _QWORD, uint64_t))v48)(v55, v52, v113);
    v83 = a1;
    v84 = (char *)Logger.logObject.getter(v83);
    v85 = static os_log_type_t.default.getter(v84);
    v86 = v85;
    if (os_log_type_enabled((os_log_t)v84, v85))
    {
      v87 = swift_slowAlloc(22, -1);
      v111 = v53;
      v88 = v87;
      v89 = swift_slowAlloc(64, -1);
      v110 = (_QWORD *)v89;
      v114[0] = v89;
      *(_DWORD *)v88 = 136446466;
      v106 = v84;
      LODWORD(v104) = v86;
      v90 = UUID.uuidString.getter(v89);
      v115 = sub_10001A820(v90, v91, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
      v92 = swift_bridgeObjectRelease();
      v107 = (_QWORD *)v47[1];
      v93 = v113;
      ((void (*)(id, uint64_t, __n128))v107)(v55, v113, v92);
      *(_WORD *)(v88 + 12) = 2080;
      v94 = objc_msgSend(v83, "loggingDescription");
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      v97 = v96;

      v115 = sub_10001A820(v95, v97, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);

      swift_bridgeObjectRelease();
      v98 = v106;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v106, (os_log_type_t)v104, v109, (uint8_t *)v88, 0x16u);
      v99 = v110;
      swift_arrayDestroy(v110, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v88, -1, -1);

      ((void (*)(_BYTE *, uint64_t))v107)(v112, v93);
    }
    else
    {

      v100 = (void (*)(id, uint64_t))v47[1];
      v101 = v113;
      v100(v55, v113);
      v100(v52, v101);
    }
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100837080 != -1)
      swift_once(&qword_100837080, sub_10026BED0);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001AAA8(v31, (uint64_t)qword_100842318);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Cannot get managedObjectContext from the given REMCDAssignment", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return 0;
  }
}

NSObject *sub_10026CF88(NSObject *a1, int a2, int a3)
{
  NSObject *v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  NSObject *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  NSObject *v49;
  id v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  NSObject **v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *);
  void *v62;
  Class v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  NSObject **v88;
  NSObject *v89;
  const char *v90;
  id v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t ObjCClassFromMetadata;
  NSString v98;
  uint64_t v99;
  uint64_t v100;
  id v102;
  void *v103;
  uint64_t v104;
  id v105;
  unsigned __int8 v106;
  uint64_t v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  void *v115;
  id v116;
  char v117;
  uint64_t v118;
  NSObject *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  NSObject *v123;
  NSObject *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  uint64_t v130;
  void *v131;
  Class v132;
  NSObject *v133;
  id v134;
  NSObject *v135;
  void *v136;
  NSObject *v137;
  NSObject *v138;
  NSObject *v139;
  Class v140;
  id v141;
  uint64_t v142;
  id v143;
  void *v144;
  NSObject *v145;
  NSObject *v146;
  _QWORD *v147;
  os_log_t v148;
  NSObject *v149;
  NSObject *v150;
  uint64_t v151;
  NSObject *v152;
  NSObject *v153;
  NSObject *v154;
  NSObject *v155;
  NSObject *v156;
  os_log_type_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  NSObject **v161;
  NSObject *v162;
  NSObject *v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  uint64_t v169;
  NSObject *v170;
  id v171;
  NSObject *v172;
  NSObject *v173;
  NSObject *v174;
  NSObject *v175;
  NSObject *v176;
  os_log_type_t v177;
  int v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  NSObject **v182;
  NSObject *v183;
  NSObject *v184;
  unsigned __int16 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  NSString v193;
  uint64_t v194;
  NSString v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  id v201;
  void *v202;
  NSString v203;
  uint64_t v204;
  uint8_t *v205;
  uint64_t v206;
  NSObject *v207;
  NSObject *v208;
  id v209;
  NSObject *v210;
  NSObject *v211;
  NSObject *v212;
  NSObject *v213;
  os_log_type_t v214;
  int v215;
  uint64_t v216;
  NSObject **v217;
  NSObject *v218;
  NSObject *v219;
  NSObject *v220;
  uint64_t v221;
  uint8_t *v222;
  NSObject *v223;
  NSObject *v224;
  NSObject *v225;
  id v226;
  id v227;
  id v228;
  Class v229;
  NSObject *v230;
  NSObject *v231;
  id v232;
  id v233;
  NSObject *v234;
  Class v235;
  char **v236;
  id v237;
  void *v238;
  id v239;
  void *v240;
  id v241;
  id v242;
  id v243;
  void *v244;
  char v245;
  char v246;
  uint64_t v247;
  NSObject *v248;
  id v249;
  NSObject *v250;
  NSObject *v251;
  NSObject *v252;
  NSObject *v253;
  int v254;
  uint64_t v255;
  NSObject **v256;
  NSObject *v257;
  NSObject *v258;
  id v259;
  void *v260;
  id v261;
  void *v262;
  id v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  double v267;
  id v268;
  void *v269;
  id v270;
  id v271;
  void *v272;
  id v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  os_log_t v277;
  uint64_t v278;
  _QWORD *v279;
  NSObject *v280;
  void *v281;
  NSString v282;
  uint64_t v283;
  uint64_t v284;
  NSObject *v285;
  NSObject *v286;
  id v287;
  NSObject *v288;
  NSObject *v289;
  id v290;
  NSObject *v291;
  int v292;
  uint64_t v293;
  NSObject **v294;
  NSObject *v295;
  id v296;
  void *v297;
  id v298;
  void *v299;
  id v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  double v304;
  NSObject *v305;
  id v306;
  void *v307;
  id v308;
  NSObject *v309;
  id v310;
  void *v311;
  id v312;
  unint64_t v313;
  unint64_t v314;
  NSObject *v315;
  uint64_t v316;
  NSObject **v317;
  uint64_t v318;
  NSObject *v319;
  NSObject *v320;
  NSObject *v321;
  NSObject *v322;
  NSObject *v323;
  os_log_type_t v324;
  int v325;
  _BOOL4 v326;
  uint64_t v327;
  NSObject **v328;
  NSObject *v329;
  NSObject *v330;
  uint64_t v331;
  NSObject *v332;
  _QWORD *v333;
  char *v334;
  id v335;
  void *v336;
  char *v337;
  char *v338;
  os_log_t v339;
  void *v340;
  id v341;
  id v342;
  id v343;
  id v344;
  NSObject *v345;
  NSObject *v346;
  NSObject **v347;
  NSObject *v348;
  NSObject *v349;
  uint64_t v350;
  id v351;
  id v352;
  uint64_t v353;
  char *v354;
  id v355;
  NSObject *v356;
  char *v357;
  char *v358;
  os_log_t v359;
  _QWORD *v360;
  uint64_t v361;
  NSObject *v362;
  NSObject *v363;
  char *v364;
  NSObject *v365;
  uint64_t v366;
  NSObject *v367;
  uint64_t v368;
  NSObject *v369;
  _QWORD v370[2];

  LODWORD(v363) = a3;
  v5 = type metadata accessor for Date(0);
  isa = v5[-1].isa;
  v359 = v5;
  v360 = isa;
  __chkstk_darwin(v5);
  v357 = (char *)&v346 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v358 = (char *)&v346 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v356 = ((char *)&v346 - v11);
  v12 = type metadata accessor for UUID(0);
  v366 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v346 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v364 = (char *)&v346 - v16;
  v17 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v17);
  v19 = (char *)&v346 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v346 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v346 - v24;
  *(_QWORD *)&v27 = __chkstk_darwin(v26).n128_u64[0];
  v29 = (char *)&v346 - v28;
  v369 = 0;
  v367 = a1;
  v30 = -[NSObject remObjectIDWithError:](a1, "remObjectIDWithError:", &v369, v27);
  v31 = v369;
  if (!v30)
  {
    v42 = v369;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v43);
    return v42;
  }
  v32 = v30;
  v33 = v369;
  v365 = v32;
  v34 = v367;
  LODWORD(v362) = a2;
  if ((a2 & 1) != 0 && -[NSObject markedForDeletion](v367, "markedForDeletion"))
  {
    v35 = -[NSObject owningReminderIdentifier](v34, "owningReminderIdentifier");
    if (v35)
    {
      v36 = v35;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v37 = 0;
    }
    else
    {
      v37 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v366 + 56))(v25, v37, 1, v12);
    sub_1000F2CE4((uint64_t)v25, (uint64_t)v29);
  }
  else
  {
    v38 = -[NSObject reminder](v34, "reminder");
    if (v38
      && (v39 = v38, v40 = objc_msgSend(v38, "remObjectID"), v39, v40))
    {
      v41 = objc_msgSend(v40, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v366 + 56))(v29, 0, 1, v12);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v366 + 56))(v29, 1, 1, v12);
    }
  }
  v44 = -[NSObject account](v367, "account");
  if (!v44
    || (v45 = v44,
        v46 = objc_msgSend(v44, "remObjectID"),
        v45,
        (v355 = v46) == 0))
  {
LABEL_17:
    v49 = v367;
    v50 = -[NSObject account](v367, "account");

    if (v50)
    {
      v42 = 0xE900000000000029;
      v51 = v365;
      if ((v362 & 1) == 0)
        goto LABEL_38;
    }
    else
    {
      v51 = v365;
      if (qword_100837088 != -1)
        swift_once(&qword_100837088, sub_10026BEF4);
      v52 = type metadata accessor for Logger(0);
      sub_10001AAA8(v52, (uint64_t)qword_100842330);
      v53 = v51;
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v57 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v56 = 138412290;
        v369 = v53;
        v58 = v53;
        v51 = v365;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
        *v57 = v51;

        _os_log_impl((void *)&_mh_execute_header, v54, v55, "REMAssignmentCDIngestor: cdAssignment.account is nil {cdAssignment.remObjectID: %@}", v56, 0xCu);
        v59 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v57, 1, v59);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {

        v54 = v53;
      }

      v42 = 0xE700000000000000;
      v49 = v367;
      if ((v362 & 1) == 0)
        goto LABEL_38;
    }
    if (-[NSObject markedForDeletion](v49, "markedForDeletion"))
    {
      swift_bridgeObjectRelease();
      if (qword_100837088 != -1)
        swift_once(&qword_100837088, sub_10026BEF4);
      v83 = type metadata accessor for Logger(0);
      sub_10001AAA8(v83, (uint64_t)qword_100842330);
      v84 = v51;
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v87 = 138412290;
        v369 = v84;
        v89 = v84;
        v51 = v365;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
        *v88 = v51;

        v90 = "REMAssignmentCDIngestor: cdAssignment.owningReminderIdentifier of this markedForDeletion assignment is nil"
              " {cdAssignment.remObjectID: %@}";
LABEL_43:
        _os_log_impl((void *)&_mh_execute_header, v85, v86, v90, v87, 0xCu);
        v94 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v88, 1, v94);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v87, -1, -1);
LABEL_45:

        v42 = 0xE800000000000000;
        goto LABEL_46;
      }
LABEL_44:

      v85 = v84;
      goto LABEL_45;
    }
LABEL_38:
    v91 = -[NSObject reminder](v49, "reminder");

    if (v91)
    {
LABEL_46:
      v95 = (void *)objc_opt_self(REMError);
      v96 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v96);
      v98 = String._bridgeToObjectiveC()();
      objc_msgSend(v95, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v98, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v99);
LABEL_47:
      v100 = (uint64_t)v29;
LABEL_48:
      sub_10011E85C(v100);
      return v42;
    }
    swift_bridgeObjectRelease();
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v92 = type metadata accessor for Logger(0);
    sub_10001AAA8(v92, (uint64_t)qword_100842330);
    v84 = v51;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v87 = 138412290;
      v369 = v84;
      v93 = v84;
      v51 = v365;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      *v88 = v51;

      v90 = "REMAssignmentCDIngestor: cdAssignment.reminder is nil {cdAssignment.remObjectID: %@}";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  v354 = v29;
  sub_10011D420((uint64_t)v29, (uint64_t)v22);
  v47 = v366;
  v48 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v366 + 48);
  if (v48(v22, 1, v12) == 1)
  {

    sub_10011E85C((uint64_t)v22);
    v29 = v354;
    goto LABEL_17;
  }
  v60 = v12;
  v61 = *(void (**)(_QWORD, _QWORD))(v47 + 32);
  v353 = v60;
  v61(v364, v22);
  v62 = (void *)objc_opt_self(REMReminder);
  v63 = UUID._bridgeToObjectiveC()().super.isa;
  v64 = objc_msgSend(v62, "objectIDWithUUID:", v63);

  v65 = v367;
  v42 = -[NSObject status](v367, "status");
  v66 = v365;
  if ((v363 & 1) == 0)
  {
    v102 = -[NSObject assignee](v65, "assignee");
    if (v102)
    {
      v103 = v102;
      v29 = v354;
      v104 = v366;
    }
    else
    {
      v127 = v361;
      v128 = sub_10026C508(v65, (SEL *)&selRef_ckAssigneeIdentifier, "FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}", "FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() sharee not found {uuid: %{public}s, assignment: %s}");
      v130 = (uint64_t)v354;
      v129 = v355;
      if (v127)
      {

        (*(void (**)(char *, uint64_t))(v366 + 8))(v364, v353);
        v100 = v130;
        goto LABEL_48;
      }
      v103 = v128;
      v361 = 0;
      v104 = v366;
      v150 = v66;
      if (!v128)
        goto LABEL_77;
      v29 = v354;
    }
    v105 = objc_msgSend(v103, "remObjectID");
    if (v105)
    {
      v352 = v105;
      v106 = objc_msgSend((id)objc_opt_self(REMCDAssignment), "isShareeActivelyParticipatingWithSharee:", v103);
      v107 = v353;
      if ((v106 & 1) == 0)
      {
        v167 = v353;
        v168 = v64;
        if (qword_100837088 != -1)
          swift_once(&qword_100837088, sub_10026BEF4);
        v169 = type metadata accessor for Logger(0);
        sub_10001AAA8(v169, (uint64_t)qword_100842330);
        v170 = v365;
        v171 = v103;
        v172 = v168;
        v173 = v170;
        v174 = v171;
        v175 = v172;
        v176 = Logger.logObject.getter(v175);
        v177 = static os_log_type_t.info.getter(v176);
        v178 = v177;
        v179 = os_log_type_enabled(v176, v177);
        v367 = v173;
        if (v179)
        {
          v180 = swift_slowAlloc(26, -1);
          LODWORD(v363) = v178;
          v181 = v180;
          v182 = (NSObject **)swift_slowAlloc(16, -1);
          *(_DWORD *)v181 = 138543874;
          v362 = v174;
          v369 = v173;
          v183 = v173;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
          *v182 = v365;
          v174 = v362;

          *(_WORD *)(v181 + 12) = 2114;
          v369 = v175;
          v184 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
          v182[1] = v175;

          v29 = v354;
          *(_WORD *)(v181 + 22) = 512;
          v185 = (unsigned __int16)-[NSObject status](v174, "status");

          LOWORD(v369) = v185;
          v104 = v366;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, (char *)&v369 + 2);

          _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v363, "REMAssignmentCDIngestor: assignee status is disallowed {assignmentID: %{public}@, reminderID: %{public}@}, assignee.status: %hd", (uint8_t *)v181, 0x1Au);
          v186 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v182, 2, v186);
          v167 = v353;
          swift_slowDealloc(v182, -1, -1);
          swift_slowDealloc(v181, -1, -1);
        }
        else
        {

          v176 = v174;
        }

        v202 = (void *)objc_opt_self(REMError);
        v203 = String._bridgeToObjectiveC()();
        v42 = objc_msgSend(v202, "nullifiedRelationshipErrorWithRelationshipName:", v203);

        swift_willThrow(v204);
        (*(void (**)(char *, uint64_t))(v104 + 8))(v364, v167);
        goto LABEL_47;
      }
      v351 = v42;
      v362 = v64;
      v108 = objc_msgSend(v103, "list");
      if (!v108)
      {
LABEL_124:
        if (qword_100837088 != -1)
          swift_once(&qword_100837088, sub_10026BEF4);
        v247 = type metadata accessor for Logger(0);
        sub_10001AAA8(v247, (uint64_t)qword_100842330);
        v248 = v365;
        v249 = v103;
        v250 = v367;
        v251 = v248;
        v42 = v249;
        v252 = v250;
        v253 = Logger.logObject.getter(v252);
        v254 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v253, (os_log_type_t)v254))
        {

LABEL_140:
          v281 = (void *)objc_opt_self(REMError);
          v282 = String._bridgeToObjectiveC()();
          objc_msgSend(v281, "nullifiedRelationshipErrorWithRelationshipName:", v282);

          swift_willThrow(v283);
LABEL_141:

          (*(void (**)(char *, uint64_t))(v366 + 8))(v364, v107);
          goto LABEL_47;
        }
        v359 = v253;
        LODWORD(v361) = v254;
        v255 = swift_slowAlloc(32, -1);
        v256 = (NSObject **)swift_slowAlloc(8, -1);
        v257 = swift_slowAlloc(64, -1);
        v363 = v257;
        *(_DWORD *)v255 = 138543874;
        v368 = (uint64_t)v251;
        v369 = v257;
        v367 = v251;
        v258 = v251;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);
        v360 = v256;
        *v256 = v365;

        *(_WORD *)(v255 + 12) = 2082;
        v259 = -[NSObject list](v42, "list");
        if (v259)
        {
          v260 = v259;
          v261 = objc_msgSend(v259, "remObjectID");
          if (v261)
          {
            v262 = v261;
            v263 = objc_msgSend(v261, "description");

            v264 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
            v266 = v265;

LABEL_133:
            v368 = sub_10001A820(v264, v266, (uint64_t *)&v369);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);

            *(_QWORD *)&v267 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v255 + 22) = 2082;
            v268 = -[NSObject reminder](v252, "reminder", v267);
            if (v268)
            {
              v269 = v268;
              v270 = objc_msgSend(v268, "list");

              if (v270)
              {
                v271 = objc_msgSend(v270, "remObjectID");
                if (v271)
                {
                  v272 = v271;
                  v273 = objc_msgSend(v271, "description");

                  v274 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
                  v276 = v275;

LABEL_139:
                  v368 = sub_10001A820(v274, v276, (uint64_t *)&v369);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);

                  swift_bridgeObjectRelease();
                  v277 = v359;
                  _os_log_impl((void *)&_mh_execute_header, v359, (os_log_type_t)v361, "REMAssignmentCDIngestor: assignee not belongs to the same list to the reminder's {assignmentID: %{public}@, candidateAssignee.list: %{public}s, assignment.reminder.list: %{public}s}", (uint8_t *)v255, 0x20u);
                  v278 = sub_10001A630((uint64_t *)&unk_100839E70);
                  v279 = v360;
                  swift_arrayDestroy(v360, 1, v278);
                  swift_slowDealloc(v279, -1, -1);
                  v280 = v363;
                  swift_arrayDestroy(v363, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v280, -1, -1);
                  swift_slowDealloc(v255, -1, -1);

                  v107 = v353;
                  v29 = v354;
                  v251 = v367;
                  goto LABEL_140;
                }

              }
            }
            v276 = 0xE300000000000000;
            v274 = 7104878;
            goto LABEL_139;
          }

        }
        v266 = 0xE300000000000000;
        v264 = 7104878;
        goto LABEL_133;
      }
      v109 = v108;
      v110 = -[NSObject reminder](v367, "reminder");
      if (v110)
      {
        v111 = v110;
        v112 = objc_msgSend(v110, "list");

        if (v112)
        {
          v113 = objc_msgSend(v109, "remObjectID");
          v114 = objc_msgSend(v112, "remObjectID");
          v115 = v114;
          if (!v113)
          {

            if (!v115)
              goto LABEL_110;
LABEL_123:

            goto LABEL_124;
          }
          if (v114)
          {
            sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
            v116 = v113;
            v117 = static NSObject.== infix(_:_:)(v116);

            v104 = v366;
            if ((v117 & 1) == 0)
              goto LABEL_124;
LABEL_110:

            v42 = v351;
            goto LABEL_68;
          }

        }
      }
      v115 = v109;
      goto LABEL_123;
    }
    v130 = (uint64_t)v29;

    v150 = v66;
LABEL_77:
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v151 = type metadata accessor for Logger(0);
    sub_10001AAA8(v151, (uint64_t)qword_100842330);
    v152 = v150;
    v153 = v64;
    v154 = v152;
    v155 = v153;
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.info.getter(v156);
    v158 = v157;
    if (os_log_type_enabled(v156, v157))
    {
      v159 = swift_slowAlloc(22, -1);
      v367 = v154;
      v160 = v159;
      v161 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v160 = 138543618;
      v369 = v367;
      v162 = v367;
      LODWORD(v363) = v158;
      v163 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      *v161 = v150;

      *(_WORD *)(v160 + 12) = 2114;
      v369 = v155;
      v164 = v155;
      v107 = v353;
      v29 = v354;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      v161[1] = v155;

      _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v363, "REMAssignmentCDIngestor: nullifiedRelationship assignee {assignmentID: %{public}@, reminderID: %{public}@}", (uint8_t *)v160, 0x16u);
      v165 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v161, 2, v165);
      swift_slowDealloc(v161, -1, -1);
      v166 = v160;
      v154 = v367;
      swift_slowDealloc(v166, -1, -1);
    }
    else
    {

      v156 = v154;
      v29 = (char *)v130;
      v107 = v353;
    }

    v42 = objc_opt_self(REMError);
    v195 = String._bridgeToObjectiveC()();
    -[NSObject nullifiedRelationshipErrorWithRelationshipName:](v42, "nullifiedRelationshipErrorWithRelationshipName:", v195);

    swift_willThrow(v196);
    goto LABEL_141;
  }
  v67 = -[NSObject ckAssigneeIdentifier](v65, "ckAssigneeIdentifier");
  v362 = v64;
  if (!v67)
  {
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v118 = type metadata accessor for Logger(0);
    sub_10001AAA8(v118, (uint64_t)qword_100842330);
    v119 = v66;
    v120 = Logger.logObject.getter(v119);
    v121 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = (uint8_t *)swift_slowAlloc(12, -1);
      v367 = swift_slowAlloc(8, -1);
      *(_DWORD *)v122 = 138412290;
      v369 = v119;
      v42 = v66;
      v123 = v119;
      v124 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      v125 = v367;
      v367->isa = (Class)v66;

      v119 = v123;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "REMAssignmentCDIngestor: cdAssignment.ckAssigneeIdentifier is nil {cdAssignment.remObjectID: %@}", v122, 0xCu);
      v126 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v125, 1, v126);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v122, -1, -1);
    }
    else
    {

      v120 = v119;
    }
    v188 = v353;
    v187 = (uint64_t)v354;
    v189 = v355;

    v190 = (void *)objc_opt_self(REMError);
    v191 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v192 = swift_getObjCClassFromMetadata(v191);
    v193 = String._bridgeToObjectiveC()();
    objc_msgSend(v190, "unexpectedNilPropertyWithClass:property:", v192, v193);

    swift_willThrow(v194);
    (*(void (**)(char *, uint64_t))(v366 + 8))(v364, v188);
    v100 = v187;
    goto LABEL_48;
  }
  v68 = v67;
  v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v71 = v70;

  UUID.init(uuidString:)(v69, v71);
  v72 = swift_bridgeObjectRelease();
  v73 = v353;
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v48)(v19, 1, v353, v72) == 1)
  {
    sub_10011E85C((uint64_t)v19);
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v74 = type metadata accessor for Logger(0);
    sub_10001AAA8(v74, (uint64_t)qword_100842330);
    v75 = v66;
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v367 = swift_slowAlloc(8, -1);
      *(_DWORD *)v78 = 138412290;
      v369 = v75;
      v79 = v75;
      v80 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      v81 = v367;
      v367->isa = (Class)v66;

      v75 = v79;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "REMAssignmentCDIngestor: Can't create UUID from ckAssigneeIdentifier {cdAssignment.remObjectID: %@}", v78, 0xCu);
      v82 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v81, 1, v82);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {

      v76 = v75;
    }
    v198 = v353;
    v197 = (uint64_t)v354;
    v199 = v355;

    v42 = objc_msgSend((id)objc_opt_self(REMError), "unexpectedError");
    swift_willThrow(v42);

    (*(void (**)(char *, uint64_t))(v366 + 8))(v364, v198);
    v100 = v197;
    goto LABEL_48;
  }
  ((void (*)(char *, char *, uint64_t))v61)(v14, v19, v73);
  v131 = (void *)objc_opt_self(REMAssignment);
  v132 = UUID._bridgeToObjectiveC()().super.isa;
  v352 = objc_msgSend(v131, "objectIDWithUUID:", v132);

  v104 = v366;
  (*(void (**)(char *, uint64_t))(v366 + 8))(v14, v73);
LABEL_68:
  v351 = (id)(int)v42;
  v133 = v367;
  v134 = -[NSObject originator](v367, "originator");
  v135 = v362;
  if (v134)
  {
    v136 = v134;
    v137 = v133;
  }
  else
  {
    v200 = v361;
    v201 = sub_10026C508(v133, (SEL *)&selRef_ckOriginatorIdentifier, "FETCH COREDATA originatorIDFromCKOriginatorIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}", "FETCH COREDATA originatorIDFromCKOriginatorIdentifier() sharee not found {uuid: %{public}s, assignment: %s}");
    v361 = v200;
    if (v200)
    {

      (*(void (**)(char *, uint64_t))(v104 + 8))(v364, v353);
      sub_10011E85C((uint64_t)v354);
      return v42;
    }
    v136 = v201;
    if (!v201)
      goto LABEL_166;
    v137 = v367;
  }
  v138 = objc_msgSend(v136, "remObjectID");
  if (!v138)
  {

LABEL_166:
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v318 = type metadata accessor for Logger(0);
    sub_10001AAA8(v318, (uint64_t)qword_100842330);
    v319 = v365;
    v320 = v135;
    v321 = v319;
    v322 = v320;
    v323 = Logger.logObject.getter(v322);
    v324 = static os_log_type_t.info.getter(v323);
    v325 = v324;
    v326 = os_log_type_enabled(v323, v324);
    v363 = v321;
    v356 = v322;
    if (v326)
    {
      v327 = swift_slowAlloc(22, -1);
      v328 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v327 = 138543618;
      v369 = v321;
      LODWORD(v350) = v325;
      v329 = v321;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      *v328 = v365;

      *(_WORD *)(v327 + 12) = 2114;
      v369 = v322;
      v330 = v322;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      v328[1] = v322;

      _os_log_impl((void *)&_mh_execute_header, v323, (os_log_type_t)v350, "storage(from cdAssignment:): originator of this assignment was nullified {objectID: %{public}@, reminderID: %{public}@}", (uint8_t *)v327, 0x16u);
      v331 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v328, 2, v331);
      swift_slowDealloc(v328, -1, -1);
      swift_slowDealloc(v327, -1, -1);
    }
    else
    {

      v323 = v321;
    }
    v227 = v352;
    v142 = v353;
    v143 = v355;
    v332 = v367;
    v333 = v360;
    v334 = v358;

    v335 = -[NSObject assignedDate](v332, "assignedDate");
    v236 = &selRef_isConcealed;
    if (v335)
    {
      v336 = v335;
      v337 = v357;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v335);

      v338 = v337;
      v339 = v359;
      ((void (*)(char *, char *, os_log_t))v333[4])(v334, v338, v359);
      ((void (*)(char *, _QWORD, uint64_t, os_log_t))v333[7])(v334, 0, 1, v339);
      if (((unsigned int (*)(char *, uint64_t, os_log_t))v333[6])(v334, 1, v339) == 1)
      {
        v140 = 0;
      }
      else
      {
        v140 = Date._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, os_log_t))v333[1])(v334, v339);
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, os_log_t))v333[7])(v334, 1, 1, v359);
      v140 = 0;
    }
    v340 = (void *)objc_opt_self(REMAssignment);
    v42 = objc_msgSend(v340, "nullifiedOriginatorAssignmentWithObjectID:accountID:reminderID:assigneeID:status:assignedDate:", v363, v143, v356, v227, v351, v140);
    v235 = 0;
    goto LABEL_177;
  }
  v139 = v138;
  if ((v363 & 1) != 0)
  {

    goto LABEL_73;
  }
  v363 = v138;
  LODWORD(v205) = objc_msgSend((id)objc_opt_self(REMCDAssignment), "isShareeActivelyParticipatingWithSharee:", v136);
  if ((v205 & 1) == 0)
  {
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v206 = type metadata accessor for Logger(0);
    sub_10001AAA8(v206, (uint64_t)qword_100842330);
    v207 = v365;
    v208 = v135;
    v209 = v136;
    v210 = v207;
    v211 = v208;
    v212 = v209;
    v213 = Logger.logObject.getter(v212);
    v214 = static os_log_type_t.info.getter(v213);
    v215 = v214;
    if (os_log_type_enabled(v213, v214))
    {
      v216 = swift_slowAlloc(26, -1);
      LODWORD(v350) = (_DWORD)v205;
      v205 = (uint8_t *)v216;
      v217 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v205 = 138543874;
      LODWORD(v348) = v215;
      v349 = v213;
      v369 = v210;
      v218 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      *v217 = v365;

      *((_WORD *)v205 + 6) = 2114;
      v369 = v211;
      v219 = v211;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, v370);
      v217[1] = v211;

      *((_WORD *)v205 + 11) = 512;
      LOWORD(v218) = (unsigned __int16)-[NSObject status](v212, "status");

      LOWORD(v369) = (_WORD)v218;
      v220 = v349;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v369, (char *)&v369 + 2);

      _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)v348, "REMAssignmentCDIngestor: originator status is disallowed {assignmentID: %{public}@, reminderID: %{public}@, originator.status: %hd}", v205, 0x1Au);
      v221 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v217, 2, v221);
      swift_slowDealloc(v217, -1, -1);
      v222 = v205;
      LOBYTE(v205) = v350;
      swift_slowDealloc(v222, -1, -1);
    }
    else
    {

      v220 = v212;
    }

    v137 = v367;
  }
  v237 = objc_msgSend(v136, "list");
  if (!v237)
    goto LABEL_148;
  v238 = v237;
  v239 = -[NSObject reminder](v137, "reminder");
  if (!v239)
  {
    v244 = v238;
    goto LABEL_147;
  }
  v240 = v239;
  v241 = objc_msgSend(v239, "list");

  if (!v241)
  {
LABEL_146:
    v244 = v238;
    v137 = v367;
    goto LABEL_147;
  }
  v242 = objc_msgSend(v238, "remObjectID");
  v243 = objc_msgSend(v241, "remObjectID");
  v244 = v243;
  if (!v242)
  {

    v137 = v367;
    if (!v244)
      goto LABEL_143;
LABEL_147:

LABEL_148:
    if (qword_100837088 != -1)
      swift_once(&qword_100837088, sub_10026BEF4);
    v284 = type metadata accessor for Logger(0);
    sub_10001AAA8(v284, (uint64_t)qword_100842330);
    v285 = v365;
    v286 = v137;
    v287 = v136;
    v288 = v285;
    v289 = v286;
    v290 = v287;
    v291 = Logger.logObject.getter(v290);
    v292 = static os_log_type_t.error.getter();
    v356 = v291;
    if (os_log_type_enabled(v291, (os_log_type_t)v292))
    {
      LODWORD(v349) = v292;
      v348 = v289;
      v350 = 7104878;
      v293 = swift_slowAlloc(32, -1);
      v294 = (NSObject **)swift_slowAlloc(8, -1);
      v346 = swift_slowAlloc(64, -1);
      v368 = (uint64_t)v288;
      v369 = v346;
      *(_DWORD *)v293 = 138543874;
      v295 = v288;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);
      v347 = v294;
      *v294 = v365;

      *(_WORD *)(v293 + 12) = 2080;
      v296 = objc_msgSend(v290, "list");
      if (v296)
      {
        v297 = v296;
        v298 = objc_msgSend(v296, "remObjectID");
        if (v298)
        {
          v299 = v298;
          v300 = objc_msgSend(v298, "description");

          v301 = static String._unconditionallyBridgeFromObjectiveC(_:)(v300);
          v303 = v302;

          goto LABEL_157;
        }

      }
      v303 = 0xE300000000000000;
      v301 = 7104878;
LABEL_157:
      v368 = sub_10001A820(v301, v303, (uint64_t *)&v369);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);

      *(_QWORD *)&v304 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v293 + 22) = 2080;
      v305 = v348;
      v306 = -[NSObject reminder](v348, "reminder", v304);
      if (v306)
      {
        v307 = v306;
        v308 = objc_msgSend(v306, "list");

        v309 = v346;
        if (v308)
        {
          v310 = objc_msgSend(v308, "remObjectID");
          if (v310)
          {
            v311 = v310;
            v312 = objc_msgSend(v310, "description");

            v350 = static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
            v314 = v313;

LABEL_164:
            v368 = sub_10001A820(v350, v314, (uint64_t *)&v369);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v368, &v369);

            swift_bridgeObjectRelease();
            v315 = v356;
            _os_log_impl((void *)&_mh_execute_header, v356, (os_log_type_t)v349, "REMAssignmentCDIngestor: originator not belongs to the same list to the reminder's {cdAssignment.remObjectID: %{public}@, candidateOriginator.list: %s, assignment.reminder.list: %s}", (uint8_t *)v293, 0x20u);
            v316 = sub_10001A630((uint64_t *)&unk_100839E70);
            v317 = v347;
            swift_arrayDestroy(v347, 1, v316);
            swift_slowDealloc(v317, -1, -1);
            swift_arrayDestroy(v309, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v309, -1, -1);
            swift_slowDealloc(v293, -1, -1);

            goto LABEL_165;
          }

        }
        v314 = 0xE300000000000000;
        goto LABEL_164;
      }
      v314 = 0xE300000000000000;
      v309 = v346;
      goto LABEL_164;
    }

LABEL_165:
    v135 = v362;
    goto LABEL_166;
  }
  if (!v243)
  {

    goto LABEL_146;
  }
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v245 = (char)v205;
  v205 = (uint8_t *)v242;
  v246 = static NSObject.== infix(_:_:)(v205);

  LOBYTE(v205) = v245;
  v137 = v367;
  if ((v246 & 1) == 0)
    goto LABEL_148;
LABEL_143:

  v139 = v363;
  if ((v205 & 1) == 0)
  {

    goto LABEL_165;
  }
LABEL_73:
  v140 = v139;
  v141 = -[NSObject assignedDate](v137, "assignedDate");
  v142 = v353;
  v143 = v355;
  if (v141)
  {
    v144 = v141;
    v145 = v365;
    v146 = v356;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v141);

    v148 = v359;
    v147 = v360;
    ((void (*)(NSObject *, _QWORD, uint64_t, os_log_t))v360[7])(v146, 0, 1, v359);
    v363 = objc_allocWithZone((Class)REMAssignment);
    if (((unsigned int (*)(NSObject *, uint64_t, os_log_t))v147[6])(v146, 1, v148) != 1)
    {
      v230 = v145;
      v224 = v362;
      v231 = v362;
      v232 = v143;
      v227 = v352;
      v233 = v352;
      v229 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(NSObject *, os_log_t))v147[1])(v146, v148);
      v142 = v353;
      v149 = v363;
      goto LABEL_108;
    }
    v142 = v353;
    v149 = v363;
  }
  else
  {
    ((void (*)(NSObject *, uint64_t, uint64_t, os_log_t))v360[7])(v356, 1, 1, v359);
    v149 = objc_allocWithZone((Class)REMAssignment);
  }
  v223 = v365;
  v224 = v362;
  v225 = v362;
  v226 = v143;
  v227 = v352;
  v228 = v352;
  v229 = 0;
LABEL_108:
  v234 = v365;
  v42 = -[NSObject initWithObjectID:accountID:reminderID:assigneeID:originatorID:status:assignedDate:](v149, "initWithObjectID:accountID:reminderID:assigneeID:originatorID:status:assignedDate:", v365, v143, v224, v227, v140, v351, v229);

  v235 = v140;
  v236 = &selRef_isConcealed;
LABEL_177:

  v341 = -[NSObject assignee](v367, "assignee");
  v342 = v341;
  if (v341)

  -[NSObject set_debug_cdAssigneeLinked:](v42, "set_debug_cdAssigneeLinked:", v342 != 0);
  v343 = objc_msgSend(v367, v236[295]);
  v344 = v343;
  v345 = v362;
  if (v343)

  -[NSObject set_debug_cdOriginatorLinked:](v42, "set_debug_cdOriginatorLinked:", v344 != 0);
  (*(void (**)(char *, uint64_t))(v366 + 8))(v364, v142);
  sub_10011E85C((uint64_t)v354);
  return v42;
}

void sub_10026F604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint64_t v13;

  v13 = type metadata accessor for UUID(0);
  v12[7] = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v12[3] = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12[5] = (char *)v12 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16))
  {
    v12[4] = v7;
    v12[1] = v3;
    swift_bridgeObjectRetain(a3);
    v12[6] = v8;
    v12[2] = v6;
    __asm { BR              X9 }
  }
}

void sub_10026FA78(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10026FAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  v1 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A7330;
  v3 = *(void **)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v3;
  v6 = v2;
  specialized Array._endMutation()(v2);
  v4 = v3;
  return v6;
}

void sub_10026FBF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

void sub_10026FC7C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  sub_1003FC6AC(0, *(void **)(v1 + 16), v3);
  if (!v0)
  {
    v5 = v4;
    objc_msgSend(v2, "setAccount:", v4);

  }
}

uint64_t storeEnumTagSinglePayload for REMAssignmentCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10026FEA8 + 4 * byte_1006B1A2F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10026FEDC + 4 * byte_1006B1A2A[v4]))();
}

uint64_t sub_10026FEDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026FEE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026FEECLL);
  return result;
}

uint64_t sub_10026FEF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026FF00);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10026FF04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026FF0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAssignmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMAssignmentCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMAssignmentCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10026FF74 + 4 * byte_1006B1A39[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10026FFA8 + 4 * byte_1006B1A34[v4]))();
}

uint64_t sub_10026FFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026FFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026FFB8);
  return result;
}

uint64_t sub_10026FFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026FFCCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10026FFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026FFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAssignmentCDIngestor.ValueKey()
{
  return &type metadata for REMAssignmentCDIngestor.ValueKey;
}

uint64_t sub_10026FFF4()
{
  return sub_1000BAEEC(&qword_100842550, &qword_100842558);
}

unint64_t sub_10027001C()
{
  unint64_t result;

  result = qword_100842560;
  if (!qword_100842560)
  {
    result = swift_getWitnessTable(&unk_1006B1B9C, &type metadata for REMAssignmentCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100842560);
  }
  return result;
}

uint64_t sub_100270060()
{
  return sub_1000BAEEC(&qword_100842568, &qword_100842570);
}

unint64_t sub_100270088()
{
  unint64_t result;

  result = qword_100842578;
  if (!qword_100842578)
  {
    result = swift_getWitnessTable(&unk_1006B1C74, &type metadata for REMAssignmentCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100842578);
  }
  return result;
}

id sub_1002700CC(uint64_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  Class v60;
  Class v61;
  Class v62;
  Class v63;
  Class v64;
  Class v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[16];
  _QWORD *v87;
  char v88;

  v8 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v8 - 8);
  v80 = (id)v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v83 = a3;
  v84 = a4;
  v82 = a2;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v87 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v11);
      specialized ContiguousArray.reserveCapacity(_:)(v12);
      v13 = 0;
      do
      {
        v14 = v13 + 1;
        v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v11 + 8 * v13 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v16 = v87[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v15);
        specialized ContiguousArray._endMutation()(v17);
        v13 = v14;
      }
      while (v12 != v14);
      v76 = v87;
      swift_bridgeObjectRelease();
      v18 = a1[1];
      if (!v18)
      {
LABEL_14:
        v75 = 0;
        v25 = a1[2];
        if (v25)
          goto LABEL_15;
LABEL_20:
        v27 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      v76 = _swiftEmptyArrayStorage;
      v18 = a1[1];
      if (!v18)
        goto LABEL_14;
    }
  }
  else
  {
    v76 = 0;
    v18 = a1[1];
    if (!v18)
      goto LABEL_14;
  }
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v87 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v18);
    specialized ContiguousArray.reserveCapacity(_:)(v19);
    v20 = (void *)objc_opt_self(REMRecurrenceDayOfWeek);
    v21 = (_QWORD *)(v18 + 40);
    do
    {
      v22 = objc_msgSend(v20, "dayOfWeek:weekNumber:", *(v21 - 1), *v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = v87[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v22);
      specialized ContiguousArray._endMutation()(v24);
      v21 += 2;
      --v19;
    }
    while (v19);
    v75 = v87;
    swift_bridgeObjectRelease();
    v25 = a1[2];
    if (!v25)
      goto LABEL_20;
  }
  else
  {
    v75 = _swiftEmptyArrayStorage;
    v25 = a1[2];
    if (!v25)
      goto LABEL_20;
  }
LABEL_15:
  v26 = *(_QWORD *)(v25 + 16);
  v27 = _swiftEmptyArrayStorage;
  if (v26)
  {
    v87 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v25);
    specialized ContiguousArray.reserveCapacity(_:)(v26);
    v28 = 0;
    do
    {
      v29 = v28 + 1;
      v30 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v25 + 8 * v28 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      v31 = v87[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
      v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v30);
      specialized ContiguousArray._endMutation()(v32);
      v28 = v29;
    }
    while (v26 != v29);
    v27 = v87;
    swift_bridgeObjectRelease();
  }
LABEL_21:
  sub_100270844((uint64_t)(a1 + 3), (uint64_t)v86);
  sub_100270844((uint64_t)v86, (uint64_t)&v87);
  if ((v88 & 1) != 0)
  {
    v81 = 0;
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v87);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v81 = objc_msgSend((id)objc_opt_self(REMRecurrenceEnd), "recurrenceEndWithEndDate:", isa);

    (*(void (**)(char *, id))(v79 + 8))(v10, v80);
  }
  v34 = (void *)a1[5];
  v79 = a1[6];
  v80 = v34;
  v35 = a1[8];
  v78 = a1[7];
  if (!v35)
  {
    v37 = 0;
    v43 = a1[9];
    if (v43)
      goto LABEL_30;
LABEL_46:
    v45 = 0;
    v51 = a1[10];
    if (v51)
      goto LABEL_35;
LABEL_47:
    sub_10027088C(a1);
    v58 = 0;
    goto LABEL_49;
  }
  v36 = *(_QWORD *)(v35 + 16);
  v37 = _swiftEmptyArrayStorage;
  if (v36)
  {
    v85 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v35);
    specialized ContiguousArray.reserveCapacity(_:)(v36);
    v38 = 0;
    do
    {
      v39 = v38 + 1;
      v40 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v35 + 8 * v38 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      v41 = v85[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
      v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v40);
      specialized ContiguousArray._endMutation()(v42);
      v38 = v39;
    }
    while (v36 != v39);
    v37 = v85;
    swift_bridgeObjectRelease();
  }
  v43 = a1[9];
  if (!v43)
    goto LABEL_46;
LABEL_30:
  v44 = *(_QWORD *)(v43 + 16);
  v45 = _swiftEmptyArrayStorage;
  if (v44)
  {
    v74 = v37;
    v85 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v43);
    specialized ContiguousArray.reserveCapacity(_:)(v44);
    v46 = 0;
    do
    {
      v47 = v46 + 1;
      v48 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v43 + 8 * v46 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
      v49 = v85[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
      v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v48);
      specialized ContiguousArray._endMutation()(v50);
      v46 = v47;
    }
    while (v44 != v47);
    v45 = v85;
    swift_bridgeObjectRelease();
    v37 = v74;
  }
  v51 = a1[10];
  if (!v51)
    goto LABEL_47;
LABEL_35:
  v52 = *(_QWORD *)(v51 + 16);
  if (!v52)
  {
    sub_10027088C(a1);
    v58 = _swiftEmptyArrayStorage;
LABEL_49:
    v59 = v76;
    if (!v75)
      goto LABEL_39;
    goto LABEL_50;
  }
  v73 = v27;
  v74 = v37;
  v85 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v51);
  specialized ContiguousArray.reserveCapacity(_:)(v52);
  v53 = 0;
  do
  {
    v54 = v53 + 1;
    v55 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v51 + 8 * v53 + 32));
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v55);
    v56 = v85[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v56);
    v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v55);
    specialized ContiguousArray._endMutation()(v57);
    v53 = v54;
  }
  while (v52 != v54);
  v58 = v85;
  sub_10027088C(a1);
  swift_bridgeObjectRelease();
  v59 = v76;
  v27 = v73;
  v37 = v74;
  if (!v75)
  {
LABEL_39:
    v60 = 0;
    if (!v59)
      goto LABEL_40;
    goto LABEL_51;
  }
LABEL_50:
  sub_1000151B0(0, &qword_100842588, REMRecurrenceDayOfWeek_ptr);
  v60 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_40:
    v61 = 0;
    if (!v37)
      goto LABEL_41;
    goto LABEL_52;
  }
LABEL_51:
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v61 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_41:
    v62 = 0;
    if (!v58)
      goto LABEL_42;
    goto LABEL_53;
  }
LABEL_52:
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v62 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_42:
    v63 = 0;
    if (!v27)
      goto LABEL_43;
LABEL_54:
    sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v64 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (!v45)
      goto LABEL_44;
LABEL_55:
    sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v65 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
LABEL_53:
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v63 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v27)
    goto LABEL_54;
LABEL_43:
  v64 = 0;
  if (v45)
    goto LABEL_55;
LABEL_44:
  v65 = 0;
LABEL_56:
  v66 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v77));
  v67 = v81;
  v69 = v82;
  v68 = v83;
  v70 = v84;
  v80 = objc_msgSend(v66, "initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:", v82, v83, v84, v79, v78, v80, v60, v61, v62, v63, v64, v65, v81);

  return v80;
}

uint64_t sub_100270844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100842580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10027088C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_1002708F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v26[0] = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v17 = sub_1000C4C0C((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v4, v15);
  v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x80000001006FE770, v9, v6, v13, 0);
  v19 = swift_allocObject(&unk_1007EB990, 32, 7);
  v20 = (void *)v26[0];
  *(_QWORD *)(v19 + 16) = v26[1];
  *(_QWORD *)(v19 + 24) = v20;
  aBlock[4] = sub_10027B5F0;
  v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007EB9A8;
  v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v22 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A630((uint64_t *)&unk_100838000);
  v24 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v23, v24, v1, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v3, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  return swift_release(v32);
}

uint64_t sub_100270C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void (*v43)(void *);
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];

  v3 = v2;
  v52 = a1;
  v53 = a2;
  v4 = type metadata accessor for UnmigrateRequest(0);
  __chkstk_darwin(v4);
  v6 = (_DWORD *)((char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  __chkstk_darwin(v7);
  v48 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100273468();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "codeServiceWithName:databaseScope:", v10, 2);

  v12 = type metadata accessor for TantorMigrationAPIAsyncOperationClient();
  inited = swift_initStackObject(v12, v57);
  *(_QWORD *)(inited + 16) = v11;
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100842590);
  v14 = swift_retain_n(v3);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v54 = v6;
  if (v17)
  {
    v47[1] = v4;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v56 = v19;
    *(_DWORD *)v18 = 136446210;
    v47[0] = v18 + 4;
    v20 = objc_msgSend(*(id *)(v3 + 24), "uuid", v18 + 4);
    v21 = v48;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    v55 = sub_10001A820(v23, v25, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Setting up unmigration service call {accountID: %{public}s}", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v26 = v19;
    v6 = v54;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
  *v6 = 0;
  UnknownStorage.init()(v27);
  v28 = swift_retain_n(v3);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v56 = v32;
    *(_DWORD *)v31 = 136446210;
    v33 = objc_msgSend(*(id *)(v3 + 24), "uuid");
    v34 = v48;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v50);
    v55 = sub_10001A820(v36, v38, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Making request to inverness for unmigration {accountID: %{public}s}", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v39 = v32;
    v6 = v54;
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
  v40 = swift_allocObject(&unk_1007EB8C8, 32, 7);
  *(_QWORD *)(v40 + 16) = v52;
  *(_QWORD *)(v40 + 24) = v53;
  swift_retain();
  v41 = inited;
  v42 = TantorMigrationAPIAsyncOperationClient.unmigrate(_:completion:)((uint64_t)v6, (uint64_t)sub_10027B588, v40);
  swift_release(v40);
  v43 = sub_100273590();
  v45 = v44;
  sub_10027B0EC(v42, (uint64_t)v43, v44, (uint64_t)&unk_1007EB8E0);

  swift_release(v41);
  swift_release(v45);
  return sub_10001C744((uint64_t)v6, type metadata accessor for UnmigrateRequest);
}

void sub_100271138(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];

  v5 = v4;
  v9 = type metadata accessor for REMMigrationResultState(0);
  __chkstk_darwin(v9);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 48));
  *(_BYTE *)(v5 + 91) = a1;
  v10 = swift_allocObject(&unk_1007EB8A0, 32, 7);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v11 = (_QWORD *)(v5 + 40);
  swift_beginAccess(v5 + 40, v17, 33, 0);
  v12 = *(_QWORD **)(v5 + 40);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  *(_QWORD *)(v5 + 40) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1002C91B4(0, v12[2] + 1, 1, v12);
    *v11 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1002C91B4((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
    *v11 = v12;
  }
  v12[2] = v15 + 1;
  v16 = &v12[2 * v15];
  v16[4] = sub_10027B544;
  v16[5] = v10;
  swift_endAccess(v17);
  if ((*(_BYTE *)(v5 + 89) & 1) == 0)
    sub_100273C24((uint64_t)sub_10027B33C, v5);
  __asm { BR              X10 }
}

uint64_t sub_1002714E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100842590);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842590);
  if (qword_100837610 != -1)
    swift_once(&qword_100837610, sub_1004A17E4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_100271578()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1002715BC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1002715E4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100271624@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10027B328(*a1);
  *a2 = result;
  return result;
}

void sub_10027164C(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void *sub_100271658()
{
  void *result;

  result = (void *)sub_1002AFEE8((uint64_t)_swiftEmptyArrayStorage);
  off_1008425A8 = result;
  return result;
}

_DWORD *sub_10027167C()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc(4, -1);
  *result = 0;
  qword_1008425B0 = (uint64_t)result;
  return result;
}

void sub_1002716A4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSString v9;
  id v10;
  uint64_t KeyPath;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  id v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  _QWORD v27[5];
  uint64_t v28;
  char v29[48];

  v2 = v1;
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100842590);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Resume all uncompleted migration processes", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (qword_1008370A0 != -1)
    swift_once(&qword_1008370A0, sub_10027167C);
  os_unfair_lock_lock((os_unfair_lock_t)qword_1008425B0);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "newBackgroundContextWithAuthor:", v9);

  KeyPath = swift_getKeyPath(&unk_1006B1E60);
  v12 = (void *)sub_1002E89CC(KeyPath, 1);
  swift_release(KeyPath);
  v13 = swift_getKeyPath(&unk_1006B1E88);
  v14 = (void *)sub_1002E89D8(v13, 0);
  swift_release(v13);
  v15 = sub_10001A630(&qword_100842710);
  inited = swift_initStackObject(v15, v29);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v14;
  v27[0] = inited;
  specialized Array._endMutation()(inited);
  v17 = v14;
  v18 = v12;
  v19 = (void *)sub_10000D2BC(v27[0]);
  v20 = (_QWORD *)swift_allocObject(&unk_1007EB9E0, 48, 7);
  v20[2] = v10;
  v20[3] = v19;
  v20[4] = v2;
  v20[5] = a1;
  v21 = swift_allocObject(&unk_1007EBA08, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10027B6E8;
  *(_QWORD *)(v21 + 24) = v20;
  v27[4] = sub_1000A66B8;
  v28 = v21;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256;
  v27[2] = sub_1000098C4;
  v27[3] = &unk_1007EBA20;
  v22 = _Block_copy(v27);
  v23 = v28;
  v24 = v19;
  v25 = a1;
  swift_retain();
  v26 = v10;
  swift_release(v23);
  objc_msgSend(v26, "performBlockAndWait:", v22);
  _Block_release(v22);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v21, "", 99, 113, 28, 1);
  swift_release(v21);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)qword_1008425B0);
    swift_release(v20);

  }
}

void sub_1002719C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  Class isa;
  NSString v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  void *v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  char *v64;
  void (*v65)(uint64_t, uint64_t);
  uint8_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __n128 v71;
  uint64_t *v72;
  uint8_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  id v78;
  char *v79;
  void (*v80)(uint64_t, uint64_t, __n128);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86[4];
  char v87[48];

  v78 = a4;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v84 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  v16 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v16, v87);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006B1E38);
  *(_QWORD *)(inited + 32) = KeyPath;
  v86[0] = inited;
  specialized Array._endMutation()(KeyPath);
  v19 = v86[0];
  v20 = (void *)sub_100359088(v86[0], 0, 0, a2);
  swift_bridgeObjectRelease(v19);
  v21 = sub_1000151B0(0, (unint64_t *)&unk_100846BE0, off_1007D66E8);
  v22 = NSManagedObjectContext.fetch<A>(_:)(v20, v21);
  v79 = v15;
  v76 = v13;

  v24 = v22;
  if ((unint64_t)v22 >> 62)
  {
    if (v22 >= 0)
      v22 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v22);
    v23 = swift_bridgeObjectRelease(v24);
    v26 = (uint64_t)v79;
    if (v25)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(v24);
    return;
  }
  v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = (uint64_t)v79;
  if (!v25)
    goto LABEL_27;
LABEL_3:
  if (v25 >= 1)
  {
    v75 = v10;
    v27 = 0;
    v82 = v24 & 0xC000000000000001;
    v72 = v86;
    v23.n128_u64[0] = 136446210;
    v71 = v23;
    v70 = (char *)&type metadata for Any + 8;
    v28 = (uint64_t)v76;
    v74 = v24;
    v77 = v25;
    while (1)
    {
      if (v82)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v24);
      else
        v29 = *(id *)(v24 + 8 * v27 + 32);
      v30 = v29;
      v31 = objc_msgSend(v29, "accountIdentifier");
      if (v31)
      {
        v32 = v31;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

        v33 = v83;
        v34 = v84;
        v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32);
        v35(v84, v28, v7);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v7);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v7) != 1)
        {
          v35(v26, v84, v7);
          if (qword_100837098 != -1)
            swift_once(&qword_100837098, sub_100271658);
          swift_beginAccess(&off_1008425A8, v86, 32, 0);
          if (*((_QWORD *)off_1008425A8 + 2) && (sub_1002C65F8(v26), (v36 & 1) != 0))
          {
            swift_endAccess(v86);
            (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v26, v7);

            v25 = v77;
          }
          else
          {
            swift_endAccess(v86);
            v37 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
            v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "cdEntityName");
            static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            v39 = v28;
            v41 = v40;

            v42 = objc_allocWithZone((Class)REMObjectID);
            isa = UUID._bridgeToObjectiveC()().super.isa;
            v44 = String._bridgeToObjectiveC()();
            v45 = objc_msgSend(v42, "initWithUUID:entityName:", isa, v44, swift_bridgeObjectRelease(v41).n128_f64[0]);

            v46 = type metadata accessor for RDMigrationClient();
            swift_allocObject(v46, 120, 7);
            v47 = sub_100273908(v45, v78);
            sub_1002722CC(v30);
            v48 = v83;
            v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16);
            v49(v39, v26, v7);
            swift_beginAccess(&off_1008425A8, v86, 33, 0);
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1008425A8);
            v85 = off_1008425A8;
            off_1008425A8 = (_UNKNOWN *)0x8000000000000000;
            v81 = v47;
            sub_10028C9F4(v47, v39, isUniquelyReferenced_nonNull_native);
            v51 = off_1008425A8;
            off_1008425A8 = v85;
            v52 = swift_bridgeObjectRelease(v51);
            v80 = *(void (**)(uint64_t, uint64_t, __n128))(v48 + 8);
            v80(v39, v7, v52);
            swift_endAccess(v86);
            if (qword_100837090 != -1)
              swift_once(&qword_100837090, sub_1002714E8);
            v53 = type metadata accessor for Logger(0);
            sub_10001AAA8(v53, (uint64_t)qword_100842590);
            v54 = v75;
            v26 = (uint64_t)v79;
            v55 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v75, v79, v7);
            v56 = Logger.logObject.getter(v55);
            v57 = static os_log_type_t.default.getter(v56);
            if (os_log_type_enabled(v56, v57))
            {
              v58 = (uint8_t *)swift_slowAlloc(12, -1);
              v59 = swift_slowAlloc(32, -1);
              v86[0] = v59;
              *(_DWORD *)v58 = v71.n128_u32[0];
              v73 = v58 + 4;
              v60 = UUID.uuidString.getter(v59);
              v62 = v61;
              v85 = (void *)sub_10001A820(v60, v61, v86);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v72);
              v63 = swift_bridgeObjectRelease(v62);
              v64 = v54;
              v65 = (void (*)(uint64_t, uint64_t))v80;
              v80((uint64_t)v64, v7, v63);
              _os_log_impl((void *)&_mh_execute_header, v56, v57, "Wake up migration client {accountID: %{public}s}", v58, 0xCu);
              swift_arrayDestroy(v59, 1, v70);
              swift_slowDealloc(v59, -1, -1);
              v66 = v58;
              v26 = (uint64_t)v79;
              swift_slowDealloc(v66, -1, -1);
            }
            else
            {
              v67 = v54;
              v65 = (void (*)(uint64_t, uint64_t))v80;
              ((void (*)(char *, uint64_t))v80)(v67, v7);
            }

            v25 = v77;
            v68 = v81;
            sub_10027234C(0);
            swift_release(v68);

            v65(v26, v7);
            v28 = (uint64_t)v76;
            v24 = v74;
          }
          goto LABEL_7;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v84, 1, 1, v7);
      }

      sub_10000882C(v84, (uint64_t *)&unk_100839C80);
LABEL_7:
      if (v25 == ++v27)
        goto LABEL_27;
    }
  }
  __break(1u);
}

uint64_t sub_100272164@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "accountIdentifier");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1002721E8(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v6, (uint64_t *)&unk_100839C80);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setAccountIdentifier:", isa);

}

id sub_1002722CC(void *a1)
{
  uint64_t v1;
  unsigned int v3;
  id result;

  v3 = objc_msgSend(a1, "state");
  if (v3 <= 3)
    *(_BYTE *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 72) = (int)objc_msgSend(a1, "retryCount");
  *(_QWORD *)(v1 + 80) = (int)objc_msgSend(a1, "failureCount");
  result = objc_msgSend(a1, "isTerminated");
  *(_BYTE *)(v1 + 88) = (_BYTE)result;
  *(_BYTE *)(v1 + 89) = 1;
  return result;
}

void sub_10027234C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint8_t *v40;
  __n128 v41;
  void *v42;
  Swift::String v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  Swift::String v52;
  void *object;
  Swift::String v54;
  unint64_t v55;
  NSString v56;
  id v57;
  id v58;
  id v59;
  uint8_t *v60;
  id v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  void *v70;
  __n128 v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  uint64_t v99;
  uint8_t *v100;
  void *v101;
  NSString v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  id v117;
  void (*v118)(void *);
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[4];
  int v122;
  unint64_t v123;
  id v124;
  uint8_t *v125;
  uint64_t inited;
  uint64_t v127;
  _BYTE *v128;
  id v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  int v133;
  char v134[24];
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138[4];
  _QWORD v139[3];

  v2 = v1;
  v133 = a1;
  v3 = type metadata accessor for MigrateRequest(0);
  __chkstk_darwin(v3);
  v131 = &v121[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v5);
  v7 = &v121[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v121[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(void **)(v2 + 24);
  v13 = objc_msgSend(v12, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v132 = UUID.uuidString.getter(v14);
  v16 = v15;
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  if (objc_msgSend((id)objc_opt_self(ICUtilities), "isInternetReachable"))
  {
    v138[0] = 0xD000000000000010;
    v138[1] = 0x80000001006FE3C0;
    v138[3] = 0;
    v139[0] = 0;
    v138[2] = 0;
    *(_QWORD *)((char *)v139 + 6) = 0;
    sub_10035415C((uint64_t)v138, (uint64_t)sub_100278FC4, 0);
    v24 = v23;
    v130 = v3;
    swift_bridgeObjectRetain(v23);
    v25 = v12;
    v26 = sub_1001A602C((uint64_t)v25, v24);
    swift_bridgeObjectRelease(v24);
    v129 = v25;

    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      v42 = (void *)objc_opt_self(REMError);
      v136 = 0;
      v137 = 0xE000000000000000;
      _StringGuts.grow(_:)(148);
      v43._countAndFlagsBits = 0xD000000000000073;
      v43._object = (void *)0x80000001006FE3E0;
      String.append(_:)(v43);
      v44 = v12;
      v45 = objc_msgSend(v44, "description");
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      v49._countAndFlagsBits = v46;
      v49._object = v48;
      String.append(_:)(v49);

      swift_bridgeObjectRelease(v48);
      v50._countAndFlagsBits = 0xD00000000000001CLL;
      v50._object = (void *)0x80000001006FE460;
      String.append(_:)(v50);
      v135 = v24;
      v51 = sub_10001A630(&qword_1008426D8);
      v52._countAndFlagsBits = String.init<A>(describing:)(&v135, v51);
      object = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(object);
      v54._countAndFlagsBits = 125;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      v55 = v137;
      v56 = String._bridgeToObjectiveC()();
      v57 = objc_msgSend(v42, "internalErrorWithDebugDescription:", v56, swift_bridgeObjectRelease(v55).n128_f64[0]);

      v58 = v57;
      sub_10027565C(v57, 1);

      return;
    }
    swift_bridgeObjectRelease(v24);
    v27 = sub_100273468();
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v27, "codeServiceWithName:databaseScope:", v28, 2);

    v30 = type metadata accessor for TantorMigrationAPIAsyncOperationClient();
    inited = swift_initStackObject(v30, v134);
    *(_QWORD *)(inited + 16) = v29;
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001AAA8(v31, (uint64_t)qword_100842590);
    v33 = swift_bridgeObjectRetain_n(v16, 2);
    v127 = v32;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = v130;
    v128 = v7;
    if (v36)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v136 = v39;
      *(_DWORD *)v38 = 136446210;
      v125 = v38 + 4;
      swift_bridgeObjectRetain(v16);
      v135 = sub_10001A820(v132, v16, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Setting up migration service call {accountID: %{public}s}", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v40 = v38;
      v7 = v128;
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      v41 = swift_bridgeObjectRelease_n(v16, 2);
    }
    v59 = v129;
    *(_QWORD *)v7 = 0;
    *((_DWORD *)v7 + 2) = 0;
    UnknownStorage.init()(v41);
    v60 = (uint8_t *)objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v61 = -[uint8_t unsafeUntilSystemReady_iCloudAccountCalDavServiceWithAccountID:](v60, "unsafeUntilSystemReady_iCloudAccountCalDavServiceWithAccountID:", v59);
    v62 = v61;
    if (!v61)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v64 = v63;
      v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v64);
    }
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v67 = v66;
    v68 = objc_allocWithZone((Class)NSRegularExpression);
    v69 = sub_1002793E4(0xD000000000000013, 0x80000001006FE4A0, 0);
    if (v69)
    {
      v70 = v69;
      v71 = swift_bridgeObjectRetain(v67);
      v72 = String.UTF16View.count.getter(v65, v67, v71);
      v73 = objc_msgSend(v70, "firstMatchInString:options:range:", v62, 0, 0, v72, swift_bridgeObjectRelease(v67).n128_f64[0]);

      if (v73)
      {
        v129 = v70;
        if ((uint64_t)objc_msgSend(v73, "numberOfRanges") >= 2)
        {
          v74 = Range<>.init(_:in:)(objc_msgSend(v73, "rangeAtIndex:", 1));
          if ((v76 & 1) == 0)
          {
            v124 = v73;
            v125 = v60;
            v77 = String.subscript.getter(v74, v75, v65, v67);
            v81 = v80;
            if ((v77 ^ v78) >> 14)
            {
              v82 = v77;
              v83 = v78;
              v123 = v79;
              v84 = v80;
              v85 = sub_100279DC4(v77, v78, v79, v80, 10);
              if ((v85 & 0x10000000000) != 0)
                v85 = sub_100279598(v82, v83, v123, v81, 10);
              v86 = v85;
              swift_bridgeObjectRelease(v84);
              if ((v86 & 0x100000000) == 0)
              {
                swift_bridgeObjectRetain_n(v16, 2);
                swift_bridgeObjectRetain(v67);
                v88 = Logger.logObject.getter(v87);
                v89 = static os_log_type_t.default.getter(v88);
                v90 = v89;
                if (os_log_type_enabled(v88, v89))
                {
                  v91 = swift_slowAlloc(28, -1);
                  v122 = v90;
                  v92 = v91;
                  v123 = swift_slowAlloc(64, -1);
                  v136 = v123;
                  *(_DWORD *)v92 = 67109634;
                  LODWORD(v135) = v86;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, (char *)&v135 + 4);
                  *(_WORD *)(v92 + 8) = 2082;
                  swift_bridgeObjectRetain(v67);
                  v135 = sub_10001A820(v65, v67, (uint64_t *)&v136);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
                  swift_bridgeObjectRelease_n(v67, 3);
                  *(_WORD *)(v92 + 18) = 2082;
                  swift_bridgeObjectRetain(v16);
                  v135 = sub_10001A820(v132, v16, (uint64_t *)&v136);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
                  swift_bridgeObjectRelease_n(v16, 3);
                  _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v122, "Migration call will use {partition: %u, serviceURLPrefix: %{public}s, accountID: %{public}s}", (uint8_t *)v92, 0x1Cu);
                  v93 = v123;
                  swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v93, -1, -1);
                  swift_slowDealloc(v92, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n(v16, 2);
                  swift_bridgeObjectRelease_n(v67, 2);
                }
                v104 = (uint64_t)v128;
                *((_DWORD *)v128 + 2) = v86;
                __chkstk_darwin(v94);
                v121[-16] = v133 & 1;
                *(_QWORD *)&v121[-8] = v104;
                v105 = sub_10009FC50(&qword_100838710, type metadata accessor for MigrateRequest, (uint64_t)&protocol conformance descriptor for MigrateRequest);
                static Message.with(_:)(sub_10027B3FC, &v121[-32], v37, v105);
                swift_bridgeObjectRetain(v16);
                v107 = Logger.logObject.getter(v106);
                v108 = static os_log_type_t.default.getter(v107);
                if (os_log_type_enabled(v107, v108))
                {
                  v109 = (uint8_t *)swift_slowAlloc(12, -1);
                  v110 = swift_slowAlloc(32, -1);
                  v136 = v110;
                  *(_DWORD *)v109 = 136446210;
                  swift_bridgeObjectRetain(v16);
                  v135 = sub_10001A820(v132, v16, (uint64_t *)&v136);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
                  swift_bridgeObjectRelease_n(v16, 3);
                  _os_log_impl((void *)&_mh_execute_header, v107, v108, "Making request to inverness for migration {accountID: %{public}s}", v109, 0xCu);
                  swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v110, -1, -1);
                  swift_slowDealloc(v109, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n(v16, 2);
                }
                v111 = v125;
                v112 = *(_QWORD *)(v2 + 72);
                v113 = __OFADD__(v112, 1);
                v114 = v112 + 1;
                if (v113)
                {
                  __break(1u);
                }
                else
                {
                  *(_QWORD *)(v2 + 72) = v114;
                  sub_100273C24((uint64_t)sub_10027B418, v2);
                  swift_retain();
                  v115 = v131;
                  v116 = inited;
                  v117 = TantorMigrationAPIAsyncOperationClient.migrate(_:completion:)((uint64_t)v131, (uint64_t)sub_10027B420, v2);
                  swift_release(v2);
                  v118 = sub_100273590();
                  v120 = v119;
                  sub_10027B0EC(v117, (uint64_t)v118, v119, (uint64_t)&unk_1007EB7C8);

                  swift_release(v116);
                  swift_release(v120);

                  sub_10001C744((uint64_t)v115, type metadata accessor for MigrateRequest);
                  sub_10001C744(v104, type metadata accessor for MigrateRequest.User);
                }
                return;
              }
              swift_bridgeObjectRelease(v67);
              swift_bridgeObjectRelease(v16);

            }
            else
            {
              swift_bridgeObjectRelease(v67);
              swift_bridgeObjectRelease(v16);

              swift_bridgeObjectRelease(v81);
            }
            v60 = v125;
            goto LABEL_32;
          }
        }

      }
      else
      {

      }
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v67);

    }
LABEL_32:
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.error.getter();
    v98 = os_log_type_enabled(v96, v97);
    v99 = (uint64_t)v128;
    if (v98)
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Failed to determine user CalDAV partition", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    v101 = (void *)objc_opt_self(REMError);
    v102 = String._bridgeToObjectiveC()();
    v103 = objc_msgSend(v101, "internalErrorWithDebugDescription:", v102);

    sub_10027565C(v103, 1);
    swift_release(inited);
    sub_10001C744(v99, type metadata accessor for MigrateRequest.User);
    return;
  }
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_100842590);
  swift_bridgeObjectRetain(v16);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v138[0] = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain(v16);
    v136 = sub_10001A820(v132, v16, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
    swift_bridgeObjectRelease_n(v16, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Internet is not available. Will resume migration when we have reachability {accountID: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v16, 2);
  }
  *(_BYTE *)(v2 + 92) = 1;
  *(_BYTE *)(v2 + 93) = (*(_BYTE *)(v2 + 93) | v133) & 1;
}

void sub_1002731AC(void *a1)
{
  id v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v2 = objc_msgSend((id)objc_opt_self(REMCDMigrationState), "fetchRequest");
  v3 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  v22 = 0;
  v4 = objc_msgSend(a1, "executeRequest:error:", v3, &v22);
  v5 = v22;
  if (v4)
  {
    v6 = v4;
    v7 = v22;

  }
  else
  {
    v8 = v22;
    v9 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v10);
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100842590);
    swift_errorRetain(v9);
    v12 = swift_errorRetain(v9);
    v6 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (void *)swift_slowAlloc(32, -1);
      v22 = v15;
      *(_DWORD *)v14 = 136446210;
      v20 = v9;
      swift_errorRetain(v9);
      v16 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v17 = String.init<A>(describing:)(&v20, v16);
      v19 = v18;
      v20 = sub_10001A820(v17, v18, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v13, "Failed to delete migration state entities from the database {error: %{public}s}", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v9);
      return;
    }

    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

}

id sub_100273468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + 96);
  if (v6)
  {
    v7 = *(id *)(v1 + 96);
  }
  else
  {
    v8 = (void *)objc_opt_self(REMCloudContainer);
    v9 = objc_msgSend(*(id *)(v1 + 24), "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

    UUID.uuidString.getter();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v13 = objc_msgSend(v8, "newCloudContainerForAccountID:", v12);

    v14 = *(void **)(v1 + 96);
    *(_QWORD *)(v1 + 96) = v13;
    v7 = v13;

    v6 = 0;
  }
  v15 = v6;
  return v7;
}

void (*sub_100273590())(void *a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  if (v1)
  {
    v3 = *(void (**)(void *))(v0 + 104);
  }
  else
  {
    v4 = swift_allocObject(&unk_1007EB800, 24, 7);
    swift_weakInit(v4 + 16, v0);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 112);
    v3 = sub_10027B44C;
    *(_QWORD *)(v0 + 104) = sub_10027B44C;
    *(_QWORD *)(v0 + 112) = v4;
    swift_retain(v4);
    sub_1000A5C24(v5, v6);
  }
  sub_1000E51CC(v1, v2);
  return v3;
}

void sub_100273630(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v3 = objc_msgSend(a1, "requestUUID");
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_100842590);
    swift_retain_n(a2, 2);
    swift_bridgeObjectRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = (_QWORD *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v21 = v13;
      *(_DWORD *)v11 = 136446466;
      swift_bridgeObjectRetain(v6);
      v19 = sub_10001A820(v4, v6, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease_n(v6, 3);
      *(_WORD *)(v11 + 12) = 2114;
      swift_beginAccess(a2 + 16, &v19, 0, 0);
      Strong = swift_weakLoadStrong(a2 + 16);
      if (Strong)
      {
        v15 = Strong;
        v16 = *(id *)(Strong + 24);
        swift_release(v15);
        v18 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      }
      else
      {
        v18 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        v16 = 0;
      }
      *v12 = v16;
      swift_release_n(a2, 2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Completed MigrationClient request {requestUUID: %{public}s, accountID: %{public}@}", (uint8_t *)v11, 0x16u);
      v17 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v12, 1, v17);
      swift_slowDealloc(v12, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
      swift_bridgeObjectRelease_n(v6, 2);
    }
  }
}

uint64_t sub_100273908(void *a1, void *a2)
{
  uint64_t v2;
  _DWORD *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  __CFString *v10;
  void *v11;
  id v12;

  v5 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = -1;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  *(_BYTE *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 48) = v5;
  *v5 = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 86) = 0;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = a2;
  v8 = a1;
  v9 = objc_msgSend(v6, "defaultCenter");
  v10 = kReachabilityChangedNotification;
  v11 = (void *)objc_opt_self(ICReachability);
  swift_retain(v2);
  v12 = objc_msgSend(v11, "sharedReachabilityForInternetConnection");
  objc_msgSend(v9, "addObserver:selector:name:object:", v2, "reachabilityChangedWithNotification:", v10, v12);

  swift_release(v2);
  return v2;
}

uint64_t sub_100273A78()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 48), -1, -1);

  swift_bridgeObjectRelease();
  sub_10027B508(*(void **)(v0 + 56), *(_BYTE *)(v0 + 64));

  sub_1000A5C24(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return v0;
}

uint64_t sub_100273AD0()
{
  uint64_t v0;

  sub_100273A78();
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for RDMigrationClient()
{
  return objc_opt_self(_TtC7remindd17RDMigrationClient);
}

uint64_t storeEnumTagSinglePayload for RDMigrationClient.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100273B5C + 4 * byte_1006B1CB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100273B90 + 4 * byte_1006B1CB0[v4]))();
}

uint64_t sub_100273B90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100273B98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100273BA0);
  return result;
}

uint64_t sub_100273BAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100273BB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100273BB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100273BC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDMigrationClient.State()
{
  return &type metadata for RDMigrationClient.State;
}

unint64_t sub_100273BE0()
{
  unint64_t result;

  result = qword_1008426D0;
  if (!qword_1008426D0)
  {
    result = swift_getWitnessTable(&unk_1006B1DF0, &type metadata for RDMigrationClient.State);
    atomic_store(result, (unint64_t *)&qword_1008426D0);
  }
  return result;
}

uint64_t sub_100273C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t KeyPath;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v23;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v2 + 16);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "newBackgroundContextWithAuthor:", v9);

  KeyPath = swift_getKeyPath(&unk_1006B1E38);
  v12 = objc_msgSend(*(id *)(v2 + 24), "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 0, 1, v13);
  v14 = (void *)sub_1002E8984(KeyPath, (uint64_t)v7);
  swift_release(KeyPath);
  v15 = (_QWORD *)swift_allocObject(&unk_1007EB760, 48, 7);
  v15[2] = v10;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  v16 = swift_allocObject(&unk_1007EB788, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_10027B378;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = sub_1000098E4;
  v23 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007EB7A0;
  v17 = _Block_copy(aBlock);
  v18 = v23;
  v19 = v14;
  swift_retain(v16);
  v20 = v10;
  swift_release(v18);
  objc_msgSend(v20, "performBlockAndWait:", v17);

  _Block_release(v17);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v16, "", 99, 236, 28, 1);
  swift_release(v15);
  result = swift_release(v16);
  if ((v20 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100273E5C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v6 = sub_1000151B0(0, (unint64_t *)&unk_100846BE0, off_1007D66E8);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "entity");
  objc_msgSend(v7, "setEntity:", v8);

  objc_msgSend(v7, "setAffectedStores:", 0);
  objc_msgSend(v7, "setPredicate:", a2);
  v9 = NSManagedObjectContext.fetch<A>(_:)(v7, v6);

  if (!((unint64_t)v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease(v9);
    v11 = 0;
    goto LABEL_7;
  }
  if (v9 < 0)
    v12 = v9;
  else
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v13 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease(v9);
  if (!v13)
    goto LABEL_12;
LABEL_3:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v9 + 32);
LABEL_6:
    v14 = v10;
    swift_bridgeObjectRelease(v9);
    v11 = v14;
LABEL_7:
    v15 = v11;
    a3(a1);

    return;
  }
  __break(1u);
}

void sub_10027400C(uint64_t a1, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = a2;
    sub_1002722CC(v2);

  }
}

void sub_100274048(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  id v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  NSString v32;
  double v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  void *v42;
  uint8_t *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  os_log_t v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  Class isa;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  _QWORD v104[2];
  void *v105;
  os_log_t v106;
  void *v107;
  void *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  char v118[16];
  id v119;
  _QWORD v120[2];

  v111 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v111);
  v7 = (char *)v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  v9 = __chkstk_darwin(v8);
  v110 = (uint64_t)v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v104 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)v104 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v113 = (char *)v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v17;
  v115 = a3;
  v112 = a1;
  if (a2)
  {
    v19 = a2;
  }
  else
  {
    v108 = 0;
    v20 = objc_msgSend(objc_allocWithZone((Class)REMCDMigrationState), "initWithContext:", a1);
    v21 = *(void (**)(char *, uint64_t))(a3 + 16);
    v22 = *(void **)(a3 + 24);
    v109 = v21;
    v23 = a1;
    v24 = v20;
    v107 = v22;
    v25 = objc_msgSend(v22, "uuid");
    v26 = v113;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

    UUID.uuidString.getter(v27);
    v28 = v17;
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v28 + 8);
    v31(v26, v16);
    v32 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v33 = swift_bridgeObjectRelease(v30).n128_u64[0];
    v34 = objc_msgSend(v109, "storeForAccountIdentifier:", v32, v33);

    if (v34)
    {
      objc_msgSend(v23, "assignObject:toPersistentStore:", v24, v34);

      v19 = v24;
      a3 = v115;
    }
    else
    {
      v109 = v31;
      v35 = v107;

      v19 = v24;
      if (qword_100837090 != -1)
        swift_once(&qword_100837090, sub_1002714E8);
      v36 = type metadata accessor for Logger(0);
      sub_10001AAA8(v36, (uint64_t)qword_100842590);
      v37 = v115;
      v38 = swift_retain_n(v115, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        v42 = v35;
        v106 = v39;
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = (void *)swift_slowAlloc(32, -1);
        v119 = v105;
        *(_DWORD *)v43 = 136446210;
        v104[1] = v43 + 4;
        v44 = objc_msgSend(v42, "uuid");
        LODWORD(v107) = v41;
        v45 = v113;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

        v47 = UUID.uuidString.getter(v46);
        v48 = v19;
        v50 = v49;
        v109(v45, v16);
        v116 = sub_10001A820(v47, v50, (uint64_t *)&v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);
        a3 = v115;
        swift_release_n(v115, 2);
        v51 = v50;
        v19 = v48;
        swift_bridgeObjectRelease(v51);
        v52 = v106;
        _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v107, "Can't find CoreData store for saving CloudKit account migration state {accountID: %{public}s}", v43, 0xCu);
        v53 = v105;
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_release_n(v37, 2);
        a3 = v37;
      }
    }
    v17 = v114;
    a2 = v108;
  }
  v54 = a2;
  v55 = objc_msgSend(v19, "accountIdentifier");
  if (v55)
  {
    v56 = v55;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v57(v15, 0, 1, v16);
  }
  else
  {
    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v57(v15, 1, 1, v16);
  }
  v58 = *(void **)(a3 + 24);
  v59 = objc_msgSend(v58, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

  v57(v13, 0, 1, v16);
  v60 = (uint64_t)&v7[*(int *)(v111 + 48)];
  sub_100008868((uint64_t)v15, (uint64_t)v7, (uint64_t *)&unk_100839C80);
  sub_100008868((uint64_t)v13, v60, (uint64_t *)&unk_100839C80);
  v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v61((uint64_t)v7, 1, v16) == 1)
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v62 = v61(v60, 1, v16);
    v63 = v114;
    if (v62 == 1)
    {
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100839C80);
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  v64 = v110;
  sub_100008868((uint64_t)v7, v110, (uint64_t *)&unk_100839C80);
  if (v61(v60, 1, v16) == 1)
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v63 = v114;
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v64, v16);
LABEL_19:
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_10083B370);
LABEL_20:
    v65 = objc_msgSend(v58, "uuid");
    v66 = v113;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v65);

    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v16);
    objc_msgSend(v19, "setAccountIdentifier:", isa);

    goto LABEL_21;
  }
  v111 = (uint64_t)v19;
  v76 = v113;
  v77 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v113, v60, v16);
  v78 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LODWORD(v109) = dispatch thunk of static Equatable.== infix(_:_:)(v64, v76, v16, v78);
  v79 = *(void (**)(char *, uint64_t))(v77 + 8);
  v79(v76, v16);
  sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
  sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
  v79((char *)v64, v16);
  v63 = v77;
  v19 = (void *)v111;
  sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100839C80);
  if ((v109 & 1) == 0)
    goto LABEL_20;
LABEL_21:
  v68 = objc_msgSend(v19, "state");
  v69 = v115;
  if (v68 != *(unsigned __int8 *)(v115 + 32))
    objc_msgSend(v19, "setState:");
  v70 = *(_QWORD *)(v69 + 72);
  v71 = v112;
  if (v70 < -32768)
  {
    LOWORD(v70) = 0x8000;
  }
  else
  {
    if (v70 < 0x8000)
      goto LABEL_25;
    LOWORD(v70) = 0x7FFF;
  }
  v92 = v112;
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v93 = type metadata accessor for Logger(0);
  sub_10001AAA8(v93, (uint64_t)qword_100842590);
  v69 = v115;
  v94 = swift_retain(v115);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.default.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v97 = 134217984;
    v119 = *(id *)(v69 + 72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_release(v69);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "RDMigrationClient.saveState() clamping invocationCount: %ld", v97, 0xCu);
    swift_slowDealloc(v97, -1, -1);

  }
  else
  {

    swift_release(v69);
  }
  v71 = v92;
LABEL_25:
  if ((unsigned __int16)objc_msgSend(v19, "retryCount") != (unsigned __int16)v70)
    objc_msgSend(v19, "setRetryCount:", (__int16)v70);
  v72 = *(_QWORD *)(v69 + 80);
  if (v72 < -32768)
  {
    LOWORD(v72) = 0x8000;
  }
  else
  {
    if (v72 < 0x8000)
      goto LABEL_29;
    LOWORD(v72) = 0x7FFF;
  }
  v98 = v71;
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v99 = type metadata accessor for Logger(0);
  sub_10001AAA8(v99, (uint64_t)qword_100842590);
  v69 = v115;
  v100 = swift_retain(v115);
  v101 = Logger.logObject.getter(v100);
  v102 = static os_log_type_t.default.getter(v101);
  if (os_log_type_enabled(v101, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v103 = 134217984;
    v119 = *(id *)(v69 + 80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_release(v69);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "RDMigrationClient.saveState() clamping failureCount: %ld", v103, 0xCu);
    swift_slowDealloc(v103, -1, -1);

  }
  else
  {

    swift_release(v69);
  }
  v71 = v98;
LABEL_29:
  if ((unsigned __int16)objc_msgSend(v19, "failureCount") != (unsigned __int16)v72)
    objc_msgSend(v19, "setFailureCount:", (__int16)v72);
  if (objc_msgSend(v19, "isTerminated") != *(unsigned __int8 *)(v69 + 88))
    objc_msgSend(v19, "setIsTerminated:");
  if (!objc_msgSend(v71, "hasChanges"))
    goto LABEL_36;
  v119 = 0;
  v73 = objc_msgSend(v71, "save:", &v119);
  v74 = v119;
  if (v73)
  {
    v75 = v119;
LABEL_36:

    return;
  }
  v80 = v119;
  v81 = _convertNSErrorToError(_:)(v74);

  swift_willThrow(v82);
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v83 = type metadata accessor for Logger(0);
  sub_10001AAA8(v83, (uint64_t)qword_100842590);
  swift_errorRetain(v81);
  v84 = swift_errorRetain(v81);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v88 = (void *)swift_slowAlloc(32, -1);
    v119 = v88;
    *(_DWORD *)v87 = 136446210;
    swift_getErrorValue(v81, v118, v117);
    v89 = Error.localizedDescription.getter(v117[1], v117[2]);
    v91 = v90;
    v116 = sub_10001A820(v89, v90, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);
    swift_bridgeObjectRelease(v91);
    swift_errorRelease(v81);
    swift_errorRelease(v81);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Failed saving migration state {error: %{public}s}", v87, 0xCu);
    swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v87, -1, -1);

    swift_errorRelease(v81);
  }
  else
  {

    swift_errorRelease(v81);
    swift_errorRelease(v81);
    swift_errorRelease(v81);

  }
}

void sub_100274C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  _QWORD *v33;
  unint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 88) == 1)
  {
    type metadata accessor for Analytics(0, v3);
    static Analytics.postEvent(_:payload:duration:)(0xD000000000000032, 0x80000001006FE690, 0, 0, 1);
    v6 = 0xD000000000000039;
    v7 = "re-create CalDAV account object and hide CloudKit account";
  }
  else
  {
    v6 = 0xD00000000000003BLL;
    v7 = "re-enable CloudKit account object and delete CalDAV account";
  }
  v8 = (unint64_t)(v7 - 32) | 0x8000000000000000;
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_100842590);
  swift_bridgeObjectRetain_n(v8, 2);
  v11 = swift_retain_n(v1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v43 = v6;
  v44 = v8;
  if (v14)
  {
    v15 = swift_slowAlloc(22, -1);
    v42[1] = v10;
    v16 = v15;
    v17 = swift_slowAlloc(64, -1);
    v48 = v17;
    *(_DWORD *)v16 = 136446466;
    swift_bridgeObjectRetain(v8);
    v47 = sub_10001A820(v6, v8, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v16 + 12) = 2082;
    v18 = objc_msgSend(*(id *)(v1 + 24), "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = UUID.uuidString.getter(v19);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v46);
    v47 = sub_10001A820(v20, v22, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountUtils will %{public}s {accountID: %{public}s}", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
    swift_bridgeObjectRelease_n(v8, 2);
  }
  v23 = objc_msgSend(*(id *)(v1 + 16), "accountUtils");
  if (v23)
  {
    v24 = v23;
    v25 = *(void **)(v1 + 24);
    v26 = objc_msgSend(v25, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = UUID.uuidString.getter(v27);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v46);
    v31 = *(_BYTE *)(v1 + 88) ^ 1;
    if (qword_100836F28 != -1)
      swift_once(&qword_100836F28, sub_1001BA8F8);
    v32 = (void *)qword_100871CE8;
    v33 = (_QWORD *)swift_allocObject(&unk_1007EB828, 40, 7);
    v34 = v44;
    v33[2] = v43;
    v33[3] = v34;
    v33[4] = v25;
    v35 = v25;
    sub_100546138(v28, v30, v31 & 1, 0, 1, v32, (uint64_t)sub_10027B480, (uint64_t)v33);
    swift_bridgeObjectRelease(v30);
    swift_release(v33);
    swift_release(v24);
  }
  else
  {
    v36 = v44;
    swift_bridgeObjectRetain(v44);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v48 = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(v36);
      v47 = sub_10001A820(v43, v36, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No RDAccountUtils is found. Unable to %{public}s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v36, 2);
    }
  }
}

void sub_100275188(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v12 = type metadata accessor for Logger(0);
    sub_10001AAA8(v12, (uint64_t)qword_100842590);
    v13 = a4;
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    v40 = v13;
    swift_bridgeObjectRetain(a3);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(32, -1);
      v18 = swift_slowAlloc(96, -1);
      v39 = v8;
      v19 = v18;
      v42 = v18;
      *(_DWORD *)v17 = 136446722;
      swift_bridgeObjectRetain(a3);
      v41 = sub_10001A820(a2, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v17 + 12) = 2082;
      v41 = a1;
      swift_errorRetain(a1);
      v20 = sub_10001A630(&qword_10083C158);
      v21 = String.init<A>(describing:)(&v41, v20);
      v23 = v22;
      v41 = sub_10001A820(v21, v22, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v17 + 22) = 2082;
      v24 = objc_msgSend(v40, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v39);
      v41 = sub_10001A820(v26, v28, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to %{public}s {error: %{public}s, accountID: %{public}s}", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v29 = v17;
LABEL_10:
      swift_slowDealloc(v29, -1, -1);

      return;
    }
    swift_bridgeObjectRelease_n(a3, 2);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100842590);
    v40 = a4;
    v15 = Logger.logObject.getter(v40);
    v31 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v42 = v33;
      *(_DWORD *)v32 = 136446210;
      v34 = objc_msgSend(v40, "uuid", v32 + 4);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v41 = sub_10001A820(v36, v38, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);

      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v15, v31, "Reloaded accounts succesfully {accountID: %{public}s}", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      v29 = (uint64_t)v32;
      goto LABEL_10;
    }
  }

}

double sub_10027565C(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  id v45;
  _QWORD *v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(uint64_t *);
  double result;
  uint64_t v56;
  os_log_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  _QWORD v61[3];
  char v62[8];
  uint64_t v63;
  BOOL v64[8];
  uint64_t v65[3];

  v3 = v2;
  v6 = a2 & 1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = a1;
  v12 = *(_BYTE *)(v3 + 64);
  *(_BYTE *)(v3 + 64) = v6;
  sub_10027B508(v11, v12);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100842590);
    sub_10013D030(a1, 1);
    swift_retain(v3);
    sub_10013D030(a1, 1);
    v14 = swift_retain(v3);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(64, -1);
      v65[0] = v60;
      *(_DWORD *)v18 = 136446466;
      v58 = (_QWORD *)(v18 + 4);
      v19 = objc_msgSend(*(id *)(v3 + 24), "uuid");
      v59 = v17;
      v20 = v19;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v22 = UUID.uuidString.getter(v21);
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v63 = sub_10001A820(v22, v24, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v18 + 12) = 2082;
      swift_getErrorValue(a1, v62, v61);
      v25 = Error.rem_errorDescription.getter(v61[1], v61[2]);
      v27 = v26;
      v63 = sub_10001A820(v25, v26, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
      swift_bridgeObjectRelease(v27);
      sub_1001172E0(a1, 1);
      sub_1001172E0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v59, "Completing migration {accountID: %{public}s, error: %{public}s}", (uint8_t *)v18, 0x16u);
      v28 = v60;
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_1001172E0(a1, 1);
    }
    else
    {
      sub_1001172E0(a1, 1);
      swift_release_n(v3, 2);
      sub_1001172E0(a1, 1);
      sub_1001172E0(a1, 1);

    }
    v44 = 3;
  }
  else
  {
    v29 = qword_100837090;
    v30 = a1;
    if (v29 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100842590);
    sub_10013D030(a1, 0);
    swift_retain(v3);
    sub_10013D030(a1, 0);
    v32 = swift_retain(v3);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      v36 = swift_slowAlloc(22, -1);
      v59 = v35;
      v37 = v36;
      v58 = (_QWORD *)swift_slowAlloc(8, -1);
      v60 = swift_slowAlloc(32, -1);
      v65[0] = v60;
      *(_DWORD *)v37 = 136446466;
      v56 = v37 + 4;
      v38 = objc_msgSend(*(id *)(v3 + 24), "uuid", v37 + 4);
      v57 = v33;
      v39 = v38;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

      v41 = UUID.uuidString.getter(v40);
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v63 = sub_10001A820(v41, v43, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
      v44 = 2;
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v37 + 12) = 2114;
      v63 = (uint64_t)v30;
      v45 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
      v46 = v58;
      *v58 = a1;
      sub_1001172E0(a1, 0);
      sub_1001172E0(a1, 0);
      v47 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v59, "Completing migration {accountID: %{public}s, result: %{public}@}", (uint8_t *)v37, 0x16u);
      v48 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v46, 1, v48);
      swift_slowDealloc(v46, -1, -1);
      v49 = v60;
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      sub_1001172E0(a1, 0);
    }
    else
    {
      sub_1001172E0(a1, 0);
      v44 = 2;
      swift_release_n(v3, 2);
      sub_1001172E0(a1, 0);
      sub_1001172E0(a1, 0);

    }
  }
  *(_BYTE *)(v3 + 32) = v44;
  sub_100273C24((uint64_t)sub_10027B418, v3);
  swift_beginAccess(v3 + 40, v65, 1, 0);
  v50 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = _swiftEmptyArrayStorage;
  v51 = *(_QWORD *)(v50 + 16);
  if (v51)
  {
    v52 = (uint64_t *)(v50 + 40);
    do
    {
      v54 = (void (*)(uint64_t *))*(v52 - 1);
      v53 = *v52;
      v63 = (uint64_t)a1;
      v64[0] = v6 != 0;
      swift_retain(v53);
      v54(&v63);
      swift_release(v53);
      v52 += 2;
      --v51;
    }
    while (v51);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v50).n128_u64[0];
  return result;
}

uint64_t sub_100275C9C(uint64_t a1, void (*a2)(uint64_t, uint64_t, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;
  NSString v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  unint64_t v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  unint64_t v34;
  unint64_t v35;

  v4 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A630(&qword_100838598);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UnmigrateResponse(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_1008426F8);
  __chkstk_darwin(v16);
  v18 = (unint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v18, &qword_1008426F8);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v19 = *v18;
    swift_errorRetain(*v18);
    a2(0, v19, 0.0);
    swift_errorRelease(v19);
    return swift_errorRelease(v19);
  }
  else
  {
    sub_1000B8680((uint64_t)v18, (uint64_t)v15, type metadata accessor for UnmigrateResponse);
    sub_100008868((uint64_t)v15, (uint64_t)v12, &qword_100838598);
    v21 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v12, 1, v21) == 1)
    {
      v22 = (void *)objc_opt_self(REMError);
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "internalErrorWithDebugDescription:", v23);

      a2(0, (uint64_t)v24, 0.0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload(v12, v21) == 1)
      {
        sub_1000B8680((uint64_t)v12, (uint64_t)v6, type metadata accessor for UnmigrateResponse.Error);
        v25 = (void *)objc_opt_self(REMError);
        v34 = 0;
        v35 = 0xE000000000000000;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease(v35);
        v34 = 0xD000000000000024;
        v35 = 0x80000001006FE710;
        v26 = *v6;
        v27 = (void *)v6[1];
        swift_bridgeObjectRetain(v27);
        v28._countAndFlagsBits = v26;
        v28._object = v27;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(v27);
        v29 = v35;
        v30 = String._bridgeToObjectiveC()();
        v31 = objc_msgSend(v25, "internalErrorWithDebugDescription:", v30, swift_bridgeObjectRelease(v29).n128_f64[0]);

        a2(0, (uint64_t)v31, 0.0);
        v32 = (uint64_t)v6;
        v33 = type metadata accessor for UnmigrateResponse.Error;
      }
      else
      {
        sub_1000B8680((uint64_t)v12, (uint64_t)v9, type metadata accessor for UnmigrateResponse.Details);
        a2(1, 0, *v9);
        v32 = (uint64_t)v9;
        v33 = type metadata accessor for UnmigrateResponse.Details;
      }
      sub_10001C744(v32, v33);
    }
    return sub_10001C744((uint64_t)v15, type metadata accessor for UnmigrateResponse);
  }
}

void sub_100276058(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  objc_class *v7;
  objc_class *v8;
  uint64_t v9;
  uint64_t inited;
  unint64_t v11;
  id v12;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  Class v16;
  char v17;
  Class v18;
  char v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _BYTE v27[80];

  v5 = a2 & 1;
  v6 = *(os_unfair_lock_s **)(v2 + 48);
  os_unfair_lock_lock(v6);
  v7 = Int._bridgeToObjectiveC()().super.super.isa;
  v8 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_10027565C(a1, v5);
  os_unfair_lock_unlock(v6);
  v9 = sub_10001A630((uint64_t *)&unk_10083A260);
  inited = swift_initStackObject(v9, v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  strcpy((char *)(inited + 32), "failureCount");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = 0x697461636F766E69;
  *(_QWORD *)(inited + 64) = 0xEF746E756F436E6FLL;
  *(_QWORD *)(inited + 72) = v7;
  v11 = sub_1002AF09C(inited);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v26 = 0;
    goto LABEL_5;
  }
  v12 = a1;
  objc_msgSend(v12, "remindersMigrated");
  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  sub_10028D168((uint64_t)isa, 0xD000000000000011, 0x80000001006FE540, isUniquelyReferenced_nonNull_native);
  v15 = v11;
  objc_msgSend(v12, "listsMigrated", swift_bridgeObjectRelease(0x8000000000000000).n128_f64[0]);
  v16 = UInt._bridgeToObjectiveC()().super.super.isa;
  v17 = swift_isUniquelyReferenced_nonNull_native(v15);
  sub_10028D168((uint64_t)v16, 0x67694D737473696CLL, 0xED00006465746172, v17);
  objc_msgSend(v12, "isObserver", swift_bridgeObjectRelease(0x8000000000000000).n128_f64[0]);
  v18 = Bool._bridgeToObjectiveC()().super.super.isa;
  v19 = swift_isUniquelyReferenced_nonNull_native(v15);
  sub_10028D168((uint64_t)v18, 0x76726573624F7369, 0xEA00000000007265, v19);
  v20 = objc_msgSend(v12, "state", swift_bridgeObjectRelease(0x8000000000000000).n128_f64[0]);
  if (v20)
  {
    v21 = (uint64_t)v20;
    v22 = swift_isUniquelyReferenced_nonNull_native(v15);
    sub_10028D168(v21, 0x6574617473, 0xE500000000000000, v22);
    v11 = v15;
    objc_msgSend(v12, "timeElapsed", swift_bridgeObjectRelease(0x8000000000000000).n128_f64[0]);
    v24 = v23;
    sub_1001172E0(a1, 0);
    a1 = 0;
    v26 = v24;
LABEL_5:
    type metadata accessor for Analytics(0, v25);
    static Analytics.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)(0xD00000000000002CLL, 0x80000001006FE510, v11, v26, v5, a1, 1);
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(v11);

    return;
  }
  __break(1u);
}

BOOL sub_100276368()
{
  uint64_t v0;
  uint64_t v1;
  void *ObjCClassFromMetadata;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;

  v1 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v3 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v4 = objc_msgSend(v3, "cloudKitMigrationMaxNumInvocations");

  if (v4)
  {
    v5 = (uint64_t)objc_msgSend(v4, "integerValue");

  }
  else
  {
    v5 = 50;
  }
  v6 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v7 = objc_msgSend(v6, "cloudKitMigrationMaxNumFailures");

  if (v7)
  {
    v8 = (uint64_t)objc_msgSend(v7, "integerValue");

  }
  else
  {
    v8 = 10;
  }
  return *(_QWORD *)(v0 + 72) >= v5 || *(_QWORD *)(v0 + 80) >= v8;
}

void sub_10027647C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v27 - v17;
  if ((a2 & 1) != 0)
  {
    v26 = *(os_unfair_lock_s **)(v2 + 48);
    os_unfair_lock_lock(v26);
    sub_10027234C(0);
    os_unfair_lock_unlock(v26);
  }
  else
  {
    v19 = *(void **)(v2 + 24);
    if (qword_100836F10 != -1)
      v16 = swift_once(&qword_100836F10, sub_1001BA718);
    v27[1] = qword_100871CD0;
    static DispatchTime.now()(v16);
    + infix(_:_:)(v15, *(double *)&a1);
    v20 = *(void (**)(char *, uint64_t))(v12 + 8);
    v20(v15, v11);
    v21 = (_QWORD *)swift_allocObject(&unk_1007EB850, 40, 7);
    v21[2] = v2;
    v21[3] = v19;
    v21[4] = a1;
    aBlock[4] = sub_10027B4B8;
    v33 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007EB868;
    v22 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter(v19);
    v31 = _swiftEmptyArrayStorage;
    v23 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A630((uint64_t *)&unk_100838000);
    v25 = sub_1000C4C0C((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v5, v23);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v10, v7, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
    v20(v18, v11);
    swift_release(v33);
  }
}

void sub_100276774(uint64_t a1, void *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  os_unfair_lock_s *v32;
  _QWORD v33[2];
  uint8_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 90) == 1)
  {
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100842590);
    v35 = a2;
    v11 = Logger.logObject.getter(v35);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v37 = v14;
      *(_DWORD *)v13 = 136446210;
      v34 = v13 + 4;
      v15 = objc_msgSend(v35, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      v17 = UUID.uuidString.getter(v16);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v36 = sub_10001A820(v17, v19, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cancel delayed retry becaue migration client was dismissed {accountID: %{public}s}", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_100842590);
    v21 = a2;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v34 = (uint8_t *)v6;
      v25 = v24;
      v35 = (id)swift_slowAlloc(32, -1);
      v37 = (uint64_t)v35;
      *(_DWORD *)v25 = 134349314;
      v36 = *(_QWORD *)&a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *(_WORD *)(v25 + 12) = 2082;
      v33[1] = v25 + 14;
      v26 = objc_msgSend(v21, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      (*(void (**)(char *, uint8_t *))(v7 + 8))(v9, v34);
      v36 = sub_10001A820(v28, v30, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Retry migration after delay {delay: %{public}f, accountID: %{public}s}", (uint8_t *)v25, 0x16u);
      v31 = v35;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    v32 = *(os_unfair_lock_s **)(a1 + 48);
    os_unfair_lock_lock(v32);
    sub_10027234C(0);
    os_unfair_lock_unlock(v32);
  }
}

void sub_100276BC0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t Step;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  Swift::String v90;
  Swift::String v91;
  void *object;
  Swift::String v93;
  Swift::String v94;
  void *v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  unint64_t v99;
  NSString v100;
  id v101;
  void *v102;
  Swift::String v103;
  Swift::String v104;
  void *v105;
  Swift::String v106;
  Swift::String v107;
  void *v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  unint64_t v112;
  NSString v113;
  id v114;
  _BYTE v115[12];
  int v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;

  LODWORD(v122) = a4;
  v116 = a3;
  v123 = a2;
  v6 = sub_10001A630(&qword_100838590);
  __chkstk_darwin(v6);
  v8 = &v115[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v10 = *(_QWORD *)(Step - 8);
  v11 = __chkstk_darwin(Step);
  v121 = &v115[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v119 = &v115[-v14];
  v15 = __chkstk_darwin(v13);
  v117 = &v115[-v16];
  v17 = __chkstk_darwin(v15);
  v120 = &v115[-v18];
  v19 = __chkstk_darwin(v17);
  v118 = &v115[-v20];
  __chkstk_darwin(v19);
  v22 = &v115[-v21];
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = &v115[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v125 = v4;
  v27 = objc_msgSend(*(id *)(v4 + 24), "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v124 = UUID.uuidString.getter(v28);
  v30 = v29;
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v26, v23);
  sub_100008868(a1, (uint64_t)v8, &qword_100838590);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Step) != 1)
  {
    sub_1000B8680((uint64_t)v8, (uint64_t)v22, type metadata accessor for MigrateResponse.NextStep);
    v37 = (uint64_t)v22;
    if (v22[1] == 1)
    {
      v40 = v124;
      if (qword_100837090 != -1)
        swift_once(&qword_100837090, sub_1002714E8);
      v41 = type metadata accessor for Logger(0);
      sub_10001AAA8(v41, (uint64_t)qword_100842590);
      v42 = (uint64_t)v22;
      v43 = v118;
      sub_1000151E8(v42, (uint64_t)v118, type metadata accessor for MigrateResponse.NextStep);
      v44 = v120;
      sub_1000151E8(v37, (uint64_t)v120, type metadata accessor for MigrateResponse.NextStep);
      v45 = swift_bridgeObjectRetain_n(v30, 2);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(24, -1);
        v123 = swift_slowAlloc(32, -1);
        v126 = v123;
        *(_DWORD *)v48 = 136446722;
        swift_bridgeObjectRetain(v30);
        v128 = sub_10001A820(v40, (unint64_t)v30, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
        swift_bridgeObjectRelease_n(v30, 3);
        *(_WORD *)(v48 + 12) = 1026;
        v49 = v30;
        v50 = *((_DWORD *)v43 + 2);
        sub_10001C744((uint64_t)v43, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v128) = v50;
        v30 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 4);
        *(_WORD *)(v48 + 18) = 1026;
        v51 = *((_DWORD *)v44 + 3);
        sub_10001C744((uint64_t)v44, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v128) = v51;
        v40 = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 4);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Server terminated migration after too many retries {accountID: %{public}s, invocationCount: %{public}d, failureCount: %{public}d}", (uint8_t *)v48, 0x18u);
        v52 = v123;
        swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {
        sub_10001C744((uint64_t)v44, type metadata accessor for MigrateResponse.NextStep);
        sub_10001C744((uint64_t)v43, type metadata accessor for MigrateResponse.NextStep);

        swift_bridgeObjectRelease_n(v30, 2);
      }
      v88 = v125;
      v89 = (void *)objc_opt_self(REMError);
      v126 = 0;
      v127 = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v90._countAndFlagsBits = 0xD000000000000022;
      v90._object = (void *)0x80000001006FE5E0;
      String.append(_:)(v90);
      LODWORD(v128) = *(_DWORD *)(v37 + 8);
      v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      object = v91._object;
      String.append(_:)(v91);
      swift_bridgeObjectRelease(object);
      v93._object = (void *)0x80000001006FE590;
      v93._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v93);
      LODWORD(v128) = *(_DWORD *)(v37 + 12);
      v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v95 = v94._object;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v95);
      v96._countAndFlagsBits = 0xD000000000000024;
      v96._object = (void *)0x80000001006FE5B0;
      String.append(_:)(v96);
      v97._countAndFlagsBits = v40;
      v97._object = v30;
      String.append(_:)(v97);
      swift_bridgeObjectRelease(v30);
      v98._countAndFlagsBits = 46;
      v98._object = (void *)0xE100000000000000;
      String.append(_:)(v98);
      v99 = v127;
      v100 = String._bridgeToObjectiveC()();
      v101 = objc_msgSend(v89, "internalErrorWithDebugDescription:", v100, swift_bridgeObjectRelease(v99).n128_f64[0]);

      *(_BYTE *)(v88 + 88) = 1;
      sub_100273C24((uint64_t)sub_10027B418, v88);
      sub_100276058(v101, 1);
      sub_100274C5C();

      goto LABEL_29;
    }
    if (qword_100837090 == -1)
    {
LABEL_19:
      v64 = type metadata accessor for Logger(0);
      sub_10001AAA8(v64, (uint64_t)qword_100842590);
      v65 = v117;
      sub_1000151E8(v37, (uint64_t)v117, type metadata accessor for MigrateResponse.NextStep);
      v66 = v119;
      sub_1000151E8(v37, (uint64_t)v119, type metadata accessor for MigrateResponse.NextStep);
      v67 = v121;
      sub_1000151E8(v37, (uint64_t)v121, type metadata accessor for MigrateResponse.NextStep);
      swift_bridgeObjectRetain(v30);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(30, -1);
        v122 = swift_slowAlloc(32, -1);
        v126 = v122;
        *(_DWORD *)v71 = 67240962;
        v72 = *((_DWORD *)v65 + 1);
        sub_10001C744((uint64_t)v65, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v128) = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 4);
        *(_WORD *)(v71 + 8) = 1026;
        v123 = v37;
        v73 = (unint64_t)v30;
        v74 = *((_DWORD *)v66 + 2);
        sub_10001C744((uint64_t)v66, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v128) = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 4);
        *(_WORD *)(v71 + 14) = 1026;
        v75 = *((_DWORD *)v67 + 3);
        sub_10001C744((uint64_t)v67, type metadata accessor for MigrateResponse.NextStep);
        LODWORD(v128) = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 4);
        *(_WORD *)(v71 + 20) = 2082;
        swift_bridgeObjectRetain(v73);
        v128 = sub_10001A820(v124, v73, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
        v76 = v73;
        v37 = v123;
        swift_bridgeObjectRelease_n(v76, 3);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Server instructed to retry migration {delay: %{public}d, invocationCount: %{public}d, failureCount: %{public}d, accountID: %{public}s}", (uint8_t *)v71, 0x1Eu);
        v77 = v122;
        swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v71, -1, -1);

      }
      else
      {
        sub_10001C744((uint64_t)v67, type metadata accessor for MigrateResponse.NextStep);
        sub_10001C744((uint64_t)v66, type metadata accessor for MigrateResponse.NextStep);
        sub_10001C744((uint64_t)v65, type metadata accessor for MigrateResponse.NextStep);

        swift_bridgeObjectRelease_n(v30, 2);
      }
      sub_10027647C(COERCE__INT64((double)*(int *)(v37 + 4)), 0);
LABEL_29:
      sub_10001C744(v37, type metadata accessor for MigrateResponse.NextStep);
      return;
    }
LABEL_35:
    swift_once(&qword_100837090, sub_1002714E8);
    goto LABEL_19;
  }
  sub_10000882C((uint64_t)v8, &qword_100838590);
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_100842590);
  v32 = swift_bridgeObjectRetain_n(v30, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v36 = v124;
  v37 = v125;
  if (v35)
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v126 = v39;
    *(_DWORD *)v38 = 136446210;
    swift_bridgeObjectRetain(v30);
    v128 = sub_10001A820(v36, (unint64_t)v30, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
    swift_bridgeObjectRelease_n(v30, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No next-step info from Server. Client will fallback to handle retry by itself {accountID: %{public}s}", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  v53 = v123;
  if ((v122 & 1) == 0)
    goto LABEL_15;
  v54 = *(_QWORD *)(v37 + 80);
  v55 = __OFADD__(v54, 1);
  v56 = v54 + 1;
  if (v55)
  {
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v37 + 80) = v56;
  sub_100273C24((uint64_t)sub_10027B418, v37);
LABEL_15:
  v57 = sub_100276368();
  swift_retain();
  if (v57)
  {
    swift_bridgeObjectRetain_n(v30, 2);
    v58 = swift_retain();
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(32, -1);
      v62 = swift_slowAlloc(32, -1);
      v126 = v62;
      *(_DWORD *)v61 = 134349570;
      v128 = *(_QWORD *)(v37 + 72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      *(_WORD *)(v61 + 12) = 2050;
      v63 = *(_QWORD *)(v37 + 80);
      swift_release(v37);
      v128 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      swift_release(v37);
      *(_WORD *)(v61 + 22) = 2082;
      swift_bridgeObjectRetain(v30);
      v128 = sub_10001A820(v36, (unint64_t)v30, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Client terminated migration after too many retries {invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}", (uint8_t *)v61, 0x20u);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v30, 2);
      swift_release_n(v37, 2);
    }
    v102 = (void *)objc_opt_self(REMError);
    v126 = 0;
    v127 = 0xE000000000000000;
    _StringGuts.grow(_:)(94);
    v103._countAndFlagsBits = 0xD000000000000022;
    v103._object = (void *)0x80000001006FE560;
    String.append(_:)(v103);
    v128 = *(_QWORD *)(v37 + 72);
    v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v105 = v104._object;
    String.append(_:)(v104);
    swift_bridgeObjectRelease(v105);
    v106._object = (void *)0x80000001006FE590;
    v106._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v106);
    v128 = *(_QWORD *)(v37 + 80);
    v107._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v108 = v107._object;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v108);
    v109._countAndFlagsBits = 0xD000000000000024;
    v109._object = (void *)0x80000001006FE5B0;
    String.append(_:)(v109);
    v110._countAndFlagsBits = v36;
    v110._object = v30;
    String.append(_:)(v110);
    swift_bridgeObjectRelease(v30);
    v111._countAndFlagsBits = 46;
    v111._object = (void *)0xE100000000000000;
    String.append(_:)(v111);
    v112 = v127;
    v113 = String._bridgeToObjectiveC()();
    v114 = objc_msgSend(v102, "internalErrorWithDebugDescription:", v113, swift_bridgeObjectRelease(v112).n128_f64[0]);

    *(_BYTE *)(v37 + 88) = 1;
    sub_100273C24((uint64_t)sub_10027B418, v37);
    sub_100276058(v114, 1);
    sub_100274C5C();

  }
  else
  {
    v78 = v116 & 1;
    swift_retain();
    swift_bridgeObjectRetain(v30);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter(v80);
    if (os_log_type_enabled(v80, v81))
    {
      v82 = swift_slowAlloc(42, -1);
      v83 = swift_slowAlloc(32, -1);
      v126 = v83;
      *(_DWORD *)v82 = 134349826;
      v84 = *(double *)&v53;
      if (v78)
        v84 = 0.0;
      v128 = *(_QWORD *)&v84;
      LODWORD(v122) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      *(_WORD *)(v82 + 12) = 2050;
      v128 = *(_QWORD *)(v37 + 72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      *(_WORD *)(v82 + 22) = 2050;
      v85 = v36;
      v86 = *(_QWORD *)(v37 + 80);
      swift_release(v37);
      v128 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      swift_release(v37);
      *(_WORD *)(v82 + 32) = 2082;
      swift_bridgeObjectRetain(v30);
      v87 = v85;
      v53 = v123;
      v128 = sub_10001A820(v87, (unint64_t)v30, &v126);
      LOBYTE(v78) = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Client will retry migration {delay: %{public}f, invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}", (uint8_t *)v82, 0x2Au);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v30, 2);
      swift_release_n(v37, 2);
    }
    sub_10027647C(v53, v78);
  }
}

void sub_100277ADC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Step;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *ObjCClassFromMetadata;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  unint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  int v103;
  unsigned __int8 *v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double *v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  id v152;
  NSString v153;
  NSString v154;
  id v155;
  id v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _WORD *v171;
  uint64_t *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  uint64_t v191;
  uint64_t v192[2];

  v3 = v2;
  v190 = a2;
  v184 = a1;
  v4 = type metadata accessor for MigrateResponse.Error(0);
  v5 = __chkstk_darwin(v4);
  v172 = (uint64_t *)((char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v176 = (uint64_t)&v167 - v7;
  v169 = type metadata accessor for REMMigrationResultState(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MigrateResponse.Details(0);
  __chkstk_darwin(v9);
  v177 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Step = type metadata accessor for MigrateResponse.NextStep(0);
  v187 = *(_QWORD *)(Step - 8);
  v188 = Step;
  __chkstk_darwin(Step);
  v174 = (unsigned __int8 *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_100838590);
  v14 = __chkstk_darwin(v13);
  v186 = (char *)&v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v170 = (uint64_t)&v167 - v17;
  v18 = __chkstk_darwin(v16);
  v171 = (_WORD *)((char *)&v167 - v19);
  v20 = __chkstk_darwin(v18);
  v173 = (uint64_t)&v167 - v21;
  __chkstk_darwin(v20);
  v181 = (uint64_t)&v167 - v22;
  v23 = sub_10001A630(&qword_100838588);
  __chkstk_darwin(v23);
  v179 = (uint64_t)&v167 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  v178 = *(_QWORD *)(v182 - 8);
  v25 = __chkstk_darwin(v182);
  v175 = (uint64_t)&v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v180 = (uint64_t)&v167 - v27;
  v28 = type metadata accessor for JSONEncodingOptions(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A630(&qword_1008426E0);
  __chkstk_darwin(v32);
  v34 = (char *)&v167 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for MigrateResponse(0);
  v35 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (uint64_t *)((char *)&v167 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (char *)&v167 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = objc_msgSend(*(id *)(v3 + 24), "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

  v189 = UUID.uuidString.getter(v42);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  if (*(_BYTE *)(v3 + 90) != 1)
  {
    v52 = v44;
    v53 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v53);
    v55 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
    v56 = objc_msgSend(v55, "cloudKitMigrationDelayAfterError");

    if (v56)
    {
      objc_msgSend(v56, "doubleValue");
      v58 = v57;

    }
    else
    {
      v58 = 1.0;
    }
    v59 = v52;
    if (v190)
    {
      if (qword_100837090 != -1)
        swift_once(&qword_100837090, sub_1002714E8);
      v60 = type metadata accessor for Logger(0);
      sub_10001AAA8(v60, (uint64_t)qword_100842590);
      swift_bridgeObjectRetain(v52);
      v61 = v190;
      v62 = swift_errorRetain(v190);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc(22, -1);
        v66 = (uint64_t *)swift_slowAlloc(8, -1);
        v185 = swift_slowAlloc(32, -1);
        v192[0] = v185;
        *(_DWORD *)v65 = 138543618;
        v67 = _convertErrorToNSError(_:)(v61);
        v191 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        *v66 = v67;
        swift_errorRelease(v61);
        *(_WORD *)(v65 + 12) = 2082;
        swift_bridgeObjectRetain(v52);
        v191 = sub_10001A820(v189, v52, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        swift_bridgeObjectRelease_n(v52, 3);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Migrate request failed {error: %{public}@, accountID: %{public}s}", (uint8_t *)v65, 0x16u);
        v68 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v66, 1, v68);
        swift_slowDealloc(v66, -1, -1);
        v69 = v185;
        swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
        v70 = v69;
LABEL_24:
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v65, -1, -1);

LABEL_26:
        v86 = (uint64_t)v186;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v187 + 56))(v186, 1, 1, v188, v85);
        sub_100276BC0(v86, v58, 0, 1);
        sub_10000882C(v86, &qword_100838590);
        return;
      }
      swift_errorRelease(v61);
      goto LABEL_25;
    }
    sub_100008868(v184, (uint64_t)v34, &qword_1008426E0);
    v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    v72 = v185;
    if (v71(v34, 1, v185) == 1)
    {
      sub_10000882C((uint64_t)v34, &qword_1008426E0);
      goto LABEL_20;
    }
    v190 = ObjCClassFromMetadata;
    v73 = (uint64_t)v183;
    v74 = sub_1000B8680((uint64_t)v34, (uint64_t)v183, type metadata accessor for MigrateResponse);
    JSONEncodingOptions.init()(v74);
    v75 = sub_10009FC50(&qword_100838740, type metadata accessor for MigrateResponse, (uint64_t)&protocol conformance descriptor for MigrateResponse);
    v76 = Message.jsonString(options:)(v31, v72, v75);
    v78 = v77;
    v184 = v76;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    v79 = v179;
    sub_100008868(v73 + *(int *)(v72 + 20), v179, &qword_100838588);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v79, 1, v182) == 1)
    {
      sub_10001C744(v73, type metadata accessor for MigrateResponse);
      swift_bridgeObjectRelease(v78);
      sub_10000882C(v79, &qword_100838588);
      v59 = v52;
LABEL_20:
      if (qword_100837090 != -1)
        swift_once(&qword_100837090, sub_1002714E8);
      v80 = type metadata accessor for Logger(0);
      sub_10001AAA8(v80, (uint64_t)qword_100842590);
      swift_bridgeObjectRetain(v59);
      v63 = Logger.logObject.getter(v81);
      v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v82))
      {
        v65 = swift_slowAlloc(12, -1);
        v83 = v59;
        v84 = swift_slowAlloc(32, -1);
        v192[0] = v84;
        *(_DWORD *)v65 = 136446210;
        swift_bridgeObjectRetain(v83);
        v191 = sub_10001A820(v189, v83, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        swift_bridgeObjectRelease_n(v83, 3);
        _os_log_impl((void *)&_mh_execute_header, v63, v82, "Invalid response from migrate request {accountID: %{public}s}", (uint8_t *)v65, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        v70 = v84;
        goto LABEL_24;
      }
LABEL_25:

      v85 = swift_bridgeObjectRelease_n(v59, 2);
      goto LABEL_26;
    }
    v87 = v180;
    sub_1000B8680(v79, v180, type metadata accessor for MigrateResponse.OneOf_Result);
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v88 = type metadata accessor for Logger(0);
    v89 = sub_10001AAA8(v88, (uint64_t)qword_100842590);
    swift_bridgeObjectRetain_n(v52, 2);
    swift_bridgeObjectRetain(v78);
    v186 = (char *)v89;
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.default.getter(v91);
    if (os_log_type_enabled(v91, v92))
    {
      v93 = swift_slowAlloc(22, -1);
      v94 = swift_slowAlloc(64, -1);
      v192[0] = v94;
      *(_DWORD *)v93 = 136446466;
      swift_bridgeObjectRetain(v78);
      v191 = sub_10001A820(v184, v78, v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
      swift_bridgeObjectRelease_n(v78, 3);
      *(_WORD *)(v93 + 12) = 2082;
      swift_bridgeObjectRetain(v52);
      v191 = sub_10001A820(v189, v52, v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
      swift_bridgeObjectRelease_n(v52, 3);
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Migration service response received {json: %{public}s, accountID: %{public}s}", (uint8_t *)v93, 0x16u);
      swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
      v87 = v180;
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v93, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v52, 2);
      v95 = swift_bridgeObjectRelease_n(v78, 2);
    }
    v97 = v187;
    v96 = v188;
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v187 + 56);
    v98(v181, 1, 1, v188, v95);
    v99 = v183;
    v100 = (uint64_t)v183 + *(int *)(v185 + 32);
    v101 = v173;
    sub_100008868(v100, v173, &qword_100838590);
    v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
    v103 = v102(v101, 1, v96);
    v104 = v174;
    if (v103 == 1)
    {
      *(_WORD *)v174 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_DWORD *)v104 + 1) = 0;
      UnknownStorage.init()();
      sub_10000882C(v101, &qword_100838590);
    }
    else
    {
      sub_1000B8680(v101, (uint64_t)v174, type metadata accessor for MigrateResponse.NextStep);
    }
    v105 = (uint64_t)v104;
    v106 = *v104;
    sub_10001C744(v105, type metadata accessor for MigrateResponse.NextStep);
    v107 = v106 == 1;
    v108 = (uint64_t)v177;
    v109 = v87;
    if (v107)
    {
      v110 = v100;
      v111 = v170;
      sub_100008868(v110, v170, &qword_100838590);
      if (v102(v111, 1, v96) == 1)
      {
        v112 = v171;
        *v171 = 0;
        *((_QWORD *)v112 + 1) = 0;
        *((_DWORD *)v112 + 1) = 0;
        UnknownStorage.init()();
        sub_10000882C(v111, &qword_100838590);
      }
      else
      {
        v112 = v171;
        sub_1000B8680(v111, (uint64_t)v171, type metadata accessor for MigrateResponse.NextStep);
      }
      v113 = v181;
      sub_10000882C(v181, &qword_100838590);
      ((void (*)(_WORD *, _QWORD, uint64_t, uint64_t))v98)(v112, 0, 1, v96);
      sub_1000A5CA8((uint64_t)v112, v113, &qword_100838590);
    }
    v114 = v175;
    sub_1000151E8(v109, v175, type metadata accessor for MigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload(v114, v182) == 1)
    {
      v115 = v114;
      v116 = v176;
      sub_1000B8680(v115, v176, type metadata accessor for MigrateResponse.Error);
      v117 = v172;
      sub_1000151E8(v116, (uint64_t)v172, type metadata accessor for MigrateResponse.Error);
      swift_bridgeObjectRetain(v52);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v119, v120))
      {
        v121 = swift_slowAlloc(22, -1);
        v122 = swift_slowAlloc(64, -1);
        v192[0] = v122;
        *(_DWORD *)v121 = 136446466;
        v123 = *v117;
        v124 = v117[1];
        swift_bridgeObjectRetain(v124);
        v191 = sub_10001A820(v123, v124, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        v125 = v124;
        v109 = v180;
        swift_bridgeObjectRelease(v125);
        sub_10001C744((uint64_t)v117, type metadata accessor for MigrateResponse.Error);
        *(_WORD *)(v121 + 12) = 2082;
        swift_bridgeObjectRetain(v52);
        v191 = sub_10001A820(v189, v52, v192);
        v99 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        swift_bridgeObjectRelease_n(v52, 3);
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "Migration server error {error: %{public}s, accountID: %{public}s}", (uint8_t *)v121, 0x16u);
        swift_arrayDestroy(v122, 2, (char *)&type metadata for Any + 8);
        v126 = v181;
        swift_slowDealloc(v122, -1, -1);
        swift_slowDealloc(v121, -1, -1);

      }
      else
      {
        sub_10001C744((uint64_t)v117, type metadata accessor for MigrateResponse.Error);

        swift_bridgeObjectRelease_n(v52, 2);
        v126 = v181;
      }
      sub_100276BC0(v126, v58, 0, 1);
      sub_10001C744(v176, type metadata accessor for MigrateResponse.Error);
      v132 = v126;
    }
    else
    {
      sub_1000B8680(v114, v108, type metadata accessor for MigrateResponse.Details);
      v127 = v52;
      if (*(_BYTE *)(v108 + 8) != 1)
      {
        v133 = swift_bridgeObjectRelease(v52);
        v135 = *v99;
        v134 = v99[1];
        v136 = v168;
        v137 = v167;
        v138 = v169;
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v168 + 104))(v167, enum case for REMMigrationResultState.complete(_:), v169, v133);
        v139 = swift_bridgeObjectRetain(v134);
        v140 = REMMigrationResultState.rawValue.getter(v139);
        v142 = v141;
        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v138);
        if (v135 == v140 && v134 == v142)
        {
          swift_bridgeObjectRelease_n(v134, 2);
        }
        else
        {
          v143 = _stringCompareWithSmolCheck(_:_:expecting:)(v135, v134, v140, v142, 0);
          swift_bridgeObjectRelease(v142);
          swift_bridgeObjectRelease(v134);
          v144 = v181;
          if ((v143 & 1) == 0)
          {
            sub_100276BC0(v181, 0x3FF0000000000000, 0, 0);
            sub_10001C744(v108, type metadata accessor for MigrateResponse.Details);
            sub_10000882C(v144, &qword_100838590);
            v166 = v180;
            goto LABEL_62;
          }
        }
        v145 = *(unsigned int *)(v108 + 12);
        if ((v145 & 0x80000000) != 0 || (v146 = *(unsigned int *)(v108 + 16), (v146 & 0x80000000) != 0))
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
        }
        else
        {
          v147 = v99[1];
          v148 = (double *)v108;
          v149 = *(unsigned __int8 *)(v108 + 8);
          v150 = *v148;
          v151 = *(uint64_t *)((char *)v99 + *(int *)(v185 + 24) + 8);
          v152 = objc_allocWithZone((Class)REMMigrationResult);
          swift_bridgeObjectRetain(v147);
          swift_bridgeObjectRetain(v151);
          v153 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v147);
          v154 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v151);
          v155 = objc_msgSend(v152, "initWithState:IsObserver:timeElapsed:listsMigrated:remindersMigrated:log:", v153, v149, v145, v146, v154, v150);

          v156 = v155;
          sub_100276058(v155, 0);

          sub_10001C744((uint64_t)v148, type metadata accessor for MigrateResponse.Details);
          sub_10000882C(v181, &qword_100838590);
          sub_10001C744(v180, type metadata accessor for MigrateResponse.OneOf_Result);
          sub_10001C744((uint64_t)v183, type metadata accessor for MigrateResponse);
        }
        return;
      }
      v128 = objc_msgSend(v190, "daemonUserDefaults");
      v129 = objc_msgSend(v128, "cloudKitMigrationObserverPollingInterval");

      if (v129)
      {
        objc_msgSend(v129, "doubleValue");
        v131 = v130;

      }
      else
      {
        v131 = 5.0;
      }
      swift_bridgeObjectRetain(v52);
      v158 = Logger.logObject.getter(v157);
      v159 = static os_log_type_t.default.getter(v158);
      if (os_log_type_enabled(v158, v159))
      {
        v160 = swift_slowAlloc(22, -1);
        v161 = v109;
        v162 = v127;
        v163 = swift_slowAlloc(32, -1);
        v192[0] = v163;
        *(_DWORD *)v160 = 134349314;
        v191 = v131;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        *(_WORD *)(v160 + 12) = 2082;
        swift_bridgeObjectRetain(v162);
        v191 = sub_10001A820(v189, v162, v192);
        v108 = (uint64_t)v177;
        v99 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
        v164 = v162;
        v109 = v161;
        swift_bridgeObjectRelease_n(v164, 3);
        _os_log_impl((void *)&_mh_execute_header, v158, v159, "We are an observer and will poll again in a %{public}f seconds {accountID: %{public}s}", (uint8_t *)v160, 0x16u);
        swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v163, -1, -1);
        swift_slowDealloc(v160, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v52, 2);
      }
      v165 = v181;
      sub_100276BC0(v181, v131, 0, 0);
      sub_10001C744(v108, type metadata accessor for MigrateResponse.Details);
      v132 = v165;
    }
    sub_10000882C(v132, &qword_100838590);
    v166 = v109;
LABEL_62:
    sub_10001C744(v166, type metadata accessor for MigrateResponse.OneOf_Result);
    sub_10001C744((uint64_t)v99, type metadata accessor for MigrateResponse);
    return;
  }
  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v45 = type metadata accessor for Logger(0);
  sub_10001AAA8(v45, (uint64_t)qword_100842590);
  swift_bridgeObjectRetain(v44);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = v44;
    v51 = swift_slowAlloc(32, -1);
    v192[0] = v51;
    *(_DWORD *)v49 = 136446210;
    swift_bridgeObjectRetain(v50);
    v191 = sub_10001A820(v189, v50, v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
    swift_bridgeObjectRelease_n(v50, 3);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Migration client is told to dismiss. Ignore server response. {accountID: %{public}s}", v49, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v44, 2);
  }
}

_QWORD *sub_100278FC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  _WORD v6[12];
  uint64_t v7;
  uint64_t v8;

  v7 = a1;
  v6[8] = 2;
  v4 = sub_10001A630(&qword_10083DFA8);
  result = NSManagedObjectContext.rem_performAndWait<A>(_:)(&v8, sub_100268FAC, v6, v4);
  if (!v2)
    *a2 = v8;
  return result;
}

void sub_100279034(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *ObjCClassFromMetadata;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v12 = objc_msgSend(v11, "cloudKitMigrationSimulatedError");

  if (v12)
  {
    v13 = (uint64_t)objc_msgSend(v12, "integerValue");

    if (v13 >= 1)
    {
      if ((unint64_t)v13 >> 31)
      {
        __break(1u);
        return;
      }
      *(_DWORD *)(a1 + *(int *)(type metadata accessor for MigrateRequest(0) + 28)) = v13;
    }
  }
  v14 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v15 = objc_msgSend(v14, "cloudKitMigrationDisableCleanUp");

  if ((a2 & 1) != 0)
    v16 = 8;
  else
    v16 = 0;
  if (v15)
    v17 = v16 | 0x10;
  else
    v17 = v16;
  *(_DWORD *)(a1 + *(int *)(type metadata accessor for MigrateRequest(0) + 20)) = v17;
  sub_1000151E8(a3, (uint64_t)v8, type metadata accessor for MigrateRequest.User);
  sub_10000882C(a1, &qword_100838580);
  sub_1000B8680((uint64_t)v8, a1, type metadata accessor for MigrateRequest.User);
  v18 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload(a1, v18, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 0, 1, v18);
}

uint64_t sub_100279210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v14;

  v2 = sub_10001A630(&qword_1008426E0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MigrateResponse(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_1008426E8);
  __chkstk_darwin(v9);
  v11 = (void **)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100008868(a1, (uint64_t)v11, &qword_1008426E8);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = *v11;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    swift_errorRetain(v12);
    sub_100277ADC((uint64_t)v4, v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    return sub_10000882C((uint64_t)v4, &qword_1008426E0);
  }
  else
  {
    sub_1000B8680((uint64_t)v11, (uint64_t)v8, type metadata accessor for MigrateResponse);
    sub_1000151E8((uint64_t)v8, (uint64_t)v4, type metadata accessor for MigrateResponse);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    sub_100277ADC((uint64_t)v4, 0);
    sub_10000882C((uint64_t)v4, &qword_1008426E0);
    return sub_10001C744((uint64_t)v8, type metadata accessor for MigrateResponse);
  }
}

id sub_1002793E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithPattern:options:error:", v6, a3, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

_QWORD *sub_1002794BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001A630((uint64_t *)&unk_100839940);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100279520(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100279598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v7 = sub_10027B4C4();
  v8 = swift_bridgeObjectRetain(a4);
  v9 = String.init<A>(_:)(&v19, &type metadata for Substring, &protocol witness table for Substring, v7, v8);
  v11 = v9;
  v12 = v10;
  if ((v10 & 0x1000000000000000) == 0)
  {
    if ((v10 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v14 = HIBYTE(v12) & 0xF;
    v19 = v11;
    v20 = v12 & 0xFFFFFFFFFFFFFFLL;
    v13 = (unsigned __int8 *)&v19;
    goto LABEL_7;
  }
  v11 = sub_100279908(v9, v10);
  v16 = v15;
  swift_bridgeObjectRelease(v12);
  v12 = v16;
  if ((v16 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v11 & 0x1000000000000000) != 0)
  {
    v13 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v12);
  }
LABEL_7:
  v17 = sub_100279688(v13, v14, a5);
  swift_bridgeObjectRelease(v12);
  return v17 | ((((unint64_t)v17 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100279688(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100279908(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_100279984(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100279984(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v11 = sub_100279AC8(a1, a2, a3, a4);
    if (v11)
    {
      v12 = v11;
      v8 = (unint64_t)sub_1002794BC(v11, 0);
      v5 = sub_100279BB4((unint64_t)v15, v8 + 32, v12, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v12)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32);
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v9 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v9 += v8;
        return static String._uncheckedFromUTF8(_:)(v9);
      }
LABEL_11:
      v9 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v9)
        return static String._uncheckedFromUTF8(_:)(v9);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8);
  }
}

unint64_t sub_100279AC8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100279520(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100279520(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100279BB4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100279520(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100279520(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100279DC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_10027ACC8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

void sub_100279E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  char v36[24];

  v0 = sub_10001A630(&qword_100842700);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v33 - v4;
  if (qword_100837090 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_100837090, sub_1002714E8);
LABEL_2:
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_100842590);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Notify all migration clients to dismiss", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    if (qword_1008370A0 != -1)
      swift_once(&qword_1008370A0, sub_10027167C);
    os_unfair_lock_lock((os_unfair_lock_t)qword_1008425B0);
    if (qword_100837098 != -1)
      swift_once(&qword_100837098, sub_100271658);
    swift_beginAccess(&off_1008425A8, v36, 1, 0);
    v11 = off_1008425A8;
    v12 = *((_QWORD *)off_1008425A8 + 8);
    v35 = (char *)off_1008425A8 + 64;
    v13 = 1 << *((_BYTE *)off_1008425A8 + 32);
    v14 = -1;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    v15 = v14 & v12;
    v16 = (unint64_t)(v13 + 63) >> 6;
    v34 = v16 - 1;
    swift_bridgeObjectRetain(off_1008425A8);
    v17 = 0;
    if (v15)
    {
      while (1)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v17 << 6);
LABEL_14:
        v22 = v11[6];
        v23 = type metadata accessor for UUID(0);
        (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v3, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v23);
        v24 = v11[7];
        v25 = sub_10001A630(&qword_100842708);
        *(_QWORD *)&v3[*(int *)(v25 + 48)] = *(_QWORD *)(v24 + 8 * v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v3, 0, 1, v25);
        swift_retain();
LABEL_33:
        sub_1000A5CA8((uint64_t)v3, (uint64_t)v5, &qword_100842700);
        v30 = sub_10001A630(&qword_100842708);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v5, 1, v30) == 1)
          break;
        v18 = *(_QWORD *)&v5[*(int *)(v30 + 48)];
        *(_BYTE *)(v18 + 90) = 1;
        swift_release(v18);
        v19 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v5, v19);
        if (!v15)
          goto LABEL_15;
      }
      swift_release(v11);
      v31 = (void *)sub_1002AFEE8((uint64_t)_swiftEmptyArrayStorage);
      v32 = off_1008425A8;
      off_1008425A8 = v31;
      swift_bridgeObjectRelease(v32);
      os_unfair_lock_unlock((os_unfair_lock_t)qword_1008425B0);
      return;
    }
LABEL_15:
    v26 = v17 + 1;
    if (!__OFADD__(v17, 1))
      break;
    __break(1u);
  }
  if (v26 >= v16)
    goto LABEL_32;
  v27 = *(_QWORD *)&v35[8 * v26];
  if (v27)
  {
LABEL_18:
    v15 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v26 << 6);
    v17 = v26;
    goto LABEL_14;
  }
  v28 = v17 + 2;
  ++v17;
  if (v26 + 1 >= v16)
    goto LABEL_32;
  v27 = *(_QWORD *)&v35[8 * v28];
  if (v27)
  {
LABEL_21:
    v26 = v28;
    goto LABEL_18;
  }
  v17 = v26 + 1;
  if (v26 + 2 >= v16)
    goto LABEL_32;
  v27 = *(_QWORD *)&v35[8 * v26 + 16];
  if (v27)
  {
    v26 += 2;
    goto LABEL_18;
  }
  v28 = v26 + 3;
  v17 = v26 + 2;
  if (v26 + 3 >= v16)
  {
LABEL_32:
    v29 = sub_10001A630(&qword_100842708);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v3, 1, 1, v29);
    v15 = 0;
    goto LABEL_33;
  }
  v27 = *(_QWORD *)&v35[8 * v28];
  if (v27)
    goto LABEL_21;
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v16)
    {
      v17 = v34;
      goto LABEL_32;
    }
    v27 = *(_QWORD *)&v35[8 * v26];
    ++v28;
    if (v27)
      goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_10027A2C4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  _QWORD v15[5];
  uint64_t v16;

  if (qword_100837090 != -1)
    swift_once(&qword_100837090, sub_1002714E8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_100842590);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Purge all migration clients' states", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "newBackgroundContextWithAuthor:", v7);

  v9 = swift_allocObject(&unk_1007EB918, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  v10 = swift_allocObject(&unk_1007EB940, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10027B5B4;
  *(_QWORD *)(v10 + 24) = v9;
  v15[4] = sub_1000A66B8;
  v16 = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000098C4;
  v15[3] = &unk_1007EB958;
  v11 = _Block_copy(v15);
  v12 = v16;
  v13 = v8;
  swift_retain();
  swift_release(v12);
  objc_msgSend(v13, "performBlockAndWait:", v11);

  _Block_release(v11);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v10, "", 99, 150, 28, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((v13 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10027A4DC(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject **v40;
  uint64_t v41;
  uint8_t *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  void *ObjCClassFromMetadata;
  Class isa;
  id v47;
  char *v48;
  uint64_t v49;
  _UNKNOWN **v50;
  id v51;
  _QWORD *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  NSObject **v62;
  NSObject *v63;
  uint64_t v64;
  uint8_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char isUniquelyReferenced_nonNull_native;
  void *v71;
  __n128 v72;
  uint64_t v73;
  NSObject **v74;
  void *v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  void *v79;
  _BYTE v80[24];
  NSObject *v81;
  _BYTE v82[16];
  id v83;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v77 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v73 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v73 - v14;
  v16 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v17 = (char *)objc_msgSend(v16, "accountStore");

  v83 = a1;
  v18 = a1;
  v19 = objc_msgSend(v18, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  UUID.uuidString.getter(v20);
  v22 = v21;
  v78 = *(void (**)(char *, uint64_t))(v8 + 8);
  v78(v15, v7);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v17, "accountWithIdentifier:", v23, swift_bridgeObjectRelease(v22).n128_f64[0]);

  if (!v24)
  {
    __break(1u);
    goto LABEL_28;
  }
  v25 = objc_msgSend(v24, "displayAccount");

  if (!v25)
  {
LABEL_28:
    __break(1u);
    return;
  }
  v26 = objc_msgSend(v25, "identifier");

  v27 = &qword_100837000;
  if (!v26)
  {
LABEL_6:
    if (v27[18] != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v32 = type metadata accessor for Logger(0);
    sub_10001AAA8(v32, (uint64_t)qword_100842590);
    v33 = v18;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(12, -1);
      v75 = a2;
      v37 = (uint8_t *)v36;
      v74 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138543362;
      v81 = v33;
      v38 = v33;
      v76 = v15;
      v39 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      v40 = v74;
      *v74 = v33;

      v15 = v76;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Migration: account ID not found in the ACAccount store, will try to migrate anyway but expect failure {accountID: %{public}@}", v37, 0xCu);
      v41 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v40, 1, v41);
      swift_slowDealloc(v40, -1, -1);
      v42 = v37;
      a2 = v75;
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

    }
    v43 = (void (*)(uint64_t, uint64_t))v78;
    goto LABEL_13;
  }
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v30 = v29;
  UUID.init(uuidString:)(v28, v29);
  v31 = swift_bridgeObjectRelease(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v31) == 1)
  {

    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
    v27 = &qword_100837000;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  v44 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v44);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v47 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

  v48 = v13;
  v43 = (void (*)(uint64_t, uint64_t))v78;
  v78(v48, v7);

  v83 = v47;
LABEL_13:
  v49 = (uint64_t)v77;
  if (qword_1008370A0 != -1)
    swift_once(&qword_1008370A0, sub_10027167C);
  v50 = &off_100842000;
  os_unfair_lock_lock((os_unfair_lock_t)qword_1008425B0);
  if (qword_100837098 != -1)
    swift_once(&qword_100837098, sub_100271658);
  v51 = objc_msgSend(v83, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

  swift_beginAccess(&off_1008425A8, &v81, 32, 0);
  v52 = off_1008425A8;
  if (*((_QWORD *)off_1008425A8 + 2) && (v53 = sub_1002C65F8(v49), (v54 & 1) != 0))
  {
    v55 = *(_QWORD *)(v52[7] + 8 * v53);
    swift_endAccess(&v81);
    swift_retain(v55);
    v43(v49, v7);
  }
  else
  {
    swift_endAccess(&v81);
    v43(v49, v7);
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v56 = type metadata accessor for Logger(0);
    sub_10001AAA8(v56, (uint64_t)qword_100842590);
    v57 = v83;
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v77 = v17;
      v60 = swift_slowAlloc(12, -1);
      v76 = v15;
      v61 = (uint8_t *)v60;
      v62 = (NSObject **)swift_slowAlloc(8, -1);
      v75 = (void *)v7;
      *(_DWORD *)v61 = 138543362;
      v81 = v57;
      v63 = v57;
      v50 = &off_100842000;
      v43 = (void (*)(uint64_t, uint64_t))v78;
      v7 = (uint64_t)v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      *v62 = v57;

      v17 = v77;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Creating new migration client {accountID: %{public}@}", v61, 0xCu);
      v64 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v62, 1, v64);
      swift_slowDealloc(v62, -1, -1);
      v65 = v61;
      v15 = v76;
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {

      v58 = v57;
    }

    swift_beginAccess(&v83, &v81, 0, 0);
    v66 = v83;
    v67 = type metadata accessor for RDMigrationClient();
    swift_allocObject(v67, 120, 7);
    v68 = sub_100273908(v66, a2);
    swift_retain_n(v68, 2);
    sub_100273C24((uint64_t)sub_10027B33C, v68);
    swift_release(v68);
    v69 = objc_msgSend(v83, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v69);

    swift_beginAccess(&off_1008425A8, v80, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1008425A8);
    v79 = off_1008425A8;
    off_1008425A8 = (_UNKNOWN *)0x8000000000000000;
    sub_10028C9F4(v68, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    v71 = off_1008425A8;
    off_1008425A8 = v79;
    v72 = swift_bridgeObjectRelease(v71);
    ((void (*)(char *, uint64_t, __n128))v43)(v15, v7, v72);
    swift_endAccess(v80);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v50[182]);

}

uint64_t sub_10027ACC8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_100279520(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_100279520(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_100279520(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void sub_10027B0EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t aBlock[5];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  objc_msgSend(a1, "setQueuePriority:", -4);
  objc_msgSend(a1, "setQualityOfService:", 17);
  if (a2)
  {
    aBlock[4] = a2;
    v22 = a3;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E18E4;
    aBlock[3] = a4;
    v8 = _Block_copy(aBlock);
    v9 = v22;
    swift_retain(a3);
    swift_release(v9);
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(a1, "setRequestCompletedBlock:", v8);
  _Block_release(v8);
  v10 = dispatch thunk of CKCodeOperation.codeService.getter();
  if (v10)
  {
    v11 = v10;
    CKCodeService.add<A, B>(_:)(a1);
  }
  else
  {
    ObjectType = swift_getObjectType(a1);
    if (qword_100837090 != -1)
      swift_once(&qword_100837090, sub_1002714E8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001AAA8(v13, (uint64_t)qword_100842590);
    v11 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      aBlock[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = _typeName(_:qualified:)(ObjectType, 0);
      v20 = v19;
      v23 = sub_10001A820(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v11, v15, "TantorMigrationAPIAsyncOperationClient.perform %s: codeService is nil", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
  }

}

uint64_t sub_10027B328(uint64_t result)
{
  if ((result & 0xFFFC) != 0)
    return 4;
  else
    return (unsigned __int16)result;
}

void sub_10027B33C(uint64_t a1, void *a2)
{
  sub_10027400C(a1, a2);
}

uint64_t sub_10027B34C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_10027B378()
{
  uint64_t v0;

  sub_100273E5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10027B384()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10027B394()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int v2;

  if (objc_msgSend((id)objc_opt_self(ICUtilities), "isInternetReachable"))
  {
    v1 = *(os_unfair_lock_s **)(v0 + 48);
    os_unfair_lock_lock(v1);
    if (*(_BYTE *)(v0 + 92) == 1)
    {
      v2 = *(unsigned __int8 *)(v0 + 93);
      *(_WORD *)(v0 + 92) = 0;
      sub_10027234C(v2);
    }
    os_unfair_lock_unlock(v1);
  }
}

void sub_10027B3FC(uint64_t a1)
{
  uint64_t v1;

  sub_100279034(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10027B418(void *a1, void *a2)
{
  uint64_t v2;

  sub_100274048(a1, a2, v2);
}

uint64_t sub_10027B420(uint64_t a1)
{
  return sub_100279210(a1);
}

uint64_t sub_10027B428()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10027B44C(void *a1)
{
  uint64_t v1;

  sub_100273630(a1, v1);
}

uint64_t sub_10027B454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10027B480(uint64_t a1)
{
  uint64_t v1;

  sub_100275188(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10027B48C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10027B4B8()
{
  uint64_t v0;

  sub_100276774(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32));
}

unint64_t sub_10027B4C4()
{
  unint64_t result;

  result = qword_1008426F0;
  if (!qword_1008426F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1008426F0);
  }
  return result;
}

void sub_10027B508(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1001172E0(a1, a2 & 1);
}

uint64_t sub_10027B520()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027B544(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

id sub_10027B570(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10013D030(result, a2 & 1);
  return result;
}

uint64_t sub_10027B588(uint64_t a1)
{
  uint64_t v1;

  return sub_100275C9C(a1, *(void (**)(uint64_t, uint64_t, double))(v1 + 16));
}

uint64_t sub_10027B590()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10027B5B4()
{
  uint64_t v0;

  sub_1002731AC(*(void **)(v0 + 16));
}

uint64_t sub_10027B5BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027B5CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10027B5F0()
{
  uint64_t v0;

  sub_1002716A4(*(void **)(v0 + 24));
}

const char *sub_10027B614()
{
  return "state";
}

id sub_10027B620@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "state");
  *a2 = (_WORD)result;
  return result;
}

id sub_10027B650(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setState:", *a1);
}

const char *sub_10027B664()
{
  return "isTerminated";
}

id sub_10027B670@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isTerminated");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10027B6A0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsTerminated:", *a1);
}

uint64_t sub_10027B6B4()
{
  id *v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_10027B6E8()
{
  uint64_t v0;

  sub_1002719C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10027B6F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027B738(uint64_t result)
{
  return (__int16)result;
}

uint64_t sub_10027B740(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  void *v5;
  id v6;

  result = sub_100658CF8();
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = (void *)sub_10028F9CC(result, v3, 0, a1);
  v6 = v5;
  return (uint64_t)v5;
}

uint64_t sub_10027B7AC(uint64_t a1)
{
  return sub_10027B900(a1, sub_100364E8C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t, __n128))sub_1003648D4);
}

uint64_t sub_10027B7C0(uint64_t a1)
{
  return sub_10027B900(a1, sub_100364E8C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t, __n128))sub_1003648FC);
}

uint64_t sub_10027B7D4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1000E1B18(a1);
  v5 = result;
  v6 = v3;
  v7 = v4 & 1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.endIndex.getter(v8);
    if (v7)
    {
      v10 = result;
      v11 = v9;
      v12 = static __CocoaDictionary.Index.== infix(_:_:)(v5, v6, result, v9);
      sub_1000E515C(v10, v11, 1);
      if ((v12 & 1) != 0)
      {
LABEL_7:
        sub_1000E515C(v5, v6, v7);
        return 0;
      }
LABEL_11:
      sub_1000E1C64(&v15, v5, v6, v7, a1);
      v13 = v14;
      sub_1000E515C(v5, v6, v7);
      return v13;
    }
  }
  else if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v3)
    {
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_7;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10027B8EC(uint64_t a1)
{
  return sub_10027B900(a1, sub_100364E8C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t, __n128))sub_100364BA4);
}

uint64_t sub_10027B900(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t, __n128))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;

  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.startIndex.getter(v6);
    v9 = v8;
    v10 = __CocoaSet.endIndex.getter(v6);
    v12 = static __CocoaSet.Index.== infix(_:_:)(v7, v9, v10, v11);
    v13 = swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = a2(a1);
  if ((v17 & 1) == 0)
  {
    v9 = v16;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v16)
    {
      v7 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1000E515C(v7, v9, v5 != 0);
        return 0;
      }
LABEL_10:
      v14 = a3(v7, v9, v5 != 0, a1, v13);
      sub_1000E515C(v7, v9, v5 != 0);
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10027BA18(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;

  v2 = sub_1000E1B1C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  if (v2 != 1 << *(_BYTE *)(a1 + 32))
  {
    v5 = sub_10028FA20(v2, v3, 0, a1);
    swift_bridgeObjectRetain(v5);
  }
}

uint64_t sub_10027BA7C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10028F92C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_100364F18(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_10027BAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;

  result = sub_10028F92C(a1);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result != 1 << *(_BYTE *)(a1 + 32))
    return sub_100364BCC(result, v5, a1, a2);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

_QWORD *sub_10027BB6C(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_1000E1B14(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_1000E1EB0(&v5, (uint64_t)result, v3, 0, a1);
}

void sub_10027BBF4(uint64_t a1, void (*a2)(uint64_t *, id *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  id v22[2];
  uint64_t v23;

  v23 = a1;
  v7 = a4 + 64;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 64);
  v21 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a4);
  v11 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 8 * i;
    v18 = *(void **)(*(_QWORD *)(a4 + 56) + v17);
    v22[0] = *(id *)(*(_QWORD *)(a4 + 48) + v17);
    v22[1] = v18;
    v19 = v22[0];
    swift_bridgeObjectRetain(v18);
    a2(&v23, v22);
    if (v4)
    {
      v20 = v23;
      swift_release(a4);
      swift_bridgeObjectRelease(v18);

      swift_bridgeObjectRelease(v20);
      return;
    }
    swift_bridgeObjectRelease(v18);

    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v21)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v10 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v21)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v21)
  {
LABEL_26:
    swift_release(a4);
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v21)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

void *sub_10027BDE4(void *a1, void (*a2)(void **, id *), uint64_t a3, uint64_t a4)
{
  return sub_10027BFF4(a1, a2, a3, a4);
}

uint64_t sub_10027BDF8(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  v24 = a1;
  v7 = a4 + 64;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 64);
  v22 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain(a4);
  v12 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v19 = v18[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v23[0] = *v18;
    v23[1] = v19;
    v23[2] = v20;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    a2(&v24, v23);
    if (v4)
    {
      v21 = v24;
      swift_release(a4);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v19);
      return swift_bridgeObjectRelease(v21);
    }
    swift_bridgeObjectRelease(v20);
    result = swift_bridgeObjectRelease(v19);
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v22)
      goto LABEL_26;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    if (!v16)
      break;
LABEL_17:
    v10 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v22)
    goto LABEL_26;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v22)
    goto LABEL_26;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v22)
    goto LABEL_26;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 4;
  if (v12 + 4 >= v22)
  {
LABEL_26:
    swift_release(a4);
    return v24;
  }
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v22)
      goto LABEL_26;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10027BFF4(void *a1, void (*a2)(void **, id *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v16;
  void *v17;

  v17 = a1;
  v5 = v4;
  v8 = a1;
  if ((unint64_t)a4 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (i = 4; ; ++i)
    {
      v11 = (a4 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a4)
          : *(id *)(a4 + 8 * i);
      v8 = v11;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v16 = v11;
      a2(&v17, &v16);
      if (v5)
      {
        v13 = v17;
        swift_bridgeObjectRelease(a4);

        swift_bridgeObjectRelease(v13);
        return v8;
      }

      if (v12 == v9)
      {
        swift_bridgeObjectRelease(a4);
        return v17;
      }
    }
    __break(1u);
LABEL_13:
    if (a4 < 0)
      v14 = a4;
    else
      v14 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
  }
  swift_bridgeObjectRelease(a4);
  return v8;
}

id sub_10027C128()
{
  return sub_10028778C((SEL *)&selRef_membershipsOfRemindersInSectionsAsData, (unint64_t *)&qword_100840030, REMMemberships_ptr);
}

void sub_10027C15C(void *a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  NSString v32;
  id v33;
  NSString v34;
  Class isa;
  uint64_t v36;
  void *v37;
  id v38;

  v4 = v2;
  if (a1)
  {
    v7 = sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
    v8 = a1;
    v9 = REMChecksumRepresentable.rem_checksum.getter(v7, &protocol witness table for REMMemberships);
    if (v3)
    {
LABEL_3:

      return;
    }
    v14 = v9;
    v15 = v10;
    v16 = objc_msgSend(v4, "membershipsOfRemindersInSectionsChecksum", swift_bridgeObjectRetain(v10).n128_f64[0]);
    if (!v16)
    {
      v23 = swift_bridgeObjectRelease(v15);
LABEL_18:
      v24 = REMJSONRepresentable.toJSONData()(v7, &protocol witness table for REMMemberships, v23);
      v26 = v25;
      v27 = objc_msgSend(v4, "membershipsOfRemindersInSectionsChecksum");
      if (!v27)
        goto LABEL_23;
      v28 = v27;
      v38 = v8;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v36 = v30;

      if (v29 == v14 && v36 == v15)
      {
        swift_bridgeObjectRelease_n(v15, 2);
        v8 = v38;
LABEL_26:
        sub_1000A70E4(v24, v26);
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000A71C8(v24, v26);
        objc_msgSend(v4, "setMembershipsOfRemindersInSectionsAsData:", isa);

        sub_1000A71C8(v24, v26);
        goto LABEL_3;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v36, v14, v15, 0);
      swift_bridgeObjectRelease(v36);
      v8 = v38;
      if ((v31 & 1) == 0)
      {
LABEL_23:
        v32 = String._bridgeToObjectiveC()();
        objc_msgSend(v4, "setMembershipsOfRemindersInSectionsChecksum:", v32);

        if ((a2 & 1) != 0)
        {
          v33 = objc_msgSend(v4, "createResolutionTokenMapIfNecessary");
          v34 = String._bridgeToObjectiveC()();
          objc_msgSend(v33, "updateForKey:", v34);
          swift_bridgeObjectRelease(v15);

          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease(v15);
      goto LABEL_26;
    }
    v17 = v16;
    v37 = v8;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    if (v14 != v18 || v15 != v20)
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v18, v20, 0);
      swift_bridgeObjectRelease(v15);
      v23 = swift_bridgeObjectRelease(v20);
      v8 = v37;
      if ((v22 & 1) != 0)
      {

        swift_bridgeObjectRelease(v15);
        return;
      }
      goto LABEL_18;
    }

    swift_bridgeObjectRelease_n(v15, 3);
  }
  else
  {
    v11 = objc_msgSend(v2, "membershipsOfRemindersInSectionsChecksum");
    if (v11)
    {

      objc_msgSend(v2, "setMembershipsOfRemindersInSectionsChecksum:", 0);
      if ((a2 & 1) != 0)
      {
        v12 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
        v13 = String._bridgeToObjectiveC()();
        objc_msgSend(v12, "updateForKey:", v13);

      }
    }
    objc_msgSend(v4, "setMembershipsOfRemindersInSectionsAsData:", 0);
  }
}

void sub_10027C500(void *a1, char a2)
{
  sub_10027C15C(a1, a2);
}

uint64_t sub_10027C514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100842718);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100842718);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10027C5A4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "intelligentGrocery");
  qword_100842730 = (uint64_t)result;
  return result;
}

uint64_t sub_10027C5DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A630(&qword_100842980);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000A388(a1, v8);
  v10 = sub_100293C24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A630(&qword_10083FE20);
  v12 = sub_100293C68(&qword_100842990, &qword_100842998, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10027C700()
{
  return 0xD000000000000011;
}

uint64_t sub_10027C71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10028FC44(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10027C744(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100293C24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027C76C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100293C24();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10027C794@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10028FCC8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10027C7BC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10027C5DC(a1, *v1);
}

uint64_t sub_10027C7D4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[44] = a1;
  v2[45] = v1;
  v2[46] = *v1;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[47] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[48] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[49] = swift_task_alloc(v5);
  v2[50] = swift_task_alloc(v5);
  v6 = type metadata accessor for Date(0);
  v2[51] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[52] = v7;
  v2[53] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v2[54] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[55] = v9;
  v2[56] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10027C89C, 0, 0);
}

uint64_t sub_10027C89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  id v37;
  id v38;
  _QWORD *v39;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;

  v2 = static os_signpost_type_t.begin.getter(a1);
  if (qword_1008370B0 != -1)
    swift_once(&qword_1008370B0, sub_10027C5A4);
  v4 = *(_QWORD *)(v1 + 440);
  v3 = *(_QWORD *)(v1 + 448);
  v5 = *(_QWORD *)(v1 + 432);
  v6 = qword_100842730;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v2, &_mh_execute_header, v6, "RDGroceryOperationCategorizeRemindersInList", 43, 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (qword_1008370A8 != -1)
    swift_once(&qword_1008370A8, sub_10027C514);
  v7 = *(_QWORD *)(v1 + 360);
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v1 + 456) = sub_10001AAA8(v8, (uint64_t)qword_100842718);
  v9 = swift_retain_n(v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v13 = *(_QWORD *)(v1 + 360);
    v12 = *(_QWORD *)(v1 + 368);
    type = v11;
    v14 = swift_slowAlloc(32, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    v42 = swift_slowAlloc(64, -1);
    v43 = v42;
    *(_DWORD *)v14 = 136446722;
    *(_QWORD *)(v1 + 288) = v12;
    MetatypeMetadata = swift_getMetatypeMetadata(v12);
    v17 = String.init<A>(describing:)(v1 + 288, MetatypeMetadata);
    *(_QWORD *)(v1 + 328) = sub_10001A820(v17, v18, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 336);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2114;
    v19 = *(void **)(v13 + 24);
    *(_QWORD *)(v1 + 336) = v19;
    v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 344);
    *v15 = v19;
    swift_release_n(v13);
    *(_WORD *)(v14 + 22) = 2082;
    v21 = *(_QWORD *)(v13 + 32);
    v22 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v21);
    v24 = Array.description.getter(v23, v22);
    v26 = v25;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 344) = sub_10001A820(v24, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 344, v1 + 352);
    swift_bridgeObjectRelease();
    swift_release_n(v13);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s: Start execution {listObjectID: %{public}@, reminderIDs: %{public}s}", (uint8_t *)v14, 0x20u);
    v27 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v15, 1, v27);
    swift_slowDealloc(v15, -1, -1);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v1 + 360));
  }

  v28 = *(_QWORD *)(v1 + 400);
  v29 = *(_QWORD *)(v1 + 384);
  v31 = *(void **)(v1 + 352);
  v30 = *(_QWORD *)(v1 + 360);
  Date.init()(v32);
  v33 = *(void **)(v30 + 24);
  *(_QWORD *)(v1 + 464) = v33;
  v34 = swift_allocObject(&unk_1007EBAC8, 32, 7);
  *(_QWORD *)(v1 + 472) = v34;
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = v31;
  *(_DWORD *)(v1 + 60) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v35 = *(void (**)(uint64_t))(v29 + 104);
  *(_QWORD *)(v1 + 480) = v35;
  v35(v28);
  v36 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v37 = v33;
  v38 = v31;
  v39 = (_QWORD *)swift_task_alloc(v36);
  *(_QWORD *)(v1 + 488) = v39;
  *v39 = v1;
  v39[1] = sub_10027CC98;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 64, *(_QWORD *)(v1 + 400), sub_100288FD8, v34, &_s31ThreadSafePartialRepresentationVN_0);
}

uint64_t sub_10027CC98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 488);
  v4 = *(_QWORD *)(*v1 + 472);
  v5 = *(_QWORD *)(*v1 + 400);
  v6 = *(_QWORD *)(*v1 + 376);
  v7 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v2 + 504) = v8;
  v8(v5, v6);
  swift_release(v4);
  if (v0)
    v9 = sub_10027D1A0;
  else
    v9 = sub_10027CD34;
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10027CD34()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t MetatypeMetadata;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *log;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 41) = *(_OWORD *)(v0 + 89);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
    v22 = *(unsigned int *)(v0 + 60);
    v23 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 376);
    v25 = *(void **)(v0 + 352);
    v26 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 32);
    v27 = swift_allocObject(&unk_1007EBAF0, 32, 7);
    *(_QWORD *)(v0 + 512) = v27;
    *(_QWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 24) = v25;
    v21(v23, v22, v24);
    v28 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    v29 = v25;
    swift_bridgeObjectRetain(v26);
    v30 = (_QWORD *)swift_task_alloc(v28);
    *(_QWORD *)(v0 + 520) = v30;
    v31 = sub_10001A630(&qword_100842840);
    *v30 = v0;
    v30[1] = sub_10027D230;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 320, *(_QWORD *)(v0 + 392), sub_10028979C, v27, v31);
  }
  else
  {
    v2 = swift_retain_n(*(_QWORD *)(v0 + 360));
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = *(void **)(v0 + 464);
      v7 = *(_QWORD *)(v0 + 360);
      v6 = *(_QWORD *)(v0 + 368);
      v8 = swift_slowAlloc(32, -1);
      log = v3;
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      v41 = swift_slowAlloc(64, -1);
      v42 = v41;
      *(_DWORD *)v8 = 136446722;
      *(_QWORD *)(v0 + 248) = v6;
      MetatypeMetadata = swift_getMetatypeMetadata(v6);
      v11 = String.init<A>(describing:)(v0 + 248, MetatypeMetadata);
      *(_QWORD *)(v0 + 296) = sub_10001A820(v11, v12, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304);
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2114;
      *(_QWORD *)(v0 + 304) = v5;
      v13 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312);
      *v9 = v5;
      swift_release_n(v7);
      *(_WORD *)(v8 + 22) = 2082;
      v14 = *(_QWORD *)(v7 + 32);
      v15 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v14);
      v17 = Array.description.getter(v16, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 312) = sub_10001A820(v17, v19, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320);
      swift_bridgeObjectRelease();
      swift_release_n(v7);
      _os_log_impl((void *)&_mh_execute_header, log, v4, "%{public}s: Skipped auto-categorizing reminders because list should no longer categorize grocery items {listObjectID: %{public}@, reminderIDs: %{public}s}", (uint8_t *)v8, 0x20u);
      v20 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v9, 1, v20);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_1000A5CA8(v0 + 24, v0 + 232, (uint64_t *)&unk_100844910);
      sub_100288FF0((id *)(v0 + 232));
      sub_1000A5CA8(v0 + 40, v0 + 176, (uint64_t *)&unk_10083A370);
      sub_1001CB094(v0 + 176);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 360);

      sub_1000A5CA8(v0 + 24, v0 + 224, (uint64_t *)&unk_100844910);
      sub_100288FF0((id *)(v0 + 224));
      sub_1000A5CA8(v0 + 40, v0 + 208, (uint64_t *)&unk_10083A370);
      sub_1001CB094(v0 + 208);
      swift_release_n(v33);

    }
    v34 = *(_QWORD *)(v0 + 448);
    v36 = *(_QWORD *)(v0 + 416);
    v35 = *(_QWORD *)(v0 + 424);
    v38 = *(_QWORD *)(v0 + 400);
    v37 = *(_QWORD *)(v0 + 408);
    v39 = *(_QWORD *)(v0 + 392);
    sub_10027D87C(*(_QWORD *)(v0 + 360), v35, *(_QWORD *)(v0 + 368));
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10027D1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  sub_10027D87C(*(_QWORD *)(v0 + 360), v2, *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 504);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 512);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v2);
  v4(v5, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10027D3F4;
  else
    v7 = sub_10027D2C4;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10027D2C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 536) = v1;
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (_QWORD *)swift_task_alloc(dword_10084284C);
    *(_QWORD *)(v0 + 544) = v2;
    *v2 = v0;
    v2[1] = sub_10027D4CC;
    return sub_10027DCA4(v1, v0 + 16, *(_QWORD *)(v0 + 352));
  }
  else
  {
    swift_bridgeObjectRelease();

    sub_1000A5CA8(v0 + 24, v0 + 240, (uint64_t *)&unk_100844910);
    sub_100288FF0((id *)(v0 + 240));
    sub_1000A5CA8(v0 + 40, v0 + 192, (uint64_t *)&unk_10083A370);
    sub_1001CB094(v0 + 192);
    v4 = *(_QWORD *)(v0 + 448);
    v6 = *(_QWORD *)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 408);
    v9 = *(_QWORD *)(v0 + 392);
    sub_10027D87C(*(_QWORD *)(v0 + 360), v5, *(_QWORD *)(v0 + 368));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10027D3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000A5CA8(v0 + 24, v0 + 272, (uint64_t *)&unk_100844910);
  sub_100288FF0((id *)(v0 + 272));
  sub_1000A5CA8(v0 + 40, v0 + 160, (uint64_t *)&unk_10083A370);
  sub_1001CB094(v0 + 160);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  sub_10027D87C(*(_QWORD *)(v0 + 360), v2, *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_10027D6C4;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_10027D538;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027D538()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_100839A0C);
  v0[70] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10027D590;
  return sub_1000C9E70(v0[58], v0[44]);
}

uint64_t sub_10027D590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10027D7A4;
  else
    v3 = sub_10027D5F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027D5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000A5CA8(v0 + 24, v0 + 256, (uint64_t *)&unk_100844910);
  sub_100288FF0((id *)(v0 + 256));
  sub_1000A5CA8(v0 + 40, v0 + 128, (uint64_t *)&unk_10083A370);
  sub_1001CB094(v0 + 128);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  sub_10027D87C(*(_QWORD *)(v0 + 360), v2, *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();

  sub_1000A5CA8(v0 + 24, v0 + 264, (uint64_t *)&unk_100844910);
  sub_100288FF0((id *)(v0 + 264));
  sub_1000A5CA8(v0 + 40, v0 + 144, (uint64_t *)&unk_10083A370);
  sub_1001CB094(v0 + 144);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  sub_10027D87C(*(_QWORD *)(v0 + 360), v2, *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000A5CA8(v0 + 24, v0 + 280, (uint64_t *)&unk_100844910);
  sub_100288FF0((id *)(v0 + 280));
  sub_1000A5CA8(v0 + 40, v0 + 112, (uint64_t *)&unk_10083A370);
  sub_1001CB094(v0 + 112);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  sub_10027D87C(*(_QWORD *)(v0 + 360), v2, *(_QWORD *)(v0 + 368));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t MetatypeMetadata;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  os_log_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008370A8 != -1)
    swift_once(&qword_1008370A8, sub_10027C514);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_100842718);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v15 = swift_retain_n(a1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(42, -1);
    v52 = v7;
    v20 = v19;
    v21 = swift_slowAlloc(8, -1);
    v50 = v11;
    v22 = (_QWORD *)v21;
    v51 = swift_slowAlloc(64, -1);
    v54 = v51;
    v55 = a3;
    *(_DWORD *)v20 = 136446978;
    v49 = v18;
    MetatypeMetadata = swift_getMetatypeMetadata(a3);
    v53 = v6;
    v24 = String.init<A>(describing:)(&v55, MetatypeMetadata);
    v48 = v16;
    v55 = sub_10001A820(v24, v25, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2114;
    v26 = *(void **)(a1 + 24);
    v55 = (uint64_t)v26;
    v27 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    *v22 = v26;
    swift_release_n(a1);
    *(_WORD *)(v20 + 22) = 2082;
    v28 = *(_QWORD *)(a1 + 32);
    v29 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v47 = v10;
    v30 = v9;
    v31 = v29;
    swift_bridgeObjectRetain(v28);
    v33 = Array.description.getter(v32, v31);
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = v33;
    v9 = v30;
    v55 = sub_10001A820(v36, v35, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_release_n(a1);
    v6 = v53;
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2050;
    v55 = Date.rem_elapsedInMilliseconds.getter(v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v47);
    v38 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "%{public}s: Finished execution {listObjectID: %{public}@, reminderIDs: %{public}s, elapsedSeconds: %{public}f}", (uint8_t *)v20, 0x2Au);
    v39 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v22, 1, v39);
    swift_slowDealloc(v22, -1, -1);
    v40 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    v41 = v20;
    v7 = v52;
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {
    swift_release_n(a1);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

  }
  v43 = static os_signpost_type_t.end.getter(v42);
  if (qword_1008370B0 != -1)
    swift_once(&qword_1008370B0, sub_10027C5A4);
  v44 = qword_100842730;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v43, &_mh_execute_header, v44, "RDGroceryOperationCategorizeRemindersInList", 43, 2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10027DCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4[42] = a3;
  v4[43] = v3;
  v4[40] = a1;
  v4[41] = a2;
  v4[44] = *v3;
  v5 = type metadata accessor for Date(0);
  v4[45] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[46] = v6;
  v4[47] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  v4[48] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_100842850);
  v4[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  v4[50] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v10);
  v4[52] = swift_task_alloc(v10);
  v4[53] = swift_task_alloc(v10);
  v4[54] = swift_task_alloc(v10);
  v4[55] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v4[56] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[57] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[58] = swift_task_alloc(v13);
  v4[59] = swift_task_alloc(v13);
  v4[60] = swift_task_alloc(v13);
  v4[61] = swift_task_alloc(v13);
  v4[62] = swift_task_alloc(v13);
  v4[63] = swift_task_alloc(v13);
  v15 = type metadata accessor for REMTrialNamespace(0, v14);
  v4[64] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[65] = v16;
  v4[66] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  v4[67] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[68] = v18;
  v4[69] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[70] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[71] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[72] = swift_task_alloc(v21);
  v4[73] = swift_task_alloc(v21);
  return swift_task_switch(sub_10027DEA4, 0, 0);
}

uint64_t sub_10027DEA4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(v0 + 584);
  v1 = *(_QWORD *)(v0 + 344);
  v24 = *(_QWORD *)(v0 + 352);
  v25 = *(_QWORD *)(v0 + 568);
  v2 = *(__int128 **)(v0 + 328);
  v3 = *(void **)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 320);
  v4 = swift_allocObject(&unk_1007EBB18, 24, 7);
  *(_QWORD *)(v0 + 592) = v4;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = v4;
  v22 = swift_allocObject(&unk_1007EBB40, 24, 7);
  *(_QWORD *)(v0 + 600) = v22;
  *(_QWORD *)(v22 + 16) = &_swiftEmptyDictionarySingleton;
  v21 = swift_allocObject(&unk_1007EBB68, 24, 7);
  *(_QWORD *)(v0 + 608) = v21;
  *(_QWORD *)(v21 + 16) = 0;
  v20 = swift_allocObject(&unk_1007EBB90, 24, 7);
  *(_QWORD *)(v0 + 616) = v20;
  *(_QWORD *)(v20 + 16) = _swiftEmptyArrayStorage;
  v27 = swift_allocObject(&unk_1007EBBB8, 24, 7);
  *(_QWORD *)(v0 + 624) = v27;
  *(_QWORD *)(v27 + 16) = _swiftEmptyArrayStorage;
  v6 = swift_allocObject(&unk_1007EBBE0, 24, 7);
  *(_QWORD *)(v0 + 632) = v6;
  *(_QWORD *)(v6 + 16) = &_swiftEmptyDictionarySingleton;
  v7 = *((_QWORD *)v2 + 3);
  *(_QWORD *)(v0 + 640) = v7;
  v8 = *((_QWORD *)v2 + 4);
  *(_QWORD *)(v0 + 648) = v8;
  v9 = swift_allocObject(&unk_1007EBC08, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v19 = *(void **)v2;
  *(_QWORD *)(v0 + 656) = *(_QWORD *)v2;
  sub_1000A5CA8((uint64_t)v2 + 8, v0 + 240, (uint64_t *)&unk_100844910);
  v10 = swift_allocObject(&unk_1007EBC30, 160, 7);
  *(_QWORD *)(v0 + 664) = v10;
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v3;
  v12 = *v2;
  v11 = v2[1];
  *(_OWORD *)(v10 + 57) = *(__int128 *)((char *)v2 + 25);
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 80) = v5;
  *(_QWORD *)(v10 + 88) = v22;
  *(_QWORD *)(v10 + 96) = v21;
  *(_QWORD *)(v10 + 104) = v23;
  *(_QWORD *)(v10 + 112) = v27;
  *(_QWORD *)(v10 + 120) = v6;
  *(_QWORD *)(v10 + 128) = v7;
  *(_QWORD *)(v10 + 136) = v8;
  *(_QWORD *)(v10 + 144) = v20;
  *(_QWORD *)(v10 + 152) = v24;
  *(_DWORD *)(v0 + 780) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v13 = *(void (**)(uint64_t))(v25 + 104);
  *(_QWORD *)(v0 + 672) = v13;
  v13(v26);
  swift_bridgeObjectRetain_n(v8, 3);
  v14 = v3;
  v15 = v19;
  sub_1002898E8((id *)(v0 + 240));
  v16 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v23);
  swift_retain();
  swift_retain();
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc(v16);
  *(_QWORD *)(v0 + 680) = v17;
  *v17 = v0;
  v17[1] = sub_10027E158;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_10027E158()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 680);
  *(_QWORD *)(*(_QWORD *)v1 + 688) = v0;
  swift_task_dealloc(v3);
  v4 = v2[83];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[71] + 8))(v2[73], v2[70]);
    swift_bridgeObjectRelease();
    swift_release(v4);
    v5 = sub_10028100C;
  }
  else
  {
    v6 = v2[73];
    v7 = v2[70];
    v8 = *(void (**)(uint64_t, uint64_t))(v2[71] + 8);
    v2[87] = v8;
    v8(v6, v7);
    swift_release(v4);
    v5 = sub_10027E210;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10027E210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  id v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  void (*v45)(uint64_t, _QWORD, uint64_t);
  void *v46;

  v1 = *(_QWORD *)(v0 + 648);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 688);
    v3 = *(_QWORD *)(v0 + 640);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 648), 2);
    Locale.init(identifier:)(v3, v1);
    v5 = type metadata accessor for REMTrialClient(0, v4);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = REMTrialClient.init()();
    if (v2)
    {
      swift_errorRelease(v2);
      v7 = 0;
    }
    else
    {
      v8 = v6;
      v9 = *(_QWORD *)(v0 + 528);
      v10 = *(_QWORD *)(v0 + 520);
      v11 = *(_QWORD *)(v0 + 512);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for REMTrialNamespace.grocery(_:), v11);
      dispatch thunk of REMTrialClient.deploymentId(for:)(v9);
      v7 = v12;
      swift_release(v8);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    *(_QWORD *)(v0 + 704) = v7;
    v13 = sub_10028FE14(*(_BYTE *)(*(_QWORD *)(v0 + 328) + 40) & 1, *(_QWORD *)(v0 + 344));
    *(_QWORD *)(v0 + 712) = v13;
    v14 = (uint64_t)v13;
    v15 = *(_QWORD *)(v0 + 648);
    v16 = *(_QWORD *)(v0 + 616);
    v17 = *(_QWORD *)(v0 + 344);
    swift_beginAccess(v16 + 16, v0 + 16, 0, 0);
    v18 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(v0 + 232) = v18;
    swift_bridgeObjectRetain(v18);
    v19 = sub_10001A630(&qword_100842840);
    v20 = sub_1000A5F84(&qword_100842858, &qword_100842840, (uint64_t)&protocol conformance descriptor for [A]);
    v21 = Sequence.mapToSet<A>(_:)(sub_100287848, 0, v19, &type metadata for String, v20, &protocol witness table for String);
    *(_QWORD *)(v0 + 720) = v21;
    swift_bridgeObjectRelease();
    v22 = v17 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration;
    v23 = (_QWORD *)swift_task_alloc(dword_100842864);
    *(_QWORD *)(v0 + 728) = v23;
    *v23 = v0;
    v23[1] = sub_10027FA98;
    return sub_1002834D4(v21, *(_QWORD *)(v0 + 640), v15, v14, v22);
  }
  else
  {
    v45 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 672);
    v44 = *(_DWORD *)(v0 + 780);
    v46 = *(void **)(v0 + 656);
    v40 = *(_QWORD *)(v0 + 640);
    v24 = *(_QWORD *)(v0 + 624);
    v25 = *(_QWORD *)(v0 + 608);
    v26 = *(_QWORD *)(v0 + 592);
    v41 = *(_QWORD *)(v0 + 632);
    v42 = *(_QWORD *)(v0 + 576);
    v43 = *(_QWORD *)(v0 + 560);
    v27 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 352);
    v29 = *(__int128 **)(v0 + 328);
    v30 = *(void **)(v0 + 336);
    v31 = swift_allocObject(&unk_1007EBC08, 24, 7);
    swift_weakInit(v31 + 16, v27);
    v32 = swift_allocObject(&unk_1007EBC58, 144, 7);
    *(_QWORD *)(v0 + 752) = v32;
    *(_QWORD *)(v32 + 16) = v31;
    *(_QWORD *)(v32 + 24) = v30;
    v34 = *v29;
    v33 = v29[1];
    *(_OWORD *)(v32 + 57) = *(__int128 *)((char *)v29 + 25);
    *(_OWORD *)(v32 + 32) = v34;
    *(_OWORD *)(v32 + 48) = v33;
    *(_QWORD *)(v32 + 80) = v40;
    *(_QWORD *)(v32 + 88) = 0;
    *(_QWORD *)(v32 + 96) = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)(v32 + 104) = v24;
    *(_QWORD *)(v32 + 112) = v26;
    *(_QWORD *)(v32 + 120) = v41;
    *(_QWORD *)(v32 + 128) = v25;
    *(_QWORD *)(v32 + 136) = v28;
    v45(v42, v44, v43);
    swift_bridgeObjectRetain(0);
    v35 = v30;
    v36 = v46;
    sub_1002898E8((id *)(v0 + 240));
    v37 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v38 = (_QWORD *)swift_task_alloc(v37);
    *(_QWORD *)(v0 + 760) = v38;
    *v38 = v0;
    v38[1] = sub_100280E00;
    return NSManagedObjectContext.perform<A>(schedule:_:)();
  }
}

uint64_t sub_10027FA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 728);
  *(_QWORD *)(v3 + 736) = a1;
  *(_QWORD *)(v3 + 744) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_10028117C;
  else
    v5 = sub_10027FB38;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10027FB38()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void (*v13)(uint64_t, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, __n128);
  _QWORD *v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t result;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  void (*v100)(uint64_t, uint64_t, __n128);
  uint64_t v101;
  double v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  void (*v117)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Class isa;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  Class v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  NSObject *v174;
  os_log_type_t v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t MetatypeMetadata;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  __n128 v191;
  void (*v192)(uint64_t, uint64_t, __n128);
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __n128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  __int128 *v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  id v214;
  id v215;
  uint64_t v216;
  _QWORD *v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  NSObject *log;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  void *v250;
  void *v251;
  void (*v252)(uint64_t, _QWORD, uint64_t);
  id v253;
  void *v254;
  uint64_t *v255;
  uint64_t v256[2];

  v1 = *(_QWORD *)(v0 + 736);
  if (!v1)
    v1 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v0 + 616);
  swift_beginAccess(v2 + 16, v0 + 112, 0, 0);
  v3 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain(v3);
    v240 = &_swiftEmptyDictionarySingleton;
LABEL_67:
    v198 = *(_QWORD *)(v0 + 552);
    v199 = *(_QWORD *)(v0 + 544);
    v200 = *(_QWORD *)(v0 + 536);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v201 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v199 + 8))(v198, v200, v201);
    v249 = *(_DWORD *)(v0 + 780);
    v252 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 672);
    v254 = *(void **)(v0 + 656);
    v202 = *(_QWORD *)(v0 + 648);
    v239 = *(_QWORD *)(v0 + 640);
    v203 = *(_QWORD *)(v0 + 624);
    v204 = *(_QWORD *)(v0 + 608);
    v205 = *(_QWORD *)(v0 + 592);
    v242 = *(_QWORD *)(v0 + 632);
    v245 = *(_QWORD *)(v0 + 576);
    v247 = *(_QWORD *)(v0 + 560);
    v206 = *(_QWORD *)(v0 + 344);
    v207 = *(_QWORD *)(v0 + 352);
    v209 = *(__int128 **)(v0 + 328);
    v208 = *(void **)(v0 + 336);
    v210 = swift_allocObject(&unk_1007EBC08, 24, 7);
    swift_weakInit(v210 + 16, v206);
    v211 = swift_allocObject(&unk_1007EBC58, 144, 7);
    *(_QWORD *)(v0 + 752) = v211;
    *(_QWORD *)(v211 + 16) = v210;
    *(_QWORD *)(v211 + 24) = v208;
    v213 = *v209;
    v212 = v209[1];
    *(_OWORD *)(v211 + 57) = *(__int128 *)((char *)v209 + 25);
    *(_OWORD *)(v211 + 32) = v213;
    *(_OWORD *)(v211 + 48) = v212;
    *(_QWORD *)(v211 + 80) = v239;
    *(_QWORD *)(v211 + 88) = v202;
    *(_QWORD *)(v211 + 96) = v240;
    *(_QWORD *)(v211 + 104) = v203;
    *(_QWORD *)(v211 + 112) = v205;
    *(_QWORD *)(v211 + 120) = v242;
    *(_QWORD *)(v211 + 128) = v204;
    *(_QWORD *)(v211 + 136) = v207;
    v252(v245, v249, v247);
    swift_bridgeObjectRetain(v202);
    v214 = v208;
    v215 = v254;
    sub_1002898E8((id *)(v0 + 240));
    v216 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v217 = (_QWORD *)swift_task_alloc(v216);
    *(_QWORD *)(v0 + 760) = v217;
    *v217 = v0;
    v217[1] = sub_100280E00;
    return NSManagedObjectContext.perform<A>(schedule:_:)();
  }
  v4 = *(_QWORD *)(v3 + 16);
  v230 = v0 + 64;
  v221 = v0 + 216;
  v222 = v0 + 208;
  v220 = v0 + 224;
  v229 = *(_QWORD *)(v0 + 544);
  v248 = *(_QWORD *)(v0 + 456);
  v219 = *(_QWORD *)(v0 + 368);
  v232 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 608) + 16;
  v6 = *(_QWORD *)(v0 + 600) + 16;
  v7 = *(_QWORD *)(v0 + 592) + 16;
  swift_bridgeObjectRetain(v3);
  swift_beginAccess(v7, v0 + 136, 0, 0);
  swift_beginAccess(v6, v0 + 160, 0, 0);
  v8 = swift_beginAccess(v5, v0 + 88, 0, 0);
  v9 = (uint64_t *)(v3 + 48);
  v240 = &_swiftEmptyDictionarySingleton;
  v8.n128_u64[0] = 136447234;
  v218 = v8;
  v241 = v1;
  v10 = v4;
  while (1)
  {
    v15 = *(_QWORD *)(v0 + 592);
    v16 = *(v9 - 1);
    v255 = v9;
    v17 = *v9;
    v253 = (id)*(v9 - 2);
    v18 = objc_msgSend(v253, "uuid", swift_bridgeObjectRetain(v17).n128_f64[0]);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = *(void **)(v15 + 16);
    if (!v19)
    {
      swift_bridgeObjectRetain(v17);
      goto LABEL_17;
    }
    v20 = *(_QWORD *)(v0 + 448);
    v21 = objc_msgSend(v19, "membershipByMemberIdentifier", swift_bridgeObjectRetain(v17).n128_f64[0]);
    v22 = sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
    v23 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v20, v22, v23);

    if (!*(_QWORD *)(v24 + 16) || (v25 = sub_1002C65F8(*(_QWORD *)(v0 + 504)), (v26 & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_17:
      v30 = 0;
      goto LABEL_18;
    }
    v27 = *(_QWORD *)(v0 + 600);
    v236 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v25);
    v28 = v236;
    swift_bridgeObjectRelease();
    if (!v28)
      goto LABEL_17;
    v233 = v16;
    v29 = *(_QWORD *)(v27 + 16);
    swift_bridgeObjectRetain(v29);
    v30 = v28;
    v31 = objc_msgSend(v30, "groupIdentifier");
    v246 = v17;
    if (!v31)
    {
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v248 + 56);
      v39(*(_QWORD *)(v0 + 440), 1, 1, *(_QWORD *)(v0 + 448));
      goto LABEL_36;
    }
    v32 = v31;
    v33 = v30;
    v34 = v10;
    v35 = *(_QWORD *)(v0 + 488);
    v37 = *(_QWORD *)(v0 + 440);
    v36 = *(_QWORD *)(v0 + 448);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 32);
    v38(v37, v35, v36);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v248 + 56);
    v39(v37, 0, 1, v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48))(v37, 1, v36) != 1)
      break;
    v10 = v34;
    v17 = v246;
LABEL_36:
    v101 = *(_QWORD *)(v0 + 440);

    sub_10000882C(v101, (uint64_t *)&unk_100839C80);
    *(_QWORD *)&v102 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_37:
    v103 = objc_msgSend(v30, "groupIdentifier", v102, *(_OWORD *)&v218);
    v243 = v10;
    v251 = v30;
    if (v103)
    {
      v104 = v103;
      v105 = v17;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);

      v106 = 0;
    }
    else
    {
      v105 = v17;
      v106 = 1;
    }
    v107 = *(_QWORD *)(v0 + 608);
    v108 = *(_QWORD *)(v0 + 600);
    v109 = *(_QWORD *)(v0 + 552);
    v110 = *(_QWORD *)(v0 + 536);
    v112 = *(_QWORD *)(v0 + 424);
    v111 = *(_QWORD *)(v0 + 432);
    v113 = *(_QWORD *)(v0 + 384);
    v39(v112, v106, 1, *(_QWORD *)(v0 + 448));
    sub_1000A5CA8(v112, v111, (uint64_t *)&unk_100839C80);
    v114 = *(void **)(v107 + 16);
    v115 = *(_QWORD *)(v108 + 16);
    v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v229 + 16);
    v116(v113, v109, v110);
    v117 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v229 + 56);
    v117(v113, 0, 1, v110);
    v118 = v114;
    swift_bridgeObjectRetain(v241);
    swift_bridgeObjectRetain(v115);
    LOBYTE(v108) = sub_100290164(v114, v241, v236, v115, v113, v233, v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_10000882C(v113, (uint64_t *)&unk_10083FBE0);
    v231 = v108;
    if ((v108 & 1) != 0)
    {
      v119 = *(_QWORD *)(v0 + 552);
      v120 = *(_QWORD *)(v0 + 536);
      v227 = *(_QWORD *)(v0 + 448);
      v121 = *(_QWORD *)(v0 + 432);
      v122 = *(_QWORD *)(v0 + 416);
      v123 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 184) = v233;
      *(_QWORD *)(v0 + 192) = v105;
      v116(v123, v119, v120);
      v117(v123, 0, 1, v120);
      v124 = sub_1000E525C();
      v125 = StringProtocol.lowercased(with:)(v123, &type metadata for String, v124);
      v127 = v126;
      sub_10000882C(v123, (uint64_t *)&unk_10083FBE0);
      v128 = sub_10011D420(v121, v122);
      static Date.now.getter(v128);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48))(v122, 1, v227) == 1)
      {
        isa = 0;
      }
      else
      {
        v137 = *(_QWORD *)(v0 + 448);
        v138 = *(_QWORD *)(v0 + 416);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v138, v137);
      }
      v139 = *(_QWORD *)(v0 + 632);
      v140 = *(_QWORD *)(v0 + 376);
      v141 = *(_QWORD *)(v0 + 360);
      v142 = objc_allocWithZone((Class)REMTimestampedUUID);
      v143 = Date._bridgeToObjectiveC()().super.isa;
      v144 = objc_msgSend(v142, "initWithIdentifier:modifiedOn:", isa, v143);

      (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v140, v141);
      swift_beginAccess(v139 + 16, v230, 33, 0);
      v145 = *(_QWORD *)(v139 + 16);
      if (v144)
      {
        v146 = *(_QWORD *)(v0 + 632);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v145);
        v256[0] = *(_QWORD *)(v146 + 16);
        *(_QWORD *)(v146 + 16) = 0x8000000000000000;
        sub_10028EDA0((uint64_t)v144, v125, v127, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_1002D85E0, (void (*)(void))sub_1002D12C0);
        *(_QWORD *)(v146 + 16) = v256[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v148 = v233;
      }
      else
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v139 + 16));
        v149 = sub_10001A6DC(v125, v127);
        v151 = v150;
        swift_bridgeObjectRelease();
        v148 = v233;
        if ((v151 & 1) != 0)
        {
          v152 = *(_QWORD *)(v0 + 632);
          v153 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v152 + 16));
          v154 = *(_QWORD *)(v152 + 16);
          v256[0] = v154;
          *(_QWORD *)(v152 + 16) = 0x8000000000000000;
          if ((v153 & 1) == 0)
          {
            sub_1002D85E0();
            v154 = v256[0];
          }
          v155 = *(_QWORD *)(v0 + 632);
          swift_bridgeObjectRelease();
          v156 = *(void **)(*(_QWORD *)(v154 + 56) + 8 * v149);
          sub_1002899C4(v149, v154);
          *(_QWORD *)(v155 + 16) = v154;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      v161 = *(_QWORD *)(v0 + 648);
      v162 = *(_QWORD *)(v0 + 640);
      v163 = *(_QWORD *)(v0 + 600);
      v164 = *(_QWORD *)(v0 + 432);
      swift_endAccess(v230);
      v165 = *(_QWORD *)(v163 + 16);
      swift_bridgeObjectRetain(v165);
      sub_100290CC8(v148, v246, v236, v165, v164, v162, v161);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (qword_1008370A8 != -1)
      swift_once(&qword_1008370A8, sub_10027C514);
    v166 = *(_QWORD *)(v0 + 504);
    v167 = *(_QWORD *)(v0 + 464);
    v168 = *(_QWORD *)(v0 + 448);
    v169 = *(_QWORD *)(v0 + 432);
    v170 = *(_QWORD *)(v0 + 408);
    v171 = *(_QWORD *)(v0 + 344);
    v172 = type metadata accessor for Logger(0);
    sub_10001AAA8(v172, (uint64_t)qword_100842718);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 16))(v167, v166, v168);
    sub_10011D420(v169, v170);
    v173 = swift_retain_n(v171);
    v174 = Logger.logObject.getter(v173);
    v175 = static os_log_type_t.default.getter(v174);
    v176 = os_log_type_enabled(v174, v175);
    v177 = *(_QWORD *)(v0 + 504);
    v178 = *(_QWORD *)(v0 + 464);
    v179 = *(_QWORD *)(v0 + 448);
    v238 = *(_QWORD *)(v0 + 432);
    v180 = *(_QWORD *)(v0 + 408);
    if (v176)
    {
      v225 = *(_QWORD *)(v0 + 400);
      log = v174;
      v181 = *(_QWORD *)(v0 + 352);
      v223 = *(_QWORD *)(v0 + 344);
      v182 = swift_slowAlloc(48, -1);
      v224 = (_QWORD *)swift_slowAlloc(8, -1);
      v228 = swift_slowAlloc(96, -1);
      v256[0] = v228;
      *(_DWORD *)v182 = v218.n128_u32[0];
      *(_QWORD *)(v0 + 296) = v181;
      MetatypeMetadata = swift_getMetatypeMetadata(v181);
      v184 = String.init<A>(describing:)(v0 + 296, MetatypeMetadata);
      *(_QWORD *)(v0 + 200) = sub_10001A820(v184, v185, v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v222);
      swift_bridgeObjectRelease();
      *(_WORD *)(v182 + 12) = 2114;
      v235 = v177;
      v186 = *(void **)(v232 + 24);
      *(_QWORD *)(v0 + 208) = v186;
      v187 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v222, v221);
      *v224 = v186;
      swift_release_n(v223);
      *(_WORD *)(v182 + 22) = 2082;
      v188 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v189 = dispatch thunk of CustomStringConvertible.description.getter(v179, v188);
      *(_QWORD *)(v0 + 216) = sub_10001A820(v189, v190, v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v221, v220);
      v191 = swift_bridgeObjectRelease();
      v192 = *(void (**)(uint64_t, uint64_t, __n128))(v248 + 8);
      v192(v178, v179, v191);
      *(_WORD *)(v182 + 32) = 2082;
      v193 = Optional.descriptionOrNil.getter(v225);
      *(_QWORD *)(v0 + 224) = sub_10001A820(v193, v194, v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v220, v0 + 232);
      swift_bridgeObjectRelease();
      sub_10000882C(v180, (uint64_t *)&unk_100839C80);
      *(_WORD *)(v182 + 42) = 1026;
      *(_DWORD *)(v0 + 776) = v231 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 780);
      _os_log_impl((void *)&_mh_execute_header, log, v175, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, hasUpdatedGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v182, 0x30u);
      v195 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v224, 1, v195);
      swift_slowDealloc(v224, -1, -1);
      swift_arrayDestroy(v228, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v228, -1, -1);
      swift_slowDealloc(v182, -1, -1);

      swift_bridgeObjectRelease();
      sub_10000882C(v238, (uint64_t *)&unk_100839C80);
      v196 = v235;
    }
    else
    {
      v197 = *(_QWORD *)(v0 + 344);

      swift_bridgeObjectRelease();
      sub_10000882C(v180, (uint64_t *)&unk_100839C80);
      v192 = *(void (**)(uint64_t, uint64_t, __n128))(v248 + 8);
      ((void (*)(uint64_t, uint64_t))v192)(v178, v179);
      swift_release_n(v197);

      sub_10000882C(v238, (uint64_t *)&unk_100839C80);
      v196 = v177;
    }
    ((void (*)(uint64_t, uint64_t))v192)(v196, v179);
    v1 = v241;
LABEL_65:
    v10 = v243;
LABEL_7:
    v9 = v255 + 3;
    if (!--v10)
      goto LABEL_67;
  }
  v38(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448));
  if (*(_QWORD *)(v29 + 16))
  {
    v130 = sub_1002C65F8(*(_QWORD *)(v0 + 496));
    v131 = *(_QWORD *)(v0 + 392);
    if ((v132 & 1) != 0)
    {
      v133 = v130;
      v134 = *(_QWORD *)(v29 + 56);
      v135 = _s31ThreadSafePartialRepresentationVMa(0);
      v136 = *(_QWORD *)(v135 - 8);
      sub_1002912CC(v134 + *(_QWORD *)(v136 + 72) * v133, v131);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56))(v131, 0, 1, v135);
      goto LABEL_55;
    }
  }
  else
  {
    v131 = *(_QWORD *)(v0 + 392);
  }
  v135 = _s31ThreadSafePartialRepresentationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v131, 1, 1, v135);
LABEL_55:
  v30 = v33;
  v157 = *(_QWORD *)(v0 + 496);
  v158 = *(_QWORD *)(v0 + 448);
  v159 = *(_QWORD *)(v0 + 392);

  (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v157, v158);
  _s31ThreadSafePartialRepresentationVMa(0);
  v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 48))(v159, 1, v135);
  sub_10000882C(v159, &qword_100842850);
  *(_QWORD *)&v102 = swift_bridgeObjectRelease().n128_u64[0];
  v10 = v34;
  v17 = v246;
  if (v160 != 1)
    goto LABEL_37;
  v1 = v241;
  v16 = v233;
LABEL_18:
  v250 = v30;
  if (!*(_QWORD *)(v1 + 16) || (v40 = sub_10001A6DC(v16, v17), (v41 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_1008370A8 != -1)
      swift_once(&qword_1008370A8, sub_10027C514);
    v62 = *(_QWORD *)(v0 + 504);
    v63 = *(_QWORD *)(v0 + 472);
    v64 = *(_QWORD *)(v0 + 448);
    v65 = *(_QWORD *)(v0 + 344);
    v66 = type metadata accessor for Logger(0);
    sub_10001AAA8(v66, (uint64_t)qword_100842718);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 16))(v63, v62, v64);
    v67 = swift_retain_n(v65);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    v70 = os_log_type_enabled(v68, v69);
    v71 = *(_QWORD *)(v0 + 504);
    v72 = *(_QWORD *)(v0 + 472);
    v73 = *(_QWORD *)(v0 + 448);
    if (v70)
    {
      v74 = *(_QWORD *)(v0 + 352);
      v234 = *(_QWORD *)(v0 + 344);
      v75 = swift_slowAlloc(32, -1);
      v244 = v10;
      v76 = (_QWORD *)swift_slowAlloc(8, -1);
      v237 = v71;
      v77 = swift_slowAlloc(64, -1);
      v256[0] = v77;
      *(_DWORD *)v75 = 136446722;
      *(_QWORD *)(v0 + 248) = v74;
      v78 = swift_getMetatypeMetadata(v74);
      v79 = String.init<A>(describing:)(v0 + 248, v78);
      *(_QWORD *)(v75 + 4) = sub_10001A820(v79, v80, v256);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2114;
      v81 = *(void **)(v232 + 24);
      *(_QWORD *)(v75 + 14) = v81;
      *v76 = v81;
      v82 = v81;
      swift_release_n(v234);
      *(_WORD *)(v75 + 22) = 2082;
      v83 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v73, v83);
      *(_QWORD *)(v75 + 24) = sub_10001A820(v84, v85, v256);
      v86 = swift_bridgeObjectRelease();
      v13 = *(void (**)(uint64_t, uint64_t, __n128))(v248 + 8);
      v13(v72, v73, v86);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{public}s: Did not auto-categorize reminder due to grocery classifier having 0 predication for reminder title {listObjectID: %{public}@, reminderIdentifier: %{public}s}", (uint8_t *)v75, 0x20u);
      v87 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v76, 1, v87);
      v88 = v76;
      v10 = v244;
      swift_slowDealloc(v88, -1, -1);
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      swift_bridgeObjectRelease();
      v14 = v237;
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 344);

      v12 = swift_bridgeObjectRelease();
      v13 = *(void (**)(uint64_t, uint64_t, __n128))(v248 + 8);
      v13(v72, v73, v12);
      swift_release_n(v11);

      v14 = v71;
    }
    ((void (*)(uint64_t, uint64_t))v13)(v14, v73);
    v1 = v241;
    goto LABEL_7;
  }
  v243 = v10;
  v42 = *(_QWORD *)(v0 + 504);
  v43 = *(_QWORD *)(v0 + 480);
  v44 = *(_QWORD *)(v0 + 448);
  v45 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v40);
  v47 = *v45;
  v46 = v45[1];
  swift_bridgeObjectRetain(v46);
  v48 = swift_bridgeObjectRelease();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v248 + 16);
  v49(v43, v42, v44, v48);
  v50 = v240;
  v51 = swift_isUniquelyReferenced_nonNull_native(v240);
  v256[0] = (uint64_t)v240;
  v53 = sub_1002C65F8(v43);
  v54 = v240[2];
  v55 = (v52 & 1) == 0;
  result = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    v57 = v52;
    if (v240[3] >= result)
    {
      if ((v51 & 1) == 0)
      {
        sub_1002D85EC();
        v50 = (_QWORD *)v256[0];
      }
    }
    else
    {
      v58 = *(_QWORD *)(v0 + 480);
      sub_1002D12CC(result, v51);
      v59 = v256[0];
      v60 = sub_1002C65F8(v58);
      if ((v57 & 1) != (v61 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 448));
      v53 = v60;
      v50 = (_QWORD *)v59;
    }
    v240 = v50;
    if ((v57 & 1) != 0)
    {
      v89 = (_QWORD *)(v50[7] + 16 * v53);
      swift_bridgeObjectRelease();
      *v89 = v47;
      v89[1] = v46;
    }
    else
    {
      v90 = *(_QWORD *)(v0 + 480);
      v91 = *(_QWORD *)(v0 + 448);
      v50[(v53 >> 6) + 8] |= 1 << v53;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v49)(v50[6] + *(_QWORD *)(v248 + 72) * v53, v90, v91);
      v92 = (_QWORD *)(v50[7] + 16 * v53);
      *v92 = v47;
      v92[1] = v46;
      v93 = v50[2];
      v94 = __OFADD__(v93, 1);
      v95 = v93 + 1;
      if (v94)
        goto LABEL_70;
      v50[2] = v95;
    }
    v96 = *(_QWORD *)(v0 + 504);
    v97 = *(_QWORD *)(v0 + 480);
    v98 = *(_QWORD *)(v0 + 448);
    v99 = swift_bridgeObjectRelease();
    v100 = *(void (**)(uint64_t, uint64_t, __n128))(v248 + 8);
    v100(v97, v98, v99);

    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v100)(v96, v98);
    goto LABEL_65;
  }
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

uint64_t sub_100280E00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 760);
  *(_QWORD *)(*v1 + 768) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 752);
  (*(void (**)(_QWORD, _QWORD))(v2 + 696))(*(_QWORD *)(v2 + 576), *(_QWORD *)(v2 + 560));
  swift_release(v4);
  if (v0)
    v5 = sub_10028281C;
  else
    v5 = sub_100280E88;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100280E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 528);
  v11 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 496);
  v13 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 480);
  v15 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 416);
  v21 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 392);
  v23 = *(_QWORD *)(v0 + 384);
  v24 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 632));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028100C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  swift_release(*(_QWORD *)(v0 + 632));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 496);
  v10 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 432);
  v18 = *(_QWORD *)(v0 + 424);
  v19 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 584));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028117C()
{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  void (*v55)(uint64_t, uint64_t, __n128);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  void (*v125)(uint64_t, uint64_t, __n128);
  uint64_t v126;
  double v127;
  id v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  void (*v142)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  Class isa;
  unint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  Class v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  int v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  __n128 v216;
  void (*v217)(uint64_t, uint64_t, __n128);
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __n128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  __int128 *v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  id v239;
  id v240;
  uint64_t v241;
  _QWORD *v242;
  __n128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  os_log_type_t type;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  os_log_type_t v279;
  void *v280;
  void *v281;
  void (*v282)(uint64_t, _QWORD, uint64_t);
  uint64_t v283;
  id v284;
  void *v285;
  void (*v286)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t *v287;
  uint64_t v288[2];

  v1 = (void (*)(_QWORD, _QWORD, _QWORD, __n128))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 744);
  if (qword_1008370A8 != -1)
    goto LABEL_72;
  while (1)
  {
    v3 = *(_QWORD *)(v0 + 648);
    v4 = *(_QWORD *)(v0 + 344);
    v268 = type metadata accessor for Logger(0);
    sub_10001AAA8(v268, (uint64_t)qword_100842718);
    swift_retain_n(v4);
    swift_bridgeObjectRetain(v3);
    swift_errorRetain(v2);
    swift_bridgeObjectRetain(v3);
    swift_retain();
    v5 = swift_errorRetain(v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v263 = *(_QWORD *)(v0 + 640);
      v279 = v7;
      v286 = v1;
      v9 = *(_QWORD *)(v0 + 344);
      v8 = *(_QWORD *)(v0 + 352);
      v260 = *(_QWORD *)(v0 + 648);
      v10 = swift_slowAlloc(52, -1);
      v261 = (_QWORD *)swift_slowAlloc(8, -1);
      v283 = swift_slowAlloc(128, -1);
      v288[0] = v283;
      *(_DWORD *)v10 = 136447234;
      *(_QWORD *)(v0 + 312) = v8;
      MetatypeMetadata = swift_getMetatypeMetadata(v8);
      v12 = String.init<A>(describing:)(v0 + 312, MetatypeMetadata);
      *(_QWORD *)(v0 + 256) = sub_10001A820(v12, v13, v288);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2114;
      v14 = *(void **)(v9 + 24);
      *(_QWORD *)(v0 + 264) = v14;
      v15 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272);
      *v261 = v14;
      swift_release_n(v9);
      *(_WORD *)(v10 + 22) = 2082;
      v16 = *(_QWORD *)(v9 + 32);
      v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v16);
      v19 = Array.description.getter(v18, v17);
      v21 = v20;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 272) = sub_10001A820(v19, v21, v288);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280);
      v22 = v9;
      v1 = v286;
      swift_release_n(v22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 32) = 2082;
      swift_bridgeObjectRetain(v260);
      *(_QWORD *)(v0 + 280) = sub_10001A820(v263, v260, v288);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288);
      swift_bridgeObjectRelease_n(v260, 3);
      *(_WORD *)(v10 + 42) = 2082;
      swift_getErrorValue(v2, v0 + 288, v0 + 40);
      v23 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
      *(_QWORD *)(v0 + 304) = sub_10001A820(v23, v24, v288);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v6, v279, "%{public}s: Failed to predict categories of reminder titles {listObjectID: %{public}@, reminderIDs: %{public}s, groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v10, 0x34u);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v261, 1, v25);
      swift_slowDealloc(v261, -1, -1);
      swift_arrayDestroy(v283, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v283, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 344);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 648), 2);
      swift_release_n(v26);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
    }

    v27 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v2);
    v28 = *(_QWORD *)(v0 + 616);
    swift_beginAccess(v28 + 16, v1, 0, 0);
    v29 = *(_QWORD *)(v28 + 16);
    v30 = *(_QWORD *)(v29 + 16);
    v273 = v27;
    if (!v30)
      break;
    v256 = v0 + 64;
    v247 = v0 + 216;
    v248 = v0 + 208;
    v246 = v0 + 224;
    v255 = *(_QWORD *)(v0 + 544);
    v277 = *(_QWORD *)(v0 + 456);
    v245 = *(_QWORD *)(v0 + 368);
    v262 = *(_QWORD *)(v0 + 344);
    v31 = *(_QWORD *)(v0 + 608) + 16;
    v32 = v27;
    v33 = *(_QWORD *)(v0 + 600) + 16;
    v34 = *(_QWORD *)(v0 + 592) + 16;
    swift_bridgeObjectRetain(v29);
    v35 = v34;
    v36 = v30;
    swift_beginAccess(v35, v0 + 136, 0, 0);
    v37 = v33;
    v38 = v32;
    swift_beginAccess(v37, v0 + 160, 0, 0);
    v39 = swift_beginAccess(v31, v0 + 88, 0, 0);
    v40 = (uint64_t *)(v29 + 48);
    v267 = &_swiftEmptyDictionarySingleton;
    v39.n128_u64[0] = 136447234;
    v244 = v39;
    while (1)
    {
      v57 = *(_QWORD *)(v0 + 592);
      v58 = *(v40 - 1);
      v287 = v40;
      v59 = *v40;
      v284 = (id)*(v40 - 2);
      v60 = objc_msgSend(v284, "uuid", swift_bridgeObjectRetain(v59).n128_f64[0]);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

      v61 = *(void **)(v57 + 16);
      if (!v61)
      {
        swift_bridgeObjectRetain(v59);
        v73 = 0;
        v67 = v277;
        goto LABEL_20;
      }
      v62 = *(_QWORD *)(v0 + 448);
      v63 = objc_msgSend(v61, "membershipByMemberIdentifier", swift_bridgeObjectRetain(v59).n128_f64[0]);
      v64 = sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
      v65 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v63, v62, v64, v65);

      v67 = v277;
      if (!*(_QWORD *)(v66 + 16) || (v68 = sub_1002C65F8(*(_QWORD *)(v0 + 504)), (v69 & 1) == 0))
      {
        swift_bridgeObjectRelease();
LABEL_18:
        v73 = 0;
        goto LABEL_20;
      }
      v70 = *(_QWORD *)(v0 + 600);
      v265 = *(void **)(*(_QWORD *)(v66 + 56) + 8 * v68);
      v71 = v265;
      swift_bridgeObjectRelease();
      if (!v71)
        goto LABEL_18;
      v271 = v36;
      v72 = *(_QWORD *)(v70 + 16);
      swift_bridgeObjectRetain(v72);
      v73 = v71;
      v74 = objc_msgSend(v73, "groupIdentifier");
      v258 = v58;
      if (!v74)
      {
        v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v277 + 56);
        v80(*(_QWORD *)(v0 + 440), 1, 1, *(_QWORD *)(v0 + 448));
        goto LABEL_38;
      }
      v75 = v74;
      v76 = *(_QWORD *)(v0 + 488);
      v78 = *(_QWORD *)(v0 + 440);
      v77 = *(_QWORD *)(v0 + 448);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

      v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 32);
      v79(v78, v76, v77);
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v277 + 56);
      v80(v78, 0, 1, v77);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v277 + 48))(v78, 1, v77) != 1)
        break;
      v38 = v273;
LABEL_38:
      v126 = *(_QWORD *)(v0 + 440);

      sub_10000882C(v126, (uint64_t *)&unk_100839C80);
      *(_QWORD *)&v127 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_39:
      v275 = v59;
      v281 = v73;
      v128 = objc_msgSend(v73, "groupIdentifier", v127, *(_OWORD *)&v244);
      if (v128)
      {
        v129 = v128;
        v130 = v38;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v128);

        v131 = 0;
      }
      else
      {
        v130 = v38;
        v131 = 1;
      }
      v132 = *(_QWORD *)(v0 + 608);
      v133 = *(_QWORD *)(v0 + 600);
      v134 = *(_QWORD *)(v0 + 552);
      v135 = *(_QWORD *)(v0 + 536);
      v137 = *(_QWORD *)(v0 + 424);
      v136 = *(_QWORD *)(v0 + 432);
      v138 = *(_QWORD *)(v0 + 384);
      v80(v137, v131, 1, *(_QWORD *)(v0 + 448));
      sub_1000A5CA8(v137, v136, (uint64_t *)&unk_100839C80);
      v139 = *(void **)(v132 + 16);
      v140 = *(_QWORD *)(v133 + 16);
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v255 + 16);
      v141(v138, v134, v135);
      v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v255 + 56);
      v142(v138, 0, 1, v135);
      v143 = v139;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRetain(v140);
      LOBYTE(v132) = sub_100290164(v139, v130, v265, v140, v138, v258, v275);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000882C(v138, (uint64_t *)&unk_10083FBE0);
      v257 = v132;
      if ((v132 & 1) != 0)
      {
        v144 = *(_QWORD *)(v0 + 552);
        v145 = *(_QWORD *)(v0 + 536);
        v146 = *(_QWORD *)(v0 + 448);
        v147 = *(_QWORD *)(v0 + 432);
        v148 = *(_QWORD *)(v0 + 416);
        v149 = *(_QWORD *)(v0 + 384);
        *(_QWORD *)(v0 + 184) = v258;
        *(_QWORD *)(v0 + 192) = v275;
        v141(v149, v144, v145);
        v142(v149, 0, 1, v145);
        v150 = sub_1000E525C();
        v253 = StringProtocol.lowercased(with:)(v149, &type metadata for String, v150);
        v152 = v151;
        sub_10000882C(v149, (uint64_t *)&unk_10083FBE0);
        v153 = sub_10011D420(v147, v148);
        static Date.now.getter(v153);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v277 + 48))(v148, 1, v146) == 1)
        {
          isa = 0;
        }
        else
        {
          v162 = *(_QWORD *)(v0 + 448);
          v163 = *(_QWORD *)(v0 + 416);
          isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v277 + 8))(v163, v162);
        }
        v164 = *(_QWORD *)(v0 + 632);
        v165 = *(_QWORD *)(v0 + 376);
        v166 = *(_QWORD *)(v0 + 360);
        v167 = objc_allocWithZone((Class)REMTimestampedUUID);
        v168 = Date._bridgeToObjectiveC()().super.isa;
        v169 = objc_msgSend(v167, "initWithIdentifier:modifiedOn:", isa, v168);

        (*(void (**)(uint64_t, uint64_t))(v245 + 8))(v165, v166);
        swift_beginAccess(v164 + 16, v256, 33, 0);
        v170 = *(_QWORD *)(v164 + 16);
        if (v169)
        {
          v171 = *(_QWORD *)(v0 + 632);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v170);
          v288[0] = *(_QWORD *)(v171 + 16);
          *(_QWORD *)(v171 + 16) = 0x8000000000000000;
          sub_10028EDA0((uint64_t)v169, v253, v152, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_1002D85E0, (void (*)(void))sub_1002D12C0);
          *(_QWORD *)(v171 + 16) = v288[0];
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain(*(_QWORD *)(v164 + 16));
          v173 = sub_10001A6DC(v253, v152);
          v175 = v174;
          swift_bridgeObjectRelease();
          if ((v175 & 1) != 0)
          {
            v176 = *(_QWORD *)(v0 + 632);
            v177 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v176 + 16));
            v178 = *(_QWORD *)(v176 + 16);
            v288[0] = v178;
            *(_QWORD *)(v176 + 16) = 0x8000000000000000;
            if ((v177 & 1) == 0)
            {
              sub_1002D85E0();
              v178 = v288[0];
            }
            v179 = *(_QWORD *)(v0 + 632);
            swift_bridgeObjectRelease();
            v180 = *(void **)(*(_QWORD *)(v178 + 56) + 8 * v173);
            sub_1002899C4(v173, v178);
            *(_QWORD *)(v179 + 16) = v178;

            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        v186 = *(_QWORD *)(v0 + 648);
        v187 = *(_QWORD *)(v0 + 640);
        v188 = *(_QWORD *)(v0 + 600);
        v189 = *(_QWORD *)(v0 + 432);
        swift_endAccess(v256);
        v190 = *(_QWORD *)(v188 + 16);
        swift_bridgeObjectRetain(v190);
        sub_100290CC8(v258, v275, v265, v190, v189, v187, v186);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (qword_1008370A8 != -1)
        swift_once(&qword_1008370A8, sub_10027C514);
      v191 = *(_QWORD *)(v0 + 504);
      v192 = *(_QWORD *)(v0 + 464);
      v193 = *(_QWORD *)(v0 + 448);
      v194 = *(_QWORD *)(v0 + 432);
      v195 = *(_QWORD *)(v0 + 408);
      v196 = *(_QWORD *)(v0 + 344);
      sub_10001AAA8(v268, (uint64_t)qword_100842718);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 16))(v192, v191, v193);
      sub_10011D420(v194, v195);
      v197 = swift_retain_n(v196);
      v198 = Logger.logObject.getter(v197);
      v199 = static os_log_type_t.default.getter(v198);
      v200 = os_log_type_enabled(v198, v199);
      v201 = *(_QWORD *)(v0 + 504);
      v202 = *(_QWORD *)(v0 + 464);
      v203 = *(_QWORD *)(v0 + 448);
      v204 = *(_QWORD *)(v0 + 432);
      v205 = *(_QWORD *)(v0 + 408);
      if (v200)
      {
        v251 = *(_QWORD *)(v0 + 400);
        v266 = *(_QWORD *)(v0 + 504);
        v206 = *(_QWORD *)(v0 + 352);
        v249 = *(_QWORD *)(v0 + 344);
        type = v199;
        v207 = swift_slowAlloc(48, -1);
        v250 = (_QWORD *)swift_slowAlloc(8, -1);
        v259 = swift_slowAlloc(96, -1);
        v288[0] = v259;
        *(_DWORD *)v207 = v244.n128_u32[0];
        *(_QWORD *)(v0 + 296) = v206;
        v208 = swift_getMetatypeMetadata(v206);
        v209 = String.init<A>(describing:)(v0 + 296, v208);
        *(_QWORD *)(v0 + 200) = sub_10001A820(v209, v210, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v248);
        swift_bridgeObjectRelease();
        *(_WORD *)(v207 + 12) = 2114;
        v254 = v204;
        v211 = *(void **)(v262 + 24);
        *(_QWORD *)(v0 + 208) = v211;
        v212 = v211;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v248, v247);
        *v250 = v211;
        swift_release_n(v249);
        *(_WORD *)(v207 + 22) = 2082;
        v213 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v214 = dispatch thunk of CustomStringConvertible.description.getter(v203, v213);
        *(_QWORD *)(v0 + 216) = sub_10001A820(v214, v215, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v247, v246);
        v216 = swift_bridgeObjectRelease();
        v217 = *(void (**)(uint64_t, uint64_t, __n128))(v277 + 8);
        v217(v202, v203, v216);
        *(_WORD *)(v207 + 32) = 2082;
        v218 = Optional.descriptionOrNil.getter(v251);
        *(_QWORD *)(v0 + 224) = sub_10001A820(v218, v219, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v246, v0 + 232);
        swift_bridgeObjectRelease();
        sub_10000882C(v205, (uint64_t *)&unk_100839C80);
        *(_WORD *)(v207 + 42) = 1026;
        *(_DWORD *)(v0 + 776) = v257 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 780);
        _os_log_impl((void *)&_mh_execute_header, v198, type, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, hasUpdatedGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v207, 0x30u);
        v220 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v250, 1, v220);
        swift_slowDealloc(v250, -1, -1);
        swift_arrayDestroy(v259, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v259, -1, -1);
        swift_slowDealloc(v207, -1, -1);

        swift_bridgeObjectRelease();
        sub_10000882C(v254, (uint64_t *)&unk_100839C80);
        ((void (*)(uint64_t, uint64_t))v217)(v266, v203);
      }
      else
      {
        v221 = *(_QWORD *)(v0 + 344);
        swift_bridgeObjectRelease();

        sub_10000882C(v205, (uint64_t *)&unk_100839C80);
        v222 = *(void (**)(uint64_t, uint64_t))(v277 + 8);
        v222(v202, v203);

        swift_release_n(v221);
        sub_10000882C(v204, (uint64_t *)&unk_100839C80);
        v222(v201, v203);
      }
      v38 = v273;
LABEL_66:
      v36 = v271;
LABEL_9:
      v40 = v287 + 3;
      if (!--v36)
        goto LABEL_68;
    }
    v79(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448));
    if (*(_QWORD *)(v72 + 16))
    {
      v155 = sub_1002C65F8(*(_QWORD *)(v0 + 496));
      v156 = *(_QWORD *)(v0 + 392);
      if ((v157 & 1) != 0)
      {
        v158 = v155;
        v159 = *(_QWORD *)(v72 + 56);
        v160 = _s31ThreadSafePartialRepresentationVMa(0);
        v161 = *(_QWORD *)(v160 - 8);
        sub_1002912CC(v159 + *(_QWORD *)(v161 + 72) * v158, v156);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v156, 0, 1, v160);
        goto LABEL_57;
      }
    }
    else
    {
      v156 = *(_QWORD *)(v0 + 392);
    }
    v160 = _s31ThreadSafePartialRepresentationVMa(0);
    v161 = *(_QWORD *)(v160 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56))(v156, 1, 1, v160);
LABEL_57:
    v181 = *(_QWORD *)(v0 + 496);
    v182 = *(_QWORD *)(v0 + 448);
    v183 = *(_QWORD *)(v0 + 392);

    (*(void (**)(uint64_t, uint64_t))(v277 + 8))(v181, v182);
    _s31ThreadSafePartialRepresentationVMa(0);
    v184 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
    v67 = v277;
    v185 = v184(v183, 1, v160);
    sub_10000882C(v183, &qword_100842850);
    *(_QWORD *)&v127 = swift_bridgeObjectRelease().n128_u64[0];
    v38 = v273;
    v58 = v258;
    if (v185 != 1)
      goto LABEL_39;
    v36 = v271;
LABEL_20:
    v280 = v73;
    if (!*(_QWORD *)(v38 + 16) || (v81 = sub_10001A6DC(v58, v59), (v82 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      if (qword_1008370A8 != -1)
        swift_once(&qword_1008370A8, sub_10027C514);
      v101 = *(_QWORD *)(v0 + 504);
      v102 = *(_QWORD *)(v0 + 472);
      v103 = *(_QWORD *)(v0 + 448);
      v104 = *(_QWORD *)(v0 + 344);
      sub_10001AAA8(v268, (uint64_t)qword_100842718);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v102, v101, v103);
      v105 = swift_retain_n(v104);
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.default.getter(v106);
      v108 = os_log_type_enabled(v106, v107);
      v109 = *(_QWORD *)(v0 + 504);
      v110 = *(_QWORD *)(v0 + 472);
      v111 = *(_QWORD *)(v0 + 448);
      if (v108)
      {
        v41 = v36;
        v42 = *(_QWORD *)(v0 + 352);
        v264 = *(_QWORD *)(v0 + 344);
        v43 = swift_slowAlloc(32, -1);
        v270 = v109;
        v44 = (_QWORD *)swift_slowAlloc(8, -1);
        v45 = swift_slowAlloc(64, -1);
        v288[0] = v45;
        *(_DWORD *)v43 = 136446722;
        *(_QWORD *)(v0 + 248) = v42;
        v46 = swift_getMetatypeMetadata(v42);
        v47 = String.init<A>(describing:)(v0 + 248, v46);
        *(_QWORD *)(v43 + 4) = sub_10001A820(v47, v48, v288);
        v36 = v41;
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2114;
        v49 = *(void **)(v262 + 24);
        *(_QWORD *)(v43 + 14) = v49;
        *v44 = v49;
        v50 = v49;
        swift_release_n(v264);
        *(_WORD *)(v43 + 22) = 2082;
        v51 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v111, v51);
        *(_QWORD *)(v43 + 24) = sub_10001A820(v52, v53, v288);
        v54 = swift_bridgeObjectRelease();
        v55 = *(void (**)(uint64_t, uint64_t, __n128))(v277 + 8);
        v55(v110, v111, v54);
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "%{public}s: Did not auto-categorize reminder due to grocery classifier having 0 predication for reminder title {listObjectID: %{public}@, reminderIdentifier: %{public}s}", (uint8_t *)v43, 0x20u);
        v56 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v44, 1, v56);
        swift_slowDealloc(v44, -1, -1);
        swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v55)(v270, v111);
      }
      else
      {
        v112 = *(_QWORD *)(v0 + 344);
        swift_bridgeObjectRelease();

        v113 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
        v113(v110, v111);

        swift_release_n(v112);
        v113(v109, v111);
      }
      v38 = v273;
      goto LABEL_9;
    }
    v271 = v36;
    v83 = *(_QWORD *)(v0 + 504);
    v84 = *(_QWORD *)(v0 + 480);
    v2 = *(_QWORD *)(v0 + 448);
    v85 = v38;
    v86 = (uint64_t *)(*(_QWORD *)(v38 + 56) + 16 * v81);
    v88 = *v86;
    v87 = v86[1];
    swift_bridgeObjectRetain(v87);
    v89 = swift_bridgeObjectRelease();
    v1 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v67 + 16);
    v1(v84, v83, v2, v89);
    v90 = v267;
    v91 = swift_isUniquelyReferenced_nonNull_native(v267);
    v288[0] = (uint64_t)v267;
    v93 = sub_1002C65F8(v84);
    v94 = v267[2];
    v95 = (v92 & 1) == 0;
    v96 = v94 + v95;
    if (!__OFADD__(v94, v95))
    {
      v2 = v92;
      if (v267[3] >= v96)
      {
        if ((v91 & 1) == 0)
        {
          sub_1002D85EC();
          v90 = (_QWORD *)v288[0];
        }
      }
      else
      {
        v97 = *(_QWORD *)(v0 + 480);
        sub_1002D12CC(v96, v91);
        v98 = v288[0];
        v99 = sub_1002C65F8(v97);
        if ((v2 & 1) != (v100 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 448));
        v93 = v99;
        v90 = (_QWORD *)v98;
      }
      v38 = v85;
      v267 = v90;
      if ((v2 & 1) != 0)
      {
        v114 = (_QWORD *)(v90[7] + 16 * v93);
        swift_bridgeObjectRelease();
        *v114 = v88;
        v114[1] = v87;
      }
      else
      {
        v115 = *(_QWORD *)(v0 + 480);
        v116 = *(_QWORD *)(v0 + 448);
        v90[(v93 >> 6) + 8] |= 1 << v93;
        ((void (*)(unint64_t, uint64_t, uint64_t))v1)(v90[6] + *(_QWORD *)(v277 + 72) * v93, v115, v116);
        v117 = (_QWORD *)(v90[7] + 16 * v93);
        *v117 = v88;
        v117[1] = v87;
        v118 = v90[2];
        v119 = __OFADD__(v118, 1);
        v120 = v118 + 1;
        if (v119)
          goto LABEL_71;
        v90[2] = v120;
      }
      v121 = *(_QWORD *)(v0 + 504);
      v122 = *(_QWORD *)(v0 + 480);
      v123 = *(_QWORD *)(v0 + 448);
      v124 = swift_bridgeObjectRelease();
      v125 = *(void (**)(uint64_t, uint64_t, __n128))(v277 + 8);
      v125(v122, v123, v124);

      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v125)(v121, v123);
      goto LABEL_66;
    }
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_once(&qword_1008370A8, sub_10027C514);
  }
  swift_bridgeObjectRetain(v29);
  v267 = &_swiftEmptyDictionarySingleton;
LABEL_68:
  v223 = *(_QWORD *)(v0 + 552);
  v224 = *(_QWORD *)(v0 + 544);
  v225 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v226 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, __n128))(v224 + 8))(v223, v225, v226);
  v278 = *(_DWORD *)(v0 + 780);
  v282 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 672);
  v285 = *(void **)(v0 + 656);
  v227 = *(_QWORD *)(v0 + 648);
  v269 = *(_QWORD *)(v0 + 640);
  v272 = *(_QWORD *)(v0 + 632);
  v228 = *(_QWORD *)(v0 + 624);
  v229 = *(_QWORD *)(v0 + 608);
  v230 = *(_QWORD *)(v0 + 592);
  v274 = *(_QWORD *)(v0 + 576);
  v276 = *(_QWORD *)(v0 + 560);
  v231 = *(_QWORD *)(v0 + 344);
  v232 = *(_QWORD *)(v0 + 352);
  v234 = *(__int128 **)(v0 + 328);
  v233 = *(void **)(v0 + 336);
  v235 = swift_allocObject(&unk_1007EBC08, 24, 7);
  swift_weakInit(v235 + 16, v231);
  v236 = swift_allocObject(&unk_1007EBC58, 144, 7);
  *(_QWORD *)(v0 + 752) = v236;
  *(_QWORD *)(v236 + 16) = v235;
  *(_QWORD *)(v236 + 24) = v233;
  v238 = *v234;
  v237 = v234[1];
  *(_OWORD *)(v236 + 57) = *(__int128 *)((char *)v234 + 25);
  *(_OWORD *)(v236 + 32) = v238;
  *(_OWORD *)(v236 + 48) = v237;
  *(_QWORD *)(v236 + 80) = v269;
  *(_QWORD *)(v236 + 88) = v227;
  *(_QWORD *)(v236 + 96) = v267;
  *(_QWORD *)(v236 + 104) = v228;
  *(_QWORD *)(v236 + 112) = v230;
  *(_QWORD *)(v236 + 120) = v272;
  *(_QWORD *)(v236 + 128) = v229;
  *(_QWORD *)(v236 + 136) = v232;
  v282(v274, v278, v276);
  swift_bridgeObjectRetain(v227);
  v239 = v233;
  v240 = v285;
  sub_1002898E8((id *)(v0 + 240));
  v241 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v242 = (_QWORD *)swift_task_alloc(v241);
  *(_QWORD *)(v0 + 760) = v242;
  *v242 = v0;
  v242[1] = sub_100280E00;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_10028281C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  swift_release(*(_QWORD *)(v0 + 632));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 496);
  v10 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 432);
  v18 = *(_QWORD *)(v0 + 424);
  v19 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 584));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10028298C(_QWORD *a1, id *a2, uint64_t a3)
{
  id v5;
  id v6;
  double result;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v5 = *a2;
  v6 = objc_msgSend(*a2, "canonicalName");
  if (v6)
  {

  }
  else
  {
    v8 = objc_msgSend(v5, "displayName");
    if (v8)
    {
      v9 = v8;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

      v10 = sub_1000E525C();
      v11 = StringProtocol.lowercased(with:)(a3, &type metadata for String, v10);
      v13 = v12;
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(*a1 + 16)
        || (swift_bridgeObjectRetain(v13),
            sub_10001A6DC(v11, v13),
            v15 = v14,
            swift_bridgeObjectRelease(),
            (v15 & 1) == 0))
      {
        v16 = v5;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
        v18 = *a1;
        *a1 = 0x8000000000000000;
        sub_10028EDA0((uint64_t)v16, v11, v13, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_1002D885C, (void (*)(void))sub_1002D1678);
        *a1 = v18;
        swift_bridgeObjectRelease();
      }
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    }
  }
  return result;
}

void sub_100282AF8(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  __int128 v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  char v36[40];
  char v37[80];
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40;

  v34 = a2;
  v4 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  v35 = xmmword_1006A7330;
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a1;
  v40 = v8;
  specialized Array._endMutation()(v8);
  *v6 = v40;
  swift_storeEnumTagMultiPayload(v6, v4, 4);
  inited = swift_initStackObject(v7, v37);
  *(_OWORD *)(inited + 16) = xmmword_1006B1EB0;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B1FA8);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006B1FE0);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006B2038);
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1006B2060);
  *(_QWORD *)(inited + 64) = swift_getKeyPath(&unk_1006B20B0);
  KeyPath = swift_getKeyPath(&unk_1006B2100);
  *(_QWORD *)(inited + 72) = KeyPath;
  v40 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = v40;
  v12 = swift_initStackObject(v7, v36);
  *(_OWORD *)(v12 + 16) = v35;
  v13 = swift_getKeyPath(&unk_1006B2130);
  *(_QWORD *)(v12 + 32) = v13;
  v40 = v12;
  specialized Array._endMutation()(v13);
  v14 = v40;
  v15 = a1;
  sub_10000A3AC();
  v17 = (void *)v16;
  v18 = (void *)sub_100358F8C(v11, v14, 0, v16);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "setSortDescriptors:", isa);

  v20 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v21 = NSManagedObjectContext.fetch<A>(_:)(v18, v20);
  if (v2)
  {

    sub_10001C744((uint64_t)v6, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  *(_QWORD *)&v35 = v15;
  v40 = v21;
  v22 = sub_10001A630(&qword_10083FF50);
  v23 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = Sequence.elements<A>(ofType:)(v20, v22, v20, v23);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v6, _s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v30 = v24;
    else
      v30 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease();
    v25 = v35;
    if (v31)
      goto LABEL_7;
LABEL_15:
    swift_bridgeObjectRelease();
    v32 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v25);
    swift_willThrow(v32);
    return;
  }
  v25 = v35;
  if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_7:
  if ((v24 & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = *(id *)(v24 + 32);
LABEL_10:
    v27 = v26;
    swift_bridgeObjectRelease();
    sub_100292134(v27, (uint64_t)&v38);
    v28 = v39[0];
    v29 = v34;
    *v34 = v38;
    v29[1] = v28;
    *(_OWORD *)((char *)v29 + 25) = *(_OWORD *)((char *)v39 + 9);
    return;
  }
  __break(1u);
}

void sub_100282F14(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_groceryLocaleID, a2);
}

void sub_100282F20(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setGroceryLocaleID_);
}

void sub_100282F2C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_membershipsOfRemindersInSectionsAsData, a2);
}

void sub_100282F38(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setMembershipsOfRemindersInSectionsAsData_);
}

void sub_100282F44(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_groceryLocalCorrectionsAsData, a2);
}

void sub_100282F50(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setGroceryLocalCorrectionsAsData_);
}

void sub_100282F5C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_resolutionTokenMap_v3_JSONData, a2);
}

void sub_100282F68(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setResolutionTokenMap_v3_JSONData_);
}

void sub_100282F74(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  void *v37;
  char v38;
  char v39;
  char isUniquelyReferenced_nonNull_native;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  id v65;

  v4 = v3;
  v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  v10 = (char **)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = (char *)a1;
  *((_BYTE *)v10 + 8) = 0;
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = qword_100837260;
  swift_bridgeObjectRetain(a1);
  if (v12 != -1)
LABEL_41:
    swift_once(&qword_100837260, sub_10033CFDC);
  v13 = sub_100340EC0((uint64_t)v10, (objc_class *)qword_100871E48, (uint64_t)a2, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  v14 = v4;
  sub_10001C744((uint64_t)v10, _s10PredicatesOMa);
  if (!v4)
  {
    a2 = (_QWORD *)sub_1002B0B0C((uint64_t)_swiftEmptyArrayStorage);
    v64 = v13;
    if ((unint64_t)v13 >> 62)
    {
LABEL_44:
      if (v13 < 0)
        v55 = v13;
      else
        v55 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v13, 2);
      v15 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
    }
    v57 = v14;
    v58 = a1;
    v59 = (_QWORD *)a3;
    if (v15)
    {
      v16 = v15;
      a1 = v64;
      a3 = v64 & 0xC000000000000001;
      v17 = 4;
      v10 = &selRef_isConcealed;
      v63 = v64 & 0xC000000000000001;
      v60 = v15;
      while (1)
      {
        v4 = v17 - 4;
        if (a3)
          v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a1);
        else
          v18 = *(id *)(a1 + 8 * v17);
        v13 = (uint64_t)v18;
        v19 = v17 - 3;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        v20 = objc_msgSend(v18, v10[303]);

        if (!v20)
          break;

LABEL_8:
        ++v17;
        if (v19 == v16)
          goto LABEL_37;
      }
      v65 = 0;
      v21 = objc_msgSend((id)v13, "remObjectIDWithError:", &v65);
      v22 = v65;
      if (!v21)
      {
        v53 = v65;
        _convertNSErrorToError(_:)(v22);

        swift_willThrow(v54);
        swift_bridgeObjectRelease_n(a1, 2);

        swift_bridgeObjectRelease();
        return;
      }
      v23 = v21;
      v24 = v22;
      v25 = objc_msgSend((id)v13, "remObjectID");
      if (!v25)
        goto LABEL_23;
      v26 = v25;
      v27 = objc_msgSend((id)v13, "title");
      if (!v27)
      {

        a3 = v63;
LABEL_23:
        swift_bridgeObjectRetain(a2);
        v36 = sub_1002C66DC((uint64_t)v23);
        v37 = v23;
        v39 = v38;
        swift_bridgeObjectRelease();
        if ((v39 & 1) != 0)
        {
          v62 = v37;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
          v65 = a2;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002D8868();
            a2 = v65;
          }

          v41 = *(void **)(a2[7] + 24 * v36);
          sub_10028A654(v36, (uint64_t)a2);

          swift_bridgeObjectRelease();
          v42 = v62;

          swift_bridgeObjectRelease();
          a3 = v63;
        }
        else
        {

        }
        v10 = &selRef_isConcealed;
        a1 = v64;
        goto LABEL_8;
      }
      v28 = v27;
      v14 = (uint64_t)v23;
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v62 = v29;

      a1 = swift_isUniquelyReferenced_nonNull_native(a2);
      v65 = a2;
      a3 = sub_1002C66DC((uint64_t)v23);
      v31 = a2[2];
      v32 = (v30 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v14 = v30;
      if (a2[3] < v33)
      {
        sub_1002D1684(v33, a1);
        v34 = sub_1002C66DC((uint64_t)v23);
        if ((v14 & 1) != (v35 & 1))
        {
          v56 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
          __break(1u);
          return;
        }
        a3 = v34;
        a2 = v65;
        if ((v14 & 1) == 0)
          goto LABEL_33;
LABEL_31:
        v43 = a2[7] + 24 * a3;
        v44 = *(void **)v43;
        swift_bridgeObjectRelease();

        v45 = v61;
        *(_QWORD *)v43 = v26;
        *(_QWORD *)(v43 + 8) = v45;
        *(_QWORD *)(v43 + 16) = v62;
LABEL_35:

        swift_bridgeObjectRelease();
        a3 = v63;
        a1 = v64;
        v16 = v60;
        v10 = &selRef_isConcealed;
        goto LABEL_8;
      }
      if ((a1 & 1) != 0)
      {
        a2 = v65;
        if ((v30 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        sub_1002D8868();
        a2 = v65;
        if ((v14 & 1) != 0)
          goto LABEL_31;
      }
LABEL_33:
      a2[(a3 >> 6) + 8] |= 1 << a3;
      *(_QWORD *)(a2[6] + 8 * a3) = v23;
      v46 = (_QWORD *)(a2[7] + 24 * a3);
      v47 = v61;
      *v46 = v26;
      v46[1] = v47;
      v46[2] = v62;
      v48 = a2[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_43;
      a2[2] = v50;
      v51 = v23;
      goto LABEL_35;
    }
    a1 = v64;
LABEL_37:
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRetain(a2);
    v52 = sub_10028FA74(v58, (uint64_t)a2);
    swift_bridgeObjectRelease_n(a2, 2);
    *v59 = v52;
  }
}

uint64_t sub_1002834D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[18] = a5;
  v6[19] = v5;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  v7 = sub_10001A630(&qword_100839A10);
  v6[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100283538, 0, 0);
}

uint64_t sub_100283538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v7 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v7, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v3;
  v31 = inited;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  sub_1001E190C(v9);
  v10 = sub_10015EC88(v31);
  v12 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  if ((sub_1001A560C(v12, v11, v10) & 1) != 0)
  {
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 112);
    static TaskPriority.high.getter();
    v18 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 0, 1, v18);
    sub_100018618(v14, v0 + 64);
    v19 = (_QWORD *)swift_allocObject(&unk_1007EBC80, 120, 7);
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v10;
    v19[5] = v6;
    v19[6] = v5;
    v19[7] = v15;
    v19[8] = v16;
    v19[9] = v17;
    sub_10001BCA8((__int128 *)(v0 + 64), (uint64_t)(v19 + 10));
    swift_bridgeObjectRetain(v16);
    swift_retain();
    swift_bridgeObjectRetain(v17);
    v20 = sub_1002845BC(v13, (uint64_t)&unk_100842870, (uint64_t)v19);
    *(_QWORD *)(v0 + 168) = v20;
    v21 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 176) = v21;
    v22 = sub_10001A630(&qword_100842878);
    v23 = sub_10001A630((uint64_t *)&unk_10083AA20);
    *v21 = v0;
    v21[1] = sub_100283850;
    return Task.value.getter(v0 + 104, v20, v22, v23, &protocol self-conformance witness table for Error);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1008370A8 != -1)
      swift_once(&qword_1008370A8, sub_10027C514);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001AAA8(v25, (uint64_t)qword_100842718);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDGroceryOperationCategorizeRemindersInList: primary locale is not a grocery locale in this device", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v30);
  }
}

uint64_t sub_100283850()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 168));
  if (v0)
    v4 = sub_1002838F8;
  else
    v4 = sub_1002838BC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002838BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1002838F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[15] = v10;
  v8[16] = v11;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a1;
  v8[10] = a4;
  return swift_task_switch(sub_100283958, 0, 0);
}

uint64_t sub_100283958()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 32) = &_swiftEmptyDictionarySingleton;
  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 136) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 88);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncReduce<A>(_:_:)[1]);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v4 = sub_10001A630(&qword_100842890);
  v5 = sub_1000A5F84((unint64_t *)&unk_1008458F0, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  *v2 = v0;
  v2[1] = sub_100283A50;
  return Sequence.asyncReduce<A>(_:_:)(v0 + 16, v0 + 32, &unk_100842888, v1, v3, v4, v5);
}

uint64_t sub_100283A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100283EAC;
  else
    v4 = sub_100283ACC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100283ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 160) = v1;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRetain(v2);
    v4 = sub_10001A6DC(v3, v2);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v0 + 120);
      v7 = *(_QWORD *)(v0 + 128);
      v8 = *(_QWORD *)(v0 + 80);
      v9 = (char *)*(id *)(*(_QWORD *)(v1 + 56) + 8 * v4);
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
      v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
      *(_QWORD *)(v0 + 168) = v10;
      swift_bridgeObjectRetain(v10);

      *(_QWORD *)(v0 + 56) = v6;
      *(_QWORD *)(v0 + 64) = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
      v12 = (_QWORD *)swift_task_alloc(64);
      *(_QWORD *)(v0 + 176) = v12;
      v12[2] = v8;
      v12[3] = v7;
      v12[4] = v1;
      v12[5] = v11;
      v12[6] = v10;
      v13 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncReduce<A>(_:_:)[1]);
      *(_QWORD *)(v0 + 184) = v13;
      v14 = sub_10001A630(&qword_100841A60);
      v15 = sub_10001A630(&qword_10083AEB8);
      v16 = sub_1000A5F84((unint64_t *)&qword_100841A68, &qword_100841A60, (uint64_t)&protocol conformance descriptor for Set<A>);
      *v13 = v0;
      v13[1] = sub_100283DFC;
      return Sequence.asyncReduce<A>(_:_:)(v0 + 48, v0 + 64, &unk_1008428A0, v12, v14, v15, v16);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1008370A8 != -1)
    swift_once(&qword_1008370A8, sub_10027C514);
  v18 = *(_QWORD *)(v0 + 112);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100842718);
  v20 = swift_bridgeObjectRetain_n(v18, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 112);
  if (v23)
  {
    v25 = *(_QWORD *)(v0 + 104);
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v29 = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(v24);
    *(_QWORD *)(v0 + 40) = sub_10001A820(v25, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v24, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDGroceryOperationCategorizeRemindersInList: cannot find primary grocery classifier for %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
  }

  v28 = *(unint64_t **)(v0 + 72);
  *v28 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100283DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100283EB8;
  else
    v4 = sub_100283E94;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100283E94()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 72) = *(_QWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100283EAC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100283EB8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100283EC4(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v5 = *a2;
  v4[2] = a1;
  v4[3] = v5;
  v6 = *a3;
  v7 = a3[1];
  v4[4] = *a3;
  v4[5] = v7;
  v8 = a4[1];
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v4[6] = v9;
  *v9 = v4;
  v9[1] = sub_100283F50;
  return v11(v6, v7);
}

uint64_t sub_100283F50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_10028406C;
  }
  else
  {
    *(_QWORD *)(v4 + 64) = a1;
    v6 = sub_100283FD8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100283FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  __n128 v7;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD **)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  sub_10028EDA0(v1, v3, v2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_1002D8A34, (void (*)(void))sub_1002D1988);
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRelease();
  *v5 = v4;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v7);
}

uint64_t sub_10028406C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100284078(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a1;
  v8[4] = a4;
  v9 = *a3;
  v10 = a3[1];
  v8[9] = *a2;
  v8[10] = v9;
  v8[11] = v10;
  return swift_task_switch(sub_1002840A8, 0, 0);
}

uint64_t sub_1002840A8(__n128 a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t (*v11)(void);

  sub_1000C54A4(*(_QWORD *)(v1 + 80), *(_QWORD **)(v1 + 88), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
  *(_QWORD *)(v1 + 96) = v2;
  v3 = v2[2];
  *(_QWORD *)(v1 + 104) = v3;
  if (v3)
  {
    *(_QWORD *)(v1 + 144) = 1;
    *(_DWORD *)(v1 + 192) = 0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    v4 = (void *)v2[5];
    *(_QWORD *)(v1 + 152) = v4;
    *(_QWORD *)(v1 + 16) = v2[4];
    v4;
    v5 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v7 = v6;
    *(_QWORD *)(v1 + 160) = v6;
    v8 = (_QWORD *)swift_task_alloc(dword_10083F324);
    *(_QWORD *)(v1 + 168) = v8;
    *v8 = v1;
    v8[1] = sub_10028420C;
    return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), 0x100000000, 1, 0, v5, v7, 0xD000000000000019);
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v1 + 72);
    **(_QWORD **)(v1 + 24) = v10;
    v11 = *(uint64_t (**)(void))(v1 + 8);
    swift_bridgeObjectRetain(v10);
    return v11();
  }
}

uint64_t sub_10028420C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = sub_100284578;
  }
  else
  {
    v5 = sub_10028429C;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_10028429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(char **)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 104);
  if (*(_QWORD *)(v1 + 16))
  {
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = *(_QWORD *)(v1 + 48);
    v8 = *(float *)(v1 + 56);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
    v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
    swift_bridgeObjectRetain(v9);

    if (v2 == v4)
    {
      swift_bridgeObjectRelease();
      if (!v7)
        goto LABEL_7;
LABEL_11:
      v15 = *(_QWORD *)(v0 + 184);
      sub_1000C5160(v5, v6, v7, v10, v9, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v8);
      if (v15)
      {
        swift_bridgeObjectRelease();
        v12 = swift_bridgeObjectRelease();
        v18 = *(void (**)(__n128))(v0 + 8);
LABEL_17:
        v18(v12);
        return;
      }
      v21 = v16;
      v22 = v17;
      v24 = *(_QWORD *)(v0 + 80);
      v23 = *(_QWORD *)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 72);
      v26 = *(_QWORD **)(v0 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v23);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      *v26 = 0x8000000000000000;
      sub_10028B8BC(v21, v22, v24, v23, isUniquelyReferenced_nonNull_native);
      *v26 = v25;
      swift_bridgeObjectRelease();
      v12 = swift_bridgeObjectRelease();
LABEL_16:
      v18 = *(void (**)(__n128))(v0 + 8);
      goto LABEL_17;
    }
    v13 = *(_QWORD *)(v0 + 144);
    v14 = v13 + 1;
    if (!__OFADD__(v13, 1))
    {
      if (v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      v20 = *(_QWORD *)(v0 + 96) + 16 * v13;
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    if (v2 == v4)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      v11 = *(_QWORD *)(v0 + 72);
      **(_QWORD **)(v0 + 24) = v11;
      v12 = swift_bridgeObjectRetain(v11);
      goto LABEL_16;
    }
    v19 = *(_QWORD *)(v0 + 144);
    v14 = v19 + 1;
    if (!__OFADD__(v19, 1))
    {
      v5 = *(_QWORD *)(v0 + 112);
      v6 = *(_QWORD *)(v0 + 120);
      v8 = *(float *)(v0 + 192);
      v10 = *(_QWORD *)(v0 + 128);
      v9 = *(_QWORD *)(v0 + 136);
      v20 = *(_QWORD *)(v0 + 96) + 16 * v19;
LABEL_19:
      *(_QWORD *)(v0 + 136) = v9;
      *(_QWORD *)(v0 + 144) = v14;
      *(_QWORD *)(v0 + 120) = v6;
      *(_QWORD *)(v0 + 128) = v10;
      *(float *)(v0 + 192) = v8;
      *(_QWORD *)(v0 + 112) = v5;
      v28 = *(void **)(v20 + 40);
      *(_QWORD *)(v0 + 152) = v28;
      *(_QWORD *)(v0 + 16) = *(_QWORD *)(v20 + 32);
      v28;
      v29 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v31 = v30;
      *(_QWORD *)(v0 + 160) = v30;
      v32 = (_QWORD *)swift_task_alloc(dword_10083F324);
      *(_QWORD *)(v0 + 168) = v32;
      *v32 = v0;
      v32[1] = sub_10028420C;
      REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), 0x100000000, 1, 0, v29, v31, 0xD000000000000019);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100284578()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002845AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002846FC(a1, a2, a3, (uint64_t)(&type metadata for () + 1));
}

uint64_t sub_1002845BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000882C(a1, &qword_100839A10);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_10001A630(&qword_100842878);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_1002846F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002846FC(a1, a2, a3, (uint64_t)&type metadata for Bool);
}

uint64_t sub_1002846FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_10000882C(a1, &qword_100839A10);
    v11 = 7168;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, a4, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v11 = v19 | 0x1C00;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, a4, a2, a3);
}

void sub_10028482C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  Class v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  id v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  __n128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  _QWORD *v102;

  v3 = v2;
  v5 = _s31ThreadSafePartialRepresentationVMa(0);
  v85 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v90 = (uint64_t)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v86 = (char *)&v81 - v8;
  __chkstk_darwin(v9);
  v89 = (uint64_t)&v81 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v94 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v81 - v14;
  v16 = type metadata accessor for UUID(0);
  v100 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v93 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v92 = (char *)&v81 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v81 - v21;
  __chkstk_darwin(v22);
  v96 = (char *)&v81 - v23;
  __chkstk_darwin(v24);
  v95 = (char *)&v81 - v25;
  v26 = *(_QWORD *)(v1 + 24);
  if (qword_100837750 != -1)
LABEL_41:
    swift_once(&qword_100837750, sub_1004E80E4);
  v27 = (objc_class *)qword_1008721E8;
  sub_1004E8204();
  v29 = sub_1004E892C(v26, 1, a1, v27, v28, 0);
  swift_bridgeObjectRelease();
  if (v3)
    return;
  v81 = 0;
  if ((unint64_t)v29 >> 62)
  {
LABEL_43:
    if (v29 < 0)
      v80 = v29;
    else
      v80 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v29, 2);
    v26 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease();
    v3 = v95;
    if (v26)
      goto LABEL_5;
LABEL_47:
    swift_bridgeObjectRelease();
    v88 = &_swiftEmptyDictionarySingleton;
LABEL_48:
    swift_bridgeObjectRelease();
    return;
  }
  v26 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v29);
  v3 = v95;
  if (!v26)
    goto LABEL_47;
LABEL_5:
  v82 = v5;
  v99 = v29 & 0xC000000000000001;
  v88 = &_swiftEmptyDictionarySingleton;
  v5 = 4;
  v97 = v29;
  v98 = v26;
  while (1)
  {
    a1 = v5 - 4;
    if (v99)
    {
      v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v29);
      v31 = v5 - 3;
      if (__OFADD__(a1, 1))
        goto LABEL_40;
    }
    else
    {
      v30 = *(id *)(v29 + 8 * v5);
      v31 = v5 - 3;
      if (__OFADD__(a1, 1))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
    v101 = v30;
    v32 = objc_msgSend(v30, "identifier", v81);
    if (v32)
      break;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v15, 1, 1, v16);
LABEL_7:
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
LABEL_8:
    v29 = v97;
    v26 = v98;
LABEL_9:

    ++v5;
    if (v31 == v26)
    {
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
  }
  v33 = v32;
  v34 = v96;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

  v35 = v100;
  v36 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
  v36(v15, v34, v16);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
  v37(v15, 0, 1, v16);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (v38(v15, 1, v16) == 1)
    goto LABEL_7;
  v36(v3, v15, v16);
  v39 = objc_msgSend(v101, "identifier");
  if (!v39)
  {
    v44 = (uint64_t)v94;
    v37(v94, 1, 1, v16);
    goto LABEL_22;
  }
  v40 = v39;
  v41 = v16;
  v42 = v15;
  v43 = v96;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

  v44 = (uint64_t)v94;
  v45 = v43;
  v15 = v42;
  v16 = v41;
  v3 = v95;
  v36(v94, v45, v16);
  v37((char *)v44, 0, 1, v16);
  if (v38((char *)v44, 1, v16) == 1)
  {
LABEL_22:
    sub_10000882C(v44, (uint64_t *)&unk_100839C80);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v3, v16);
    goto LABEL_8;
  }
  v46 = v91;
  v36(v91, (char *)v44, v16);
  v87 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v87(v92, v46, v16);
  v47 = v101;
  v48 = objc_msgSend(v101, "canonicalName");
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v83 = v51;
    v84 = v50;

  }
  else
  {
    v83 = 0;
    v84 = 0;
  }
  v52 = objc_msgSend(v47, "displayName");
  if (v52)
  {
    v53 = v52;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v56 = v55;

  }
  else
  {
    v54 = 0;
    v56 = 0;
  }
  v57 = *(void (**)(char *, uint64_t))(v100 + 8);
  v57(v91, v16);
  v58 = (uint64_t)v86;
  v36(v86, v92, v16);
  v59 = v82;
  v60 = (uint64_t *)(v58 + *(int *)(v82 + 20));
  v61 = v83;
  *v60 = v84;
  v60[1] = v61;
  v62 = (uint64_t *)(v58 + *(int *)(v59 + 24));
  *v62 = v54;
  v62[1] = v56;
  v63 = v89;
  sub_1000B8680(v58, v89, _s31ThreadSafePartialRepresentationVMa);
  v64 = (uint64_t)v93;
  v87(v93, v95, v16);
  sub_1002912CC(v63, v90);
  v65 = v88;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v88);
  v102 = v65;
  v29 = sub_1002C65F8(v64);
  v68 = v65[2];
  v69 = (v67 & 1) == 0;
  v70 = v68 + v69;
  if (__OFADD__(v68, v69))
  {
    __break(1u);
    goto LABEL_43;
  }
  v71 = v67;
  if (v65[3] >= v70)
  {
    v26 = v98;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002D8A40();
      goto LABEL_31;
    }
  }
  else
  {
    sub_1002D1994(v70, isUniquelyReferenced_nonNull_native);
    v72 = sub_1002C65F8((uint64_t)v93);
    if ((v71 & 1) != (v73 & 1))
      goto LABEL_51;
    v29 = v72;
LABEL_31:
    v26 = v98;
  }
  if ((v71 & 1) != 0)
  {
    v88 = v102;
    sub_1001CF8A4(v90, v102[7] + *(_QWORD *)(v85 + 72) * v29, _s31ThreadSafePartialRepresentationVMa);
LABEL_37:
    v78 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v57)(v93, v16, v78);
    sub_10001C744(v89, _s31ThreadSafePartialRepresentationVMa);
    v79 = v95;
    v57(v95, v16);
    v3 = v79;
    v29 = v97;
    goto LABEL_9;
  }
  v74 = v102;
  v102[((unint64_t)v29 >> 6) + 8] |= 1 << v29;
  v87((char *)(v74[6] + *(_QWORD *)(v100 + 72) * v29), v93, v16);
  sub_1000B8680(v90, v74[7] + *(_QWORD *)(v85 + 72) * v29, _s31ThreadSafePartialRepresentationVMa);
  v75 = v74[2];
  v76 = __OFADD__(v75, 1);
  v77 = v75 + 1;
  if (!v76)
  {
    v74[2] = v77;
    v88 = v102;
    goto LABEL_37;
  }
  __break(1u);
LABEL_51:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
  __break(1u);
}

void sub_100284FB8(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, __n128);
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  void **v102;
  _QWORD *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t *v107;
  __n128 v108;
  uint64_t *v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  double v125;
  id v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  char v136;
  id v137;
  double v138;
  id v139;
  void *v140;
  char *v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  double v148;
  id v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  __n128 v159;
  void (*v160)(uint64_t, uint64_t, __n128);
  _QWORD **v161;
  _QWORD *v162;
  id v163;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  void *v175;
  id v176;
  uint64_t v177;
  char v178;
  __n128 v179;
  void (*v180)(char *, uint64_t, uint64_t, __n128);
  uint64_t v181;
  id v182;
  void *v183;
  char *v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  void *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSUUID v193;
  int v194;
  Class isa;
  NSUUID v196;
  char *v197;
  _QWORD *v198;
  id v199;
  char *v200;
  Class v201;
  id v202;
  _QWORD *v203;
  id v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  NSObject *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t MetatypeMetadata;
  uint64_t v221;
  unint64_t v222;
  uint64_t *v223;
  void *v224;
  id v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  __n128 v230;
  id v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  char *v238;
  id v239;
  uint64_t v240;
  id v241;
  NSObject *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  id *v249;
  uint64_t v250;
  void *v251;
  id v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  __n128 v258;
  id v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  id v263;
  _QWORD **v264;
  id v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int (*v271)(uint64_t, uint64_t, uint64_t);
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  Class v279;
  id v280;
  char *v281;
  Class v282;
  id v283;
  uint64_t *v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  void (*v291)(char *, uint64_t);
  uint64_t v292;
  char *v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  os_log_type_t v301;
  uint64_t v302;
  NSObject *v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  void *v309;
  id v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  __n128 v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  NSObject *v320;
  id v321;
  uint64_t v322;
  NSObject *v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  NSObject *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  id v332;
  void *v333;
  char *v334;
  uint64_t v335;
  void (*v336)(uint64_t, char *, uint64_t);
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  NSObject *v351;
  uint64_t v352;
  _QWORD *v353;
  id v354;
  _QWORD *v355;
  id v356;
  char v357;
  void (*v358)(_QWORD, _QWORD, _QWORD);
  unint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  char *v363;
  __n128 v364;
  char *v365;
  id *v366;
  uint64_t *v367;
  int v368;
  void (*v369)(uint64_t, uint64_t, __n128);
  _QWORD *v370;
  uint64_t v371;
  NSObject *v372;
  id v373;
  __n128 v374;
  _QWORD *v375;
  NSObject *v376;
  uint64_t v377;
  uint64_t *v378;
  unint64_t v379;
  unsigned int v380;
  _QWORD *v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  void (*v385)(char *, uint64_t, uint64_t, __n128);
  id *v386;
  _QWORD *v387;
  uint64_t *v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  void (*v392)(char *, uint64_t, uint64_t, uint64_t);
  id v393;
  id v394;
  char *v395;
  id v396;
  id v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  char *v409;
  uint64_t v410;
  char *v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char *v422;
  char *v423;
  uint64_t v424;
  _QWORD *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char v438[8];
  char v439[8];
  char v440[8];
  char v441[8];
  void *v442;
  char v443[8];
  id v444;
  char v445[8];

  v399 = a8;
  v428 = a6;
  v20 = type metadata accessor for REMAnalyticsEvent(0);
  v424 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v425 = (uint64_t *)((char *)&v362 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v404 = _s31ThreadSafePartialRepresentationVMa(0);
  v407 = *(_QWORD *)(v404 - 8);
  __chkstk_darwin(v404);
  v398 = (uint64_t)&v362 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A630(&qword_100842850);
  __chkstk_darwin(v23);
  v406 = (uint64_t)&v362 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v410 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v410);
  v413 = (uint64_t)&v362 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v420 = type metadata accessor for Date(0);
  v419 = *(_QWORD *)(v420 - 8);
  __chkstk_darwin(v420);
  v412 = (char *)&v362 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v423 = (char *)&v362 - v28;
  v414 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v414);
  v400 = (char *)&v362 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v422 = (char *)&v362 - v31;
  __chkstk_darwin(v32);
  v416 = (char *)&v362 - v33;
  __chkstk_darwin(v34);
  v403 = (uint64_t)&v362 - v35;
  __chkstk_darwin(v36);
  v405 = (uint64_t)&v362 - v37;
  __chkstk_darwin(v38);
  v417 = (uint64_t)&v362 - v39;
  __chkstk_darwin(v40);
  v402 = (char *)&v362 - v41;
  __chkstk_darwin(v42);
  v429 = (uint64_t)&v362 - v43;
  __chkstk_darwin(v44);
  v401 = (char *)&v362 - v45;
  __chkstk_darwin(v46);
  v409 = (char *)&v362 - v47;
  __chkstk_darwin(v48);
  v418 = (char *)&v362 - v49;
  __chkstk_darwin(v50);
  v426 = (char *)&v362 - v51;
  v434 = type metadata accessor for UUID(0);
  v432 = *(_QWORD *)(v434 - 8);
  __chkstk_darwin(v434);
  v408 = (char *)&v362 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v411 = (char *)&v362 - v54;
  __chkstk_darwin(v55);
  v415 = (char *)&v362 - v56;
  __chkstk_darwin(v57);
  v421 = (char *)&v362 - v58;
  __chkstk_darwin(v59);
  v61 = (char *)&v362 - v60;
  __chkstk_darwin(v62);
  v427 = (char *)&v362 - v63;
  __chkstk_darwin(v64);
  v431 = (uint64_t)&v362 - v65;
  v66 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v66);
  v433 = (uint64_t)&v362 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v445, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
    return;
  v430 = Strong;
  v69 = *a3;
  v444 = 0;
  v70 = objc_msgSend(a2, "existingObjectWithID:error:", v69, &v444);
  v71 = v444;
  if (!v70)
  {
    v83 = v444;
    _convertNSErrorToError(_:)(v71);

    swift_willThrow(v84);
LABEL_15:
    swift_release(v430);
    return;
  }
  v72 = v70;
  v395 = v61;
  v73 = objc_opt_self(REMCDList);
  v74 = (void *)swift_dynamicCastObjCClass(v72, v73);
  v75 = v71;
  if (!v74)
  {

    goto LABEL_15;
  }
  v394 = v72;
  v391 = v20;
  v389 = a7;
  v76 = objc_msgSend(v74, "groceryLocaleID");
  if (v76)
  {
    v77 = v76;
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v80 = v79;

    v81 = v433;
    Locale.init(identifier:)(v78, v80);
    v82 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 0, 1, v82);
  }
  else
  {
    v85 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v433, 1, 1, v85);
  }
  v86 = objc_msgSend(v74, "membershipsOfRemindersInSectionsAsData");
  v87 = v86;
  if (v86)
  {
    v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v90 = v89;

    sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
    static REMJSONRepresentable.fromJSONData(_:)(&v444, v88, v90);
    if (v13)
    {
      sub_1000A71C8(v88, v90);
      sub_10000882C(v433, (uint64_t *)&unk_10083FBE0);

      goto LABEL_15;
    }
    sub_1000A71C8(v88, v90);
    v87 = v444;
  }
  swift_beginAccess(a4 + 16, &v444, 1, 0);
  v91 = *(void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v87;

  sub_10028482C((uint64_t)a2);
  v93 = v13;
  if (v13)
  {
    sub_10000882C(v433, (uint64_t *)&unk_10083FBE0);

    goto LABEL_15;
  }
  v94 = v92;
  v386 = (id *)(a4 + 16);
  swift_beginAccess(a5 + 16, v443, 1, 0);
  v388 = (uint64_t *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v94;
  v95 = objc_msgSend(v74, "groceryLocalCorrectionsAsData", swift_bridgeObjectRelease().n128_f64[0]);
  if (v95)
  {
    v96 = v95;
    v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v99 = v98;

    sub_1000151B0(0, &qword_100844770, REMTextMemberships_ptr);
    static REMJSONRepresentable.fromJSONData(_:)(&v442, v97, v99);
    sub_1000A71C8(v97, v99);
    v100 = v389;
    v101 = v442;
  }
  else
  {
    v101 = 0;
    v100 = v389;
  }
  v102 = (void **)(v428 + 16);
  v103 = (_QWORD *)(a12 + 16);
  swift_beginAccess(v428 + 16, &v442, 1, 0);
  v104 = *v102;
  *v102 = v101;

  swift_beginAccess(v102, v441, 0, 0);
  v105 = *v102;
  if (!*v102)
  {
    sub_10000882C(v433, (uint64_t *)&unk_10083FBE0);

    swift_release(v430);
    swift_beginAccess(v103, v440, 1, 0);
    *v103 = v100;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRelease();
    return;
  }
  v106 = *(_QWORD *)(v100 + 16);
  if (!v106)
  {
    swift_release(v430);
LABEL_125:

    sub_10000882C(v433, (uint64_t *)&unk_10083FBE0);
    return;
  }
  v390 = (_QWORD *)(a12 + 16);
  v377 = a13;
  v384 = a11;
  v383 = a10;
  v375 = (_QWORD *)(v399 + 16);
  v367 = (uint64_t *)(a9 + 16);
  swift_bridgeObjectRetain(v100);
  v393 = v105;
  v107 = v388;
  swift_beginAccess(v388, v440, 0, 0);
  swift_beginAccess(v386, v439, 0, 0);
  v108 = swift_beginAccess(v107, v438, 0, 0);
  v366 = (id *)&v436;
  v378 = &v437;
  v365 = (char *)&v436 + 4;
  v382 = v425 + 5;
  v381 = v425 + 11;
  v380 = enum case for REMAnalyticsEvent.groceryPrediction(_:);
  v109 = (uint64_t *)(v100 + 48);
  v108.n128_u64[0] = 136446978;
  v374 = v108;
  v108.n128_u64[0] = 136447234;
  v364 = v108;
  v379 = 0x80000001006FE870;
  v363 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v399 = v106;
    v122 = *(v109 - 1);
    v123 = *v109;
    v124 = (id)*(v109 - 2);
    *(_QWORD *)&v125 = swift_bridgeObjectRetain(v123).n128_u64[0];
    v397 = v124;
    v126 = objc_msgSend(v124, "uuid", v125);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v126);

    v436 = v122;
    v428 = v123;
    v437 = v123;
    v127 = sub_1000E525C();
    v128 = StringProtocol.lowercased(with:)(v433, &type metadata for String, v127);
    v130 = v129;
    v131 = objc_msgSend(v393, "memberships");
    v132 = sub_1000151B0(0, &qword_1008428A8, REMTimestampedUUID_ptr);
    v133 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v131, &type metadata for String, v132, &protocol witness table for String);

    v134 = (_QWORD *)v432;
    if (!*(_QWORD *)(v133 + 16) || (v135 = sub_10001A6DC(v128, v130), (v136 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v161 = (_QWORD **)v390;
      swift_beginAccess(v390, &v436, 33, 0);
      v162 = *v161;
      v163 = v397;
      swift_bridgeObjectRetain(v428);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v162);
      *v161 = v162;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v162 = sub_1002CA444(0, v162[2] + 1, 1, v162);
        *v161 = v162;
      }
      v165 = v434;
      v167 = v162[2];
      v166 = v162[3];
      if (v167 >= v166 >> 1)
      {
        v162 = sub_1002CA444((_QWORD *)(v166 > 1), v167 + 1, 1, v162);
        *v390 = v162;
      }
      v162[2] = v167 + 1;
      v168 = &v162[3 * v167];
      v168[4] = v163;
      v168[5] = v122;
      v168[6] = v428;
      swift_endAccess(&v436);
      swift_bridgeObjectRelease();

      v160 = (void (*)(uint64_t, uint64_t, __n128))v134[1];
      goto LABEL_27;
    }
    v137 = *(id *)(*(_QWORD *)(v133 + 56) + 8 * v135);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v138 = swift_bridgeObjectRelease().n128_u64[0];
    v396 = v137;
    v139 = objc_msgSend(v137, "identifier", v138);
    if (!v139)
    {
      v143 = (uint64_t)v426;
      v392 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v134[7];
      v392(v426, 1, 1, v434);
LABEL_43:
      sub_10000882C(v143, (uint64_t *)&unk_100839C80);
      goto LABEL_44;
    }
    v140 = v139;
    v141 = v427;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v139);

    v142 = (void (*)(char *, char *, uint64_t))v134[4];
    v143 = (uint64_t)v426;
    v144 = v141;
    v145 = v434;
    v142(v426, v144, v434);
    v392 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v134[7];
    v392((char *)v143, 0, 1, v145);
    v146 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v134[6];
    if (v146(v143, 1, v145) == 1)
      goto LABEL_43;
    sub_10000882C(v143, (uint64_t *)&unk_100839C80);
    v147 = *v388;
    *(_QWORD *)&v148 = swift_bridgeObjectRetain(*v388).n128_u64[0];
    v149 = objc_msgSend(v396, "identifier", v148);
    if (!v149)
      break;
    v150 = v149;
    v151 = v427;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v149);

    v152 = (uint64_t)v418;
    v153 = v151;
    v154 = v434;
    v142(v418, v153, v434);
    v392((char *)v152, 0, 1, v154);
    if (v146(v152, 1, v154) == 1)
      goto LABEL_127;
    v155 = v432;
    if (!*(_QWORD *)(v147 + 16))
    {
      v236 = swift_bridgeObjectRelease();
      v160 = *(void (**)(uint64_t, uint64_t, __n128))(v155 + 8);
      v160((uint64_t)v418, v434, v236);
LABEL_71:
      if (qword_1008370A8 != -1)
        swift_once(&qword_1008370A8, sub_10027C514);
      v237 = type metadata accessor for Logger(0);
      sub_10001AAA8(v237, (uint64_t)qword_100842718);
      v238 = v408;
      (*(void (**)(char *, uint64_t, uint64_t))(v432 + 16))(v408, v431, v434);
      v239 = v396;
      v240 = v430;
      swift_retain_n(v430);
      v241 = v239;
      v242 = Logger.logObject.getter(v241);
      v243 = static os_log_type_t.default.getter(v242);
      if (os_log_type_enabled(v242, (os_log_type_t)v243))
      {
        LODWORD(v372) = v243;
        v376 = v242;
        v385 = (void (*)(char *, uint64_t, uint64_t, __n128))v93;
        v244 = v240;
        v245 = swift_slowAlloc(42, -1);
        v246 = (_QWORD *)swift_slowAlloc(8, -1);
        v396 = v241;
        v387 = v246;
        v373 = (id)swift_slowAlloc(96, -1);
        v436 = (uint64_t)v373;
        *(_DWORD *)v245 = v374.n128_u32[0];
        v247 = sub_1000D92EC(v377);
        v435 = sub_10001A820(v247, v248, &v436);
        v249 = v366;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v435, v366);
        swift_bridgeObjectRelease();
        *(_WORD *)(v245 + 12) = 2114;
        v250 = v244;
        v251 = *(void **)(v244 + 24);
        v435 = (uint64_t)v251;
        v252 = v251;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v435, v249);
        *v387 = v251;
        swift_release_n(v250);
        *(_WORD *)(v245 + 22) = 2082;
        v253 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v254 = v408;
        v255 = v434;
        v256 = dispatch thunk of CustomStringConvertible.description.getter(v434, v253);
        v435 = sub_10001A820(v256, v257, &v436);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v435, v249);
        v258 = swift_bridgeObjectRelease();
        v160((uint64_t)v254, v255, v258);
        *(_WORD *)(v245 + 32) = 2082;
        v259 = objc_msgSend(v396, "identifier");
        if (v259)
        {
          v260 = v259;
          v261 = (uint64_t)v400;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v259);

          v262 = 0;
        }
        else
        {
          v262 = 1;
          v261 = (uint64_t)v400;
        }
        v264 = (_QWORD **)v390;
        v392((char *)v261, v262, 1, v434);
        v348 = Optional.descriptionOrNil.getter(v414);
        v350 = v349;
        sub_10000882C(v261, (uint64_t *)&unk_100839C80);
        v435 = sub_10001A820(v348, v350, &v436);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v435, v366);
        v263 = v396;

        swift_bridgeObjectRelease();
        v351 = v376;
        _os_log_impl((void *)&_mh_execute_header, v376, (os_log_type_t)v372, "%{public}s: The section in local correction does not exist on the device {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s", (uint8_t *)v245, 0x2Au);
        v352 = sub_10001A630((uint64_t *)&unk_100839E70);
        v353 = v387;
        swift_arrayDestroy(v387, 1, v352);
        swift_slowDealloc(v353, -1, -1);
        v354 = v373;
        swift_arrayDestroy(v373, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v354, -1, -1);
        swift_slowDealloc(v245, -1, -1);

        v93 = (void (*)(_QWORD, _QWORD, _QWORD))v385;
      }
      else
      {
        swift_release_n(v240);
        ((void (*)(char *, uint64_t))v160)(v238, v434);

        v263 = v241;
        v264 = (_QWORD **)v390;
      }
      swift_beginAccess(v264, &v436, 33, 0);
      v355 = *v264;
      v356 = v397;
      swift_bridgeObjectRetain(v428);
      v357 = swift_isUniquelyReferenced_nonNull_native(v355);
      *v264 = v355;
      v358 = v93;
      if ((v357 & 1) == 0)
      {
        v355 = sub_1002CA444(0, v355[2] + 1, 1, v355);
        *v390 = v355;
      }
      v360 = v355[2];
      v359 = v355[3];
      if (v360 >= v359 >> 1)
      {
        v355 = sub_1002CA444((_QWORD *)(v359 > 1), v360 + 1, 1, v355);
        *v390 = v355;
      }
      v355[2] = v360 + 1;
      v361 = &v355[3 * v360];
      v361[4] = v356;
      v361[5] = v122;
      v361[6] = v428;
      swift_endAccess(&v436);
      swift_bridgeObjectRelease();

      v93 = v358;
      v165 = v434;
      goto LABEL_27;
    }
    v156 = (uint64_t)v418;
    sub_1002C65F8((uint64_t)v418);
    v158 = v157;
    v159 = swift_bridgeObjectRelease();
    v160 = *(void (**)(uint64_t, uint64_t, __n128))(v155 + 8);
    v160(v156, v434, v159);
    if ((v158 & 1) == 0)
      goto LABEL_71;
    v134 = (_QWORD *)v432;
LABEL_44:
    if (*v386)
    {
      v169 = objc_msgSend(*v386, "membershipByMemberIdentifier");
      v170 = sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
      v171 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v172 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v169, v434, v170, v171);

      if (*(_QWORD *)(v172 + 16) && (v173 = sub_1002C65F8(v431), (v174 & 1) != 0))
      {
        v175 = *(void **)(*(_QWORD *)(v172 + 56) + 8 * v173);
        v176 = v175;
      }
      else
      {
        v175 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v175 = 0;
    }
    v177 = *v388;
    swift_bridgeObjectRetain(*v388);
    v178 = sub_100292220(v175, v177);
    v179 = swift_bridgeObjectRelease();
    v387 = v175;
    if ((v178 & 1) != 0)
    {
      v180 = (void (*)(char *, uint64_t, uint64_t, __n128))v134[2];
      v181 = v434;
      v180(v395, v431, v434, v179);
      v182 = objc_msgSend(v396, "identifier");
      if (v182)
      {
        v183 = v182;
        v184 = v409;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v182);

        v185 = 0;
      }
      else
      {
        v185 = 1;
        v184 = v409;
      }
      v192 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v392)(v184, v185, 1, v181);
      static Date.now.getter(v192);
      v193.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v194 = ((uint64_t (*)(char *, uint64_t, uint64_t))v134[6])(v184, 1, v181);
      v385 = v180;
      if (v194 == 1)
      {
        isa = 0;
      }
      else
      {
        v196.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        v197 = v184;
        isa = v196.super.isa;
        ((void (*)(char *, uint64_t))v134[1])(v197, v181);
      }
      v198 = v134;
      v199 = objc_allocWithZone((Class)REMMembership);
      v200 = v423;
      v201 = Date._bridgeToObjectiveC()().super.isa;
      v202 = objc_msgSend(v199, "initWithMemberIdentifier:groupIdentifier:isObsolete:modifiedOn:", v193.super.isa, isa, 0, v201);

      (*(void (**)(char *, uint64_t))(v419 + 8))(v200, v420);
      v160 = (void (*)(uint64_t, uint64_t, __n128))v198[1];
      ((void (*)(char *, uint64_t))v160)(v395, v181);
      v203 = v375;
      swift_beginAccess(v375, &v436, 33, 0);
      v204 = v202;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v204);
      v206 = *(_QWORD *)((*v203 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v205 = *(_QWORD *)((*v203 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v206 >= v205 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v205 > 1);
      v207 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v206, v204);
      specialized Array._endMutation()(v207);
      swift_endAccess(&v436);
      v208 = v421;
      if (qword_1008370A8 != -1)
        swift_once(&qword_1008370A8, sub_10027C514);
      v209 = type metadata accessor for Logger(0);
      sub_10001AAA8(v209, (uint64_t)qword_100842718);
      ((void (*)(char *, uint64_t, uint64_t))v385)(v208, v431, v181);
      v210 = v396;
      v211 = v181;
      v212 = v430;
      swift_retain_n(v430);
      v213 = v210;
      v214 = Logger.logObject.getter(v213);
      v215 = static os_log_type_t.default.getter(v214);
      if (!os_log_type_enabled(v214, (os_log_type_t)v215))
      {
        swift_release_n(v212);

        ((void (*)(char *, uint64_t))v160)(v421, v211);
        v235 = (uint64_t)v422;
        v165 = v211;
        goto LABEL_105;
      }
      v368 = v215;
      v372 = v214;
      v373 = v204;
      v385 = (void (*)(char *, uint64_t, uint64_t, __n128))v93;
      v216 = swift_slowAlloc(42, -1);
      v376 = v213;
      v217 = v216;
      v218 = swift_slowAlloc(8, -1);
      v369 = v160;
      v219 = (_QWORD *)v218;
      v371 = swift_slowAlloc(96, -1);
      v435 = v371;
      *(_DWORD *)v217 = v374.n128_u32[0];
      v436 = v377;
      MetatypeMetadata = swift_getMetatypeMetadata(v377);
      v221 = String.init<A>(describing:)(&v436, MetatypeMetadata);
      v436 = sub_10001A820(v221, v222, &v435);
      v223 = v378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v378);
      swift_bridgeObjectRelease();
      *(_WORD *)(v217 + 12) = 2114;
      v224 = *(void **)(v212 + 24);
      v436 = (uint64_t)v224;
      v225 = v224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v223);
      v370 = v219;
      *v219 = v224;
      v160 = v369;
      swift_release_n(v212);
      *(_WORD *)(v217 + 22) = 2082;
      v226 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v227 = v421;
      v228 = dispatch thunk of CustomStringConvertible.description.getter(v211, v226);
      v436 = sub_10001A820(v228, v229, &v435);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v223);
      v230 = swift_bridgeObjectRelease();
      v160((uint64_t)v227, v211, v230);
      *(_WORD *)(v217 + 32) = 2082;
      v231 = -[NSObject identifier](v376, "identifier");
      if (v231)
      {
        v232 = v231;
        v233 = (uint64_t)v401;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v231);

        v234 = 0;
      }
      else
      {
        v234 = 1;
        v233 = (uint64_t)v401;
      }
      v323 = v372;
      v392((char *)v233, v234, 1, v211);
      v324 = Optional.descriptionOrNil.getter(v414);
      v326 = v325;
      sub_10000882C(v233, (uint64_t *)&unk_100839C80);
      v327 = v324;
      v165 = v434;
      v436 = sub_10001A820(v327, v326, &v435);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v378);
      v328 = v376;

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v323, (os_log_type_t)v368, "%{public}s: Auto-categorized reminder based on local corrections {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s}", (uint8_t *)v217, 0x2Au);
      v329 = sub_10001A630((uint64_t *)&unk_100839E70);
      v330 = v370;
      swift_arrayDestroy(v370, 1, v329);
      swift_slowDealloc(v330, -1, -1);
      v331 = v371;
      swift_arrayDestroy(v371, 3, v363);
      swift_slowDealloc(v331, -1, -1);
      swift_slowDealloc(v217, -1, -1);

      v93 = (void (*)(_QWORD, _QWORD, _QWORD))v385;
      goto LABEL_104;
    }
    if (v175)
    {
      v186 = objc_msgSend(v175, "groupIdentifier", v179.n128_f64[0]);
      v187 = v413;
      if (v186)
      {
        v188 = v186;
        v189 = v402;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v186);

        v190 = (uint64_t)v189;
        v191 = 0;
      }
      else
      {
        v191 = 1;
        v190 = (uint64_t)v402;
      }
      v392((char *)v190, v191, 1, v434);
      sub_1000A5CA8(v190, v429, (uint64_t *)&unk_100839C80);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v392)(v429, 1, 1, v434, v179);
      v187 = v413;
    }
    v265 = objc_msgSend(v396, "identifier");
    if (v265)
    {
      v266 = v265;
      v267 = v417;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v265);

      v268 = 0;
    }
    else
    {
      v268 = 1;
      v267 = v417;
    }
    v269 = v434;
    v392((char *)v267, v268, 1, v434);
    v270 = v187 + *(int *)(v410 + 48);
    sub_10011D420(v429, v187);
    sub_10011D420(v267, v270);
    v271 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v432 + 48);
    if (v271(v187, 1, v269) == 1)
    {
      sub_10000882C(v267, (uint64_t *)&unk_100839C80);
      if (v271(v270, 1, v269) != 1)
        goto LABEL_87;
      sub_10000882C(v187, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v272 = v405;
      sub_10011D420(v187, v405);
      if (v271(v270, 1, v269) == 1)
      {
        sub_10000882C(v417, (uint64_t *)&unk_100839C80);
        (*(void (**)(uint64_t, uint64_t))(v432 + 8))(v272, v269);
LABEL_87:
        sub_10000882C(v187, (uint64_t *)&unk_10083B370);
LABEL_88:
        v436 = v122;
        v437 = v428;
        v273 = StringProtocol.lowercased(with:)(v433, &type metadata for String, v127);
        v275 = v274;
        v276 = v403;
        v277 = sub_10011D420(v429, v403);
        static Date.now.getter(v277);
        v278 = v434;
        if (v271(v276, 1, v434) == 1)
        {
          v279 = 0;
        }
        else
        {
          v279 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v432 + 8))(v276, v278);
        }
        v280 = objc_allocWithZone((Class)REMTimestampedUUID);
        v281 = v412;
        v282 = Date._bridgeToObjectiveC()().super.isa;
        v283 = objc_msgSend(v280, "initWithIdentifier:modifiedOn:", v279, v282);

        (*(void (**)(char *, uint64_t))(v419 + 8))(v281, v420);
        v284 = v367;
        swift_beginAccess(v367, &v436, 33, 0);
        v285 = (uint64_t)v416;
        if (v283)
        {
          v286 = swift_isUniquelyReferenced_nonNull_native(*v284);
          v435 = *v284;
          *v284 = 0x8000000000000000;
          sub_10028EDA0((uint64_t)v283, v273, v275, v286, (void (*)(void))sub_1002D85E0, (void (*)(void))sub_1002D12C0);
          *v284 = v435;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v295 = (void *)sub_1002CB49C(v273, v275);
          swift_bridgeObjectRelease();

        }
        swift_endAccess(&v436);
        LODWORD(v376) = 1;
        v292 = v429;
        v294 = v432;
        v293 = v415;
        goto LABEL_97;
      }
      v287 = v432;
      v288 = v427;
      (*(void (**)(char *, uint64_t, uint64_t))(v432 + 32))(v427, v270, v269);
      v289 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v290 = v405;
      LODWORD(v392) = dispatch thunk of static Equatable.== infix(_:_:)(v405, v288, v269, v289);
      v291 = *(void (**)(char *, uint64_t))(v287 + 8);
      v291(v288, v269);
      sub_10000882C(v417, (uint64_t *)&unk_100839C80);
      v291((char *)v290, v269);
      sub_10000882C(v413, (uint64_t *)&unk_100839C80);
      if ((v392 & 1) == 0)
        goto LABEL_88;
    }
    LODWORD(v376) = 0;
    v285 = (uint64_t)v416;
    v292 = v429;
    v278 = v434;
    v293 = v415;
    v294 = v432;
LABEL_97:
    if (qword_1008370A8 != -1)
      swift_once(&qword_1008370A8, sub_10027C514);
    v296 = type metadata accessor for Logger(0);
    sub_10001AAA8(v296, (uint64_t)qword_100842718);
    (*(void (**)(char *, uint64_t, uint64_t))(v294 + 16))(v293, v431, v278);
    sub_10011D420(v292, v285);
    v297 = v430;
    v298 = swift_retain_n(v430);
    v299 = v292;
    v300 = Logger.logObject.getter(v298);
    v301 = static os_log_type_t.default.getter(v300);
    LODWORD(v392) = v301;
    if (!os_log_type_enabled(v300, v301))
    {

      sub_10000882C(v285, (uint64_t *)&unk_100839C80);
      v160 = *(void (**)(uint64_t, uint64_t, __n128))(v294 + 8);
      v322 = v434;
      ((void (*)(char *, uint64_t))v160)(v293, v434);
      swift_release_n(v297);
      sub_10000882C(v299, (uint64_t *)&unk_100839C80);
      v235 = (uint64_t)v422;
      v165 = v322;
      goto LABEL_105;
    }
    v302 = swift_slowAlloc(48, -1);
    v303 = swift_slowAlloc(8, -1);
    v372 = v303;
    v304 = (void *)swift_slowAlloc(96, -1);
    v385 = (void (*)(char *, uint64_t, uint64_t, __n128))v93;
    v373 = v304;
    v435 = (uint64_t)v304;
    *(_DWORD *)v302 = v364.n128_u32[0];
    v436 = v377;
    v305 = swift_getMetatypeMetadata(v377);
    v306 = String.init<A>(describing:)(&v436, v305);
    v436 = sub_10001A820(v306, v307, &v435);
    v308 = v378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v378);
    swift_bridgeObjectRelease();
    *(_WORD *)(v302 + 12) = 2114;
    v309 = *(void **)(v297 + 24);
    v436 = (uint64_t)v309;
    v310 = v309;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v308);
    v303->isa = (Class)v309;
    swift_release_n(v297);
    *(_WORD *)(v302 + 22) = 2082;
    v311 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v312 = v415;
    v165 = v434;
    v313 = dispatch thunk of CustomStringConvertible.description.getter(v434, v311);
    v436 = sub_10001A820(v313, v314, &v435);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v308);
    v315 = swift_bridgeObjectRelease();
    v160 = *(void (**)(uint64_t, uint64_t, __n128))(v432 + 8);
    v160((uint64_t)v312, v165, v315);
    *(_WORD *)(v302 + 32) = 2082;
    v316 = (uint64_t)v416;
    v317 = Optional.descriptionOrNil.getter(v414);
    v436 = sub_10001A820(v317, v318, &v435);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v308);
    swift_bridgeObjectRelease();
    sub_10000882C(v316, (uint64_t *)&unk_100839C80);
    *(_WORD *)(v302 + 42) = 1026;
    LODWORD(v436) = (_DWORD)v376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v436, v365);
    _os_log_impl((void *)&_mh_execute_header, v300, (os_log_type_t)v392, "%{public}s: Skipped auto-categorizing reminder {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionIdentifier: %{public}s, shouldUpdateGroceryLocalCorrections: %{BOOL,public}d}", (uint8_t *)v302, 0x30u);
    v319 = sub_10001A630((uint64_t *)&unk_100839E70);
    v320 = v372;
    swift_arrayDestroy(v372, 1, v319);
    swift_slowDealloc(v320, -1, -1);
    v321 = v373;
    swift_arrayDestroy(v373, 3, (char *)&type metadata for Any + 8);
    v93 = (void (*)(_QWORD, _QWORD, _QWORD))v385;
    swift_slowDealloc(v321, -1, -1);
    swift_slowDealloc(v302, -1, -1);

    sub_10000882C(v429, (uint64_t *)&unk_100839C80);
LABEL_104:
    v235 = (uint64_t)v422;
LABEL_105:
    v332 = objc_msgSend(v396, "identifier");
    if (!v332)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v432 + 56))(v235, 1, 1, v165);
LABEL_24:
      sub_10000882C(v235, (uint64_t *)&unk_100839C80);
      goto LABEL_25;
    }
    v333 = v332;
    v334 = v427;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v332);

    v335 = v432;
    v336 = *(void (**)(uint64_t, char *, uint64_t))(v432 + 32);
    v336(v235, v334, v165);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v335 + 56))(v235, 0, 1, v165);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v335 + 48))(v235, 1, v165) == 1)
      goto LABEL_24;
    v337 = (uint64_t)v411;
    v336((uint64_t)v411, (char *)v235, v165);
    v338 = v388;
    swift_beginAccess(v388, &v436, 32, 0);
    v339 = *v338;
    if (*(_QWORD *)(*v338 + 16))
    {
      v340 = sub_1002C65F8(v337);
      v341 = v404;
      if ((v342 & 1) != 0)
      {
        sub_1002912CC(*(_QWORD *)(v339 + 56) + *(_QWORD *)(v407 + 72) * v340, v406);
        v343 = 0;
      }
      else
      {
        v343 = 1;
      }
    }
    else
    {
      v343 = 1;
      v341 = v404;
    }
    v344 = v407;
    v345 = v406;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v407 + 56))(v406, v343, 1, v341);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v344 + 48))(v345, 1, v341))
    {
      v346 = v398;
      sub_1002912CC(v345, v398);
      sub_10000882C(v345, &qword_100842850);
      swift_endAccess(&v436);
      ((void (*)(char *, uint64_t))v160)(v411, v165);
      v347 = (uint64_t *)(v346 + *(int *)(v341 + 24));
      v111 = *v347;
      v112 = v347[1];
      swift_bridgeObjectRetain(v112);
      sub_10001C744(v346, _s31ThreadSafePartialRepresentationVMa);
      goto LABEL_26;
    }
    sub_10000882C(v345, &qword_100842850);
    swift_endAccess(&v436);
    ((void (*)(char *, uint64_t))v160)(v411, v165);
LABEL_25:
    v111 = 0;
    v112 = 0;
LABEL_26:
    type metadata accessor for REMAnalyticsManager(0, v110);
    v114 = static REMAnalyticsManager.shared.getter(v113);
    v115 = v425;
    *v425 = 0x726F436C61636F6CLL;
    v115[1] = 0xEF6E6F6974636572;
    *((_BYTE *)v115 + 16) = 0;
    v116 = v384;
    v115[3] = v383;
    v115[4] = v116;
    v117 = v382;
    *v382 = 0;
    v117[1] = 0;
    v115[7] = 0xD000000000000019;
    v115[8] = v379;
    v115[9] = v111;
    v115[10] = v112;
    v118 = v381;
    *v381 = 0;
    v118[1] = 0;
    v119 = v424;
    v120 = v391;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v424 + 104))(v115, v380, v391);
    v121 = swift_bridgeObjectRetain(v116);
    REMAnalyticsManager.post(event:)(v115, v121);
    swift_bridgeObjectRelease();

    swift_release(v114);
    (*(void (**)(_QWORD *, uint64_t))(v119 + 8))(v115, v120);
LABEL_27:
    v109 += 3;
    ((void (*)(uint64_t, uint64_t))v160)(v431, v165);
    v106 = v399 - 1;
    if (v399 == 1)
    {
      swift_bridgeObjectRelease();
      swift_release(v430);

      goto LABEL_125;
    }
  }
  v392(v418, 1, 1, v434);
LABEL_127:
  __break(1u);
}

id sub_100287758()
{
  return sub_10028778C((SEL *)&selRef_groceryLocalCorrectionsAsData, &qword_100844770, REMTextMemberships_ptr);
}

id sub_10028778C(SEL *a1, unint64_t *a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;
  id result;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = objc_msgSend(v3, *a1);
  if (result)
  {
    v8 = result;
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    sub_1000151B0(0, a2, a3);
    static REMJSONRepresentable.fromJSONData(_:)(&v12, v9, v11);
    result = (id)sub_1000A71C8(v9, v11);
    if (!v4)
      return (id)v12;
  }
  return result;
}

uint64_t sub_100287848@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100287864(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  id v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __n128 v57;
  int64_t v58;
  __n128 v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(char *, unint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  void (*v76)(uint64_t, char *, uint64_t);
  char *v77;
  char *v78;
  Class v79;
  unint64_t v80;
  char v81;
  id v82;
  double v83;
  uint64_t *v84;
  id v85;
  id v86;
  id v87;
  char *v88;
  uint64_t v89;
  NSUUID v90;
  Class v91;
  id v92;
  char *v93;
  Class v94;
  id v95;
  uint64_t *v96;
  id v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t MetatypeMetadata;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  id v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  __n128 v117;
  void (*v118)(char *, uint64_t, __n128);
  uint64_t *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  id *v123;
  uint64_t v124;
  id v125;
  Class v126;
  id v127;
  id v128;
  id v129;
  id v130;
  double v131;
  uint64_t v132;
  void *v133;
  id v134;
  Class v135;
  Class isa;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __n128 v150;
  char *v151;
  void *v152;
  int v153;
  uint64_t *v154;
  os_log_t v155;
  uint64_t v156;
  char *v157;
  NSObject *v158;
  _QWORD *v159;
  id v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  char *v166;
  int64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  int64_t v183;
  char *v184;
  uint64_t v185;
  char v186[8];
  char v187[8];
  char v188[8];
  char v189[8];
  uint64_t v190;
  id v191;
  char v192;
  char v193[8];

  v163 = a8;
  v181 = a6;
  v170 = type metadata accessor for Date(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v177 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v18);
  v168 = (char *)&v148 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v172 = (char *)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v184 = (char *)&v148 - v24;
  v180 = sub_10001A630(&qword_1008428B0);
  __chkstk_darwin(v180);
  v179 = (char *)&v148 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v185 = (uint64_t)&v148 - v27;
  __chkstk_darwin(v28);
  v178 = (char *)&v148 - v29;
  v30 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v30);
  v32 = (uint64_t)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v193, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v171 = result;
  v34 = *a3;
  v191 = 0;
  v160 = a2;
  v35 = (char *)objc_msgSend(a2, "existingObjectWithID:error:", v34, &v191);
  v36 = v191;
  if (!v35)
  {
    v41 = v191;
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v42);
    return swift_release(v171);
  }
  v37 = v35;
  v38 = objc_opt_self(REMCDList);
  v158 = swift_dynamicCastObjCClass(v37, v38);
  if (!v158)
  {
    v43 = v36;
LABEL_8:

    return swift_release(v171);
  }
  v157 = v37;
  if (a5)
  {
    v39 = v36;
    swift_bridgeObjectRetain(a5);
    Locale.init(identifier:)(a4, a5);
    v40 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v32, 0, 1, v40);
  }
  else
  {
    v44 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v32, 1, 1, v44);
    v45 = v36;
  }
  v37 = v181;
  v161 = (uint64_t *)(a7 + 16);
  v46 = *((_QWORD *)v181 + 2);
  v162 = v32;
  if (!v46)
  {
LABEL_51:
    a4 = v161;
    swift_beginAccess(v161, &v191, 0, 0);
    v47 = *a4;
    v50 = v158;
    v20 = v176;
    v37 = v157;
    if ((unint64_t)*a4 >> 62)
      goto LABEL_76;
    v122 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v122)
      goto LABEL_53;
LABEL_58:
    *(_QWORD *)&v131 = swift_beginAccess(a9 + 16, v188, 0, 0).n128_u64[0];
    v132 = *(_QWORD *)(a9 + 16);
    if (*(_QWORD *)(v132 + 16))
    {
      swift_beginAccess(a10 + 16, v187, 0, 0);
      v133 = *(void **)(a10 + 16);
      v134 = objc_allocWithZone((Class)REMTextMemberships);
      sub_1000151B0(0, &qword_1008428A8, REMTimestampedUUID_ptr);
      if (v133)
      {
        v135 = v133;
        swift_bridgeObjectRetain(v132);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v137 = objc_msgSend(v134, "initWithMemberships:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        v138 = -[objc_class mergingWith:](v135, "mergingWith:", v137);
      }
      else
      {
        swift_bridgeObjectRetain(v132);
        v135 = Dictionary._bridgeToObjectiveC()().super.isa;
        v138 = objc_msgSend(v134, "initWithMemberships:", v135, swift_bridgeObjectRelease().n128_f64[0]);
      }

      v139 = v138;
      sub_100288A5C(v138, 1);
      if (v20)
      {
        swift_release(v171);

        goto LABEL_66;
      }

      v37 = v157;
    }
    else if (!v122)
    {
      goto LABEL_70;
    }
    -[NSObject updateChangeCount](v50, "updateChangeCount", v131);
LABEL_70:
    v141 = v160;
    if (objc_msgSend(v160, "hasChanges", v131))
    {
      swift_beginAccess(a4, v186, 0, 0);
      v142 = *a4;
      v143 = v141;
      swift_bridgeObjectRetain(v142);
      v144 = v171;
      sub_1002924B4(v143, v142, v171, v143);

      sub_10000882C(v32, (uint64_t *)&unk_10083FBE0);
      swift_bridgeObjectRelease();
      return swift_release(v144);
    }
    sub_10000882C(v32, (uint64_t *)&unk_10083FBE0);
    goto LABEL_8;
  }
  v191 = v181;
  v47 = sub_10001A630(&qword_1008428B8);
  v48 = sub_1000A5F84(&qword_1008428C0, &qword_1008428B8, (uint64_t)&protocol conformance descriptor for [A : B].Values);
  v191 = (id)Sequence<>.unique()(v47, v48, &protocol witness table for String);
  swift_bridgeObjectRetain(v191);
  v49 = v176;
  sub_10042AADC((uint64_t *)&v191);
  if (v49)
  {
    result = swift_release(v191);
    __break(1u);
    return result;
  }
  v50 = 0;
  swift_bridgeObjectRelease();
  v51 = v191;
  v52 = sub_100291818((uint64_t)v191, v158, v32, (uint64_t)v160);
  v176 = 0;
  v175 = v52;
  v152 = a11;
  swift_release(v51);
  v53 = *((_QWORD *)v37 + 8);
  v166 = v37 + 64;
  v54 = 1 << v37[32];
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & v53;
  v167 = (unint64_t)(v54 + 63) >> 6;
  v151 = &v192;
  v57 = swift_bridgeObjectRetain(v37);
  v58 = 0;
  v57.n128_u64[0] = 136446978;
  v150 = v57;
  v149 = (char *)&type metadata for Any + 8;
  v174 = v20;
  v173 = v21;
  while (1)
  {
    if (v56)
    {
      v182 = (v56 - 1) & v56;
      v183 = v58;
      v60 = __clz(__rbit64(v56)) | (v58 << 6);
      goto LABEL_37;
    }
    v61 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    v32 = v162;
    if (v61 >= v167)
      goto LABEL_50;
    v62 = *(_QWORD *)&v166[8 * v61];
    v63 = v58 + 1;
    if (!v62)
    {
      v63 = v58 + 2;
      if (v58 + 2 >= v167)
        goto LABEL_50;
      v62 = *(_QWORD *)&v166[8 * v63];
      if (!v62)
      {
        v63 = v58 + 3;
        if (v58 + 3 >= v167)
          goto LABEL_50;
        v62 = *(_QWORD *)&v166[8 * v63];
        if (!v62)
          break;
      }
    }
LABEL_36:
    v182 = (v62 - 1) & v62;
    v183 = v63;
    v60 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_37:
    v65 = *((_QWORD *)v37 + 6) + *(_QWORD *)(v21 + 72) * v60;
    v66 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v67 = v178;
    v68 = v21;
    v69 = v174;
    v66(v178, v65, v174);
    v70 = *((_QWORD *)v37 + 7) + 16 * v60;
    v71 = *(int *)(v180 + 48);
    v72 = &v67[v71];
    a4 = *(uint64_t **)v70;
    v73 = *(_QWORD *)(v70 + 8);
    *(_QWORD *)v72 = *(_QWORD *)v70;
    *((_QWORD *)v72 + 1) = v73;
    v74 = v185;
    v75 = (uint64_t **)(v185 + v71);
    v76 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
    v77 = v67;
    v20 = v69;
    v76(v185, v77, v69);
    *v75 = a4;
    v75[1] = (uint64_t *)v73;
    v78 = v179;
    v32 = (uint64_t)v66;
    v66(v179, v74, v20);
    v47 = (uint64_t)v184;
    v76((uint64_t)v184, v78, v20);
    v50 = v175;
    v79 = v175[2].isa;
    v59 = swift_bridgeObjectRetain(v73);
    if (!v79)
      goto LABEL_19;
    swift_bridgeObjectRetain(v73);
    v80 = sub_10001A6DC((uint64_t)a4, v73);
    if ((v81 & 1) == 0)
    {
      v59 = swift_bridgeObjectRelease();
LABEL_19:
      v21 = v173;
      (*(void (**)(uint64_t, uint64_t, __n128))(v173 + 8))(v47, v20, v59);
      goto LABEL_20;
    }
    v82 = *((id *)v50[7].isa + v80);
    *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
    v191 = 0;
    v165 = v82;
    v84 = (uint64_t *)objc_msgSend(v82, "remObjectIDWithError:", &v191, v83);
    v85 = v191;
    if (!v84)
    {
      v145 = v191;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v85);

      swift_willThrow(v146);
      swift_release(v171);

      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v47, v20);
      sub_10000882C(v185, &qword_1008428B0);
      swift_release(v181);
      v140 = v162;
      return sub_10000882C(v140, (uint64_t *)&unk_10083FBE0);
    }
    a4 = v84;
    v86 = v191;
    v87 = objc_msgSend(a4, "uuid");
    v88 = v168;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

    v21 = v173;
    v89 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v88, 0, 1, v20);
    static Date.now.getter(v89);
    v90.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v88, 1, v20) == 1)
    {
      v91 = 0;
    }
    else
    {
      v91 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v88, v20);
    }
    v92 = objc_allocWithZone((Class)REMMembership);
    v93 = v177;
    v94 = Date._bridgeToObjectiveC()().super.isa;
    v95 = objc_msgSend(v92, "initWithMemberIdentifier:groupIdentifier:isObsolete:modifiedOn:", v90.super.isa, v91, 0, v94);

    (*(void (**)(char *, uint64_t))(v169 + 8))(v93, v170);
    v96 = v161;
    swift_beginAccess(v161, &v191, 33, 0);
    v97 = v95;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v97);
    v99 = *(_QWORD *)((*v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v98 = *(_QWORD *)((*v96 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v99 >= v98 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1);
    v164 = v97;
    v100 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v97);
    specialized Array._endMutation()(v100);
    swift_endAccess(&v191);
    v47 = (uint64_t)v184;
    v101 = v172;
    if (qword_1008370A8 != -1)
      swift_once(&qword_1008370A8, sub_10027C514);
    v102 = type metadata accessor for Logger(0);
    sub_10001AAA8(v102, (uint64_t)qword_100842718);
    ((void (*)(char *, uint64_t, uint64_t))v32)(v101, v47, v20);
    v103 = v171;
    swift_retain_n(v171);
    v104 = a4;
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    v32 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      v107 = swift_slowAlloc(42, -1);
      v159 = (_QWORD *)swift_slowAlloc(16, -1);
      v156 = swift_slowAlloc(64, -1);
      v190 = v156;
      *(_DWORD *)v107 = v150.n128_u32[0];
      v155 = v105;
      v191 = v152;
      MetatypeMetadata = swift_getMetatypeMetadata(v152);
      v109 = String.init<A>(describing:)(&v191, MetatypeMetadata);
      v154 = a4;
      v191 = (id)sub_10001A820(v109, v110, &v190);
      v153 = v32;
      v32 = (uint64_t)v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v151);
      swift_bridgeObjectRelease();
      *(_WORD *)(v107 + 12) = 2114;
      v111 = *(void **)(v103 + 24);
      v191 = v111;
      v112 = v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v32);
      *v159 = v111;
      swift_release_n(v103);
      *(_WORD *)(v107 + 22) = 2082;
      v113 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v114 = v172;
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v20, v113);
      v191 = (id)sub_10001A820(v115, v116, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v32);
      v117 = swift_bridgeObjectRelease();
      v118 = *(void (**)(char *, uint64_t, __n128))(v21 + 8);
      v118(v114, v20, v117);
      *(_WORD *)(v107 + 32) = 2114;
      a4 = (uint64_t *)(v107 + 42);
      v191 = v104;
      v119 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v32);
      v120 = v159;
      v159[1] = v154;

      v50 = v155;
      _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v153, "%{public}s: Auto-categorized reminder based on prediction from grocery classifier {listObjectID: %{public}@, reminderIdentifier: %{public}s, sectionObjectID: %{public}@}", (uint8_t *)v107, 0x2Au);
      v121 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v120, 2, v121);
      swift_slowDealloc(v120, -1, -1);
      v47 = v156;
      swift_arrayDestroy(v156, 2, v149);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v107, -1, -1);

      ((void (*)(char *, uint64_t))v118)(v184, v20);
    }
    else
    {

      v50 = *(os_log_t *)(v21 + 8);
      ((void (*)(char *, uint64_t))v50)(v101, v20);

      swift_release_n(v103);
      ((void (*)(uint64_t, uint64_t))v50)(v47, v20);
    }
LABEL_20:
    sub_10000882C(v185, &qword_1008428B0);
    v37 = v181;
    v58 = v183;
    v56 = v182;
  }
  v64 = v58 + 4;
  if (v58 + 4 >= v167)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    swift_release(v37);
    goto LABEL_51;
  }
  v62 = *(_QWORD *)&v166[8 * v64];
  if (v62)
  {
    v63 = v58 + 4;
    goto LABEL_36;
  }
  while (1)
  {
    v63 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v63 >= v167)
      goto LABEL_50;
    v62 = *(_QWORD *)&v166[8 * v63];
    ++v64;
    if (v62)
      goto LABEL_36;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  if (v47 < 0)
    v147 = v47;
  else
    v147 = v47 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v47);
  v122 = _CocoaArrayWrapper.endIndex.getter(v147);
  swift_bridgeObjectRelease();
  if (!v122)
    goto LABEL_58;
LABEL_53:
  v123 = (id *)(v163 + 16);
  swift_beginAccess(a4, &v190, 0, 0);
  v124 = *a4;
  v125 = objc_allocWithZone((Class)REMMemberships);
  sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
  swift_bridgeObjectRetain(v124);
  v126 = Array._bridgeToObjectiveC()().super.isa;
  v127 = objc_msgSend(v125, "initWithMemberships:", v126, swift_bridgeObjectRelease().n128_f64[0]);

  swift_beginAccess(v123, v189, 0, 0);
  if (*v123)
  {
    v128 = *v123;
    v129 = objc_msgSend(v127, "mergingWith:mergePolicy:", v128, 0);

    v127 = v129;
  }
  v32 = v162;
  v130 = v127;
  sub_10027C15C(v127, 1);
  if (!v20)
  {

    v37 = v157;
    goto LABEL_58;
  }
  swift_release(v171);

LABEL_66:
  v140 = v32;
  return sub_10000882C(v140, (uint64_t *)&unk_10083FBE0);
}

void sub_100288A5C(void *a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  NSString v32;
  id v33;
  NSString v34;
  Class isa;
  uint64_t v36;
  void *v37;
  id v38;

  v4 = v2;
  if (a1)
  {
    v7 = sub_1000151B0(0, &qword_100844770, REMTextMemberships_ptr);
    v8 = a1;
    v9 = REMChecksumRepresentable.rem_checksum.getter(v7, &protocol witness table for REMTextMemberships);
    if (v3)
    {
LABEL_3:

      return;
    }
    v14 = v9;
    v15 = v10;
    v16 = objc_msgSend(v4, "groceryLocalCorrectionsChecksum", swift_bridgeObjectRetain(v10).n128_f64[0]);
    if (!v16)
    {
      v23 = swift_bridgeObjectRelease();
LABEL_18:
      v24 = REMJSONRepresentable.toJSONData()(v7, &protocol witness table for REMTextMemberships, v23);
      v26 = v25;
      v27 = objc_msgSend(v4, "groceryLocalCorrectionsChecksum");
      if (!v27)
        goto LABEL_23;
      v28 = v27;
      v38 = v8;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v36 = v30;

      if (v29 == v14 && v36 == v15)
      {
        swift_bridgeObjectRelease_n(v15, 2);
        v8 = v38;
LABEL_26:
        sub_1000A70E4(v24, v26);
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000A71C8(v24, v26);
        objc_msgSend(v4, "setGroceryLocalCorrectionsAsData:", isa);

        sub_1000A71C8(v24, v26);
        goto LABEL_3;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v36, v14, v15, 0);
      swift_bridgeObjectRelease();
      v8 = v38;
      if ((v31 & 1) == 0)
      {
LABEL_23:
        v32 = String._bridgeToObjectiveC()();
        objc_msgSend(v4, "setGroceryLocalCorrectionsChecksum:", v32);

        if ((a2 & 1) != 0)
        {
          v33 = objc_msgSend(v4, "createResolutionTokenMapIfNecessary");
          v34 = String._bridgeToObjectiveC()();
          objc_msgSend(v33, "updateForKey:", v34);
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    v17 = v16;
    v37 = v8;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    if (v14 != v18 || v15 != v20)
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v18, v20, 0);
      swift_bridgeObjectRelease();
      v23 = swift_bridgeObjectRelease();
      v8 = v37;
      if ((v22 & 1) != 0)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_18;
    }

    swift_bridgeObjectRelease_n(v15, 3);
  }
  else
  {
    v11 = objc_msgSend(v2, "groceryLocalCorrectionsChecksum");
    if (v11)
    {

      objc_msgSend(v2, "setGroceryLocalCorrectionsChecksum:", 0);
      if ((a2 & 1) != 0)
      {
        v12 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
        v13 = String._bridgeToObjectiveC()();
        objc_msgSend(v12, "updateForKey:", v13);

      }
    }
    objc_msgSend(v4, "setGroceryLocalCorrectionsAsData:", 0);
  }
}

uint64_t sub_100288E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  v1 = v0 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100288E88()
{
  return type metadata accessor for RDGroceryOperationCategorizeRemindersInList(0);
}

uint64_t type metadata accessor for RDGroceryOperationCategorizeRemindersInList(uint64_t a1)
{
  return sub_10001522C(a1, qword_100842770, (uint64_t)&nominal type descriptor for RDGroceryOperationCategorizeRemindersInList);
}

uint64_t sub_100288EA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1006B1F30;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1006B1F48;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100288F5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10084283C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000CAD70;
  return sub_10027C7D4(a1);
}

uint64_t sub_100288FAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100288FD8(_OWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100282AF8(*(void **)(v1 + 16), a1);
}

id *sub_100288FF0(id *a1)
{

  return a1;
}

unint64_t sub_100289018()
{
  id *v0;
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  _BYTE v33[16];
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  _BYTE v37[8];

  v1 = v0;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v36[0] = 0xD00000000000002BLL;
  v36[1] = 0x80000001006FE900;
  v2 = *v0;
  v3 = objc_msgSend(v2, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8069182;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v36, "remObjectID: ");
  HIWORD(v36[1]) = -4864;
  sub_1000A5CA8((uint64_t)(v1 + 1), (uint64_t)v37, (uint64_t *)&unk_100844910);
  sub_1000A5CA8((uint64_t)v37, (uint64_t)&v34, (uint64_t *)&unk_100844910);
  v9 = sub_10001A630((uint64_t *)&unk_100844910);
  v10._countAndFlagsBits = Optional.descriptionOrNil.getter(v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12 = v36[0];
  v13 = (void *)v36[1];
  v36[0] = 0xD00000000000002BLL;
  v36[1] = 0x80000001006FE900;
  swift_bridgeObjectRetain(0x80000001006FE900);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v36[0];
  v15 = v36[1];
  v36[0] = 0;
  v36[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v36[0] = 0xD00000000000001ELL;
  v36[1] = 0x80000001006FE930;
  if (((_BYTE)v1[2] & 1) != 0)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (((_BYTE)v1[2] & 1) != 0)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21 = v36[0];
  v22 = (void *)v36[1];
  v36[0] = v16;
  v36[1] = v15;
  swift_bridgeObjectRetain(v15);
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v36[0];
  v24 = v36[1];
  v36[0] = 0;
  v36[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v34 = 0xD000000000000011;
  v35 = 0x80000001006FE950;
  sub_1000A5CA8((uint64_t)(v1 + 3), (uint64_t)v36, (uint64_t *)&unk_10083A370);
  sub_1000A5CA8((uint64_t)v36, (uint64_t)v33, (uint64_t *)&unk_10083A370);
  v26 = sub_10001A630((uint64_t *)&unk_10083A370);
  v27._countAndFlagsBits = Optional.descriptionOrNil.getter(v26);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28 = v34;
  v29 = (void *)v35;
  v34 = v25;
  v35 = v24;
  swift_bridgeObjectRetain(v24);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v35);
  v31._countAndFlagsBits = 125;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  return v34;
}

unint64_t sub_10028934C()
{
  return sub_100289018();
}

unint64_t sub_100289384()
{
  __n128 v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;

  _StringGuts.grow(_:)(17);
  v0 = swift_bridgeObjectRelease();
  strcpy((char *)&v9, "remObjectID: ");
  HIWORD(v9._object) = -4864;
  v1._countAndFlagsBits = UUID.description.getter(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  _s31ThreadSafePartialRepresentationVMa(0);
  v3 = sub_10001A630((uint64_t *)&unk_10083A370);
  v4._countAndFlagsBits = Optional.descriptionOrNil.getter(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0x80000001006FE890);
  v5._countAndFlagsBits = 0x6163696E6F6E6163;
  v5._object = (void *)0xEF203A656D614E6CLL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v9, "displayName: ");
  HIWORD(v9._object) = -4864;
  v6._countAndFlagsBits = Optional.descriptionOrNil.getter(v3);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0x80000001006FE890);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0x80000001006FE890);
  v7._countAndFlagsBits = 125;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0xD000000000000032;
}

unint64_t sub_1002895C8(void *a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  char *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v17;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)&v17, "remObjectID: ");
  HIWORD(v17._object) = -4864;
  v6 = objc_msgSend(a1, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v17._object);
  swift_bridgeObjectRetain(a3);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a3);
  v13 = strcpy((char *)&v17, "title: ");
  swift_bridgeObjectRetain(0x80000001006FE8D0);
  v14._countAndFlagsBits = (uint64_t)v13;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(0x80000001006FE8D0);
  swift_bridgeObjectRelease(0xE700000000000000);
  swift_bridgeObjectRetain(0x80000001006FE8D0);
  v15._countAndFlagsBits = 125;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(0x80000001006FE8D0);
  return 0xD00000000000002FLL;
}

unint64_t sub_100289764()
{
  uint64_t v0;

  return sub_1002895C8(*(void **)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_100289770()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10028979C(unint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100282F74(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1002897B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002897D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002897FC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100289820()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 160, 7);
}

void sub_1002898A4()
{
  uint64_t v0;

  sub_100284FB8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)(v0 + 32), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

id *sub_1002898E8(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_100289910()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_100289984()
{
  uint64_t v0;

  return sub_100287864(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)(v0 + 32), *(uint64_t **)(v0 + 80), *(_QWORD *)(v0 + 88), *(char **)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(void **)(v0 + 136));
}

unint64_t sub_1002899C4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100289B9C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100289D78(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for CodingUserInfoKey(0);
  v36 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v4, &protocol witness table for CodingUserInfoKey);
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result);
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100289FFC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1002933E0(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_10020DA24((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10028A1C4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12 * v10;
        v16 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v17 = *(_QWORD *)(a2 + 40);
        v18 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v16;
        v20 = v19 & v16;
        if (a1 >= (uint64_t)v36)
        {
          if (v20 >= v36 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v23 = *(_QWORD *)(a2 + 48);
            v24 = v12 * a1;
            v25 = v23 + v12 * a1;
            if (v12 * a1 < v15 || v25 >= v23 + v15 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v25);
            }
            else if (v24 != v15)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v26 = *(_QWORD *)(a2 + 56);
            result = v26 + v24;
            if (v24 < v15 || result >= v26 + v15 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack(result);
              a1 = v10;
              v8 = v14;
              v13 = v16;
            }
            else
            {
              a1 = v10;
              v27 = v24 == v15;
              v8 = v14;
              v13 = v16;
              if (!v27)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                v13 = v16;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v36 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10028A480(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10028A654(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  Swift::Int v11;
  id v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 40);
        v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v13 = NSObject._rawHashValue(seed:)(v11);

        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            v17 = *(_QWORD *)(a2 + 48);
            v18 = (_QWORD *)(v17 + 8 * v3);
            v19 = (_QWORD *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1)
              *v18 = *v19;
            v20 = *(_QWORD *)(a2 + 56);
            v21 = v20 + 24 * v3;
            v22 = (__int128 *)(v20 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              v10 = *v22;
              *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v21 = v10;
              v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10028A818(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack(result);
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10028AA14(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10028ABFC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v37 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v36(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v7 = v14;
            if (v15 * a1 < v16 || (v12 = v15, v25 >= v24 + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack(v25);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v9);
            if (a1 != v9 || (a1 = v9, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v29 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10028AE9C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v39 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v38(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v7 = v14;
            if (v15 * a1 < v16 || (v12 = v15, v25 >= v24 + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack(v25);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v9);
            if (a1 != v9 || (a1 = v9, v27 >= (unint64_t)v28 + 40))
            {
              v29 = *v28;
              v30 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v31 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10028B148(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  unint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v41 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v42 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v40(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v41)
        {
          if (v21 >= v41 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v7 = v14;
            if (v15 * a1 < v16 || v25 >= v24 + v16 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for RDSavedReminder(0) - 8) + 72);
            v28 = v27 * a1;
            v29 = v26 + v27 * a1;
            v30 = v27 * v9;
            v31 = v26 + v27 * v9 + v27;
            if (v28 < v30 || v29 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack(v29);
              a1 = v9;
              v13 = v17;
            }
            else
            {
              a1 = v9;
              v13 = v17;
              if (v28 != v30)
              {
                swift_arrayInitWithTakeBackToFront(v29);
                v13 = v17;
                a1 = v9;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v41 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v7 = v14;
LABEL_5:
        v9 = (v9 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v33 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  *v33 = v35 & v34;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10028B41C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10028B5CC(int a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10001A6DC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002D5DDC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_DWORD *)(v18[7] + 4 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1002CBF30(v15, a4 & 1);
  v19 = sub_10001A6DC(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028B71C(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10001A6DC(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_1002D5F88();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_1002CC238(v15, a3 & 1);
  v19 = sub_10001A6DC(a1, a2);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028B870(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002D614C, (void (*)(void))sub_1002CC560);
}

void sub_10028B884(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, __n128))sub_1002C65F8, sub_1002D6158, (void (*)(void))sub_1002CC56C);
}

void sub_10028B8A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002D6568, (void (*)(void))sub_1002CCF08);
}

void sub_10028B8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10001A6DC(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1002D6574();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1002CCF14(v17, a5 & 1);
  v22 = sub_10001A6DC(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028BA30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D68CC, (void (*)(void))sub_1002CD560);
}

void sub_10028BA44(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6730((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D68D8();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CD56C(v12, a3 & 1);
  v17 = sub_1002C6730((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = type metadata accessor for REMObjectID_Codable(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028BB94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002D6910, (void (*)(void))sub_1002CD5C8);
}

void sub_10028BBA8(uint64_t a1, void *a2, char a3)
{
  sub_10028C720(a1, a2, a3, (void (*)(void))sub_1002D691C, (void (*)(void))sub_1002CD5D4);
}

void sub_10028BBBC(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D6C90();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CDEF8(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

uint64_t sub_10028BD1C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10028CA08(a1, a2, a3, (void (*)(void))sub_1002D6C9C, (void (*)(void))sub_1002CE7B8);
}

_OWORD *sub_10028BD30(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C6A38(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 32 * v14);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);
        return sub_10001A6CC(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1002D6CA8();
      goto LABEL_7;
    }
    sub_1002CE7D0(v17, a3 & 1);
    v23 = sub_1002C6A38(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10028F15C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10028BEAC(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6AB8((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D6EF8();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CEB78(v12, a3 & 1);
  v17 = sub_1002C6AB8((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028C00C(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6B04((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D6F04();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CEB84(v12, a3 & 1);
  v17 = sub_1002C6B04((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

_OWORD *sub_10028C16C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1002C6A88(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v17);
        return sub_10001A6CC(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1002D6F10();
      goto LABEL_7;
    }
    sub_1002CEB90(v13, a3 & 1);
    v19 = sub_1002C6A88(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1002933E0(a2, (uint64_t)v21);
      return sub_10028F1FC(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10028C2A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D70F4, (void (*)(void))sub_1002CEEA4);
}

uint64_t sub_10028C2B8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1002D6344();
    goto LABEL_7;
  }
  sub_1002CCB6C(result, a3 & 1);
  result = sub_1002C65F8(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10028F07C(v14, (uint64_t)v11, a1, v20);
}

void sub_10028C408(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D7114, (void (*)(void))sub_1002CEED4);
}

void sub_10028C41C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002D7120, (void (*)(void))sub_1002CEEE0);
}

uint64_t sub_10028C430(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1002D712C();
      goto LABEL_7;
    }
    sub_1002CEEEC(v17, a3 & 1);
    v22 = sub_1002C65F8(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10028F278(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10028C5AC(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D7388();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CF2C4(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028C70C(uint64_t a1, void *a2, char a3)
{
  sub_10028C720(a1, a2, a3, (void (*)(void))sub_1002D73B8, (void (*)(void))sub_1002CF2F4);
}

void sub_10028C720(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v8 = v5;
  v11 = *v5;
  v13 = sub_1002C66DC((uint64_t)a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8 * v13));
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v19[6] + v23) = a2;
    *(_QWORD *)(v19[7] + v23) = a1;
    v24 = v19[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v19[2] = v26;
      v27 = a2;
      return;
    }
    goto LABEL_14;
  }
  a5();
  v21 = sub_1002C66DC((uint64_t)a2);
  if ((v17 & 1) == (v22 & 1))
  {
    v13 = v21;
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v28 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
}

void sub_10028C894(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D7600();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CF678(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

uint64_t sub_10028C9F4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10028CA08(a1, a2, a3, (void (*)(void))sub_1002D760C, (void (*)(void))sub_1002CF684);
}

uint64_t sub_10028CA08(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  void (*v27)(void);
  uint64_t v28;

  v27 = a5;
  v28 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1002C65F8(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_release(*(_QWORD *)(v23 + 8 * v16));
      *(_QWORD *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v27();
  v25 = sub_1002C65F8(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_10028F07C(v16, (uint64_t)v13, v28, v22);
}

void sub_10028CB74(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10001A6DC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
        sub_10001A6CC(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002D7BCC();
      goto LABEL_7;
    }
    sub_1002D0024(v15, a4 & 1);
    v20 = sub_10001A6DC(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10028F324(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

id sub_10028CCA4(uint64_t a1, void *a2, char a3)
{
  return sub_10028CCCC(a1, a2, a3, (void (*)(void))sub_1002D6140, (void (*)(void))sub_1002CC554);
}

id sub_10028CCB8(uint64_t a1, void *a2, char a3)
{
  return sub_10028CCCC(a1, a2, a3, (void (*)(void))sub_1002D7DE0, (void (*)(void))sub_1002D035C);
}

id sub_10028CCCC(uint64_t a1, void *a2, char a3, void (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v8 = v5;
  v11 = *v5;
  v13 = sub_1002C66DC((uint64_t)a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    a4();
LABEL_7:
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = (id)swift_release(*(_QWORD *)(v20 + 8 * v13));
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v24 = 8 * v13;
    *(_QWORD *)(v19[6] + v24) = a2;
    *(_QWORD *)(v19[7] + v24) = a1;
    v25 = v19[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v19[2] = v27;
      return a2;
    }
    goto LABEL_14;
  }
  a5();
  v22 = sub_1002C66DC((uint64_t)a2);
  if ((v17 & 1) == (v23 & 1))
  {
    v13 = v22;
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v28 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

void sub_10028CE40(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6C80((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D81D0();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D09A8(v12, a3 & 1);
  v17 = sub_1002C6C80((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028CFA0(uint64_t a1, void *a2, char a3)
{
  sub_10028C720(a1, a2, a3, (void (*)(void))sub_1002D8380, (void (*)(void))sub_1002D0C84);
}

void sub_10028CFB4(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = (_QWORD **)v4;
  v10 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  v24 = a1[3];
  v25 = a1[4];
  v26 = a1[5];
  v12 = (_QWORD *)*v4;
  v14 = sub_10001A6DC(a2, a3);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a4 & 1) != 0)
    {
LABEL_7:
      v20 = *v5;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 48 * v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v21 = v10;
        v21[1] = v9;
        v21[2] = v11;
        v21[3] = v24;
        v21[4] = v25;
        v21[5] = v26;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      sub_1002D83E0();
      goto LABEL_7;
    }
    sub_1002D0CF0(v17, a4 & 1);
    v22 = sub_10001A6DC(a2, a3);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v5;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      *(_QWORD *)&v27 = v10;
      *((_QWORD *)&v27 + 1) = v9;
      v28 = v11;
      v29 = v24;
      v30 = v25;
      v31 = v26;
      sub_10028F38C(v14, a2, a3, &v27, v20);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

id sub_10028D154(uint64_t a1, void *a2, char a3)
{
  return sub_10028E508(a1, a2, a3, (uint64_t (*)(void))sub_1002D85C8, (void (*)(void))sub_1002D12A8);
}

void sub_10028D168(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002D85D4, (void (*)(void))sub_1002D12B4);
}

uint64_t sub_10028D17C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10028DAA4(a1, a2, a3, a4, (void (*)(void))sub_1002D8A54, (void (*)(void))sub_1002D19A8, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

void sub_10028D198(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6690((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D8A68();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D19BC(v12, a3 & 1);
  v17 = sub_1002C6690((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

uint64_t sub_10028D2F8(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10001A6DC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
        return sub_10001BCA8(a1, (uint64_t)v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002D8A74();
      goto LABEL_7;
    }
    sub_1002D19C8(v15, a4 & 1);
    v21 = sub_10001A6DC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10028F3E8(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10028D42C(uint64_t a1, void *a2, char a3)
{
  sub_10028C720(a1, a2, a3, (void (*)(void))sub_1002D8C5C, (void (*)(void))sub_1002D1CEC);
}

void sub_10028D440(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1002C65F8(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_bridgeObjectRelease(v22[1]);
      v23 = v27;
      *v22 = a1;
      v22[1] = v23;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1002D8C68();
    goto LABEL_7;
  }
  sub_1002D1CF8(v18, a4 & 1);
  v24 = sub_1002C65F8(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v15 = v24;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  sub_10028F454(v15, (uint64_t)v12, a1, v27, v21);
}

void sub_10028D5AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028D8E0(a1, a2, a3, a4, (void (*)(void))sub_1002D8EFC, (void (*)(void))sub_1002D20C8, (void (*)(_QWORD))&_swift_release);
}

void sub_10028D5C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D90B0, (void (*)(void))sub_1002D23DC);
}

void sub_10028D5DC(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, (uint64_t (*)(uint64_t, __n128))sub_1002C6E44, sub_1002D90BC, (void (*)(void))sub_1002D23E8);
}

void sub_10028D600(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t, __n128), void (*a6)(void), void (*a7)(void))
{
  _QWORD *v7;
  _QWORD **v9;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(void);
  void (*v30)(void);
  uint64_t (*v31)(_QWORD);
  uint64_t v32;

  v29 = a6;
  v30 = a7;
  v9 = (_QWORD **)v7;
  v31 = a4;
  v32 = a1;
  v12 = a4(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  v17 = (_QWORD *)*v7;
  v19 = a5(a2, v14);
  v20 = v17[2];
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_14;
  }
  v23 = v18;
  v24 = v17[3];
  if (v24 >= v22 && (a3 & 1) != 0)
  {
LABEL_7:
    v25 = *v9;
    if ((v23 & 1) != 0)
    {
LABEL_8:
      v26 = v25[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v26 + 8 * v19));
      *(_QWORD *)(v26 + 8 * v19) = v32;
      return;
    }
    goto LABEL_11;
  }
  if (v24 >= v22 && (a3 & 1) == 0)
  {
    v29();
    goto LABEL_7;
  }
  v30();
  v27 = ((uint64_t (*)(uint64_t))a5)(a2);
  if ((v23 & 1) != (v28 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return;
  }
  v19 = v27;
  v25 = *v9;
  if ((v23 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  sub_10028F628(v19, (uint64_t)v16, v32, v25, v31);
}

void sub_10028D770(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D925C, (void (*)(void))sub_1002D26B0);
}

uint64_t sub_10028D784(char a1, double a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1002C6EDC(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a1 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a1 & 1) == 0)
  {
    result = (uint64_t)sub_1002D9268();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a2;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(double *)(v16[6] + v18) = a3;
    *(double *)(v16[7] + v18) = a2;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002D26BC(result, a1 & 1);
  result = sub_1002C6EDC(a3);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Double);
  __break(1u);
  return result;
}

void sub_10028D8B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002D93F4, (void (*)(void))sub_1002D2968);
}

void sub_10028D8C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028D8E0(a1, a2, a3, a4, (void (*)(void))sub_1002D9400, (void (*)(void))sub_1002D2974, (void (*)(_QWORD))&_swift_errorRelease);
}

void sub_10028D8E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(_QWORD))
{
  _QWORD *v7;
  _QWORD *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v10 = v7;
  v15 = *v7;
  v17 = sub_10001A6DC(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v23 = (_QWORD *)*v10;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7];
      a7(*(_QWORD *)(v24 + 8 * v17));
      *(_QWORD *)(v24 + 8 * v17) = a1;
      return;
    }
LABEL_11:
    v23[(v17 >> 6) + 8] |= 1 << v17;
    v27 = (uint64_t *)(v23[6] + 16 * v17);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v23[7] + 8 * v17) = a1;
    v28 = v23[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v23[2] = v30;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  a6();
  v25 = sub_10001A6DC(a2, a3);
  if ((v21 & 1) == (v26 & 1))
  {
    v17 = v25;
    v23 = (_QWORD *)*v10;
    if ((v21 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028DA64(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, __n128))sub_1002C65F8, sub_1002D95C8, (void (*)(void))sub_1002D2CAC);
}

uint64_t sub_10028DA88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10028DAA4(a1, a2, a3, a4, (void (*)(void))sub_1002D95DC, (void (*)(void))sub_1002D2CD0, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_10028DAA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD))
{
  _QWORD *v7;
  _QWORD **v10;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  char v28;

  v10 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = sub_10001A6DC(a2, a3);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = v23[7];
        v25 = a7(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v17, a1, v25);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v27 = sub_10001A6DC(a2, a3);
    if ((v21 & 1) == (v28 & 1))
    {
      v17 = v27;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10028F4F4(v17, a2, a3, a1, v23, a7);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10028DC0C(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D984C();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D3048(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028DD6C(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D9858();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D3054(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028DECC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1002D9864();
    goto LABEL_7;
  }
  sub_1002D3060(v17, a3 & 1);
  v22 = sub_1002C65F8(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10028F07C(v14, (uint64_t)v11, a1, v20);
}

void sub_10028E028(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, __n128))sub_1002C65F8, sub_1002D95B4, (void (*)(void))sub_1002D2C88);
}

uint64_t sub_10028E04C(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 40 * v14);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);
        return sub_10001BCA8(a1, (uint64_t)v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1002D9870();
      goto LABEL_7;
    }
    sub_1002D3078(v17, a3 & 1);
    v23 = sub_1002C65F8(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10028F584(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10028E1CC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1002D9AB0();
    goto LABEL_7;
  }
  sub_1002D3420(v17, a3 & 1);
  v23 = sub_1002C65F8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10028F07C(v14, (uint64_t)v11, a1, v20);
}

void sub_10028E328(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, __n128))sub_1002C65F8, sub_1002D9CE0, (void (*)(void))sub_1002D37B4);
}

void sub_10028E34C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10028D600(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, __n128))sub_1002C65F8, sub_1002D9CF4, (void (*)(void))sub_1002D37D8);
}

uint64_t sub_10028E370(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002C65F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = type metadata accessor for RDSavedReminder(0);
      return sub_1001CF8A4(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, type metadata accessor for RDSavedReminder);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1002D9F38();
    goto LABEL_7;
  }
  sub_1002D3B88(v17, a3 & 1);
  v24 = sub_1002C65F8(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10028F6C0(v14, (uint64_t)v11, a1, v20);
}

void sub_10028E4E0(uint64_t a1, void *a2, char a3)
{
  sub_10028C720(a1, a2, a3, (void (*)(void))sub_1002DA210, (void (*)(void))sub_1002D3F90);
}

id sub_10028E4F4(uint64_t a1, void *a2, char a3)
{
  return sub_10028E508(a1, a2, a3, (uint64_t (*)(void))sub_1002DA3BC, (void (*)(void))sub_1002D426C);
}

id sub_10028E508(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  id result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v8 = v5;
  v11 = *v5;
  v13 = sub_1002C66DC((uint64_t)a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= (uint64_t)result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v18 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = (id)a4();
LABEL_7:
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v19[7] + 8 * v13) = a1;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v21 = 8 * v13;
    *(_QWORD *)(v19[6] + v21) = a2;
    *(_QWORD *)(v19[7] + v21) = a1;
    v22 = v19[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v19[2] = v24;
      return a2;
    }
    goto LABEL_14;
  }
  a5();
  result = (id)sub_1002C66DC((uint64_t)a2);
  if ((v17 & 1) == (v20 & 1))
  {
    v13 = (unint64_t)result;
    v19 = (_QWORD *)*v8;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v25 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

uint64_t sub_10028E670(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1002C6F10(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1002DA578();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v21 = 8 * v10;
    *(_QWORD *)(v16[6] + v21) = a2;
    *(_QWORD *)(v16[7] + v21) = a1;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return swift_retain(a2);
    }
    goto LABEL_14;
  }
  sub_1002D4558(v13, a3 & 1);
  v19 = sub_1002C6F10(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    v10 = v19;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v25 = type metadata accessor for RDManualSortIDPersistenceHost();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

void sub_10028E7C0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002D6134();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002CC53C(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028E920(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C66DC((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002DA720();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D488C(v12, a3 & 1);
  v17 = sub_1002C66DC((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028EA80(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002DA72C, (void (*)(void))sub_1002D4898);
}

void sub_10028EA94(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6C34((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002DA738();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D48A4(v12, a3 & 1);
  v17 = sub_1002C6C34((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_10028EBF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002DA744, (void (*)(void))sub_1002D48B0);
}

void sub_10028EC08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EC1C(a1, a2, a3, a4, sub_1002DA750, (void (*)(void))sub_1002D48BC);
}

void sub_10028EC1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v14 = *v6;
  v16 = sub_10001A6DC(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v23 + 8 * v16));
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = a2;
    v26[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  a6();
  v24 = sub_10001A6DC(a2, a3);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028ED8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10028EDA0(a1, a2, a3, a4, (void (*)(void))sub_1002DA75C, (void (*)(void))sub_1002D48C8);
}

void sub_10028EDA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v14 = *v6;
  v16 = sub_10001A6DC(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];

      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = a2;
    v26[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  a6();
  v24 = sub_10001A6DC(a2, a3);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10028EF10(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1002C6690((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002DAEC0();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1002D55BC(v12, a3 & 1);
  v17 = sub_1002C6690((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

uint64_t sub_10028F070(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10028F628(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10028F07C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_10028F114(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

_OWORD *sub_10028F15C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10001A6CC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10028F1FC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10001A6CC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_10028F278(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72) * a1;
  v12 = v8 + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

_OWORD *sub_10028F324(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10001A6CC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_10028F38C(unint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *a4;
  v6 = a4[1];
  v7 = *((_QWORD *)a4 + 4);
  v8 = *((_QWORD *)a4 + 5);
  a5[(result >> 6) + 8] |= 1 << result;
  v9 = (_QWORD *)(a5[6] + 16 * result);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7] + 48 * result;
  *(_OWORD *)v10 = v5;
  *(_OWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 32) = v7;
  *(_QWORD *)(v10 + 40) = v8;
  v11 = a5[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a5[2] = v13;
  return result;
}

uint64_t sub_10028F3E8(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10001BCA8(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10028F454(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_10028F4F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a5[6] + 16 * a1);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7];
  v11 = a6(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a4, v11);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t sub_10028F584(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10001BCA8(a3, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10028F628(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

uint64_t sub_10028F6C0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for RDSavedReminder(0);
  result = sub_1000B8680(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for RDSavedReminder);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_10028F778(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10028F7C0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  char v8;
  void *v9;
  uint64_t v11;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 3;
  v7 = v6 & 0x1FFFFFFFFFFFFFF8;
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v6 & 0x1FFFFFFFFFFFFFF8, 8),
        (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100291508((uint64_t)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v3, a2);
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v8 = sub_100291508((uint64_t)v9, v3, a2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v8 & 1;
}

uint64_t sub_10028F92C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10028F9CC(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10028FA20(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_10028FA74(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = v3 & 0xC000000000000001;
    v6 = _swiftEmptyArrayStorage;
    v7 = 4;
    v25 = v3;
    v23 = v3 & 0xC000000000000001;
    v24 = v4;
    while (1)
    {
      v8 = v7 - 4;
      if (!v5)
        break;
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v3);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_19;
LABEL_11:
      if (*(_QWORD *)(a2 + 16))
      {
        v11 = v9;
        v12 = sub_1002C66DC((uint64_t)v11);
        if ((v13 & 1) != 0)
        {
          v14 = *(_QWORD *)(a2 + 56) + 24 * v12;
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(_QWORD *)(v14 + 16);
          v17 = *(id *)v14;
          swift_bridgeObjectRetain(v16);

          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
            v6 = sub_1002CA444(0, v6[2] + 1, 1, v6);
          v19 = v6[2];
          v18 = v6[3];
          if (v19 >= v18 >> 1)
            v6 = sub_1002CA444((_QWORD *)(v18 > 1), v19 + 1, 1, v6);
          v6[2] = v19 + 1;
          v20 = &v6[3 * v19];
          v20[4] = v17;
          v20[5] = v15;
          v20[6] = v16;
          v3 = v25;
          v5 = v23;
          v4 = v24;
        }
        else
        {

        }
      }
      else
      {

      }
      ++v7;
      if (v10 == v4)
        goto LABEL_25;
    }
    v9 = *(id *)(v3 + 8 * v7);
    v10 = v7 - 3;
    if (!__OFADD__(v8, 1))
      goto LABEL_11;
LABEL_19:
    __break(1u);
LABEL_20:
    if (v3 < 0)
      v21 = v3;
    else
      v21 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  v6 = _swiftEmptyArrayStorage;
LABEL_25:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10028FC44(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001006FE970)
  {
    swift_bridgeObjectRelease(0x80000001006FE970);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006FE970, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_10028FCC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A630(&qword_1008429A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10000A388(a1, v7);
  v10 = sub_100293C24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys, &type metadata for RDGroceryOperationCategorizeRemindersInList.Configuration.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A630(&qword_10083FE20);
    v12 = sub_100293C68(&qword_1008429A8, &qword_1008429B0, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  return v9;
}

_QWORD *sub_10028FE14(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v43 = (uint64_t)&v43 - v7;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMFeatureFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v13 + 104))(v16, enum case for REMFeatureFlags.groceryMultilingual(_:), v12, v14);
  v18 = REMFeatureFlags.isEnabled.getter(v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((v18 & 1) == 0)
    return _swiftEmptyArrayStorage;
  if ((a1 & 1) != 0)
  {
    v20 = static Locale.current.getter(v19);
    v21 = Locale.identifier.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v24 = sub_1002C8224(0, 1, 1, _swiftEmptyArrayStorage);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = sub_1002C8224((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v27 = v44;
    v24[2] = v26 + 1;
    v28 = &v24[2 * v26];
    v28[4] = v21;
    v28[5] = v23;
  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
    v27 = v44;
  }
  type metadata accessor for REMGroceryDataView(0);
  v29 = v45;
  v30 = (void *)static REMGroceryDataView.fetchSecondaryGroceryLocale(store:modelBaseLocaleConversion:)(*(_QWORD *)(v27 + 40), 0);
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "locale");

    if (v32)
    {
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v33, 1, v8);
    v34 = v43;
    sub_1000A5CA8((uint64_t)v5, v43, (uint64_t *)&unk_10083FBE0);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v34, 1, v8);
    if ((_DWORD)v35 == 1)
    {
      sub_10000882C(v34, (uint64_t *)&unk_10083FBE0);
    }
    else
    {
      v36 = Locale.identifier.getter(v35);
      v38 = v37;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v34, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        v24 = sub_1002C8224(0, v24[2] + 1, 1, v24);
      v40 = v24[2];
      v39 = v24[3];
      if (v40 >= v39 >> 1)
        v24 = sub_1002C8224((_QWORD *)(v39 > 1), v40 + 1, 1, v24);
      v24[2] = v40 + 1;
      v41 = &v24[2 * v40];
      v41[4] = v36;
      v41[5] = v38;
    }
  }
  return v24;
}

uint64_t sub_100290164(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  unint64_t v60;
  char v61;
  uint64_t v62;
  id v63;
  char **v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  id v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  double v82;
  id v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, uint64_t, uint64_t);
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v124 = a4;
  v125 = a2;
  v126 = a1;
  v114 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v114);
  v116 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = _s31ThreadSafePartialRepresentationVMa(0);
  v12 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v14 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v110 - v16;
  v18 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v18);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v113 = (uint64_t)&v110 - v22;
  __chkstk_darwin(v23);
  v118 = (uint64_t)&v110 - v24;
  __chkstk_darwin(v25);
  v115 = (char *)&v110 - v26;
  __chkstk_darwin(v27);
  v29 = (char *)&v110 - v28;
  v30 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v30 - 8);
  v128 = v30;
  __chkstk_darwin(v30);
  v32 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v122 = (char *)&v110 - v34;
  v119 = a6;
  v120 = a7;
  v129 = a6;
  v130 = a7;
  v35 = sub_1000E525C();
  v36 = StringProtocol.lowercased(with:)(a5, &type metadata for String, v35);
  if (!a3)
    goto LABEL_5;
  v112 = v17;
  v121 = v36;
  v38 = v37;
  v123 = a3;
  v39 = objc_msgSend(v123, "groupIdentifier");
  if (v39)
  {
    v40 = v39;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    v41 = v127;
    v42 = v128;
    v43 = *(void (**)(char *, char *, uint64_t))(v127 + 32);
    v43(v29, v32, v128);
    v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    v111(v29, 0, 1, v42);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v44(v29, 1, v42) == 1)
    {
      v45 = v111;
      goto LABEL_7;
    }
    v58 = (uint64_t)v122;
    v43(v122, v29, v42);
    if (!*(_QWORD *)(v124 + 16)
      || (v59 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v44,
          v60 = sub_1002C65F8(v58),
          v42 = v128,
          (v61 & 1) == 0))
    {
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v58, v42);
LABEL_32:
      swift_bridgeObjectRelease();

      goto LABEL_33;
    }
    v110 = (void (*)(char *, uint64_t, uint64_t))v43;
    sub_1002912CC(*(_QWORD *)(v124 + 56) + *(_QWORD *)(v12 + 72) * v60, (uint64_t)v14);
    sub_1000B8680((uint64_t)v14, (uint64_t)v112, _s31ThreadSafePartialRepresentationVMa);
    v62 = v38;
    v63 = v126;
    if (!v126)
      goto LABEL_44;
    v64 = &selRef_rd_isExcludedFromBackup;
    v65 = objc_msgSend(v126, "memberships");
    v66 = sub_1000151B0(0, &qword_1008428A8, REMTimestampedUUID_ptr);
    v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for String, v66, &protocol witness table for String);

    if (*(_QWORD *)(v67 + 16))
    {
      swift_bridgeObjectRetain(v38);
      v68 = sub_10001A6DC(v121, v38);
      if ((v69 & 1) != 0)
      {
        v70 = *(id *)(*(_QWORD *)(v67 + 56) + 8 * v68);
        swift_bridgeObjectRelease();
        v71 = objc_msgSend(v70, "identifier", swift_bridgeObjectRelease().n128_f64[0]);
        if (v71)
        {
          v72 = v71;
          v73 = (uint64_t)v115;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

          v74 = 0;
        }
        else
        {
          v74 = 1;
          v73 = (uint64_t)v115;
        }
        v75 = (uint64_t)v116;
        v99 = v111;
        v100 = v128;
        v111((char *)v73, v74, 1, v128);
        v101 = v118;
        (*(void (**)(uint64_t, char *, uint64_t))(v127 + 16))(v118, v112, v100);
        v99((char *)v101, 0, 1, v100);
        v102 = v101;
        v103 = v75 + *(int *)(v114 + 48);
        sub_10011D420(v73, v75);
        sub_10011D420(v102, v103);
        if (v59(v75, 1, v100) == 1)
        {

          sub_10000882C(v102, (uint64_t *)&unk_100839C80);
          sub_10000882C(v73, (uint64_t *)&unk_100839C80);
          if (v59(v103, 1, v100) == 1)
          {
            sub_10000882C(v75, (uint64_t *)&unk_100839C80);
LABEL_68:
            swift_bridgeObjectRelease();

            sub_10001C744((uint64_t)v112, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(char *, uint64_t))(v127 + 8))(v122, v128);
            goto LABEL_33;
          }
        }
        else
        {
          v104 = v113;
          sub_10011D420(v75, v113);
          if (v59(v103, 1, v100) != 1)
          {
            v110(v32, v103, v100);
            v106 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v107 = dispatch thunk of static Equatable.== infix(_:_:)(v104, v32, v100, v106);

            v108 = v73;
            v109 = *(void (**)(char *, uint64_t))(v127 + 8);
            v109(v32, v100);
            sub_10000882C(v118, (uint64_t *)&unk_100839C80);
            sub_10000882C(v108, (uint64_t *)&unk_100839C80);
            v109((char *)v104, v100);
            sub_10000882C(v75, (uint64_t *)&unk_100839C80);
            v63 = v126;
            v64 = &selRef_rd_isExcludedFromBackup;
            if ((v107 & 1) != 0)
              goto LABEL_68;
            goto LABEL_39;
          }

          sub_10000882C(v118, (uint64_t *)&unk_100839C80);
          sub_10000882C(v73, (uint64_t *)&unk_100839C80);
          (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v104, v100);
        }
        sub_10000882C(v75, (uint64_t *)&unk_10083B370);
        v63 = v126;
        v64 = &selRef_rd_isExcludedFromBackup;
LABEL_39:
        v83 = objc_msgSend(v63, v64[181], v82);
        v84 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v83, &type metadata for String, v66, &protocol witness table for String);

        if (*(_QWORD *)(v84 + 16))
        {
          swift_bridgeObjectRetain(v62);
          sub_10001A6DC(v121, v62);
          if ((v85 & 1) != 0)
          {

            swift_bridgeObjectRelease_n(v62, 2);
            swift_bridgeObjectRelease();
            sub_10001C744((uint64_t)v112, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(char *, uint64_t))(v127 + 8))(v122, v128);
LABEL_56:
            v79 = 1;
            return v79 & 1;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v42 = v128;
        v58 = (uint64_t)v122;
LABEL_44:
        v86 = v125;
        v87 = (uint64_t)v112;
        if (v125 && *(_QWORD *)(v125 + 16))
        {
          v88 = v120;
          swift_bridgeObjectRetain(v120);
          v89 = sub_10001A6DC(v119, v88);
          if ((v90 & 1) != 0)
          {
            v91 = (uint64_t *)(*(_QWORD *)(v86 + 56) + 16 * v89);
            v93 = *v91;
            v92 = v91[1];
            swift_bridgeObjectRetain(v92);
            swift_bridgeObjectRelease();
LABEL_51:
            swift_bridgeObjectRelease();
            v97 = (_QWORD *)(v87 + *(int *)(v117 + 20));
            v98 = v97[1];
            if (!v98)
            {

              sub_10001C744(v87, _s31ThreadSafePartialRepresentationVMa);
              (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v58, v128);
              goto LABEL_26;
            }
            if (*v97 != v93 || v98 != v92)
            {
              v105 = _stringCompareWithSmolCheck(_:_:expecting:)(*v97, v97[1], v93, v92, 0);
              swift_bridgeObjectRetain(v98);
              swift_bridgeObjectRelease();

              sub_10001C744(v87, _s31ThreadSafePartialRepresentationVMa);
              (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v58, v128);
              swift_bridgeObjectRelease();
              v79 = 0;
              if ((v105 & 1) != 0)
                return v79 & 1;
              goto LABEL_56;
            }
            swift_bridgeObjectRetain(v97[1]);
            swift_bridgeObjectRelease();

            sub_10001C744(v87, _s31ThreadSafePartialRepresentationVMa);
            (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v58, v128);
LABEL_5:
            swift_bridgeObjectRelease();
LABEL_33:
            v79 = 0;
            return v79 & 1;
          }
          swift_bridgeObjectRelease();
          v42 = v128;
          if (*(_QWORD *)(v86 + 16))
          {
            v94 = sub_10001A6DC(v121, v62);
            v42 = v128;
            if ((v95 & 1) != 0)
            {
              v96 = (uint64_t *)(*(_QWORD *)(v86 + 56) + 16 * v94);
              v93 = *v96;
              v92 = v96[1];
              swift_bridgeObjectRetain(v92);
              goto LABEL_51;
            }
          }
        }

        swift_bridgeObjectRelease();
        sub_10001C744(v87, _s31ThreadSafePartialRepresentationVMa);
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v58, v42);
        goto LABEL_56;
      }
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v82 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_39;
  }
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56);
  v45(v29, 1, 1, v128);
LABEL_7:
  sub_10000882C((uint64_t)v29, (uint64_t *)&unk_100839C80);
  v46 = v126;
  if (!v126)
  {
LABEL_29:
    if (v125 && *(_QWORD *)(v125 + 16))
    {
      sub_10001A6DC(v121, v38);
      v79 = v80;
      swift_bridgeObjectRelease();

      return v79 & 1;
    }
    goto LABEL_32;
  }
  v47 = objc_msgSend(v126, "memberships");
  v48 = sub_1000151B0(0, &qword_1008428A8, REMTimestampedUUID_ptr);
  v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v47, &type metadata for String, v48, &protocol witness table for String);

  if (*(_QWORD *)(v49 + 16))
  {
    swift_bridgeObjectRetain(v38);
    v50 = sub_10001A6DC(v121, v38);
    if ((v51 & 1) != 0)
    {
      v52 = *(id *)(*(_QWORD *)(v49 + 56) + 8 * v50);
      swift_bridgeObjectRelease();
      v53 = objc_msgSend(v52, "identifier", swift_bridgeObjectRelease().n128_f64[0]);
      if (v53)
      {
        v54 = v53;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

        v56 = v127;
        v55 = v128;
        (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v20, v32, v128);
        v45(v20, 0, 1, v55);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v20, 1, v55) != 1)
        {
          sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C80);
          goto LABEL_23;
        }
      }
      else
      {

        v45(v20, 1, 1, v128);
      }
      swift_bridgeObjectRelease();

      sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C80);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_23:
  v76 = objc_msgSend(v46, "memberships", v57);
  v77 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v76, &type metadata for String, v48, &protocol witness table for String);

  if (!*(_QWORD *)(v77 + 16))
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  swift_bridgeObjectRetain(v38);
  sub_10001A6DC(v121, v38);
  if ((v78 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  swift_bridgeObjectRelease_n(v38, 2);
LABEL_26:
  swift_bridgeObjectRelease();
  v79 = 1;
  return v79 & 1;
}

double sub_100290CC8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  double result;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v81 = a6;
  v82 = a7;
  v75 = a5;
  v76 = a4;
  v83 = a2;
  v77 = a1;
  v8 = sub_10001A630(&qword_1008473A0);
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  __chkstk_darwin(v8);
  v78 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100842850);
  __chkstk_darwin(v10);
  v73 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - v13;
  v74 = _s31ThreadSafePartialRepresentationVMa(0);
  v15 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (uint64_t)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v17);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v72 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v72 - v24;
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v72 - v32;
  if (!a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v27 + 56))(v25, 1, 1, v26, v31);
    v37 = v85;
LABEL_7:
    sub_10000882C((uint64_t)v25, (uint64_t *)&unk_100839C80);
    v84 = 0x6C6E6F6974636573;
    v38 = v76;
    v39 = v15;
    v40 = v74;
LABEL_8:
    v41 = 0x6C6E6F6974636573;
    v42 = 0xEB00000000737365;
    goto LABEL_9;
  }
  v34 = objc_msgSend(a3, "groupIdentifier", v31.n128_f64[0]);
  if (v34)
  {
    v35 = v34;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v36 = 0;
  }
  else
  {
    v36 = 1;
  }
  v37 = v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v22, v36, 1, v26);
  sub_1000A5CA8((uint64_t)v22, (uint64_t)v25, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v25, v26);
  v38 = v76;
  v60 = *(_QWORD *)(v76 + 16);
  v84 = 0x6C6E6F6974636573;
  v39 = v15;
  if (v60)
  {
    v61 = sub_1002C65F8((uint64_t)v33);
    v40 = v74;
    if ((v62 & 1) != 0)
    {
      sub_1002912CC(*(_QWORD *)(v38 + 56) + *(_QWORD *)(v39 + 72) * v61, (uint64_t)v14);
      v63 = 0;
    }
    else
    {
      v63 = 1;
    }
  }
  else
  {
    v63 = 1;
    v40 = v74;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v14, v63, 1, v40);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v14, 1, v40) == 1)
  {
    sub_10000882C((uint64_t)v14, &qword_100842850);
    goto LABEL_8;
  }
  v68 = v72;
  sub_1000B8680((uint64_t)v14, v72, _s31ThreadSafePartialRepresentationVMa);
  v69 = (uint64_t *)(v68 + *(int *)(v40 + 20));
  v41 = *v69;
  v42 = v69[1];
  swift_bridgeObjectRetain(v42);
  v70 = v68;
  v37 = v85;
  sub_10001C744(v70, _s31ThreadSafePartialRepresentationVMa);
  if (!v42)
    goto LABEL_8;
LABEL_9:
  sub_10011D420(v75, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
  {
    v43 = (uint64_t *)&unk_100839C80;
    v44 = (uint64_t)v19;
LABEL_17:
    sub_10000882C(v44, v43);
LABEL_18:
    v50 = 0xEB00000000737365;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v19, v26);
  if (*(_QWORD *)(v38 + 16) && (v45 = sub_1002C65F8((uint64_t)v29), (v46 & 1) != 0))
  {
    v47 = *(_QWORD *)(v38 + 56) + *(_QWORD *)(v39 + 72) * v45;
    v48 = v73;
    sub_1002912CC(v47, v73);
    v49 = 0;
  }
  else
  {
    v49 = 1;
    v48 = v73;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v48, v49, 1, v40);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v48, 1, v40) == 1)
  {
    v43 = &qword_100842850;
    v44 = v48;
    goto LABEL_17;
  }
  v64 = (uint64_t *)(v48 + *(int *)(v40 + 20));
  v65 = v48;
  v67 = *v64;
  v66 = v64[1];
  swift_bridgeObjectRetain(v66);
  sub_10001C744(v65, _s31ThreadSafePartialRepresentationVMa);
  if (!v66)
    goto LABEL_18;
  v84 = v67;
  v50 = v66;
LABEL_19:
  v51 = v77;
  if (qword_100837028 != -1)
    swift_once(&qword_100837028, sub_1002351A0);
  v52 = *(void **)(v37 + 24);
  v53 = (uint64_t)v78;
  v54 = v79;
  v55 = v80;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v80);
  v71 = v52;
  v57 = v83;
  v56 = v84;
  sub_10023546C(v51, v83, v41, v42, v84, v50, v81, v82, v71, v53, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
  v58.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  type metadata accessor for Analytics(0, v58);
  static Analytics.postBiomeEventForCorrectedGroceryItem(item:originalCategory:destinationCategory:)(v51, v57, v41, v42, v56, v50);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVMa(uint64_t a1)
{
  return sub_10001522C(a1, qword_100842940, (uint64_t)&_s31ThreadSafePartialRepresentationVMn);
}

uint64_t sub_1002912CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s31ThreadSafePartialRepresentationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100291310()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease();
  swift_release(v0[6]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10029135C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc(dword_10084286C);
  v7 = *(_OWORD *)(v1 + 32);
  v8 = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1000CB064;
  *(_QWORD *)(v6 + 128) = v1 + 80;
  *(_OWORD *)(v6 + 112) = v8;
  *(_QWORD *)(v6 + 96) = v4;
  *(_QWORD *)(v6 + 104) = v5;
  *(_OWORD *)(v6 + 80) = v7;
  *(_QWORD *)(v6 + 72) = a1;
  return swift_task_switch(sub_100283958, 0, 0);
}

uint64_t sub_1002913EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_100842884);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1000CB064;
  return sub_100283EC4(a1, a2, a3, v8);
}

uint64_t sub_100291468(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v14 = *(_OWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = swift_task_alloc(dword_10084289C);
  v10 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = sub_1000CAD70;
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = v14;
  *(_QWORD *)(v9 + 24) = a1;
  v11 = *a2;
  *(_QWORD *)(v9 + 64) = v8;
  *(_QWORD *)(v9 + 72) = v11;
  v12 = a3[1];
  *(_QWORD *)(v9 + 80) = *a3;
  *(_QWORD *)(v9 + 88) = v12;
  return swift_task_switch(sub_1002840A8, 0, 0);
}

uint64_t sub_100291508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  _QWORD v39[9];
  uint64_t v40;

  v35 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v36 = (unint64_t)(v3 + 63) >> 6;
  v40 = a3 + 56;
  result = swift_bridgeObjectRetain(a2);
  v7 = 0;
  v8 = 0;
  while (2)
  {
    v33 = v7;
    do
    {
      while (1)
      {
        if (v5)
        {
          v9 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
          v10 = v9 | (v8 << 6);
        }
        else
        {
          v11 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
            __break(1u);
            goto LABEL_48;
          }
          if (v11 >= v36)
            goto LABEL_46;
          v12 = *(_QWORD *)(v35 + 8 * v11);
          ++v8;
          if (!v12)
          {
            v8 = v11 + 1;
            if (v11 + 1 >= v36)
              goto LABEL_46;
            v12 = *(_QWORD *)(v35 + 8 * v8);
            if (!v12)
            {
              v8 = v11 + 2;
              if (v11 + 2 >= v36)
                goto LABEL_46;
              v12 = *(_QWORD *)(v35 + 8 * v8);
              if (!v12)
              {
                v8 = v11 + 3;
                if (v11 + 3 >= v36)
                  goto LABEL_46;
                v12 = *(_QWORD *)(v35 + 8 * v8);
                if (!v12)
                {
                  v13 = v11 + 4;
                  if (v13 >= v36)
                  {
LABEL_46:
                    swift_release(a2);
                    return 0;
                  }
                  v12 = *(_QWORD *)(v35 + 8 * v13);
                  if (!v12)
                  {
                    while (1)
                    {
                      v8 = v13 + 1;
                      if (__OFADD__(v13, 1))
                        break;
                      if (v8 >= v36)
                        goto LABEL_46;
                      v12 = *(_QWORD *)(v35 + 8 * v8);
                      ++v13;
                      if (v12)
                        goto LABEL_24;
                    }
LABEL_48:
                    __break(1u);
LABEL_49:
                    __break(1u);
                    return result;
                  }
                  v8 = v13;
                }
              }
            }
          }
LABEL_24:
          v5 = (v12 - 1) & v12;
          v10 = __clz(__rbit64(v12)) + (v8 << 6);
        }
        v14 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v10);
        v16 = *v14;
        v15 = v14[1];
        Hasher.init(_seed:)(v39, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v15);
        String.hash(into:)(v39, v16, v15);
        v17 = Hasher._finalize()();
        v18 = -1 << *(_BYTE *)(a3 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        v21 = 1 << v19;
        if (((1 << v19) & *(_QWORD *)(v40 + 8 * (v19 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease(v15);
      }
      v22 = *(_QWORD *)(a3 + 48);
      v23 = (_QWORD *)(v22 + 16 * v19);
      v24 = v23[1];
      v25 = *v23 == v16 && v24 == v15;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v16, v15, 0) & 1) == 0)
      {
        v27 = ~v18;
        for (i = v19 + 1; ; i = v29 + 1)
        {
          v29 = i & v27;
          if (((*(_QWORD *)(v40 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
            break;
          v30 = (_QWORD *)(v22 + 16 * v29);
          v31 = v30[1];
          v32 = *v30 == v16 && v31 == v15;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, v16, v15, 0) & 1) != 0)
          {
            result = swift_bridgeObjectRelease(v15);
            v20 = v29 >> 6;
            v21 = 1 << v29;
            goto LABEL_32;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease(v15);
LABEL_32:
      v26 = *(_QWORD *)(a1 + 8 * v20);
      *(_QWORD *)(a1 + 8 * v20) = v21 | v26;
    }
    while ((v21 & v26) != 0);
    v7 = v33 + 1;
    if (__OFADD__(v33, 1))
      goto LABEL_49;
    if (v7 != *(_QWORD *)(a3 + 16))
      continue;
    break;
  }
  swift_release(a2);
  return 1;
}

