void sub_100180068(void *a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  double v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t inited;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  void *v80;
  unint64_t v81;
  id v82;
  uint64_t v83;
  Class isa;
  double v85;
  id v86;
  id v87;
  void *v88;
  char *v89;
  _QWORD *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  id v95;
  void *v96;
  char *v97;
  _QWORD *v98;
  void (*v99)(uint64_t, char *, uint64_t);
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  char *v104;
  char v105;
  void (*v106)(char *, uint64_t);
  objc_class *v107;
  Class v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  char *v112;
  double v113;
  unsigned __int8 v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[2];
  _QWORD *v122;
  char *v123;
  __n128 v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  char *v133;
  id v134;
  void *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  char v144[40];
  uint64_t v145;

  v4 = v3;
  v122 = a3;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v125 = (char *)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v121 - v10;
  __chkstk_darwin(v12);
  v131 = (char *)v121 - v13;
  v14 = type metadata accessor for Date(0);
  v140 = *(_QWORD **)(v14 - 8);
  __chkstk_darwin(v14);
  v129 = (char *)v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v133 = (char *)v121 - v17;
  __chkstk_darwin(v18);
  v136 = (char *)v121 - v19;
  v20 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v20 - 8);
  v139 = v20;
  __chkstk_darwin(v20);
  v137 = (char *)v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = a1;
  v22 = sub_10018703C();
  v24 = v22;
  v143 = (id)((unint64_t)v22 >> 62);
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v120 = v22;
    else
      v120 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v25 = _CocoaArrayWrapper.endIndex.getter(v120);
    v23 = swift_bridgeObjectRelease(v24);
  }
  else
  {
    v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v26 = _swiftEmptyArrayStorage;
  v141 = v14;
  v142 = v24;
  v121[1] = v4;
  v130 = v11;
  if (v25)
  {
    v145 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
    {
      __break(1u);
LABEL_78:
      __break(1u);
    }
    LODWORD(v135) = a2;
    v27 = 0;
    v28 = v24 & 0xC000000000000001;
    do
    {
      if (v28)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v24);
      else
        v29 = *(id *)(v24 + 8 * v27 + 32);
      v30 = v29;
      v31 = objc_msgSend(v29, "remObjectID");
      if (v31)
      {
        v32 = v31;
        v33 = objc_msgSend(v31, "uuid");

        v34 = v137;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = UUID.uuidString.getter(v35);
        v38 = v37;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v34, v139);
      }
      else
      {
        v38 = 0xE300000000000000;
        v36 = 7104878;
      }

      v26 = (_QWORD *)v145;
      if ((swift_isUniquelyReferenced_nonNull_native(v145) & 1) == 0)
      {
        sub_1001C1B0C(0, v26[2] + 1, 1);
        v26 = (_QWORD *)v145;
      }
      v40 = v26[2];
      v39 = v26[3];
      if (v40 >= v39 >> 1)
      {
        sub_1001C1B0C(v39 > 1, v40 + 1, 1);
        v26 = (_QWORD *)v145;
      }
      ++v27;
      v26[2] = v40 + 1;
      v41 = &v26[2 * v40];
      v41[4] = v36;
      v41[5] = v38;
      v14 = v141;
      v24 = v142;
    }
    while (v25 != v27);
    LOBYTE(a2) = (_BYTE)v135;
  }
  if ((a2 & 1) == 0)
    goto LABEL_71;
  if (!v143)
  {
    v42 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v42)
      goto LABEL_21;
LABEL_71:
    swift_bridgeObjectRelease(v24);
    *v122 = v26;
    return;
  }
  if (v24 < 0)
    v117 = v24;
  else
    v117 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v24);
  v42 = _CocoaArrayWrapper.endIndex.getter(v117);
  v23 = swift_bridgeObjectRelease(v24);
  if (!v42)
    goto LABEL_71;
LABEL_21:
  if (v42 < 1)
    goto LABEL_78;
  v43 = 0;
  v132 = v24 & 0xC000000000000001;
  v23.n128_u64[0] = 136315394;
  v124 = v23;
  v123 = (char *)&type metadata for Any + 8;
  v127 = xmmword_1006A7330;
  v128 = v42;
  do
  {
    if (v132)
      v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v24);
    else
      v45 = *(id *)(v24 + 8 * v43 + 32);
    v44 = v45;
    v46 = sub_100187664((uint64_t)v134, v45);
    if (!v46)
      goto LABEL_26;
    v47 = v46;
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_10083D710);
    v135 = v44;
    v49 = v44;
    v50 = v47;
    v51 = v49;
    v52 = v50;
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter(v53);
    v55 = os_log_type_enabled(v53, v54);
    v143 = v52;
    if (v55)
    {
      v56 = swift_slowAlloc(22, -1);
      v126 = swift_slowAlloc(64, -1);
      v145 = v126;
      *(_DWORD *)v56 = v124.n128_u32[0];
      v57 = objc_msgSend(v51, "remObjectID");
      if (v57)
      {
        v58 = v57;
        v59 = objc_msgSend(v57, "uuid");

        v60 = v137;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

        v62 = UUID.uuidString.getter(v61);
        v64 = v63;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v60, v139);
      }
      else
      {
        v64 = 0xE300000000000000;
        v62 = 7104878;
      }
      *(_QWORD *)(v56 + 4) = sub_10001A820(v62, v64, &v145);

      *(_QWORD *)&v65 = swift_bridgeObjectRelease(v64).n128_u64[0];
      *(_WORD *)(v56 + 12) = 2080;
      v66 = objc_msgSend(v143, "name", v65);
      if (v66)
      {
        v67 = v66;
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v70 = v69;

      }
      else
      {
        v70 = 0xE300000000000000;
        v68 = 7104878;
      }
      v14 = v141;
      *(_QWORD *)(v56 + 14) = sub_10001A820(v68, v70, &v145);
      v71 = v143;

      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDHashtagLabelRepairer: updates hashtag[%s] with label[%s]", (uint8_t *)v56, 0x16u);
      v72 = v126;
      swift_arrayDestroy(v126, 2, v123);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

    }
    v73 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v73, v144);
    *(_OWORD *)(inited + 16) = v127;
    *(_QWORD *)(inited + 32) = v51;
    v145 = inited;
    specialized Array._endMutation()(inited);
    v75 = v145;
    v76 = (uint64_t)v130;
    if ((unint64_t)v145 >> 62)
    {
      if (v145 < 0)
        v81 = v145;
      else
        v81 = v145 & 0xFFFFFFFFFFFFFF8;
      v82 = v51;
      swift_bridgeObjectRetain(v75);
      v83 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease(v75);
      if (v83)
      {
LABEL_44:
        sub_1002EA0F8(v75);
        v80 = v79;
        goto LABEL_50;
      }
    }
    else
    {
      v77 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
      v78 = v51;
      if (v77)
        goto LABEL_44;
    }
    v80 = &_swiftEmptySetSingleton;
LABEL_50:
    swift_bridgeObjectRelease(v75);
    sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    isa = Set._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v85 = swift_bridgeObjectRelease(v80).n128_u64[0];
    v86 = v143;
    objc_msgSend(v143, "addHashtags:", isa, v85);

    v87 = objc_msgSend(v86, "recencyDate");
    if (v87)
    {
      v88 = v87;
      v89 = v133;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v87);

      v90 = v140;
      v91 = (void (*)(char *, char *, uint64_t))v140[4];
      v92 = (uint64_t)v131;
      v91(v131, v89, v14);
      v93 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v90[7];
      v93((char *)v92, 0, 1, v14);
      v94 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v90[6])(v92, 1, v14);
      if ((_DWORD)v94 != 1)
      {
        v91(v136, (char *)v92, v14);
        goto LABEL_55;
      }
    }
    else
    {
      v93 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v140[7];
      v92 = (uint64_t)v131;
      v94 = v93(v131, 1, 1, v14);
    }
    static Date.distantPast.getter(v94);
    sub_10000882C(v92, (uint64_t *)&unk_1008380D0);
LABEL_55:
    v95 = objc_msgSend(v51, "creationDate");
    if (!v95)
    {
      v100 = v93((char *)v76, 1, 1, v14);
LABEL_59:
      v101 = v129;
      static Date.distantPast.getter(v100);
      sub_10000882C(v76, (uint64_t *)&unk_1008380D0);
      goto LABEL_60;
    }
    v96 = v95;
    v97 = v133;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v95);

    v98 = v140;
    v99 = (void (*)(uint64_t, char *, uint64_t))v140[4];
    v99(v76, v97, v14);
    v93((char *)v76, 0, 1, v14);
    v100 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v98[6])(v76, 1, v14);
    if ((_DWORD)v100 == 1)
      goto LABEL_59;
    v101 = v129;
    v99((uint64_t)v129, (char *)v76, v14);
LABEL_60:
    v102 = v136;
    v103 = static Date.< infix(_:_:)(v136, v101);
    v104 = v101;
    v105 = v103;
    v106 = (void (*)(char *, uint64_t))v140[1];
    v106(v104, v14);
    v106(v102, v14);
    if ((v105 & 1) != 0)
    {
      v107 = (objc_class *)objc_msgSend(v51, "creationDate");
      v108 = v107;
      if (v107)
      {
        v109 = v133;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v107);

        v110 = v140;
        v111 = v125;
        ((void (*)(char *, char *, uint64_t))v140[4])(v125, v109, v14);
        v93(v111, 0, 1, v14);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v110[6])(v111, 1, v14) == 1)
        {
          v108 = 0;
        }
        else
        {
          v112 = v111;
          v108 = Date._bridgeToObjectiveC()().super.isa;
          v106(v112, v14);
        }
      }
      else
      {
        v93(v125, 1, 1, v14);
      }
      objc_msgSend(v143, "setRecencyDate:", v108);

    }
    v24 = v142;
    v42 = v128;
    v44 = v135;
LABEL_26:
    ++v43;

  }
  while (v42 != v43);
  *(_QWORD *)&v113 = swift_bridgeObjectRelease(v24).n128_u64[0];
  v145 = 0;
  v114 = objc_msgSend(v134, "save:", &v145, v113);
  v115 = v145;
  if ((v114 & 1) != 0)
  {
    v116 = (id)v145;
    *v122 = v26;
  }
  else
  {
    v118 = (id)v145;
    swift_bridgeObjectRelease(v26);
    _convertNSErrorToError(_:)(v115);

    swift_willThrow(v119);
  }
}

double sub_100180B80@<D0>(void *a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t i;
  unint64_t v21;
  unint64_t v22;
  char **v23;
  char **v24;
  NSObject *v25;
  BOOL v26;
  id v27;
  void *v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  _QWORD *v76;
  double v77;
  void *v78;
  uint64_t v79;
  id v80;
  unint64_t v81;
  id v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  _BOOL4 v86;
  _DWORD *v87;
  id v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _DWORD *v100;
  unint64_t v101;
  char *v102;
  os_log_t v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t inited;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void *v110;
  void *v111;
  Class v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  void (*v116)(uint64_t, NSObject *);
  NSObject *v117;
  id v118;
  void *v119;
  uint64_t v120;
  Class v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  Class v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  void *v131;
  Class v132;
  double v133;
  NSObject *v134;
  id v135;
  void *v136;
  id v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  id v147;
  unint64_t v148;
  id v149;
  double result;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  _DWORD *v161;
  __int128 v162;
  char *v163;
  os_log_t v164;
  id v165;
  char *v166;
  char *v167;
  char *v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  __int128 v173;
  Class isa;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  void *v189;
  int v190;
  char *v191;
  __int128 v192;
  NSObject *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  int64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204[8];
  char v205[8];
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[5];

  v190 = a2;
  v172 = a3;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v168 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  isa = v6[-1].isa;
  __chkstk_darwin(v6);
  v170 = (uint64_t)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v171 = (uint64_t)&v158 - v9;
  v178 = type metadata accessor for UUID(0);
  v176 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v175 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v167 = (char *)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v158 - v14;
  v16 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v16);
  v188 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = a1;
  v18 = sub_100187C88();
  if ((unint64_t)v18 >> 62)
    goto LABEL_117;
  for (i = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v151))
  {
    v21 = 0;
    v22 = v18 & 0xC000000000000001;
    v181 = v18 & 0xFFFFFFFFFFFFFF8;
    v180 = v18 + 32;
    v166 = v204;
    v179 = _swiftEmptyArrayStorage;
    v23 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    v24 = &selRef_isConcealed;
    *(_QWORD *)&v19 = 136446210;
    v192 = v19;
    v191 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v19 = 136315650;
    v162 = v19;
    v173 = xmmword_1006A7330;
    v194 = (char *)&type metadata for Swift.AnyObject + 8;
    v169 = v6;
    v163 = v15;
    v15 = v188;
    v184 = v18;
    v183 = i;
    v182 = v18 & 0xC000000000000001;
    while (1)
    {
      if (!v22)
      {
        if (v21 >= *(_QWORD *)(v181 + 16))
          goto LABEL_116;
        v25 = *(id *)(v180 + 8 * v21);
        v26 = __OFADD__(v21++, 1);
        if (v26)
          break;
        goto LABEL_13;
      }
      v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      v26 = __OFADD__(v21++, 1);
      if (v26)
        break;
LABEL_13:
      v6 = v25;
      v27 = objc_msgSend(v25, v23[262]);
      v193 = v6;
      if (v27)
      {
        v28 = v27;
        v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v199 = v29;

        v30 = -[NSObject hashtags](v6, "hashtags");
        if (v30)
        {
          v6 = v30;
          v187 = v21;
          v31 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
          v32 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
          v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v31, v32);

          v195 = v31;
          v185 = v32;
          if ((v33 & 0xC000000000000001) != 0)
          {
            if (v33 < 0)
              v35 = v33;
            else
              v35 = v33 & 0xFFFFFFFFFFFFFF8;
            v36 = __CocoaSet.makeIterator()(v35);
            v34 = Set.Iterator.init(_cocoa:)(v208, v36, v31, v32);
            v33 = v208[0];
            v198 = v208[1];
            v37 = v208[2];
            v38 = v208[3];
            v39 = v208[4];
          }
          else
          {
            v38 = 0;
            v40 = -1 << *(_BYTE *)(v33 + 32);
            v41 = *(_QWORD *)(v33 + 56);
            v198 = v33 + 56;
            v37 = ~v40;
            v42 = -v40;
            if (v42 < 64)
              v43 = ~(-1 << v42);
            else
              v43 = -1;
            v39 = v43 & v41;
          }
          v196 = v33 & 0x7FFFFFFFFFFFFFFFLL;
          v186 = v37;
          v197 = (unint64_t)(v37 + 64) >> 6;
          v201 = v33;
LABEL_25:
          v18 = v38;
          while (1)
          {
            while (1)
            {
LABEL_28:
              if (v33 < 0)
              {
                v6 = v196;
                v46 = __CocoaSet.Iterator.next()(v34);
                if (!v46)
                  goto LABEL_4;
                v47 = v46;
                v203 = v46;
                swift_unknownObjectRetain(v46);
                swift_dynamicCast(&v206, &v203, v194, v195, 7);
                v48 = (id)v206;
                swift_unknownObjectRelease(v47);
                v38 = v18;
                v44 = v39;
                if (!v48)
                  goto LABEL_4;
              }
              else
              {
                if (v39)
                {
                  v44 = (v39 - 1) & v39;
                  v45 = __clz(__rbit64(v39)) | (v18 << 6);
                  v38 = v18;
                }
                else
                {
                  v49 = v18 + 1;
                  if (__OFADD__(v18, 1))
                  {
                    __break(1u);
                    goto LABEL_115;
                  }
                  if (v49 >= v197)
                    goto LABEL_4;
                  v50 = *(_QWORD *)(v198 + 8 * v49);
                  v38 = v18 + 1;
                  if (!v50)
                  {
                    v38 = v18 + 2;
                    if (v18 + 2 >= v197)
                      goto LABEL_4;
                    v50 = *(_QWORD *)(v198 + 8 * v38);
                    if (!v50)
                    {
                      v38 = v18 + 3;
                      if (v18 + 3 >= v197)
                        goto LABEL_4;
                      v50 = *(_QWORD *)(v198 + 8 * v38);
                      if (!v50)
                      {
                        v38 = v18 + 4;
                        if (v18 + 4 >= v197)
                          goto LABEL_4;
                        v50 = *(_QWORD *)(v198 + 8 * v38);
                        if (!v50)
                        {
                          v51 = v18 + 5;
                          while (v197 != v51)
                          {
                            v50 = *(_QWORD *)(v198 + 8 * v51++);
                            if (v50)
                            {
                              v38 = v51 - 1;
                              goto LABEL_47;
                            }
                          }
LABEL_4:
                          sub_1000C6560(v33);
                          v18 = v184;
                          i = v183;
                          v21 = v187;
                          v22 = v182;
                          v23 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
                          goto LABEL_5;
                        }
                      }
                    }
                  }
LABEL_47:
                  v44 = (v50 - 1) & v50;
                  v45 = __clz(__rbit64(v50)) + (v38 << 6);
                }
                v48 = *(id *)(*(_QWORD *)(v33 + 48) + 8 * v45);
                if (!v48)
                  goto LABEL_4;
              }
              v202 = v44;
              v52 = objc_msgSend(v48, v24[188]);
              if (!v52)
                break;
              v53 = v52;
              v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
              v56 = v55;

              v206 = v54;
              v207 = v56;
              static Locale.current.getter(v57);
              v58 = type metadata accessor for Locale(0);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v15, 0, 1, v58);
              v59 = sub_1000E525C();
              v6 = &v206;
              v60 = StringProtocol.foldedStringForWriting(locale:)(v15, &type metadata for String, v59);
              v62 = v61;
              sub_10000882C((uint64_t)v15, (uint64_t *)&unk_10083FBE0);
              swift_bridgeObjectRelease(v207);
              if (v200 == v60 && v199 == v62)
              {
                swift_bridgeObjectRelease(v199);

                goto LABEL_27;
              }
              v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v200, v199, v60, v62, 0);
              v75 = v202;
              if ((v74 & 1) != 0)
              {
                swift_bridgeObjectRelease(v62);

              }
              else
              {
                if ((v190 & 1) == 0)
                {
                  *(_QWORD *)&v77 = swift_bridgeObjectRelease(v62).n128_u64[0];
                  v33 = v201;
LABEL_97:
                  v135 = objc_msgSend(v48, "remObjectID", v77);
                  if (v135)
                  {
                    v136 = v135;
                    v137 = objc_msgSend(v135, "uuid");

                    v138 = v175;
                    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v137);

                    v140 = UUID.uuidString.getter(v139);
                    v6 = v141;
                    (*(void (**)(char *, uint64_t))(v176 + 8))(v138, v178);
                  }
                  else
                  {
                    v6 = 0xE300000000000000;
                    v140 = 7104878;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native(v179) & 1) == 0)
                    v179 = sub_1002C8224(0, v179[2] + 1, 1, v179);
                  v143 = v179[2];
                  v142 = v179[3];
                  if (v143 >= v142 >> 1)
                    v179 = sub_1002C8224((_QWORD *)(v142 > 1), v143 + 1, 1, v179);
                  v144 = v179;
                  v179[2] = v143 + 1;
                  v145 = &v144[2 * v143];
                  v145[4] = v140;
                  v145[5] = v6;

                  v39 = v202;
                  goto LABEL_25;
                }
                v76 = sub_100187664((uint64_t)v189, v48);
                if (v76)
                {
                  v78 = v76;
                  if (qword_100836E00 != -1)
                    swift_once(&qword_100836E00, sub_10016F110);
                  v79 = type metadata accessor for Logger(0);
                  sub_10001AAA8(v79, (uint64_t)qword_10083D710);
                  v80 = v48;
                  v81 = v199;
                  swift_bridgeObjectRetain_n(v199, 2);
                  v82 = v80;
                  swift_bridgeObjectRetain(v62);
                  v84 = Logger.logObject.getter(v83);
                  v85 = static os_log_type_t.default.getter(v84);
                  v86 = os_log_type_enabled(v84, (os_log_type_t)v85);
                  v165 = v82;
                  if (v86)
                  {
                    v160 = v85;
                    v87 = (_DWORD *)swift_slowAlloc(32, -1);
                    v159 = swift_slowAlloc(96, -1);
                    v206 = v159;
                    v161 = v87;
                    *v87 = v162;
                    v88 = objc_msgSend(v82, "identifier");
                    v89 = v178;
                    v164 = v84;
                    if (v88)
                    {
                      v90 = v88;
                      v91 = (uint64_t)v167;
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v88);

                      v92 = 0;
                    }
                    else
                    {
                      v92 = 1;
                      v91 = (uint64_t)v167;
                    }
                    v94 = v176;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56))(v91, v92, 1, v89);
                    v95 = (uint64_t)v163;
                    sub_1000A5CA8(v91, (uint64_t)v163, (uint64_t *)&unk_100839C80);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v95, 1, v89))
                    {
                      sub_10000882C(v95, (uint64_t *)&unk_100839C80);
                      v96 = 0xE300000000000000;
                      v97 = 7104878;
                    }
                    else
                    {
                      (*(void (**)(void))(v94 + 16))();
                      v98 = sub_10000882C(v95, (uint64_t *)&unk_100839C80);
                      v97 = UUID.uuidString.getter(v98);
                      v96 = v99;
                      (*(void (**)(char *, uint64_t))(v94 + 8))(v175, v178);
                    }
                    v100 = v161;
                    v203 = sub_10001A820(v97, v96, &v206);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v166);
                    v93 = v165;

                    swift_bridgeObjectRelease(v96);
                    *((_WORD *)v100 + 6) = 2080;
                    v158 = (uint64_t)v100 + 14;
                    v101 = v199;
                    swift_bridgeObjectRetain(v199);
                    v203 = sub_10001A820(v200, v101, &v206);
                    v102 = v166;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v166);
                    swift_bridgeObjectRelease_n(v101, 3);
                    *((_WORD *)v100 + 11) = 2080;
                    swift_bridgeObjectRetain(v62);
                    v203 = sub_10001A820(v60, v62, &v206);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v102);
                    swift_bridgeObjectRelease_n(v62, 3);
                    v103 = v164;
                    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v160, "RDHashtagLabelRepairer: updates hashtag [%s] from old label canonical name [%s] to new canonical name [%s]", (uint8_t *)v100, 0x20u);
                    v104 = v159;
                    swift_arrayDestroy(v159, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v104, -1, -1);
                    swift_slowDealloc(v100, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v62, 2);
                    swift_bridgeObjectRelease_n(v81, 2);

                    v93 = v82;
                  }
                  v105 = sub_10001A630((uint64_t *)&unk_10083AD90);
                  inited = swift_initStackObject(v105, v205);
                  *(_OWORD *)(inited + 16) = v173;
                  *(_QWORD *)(inited + 32) = v93;
                  v206 = inited;
                  specialized Array._endMutation()(inited);
                  v107 = v206;
                  if ((unint64_t)v206 >> 62)
                  {
                    if (v206 < 0)
                      v146 = v206;
                    else
                      v146 = v206 & 0xFFFFFFFFFFFFFF8;
                    v147 = v93;
                    swift_bridgeObjectRetain(v107);
                    v108 = _CocoaArrayWrapper.endIndex.getter(v146);
                    swift_bridgeObjectRelease(v107);
                  }
                  else
                  {
                    v108 = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10);
                    v109 = v93;
                  }
                  v164 = v105;
                  if (v108)
                  {
                    sub_1002EA0F8(v107);
                    v111 = v110;
                  }
                  else
                  {
                    v111 = &_swiftEmptySetSingleton;
                  }
                  swift_bridgeObjectRelease(v107);
                  v112 = Set._bridgeToObjectiveC()().super.isa;
                  objc_msgSend(v78, "addHashtags:", v112, swift_bridgeObjectRelease(v111).n128_f64[0]);

                  v113 = v171;
                  sub_10057A234(v171);
                  v114 = v170;
                  sub_1005C1B88(v170);
                  v115 = static Date.< infix(_:_:)(v113, v114);
                  v116 = (void (*)(uint64_t, NSObject *))*((_QWORD *)isa + 1);
                  v117 = v169;
                  v116(v114, v169);
                  v116(v113, v117);
                  v24 = &selRef_isConcealed;
                  v33 = v201;
                  if ((v115 & 1) != 0)
                  {
                    v118 = objc_msgSend(v93, "creationDate");
                    if (v118)
                    {
                      v119 = v118;
                      v120 = v171;
                      static Date._unconditionallyBridgeFromObjectiveC(_:)(v118);

                      v121 = isa;
                      v122 = v168;
                      v123 = v120;
                      v124 = v169;
                      (*((void (**)(char *, uint64_t, NSObject *))isa + 4))(v168, v123, v169);
                      (*((void (**)(char *, _QWORD, uint64_t, NSObject *))v121 + 7))(v122, 0, 1, v124);
                      if ((*((unsigned int (**)(char *, uint64_t, NSObject *))v121 + 6))(v122, 1, v124) == 1)
                      {
                        v125 = 0;
                      }
                      else
                      {
                        v125 = Date._bridgeToObjectiveC()().super.isa;
                        v116((uint64_t)v122, v124);
                      }
                      v33 = v201;
                    }
                    else
                    {
                      (*((void (**)(char *, uint64_t, uint64_t, NSObject *))isa + 7))(v168, 1, 1, v169);
                      v125 = 0;
                    }
                    objc_msgSend(v78, "setRecencyDate:", v125);

                    v93 = v165;
                  }
                  v126 = swift_initStackObject(v164, v204);
                  *(_OWORD *)(v126 + 16) = v173;
                  *(_QWORD *)(v126 + 32) = v93;
                  v206 = v126;
                  specialized Array._endMutation()(v126);
                  v127 = v206;
                  if ((unint64_t)v206 >> 62)
                  {
                    if (v206 < 0)
                      v148 = v206;
                    else
                      v148 = v206 & 0xFFFFFFFFFFFFFF8;
                    v149 = v93;
                    swift_bridgeObjectRetain(v127);
                    v128 = _CocoaArrayWrapper.endIndex.getter(v148);
                    swift_bridgeObjectRelease(v127);
                  }
                  else
                  {
                    v128 = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10);
                    v129 = v93;
                  }
                  v15 = v188;
                  if (v128)
                  {
                    sub_1002EA0F8(v127);
                    v131 = v130;
                  }
                  else
                  {
                    v131 = &_swiftEmptySetSingleton;
                  }
                  swift_bridgeObjectRelease(v127);
                  v132 = Set._bridgeToObjectiveC()().super.isa;
                  *(_QWORD *)&v133 = swift_bridgeObjectRelease(v131).n128_u64[0];
                  v134 = v193;
                  -[NSObject removeHashtags:](v193, "removeHashtags:", v132, v133);

                  sub_100186D9C(v189, v134);
                  goto LABEL_97;
                }

                swift_bridgeObjectRelease(v62);
              }
              v18 = v38;
              v39 = v75;
              v33 = v201;
            }
            if (qword_100836E00 != -1)
              swift_once(&qword_100836E00, sub_10016F110);
            v63 = type metadata accessor for Logger(0);
            sub_10001AAA8(v63, (uint64_t)qword_10083D710);
            v64 = v48;
            v6 = Logger.logObject.getter(v64);
            v65 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v6, v65))
            {

LABEL_27:
              v18 = v38;
              v33 = v201;
              v39 = v202;
              goto LABEL_28;
            }
            v66 = swift_slowAlloc(12, -1);
            v67 = swift_slowAlloc(32, -1);
            v206 = v67;
            *(_DWORD *)v66 = v192;
            v68 = objc_msgSend(v64, "remObjectID");
            if (v68)
            {
              v69 = v68;
              v70 = objc_msgSend(v68, "description");

              v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
              v73 = v72;

              v15 = v188;
            }
            else
            {
              v73 = 0xE300000000000000;
              v71 = 7104878;
            }
            *(_QWORD *)(v66 + 4) = sub_10001A820(v71, v73, &v206);

            swift_bridgeObjectRelease(v73);
            _os_log_impl((void *)&_mh_execute_header, v6, v65, "RDHashtagLabelRepairer: Hashtag[%{public}s] without name", (uint8_t *)v66, 0xCu);
            swift_arrayDestroy(v67, 1, v191);
            swift_slowDealloc(v67, -1, -1);
            swift_slowDealloc(v66, -1, -1);

            v18 = v38;
            v33 = v201;
            v39 = v202;
            v24 = &selRef_isConcealed;
          }
        }
LABEL_5:
        swift_bridgeObjectRelease(v199);
      }

      if (v21 == i)
      {
        *(_QWORD *)&result = swift_bridgeObjectRelease(v18).n128_u64[0];
        goto LABEL_122;
      }
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    if (v18 < 0)
      v151 = v18;
    else
      v151 = v18 & 0xFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v18).n128_u64[0];
  v179 = _swiftEmptyArrayStorage;
LABEL_122:
  if ((v190 & 1) == 0 || !v179[2])
    goto LABEL_126;
  v206 = 0;
  v152 = objc_msgSend(v189, "save:", &v206, result);
  v153 = v206;
  if (v152)
  {
    v154 = (id)v206;
LABEL_126:
    *v172 = v179;
    return result;
  }
  v155 = (id)v206;
  v156 = _convertNSErrorToError(_:)(v153);

  v177 = v156;
  swift_willThrow(v157);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v179).n128_u64[0];
  return result;
}

void sub_100181E18(void *a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  NSObject *v84;
  int v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  void *v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  _OWORD *v100;
  double v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  os_log_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  unsigned __int8 v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  char *v141;
  char *v142;
  void (*v143)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  int v145;
  os_log_t v146;
  _OWORD *v147;
  __int128 v148;
  char *v149;
  __n128 v150;
  uint64_t v151;
  void (*v152)(uint64_t, char *, uint64_t);
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unsigned int (*v157)(uint64_t, uint64_t, uint64_t);
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _OWORD v170[2];

  LODWORD(v3) = a2;
  v139 = a3;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v142 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v141 = (char *)&v137 - v8;
  __chkstk_darwin(v9);
  v155 = (char *)&v137 - v10;
  __chkstk_darwin(v11);
  v154 = (char *)&v137 - v12;
  __chkstk_darwin(v13);
  v160 = (char *)&v137 - v14;
  v166 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v158 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v164 = (char *)&v137 - v18;
  v19 = sub_100188134();
  v21 = (unint64_t)v19 >> 62;
  v168 = v19;
  if ((unint64_t)v19 >> 62)
    goto LABEL_93;
  v22 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v23 = _swiftEmptyArrayStorage;
  v163 = a1;
  v167 = v15;
  if (!v22)
  {
    v25 = v168;
    v40 = (uint64_t)v160;
    if ((v3 & 1) != 0)
      goto LABEL_18;
LABEL_81:
    swift_bridgeObjectRelease(v25);
    *v139 = v23;
    return;
  }
  *(_QWORD *)&v170[0] = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v22 & ~(v22 >> 63), 0);
  if (v22 < 0)
  {
    __break(1u);
LABEL_98:
    __break(1u);
  }
  v162 = v21;
  LODWORD(v165) = (_DWORD)v3;
  v24 = 0;
  v25 = v168;
  v26 = v168 & 0xC000000000000001;
  do
  {
    if (v26)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v25);
    else
      v27 = *(id *)(v25 + 8 * v24 + 32);
    v28 = v27;
    v29 = objc_msgSend(v27, "remObjectID", (_QWORD)v137, *((_QWORD *)&v137 + 1));
    if (v29)
    {
      v30 = v29;
      v31 = objc_msgSend(v29, "uuid");

      v32 = v164;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v34 = UUID.uuidString.getter(v33);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v167 + 8))(v32, v166);
    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }

    v23 = *(_QWORD **)&v170[0];
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v170[0]) & 1) == 0)
    {
      sub_1001C1B0C(0, v23[2] + 1, 1);
      v23 = *(_QWORD **)&v170[0];
    }
    v38 = v23[2];
    v37 = v23[3];
    if (v38 >= v37 >> 1)
    {
      sub_1001C1B0C(v37 > 1, v38 + 1, 1);
      v23 = *(_QWORD **)&v170[0];
    }
    ++v24;
    v23[2] = v38 + 1;
    v39 = &v23[2 * v38];
    v39[4] = v34;
    v39[5] = v36;
    v25 = v168;
  }
  while (v22 != v24);
  v21 = v162;
  a1 = v163;
  v15 = v167;
  v40 = (uint64_t)v160;
  if ((v165 & 1) == 0)
    goto LABEL_81;
LABEL_18:
  v138 = v23;
  v41 = v25;
  if (!v21)
  {
    v42 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v42)
      goto LABEL_20;
LABEL_88:
    swift_bridgeObjectRelease(v41);
LABEL_89:
    *v139 = v138;
    return;
  }
  if (v25 < 0)
    v132 = v25;
  else
    v132 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v42 = _CocoaArrayWrapper.endIndex.getter(v132);
  v20 = swift_bridgeObjectRelease(v41);
  if (!v42)
    goto LABEL_88;
LABEL_20:
  if (v42 < 1)
    goto LABEL_98;
  v43 = 0;
  v162 = v168 & 0xC000000000000001;
  v151 = v168 + 32;
  v147 = v170;
  v20.n128_u64[0] = 136446210;
  v150 = v20;
  v149 = (char *)&type metadata for Any + 8;
  *((_QWORD *)&v44 + 1) = 2;
  v148 = xmmword_1006A3C00;
  *(_QWORD *)&v44 = 136315650;
  v140 = v44;
  *(_QWORD *)&v44 = 136315138;
  v137 = v44;
  v161 = v42;
  do
  {
    if (v162)
      v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v168);
    else
      v45 = *(id *)(v151 + 8 * v43);
    v46 = v45;
    v47 = objc_msgSend(v45, "sharedToMeReminderCKIdentifier", (_QWORD)v137);
    v165 = v43;
    if (!v47)
      goto LABEL_30;
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

    v159 = v49;
    UUID.init(uuidString:)(v49, v51);
    v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    v53 = v166;
    if (v52(v40, 1, v166) != 1)
    {
      v157 = v52;
      v66 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v158, v40, v53);
      v67 = sub_10001A630(&qword_10083DA80);
      v68 = *(unsigned __int8 *)(v15 + 80);
      v69 = (v68 + 32) & ~v68;
      v70 = swift_allocObject(v67, v69 + *(_QWORD *)(v15 + 72), v68 | 7);
      *(_OWORD *)(v70 + 16) = v148;
      v152 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 16);
      v152(v70 + v69, v66, v53);
      v15 = (uint64_t)_swiftEmptyArrayStorage;
      v169 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v170[0] = v70;
      v71 = sub_10001A630(&qword_10083DA88);
      v72 = sub_1000A5F84((unint64_t *)&qword_10083DA90, &qword_10083DA88, (uint64_t)&protocol conformance descriptor for [A]);
      v73 = BidirectionalCollection<>.slices(by:)(100, v71, v72);
      v74 = v73;
      v75 = *(_QWORD *)(v73 + 16);
      if (v75)
      {
        v76 = (__int128 *)(v73 + 48);
        do
        {
          v170[0] = *(v76 - 1);
          v77 = *v76;
          v76 += 2;
          v170[1] = v77;
          v78 = *(_QWORD *)&v170[0];
          swift_unknownObjectRetain(*(_QWORD *)&v170[0]);
          sub_100171C80((uint64_t *)v170);
          swift_unknownObjectRelease(v78);
          --v75;
        }
        while (v75);
        swift_bridgeObjectRelease(v70);
        swift_bridgeObjectRelease(v74);
        v15 = (uint64_t)v169;
      }
      else
      {
        swift_bridgeObjectRelease(v70);
        swift_bridgeObjectRelease(v74);
      }
      v80 = (uint64_t)v154;
      v79 = (uint64_t)v155;
      v42 = v161;
      if (qword_100836E00 != -1)
        swift_once(&qword_100836E00, sub_10016F110);
      v81 = type metadata accessor for Logger(0);
      v82 = sub_10001AAA8(v81, (uint64_t)qword_10083D710);
      v83 = v46;
      swift_bridgeObjectRetain_n(v51, 2);
      v3 = v83;
      v156 = v82;
      v84 = Logger.logObject.getter(v3);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, (os_log_type_t)v85))
      {
        v153 = v15;
        v145 = v85;
        v146 = v84;
        v86 = swift_slowAlloc(32, -1);
        v144 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v170[0] = v144;
        *(_DWORD *)v86 = v140;
        v87 = objc_msgSend(v3, "identifier");
        v88 = v166;
        if (v87)
        {
          v89 = v87;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

          v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56);
          v91 = v79;
          v92 = 0;
        }
        else
        {
          v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56);
          v91 = v79;
          v92 = 1;
        }
        v143 = v90;
        v90(v91, v92, 1, v88);
        v93 = v157;
        sub_1000A5CA8(v79, v80, (uint64_t *)&unk_100839C80);
        if (v93(v80, 1, v88))
        {
          sub_10000882C(v80, (uint64_t *)&unk_100839C80);
          v94 = 0xE300000000000000;
          v95 = 7104878;
        }
        else
        {
          v96 = v164;
          v152((uint64_t)v164, (char *)v80, v88);
          v97 = sub_10000882C(v80, (uint64_t *)&unk_100839C80);
          v95 = UUID.uuidString.getter(v97);
          v94 = v98;
          v99 = v96;
          v93 = v157;
          (*(void (**)(char *, uint64_t))(v167 + 8))(v99, v88);
        }
        v169 = (_QWORD *)sub_10001A820(v95, v94, (uint64_t *)v170);
        v100 = v147;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v147);

        swift_bridgeObjectRelease(v94);
        *(_WORD *)(v86 + 12) = 2080;
        swift_bridgeObjectRetain(v51);
        v169 = (_QWORD *)sub_10001A820(v159, v51, (uint64_t *)v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v100);
        *(_QWORD *)&v101 = swift_bridgeObjectRelease_n(v51, 3).n128_u64[0];
        *(_WORD *)(v86 + 22) = 2080;
        v102 = objc_msgSend(v3, "reminder", v101);
        v15 = v153;
        if (v102)
        {
          v103 = v102;
          v104 = objc_msgSend(v102, "identifier");

          v105 = (uint64_t)v142;
          v106 = (uint64_t)v141;
          if (v104)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v104);

            v107 = 0;
          }
          else
          {
            v107 = 1;
          }
          v110 = v166;
          v143(v105, v107, 1, v166);
          sub_1000A5CA8(v105, v106, (uint64_t *)&unk_100839C80);
          if (v93(v106, 1, v110))
          {
            sub_10000882C(v106, (uint64_t *)&unk_100839C80);
            v108 = 0xE300000000000000;
            v109 = 7104878;
          }
          else
          {
            v111 = v164;
            v152((uint64_t)v164, (char *)v106, v110);
            v112 = sub_10000882C(v106, (uint64_t *)&unk_100839C80);
            v109 = UUID.uuidString.getter(v112);
            v108 = v113;
            (*(void (**)(char *, uint64_t))(v167 + 8))(v111, v110);
          }
          a1 = v163;
          v15 = v153;
        }
        else
        {
          v108 = 0xE300000000000000;
          v109 = 7104878;
          a1 = v163;
        }
        v169 = (_QWORD *)sub_10001A820(v109, v108, (uint64_t *)v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v147);

        swift_bridgeObjectRelease(v108);
        v114 = v146;
        _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v145, "RDHashtagLabelRepairer: fixes hashtag[%s] with sharedToMeReminderCKIdentifier[%s] and original reminder id [%s]", (uint8_t *)v86, 0x20u);
        v115 = v144;
        swift_arrayDestroy(v144, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1, -1);
        swift_slowDealloc(v86, -1, -1);

        v42 = v161;
      }
      else
      {

        swift_bridgeObjectRelease_n(v51, 2);
        a1 = v163;
      }
      v40 = (uint64_t)v160;
      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0)
          v120 = v15;
        else
          v120 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        if (_CocoaArrayWrapper.endIndex.getter(v120))
          goto LABEL_64;
      }
      else
      {
        v116 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v15);
        if (v116)
        {
LABEL_64:
          if ((v15 & 0xC000000000000001) != 0)
          {
            v127 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
            swift_bridgeObjectRelease(v51);
            swift_unknownObjectRelease(v127);
            swift_bridgeObjectRelease(v15);
            v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
          }
          else
          {
            v21 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease(v15);
            if (!v21)
            {
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              v135 = v19;
              if (v19 < 0)
                v136 = v19;
              else
                v136 = v19 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v19);
              v22 = _CocoaArrayWrapper.endIndex.getter(v136);
              v20 = swift_bridgeObjectRelease(v135);
              goto LABEL_3;
            }
            if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_92;
            v117 = *(id *)(v15 + 32);
          }
          v118 = v117;
          v119 = swift_bridgeObjectRelease(v15).n128_u64[0];
          goto LABEL_77;
        }
      }
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRetain(v51);
      v122 = Logger.logObject.getter(v121);
      v123 = static os_log_type_t.default.getter(v122);
      if (os_log_type_enabled(v122, v123))
      {
        v124 = swift_slowAlloc(12, -1);
        v125 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v170[0] = v125;
        *(_DWORD *)v124 = v137;
        swift_bridgeObjectRetain(v51);
        *(_QWORD *)(v124 + 4) = sub_10001A820(v159, v51, (uint64_t *)v170);
        swift_bridgeObjectRelease_n(v51, 3);
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "RDHashtagLabelRepairer: reminder[%s] is not found in database. It may not be sync down yet.", (uint8_t *)v124, 0xCu);
        swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
        v126 = v125;
        v40 = (uint64_t)v160;
        swift_slowDealloc(v126, -1, -1);
        swift_slowDealloc(v124, -1, -1);
        swift_bridgeObjectRelease(v15);

      }
      else
      {
        swift_bridgeObjectRelease(v15);

        v119 = swift_bridgeObjectRelease_n(v51, 2).n128_u64[0];
      }
      v118 = 0;
      v42 = v161;
LABEL_77:
      objc_msgSend(v3, "setReminder:", v118, *(double *)&v119);

      v15 = v167;
      (*(void (**)(char *, uint64_t))(v167 + 8))(v158, v166);
      goto LABEL_78;
    }
    swift_bridgeObjectRelease(v51);
    sub_10000882C(v40, (uint64_t *)&unk_100839C80);
    a1 = v163;
    v43 = v165;
LABEL_30:
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v54 = type metadata accessor for Logger(0);
    sub_10001AAA8(v54, (uint64_t)qword_10083D710);
    v55 = v46;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v56, v57))
    {

      v15 = v167;
      goto LABEL_23;
    }
    v58 = swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v170[0] = v59;
    *(_DWORD *)v58 = v150.n128_u32[0];
    v60 = objc_msgSend(v55, "remObjectID");
    if (v60)
    {
      v61 = v60;
      v62 = objc_msgSend(v60, "description");

      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      a1 = v163;
    }
    else
    {
      v65 = 0xE300000000000000;
      v63 = 7104878;
    }
    *(_QWORD *)(v58 + 4) = sub_10001A820(v63, v65, (uint64_t *)v170);

    swift_bridgeObjectRelease(v65);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "RDHashtagLabelRepairer: Impossible as hashtag[%{public}s] without sharedToMeReminderCKIdentifier", (uint8_t *)v58, 0xCu);
    swift_arrayDestroy(v59, 1, v149);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    v40 = (uint64_t)v160;
    v42 = v161;
    v15 = v167;
LABEL_78:
    v43 = v165;
LABEL_23:
    ++v43;
  }
  while (v43 != v42);
  *(_QWORD *)&v128 = swift_bridgeObjectRelease(v168).n128_u64[0];
  *(_QWORD *)&v170[0] = 0;
  v129 = objc_msgSend(a1, "save:", v170, v128);
  v130 = *(_QWORD *)&v170[0];
  if ((v129 & 1) != 0)
  {
    v131 = *(id *)&v170[0];
    goto LABEL_89;
  }
  v133 = *(id *)&v170[0];
  swift_bridgeObjectRelease(v138);
  _convertNSErrorToError(_:)(v130);

  swift_willThrow(v134);
}

void sub_100182D44(void *a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  double v39;
  unsigned __int8 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;

  v4 = v3;
  v53 = a2;
  v7 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v54 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v58 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - v12;
  v14 = sub_10018871C();
  v15 = (unint64_t)v14 >> 62;
  v59 = v14;
  if ((unint64_t)v14 >> 62)
    goto LABEL_42;
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v17 = _swiftEmptyArrayStorage;
  if (!v16)
  {
    v34 = v59;
    if ((v53 & 1) == 0)
      goto LABEL_38;
    goto LABEL_24;
  }
  v52 = v15;
  v60 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v49 = a1;
  v50 = a3;
  v51 = v4;
  a1 = 0;
  v17 = v60;
  v57 = v59 & 0xC000000000000001;
  do
  {
    if ((void *)v16 == a1)
    {
      __break(1u);
LABEL_42:
      if (v14 < 0)
        v46 = v14;
      else
        v46 = v14 & 0xFFFFFFFFFFFFFF8;
      v47 = v15;
      swift_bridgeObjectRetain(v14);
      v16 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(v14);
      v15 = v47;
      goto LABEL_3;
    }
    if (v57)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v59);
    else
      v18 = *(id *)(v59 + 8 * (_QWORD)a1 + 32);
    v19 = v18;
    v20 = (uint64_t)v58;
    v21 = objc_msgSend(v18, "reminder");
    if (!v21)
      goto LABEL_16;
    v22 = v21;
    v23 = objc_msgSend(v21, "identifier");

    if (v23)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    v26 = v55;
    v25 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v20, v24, 1, v56);
    sub_1000A5CA8(v20, (uint64_t)v13, (uint64_t *)&unk_100839C80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v13, 1, v25))
    {
      sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
LABEL_16:
      v4 = 0xE300000000000000;
      a3 = 7104878;
      goto LABEL_18;
    }
    v27 = v54;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v54, v13, v25);
    v28 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    a3 = UUID.uuidString.getter(v28);
    v29 = v26;
    v4 = v30;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v25);
LABEL_18:

    v60 = v17;
    v32 = v17[2];
    v31 = v17[3];
    v14 = v32 + 1;
    if (v32 >= v31 >> 1)
    {
      sub_1001C1B0C(v31 > 1, v32 + 1, 1);
      v17 = v60;
    }
    a1 = (char *)a1 + 1;
    v17[2] = v14;
    v33 = &v17[2 * v32];
    v33[4] = a3;
    v33[5] = v4;
  }
  while ((void *)v16 != a1);
  a3 = v50;
  a1 = v49;
  v15 = v52;
  v34 = v59;
  if ((v53 & 1) == 0)
    goto LABEL_38;
LABEL_24:
  if (v15)
  {
    if (v34 < 0)
      v43 = v34;
    else
      v43 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v35 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v34);
    if (v35)
      goto LABEL_26;
LABEL_38:
    swift_bridgeObjectRelease(v34);
LABEL_39:
    *(_QWORD *)a3 = v17;
    return;
  }
  v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v35)
    goto LABEL_38;
LABEL_26:
  if (v35 < 1)
LABEL_47:
    __break(1u);
  swift_bridgeObjectRetain(v34);
  v36 = 0;
  do
  {
    if ((v34 & 0xC000000000000001) != 0)
      v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v34);
    else
      v37 = *(id *)(v34 + 8 * v36 + 32);
    v38 = v37;
    ++v36;
    v60 = v37;
    sub_1001831C4((void **)&v60, a1);

  }
  while (v35 != v36);
  *(_QWORD *)&v39 = swift_bridgeObjectRelease_n(v34, 2).n128_u64[0];
  v60 = 0;
  v40 = objc_msgSend(a1, "save:", &v60, v39);
  v41 = v60;
  if ((v40 & 1) != 0)
  {
    v42 = v60;
    goto LABEL_39;
  }
  v44 = v60;
  swift_bridgeObjectRelease(v17);
  _convertNSErrorToError(_:)(v41);

  swift_willThrow(v45);
}

id sub_1001831C4(void **a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (char *)&v41 - v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10083D710);
  v15 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v44 = v17;
    v45 = a2;
    v18 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v50 = v42;
    *(_DWORD *)v18 = 136315394;
    v19 = objc_msgSend(v15, "remObjectID");
    v43 = v2;
    if (v19)
    {
      v20 = v19;
      v21 = objc_msgSend(v19, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v25 = 0xE300000000000000;
      v23 = 7104878;
    }
    v48 = sub_10001A820(v23, v25, &v50);
    v41 = &v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

    *(_QWORD *)&v26 = swift_bridgeObjectRelease(v25).n128_u64[0];
    *(_WORD *)(v18 + 12) = 2080;
    v27 = objc_msgSend(v15, "reminder", v26);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, "identifier");

      if (v29)
      {
        v30 = (uint64_t)v46;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v31 = 0;
      }
      else
      {
        v31 = 1;
        v30 = (uint64_t)v46;
      }
      v32 = (uint64_t)v47;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v30, v31, 1, v9);
      sub_1000A5CA8(v30, v32, (uint64_t *)&unk_100839C80);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v32, 1, v9))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v32, v9);
        v36 = sub_10000882C(v32, (uint64_t *)&unk_100839C80);
        v37 = UUID.uuidString.getter(v36);
        v33 = v38;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v35 = v37;
        v34 = v42;
        goto LABEL_17;
      }
      sub_10000882C(v32, (uint64_t *)&unk_100839C80);
      v33 = 0xE300000000000000;
    }
    else
    {
      v33 = 0xE300000000000000;
    }
    v34 = v42;
    v35 = 7104878;
LABEL_17:
    v39 = v41;
    v48 = sub_10001A820(v35, v33, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v39);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v44, "RDHashtagLabelRepairer removes sharedToMeReminerPlaceholder[%s] with reminderID[%s]", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    a2 = v45;
    return objc_msgSend(a2, "deleteObject:", v15);
  }

  return objc_msgSend(a2, "deleteObject:", v15);
}

id sub_10018361C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id result;
  uint64_t v38;
  _QWORD *v39;

  v39 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v38 - v11;
  v13 = *a1;
  v14 = objc_msgSend(v13, "name", v10);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

  }
  else
  {
    v18 = 0xE300000000000000;
    v16 = 7104878;
  }
  v19 = objc_msgSend(v13, "canonicalName");
  if (v19)
  {
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0;
  }
  v24 = objc_msgSend(v13, "firstOccurrenceCreationDate");
  if (v24)
  {
    v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 0, 1, v26);
  }
  else
  {
    v27 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
  }
  v28 = objc_msgSend(v13, "recencyDate");
  if (v28)
  {
    v29 = v28;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v30 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 0, 1, v30);
  }
  else
  {
    v31 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
  }
  v32 = objc_msgSend(v13, "uuidForChangeTracking");
  if (v32)
  {
    v33 = v32;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v34 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
  }
  else
  {
    v35 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v5, 1, 1, v35);
  }
  v36 = objc_allocWithZone((Class)REMHashtagLabel);
  result = sub_100183F18(v16, v18, v21, v23, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  *v39 = result;
  return result;
}

uint64_t type metadata accessor for RDHashtagLabelRepairer()
{
  return objc_opt_self(_TtC7remindd22RDHashtagLabelRepairer);
}

void sub_100183918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v10 >= v6)
      goto LABEL_33;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_33;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_33;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v6)
            goto LABEL_33;
          v11 = *(_QWORD *)(v2 + 8 * v7);
          if (!v11)
          {
            v7 = v10 + 4;
            if (v10 + 4 >= v6)
              goto LABEL_33;
            v11 = *(_QWORD *)(v2 + 8 * v7);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_25:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    v13 = *(_QWORD *)(a1 + 48) + 16 * v9;
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
    v16 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x22)
      goto LABEL_29;
    if (((1 << v16) & 0x40401) == 0)
    {
      if (((1 << v16) & 0x404000000) != 0)
      {
LABEL_33:
        swift_release(a1);
        return;
      }
LABEL_29:
      if (qword_100837338 != -1)
        swift_once(&qword_100837338, sub_100393864);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_1008477A0);
      v18 = v15;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc(12, -1);
        *(_DWORD *)v21 = 134349056;
        *(_QWORD *)(v21 + 4) = v14;

        swift_slowDealloc(v21, -1, -1);
        v18 = v19;
      }
      else
      {

      }
    }
  }
  v12 = v10 + 5;
  if (v12 >= v6)
    goto LABEL_33;
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_33;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_25;
  }
LABEL_35:
  __break(1u);
}

void sub_100183BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v10 >= v6)
      goto LABEL_33;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_33;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_33;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v6)
            goto LABEL_33;
          v11 = *(_QWORD *)(v2 + 8 * v7);
          if (!v11)
          {
            v7 = v10 + 4;
            if (v10 + 4 >= v6)
              goto LABEL_33;
            v11 = *(_QWORD *)(v2 + 8 * v7);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_25:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    v13 = *(_QWORD *)(a1 + 48) + 16 * v9;
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
    v16 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x22)
      goto LABEL_29;
    if (((1 << v16) & 0x40401) == 0)
    {
      if (((1 << v16) & 0x404000000) != 0)
      {
LABEL_33:
        swift_release(a1);
        return;
      }
LABEL_29:
      if (qword_100837338 != -1)
        swift_once(&qword_100837338, sub_100393864);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_1008477A0);
      v18 = v15;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc(12, -1);
        *(_DWORD *)v21 = 134349056;
        *(_QWORD *)(v21 + 4) = v14;

        swift_slowDealloc(v21, -1, -1);
        v18 = v19;
      }
      else
      {

      }
    }
  }
  v12 = v10 + 5;
  if (v12 >= v6)
    goto LABEL_33;
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_33;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_25;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_100183E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t *), uint64_t a6)
{
  return sub_100183E54(a1, a2, a3, a4, a5, a6, (uint64_t)sub_100189370);
}

uint64_t sub_100183E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t *), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  v17 = a2;
  swift_bridgeObjectRetain(a2);
  a5(a1, &v17);
  swift_bridgeObjectRelease(a2);
  v17 = *(_QWORD *)(a4 + 48);
  v13 = v17;
  v16[2] = a4;
  v16[3] = a3;
  v14 = type metadata accessor for UnfairLock(0);
  swift_retain(v13);
  Lock.sync<A>(_:)(a7, v16, v14, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  return swift_release(v17);
}

id sub_100183F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSString v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  Class v23;
  id v24;

  v8 = v7;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v15 = 0;
  }
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  isa = 0;
  if (v18(a5, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  }
  if (v18(a6, 1, v16) == 1)
  {
    v20 = 0;
  }
  else
  {
    v20 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a6, v16);
  }
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(a7, 1, v21) != 1)
  {
    v23 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a7, v21);
  }
  v24 = objc_msgSend(v8, "initWithName:canonicalName:firstOccurrenceCreationDate:recencyDate:uuidForChangeTracking:", v14, v15, isa, v20, v23);

  return v24;
}

uint64_t sub_1001840B0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_10018420C((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release(v2);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_10018420C((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_10018420C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v20;

  v20 = 0;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_24;
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_24;
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v12 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = objc_msgSend(v12, "name");

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_100218868(a1, a2, v20, a3);
        return;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

void sub_1001843CC(uint64_t *a1)
{
  sub_100183918(*a1);
}

uint64_t sub_1001843D4(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *a2;
  a3(a1, &v11);
  v6 = *(_QWORD *)(a5 + 48);
  v9[2] = a5;
  v9[3] = 1;
  v10 = v6;
  v7 = type metadata accessor for UnfairLock(0);
  swift_retain(v6);
  Lock.sync<A>(_:)(sub_100189370, v9, v7, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  return swift_release(v10);
}

uint64_t sub_100184464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 48);
  v5[2] = a2;
  v5[3] = a3;
  v3 = type metadata accessor for UnfairLock(0);
  swift_retain(v6);
  Lock.sync<A>(_:)(sub_100188F54, v5, v3, &type metadata for () + 1, &protocol witness table for UnfairLock);
  return swift_release(v6);
}

void sub_1001844E0(uint64_t *a1)
{
  sub_100183BB0(*a1);
}

_QWORD *sub_1001844E8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  id v33;
  id v34;
  id v35;
  objc_class *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  objc_super v58;
  _QWORD v59[4];
  _QWORD v60[2];

  v8 = v7;
  v56 = a7;
  v57 = a5;
  v53 = a6;
  v54 = a4;
  v55 = a3;
  v51 = a1;
  v52 = a2;
  v9 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakInit(v12, 0);
  *((_BYTE *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) = 0;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable) = 0;
  v50 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_highPrioritySubscriptionTransactionRegistrar;
  v13 = type metadata accessor for RDTransactionRegistrar();
  v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = 0xD000000000000040;
  v14[3] = 0x80000001006FAD90;
  v59[0] = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_100838120, (uint64_t (*)(uint64_t))&type metadata accessor for UnfairLock.Options, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v17 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v59, v16, v17, v9, v15);
  v18 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v14[6] = UnfairLock.init(options:)(v11);
  *(_QWORD *)((char *)v7 + v50) = v14;
  v50 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_lowPrioritySubscriptionTransactionRegistrar;
  v19 = (_QWORD *)swift_allocObject(v13, 56, 7);
  v19[4] = 0;
  v19[5] = 0;
  v19[2] = 0xD00000000000003FLL;
  v19[3] = 0x80000001006FADE0;
  v59[0] = _swiftEmptyArrayStorage;
  v20 = v16;
  v21 = v17;
  v23 = v51;
  v22 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(v59, v20, v21, v9, v15);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19[6] = UnfairLock.init(options:)(v11);
  *(_QWORD *)((char *)v7 + v50) = v19;
  v24 = v53;
  v25 = (_QWORD *)((char *)v7
                 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumed);
  *v25 = 0xD000000000000017;
  v25[1] = 0x80000001006F5560;
  v26 = (_QWORD *)((char *)v7
                 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumedOnLaunch);
  *v26 = 0xD00000000000001FLL;
  v26[1] = 0x80000001006F5580;
  v27 = (_QWORD *)((char *)v7 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_analyticsCrashDetected);
  *v27 = 0xD000000000000035;
  v27[1] = 0x80000001006FAE20;
  v28 = OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitTarget;
  *(_QWORD *)((char *)v8 + v28) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RDHashtagLabelUpdater.BabysitTarget()), "init");
  v29 = (_QWORD *)((char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_changeTrackingClientName);
  *v29 = 0xD000000000000027;
  v29[1] = 0x80000001006FAD30;
  v8[2] = v23;
  v8[3] = v22;
  v59[0] = 0xD000000000000013;
  v59[1] = 0x80000001006FAE60;
  v59[3] = 0;
  v60[0] = 0;
  v59[2] = 0;
  *(_QWORD *)((char *)v60 + 6) = 0;
  if (v24)
  {
    ObjectType = swift_getObjectType(v24);
    v31 = v56;
    v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v56 + 8);
    v33 = v23;
    v34 = v22;
    swift_unknownObjectRetain(v24);
    v35 = (id)v32(v55, v54, v59, ObjectType, v31);
    swift_unknownObjectRelease(v24);
  }
  else
  {
    v36 = (objc_class *)type metadata accessor for RDDaemonController();
    v37 = (char *)objc_allocWithZone(v36);
    v38 = &v37[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    v39 = v54;
    v40 = v55;
    *(_QWORD *)v38 = v55;
    *((_QWORD *)v38 + 1) = v39;
    sub_1000184A8((uint64_t)v59, (uint64_t)&v37[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
    *(_QWORD *)&v37[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
    v58.receiver = v37;
    v58.super_class = v36;
    v41 = v23;
    v42 = v22;
    swift_unknownObjectRetain(v40);
    v35 = objc_msgSendSuper2(&v58, "init");
    v31 = v56;
  }
  v8[4] = v35;
  v43 = (char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_timeGroupingStrategy;
  v44 = sub_10001A630((uint64_t *)&unk_100838030);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = v43;
  v47 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v57, v44);
  v48 = (char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  *((_QWORD *)v48 + 1) = v31;
  swift_unknownObjectWeakAssign(v48, v24);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_hashtagInsertEventCancellables) = _swiftEmptyArrayStorage;
  return v8;
}

_QWORD *sub_100184978(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v7)
      break;
    v20 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    v9 = 0;
    while (v7 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      v18 = v10;
      sub_100172338(&v18, a2, a3, &v19);

      if (v4)
        return (_QWORD *)swift_release(v20);
      ++v9;
      v13 = v19;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = v20[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
      if (v7 == v9)
        return v20;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

void *sub_100184AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "accountIdentifier");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_100184C74(NSObject *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  Class isa;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  int v39;
  uint8_t *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  os_log_t v91;
  _QWORD *v92;
  NSObject *v93;
  Class v94;
  void (*v95)(char *, uint64_t);
  Class v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint8_t *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  uint8_t *v102;
  os_log_type_t v103;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __n128 v110;
  uint8_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  id v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t *v132;
  _QWORD *v133;
  int v134;
  uint64_t v135;
  os_log_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint8_t *v139;
  NSObject *v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;

  v140 = a1;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v131 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v131 - v15;
  __chkstk_darwin(v14);
  v139 = (uint8_t *)&v131 - v18;
  v19 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v129 = a2;
    else
      v129 = a2 & 0xFFFFFFFFFFFFFF8;
    v138 = v17;
    swift_bridgeObjectRetain(a2);
    v130 = _CocoaArrayWrapper.endIndex.getter(v129);
    swift_bridgeObjectRelease(a2);
    v17 = v138;
    if (!v130)
      return;
  }
  else if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  v138 = v17;
  v141 = a3;
  if (!a3)
  {
    v141 = sub_100177C6C(a2);
    if (!v141)
    {
      if (qword_100836E00 != -1)
        swift_once(&qword_100836E00, sub_10016F110);
      v46 = type metadata accessor for Logger(0);
      sub_10001AAA8(v46, (uint64_t)qword_10083D710);
      v47 = swift_bridgeObjectRetain_n(a2, 2);
      v26 = Logger.logObject.getter(v47);
      v48 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v26, (os_log_type_t)v48))
      {

        swift_bridgeObjectRelease_n(a2, 2);
        return;
      }
      v49 = swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v142 = v50;
      LODWORD(v49->isa) = 136446210;
      if (v19)
      {
        if (a2 < 0)
          v112 = a2;
        else
          v112 = a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v51 = _CocoaArrayWrapper.endIndex.getter(v112);
        swift_bridgeObjectRelease(a2);
      }
      else
      {
        v51 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v113 = _swiftEmptyArrayStorage;
      if (v51)
      {
        v138 = v50;
        LODWORD(v139) = v48;
        v140 = v49;
        v141 = v26;
        v144 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v51 & ~(v51 >> 63), 0);
        if (v51 < 0)
          goto LABEL_85;
        v114 = 0;
        v113 = v144;
        do
        {
          if ((a2 & 0xC000000000000001) != 0)
            v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114, a2);
          else
            v115 = *(id *)(a2 + 8 * v114 + 32);
          v116 = v115;
          v117 = objc_msgSend(v115, "remObjectID");
          if (v117)
          {
            v118 = v117;
            v119 = objc_msgSend(v117, "description");

            v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
            v122 = v121;

          }
          else
          {

            v122 = 0xE300000000000000;
            v120 = 7104878;
          }
          v144 = v113;
          v124 = v113[2];
          v123 = v113[3];
          if (v124 >= v123 >> 1)
          {
            sub_1001C1B0C(v123 > 1, v124 + 1, 1);
            v113 = v144;
          }
          ++v114;
          v113[2] = v124 + 1;
          v125 = &v113[2 * v124];
          v125[4] = v120;
          v125[5] = v122;
        }
        while (v51 != v114);
        v49 = v140;
        v26 = v141;
        LOBYTE(v48) = (_BYTE)v139;
        v50 = v138;
      }
      v126 = Array.description.getter(v113, &type metadata for String);
      v128 = v127;
      swift_bridgeObjectRelease(v113);
      v144 = (_QWORD *)sub_10001A820(v126, v128, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v128);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v48, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get first occurrence hashtag as empty array or those with nil name should have been filtered {hashtags: %{public}s}", (uint8_t *)v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
      goto LABEL_77;
    }
  }
  v20 = a3;
  swift_bridgeObjectRetain(a2);
  sub_10011F464(v21);
  v23 = v22;
  swift_bridgeObjectRelease(a2);
  sub_10017B45C(v23, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_bridgeObjectRelease(v23);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_10083D710);
    v25 = swift_bridgeObjectRetain_n(a2, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v26, (os_log_type_t)v27))
    {

      swift_bridgeObjectRelease_n(a2, 2);
      return;
    }
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v142 = v29;
    *(_DWORD *)v28 = 136446210;
    if (v19)
    {
      if (a2 < 0)
        v52 = a2;
      else
        v52 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v30 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v30 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v53 = _swiftEmptyArrayStorage;
    if (!v30)
      goto LABEL_40;
    v137 = (uint8_t *)v29;
    LODWORD(v138) = v27;
    v139 = v28;
    v140 = v26;
    v144 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v30 & ~(v30 >> 63), 0);
    if ((v30 & 0x8000000000000000) == 0)
    {
      v54 = 0;
      v53 = v144;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, a2);
        else
          v55 = *(id *)(a2 + 8 * v54 + 32);
        v56 = v55;
        v57 = objc_msgSend(v55, "remObjectID");
        if (v57)
        {
          v58 = v57;
          v59 = objc_msgSend(v57, "description");

          v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v62 = v61;

        }
        else
        {

          v62 = 0xE300000000000000;
          v60 = 7104878;
        }
        v144 = v53;
        v64 = v53[2];
        v63 = v53[3];
        if (v64 >= v63 >> 1)
        {
          sub_1001C1B0C(v63 > 1, v64 + 1, 1);
          v53 = v144;
        }
        ++v54;
        v53[2] = v64 + 1;
        v65 = &v53[2 * v64];
        v65[4] = v60;
        v65[5] = v62;
      }
      while (v30 != v54);
      v28 = v139;
      v26 = v140;
      LOBYTE(v27) = v138;
      v29 = (uint64_t)v137;
LABEL_40:
      v66 = Array.description.getter(v53, &type metadata for String);
      v68 = v67;
      swift_bridgeObjectRelease(v53);
      v144 = (_QWORD *)sub_10001A820(v66, v68, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get most recently created date as empty array or those with nil name should have been filtered {hashtags: %{public}s}", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

LABEL_77:
      return;
    }
    __break(1u);
LABEL_85:
    __break(1u);
    return;
  }
  v31 = v139;
  (*(void (**)(uint8_t *, char *, uint64_t))(v12 + 32))(v139, v10, v11);
  v32 = v140;
  v33 = v141;
  if (sub_1005C1B94(v140))
  {
    v34 = -[NSObject name](v33, "name");
    -[NSObject setName:](v32, "setName:", v34);

    sub_1005C1D8C((uint64_t)v16);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    -[NSObject setFirstOccurrenceCreationDate:](v32, "setFirstOccurrenceCreationDate:", isa);

    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_10083D710);
    v37 = v32;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      v134 = v39;
      v136 = v38;
      v40 = (uint8_t *)swift_slowAlloc(32, -1);
      v133 = (_QWORD *)swift_slowAlloc(96, -1);
      v144 = v133;
      v137 = v40;
      *(_DWORD *)v40 = 136315650;
      v41 = -[NSObject canonicalName](v37, "canonicalName");
      v135 = v23;
      if (v41)
      {
        v42 = v41;
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v45 = v44;

      }
      else
      {
        v43 = 0;
        v45 = 0;
      }
      v69 = v137;
      v131 = v137 + 4;
      v142 = v43;
      v143 = v45;
      v132 = (uint64_t *)sub_10001A630((uint64_t *)&unk_10083A370);
      v70 = Optional.descriptionOrNil.getter(v132);
      v72 = v71;
      swift_bridgeObjectRelease(v45);
      v142 = sub_10001A820(v70, v72, (uint64_t *)&v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      *(_QWORD *)&v73 = swift_bridgeObjectRelease(v72).n128_u64[0];
      *((_WORD *)v69 + 6) = 2080;
      v74 = -[NSObject name](v37, "name", v73);
      if (v74)
      {
        v75 = v74;
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v78 = v77;

      }
      else
      {
        v76 = 0;
        v78 = 0;
      }
      v79 = v137;
      v131 = v137 + 14;
      v142 = v76;
      v143 = v78;
      v80 = Optional.descriptionOrNil.getter(v132);
      v82 = v81;
      swift_bridgeObjectRelease(v78);
      v142 = sub_10001A820(v80, v82, (uint64_t *)&v144);
      v132 = &v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143);

      *(_QWORD *)&v83 = swift_bridgeObjectRelease(v82).n128_u64[0];
      *((_WORD *)v79 + 11) = 2080;
      v84 = -[NSObject firstOccurrenceCreationDate](v37, "firstOccurrenceCreationDate", v83);
      if (v84)
      {
        v85 = v84;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

        v86 = 0;
      }
      else
      {
        v86 = 1;
      }
      v23 = v135;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, v86, 1, v11);
      v87 = v137;
      v131 = v137 + 24;
      v88 = Optional.descriptionOrNil.getter(v5);
      v90 = v89;
      sub_10000882C((uint64_t)v8, (uint64_t *)&unk_1008380D0);
      v142 = sub_10001A820(v88, v90, (uint64_t *)&v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v132);

      swift_bridgeObjectRelease(v90);
      v91 = v136;
      _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v134, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label first occurrence {canonicalName: %s, new-name: %s, new-firstOccurrenceCreationDate: %s}", v87, 0x20u);
      v92 = v133;
      swift_arrayDestroy(v133, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v87, -1, -1);

      v33 = v141;
      v31 = v139;
    }
    else
    {

      v33 = v141;
    }
  }
  sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
  v93 = v140;
  v94 = Set._bridgeToObjectiveC()().super.isa;
  -[NSObject addHashtags:](v93, "addHashtags:", v94, swift_bridgeObjectRelease(v23).n128_f64[0]);

  sub_10057A234((uint64_t)v16);
  LOBYTE(v94) = static Date.< infix(_:_:)(v16, v31);
  v95 = *(void (**)(char *, uint64_t))(v12 + 8);
  v95(v16, v11);
  if ((v94 & 1) != 0)
  {
    v96 = Date._bridgeToObjectiveC()().super.isa;
    -[NSObject setRecencyDate:](v93, "setRecencyDate:", v96);

    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v97 = type metadata accessor for Logger(0);
    sub_10001AAA8(v97, (uint64_t)qword_10083D710);
    v98 = *(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(v12 + 16);
    v99 = v138;
    v100 = v98(v138, v31, v11);
    v101 = Logger.logObject.getter(v100);
    v102 = v31;
    v103 = static os_log_type_t.info.getter(v101);
    if (os_log_type_enabled(v101, v103))
    {
      v104 = swift_slowAlloc(12, -1);
      v141 = v33;
      v105 = (uint8_t *)v104;
      v106 = swift_slowAlloc(32, -1);
      v142 = v106;
      *(_DWORD *)v105 = 136315138;
      v107 = Date.description.getter(v106);
      v109 = v108;
      v144 = (_QWORD *)sub_10001A820(v107, v108, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      v110 = swift_bridgeObjectRelease(v109);
      ((void (*)(uint64_t, uint64_t, __n128))v95)(v99, v11, v110);
      _os_log_impl((void *)&_mh_execute_header, v101, v103, "RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label recencyDate {new-recencyDate: %s}", v105, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      v111 = v139;
    }
    else
    {

      v95((char *)v99, v11);
      v111 = v102;
    }
    v95((char *)v111, v11);
  }
  else
  {
    v95((char *)v31, v11);

  }
}

uint64_t sub_100185A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  Swift::Int v8;
  _QWORD *v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  objc_class *v31;
  char v32[40];
  char v33[56];

  v6 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v6, v33);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  swift_bridgeObjectRetain(a3);
  v8 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v9 = sub_10037E884();
  v10 = (objc_class *)sub_1001DFBD0((uint64_t)v9);
  swift_bridgeObjectRelease(v9);
  v11 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v12 = swift_initStackObject(v11, v32);
  *(_OWORD *)(v12 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ABA60);
  *(_QWORD *)(v12 + 32) = KeyPath;
  v29 = v12;
  specialized Array._endMutation()(KeyPath);
  v31 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v14 = (objc_class *)_swiftEmptyArrayStorage;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    v16 = v15;
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 32);
    v15 = swift_retain(v16);
  }
  v17 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v15);
  if (v18)
  {
    v19 = v17;
    v20 = v18;
    swift_release(v16);
    v22 = _swiftEmptyArrayStorage[2];
    v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1)
    {
      sub_1001C1B0C(v21 > 1, v22 + 1, 1);
      v14 = v31;
    }
    *((_QWORD *)v14 + 2) = v22 + 1;
    v23 = (_QWORD *)((char *)v14 + 16 * v22);
    v23[4] = v19;
    v23[5] = v20;
    swift_bridgeObjectRelease(v12);
    v24 = sub_10037E67C(v8, a1, v10, v14);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    swift_release(v14);
    return v24;
  }
  else
  {
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v26._object = (void *)0x80000001006F8C10;
    v26._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v26);
    v28 = v16;
    v27 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v28, &v29, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100185EC8(void *a1, void *a2)
{
  return sub_10057A454(a2, a1);
}

_QWORD *sub_10018616C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v11[0] = a2;
  v2 = sub_10001A630(&qword_10083DA88);
  v3 = sub_1000A5F84((unint64_t *)&qword_10083DA90, &qword_10083DA88, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = BidirectionalCollection<>.slices(by:)(100, v2, v3);
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v7 = (__int128 *)(v4 + 48);
    do
    {
      v11[0] = *(v7 - 1);
      v8 = *v7;
      v7 += 2;
      v11[1] = v8;
      v9 = *(_QWORD *)&v11[0];
      swift_unknownObjectRetain(*(_QWORD *)&v11[0]);
      sub_100171C80((uint64_t *)v11);
      swift_unknownObjectRelease(v9);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v5);
    return v12;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
}

_QWORD *sub_100186260(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v15[2];
  _QWORD *v16;

  v16 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  v5 = sub_1001E987C(a2);
  swift_bridgeObjectRelease(a2);
  *(_QWORD *)&v15[0] = v5;
  v6 = sub_10001A630(&qword_10083DA88);
  v7 = sub_1000A5F84((unint64_t *)&qword_10083DA90, &qword_10083DA88, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = BidirectionalCollection<>.slices(by:)(100, v6, v7);
  swift_release(v5);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(v8);
    v10 = (__int128 *)(v8 + 48);
    v11 = a3 & 1;
    do
    {
      v15[0] = *(v10 - 1);
      v12 = *v10;
      v10 += 2;
      v15[1] = v12;
      v13 = *(_QWORD *)&v15[0];
      swift_unknownObjectRetain(*(_QWORD *)&v15[0]);
      sub_10017C030((uint64_t *)v15, v11);
      swift_unknownObjectRelease(v13);
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease_n(v8, 2);
    return v16;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    return _swiftEmptyArrayStorage;
  }
}

_QWORD *sub_10018639C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v10[0] = a1;
  v1 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v2 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v3 = BidirectionalCollection<>.slices(by:)(100, v1, v2);
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = (__int128 *)(v3 + 48);
    do
    {
      v10[0] = *(v6 - 1);
      v7 = *v6;
      v6 += 2;
      v10[1] = v7;
      v8 = *(_QWORD *)&v10[0];
      swift_unknownObjectRetain(*(_QWORD *)&v10[0]);
      sub_10017C7E4((uint64_t *)v10);
      swift_unknownObjectRelease(v8);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
    return v11;
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_100186490()
{
  _QWORD *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  objc_class *v22;
  char v23[40];

  v0 = sub_10037E884();
  sub_1001E190C((uint64_t)v0);
  v1 = (objc_class *)sub_1001DFBD0((uint64_t)&off_1007DFAD0);
  swift_bridgeObjectRelease(&off_1007DFAD0);
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v2, v23);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ABA60);
  *(_QWORD *)(inited + 32) = KeyPath;
  v20 = inited;
  specialized Array._endMutation()(KeyPath);
  v22 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v5 = (objc_class *)_swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v7 = v6;
  }
  else
  {
    v7 = *(_QWORD *)(inited + 32);
    v6 = swift_retain();
  }
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v6);
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    swift_release(v7);
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
    {
      sub_1001C1B0C(v12 > 1, v13 + 1, 1);
      v5 = v22;
    }
    *((_QWORD *)v5 + 2) = v13 + 1;
    v14 = (_QWORD *)((char *)v5 + 16 * v13);
    v14[4] = v10;
    v14[5] = v11;
    swift_bridgeObjectRelease(inited);
    v15 = sub_10037C198(3, 2, 2, v1, v5);
    swift_bridgeObjectRelease(v1);
    swift_release(v5);
    return v15;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001006F8C10;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    v19 = v7;
    v18 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v19, &v20, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100186874(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    v14 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      result = (_QWORD *)swift_release(v14);
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v12 = v5;
      sub_10018361C(&v12, &v13);

      ++v4;
      v7 = v13;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = v14[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      if (v2 == v4)
        return v14;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1001869B8()
{
  _QWORD *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  objc_class *v22;
  char v23[40];

  v0 = sub_10037E884();
  sub_1001E190C((uint64_t)v0);
  v1 = (objc_class *)sub_1001DFBD0((uint64_t)&off_1007DFB20);
  swift_bridgeObjectRelease(&off_1007DFB20);
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v2, v23);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ABA60);
  *(_QWORD *)(inited + 32) = KeyPath;
  v20 = inited;
  specialized Array._endMutation()(KeyPath);
  v22 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v5 = (objc_class *)_swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v7 = v6;
  }
  else
  {
    v7 = *(_QWORD *)(inited + 32);
    v6 = swift_retain();
  }
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v6);
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    swift_release(v7);
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
    {
      sub_1001C1B0C(v12 > 1, v13 + 1, 1);
      v5 = v22;
    }
    *((_QWORD *)v5 + 2) = v13 + 1;
    v14 = (_QWORD *)((char *)v5 + 16 * v13);
    v14[4] = v10;
    v14[5] = v11;
    swift_bridgeObjectRelease(inited);
    v15 = sub_10037C198(1, 2, 2, v1, v5);
    swift_bridgeObjectRelease(v1);
    swift_release(v5);
    return v15;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001006F8C10;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    v19 = v7;
    v18 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v19, &v20, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

void sub_100186D9C(void *a1, void *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a2, "hashtags", v5);
  if (!v8)
    goto LABEL_12;
  v9 = v8;
  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v11 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
  v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v9, v10, v11);

  if ((v12 & 0xC000000000000001) != 0)
  {
    v13 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaSet.count.getter(v13);
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 16);
  }
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
  if (v14)
  {
    v16 = objc_msgSend(a2, "hashtags", v15);
    v17 = v16;
    if (v16)
    {
      v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v10, v11);

      sub_10017B1E4(v18);
      v20 = v19;
      swift_bridgeObjectRelease(v18);
      if (v20)
      {
        v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v20);
      }
      else
      {
        v17 = 0;
      }
    }
    objc_msgSend(a2, "setName:", v17);

    v21 = objc_msgSend(a2, "hashtags");
    if (v21)
    {
      v22 = v21;
      v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v21, v10, v11);

      sub_10017B45C(v23, (uint64_t)v7);
      swift_bridgeObjectRelease(v23);
      v24 = type metadata accessor for Date(0);
      v25 = *(_QWORD *)(v24 - 8);
      isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24) != 1)
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v24);
      }
    }
    else
    {
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 1, 1, v27);
      isa = 0;
    }
    objc_msgSend(a2, "setRecencyDate:", isa);

  }
  else
  {
LABEL_12:
    objc_msgSend(a1, "deleteObject:", a2);
  }
}

uint64_t sub_10018703C()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  Class isa;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  Class v37;
  uint64_t v38;
  uint64_t result;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  char v46[48];

  v43 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006ABA98);
  v1 = sub_100341B48(KeyPath);
  v2 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  v4 = _swiftEmptyArrayStorage[2];
  v3 = _swiftEmptyArrayStorage[3];
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v1);
  specialized Array._endMutation()(v5);
  v6 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v8 = v43[2];
  v7 = v43[3];
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
  specialized Array._endMutation()(v9);
  v10 = (void *)sub_10000D2BC(v43);
  v11 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v10);

  v14 = sub_1001DFBD0((uint64_t)&off_1007DFB70);
  swift_arrayDestroy(&unk_1007DFB90, 1, &type metadata for String);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v14).n128_f64[0]);

  v16 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v16, v46);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006ABAC8);
  v18 = swift_getKeyPath(&unk_1006ABA28);
  *(_QWORD *)(inited + 40) = v18;
  v43 = (_QWORD *)inited;
  specialized Array._endMutation()(v18);
  v45 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 2, 0);
  v19 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v21 = v20;
  }
  else
  {
    v21 = *(_QWORD *)(inited + 32);
    v20 = swift_retain();
  }
  v22 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v20);
  if (!v23)
    goto LABEL_18;
  v24 = v22;
  v25 = v23;
  swift_release(v21);
  v27 = _swiftEmptyArrayStorage[2];
  v26 = _swiftEmptyArrayStorage[3];
  if (v27 >= v26 >> 1)
  {
    sub_1001C1B0C(v26 > 1, v27 + 1, 1);
    v19 = v45;
  }
  v19[2] = v27 + 1;
  v28 = &v19[2 * v27];
  v28[4] = v24;
  v28[5] = v25;
  if ((inited & 0xC000000000000001) != 0)
  {
    v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, inited);
    v21 = v29;
  }
  else
  {
    v21 = *(_QWORD *)(inited + 40);
    v29 = swift_retain();
  }
  v30 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v29);
  if (v31)
  {
    v32 = v30;
    v33 = v31;
    swift_release(v21);
    v45 = v19;
    v35 = v19[2];
    v34 = v19[3];
    if (v35 >= v34 >> 1)
    {
      sub_1001C1B0C(v34 > 1, v35 + 1, 1);
      v19 = v45;
    }
    v19[2] = v35 + 1;
    v36 = &v19[2 * v35];
    v36[4] = v32;
    v36[5] = v33;
    swift_bridgeObjectRelease(inited);
    v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v19);
    objc_msgSend(v12, "setRelationshipKeyPathsForPrefetching:", v37);

    v38 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
    return v38;
  }
  else
  {
LABEL_18:
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v40._object = (void *)0x80000001006F8C10;
    v40._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v40);
    v42 = v21;
    v41 = sub_10001A630(&qword_10083DAA0);
    _print_unlocked<A, B>(_:_:)(&v42, &v43, v41, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v43, v44, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100187664(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  os_log_type_t v60;
  const char *v61;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - v12;
  v14 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a2, "name", v15);
  if (!v18)
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_10083D710);
    v34 = a2;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v65 = v38;
      *(_DWORD *)v37 = 136446210;
      v39 = objc_msgSend(v34, "remObjectID");
      if (v39)
      {
        v40 = v39;
        v41 = objc_msgSend(v39, "description");

        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v44 = v43;

      }
      else
      {
        v42 = 7104878;
        v44 = 0xE300000000000000;
      }
      v67 = sub_10001A820(v42, v44, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

      swift_bridgeObjectRelease(v44);
      v60 = v36;
      v61 = "REMCDHashtagLabelRepairer: hashtag[%{public}s] without name";
      goto LABEL_26;
    }
LABEL_19:

    return 0;
  }
  v19 = v18;
  v64 = (void *)a1;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  v65 = v20;
  v66 = v22;
  static Locale.current.getter(v23);
  v24 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 0, 1, v24);
  v25 = sub_1000E525C();
  v26 = StringProtocol.foldedStringForWriting(locale:)(v17, &type metadata for String, v25);
  v28 = v27;
  sub_10000882C((uint64_t)v17, (uint64_t *)&unk_10083FBE0);
  v29 = objc_msgSend(a2, "account", swift_bridgeObjectRelease(v66).n128_f64[0]);
  if (!v29)
  {
    swift_bridgeObjectRelease(v28);
    goto LABEL_14;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "identifier");

  if (v31)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v32, 1, v4);
  sub_1000A5CA8((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    swift_bridgeObjectRelease(v28);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
LABEL_14:
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v45 = type metadata accessor for Logger(0);
    sub_10001AAA8(v45, (uint64_t)qword_10083D710);
    v34 = a2;
    v35 = Logger.logObject.getter(v34);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v46))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v65 = v38;
      *(_DWORD *)v37 = 136446210;
      v47 = objc_msgSend(v34, "remObjectID");
      if (v47)
      {
        v48 = v47;
        v49 = objc_msgSend(v47, "description");

        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v52 = v51;

      }
      else
      {
        v50 = 7104878;
        v52 = 0xE300000000000000;
      }
      v67 = sub_10001A820(v50, v52, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

      swift_bridgeObjectRelease(v52);
      v60 = v46;
      v61 = "REMCDHashtagLabelRepairer: hashtag[%{public}s] without accountIdentifier";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v35, v60, v61, v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      return 0;
    }
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
  v53 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
  v54 = UUID.uuidString.getter(v53);
  v56 = v55;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v57 = v64;
  v58 = sub_100185A8C((uint64_t)v64, v26, v28);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRetain(v56);
  v59 = sub_100184AE4(v58, v54, v56);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease_n(v56, 2);
  if (!v59)
    return sub_100185EC8(v57, a2);
  return v59;
}

uint64_t sub_100187C88()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  Class isa;
  uint64_t v6;
  uint64_t inited;
  uint64_t KeyPath;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  Class v19;
  uint64_t v20;
  uint64_t result;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28[40];

  v0 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v1 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "entity");
  objc_msgSend(v1, "setEntity:", v2);

  objc_msgSend(v1, "setAffectedStores:", 0);
  objc_msgSend(v1, "setPredicate:", 0);
  v3 = sub_10037E884();
  v4 = sub_1001DFBD0((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

  v6 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v6, v28);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ABA60);
  *(_QWORD *)(inited + 32) = KeyPath;
  v25 = inited;
  specialized Array._endMutation()(KeyPath);
  v27 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v9 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v11 = v10;
  }
  else
  {
    v11 = *(_QWORD *)(inited + 32);
    v10 = swift_retain();
  }
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v10);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    swift_release(v11);
    v17 = _swiftEmptyArrayStorage[2];
    v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1)
    {
      sub_1001C1B0C(v16 > 1, v17 + 1, 1);
      v9 = v27;
    }
    v9[2] = v17 + 1;
    v18 = &v9[2 * v17];
    v18[4] = v14;
    v18[5] = v15;
    swift_bridgeObjectRelease(inited);
    v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v9);
    objc_msgSend(v1, "setRelationshipKeyPathsForPrefetching:", v19);

    v20 = NSManagedObjectContext.fetch<A>(_:)(v1, v0);
    return v20;
  }
  else
  {
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v22._object = (void *)0x80000001006F8C10;
    v22._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v22);
    v24 = v11;
    v23 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v24, &v25, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v25, v26, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100188134()
{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  Class v32;
  uint64_t v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  char v38[40];
  uint64_t v39;
  __int128 v40;
  void *v41;
  _QWORD *v42;
  char v43[48];

  sub_1002A43E4(1, 3);
  v1 = v0;
  v2 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "entity");
  objc_msgSend(v3, "setEntity:", v4);

  objc_msgSend(v3, "setAffectedStores:", 0);
  objc_msgSend(v3, "setPredicate:", v1);

  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v43);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ABA00);
  *(_QWORD *)(inited + 32) = KeyPath;
  *(_QWORD *)&v40 = inited;
  specialized Array._endMutation()(KeyPath);
  v8 = inited;
  v42 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 1, 0);
  v9 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v11 = v10;
  }
  else
  {
    v11 = *(_QWORD *)(inited + 32);
    v10 = swift_retain();
  }
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v10);
  if (!v13)
  {
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v35._object = (void *)0x80000001006F8C10;
    v35._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v35);
    v39 = v11;
LABEL_16:
    v37 = sub_10001A630(&qword_10083DAA0);
    _print_unlocked<A, B>(_:_:)(&v39, &v40, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v40, *((_QWORD *)&v40 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
    return result;
  }
  v14 = v12;
  v15 = v13;
  v41 = &type metadata for String;
  swift_release(v11);
  *(_QWORD *)&v40 = v14;
  *((_QWORD *)&v40 + 1) = v15;
  v17 = _swiftEmptyArrayStorage[2];
  v16 = _swiftEmptyArrayStorage[3];
  if (v17 >= v16 >> 1)
  {
    sub_1001C1C48(v16 > 1, v17 + 1, 1);
    v9 = v42;
  }
  v9[2] = v17 + 1;
  sub_10001A6CC(&v40, &v9[4 * v17 + 4]);
  swift_bridgeObjectRelease(v8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v9);
  objc_msgSend(v3, "setPropertiesToFetch:", isa);

  v19 = swift_initStackObject(v5, v38);
  *(_OWORD *)(v19 + 16) = xmmword_1006A7330;
  v20 = swift_getKeyPath(&unk_1006ABA28);
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)&v40 = v19;
  specialized Array._endMutation()(v20);
  v21 = v40;
  v42 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v22 = v42;
  if ((v21 & 0xC000000000000001) != 0)
  {
    v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    v24 = v23;
  }
  else
  {
    v24 = *(_QWORD *)(v21 + 32);
    v23 = swift_retain();
  }
  v25 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v23);
  if (!v26)
  {
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v36._object = (void *)0x80000001006F8C10;
    v36._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v36);
    v39 = v24;
    goto LABEL_16;
  }
  v27 = v25;
  v28 = v26;
  swift_release(v24);
  v30 = v22[2];
  v29 = v22[3];
  if (v30 >= v29 >> 1)
  {
    sub_1001C1B0C(v29 > 1, v30 + 1, 1);
    v22 = v42;
  }
  v22[2] = v30 + 1;
  v31 = &v22[2 * v30];
  v31[4] = v27;
  v31[5] = v28;
  swift_bridgeObjectRelease(v21);
  v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v22);
  objc_msgSend(v3, "setRelationshipKeyPathsForPrefetching:", v32);

  v33 = NSManagedObjectContext.fetch<A>(_:)(v3, v2);
  return v33;
}

uint64_t sub_10018871C()
{
  id v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t KeyPath;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char v24[40];

  v0 = objc_msgSend((id)objc_opt_self(REMCDSharedToMeReminderPlaceholder), "fetchRequest");
  objc_msgSend(v0, "setPropertiesToFetch:", 0);
  v1 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v1, v24);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006AB978);
  *(_QWORD *)(inited + 32) = KeyPath;
  v21 = inited;
  specialized Array._endMutation()(KeyPath);
  v23 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v4 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0)
  {
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v6 = v5;
  }
  else
  {
    v6 = *(_QWORD *)(inited + 32);
    v5 = swift_retain();
  }
  v7 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v5);
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    swift_release(v6);
    v12 = _swiftEmptyArrayStorage[2];
    v11 = _swiftEmptyArrayStorage[3];
    if (v12 >= v11 >> 1)
    {
      sub_1001C1B0C(v11 > 1, v12 + 1, 1);
      v4 = v23;
    }
    v4[2] = v12 + 1;
    v13 = &v4[2 * v12];
    v13[4] = v9;
    v13[5] = v10;
    swift_bridgeObjectRelease(inited);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v4);
    objc_msgSend(v0, "setRelationshipKeyPathsForPrefetching:", isa);

    v15 = sub_1000151B0(0, &qword_100844930, off_1007D6710);
    v16 = NSManagedObjectContext.fetch<A>(_:)(v0, v15);

    return v16;
  }
  else
  {
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v18._object = (void *)0x80000001006F8C10;
    v18._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v18);
    v20 = v6;
    v19 = sub_10001A630((uint64_t *)&unk_10083DA70);
    _print_unlocked<A, B>(_:_:)(&v20, &v21, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v21, v22, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

const char *sub_100188B2C()
{
  return "reminder";
}

id sub_100188B38@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_100188B70(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

const char *sub_100188B8C()
{
  return "sharedToMeReminderCKIdentifier";
}

const char *sub_100188BA8()
{
  return "hashtags";
}

const char *sub_100188BBC()
{
  return "hashtagLabel";
}

void sub_100188BD8(void *a1)
{
  uint64_t v1;

  sub_1001740E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(os_log_t *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083DC38, (uint64_t)&nominal type descriptor for RDHashtagLabelUpdater.HashtagTombstone);
}

uint64_t sub_100188C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100188C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100188C98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100188CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100380BE8(a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100188CE0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100188D0C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

const char *sub_100188D40()
{
  return "name";
}

uint64_t sub_100188D54@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_100188D80(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

uint64_t sub_100188DC4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100188DF0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

uint64_t sub_100188E24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100188E48(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100397A7C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100188E50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100188E74(uint64_t a1)
{
  uint64_t v1;

  return sub_100184464(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100188E7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100188EA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1001843D4(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100188EB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100188EE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100183E54(a1, *a2, a2[1], *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24), *(_QWORD *)(v2 + 32), (uint64_t)sub_100188F4C);
}

uint64_t sub_100188F0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100188F40()
{
  uint64_t v0;

  sub_10017160C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100188F4C()
{
  uint64_t v0;

  sub_1003CEE50(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100188F54()
{
  uint64_t v0;

  sub_1003CE608(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t *sub_100188F5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100188FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100189038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1001890A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10018911C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100189178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1001891E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001891F0);
}

uint64_t sub_1001891F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100189270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018927C);
}

uint64_t sub_10018927C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001892F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006AB8A0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100189374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083DC70);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083DC70);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100189404(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100189438 + 4 * byte_1006ABC40[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_100189438()
{
  return 0x72656767697274;
}

unint64_t sub_100189450()
{
  return 0xD000000000000010;
}

void sub_10018948C(char *a1)
{
  sub_1002B553C(*a1);
}

void sub_100189498()
{
  char *v0;

  sub_1004F48FC(*v0);
}

void sub_1001894A0(uint64_t a1)
{
  char *v1;

  sub_1002B61DC(a1, *v1);
}

void sub_1001894A8(uint64_t a1)
{
  char *v1;

  sub_1002B1F38(a1, *v1);
}

unint64_t sub_1001894B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10018A88C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001894DC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100189404(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100189504(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFBA0;
}

unint64_t sub_100189514@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10018A88C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100189538()
{
  unsigned __int8 *v0;

  return sub_100189404(*v0);
}

uint64_t sub_100189540(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B3C14(*a1, *a2);
}

Swift::Int sub_10018954C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7265646E696D6572;
  else
    v2 = 0x49746E756F636361;
  if (v1)
    v3 = 0xEA00000000004449;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001895D4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7265646E696D6572;
  else
    v2 = 0x49746E756F636361;
  if (*v1)
    v3 = 0xEA00000000004449;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100189638(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7265646E696D6572;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xEA00000000004449;
  else
    v4 = 0xE900000000000044;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001896BC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DED08, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100189718(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x49746E756F636361;
  if (*v1)
    v2 = 0x7265646E696D6572;
  v3 = 0xE900000000000044;
  if (*v1)
    v3 = 0xEA00000000004449;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100189760(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFBC8;
}

uint64_t sub_100189770@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DED08, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1001897D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7265646E696D6572;
  else
    return 0x49746E756F636361;
}

id sub_100189814(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  NSString v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t ObjCClassFromMetadata;
  NSString v46;
  uint64_t v47;
  void *v49;
  id v50;
  objc_class *v51;
  Class isa;
  uint64_t v53;
  int v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  __int128 v64[2];
  uint64_t v65;
  NSObject *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = 0;
  v13 = objc_msgSend(a1, "remObjectIDWithError:", &v66, v10);
  v14 = v66;
  if (v13)
  {
    v3 = v13;
    v15 = v66;
    v16 = objc_msgSend(a1, "trigger");
    if (v16)
    {
      v17 = v16;
      v61 = v5;
      v62 = v3;
      v63 = v16;
      v3 = (id)sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
      v18 = v17;
      v19 = sub_10001A630(&qword_10083DE78);
      if (swift_dynamicCast(v64, &v63, v3, v19, 6))
      {
        v60 = v18;
        sub_10001BCA8(v64, (uint64_t)&v66);
        v3 = v68;
        v20 = v69;
        sub_10000A388(&v66, (uint64_t)v68);
        v21 = v62;
        v22 = (*(uint64_t (**)(_QWORD, id, id, uint64_t))(v20 + 8))(*(_QWORD *)(v1 + 16), v62, v3, v20);
        if (v2)
        {

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v66);
        }
        else
        {
          v49 = (void *)v22;
          v50 = objc_allocWithZone((Class)REMAlarm);
          v59 = v49;
          v3 = objc_msgSend(v50, "initWithTrigger:objectID:", v49, v21);
          v51 = (objc_class *)objc_msgSend(a1, "acknowledgedDate");
          isa = v51;
          if (v51)
          {
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

            v53 = v61;
            (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, v61);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v53);
            v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v53);
            v55 = v60;
            if (v54 == 1)
            {
              isa = 0;
            }
            else
            {
              isa = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v53);
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v61);
            v55 = v60;
          }
          objc_msgSend(v3, "setAcknowledgedDate:", isa);

          v56 = objc_msgSend(a1, "alarmUID");
          objc_msgSend(v3, "setAlarmUID:", v56);

          v57 = objc_msgSend(a1, "originalAlarmUID");
          objc_msgSend(v3, "setOriginalAlarmUID:", v57);

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v66);
        }
      }
      else
      {
        v65 = 0;
        memset(v64, 0, sizeof(v64));
        sub_10018A9BC((uint64_t)v64);
        v33 = (void *)objc_opt_self(REMError);
        v66 = 0;
        v67 = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v34._object = (void *)0x80000001006FAF30;
        v34._countAndFlagsBits = 0xD000000000000035;
        String.append(_:)(v34);
        v35 = objc_msgSend(v18, "description");
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

        v39._countAndFlagsBits = v36;
        v39._object = v38;
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 125;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        v41 = String._bridgeToObjectiveC()();
        objc_msgSend(v33, "internalErrorWithDebugDescription:", v41, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v42);
      }
    }
    else
    {
      if (qword_100836E28 != -1)
        swift_once(&qword_100836E28, sub_100189374);
      v25 = type metadata accessor for Logger(0);
      sub_10001AAA8(v25, (uint64_t)qword_10083DC70);
      v26 = v3;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v29 = 138412290;
        v62 = v3;
        v3 = v29 + 4;
        v66 = v26;
        v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
        *v30 = v62;

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "REMAlarmCDIngestor: cdAlarm.trigger is nil {cdAlarm.remObjectID: %@}", v29, 0xCu);
        v32 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v30, 1, v32);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {

        v27 = v26;
      }

      v43 = (void *)objc_opt_self(REMError);
      v44 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v44);
      v46 = String._bridgeToObjectiveC()();
      objc_msgSend(v43, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v46);

      swift_willThrow(v47);
    }
  }
  else
  {
    v23 = v66;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v24);
  }
  return v3;
}

void sub_100189E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a4;
  v22 = a2;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v15[2] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v13 - 8);
  v21 = v13;
  __chkstk_darwin(v13);
  v19 = (char *)v15 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16))
  {
    v17 = v12;
    v15[1] = v4;
    swift_bridgeObjectRetain(a3);
    v16 = xmmword_1006A7330;
    v15[4] = v7;
    v15[5] = a1;
    v15[3] = v8;
    __asm { BR              X9 }
  }
}

id sub_10018A6D4(void *a1, void *a2)
{
  void **v2;
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *v2;
  v5 = a1;
  v6 = a2;
  v7 = sub_10014A224(v4);

  return v7;
}

id sub_10018A734(void *a1, void *a2)
{
  void **v2;
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *v2;
  v5 = a1;
  v6 = a2;
  v7 = sub_10014989C(v4);

  return v7;
}

id sub_10018A794(void *a1, void *a2)
{
  void **v2;
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *v2;
  v5 = a1;
  v6 = a2;
  v7 = sub_100149E88(v4);

  return v7;
}

id sub_10018A7F4(void *a1, void *a2)
{
  void **v2;
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *v2;
  v5 = a1;
  v6 = a2;
  v7 = sub_100149D84(v4);

  return v7;
}

uint64_t type metadata accessor for REMAlarmCDIngestor()
{
  return objc_opt_self(_TtC7remindd18REMAlarmCDIngestor);
}

_UNKNOWN **sub_10018A874()
{
  return &off_1007E7558;
}

_UNKNOWN **sub_10018A880()
{
  return &off_1007E7528;
}

unint64_t sub_10018A88C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE570, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

void sub_10018A8D4(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;

  if ((a2 & 1) != 0)
  {
    sub_1003F9250(1, *(void **)(v3 + 24), a3);
    if (v4)
      return;
    v9 = v11;
    objc_msgSend(a1, "setReminder:", v11);
    goto LABEL_7;
  }
  sub_1003F9224(0, *(void **)(v3 + 16), a3);
  if (!v4)
  {
    v7 = v6;
    objc_msgSend(a1, "setAccount:", v6);

    v8 = objc_msgSend(a1, "trigger");
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(a1, "account");
      objc_msgSend(v9, "setAccount:", v10);

LABEL_7:
    }
  }
}

uint64_t sub_10018A9BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10083DE80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for REMAlarmCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10018AA48 + 4 * byte_1006ABC4A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10018AA7C + 4 * byte_1006ABC45[v4]))();
}

uint64_t sub_10018AA7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018AA84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018AA8CLL);
  return result;
}

uint64_t sub_10018AA98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018AAA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10018AAA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018AAAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmCDIngestor.RelationshipKey()
{
  return &type metadata for REMAlarmCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMCDTemplateOperationQueueItem.OperationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMAlarmCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10018ABA4 + 4 * byte_1006ABC54[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10018ABD8 + 4 * byte_1006ABC4F[v4]))();
}

uint64_t sub_10018ABD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018ABE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018ABE8);
  return result;
}

uint64_t sub_10018ABF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018ABFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10018AC00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018AC08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmCDIngestor.ValueKey;
}

uint64_t sub_10018AC24()
{
  return sub_1000BAEEC(&qword_10083DE88, &qword_10083DE90);
}

unint64_t sub_10018AC4C()
{
  unint64_t result;

  result = qword_10083DE98;
  if (!qword_10083DE98)
  {
    result = swift_getWitnessTable(&unk_1006ABE68, &type metadata for REMAlarmCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083DE98);
  }
  return result;
}

uint64_t sub_10018AC90()
{
  return sub_1000BAEEC(&qword_10083DEA0, &qword_10083DEA8);
}

unint64_t sub_10018ACB8()
{
  unint64_t result;

  result = qword_10083DEB0;
  if (!qword_10083DEB0)
  {
    result = swift_getWitnessTable(&unk_1006ABF40, &type metadata for REMAlarmCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083DEB0);
  }
  return result;
}

void sub_10018ACFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v39 = a1;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v4 = a2;
    else
      v4 = a2 & 0xFFFFFFFFFFFFFF8;
    v36 = 0;
    v5 = 0;
    v6 = 0;
    v7 = __CocoaDictionary.makeIterator()(v4) | 0x8000000000000000;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a2 + 32);
    v5 = ~v8;
    v36 = a2 + 64;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a2 + 64);
    v7 = a2;
  }
  swift_bridgeObjectRetain(a2);
  v12 = 0;
  v35 = (unint64_t)(v5 + 64) >> 6;
  v33 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((v7 & 0x8000000000000000) == 0)
    goto LABEL_13;
LABEL_33:
  v22 = __CocoaDictionary.Iterator.next()(v11);
  if (!v22)
    goto LABEL_40;
  v24 = v22;
  v25 = v23;
  v37 = v22;
  v26 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  swift_unknownObjectRetain(v24);
  swift_dynamicCast(&v38, &v37, v33, v26, 7);
  v21 = v38;
  swift_unknownObjectRelease(v24);
  v37 = v25;
  v27 = a3(0);
  swift_unknownObjectRetain(v25);
  swift_dynamicCast(&v38, &v37, v33, v27, 7);
  v20 = v38;
  swift_unknownObjectRelease(v25);
  v15 = v12;
  v13 = v6;
  if (!v21)
    goto LABEL_40;
  while (1)
  {
    if (v20[3])
    {
      swift_release(v20);

      v12 = v15;
      v6 = v13;
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_33;
    }
    else
    {
      v28 = v21;
      v29 = swift_retain(v20);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v31 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
      specialized Array._endMutation()(v32);

      v11 = swift_release_n(v20, 2);
      v12 = v15;
      v6 = v13;
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_33;
    }
LABEL_13:
    if (!v6)
      break;
    v13 = (v6 - 1) & v6;
    v14 = __clz(__rbit64(v6)) | (v12 << 6);
    v15 = v12;
LABEL_31:
    v19 = 8 * v14;
    v20 = *(_QWORD **)(*(_QWORD *)(v7 + 56) + v19);
    v21 = *(id *)(*(_QWORD *)(v7 + 48) + v19);
    swift_retain(v20);
    if (!v21)
      goto LABEL_40;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    return;
  }
  if (v16 >= v35)
    goto LABEL_40;
  v17 = *(_QWORD *)(v36 + 8 * v16);
  v15 = v12 + 1;
  if (v17)
    goto LABEL_30;
  v15 = v12 + 2;
  if (v12 + 2 >= v35)
    goto LABEL_40;
  v17 = *(_QWORD *)(v36 + 8 * v15);
  if (v17)
    goto LABEL_30;
  v15 = v12 + 3;
  if (v12 + 3 >= v35)
    goto LABEL_40;
  v17 = *(_QWORD *)(v36 + 8 * v15);
  if (v17)
    goto LABEL_30;
  v15 = v12 + 4;
  if (v12 + 4 >= v35)
    goto LABEL_40;
  v17 = *(_QWORD *)(v36 + 8 * v15);
  if (v17)
    goto LABEL_30;
  v15 = v12 + 5;
  if (v12 + 5 >= v35)
    goto LABEL_40;
  v17 = *(_QWORD *)(v36 + 8 * v15);
  if (v17)
  {
LABEL_30:
    v13 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_31;
  }
  v18 = v12 + 6;
  while (v35 != v18)
  {
    v17 = *(_QWORD *)(v36 + 8 * v18++);
    if (v17)
    {
      v15 = v18 - 1;
      goto LABEL_30;
    }
  }
LABEL_40:
  sub_1000C6560(v7);
}

uint64_t sub_10018B078(Swift::Int a1, unint64_t a2, uint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  char v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v4 = a2;
  if (a2 >> 62)
  {
LABEL_57:
    if (v4 < 0)
      v53 = v4;
    else
      v53 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v6)
      goto LABEL_3;
LABEL_61:
    swift_bridgeObjectRelease(v4);
    return a1;
  }
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v6)
    goto LABEL_61;
LABEL_3:
  v61 = v4 & 0xC000000000000001;
  v7 = 4;
  v58 = v6;
  v56 = v4;
  v57 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    if (v61)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4);
    else
      v8 = *(id *)(v4 + 8 * v7);
    v9 = v8;
    v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v11 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    if ((*(_QWORD *)isUniquelyReferenced_nonNull_native & 0xC000000000000001) == 0)
      break;
    if (v11 >= 0)
      v11 &= 0xFFFFFFFFFFFFFF8uLL;
    v12 = __CocoaDictionary.lookup(_:)(v8, v11);
    if (!v12)
      goto LABEL_4;
    v13 = v12;
    v62 = v12;
    v14 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_unknownObjectRetain(v13);
    swift_dynamicCast(&v63, &v62, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
    v15 = v63;
    swift_unknownObjectRelease(v13);

    if (v15)
      goto LABEL_20;
LABEL_5:

LABEL_6:
    ++v7;
    if (v10 == v6)
      goto LABEL_61;
  }
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_5;
  v16 = sub_1002C66DC((uint64_t)v8);
  if ((v17 & 1) == 0)
  {
LABEL_4:

    goto LABEL_5;
  }
  v15 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v16);

  if (!v15)
    goto LABEL_5;
LABEL_20:
  v18 = v9;
  v19 = v15;
  v20 = sub_1005B99F0(v19);
  v21 = a1 & 0xC000000000000001;
  if (v20)
  {
    v22 = v20;
    v59 = v19;
    if (v21)
    {
      if (a1 < 0)
        v23 = a1;
      else
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      v24 = __CocoaDictionary.count.getter(v23);
      if (__OFADD__(v24, 1))
        goto LABEL_55;
      a1 = sub_100192534(v23, v24 + 1, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v63 = (_QWORD *)a1;
    v26 = sub_1002C66DC((uint64_t)v18);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      goto LABEL_54;
    v4 = v25;
    if (*(_QWORD *)(a1 + 24) >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1002D6140();
    }
    else
    {
      sub_1002CC554(v29, isUniquelyReferenced_nonNull_native);
      v30 = sub_1002C66DC((uint64_t)v18);
      if ((v4 & 1) != (v31 & 1))
        goto LABEL_63;
      v26 = v30;
    }
    isUniquelyReferenced_nonNull_native = v57;
    a1 = (Swift::Int)v63;
    if ((v4 & 1) != 0)
    {
      v41 = v63[7];
      v42 = 8 * v26;
      swift_release(*(_QWORD *)(v41 + v42));
      *(_QWORD *)(v41 + v42) = v22;
    }
    else
    {
      v63[(v26 >> 6) + 8] |= 1 << v26;
      v43 = 8 * v26;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + v43) = v18;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + v43) = v22;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_56;
      *(_QWORD *)(a1 + 16) = v46;
      v47 = v18;
    }

    swift_bridgeObjectRelease(0x8000000000000000);
    v4 = v56;
    goto LABEL_45;
  }
  if (!v21)
  {
    swift_bridgeObjectRetain(a1);
    v48 = sub_1002C66DC((uint64_t)v18);
    v50 = v49;
    swift_bridgeObjectRelease(a1);
    if ((v50 & 1) != 0)
    {
      v51 = swift_isUniquelyReferenced_nonNull_native(a1);
      v63 = (_QWORD *)a1;
      if ((v51 & 1) == 0)
      {
        sub_1002D6140();
        a1 = (Swift::Int)v63;
      }

      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v48);
      sub_100289D74(v48, a1);

      swift_release(v52);
      swift_bridgeObjectRelease(0x8000000000000000);

    }
    else
    {

    }
    goto LABEL_45;
  }
  v60 = v19;
  if (a1 < 0)
    v32 = a1;
  else
    v32 = a1 & 0xFFFFFFFFFFFFFF8;
  v33 = v18;
  swift_bridgeObjectRetain(a1);
  v34 = __CocoaDictionary.lookup(_:)(v33, v32);

  if (!v34)
  {

    swift_bridgeObjectRelease(a1);
LABEL_45:
    v6 = v58;
    goto LABEL_6;
  }
  swift_unknownObjectRelease(v34);
  v35 = __CocoaDictionary.count.getter(v32);
  v36 = sub_100192534(v32, v35, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
  swift_retain(v36);
  v37 = sub_1002C66DC((uint64_t)v33);
  v39 = v38;
  swift_release(v36);
  v6 = v58;
  if ((v39 & 1) != 0)
  {

    v40 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37);
    sub_100289D74(v37, v36);

    swift_release(v40);
    swift_bridgeObjectRelease(a1);
    a1 = v36;
    isUniquelyReferenced_nonNull_native = v57;
    goto LABEL_6;
  }
  __break(1u);
LABEL_63:
  v55 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v55);
  __break(1u);
  return result;
}

uint64_t sub_10018B590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v29 = (unint64_t)&_swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v27 = (unint64_t)(v10 + 63) >> 6;
  v28 = a1;
  result = swift_bridgeObjectRetain(a1);
  v14 = 0;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v28 + 48) + *(_QWORD *)(v3 + 72) * v16, v2);
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    v21 = REMManualOrdering.PinnedList.elementObjectID.getter(v20);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (v21)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(result);
      v23 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      result = specialized Array._endMutation()(v24);
    }
  }
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v17 >= v27)
    goto LABEL_26;
  v18 = *(_QWORD *)(v26 + 8 * v17);
  ++v14;
  if (v18)
    goto LABEL_21;
  v14 = v17 + 1;
  if (v17 + 1 >= v27)
    goto LABEL_26;
  v18 = *(_QWORD *)(v26 + 8 * v14);
  if (v18)
    goto LABEL_21;
  v14 = v17 + 2;
  if (v17 + 2 >= v27)
    goto LABEL_26;
  v18 = *(_QWORD *)(v26 + 8 * v14);
  if (v18)
    goto LABEL_21;
  v14 = v17 + 3;
  if (v17 + 3 >= v27)
    goto LABEL_26;
  v18 = *(_QWORD *)(v26 + 8 * v14);
  if (v18)
  {
LABEL_21:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_22;
  }
  v19 = v17 + 4;
  if (v19 >= v27)
  {
LABEL_26:
    swift_release(v28);
    return v29;
  }
  v18 = *(_QWORD *)(v26 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v27)
      goto LABEL_26;
    v18 = *(_QWORD *)(v26 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10018B820(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  int64_t v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[5];
  unint64_t v41;

  v4 = a1;
  v41 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = sub_1000151B0(0, a2, a3);
    v11 = sub_1000EC524(a4, a2, a3);
    v12 = Set.Iterator.init(_cocoa:)(v40, v9, v10, v11);
    v4 = v40[0];
    v37 = v40[1];
    v13 = v40[2];
    v14 = v40[3];
    v15 = v40[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v37 = a1 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v34 = v13;
  v19 = (unint64_t)(v13 + 64) >> 6;
  while (v4 < 0)
  {
    v23 = __CocoaSet.Iterator.next()(v12);
    if (!v23)
      goto LABEL_39;
    v24 = v23;
    v38 = v23;
    v25 = sub_1000151B0(0, a2, a3);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v26 = v39;
    swift_unknownObjectRelease(v24);
    v22 = v14;
    v20 = v15;
    if (!v26)
      goto LABEL_39;
LABEL_29:
    v29 = objc_msgSend(v26, "remObjectID", v34);

    v14 = v22;
    v15 = v20;
    if (v29)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v31 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      v12 = (_QWORD *)specialized Array._endMutation()(v32);
      v14 = v22;
      v15 = v20;
    }
  }
  if (v15)
  {
    v20 = (v15 - 1) & v15;
    v21 = __clz(__rbit64(v15)) | (v14 << 6);
    v22 = v14;
LABEL_28:
    v26 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v21);
    if (!v26)
      goto LABEL_39;
    goto LABEL_29;
  }
  v22 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v22 >= v19)
      goto LABEL_39;
    v27 = *(_QWORD *)(v37 + 8 * v22);
    if (!v27)
    {
      v28 = v14 + 2;
      if (v14 + 2 >= v19)
        goto LABEL_39;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_26;
      v28 = v14 + 3;
      if (v14 + 3 >= v19)
        goto LABEL_39;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_26;
      v28 = v14 + 4;
      if (v14 + 4 >= v19)
        goto LABEL_39;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
      {
LABEL_26:
        v22 = v28;
      }
      else
      {
        v22 = v14 + 5;
        if (v14 + 5 >= v19)
          goto LABEL_39;
        v27 = *(_QWORD *)(v37 + 8 * v22);
        if (!v27)
        {
          v33 = v14 + 6;
          while (v19 != v33)
          {
            v27 = *(_QWORD *)(v37 + 8 * v33++);
            if (v27)
            {
              v22 = v33 - 1;
              goto LABEL_27;
            }
          }
LABEL_39:
          sub_1000C6560(v4);
          return;
        }
      }
    }
LABEL_27:
    v20 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v22 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

void sub_10018BB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  char isEscapingClosureAtFileLocation;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void **aBlock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  uint64_t (*v68)();
  _QWORD *v69;

  v2 = v1;
  v4 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018B820(a1, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0);
  v10 = v9;
  sub_10011F104(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  v13 = sub_10018CBD8(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(a1);
  v17 = (void *)sub_10027B7AC(v16);
  *(_QWORD *)&v18 = swift_bridgeObjectRelease(a1).n128_u64[0];
  if (!v17
    || (v19 = objc_msgSend(v17, "managedObjectContext", v18), v17,
                                                                                                  !v19))
  {
    swift_bridgeObjectRelease(v15);
    return;
  }
  v20 = swift_allocObject(&unk_1007E77D0, 24, 7);
  v57 = v20;
  *(_QWORD *)(v20 + 16) = &_swiftEmptyDictionarySingleton;
  v58 = v20 + 16;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v13);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v13, type metadata accessor for RDElementManualSortID);
  v22 = v21;
  swift_bridgeObjectRelease(v13);
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (!((unint64_t)v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v15 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_19:
    v52 = *(_QWORD *)(v15 + 16);
    v26 = __OFADD__(v23, v52);
    v27 = v23 + v52;
    if (!v26)
      goto LABEL_9;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v23 < 0)
      v53 = v23;
    else
      v53 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v23);
    if (v54)
      goto LABEL_11;
LABEL_26:
    swift_bridgeObjectRelease(v15);
    swift_release(v57);
    swift_bridgeObjectRelease(v23);

    return;
  }
  if (v22 < 0)
    v51 = v22;
  else
    v51 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v23 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease(v22);
  if ((v15 & 0xC000000000000001) == 0)
    goto LABEL_19;
LABEL_5:
  if (v15 < 0)
    v24 = v15;
  else
    v24 = v15 & 0xFFFFFFFFFFFFFF8;
  v25 = __CocoaSet.count.getter(v24);
  v26 = __OFADD__(v23, v25);
  v27 = v23 + v25;
  if (v26)
    goto LABEL_21;
LABEL_9:
  v28 = sub_10019121C(v27, 0);
  specialized Array._endMutation()(v28);
  swift_bridgeObjectRetain(v15);
  sub_1001E0B64(v29);
  swift_bridgeObjectRetain(v22);
  sub_1001E0B58(v30);
  v23 = (uint64_t)aBlock;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  if ((unint64_t)v23 >> 62)
    goto LABEL_22;
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_11:
  v55 = 0;
  v56 = v4;
  v31 = (_QWORD *)swift_allocObject(&unk_1007E7B40, 48, 7);
  v31[2] = a1;
  v31[3] = v23;
  v31[4] = v58;
  v31[5] = v2;
  v32 = swift_allocObject(&unk_1007E7B68, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_100197440;
  *(_QWORD *)(v32 + 24) = v31;
  v68 = sub_1000A66B8;
  v69 = (_QWORD *)v32;
  aBlock = _NSConcreteStackBlock;
  v65 = 1107296256;
  v66 = sub_1000098C4;
  v67 = &unk_1007E7B80;
  v33 = _Block_copy(&aBlock);
  v34 = v19;
  v35 = v69;
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  swift_retain(v32);
  v36 = v35;
  v37 = v34;
  swift_release(v36);
  objc_msgSend(v34, "performBlockAndWait:", v33);
  _Block_release(v33);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 117, 131, 49, 1);
  swift_release(v32);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v39 = *(_QWORD *)(v2 + 24);
    v40 = v57;
    v41 = swift_retain(v57);
    static DispatchWorkItemFlags.barrier.getter(v41);
    v42 = swift_allocObject(&unk_1007E7870, 24, 7);
    swift_weakInit(v42 + 16, v39);
    v43 = (_QWORD *)swift_allocObject(&unk_1007E7BB8, 40, 7);
    v43[2] = v42;
    v43[3] = sub_100195284;
    v43[4] = v40;
    v68 = sub_1001975FC;
    v69 = v43;
    aBlock = _NSConcreteStackBlock;
    v65 = 1107296256;
    v66 = sub_1000094C8;
    v67 = &unk_1007E7BD0;
    v44 = _Block_copy(&aBlock);
    swift_retain(v42);
    v45 = swift_retain(v40);
    v46 = v61;
    static DispatchQoS.unspecified.getter(v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v8, v44);
    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v56);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v60);
    v47 = v69;
    swift_release(v40);
    swift_release(v42);
    swift_release(v47);
    swift_beginAccess(v58, &aBlock, 0, 0);
    v48 = *(_QWORD *)(v40 + 16);
    v63 = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v48);
    v49 = v55;
    sub_1001940E8(v50, (int64_t)sub_1001975B4, 0, &v63, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
    if (!v49)
    {
      swift_release(v31);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v13);

      swift_release(v40);
      return;
    }
  }
  swift_bridgeObjectRelease(v63);
  __break(1u);
}

uint64_t sub_10018C0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083DEB8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083DEB8);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10018C174(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v4 = v3;
  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_BYTE *)(v3 + 32) = a3 & 1;
  v7 = qword_100836E30;
  swift_retain(a1);
  swift_retain(a2);
  if (v7 != -1)
    swift_once(&qword_100836E30, sub_10018C0E4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_10083DEB8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDManualSortIDAdapter > initialized", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  swift_release(a1);
  swift_release(a2);

  return v4;
}

void sub_10018C280(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *ObjCClassFromMetadata;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  __n128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;

  v4 = v3;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v51 = a3;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(v14 + 24);
    if (!v15)
    {
LABEL_5:
      v18 = (void *)objc_opt_self(REMError);
      v49 = 0;
      v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(143);
      v19._object = (void *)0x80000001006FAFD0;
      v19._countAndFlagsBits = 0xD000000000000024;
      String.append(_:)(v19);
      v48 = *(_OWORD *)(v14 + 16);
      v20 = sub_10001A630((uint64_t *)&unk_10083A370);
      v21._countAndFlagsBits = Optional.descriptionOrNil.getter(v20);
      object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      v23._countAndFlagsBits = 0xD000000000000069;
      v23._object = (void *)0x80000001006FB000;
      String.append(_:)(v23);
      v24 = v50;
      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(v18, "internalErrorWithDebugDescription:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

      swift_willThrow(v26);
      return;
    }
    v16 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v14 + 24));
    UUID.init(uuidString:)(v16, v15);
    v17 = swift_bridgeObjectRelease(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v9, 1, v10, v17) == 1)
    {
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      goto LABEL_5;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v29 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v29);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

    v33 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v34 = swift_allocObject(v33, 40, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v34 + 32) = v32;
    v49 = v34;
    specialized Array._endMutation()(v34);
    v35 = v49;
    v36 = v32;
    sub_10034B07C(v35, 0, 6);
    v28 = v37;

    v38 = swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v38);
    a3 = v51;
  }
  else
  {
    sub_10034B07C(7, 0, 7);
    v28 = v27;
  }
  if (qword_1008375C0 != -1)
    swift_once(&qword_1008375C0, sub_10048FB40);
  v39 = (void *)sub_100357FC0(qword_100871F58, 0, 0, (uint64_t)v28);
  v40 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v41 = NSManagedObjectContext.fetch<A>(_:)(v39, v40);
  if (v4)
  {

  }
  else
  {
    v42 = v41;
    sub_10011F55C(v41);
    v44 = v43;
    swift_bridgeObjectRelease(v42);
    sub_10018C640(v44);
    v46 = v45;

    swift_bridgeObjectRelease(v44);
    v47 = *a3;
    *a3 = v46;
    swift_bridgeObjectRelease(v47);
  }
}

void sub_10018C640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  char isEscapingClosureAtFileLocation;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void **aBlock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  uint64_t (*v68)();
  _QWORD *v69;

  v2 = v1;
  v4 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018B820(a1, &qword_10083AA30, off_1007D6658, &qword_10083B520);
  v10 = v9;
  sub_10011F104(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  v13 = sub_10018DC00(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(a1);
  v17 = (void *)sub_10027B8EC(v16);
  *(_QWORD *)&v18 = swift_bridgeObjectRelease(a1).n128_u64[0];
  if (!v17
    || (v19 = objc_msgSend(v17, "managedObjectContext", v18), v17,
                                                                                                  !v19))
  {
    swift_bridgeObjectRelease(v15);
    return;
  }
  v20 = swift_allocObject(&unk_1007E78E8, 24, 7);
  v57 = v20;
  *(_QWORD *)(v20 + 16) = &_swiftEmptyDictionarySingleton;
  v58 = v20 + 16;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v13);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v13, type metadata accessor for RDAccountManualSortID);
  v22 = v21;
  swift_bridgeObjectRelease(v13);
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (!((unint64_t)v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v15 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_19:
    v52 = *(_QWORD *)(v15 + 16);
    v26 = __OFADD__(v23, v52);
    v27 = v23 + v52;
    if (!v26)
      goto LABEL_9;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v23 < 0)
      v53 = v23;
    else
      v53 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v23);
    if (v54)
      goto LABEL_11;
LABEL_26:
    swift_bridgeObjectRelease(v15);
    swift_release(v57);
    swift_bridgeObjectRelease(v23);

    return;
  }
  if (v22 < 0)
    v51 = v22;
  else
    v51 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v23 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease(v22);
  if ((v15 & 0xC000000000000001) == 0)
    goto LABEL_19;
LABEL_5:
  if (v15 < 0)
    v24 = v15;
  else
    v24 = v15 & 0xFFFFFFFFFFFFFF8;
  v25 = __CocoaSet.count.getter(v24);
  v26 = __OFADD__(v23, v25);
  v27 = v23 + v25;
  if (v26)
    goto LABEL_21;
LABEL_9:
  v28 = sub_10019121C(v27, 0);
  specialized Array._endMutation()(v28);
  swift_bridgeObjectRetain(v15);
  sub_1001E0B64(v29);
  swift_bridgeObjectRetain(v22);
  sub_1001E0B58(v30);
  v23 = (uint64_t)aBlock;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  if ((unint64_t)v23 >> 62)
    goto LABEL_22;
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_11:
  v55 = 0;
  v56 = v4;
  v31 = (_QWORD *)swift_allocObject(&unk_1007E7910, 48, 7);
  v31[2] = a1;
  v31[3] = v23;
  v31[4] = v58;
  v31[5] = v2;
  v32 = swift_allocObject(&unk_1007E7938, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1001952F8;
  *(_QWORD *)(v32 + 24) = v31;
  v68 = sub_1000A66B8;
  v69 = (_QWORD *)v32;
  aBlock = _NSConcreteStackBlock;
  v65 = 1107296256;
  v66 = sub_1000098C4;
  v67 = &unk_1007E7950;
  v33 = _Block_copy(&aBlock);
  v34 = v19;
  v35 = v69;
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  swift_retain(v32);
  v36 = v35;
  v37 = v34;
  swift_release(v36);
  objc_msgSend(v34, "performBlockAndWait:", v33);
  _Block_release(v33);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 117, 468, 49, 1);
  swift_release(v32);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v39 = *(_QWORD *)(v2 + 24);
    v40 = v57;
    v41 = swift_retain(v57);
    static DispatchWorkItemFlags.barrier.getter(v41);
    v42 = swift_allocObject(&unk_1007E7870, 24, 7);
    swift_weakInit(v42 + 16, v39);
    v43 = (_QWORD *)swift_allocObject(&unk_1007E7988, 40, 7);
    v43[2] = v42;
    v43[3] = sub_100195314;
    v43[4] = v40;
    v68 = sub_1001975FC;
    v69 = v43;
    aBlock = _NSConcreteStackBlock;
    v65 = 1107296256;
    v66 = sub_1000094C8;
    v67 = &unk_1007E79A0;
    v44 = _Block_copy(&aBlock);
    swift_retain(v42);
    v45 = swift_retain(v40);
    v46 = v61;
    static DispatchQoS.unspecified.getter(v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v8, v44);
    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v56);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v60);
    v47 = v69;
    swift_release(v40);
    swift_release(v42);
    swift_release(v47);
    swift_beginAccess(v58, &aBlock, 0, 0);
    v48 = *(_QWORD *)(v40 + 16);
    v63 = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v48);
    v49 = v55;
    sub_1001940E8(v50, (int64_t)sub_100194520, 0, &v63, type metadata accessor for RDAccountManualSortID, (void (*)(void))sub_1002D7DE0, (void (*)(unint64_t, uint64_t))sub_1002D035C, &qword_10083DF90);
    if (!v49)
    {
      swift_release(v31);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v13);

      swift_release(v40);
      return;
    }
  }
  swift_bridgeObjectRelease(v63);
  __break(1u);
}

uint64_t sub_10018CBD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *queue;
  char v16[24];
  _QWORD aBlock[5];
  uint64_t v18;

  v3 = swift_allocObject(&unk_1007E77D0, 24, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  v4 = swift_allocObject(&unk_1007E79D8, 24, 7);
  *(_QWORD *)(v4 + 16) = &_swiftEmptySetSingleton;
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_allocObject(&unk_1007E7AA0, 40, 7);
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  queue = *(NSObject **)(v5 + 16);
  v7 = swift_allocObject(&unk_1007E7870, 24, 7);
  swift_weakInit(v7 + 16, v5);
  v8 = (_QWORD *)swift_allocObject(&unk_1007E7AC8, 40, 7);
  v8[2] = v7;
  v8[3] = sub_10019701C;
  v8[4] = v6;
  v9 = swift_allocObject(&unk_1007E7AF0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100197600;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_1000A66B8;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007E7B08;
  v10 = _Block_copy(aBlock);
  v11 = v18;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(queue, v10);
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v9, "", 115, 69, 29, 1);
  swift_release(v6);
  swift_release(v8);
  result = swift_release(v9);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess(v3 + 16, aBlock, 0, 0);
    v13 = *(_QWORD *)(v3 + 16);
    swift_beginAccess(v4 + 16, v16, 0, 0);
    v14 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_release(v3);
    swift_release(v4);
    return v13;
  }
  return result;
}

double sub_10018CE30(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  Swift::Int v14;

  v14 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(a2);
  sub_100194548(a1, a2, &v14);
  swift_bridgeObjectRelease(a2);
  v8 = sub_1002AF5D8((uint64_t)_swiftEmptyArrayStorage);
  swift_retain(a4);
  v9 = sub_100195F14(v8, a2, (uint64_t)&v14, a4);
  swift_release(a4);
  v10 = *a3;
  *a3 = v9;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  sub_10018C640(v11);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

uint64_t sub_10018CF18(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t aBlock[5];
  _QWORD *v53;

  v48 = a2;
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10018B590(a1);
  sub_10011F104(v11);
  v13 = v12;
  swift_bridgeObjectRelease(v11);
  v49 = v2;
  v14 = sub_10018CBD8(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v14);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v14, type metadata accessor for RDElementManualSortID);
  v18 = v17;
  swift_bridgeObjectRelease(v14);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v16 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_14:
    v43 = *(_QWORD *)(v16 + 16);
    v22 = __OFADD__(v19, v43);
    v23 = v19 + v43;
    if (!v22)
      goto LABEL_7;
LABEL_16:
    __break(1u);
LABEL_17:
    if (v19 < 0)
      v44 = v19;
    else
      v44 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v19);
    if (v45)
      goto LABEL_9;
LABEL_21:
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v19);
    return v14;
  }
  if (v18 < 0)
    v42 = v18;
  else
    v42 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v19 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v18);
  if ((v16 & 0xC000000000000001) == 0)
    goto LABEL_14;
LABEL_3:
  if (v16 < 0)
    v20 = v16;
  else
    v20 = v16 & 0xFFFFFFFFFFFFFF8;
  v21 = __CocoaSet.count.getter(v20);
  v22 = __OFADD__(v19, v21);
  v23 = v19 + v21;
  if (v22)
    goto LABEL_16;
LABEL_7:
  v24 = sub_10019121C(v23, 0);
  specialized Array._endMutation()(v24);
  swift_bridgeObjectRetain(v16);
  sub_1001E0B64(v25);
  swift_bridgeObjectRetain(v18);
  sub_1001E0B58(v26);
  v19 = aBlock[0];
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v18);
  if ((unint64_t)v19 >> 62)
    goto LABEL_17;
  if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_21;
LABEL_9:
  v27 = sub_1002AF440((uint64_t)_swiftEmptyArrayStorage);
  v47 = v4;
  v28 = (_QWORD *)v27;
  swift_bridgeObjectRetain(v19);
  v29 = sub_100195358(v28, a1, v19);
  swift_bridgeObjectRelease(v19);
  v30 = sub_1002AF5D8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v29);
  v31 = v48;
  v48 = v5;
  v32 = v31;
  v33 = sub_1001958D4(v30, v19, v29, v31);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease_n(v29, 2);

  v34 = *(_QWORD *)(v49 + 24);
  v35 = swift_allocObject(&unk_1007E7C08, 24, 7);
  *(_QWORD *)(v35 + 16) = v33;
  swift_bridgeObjectRetain(v33);
  static DispatchWorkItemFlags.barrier.getter(v36);
  v37 = swift_allocObject(&unk_1007E7870, 24, 7);
  swift_weakInit(v37 + 16, v34);
  v38 = (_QWORD *)swift_allocObject(&unk_1007E7C30, 40, 7);
  v38[2] = v37;
  v38[3] = sub_1001974A8;
  v38[4] = v35;
  aBlock[4] = (uint64_t)sub_1001975FC;
  v53 = v38;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E7C48;
  v39 = _Block_copy(aBlock);
  swift_retain(v37);
  v40 = swift_retain(v35);
  static DispatchQoS.unspecified.getter(v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v10, v39);
  _Block_release(v39);
  (*((void (**)(char *, uint64_t))v48 + 1))(v7, v47);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v51);
  v41 = v53;
  swift_release(v35);
  swift_release(v37);
  swift_release(v41);
  aBlock[0] = v14;
  swift_bridgeObjectRetain(v14);
  sub_1001940E8(v33, (int64_t)sub_1001975B4, 0, aBlock, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v14);
  return aBlock[0];
}

void sub_10018D378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  char isEscapingClosureAtFileLocation;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void **aBlock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  uint64_t (*v68)();
  _QWORD *v69;

  v2 = v1;
  v4 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018B820(a1, (unint64_t *)&unk_10083ADB0, off_1007D66F0, &qword_10083B528);
  v10 = v9;
  sub_10011F104(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  v13 = sub_10018CBD8(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(a1);
  v17 = (void *)sub_10027B7C0(v16);
  *(_QWORD *)&v18 = swift_bridgeObjectRelease(a1).n128_u64[0];
  if (!v17
    || (v19 = objc_msgSend(v17, "managedObjectContext", v18), v17,
                                                                                                  !v19))
  {
    swift_bridgeObjectRelease(v15);
    return;
  }
  v20 = swift_allocObject(&unk_1007E77D0, 24, 7);
  v57 = v20;
  *(_QWORD *)(v20 + 16) = &_swiftEmptyDictionarySingleton;
  v58 = v20 + 16;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v13);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v13, type metadata accessor for RDElementManualSortID);
  v22 = v21;
  swift_bridgeObjectRelease(v13);
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (!((unint64_t)v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v15 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_19:
    v52 = *(_QWORD *)(v15 + 16);
    v26 = __OFADD__(v23, v52);
    v27 = v23 + v52;
    if (!v26)
      goto LABEL_9;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v23 < 0)
      v53 = v23;
    else
      v53 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v23);
    if (v54)
      goto LABEL_11;
LABEL_26:
    swift_bridgeObjectRelease(v15);
    swift_release(v57);
    swift_bridgeObjectRelease(v23);

    return;
  }
  if (v22 < 0)
    v51 = v22;
  else
    v51 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v23 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease(v22);
  if ((v15 & 0xC000000000000001) == 0)
    goto LABEL_19;
LABEL_5:
  if (v15 < 0)
    v24 = v15;
  else
    v24 = v15 & 0xFFFFFFFFFFFFFF8;
  v25 = __CocoaSet.count.getter(v24);
  v26 = __OFADD__(v23, v25);
  v27 = v23 + v25;
  if (v26)
    goto LABEL_21;
LABEL_9:
  v28 = sub_10019121C(v27, 0);
  specialized Array._endMutation()(v28);
  swift_bridgeObjectRetain(v15);
  sub_1001E0B64(v29);
  swift_bridgeObjectRetain(v22);
  sub_1001E0B58(v30);
  v23 = (uint64_t)aBlock;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  if ((unint64_t)v23 >> 62)
    goto LABEL_22;
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_11:
  v55 = 0;
  v56 = v4;
  v31 = (_QWORD *)swift_allocObject(&unk_1007E77F8, 48, 7);
  v31[2] = a1;
  v31[3] = v23;
  v31[4] = v58;
  v31[5] = v2;
  v32 = swift_allocObject(&unk_1007E7820, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_100195268;
  *(_QWORD *)(v32 + 24) = v31;
  v68 = sub_1000098E4;
  v69 = (_QWORD *)v32;
  aBlock = _NSConcreteStackBlock;
  v65 = 1107296256;
  v66 = sub_1000098C4;
  v67 = &unk_1007E7838;
  v33 = _Block_copy(&aBlock);
  v34 = v19;
  v35 = v69;
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  swift_retain(v32);
  v36 = v35;
  v37 = v34;
  swift_release(v36);
  objc_msgSend(v34, "performBlockAndWait:", v33);
  _Block_release(v33);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 117, 515, 49, 1);
  swift_release(v32);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v39 = *(_QWORD *)(v2 + 24);
    v40 = v57;
    v41 = swift_retain(v57);
    static DispatchWorkItemFlags.barrier.getter(v41);
    v42 = swift_allocObject(&unk_1007E7870, 24, 7);
    swift_weakInit(v42 + 16, v39);
    v43 = (_QWORD *)swift_allocObject(&unk_1007E7898, 40, 7);
    v43[2] = v42;
    v43[3] = sub_100195284;
    v43[4] = v40;
    v68 = sub_1001952D4;
    v69 = v43;
    aBlock = _NSConcreteStackBlock;
    v65 = 1107296256;
    v66 = sub_1000094C8;
    v67 = &unk_1007E78B0;
    v44 = _Block_copy(&aBlock);
    swift_retain(v42);
    v45 = swift_retain(v40);
    v46 = v61;
    static DispatchQoS.unspecified.getter(v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v8, v44);
    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v56);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v60);
    v47 = v69;
    swift_release(v40);
    swift_release(v42);
    swift_release(v47);
    swift_beginAccess(v58, &aBlock, 0, 0);
    v48 = *(_QWORD *)(v40 + 16);
    v63 = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v48);
    v49 = v55;
    sub_1001940E8(v50, (int64_t)sub_1001975B4, 0, &v63, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
    if (!v49)
    {
      swift_release(v31);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v13);

      swift_release(v40);
      return;
    }
  }
  swift_bridgeObjectRelease(v63);
  __break(1u);
}

uint64_t sub_10018D910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v2 = v1;
  v3 = sub_10018DC00(a1);
  v5 = v4;
  v33 = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v3, type metadata accessor for RDAccountManualSortID);
  v7 = v6;
  if (!((unint64_t)v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v5 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_19:
    v29 = *(_QWORD *)(v5 + 16);
    v11 = __OFADD__(v8, v29);
    v12 = v8 + v29;
    if (!v11)
      goto LABEL_7;
LABEL_21:
    __break(1u);
LABEL_22:
    if (v8 < 0)
      v30 = v8;
    else
      v30 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v8);
    if (v31)
    {
      swift_bridgeObjectRelease(v5);
      v16 = (uint64_t)sub_1001E9A38(v8);
      goto LABEL_10;
    }
LABEL_27:
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
    return v3;
  }
  if (v6 < 0)
    v28 = v6;
  else
    v28 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v8 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v7);
  if ((v5 & 0xC000000000000001) == 0)
    goto LABEL_19;
LABEL_3:
  if (v5 < 0)
    v9 = v5;
  else
    v9 = v5 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaSet.count.getter(v9);
  v11 = __OFADD__(v8, v10);
  v12 = v8 + v10;
  if (v11)
    goto LABEL_21;
LABEL_7:
  v13 = sub_10019121C(v12, 0);
  specialized Array._endMutation()(v13);
  swift_bridgeObjectRetain(v5);
  sub_1001E0B64(v14);
  swift_bridgeObjectRetain(v7);
  sub_1001E0B58(v15);
  v8 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_22;
  v16 = (unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease(v3);
  if (!v17)
    goto LABEL_27;
  v8 = v5;
LABEL_10:
  swift_bridgeObjectRelease(v8);
  sub_10034B07C(v16, 0, 1);
  v19 = v18;
  swift_release(v16);
  if (qword_1008375C0 != -1)
    swift_once(&qword_1008375C0, sub_10048FB40);
  v20 = (void *)sub_100357FC0(qword_100871F58, 0, 0, (uint64_t)v19);

  v21 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v22 = NSManagedObjectContext.fetch<A>(_:)(v20, v21);
  if (v2)
  {

    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v23 = v22;
    sub_10011F55C(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v23);
    sub_10018C640(v25);
    v27 = v26;
    swift_bridgeObjectRelease(v25);
    sub_1001940E8(v27, (int64_t)sub_100194520, 0, &v33, type metadata accessor for RDAccountManualSortID, (void (*)(void))sub_1002D7DE0, (void (*)(unint64_t, uint64_t))sub_1002D035C, &qword_10083DF90);

    return v33;
  }
  return v3;
}

uint64_t sub_10018DC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *queue;
  char v16[24];
  _QWORD aBlock[5];
  uint64_t v18;

  v3 = swift_allocObject(&unk_1007E78E8, 24, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  v4 = swift_allocObject(&unk_1007E79D8, 24, 7);
  *(_QWORD *)(v4 + 16) = &_swiftEmptySetSingleton;
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_allocObject(&unk_1007E7A00, 40, 7);
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  queue = *(NSObject **)(v5 + 16);
  v7 = swift_allocObject(&unk_1007E7870, 24, 7);
  swift_weakInit(v7 + 16, v5);
  v8 = (_QWORD *)swift_allocObject(&unk_1007E7A28, 40, 7);
  v8[2] = v7;
  v8[3] = sub_100196F9C;
  v8[4] = v6;
  v9 = swift_allocObject(&unk_1007E7A50, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100196FAC;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_1000A66B8;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007E7A68;
  v10 = _Block_copy(aBlock);
  v11 = v18;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(queue, v10);
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v9, "", 115, 69, 29, 1);
  swift_release(v6);
  swift_release(v8);
  result = swift_release(v9);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess(v3 + 16, aBlock, 0, 0);
    v13 = *(_QWORD *)(v3 + 16);
    swift_beginAccess(v4 + 16, v16, 0, 0);
    v14 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_release(v3);
    swift_release(v4);
    return v13;
  }
  return result;
}

uint64_t sub_10018DE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = v4;
  v7 = sub_10018CBD8(a1);
  v9 = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  sub_10018ACFC((uint64_t)_swiftEmptyArrayStorage, v7, type metadata accessor for RDElementManualSortID);
  v11 = v10;
  if (!((unint64_t)v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v9 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_15:
    v22 = *(_QWORD *)(v9 + 16);
    v15 = __OFADD__(v12, v22);
    v16 = v12 + v22;
    if (!v15)
      goto LABEL_7;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a4 < 0)
      v23 = a4;
    else
      v23 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(a4);
    if (v24)
      goto LABEL_9;
LABEL_22:
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  if (v10 < 0)
    v21 = v10;
  else
    v21 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v12 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v11);
  if ((v9 & 0xC000000000000001) == 0)
    goto LABEL_15;
LABEL_3:
  if (v9 < 0)
    v13 = v9;
  else
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
  v14 = __CocoaSet.count.getter(v13);
  v15 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  if (v15)
    goto LABEL_17;
LABEL_7:
  v17 = sub_10019121C(v16, 0);
  specialized Array._endMutation()(v17);
  swift_bridgeObjectRetain(v9);
  sub_1001E0B64(v18);
  swift_bridgeObjectRetain(v11);
  sub_1001E0B58(v19);
  a4 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_18;
  if (!*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_22;
LABEL_9:
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  __chkstk_darwin(v20);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1001970A4);
  swift_bridgeObjectRelease(a4);
  if (v5)
    swift_bridgeObjectRelease(v7);
  return v7;
}

void sub_10018E090(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t m;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  _QWORD *v31;
  objc_class *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  objc_class *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  void *v63;
  uint64_t i;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  objc_class *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  int64_t v131;
  int64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  objc_class *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  int64_t v177;
  int64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  void *v183;
  uint64_t v184;
  id v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  __n128 v192;
  uint64_t v193;
  char *v194;
  _QWORD *v195;
  __n128 v196;
  uint64_t v197;
  char *v198;
  void *v199;
  void (*v200)(char *, unint64_t, unint64_t);
  id v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  objc_class *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  char *v213;
  uint64_t v214;
  objc_class *v215;
  uint64_t v216;
  objc_class *v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  void *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t k;
  uint64_t v233;
  id v234;
  void *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  char *v249;
  _QWORD *v250;
  _QWORD *v251;
  void (*v252)(char *, char *, _QWORD *);
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  id v263;
  char *v264;
  _QWORD *v265;
  _QWORD *v266;
  void (*v267)(char *, char *, _QWORD *);
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  int64_t v277;
  Swift::String v278;
  Swift::String v279;
  Swift::String v280;
  uint64_t *v281;
  Swift::String v282;
  uint64_t v283;
  void *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  void (*v293)(unint64_t, _QWORD, unint64_t, __n128);
  id v294;
  unint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  char *v299;
  _QWORD *v300;
  objc_class *v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  _QWORD *v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  unint64_t v309;

  v302 = a5;
  v303 = a6;
  v304 = a4;
  v305 = a3;
  v287 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v287);
  v288 = (char *)&v284 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v289);
  v290 = (char *)&v284 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v11 = *(objc_class **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v296 = (char *)&v284 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v291 = (char *)&v284 - v15;
  v16 = __chkstk_darwin(v14);
  v297 = (char *)&v284 - v17;
  v18 = __chkstk_darwin(v16);
  v292 = (char *)&v284 - v19;
  v20 = __chkstk_darwin(v18);
  v299 = (char *)&v284 - v21;
  __chkstk_darwin(v20);
  v23 = (unint64_t)&v284 - v22;
  v306 = _s10PredicatesOMa(0);
  __chkstk_darwin(v306);
  m = (uint64_t)&v284 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for REMManualOrdering.ElementType(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v284 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, unint64_t))(v27 + 16))(v29, a1, v26);
  v30 = (*(uint64_t (**)(char *, unint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for REMManualOrdering.ElementType.reminders(_:))
  {
    if (a2 < 0 || (a2 & 0x4000000000000000) != 0)
      goto LABEL_277;
    v31 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(a2);
LABEL_5:
    v32 = v301;
    v33 = v305;
    v307 = v31;
    v34 = sub_10001A630(&qword_10083DFA8);
    v35 = sub_1001970C4();
    v36 = (_QWORD *)BidirectionalCollection<>.slices(by:)(v33, v34, v35);
    swift_release(v31);
    v305 = (_QWORD *)v36[2];
    if (!v305)
      goto LABEL_255;
    v300 = v36;
    v301 = (objc_class *)(v36 + 4);
    swift_bridgeObjectRetain(v36);
    v37 = 0;
    while (1)
    {
      v41 = (uint64_t *)((char *)v301 + 32 * (_QWORD)v37);
      v43 = *v41;
      v42 = v41[1];
      a2 = v41[2];
      v44 = v41[3];
      if ((v44 & 1) == 0)
        break;
      v46 = v32;
      v47 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v48 = swift_unknownObjectRetain_n(v43, 4);
      v49 = (_QWORD *)swift_dynamicCastClass(v48, v47);
      if (!v49)
      {
        swift_unknownObjectRelease(v43);
        v49 = _swiftEmptyArrayStorage;
      }
      v50 = v49[2];
      swift_release(v49);
      if (__OFSUB__(v44 >> 1, a2))
        goto LABEL_275;
      if (v50 != (v44 >> 1) - a2)
      {
        swift_unknownObjectRelease(v43);
        v32 = v46;
        goto LABEL_11;
      }
      v45 = (_QWORD *)swift_dynamicCastClass(v43, v47);
      v32 = v46;
      if (!v45)
      {
        swift_unknownObjectRelease(v43);
        v45 = _swiftEmptyArrayStorage;
      }
LABEL_18:
      swift_unknownObjectRelease(v43);
      *(_QWORD *)m = v45;
      *(_BYTE *)(m + 8) = 0;
      swift_storeEnumTagMultiPayload(m, v306, 0);
      sub_10000D2C0();
      v52 = v51;
      sub_10001C744(m, _s10PredicatesOMa);
      if (qword_100837968 != -1)
        swift_once(&qword_100837968, sub_1005B8CF0);
      v53 = qword_1008722D8;
      if (qword_100837970 != -1)
        swift_once(&qword_100837970, sub_1005B8DA4);
      a2 = sub_100358798(v53, qword_1008722E0, 0, (uint64_t)v52);

      v54 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v55 = NSManagedObjectContext.fetch<A>(_:)(a2, v54);
      if (v32)
      {
        swift_bridgeObjectRelease_n(v300, 2);
        swift_unknownObjectRelease(v43);

        return;
      }
      v56 = v55;
      v57 = (unint64_t)v55 >> 62;
      if ((unint64_t)v55 >> 62)
      {
        if (v55 < 0)
          v66 = v55;
        else
          v66 = v55 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v55);
        v58 = _CocoaArrayWrapper.endIndex.getter(v66);
        swift_bridgeObjectRelease(v56);
      }
      else
      {
        v58 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v59 = sub_1000EC524((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v307 = (_QWORD *)Set.init(minimumCapacity:)(v58, v54, v59);
      if (v57)
      {
        if (v56 < 0)
          v61 = v56;
        else
          v61 = v56 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v56);
        v60 = _CocoaArrayWrapper.endIndex.getter(v61);
        swift_bridgeObjectRelease(v56);
        v32 = 0;
        if (!v60)
          goto LABEL_7;
      }
      else
      {
        v60 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
        v32 = 0;
        if (!v60)
          goto LABEL_7;
      }
      if (v60 < 1)
      {
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        swift_bridgeObjectRetain(a2);
        v31 = sub_1001E9A38(v241);
        swift_bridgeObjectRelease(a2);
        goto LABEL_5;
      }
      if ((v56 & 0xC000000000000001) == 0)
      {
        for (i = 0; i != v60; ++i)
        {
          v65 = *(void **)(v56 + 8 * i + 32);
          sub_1002DB2E8((Swift::Int *)&v309, v65);

        }
        swift_bridgeObjectRelease(v56);
        v32 = 0;
        goto LABEL_8;
      }
      for (j = 0; j != v60; ++j)
      {
        v63 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v56);
        sub_1002DB2E8((Swift::Int *)&v309, v63);

      }
LABEL_7:
      swift_bridgeObjectRelease(v56);
LABEL_8:
      v37 = (_QWORD *)((char *)v37 + 1);
      v38 = v307;
      sub_10018BB4C((uint64_t)v307);
      v40 = v39;
      swift_bridgeObjectRelease(v38);
      sub_1001940E8(v40, (int64_t)sub_1001975B4, 0, v303, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
      swift_unknownObjectRelease(v43);

      if (v37 == v305)
      {
        v133 = v300;
        goto LABEL_215;
      }
    }
    swift_unknownObjectRetain_n(*v41, 2);
LABEL_11:
    v45 = sub_1001E9C6C(v43, v42, a2, v44);
    goto LABEL_18;
  }
  v306 = a2;
  if (v30 != enum case for REMManualOrdering.ElementType.pinnedLists(_:))
  {
    v84 = (uint64_t)v301;
    v85 = v306;
    if (v30 == enum case for REMManualOrdering.ElementType.templates(_:))
    {
      if ((v306 & 0x8000000000000000) != 0 || (v306 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v306);
        v86 = sub_1001E9A38(v243);
        swift_bridgeObjectRelease(v85);
      }
      else
      {
        v86 = (_QWORD *)(v306 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(v306);
      }
      v87 = v305;
      v307 = v86;
      v88 = sub_10001A630(&qword_10083DFA8);
      v89 = sub_1001970C4();
      v36 = (_QWORD *)BidirectionalCollection<>.slices(by:)(v87, v88, v89);
      swift_release(v86);
      v296 = (char *)v36[2];
      if (!v296)
        goto LABEL_255;
      v297 = (char *)(v36 + 4);
      v295 = (unint64_t)v36;
      swift_bridgeObjectRetain(v36);
      v26 = 0;
      while (1)
      {
        v90 = (uint64_t *)&v297[32 * v26];
        m = *v90;
        v91 = v90[1];
        v92 = v90[2];
        v23 = v90[3];
        if ((v23 & 1) == 0)
          break;
        v68 = v84;
        v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v93 = swift_unknownObjectRetain_n(m, 4);
        v94 = (_QWORD *)swift_dynamicCastClass(v93, v10);
        if (!v94)
        {
          swift_unknownObjectRelease(m);
          v94 = _swiftEmptyArrayStorage;
        }
        v95 = v94[2];
        swift_release(v94);
        if (__OFSUB__(v23 >> 1, v92))
        {
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          if (v68 < 0)
            v242 = v68;
          else
            v242 = v68 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v68);
          v71 = _CocoaArrayWrapper.endIndex.getter(v242);
LABEL_49:
          v300 = (_QWORD *)v10;
          v305 = v11;
          v298 = v71;
          if (!v71)
          {
LABEL_61:
            swift_bridgeObjectRelease(v68);
            goto LABEL_62;
          }
          v294 = (id)objc_opt_self(REMSmartList);
          v295 = v68 & 0xC000000000000001;
          v72 = 4;
          while (1)
          {
            if (v295)
              v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72 - 4, v68);
            else
              v73 = *(id *)(v68 + 8 * v72);
            a2 = (uint64_t)v73;
            v74 = v72 - 3;
            if (__OFADD__(v72 - 4, 1))
              goto LABEL_276;
            v75 = objc_msgSend(v73, "entityName");
            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            v10 = v76;

            v77 = objc_msgSend(v294, "cdEntityName");
            v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
            m = v79;

            if (v26 == v78 && v10 == m)
            {
              v68 = v306;
              swift_bridgeObjectRelease(v306);

              swift_bridgeObjectRelease(v10);
              goto LABEL_218;
            }
            v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v10, v78, m, 0);

            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(m);
            if ((v81 & 1) != 0)
              break;
            ++v72;
            v71 = v298;
            v68 = v306;
            if (v74 == v298)
              goto LABEL_61;
          }
          v68 = v306;
          v10 = v306;
LABEL_218:
          v192 = swift_bridgeObjectRelease(v10);
          v193 = static REMSmartListType.manualOrderablePredefinedSmartListTypes.getter(v192);
          v10 = v193;
          v194 = (char *)_swiftEmptyArrayStorage;
          v195 = v305;
          v295 = *(_QWORD *)(v193 + 16);
          if (v295)
          {
            LODWORD(v294) = enum case for REMManualOrdering.PinnedList.predefinedSmartList(_:);
            v293 = (void (*)(unint64_t, _QWORD, unint64_t, __n128))v305[13];
            v196 = swift_bridgeObjectRetain(v193);
            v197 = 0;
            v198 = v299;
            v26 = (unint64_t)v300;
            do
            {
              m = v10;
              v199 = *(void **)(v10 + 8 * v197 + 32);
              *(_QWORD *)v23 = v199;
              v293(v23, v294, v26, v196);
              v200 = (void (*)(char *, unint64_t, unint64_t))v195[4];
              v200(v198, v23, v26);
              v201 = v199;
              if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
                v194 = (char *)sub_1002C84B4(0, *((_QWORD *)v194 + 2) + 1, 1, (unint64_t)v194);
              v203 = *((_QWORD *)v194 + 2);
              v202 = *((_QWORD *)v194 + 3);
              if (v203 >= v202 >> 1)
                v194 = (char *)sub_1002C84B4(v202 > 1, v203 + 1, 1, (unint64_t)v194);
              ++v197;
              *((_QWORD *)v194 + 2) = v203 + 1;
              v195 = v305;
              v198 = v299;
              v26 = (unint64_t)v300;
              v200(&v194[((*((unsigned __int8 *)v195 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v195 + 80))+ v305[9] * v203], (unint64_t)v299, (unint64_t)v300);
              v10 = m;
            }
            while (v295 != v197);
            swift_bridgeObjectRelease(m);
            v68 = v306;
          }
          swift_bridgeObjectRelease(v10);
          v204 = v286;
          swift_bridgeObjectRetain(v286);
          v205 = v301;
          v206 = sub_100197110((uint64_t)v194, v204);
          v301 = v205;
          swift_bridgeObjectRelease(v194);
          swift_bridgeObjectRelease(v204);
          sub_1001E2B58((uint64_t)v206);
          v207 = v307[2];
          v71 = v298;
          v82 = v285;
          if (!v285)
          {
            if (v207 < *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_233;
LABEL_63:
            v83 = v307[2];
            if (v82)
            {
              if (v68 < 0)
                v179 = v68;
              else
                v179 = v68 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v68);
              v180 = _CocoaArrayWrapper.endIndex.getter(v179);
              swift_bridgeObjectRelease(v68);
              if (v83 >= v180)
                goto LABEL_65;
            }
            else if (v83 >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_65:
              swift_bridgeObjectRelease(v286);
LABEL_335:
              v273 = v307;
              swift_bridgeObjectRetain(v307);
              v275 = sub_10011F170(v274);
              swift_bridgeObjectRelease(v273);
              v276 = v284;
              v277 = sub_10018CF18(v275, v284);
              swift_bridgeObjectRelease(v275);
              sub_1001940E8(v277, (int64_t)sub_1001975B4, 0, v303, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
              swift_bridgeObjectRelease(v273);

              return;
            }
            v11 = v301;
            if (!v71)
              goto LABEL_65;
            v297 = (char *)objc_opt_self(REMList);
            v299 = (char *)(v68 & 0xC000000000000001);
            swift_bridgeObjectRetain(v68);
            v181 = 4;
            while (1)
            {
              v23 = v181 - 4;
              if (v299)
                v182 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v181 - 4, v68);
              else
                v182 = *(id *)(v68 + 8 * v181);
              v183 = v182;
              v184 = v181 - 3;
              if (__OFADD__(v23, 1))
                goto LABEL_280;
              v185 = objc_msgSend(v182, "entityName");
              v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
              v188 = v187;

              m = (uint64_t)objc_msgSend(v297, "cdEntityName");
              v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(m);
              v26 = v190;

              if (v186 == v189 && v188 == v26)
              {
                swift_bridgeObjectRelease(v306);

                swift_bridgeObjectRelease(v188);
                goto LABEL_251;
              }
              v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v186, v188, v189, v26, 0);

              swift_bridgeObjectRelease(v188);
              swift_bridgeObjectRelease(v26);
              if ((v10 & 1) != 0)
                break;
              ++v181;
              v68 = v306;
              if (v184 == v298)
              {
                swift_bridgeObjectRelease(v286);
                swift_bridgeObjectRelease(v68);
                goto LABEL_335;
              }
            }
            v188 = v306;
LABEL_251:
            swift_bridgeObjectRelease(v188);
            v225 = (uint64_t)v288;
            swift_storeEnumTagMultiPayload(v288, v287, 22);
            sub_10000A3AC();
            v227 = v226;
            sub_10001C744(v225, _s10PredicatesOMa_1);
            if (qword_100837978 != -1)
              swift_once(&qword_100837978, sub_1005B8DC0);
            v213 = (char *)sub_100358F8C(qword_1008722E8, 0, 0, (uint64_t)v227);

            v228 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
            v229 = NSManagedObjectContext.fetch<A>(_:)(v213, v228);
            if (v11)
            {
LABEL_254:
              v36 = v307;
              swift_bridgeObjectRelease(v286);

LABEL_255:
              swift_bridgeObjectRelease(v36);
              return;
            }
            v230 = v229;
            v306 = (unint64_t)v213;
            v309 = (unint64_t)_swiftEmptyArrayStorage;
            if ((unint64_t)v229 >> 62)
            {
              if (v229 < 0)
                v258 = v229;
              else
                v258 = v229 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v229);
              v231 = _CocoaArrayWrapper.endIndex.getter(v258);
              v301 = 0;
              if (!v231)
                goto LABEL_315;
LABEL_258:
              if (v231 < 1)
                goto LABEL_339;
              for (k = 0; k != v231; ++k)
              {
                if ((v230 & 0xC000000000000001) != 0)
                  v234 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v230);
                else
                  v234 = *(id *)(v230 + 8 * k + 32);
                v235 = v234;
                v26 = (unint64_t)objc_msgSend(v234, "remObjectID");

                if (v26)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v236);
                  v238 = *(_QWORD *)((v309 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  v237 = *(_QWORD *)((v309 & 0xFFFFFFFFFFFFFF8) + 0x18);
                  if (v238 >= v237 >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v237 > 1);
                  v233 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v238, v26);
                  specialized Array._endMutation()(v233);
                }
              }
              swift_bridgeObjectRelease(v230);
              v240 = v309;
            }
            else
            {
              v231 = *(_QWORD *)((v229 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v229);
              v301 = 0;
              if (v231)
                goto LABEL_258;
LABEL_315:
              swift_bridgeObjectRelease(v230);
              v240 = (uint64_t)_swiftEmptyArrayStorage;
            }
            swift_bridgeObjectRelease(v230);
            if ((unint64_t)v240 >> 62)
            {
              if (v240 < 0)
                v270 = v240;
              else
                v270 = v240 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v240);
              v259 = _CocoaArrayWrapper.endIndex.getter(v270);
              if (!v259)
                goto LABEL_333;
LABEL_318:
              if (v259 < 1)
                goto LABEL_340;
              v260 = 0;
              v261 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
              v262 = (char *)_swiftEmptyArrayStorage;
              do
              {
                if ((v240 & 0xC000000000000001) != 0)
                  v263 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v260, v240);
                else
                  v263 = *(id *)(v240 + 8 * v260 + 32);
                v264 = v291;
                *(_QWORD *)v291 = v263;
                v265 = v305;
                v266 = v300;
                ((void (*)(char *, uint64_t, _QWORD *))v305[13])(v264, v261, v300);
                v267 = (void (*)(char *, char *, _QWORD *))v265[4];
                v267(v296, v264, v266);
                if ((swift_isUniquelyReferenced_nonNull_native(v262) & 1) == 0)
                  v262 = (char *)sub_1002C84B4(0, *((_QWORD *)v262 + 2) + 1, 1, (unint64_t)v262);
                v269 = *((_QWORD *)v262 + 2);
                v268 = *((_QWORD *)v262 + 3);
                if (v269 >= v268 >> 1)
                  v262 = (char *)sub_1002C84B4(v268 > 1, v269 + 1, 1, (unint64_t)v262);
                ++v260;
                *((_QWORD *)v262 + 2) = v269 + 1;
                v267(&v262[((*((unsigned __int8 *)v305 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v305 + 80))+ v305[9] * v269], v296, v300);
              }
              while (v259 != v260);
            }
            else
            {
              v259 = *(_QWORD *)((v240 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v240);
              if (v259)
                goto LABEL_318;
LABEL_333:
              v262 = (char *)_swiftEmptyArrayStorage;
            }
            swift_bridgeObjectRelease_n(v240, 2);
            v271 = v286;
            v272 = sub_100197110((uint64_t)v262, v286);
            swift_bridgeObjectRelease(v262);
            swift_bridgeObjectRelease(v271);
            sub_1001E2B58((uint64_t)v272);

            goto LABEL_335;
          }
          if (v68 < 0)
            v208 = v68;
          else
            v208 = v68 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v68);
          v209 = _CocoaArrayWrapper.endIndex.getter(v208);
          swift_bridgeObjectRelease(v68);
          if (v207 >= v209)
            goto LABEL_63;
LABEL_233:
          v210 = (uint64_t)v290;
          swift_storeEnumTagMultiPayload(v290, v289, 9);
          sub_1000069D8();
          v212 = v211;
          sub_10001C744(v210, _s10PredicatesOMa_3);
          if (qword_100837980 != -1)
            swift_once(&qword_100837980, sub_1005B8DDC);
          v213 = (char *)sub_100357F78(qword_1008722F0, 0, 0, (uint64_t)v212);

          v214 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
          v215 = v301;
          v216 = NSManagedObjectContext.fetch<A>(_:)(v213, v214);
          v217 = v215;
          if (v215)
            goto LABEL_254;
          v99 = v216;
          v299 = v213;
          v309 = (unint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)v216 >> 62))
          {
            v218 = *(_QWORD *)((v216 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v216);
            v301 = 0;
            if (v218)
              goto LABEL_238;
LABEL_291:
            swift_bridgeObjectRelease(v99);
            v239 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_292:
            swift_bridgeObjectRelease(v99);
            if (!((unint64_t)v239 >> 62))
            {
              v246 = *(_QWORD *)((v239 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v239);
              if (v246)
                goto LABEL_294;
LABEL_309:
              v10 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_310:
              swift_bridgeObjectRelease_n(v239, 2);
              v256 = v286;
              swift_bridgeObjectRetain(v286);
              v257 = sub_100197110(v10, v256);
              v301 = v217;
              swift_bridgeObjectRelease(v10);
              swift_bridgeObjectRelease(v256);
              sub_1001E2B58((uint64_t)v257);

              v68 = v306;
              v71 = v298;
LABEL_62:
              v82 = v285;
              goto LABEL_63;
            }
            if (v239 < 0)
              v255 = v239;
            else
              v255 = v239 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v239);
            v246 = _CocoaArrayWrapper.endIndex.getter(v255);
            if (!v246)
              goto LABEL_309;
LABEL_294:
            if (v246 >= 1)
            {
              m = 0;
              v247 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
              v10 = (uint64_t)_swiftEmptyArrayStorage;
              do
              {
                if ((v239 & 0xC000000000000001) != 0)
                  v248 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(m, v239);
                else
                  v248 = *(id *)(v239 + 8 * m + 32);
                v249 = v292;
                *(_QWORD *)v292 = v248;
                v250 = v305;
                v251 = v300;
                ((void (*)(char *, uint64_t, _QWORD *))v305[13])(v249, v247, v300);
                v252 = (void (*)(char *, char *, _QWORD *))v250[4];
                v252(v297, v249, v251);
                if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
                  v10 = sub_1002C84B4(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
                v254 = *(_QWORD *)(v10 + 16);
                v253 = *(_QWORD *)(v10 + 24);
                if (v254 >= v253 >> 1)
                  v10 = sub_1002C84B4(v253 > 1, v254 + 1, 1, v10);
                ++m;
                *(_QWORD *)(v10 + 16) = v254 + 1;
                v252((char *)(v10+ ((*((unsigned __int8 *)v305 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v305 + 80))+ v305[9] * v254), v297, v300);
                v217 = v301;
              }
              while (v246 != m);
              goto LABEL_310;
            }
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            v307 = 0;
            v308 = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v278._object = (void *)0x80000001006F8C10;
            v278._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v278);
            v309 = v26;
LABEL_344:
            v281 = &qword_10083FD70;
LABEL_347:
            v283 = sub_10001A630(v281);
            _print_unlocked<A, B>(_:_:)(&v309, &v307, v283, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v307, v308, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
            __break(1u);
LABEL_348:
            _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
            __break(1u);
            return;
          }
          if (v216 < 0)
            v245 = v216;
          else
            v245 = v216 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v216);
          v218 = _CocoaArrayWrapper.endIndex.getter(v245);
          v301 = 0;
          if (!v218)
            goto LABEL_291;
LABEL_238:
          if (v218 < 1)
          {
            __break(1u);
            goto LABEL_338;
          }
          for (m = 0; m != v218; ++m)
          {
            if ((v99 & 0xC000000000000001) != 0)
              v220 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(m, v99);
            else
              v220 = *(id *)(v99 + 8 * m + 32);
            v221 = v220;
            v26 = (unint64_t)objc_msgSend(v220, "remObjectID");

            if (v26)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v222);
              v224 = *(_QWORD *)((v309 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v223 = *(_QWORD *)((v309 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v224 >= v223 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v223 > 1);
              v219 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v224, v26);
              specialized Array._endMutation()(v219);
            }
          }
LABEL_272:
          swift_bridgeObjectRelease(v99);
          v239 = v309;
          v217 = v301;
          goto LABEL_292;
        }
        if (v95 != (v23 >> 1) - v92)
        {
          swift_unknownObjectRelease(m);
          v84 = v68;
          goto LABEL_74;
        }
        v84 = v68;
        v300 = (_QWORD *)swift_dynamicCastClass(m, v10);
        if (!v300)
        {
          swift_unknownObjectRelease(m);
          v300 = _swiftEmptyArrayStorage;
        }
LABEL_81:
        swift_unknownObjectRelease(m);
        if (qword_100837988 != -1)
          swift_once(&qword_100837988, sub_1005B8DF8);
        v96 = qword_1008722F8;
        if ((unint64_t)qword_1008722F8 >> 62)
        {
          if (qword_1008722F8 < 0)
            v122 = qword_1008722F8;
          else
            v122 = qword_1008722F8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(qword_1008722F8, 3);
          v97 = _CocoaArrayWrapper.endIndex.getter(v122);
          swift_bridgeObjectRelease(v96);
        }
        else
        {
          v97 = *(_QWORD *)((qword_1008722F8 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(qword_1008722F8, 2);
        }
        v298 = v26;
        v299 = (char *)m;
        v301 = (objc_class *)v84;
        if (v97)
        {
          v306 = v96 & 0xC000000000000001;
          v98 = 4;
          v99 = (unint64_t)_swiftEmptyArrayStorage;
          v100 = v96;
          while (1)
          {
            v101 = v98 - 4;
            if (v306)
            {
              v102 = specialized _ArrayBuffer._getElementSlowPath(_:)(v98 - 4, v96);
              v26 = v102;
              v103 = v98 - 3;
              if (__OFADD__(v101, 1))
                goto LABEL_268;
            }
            else
            {
              v26 = *(_QWORD *)(v96 + 8 * v98);
              v102 = swift_retain(v26);
              v103 = v98 - 3;
              if (__OFADD__(v101, 1))
              {
LABEL_268:
                __break(1u);
                goto LABEL_269;
              }
            }
            m = v97;
            v104 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v102);
            if (!v105)
              goto LABEL_341;
            v106 = v104;
            v107 = v105;
            swift_release(v26);
            if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
              v99 = (unint64_t)sub_1002C8224(0, *(_QWORD *)(v99 + 16) + 1, 1, (_QWORD *)v99);
            v26 = *(_QWORD *)(v99 + 16);
            v108 = *(_QWORD *)(v99 + 24);
            if (v26 >= v108 >> 1)
              v99 = (unint64_t)sub_1002C8224((_QWORD *)(v108 > 1), v26 + 1, 1, (_QWORD *)v99);
            *(_QWORD *)(v99 + 16) = v26 + 1;
            v109 = (_QWORD *)(v99 + 16 * v26);
            v109[4] = v106;
            v109[5] = v107;
            ++v98;
            v97 = m;
            v96 = v100;
            if (v103 == m)
              goto LABEL_100;
          }
        }
        v99 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_100:
        swift_bridgeObjectRelease_n(v96, 2);
        if (qword_100837990 != -1)
          swift_once(&qword_100837990, sub_1005B8E14);
        v110 = qword_100872300;
        if ((unint64_t)qword_100872300 >> 62)
        {
          if (qword_100872300 < 0)
            v123 = qword_100872300;
          else
            v123 = qword_100872300 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(qword_100872300, 3);
          m = _CocoaArrayWrapper.endIndex.getter(v123);
          swift_bridgeObjectRelease(v110);
          if (m)
          {
LABEL_104:
            v306 = v110 & 0xC000000000000001;
            v111 = 4;
            v11 = (objc_class *)_swiftEmptyArrayStorage;
            v305 = (_QWORD *)v110;
            while (1)
            {
              v112 = v111 - 4;
              if (v306)
              {
                v113 = specialized _ArrayBuffer._getElementSlowPath(_:)(v111 - 4, v110);
                v114 = v113;
                v115 = v111 - 3;
                if (__OFADD__(v112, 1))
                  goto LABEL_270;
              }
              else
              {
                v114 = *(_QWORD *)(v110 + 8 * v111);
                v113 = swift_retain(v114);
                v115 = v111 - 3;
                if (__OFADD__(v112, 1))
                  goto LABEL_270;
              }
              v116 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v113);
              if (!v117)
                break;
              v118 = v116;
              v26 = v117;
              swift_release(v114);
              if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
                v11 = (objc_class *)sub_1002C8224(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
              v120 = *((_QWORD *)v11 + 2);
              v119 = *((_QWORD *)v11 + 3);
              if (v120 >= v119 >> 1)
                v11 = (objc_class *)sub_1002C8224((_QWORD *)(v119 > 1), v120 + 1, 1, v11);
              *((_QWORD *)v11 + 2) = v120 + 1;
              v121 = (_QWORD *)((char *)v11 + 16 * v120);
              v121[4] = v118;
              v121[5] = v26;
              ++v111;
              v110 = (uint64_t)v305;
              if (v115 == m)
                goto LABEL_126;
            }
            v307 = 0;
            v308 = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v280._object = (void *)0x80000001006F8C10;
            v280._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v280);
            v309 = v114;
            goto LABEL_344;
          }
        }
        else
        {
          m = *(_QWORD *)((qword_100872300 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(qword_100872300, 2);
          if (m)
            goto LABEL_104;
        }
        v11 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_126:
        swift_bridgeObjectRelease_n(v110, 2);
        v125 = v300;
        v124 = v301;
        v126 = sub_1002A7948((uint64_t)v300, v304, (Class)v99, v11);
        v84 = (uint64_t)v124;
        if (v124)
          goto LABEL_213;
        v127 = v126;
        v26 = v298 + 1;
        swift_release(v125);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v11);
        sub_10011F348(v127);
        v129 = v128;
        swift_bridgeObjectRelease(v127);
        v130 = sub_1002EC488(v129);
        sub_10018D378(v130);
        v132 = v131;
        swift_bridgeObjectRelease(v129);
        swift_bridgeObjectRelease(v130);
        sub_1001940E8(v132, (int64_t)sub_1001975B4, 0, v303, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
        swift_unknownObjectRelease(v299);
        if ((char *)v26 == v296)
          goto LABEL_214;
      }
      swift_unknownObjectRetain_n(*v90, 2);
LABEL_74:
      v300 = sub_1001E9C6C(m, v91, v92, v23);
      goto LABEL_81;
    }
    if (v30 != enum case for REMManualOrdering.ElementType.savedReminders(_:))
      goto LABEL_348;
    if ((v306 & 0x8000000000000000) != 0 || (v306 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v306);
      v134 = sub_1001E9A38(v244);
      swift_bridgeObjectRelease(v85);
    }
    else
    {
      v134 = (_QWORD *)(v306 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v306);
    }
    v135 = v305;
    v307 = v134;
    v136 = sub_10001A630(&qword_10083DFA8);
    v137 = sub_1001970C4();
    v36 = (_QWORD *)BidirectionalCollection<>.slices(by:)(v135, v136, v137);
    swift_release(v134);
    v296 = (char *)v36[2];
    if (!v296)
      goto LABEL_255;
    v297 = (char *)(v36 + 4);
    v295 = (unint64_t)v36;
    swift_bridgeObjectRetain(v36);
    v26 = 0;
    while (1)
    {
      v138 = (uint64_t *)&v297[32 * v26];
      m = *v138;
      v139 = v138[1];
      v140 = v138[2];
      v23 = v138[3];
      if ((v23 & 1) == 0)
        break;
      v68 = v84;
      v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v141 = swift_unknownObjectRetain_n(m, 4);
      v142 = (_QWORD *)swift_dynamicCastClass(v141, v10);
      if (!v142)
      {
        swift_unknownObjectRelease(m);
        v142 = _swiftEmptyArrayStorage;
      }
      v143 = v142[2];
      swift_release(v142);
      if (__OFSUB__(v23 >> 1, v140))
        goto LABEL_279;
      if (v143 != (v23 >> 1) - v140)
      {
        swift_unknownObjectRelease(m);
        v84 = v68;
        goto LABEL_140;
      }
      v84 = v68;
      v300 = (_QWORD *)swift_dynamicCastClass(m, v10);
      if (!v300)
      {
        swift_unknownObjectRelease(m);
        v300 = _swiftEmptyArrayStorage;
      }
LABEL_147:
      swift_unknownObjectRelease(m);
      if (qword_100837998 != -1)
        swift_once(&qword_100837998, sub_1005B8E30);
      v144 = qword_100872308;
      if ((unint64_t)qword_100872308 >> 62)
      {
        if (qword_100872308 < 0)
          v169 = qword_100872308;
        else
          v169 = qword_100872308 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(qword_100872308, 3);
        v145 = _CocoaArrayWrapper.endIndex.getter(v169);
        swift_bridgeObjectRelease(v144);
      }
      else
      {
        v145 = *(_QWORD *)((qword_100872308 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(qword_100872308, 2);
      }
      v298 = v26;
      v299 = (char *)m;
      v301 = (objc_class *)v84;
      if (v145)
      {
        v306 = v144 & 0xC000000000000001;
        v146 = 4;
        v99 = (unint64_t)_swiftEmptyArrayStorage;
        v147 = v144;
        while (1)
        {
          v148 = v146 - 4;
          if (v306)
          {
            v149 = specialized _ArrayBuffer._getElementSlowPath(_:)(v146 - 4, v144);
            v26 = v149;
            v150 = v146 - 3;
            if (__OFADD__(v148, 1))
              goto LABEL_269;
          }
          else
          {
            v26 = *(_QWORD *)(v144 + 8 * v146);
            v149 = swift_retain(v26);
            v150 = v146 - 3;
            if (__OFADD__(v148, 1))
            {
LABEL_269:
              __break(1u);
LABEL_270:
              __break(1u);
LABEL_271:
              __break(1u);
              goto LABEL_272;
            }
          }
          m = v145;
          v151 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v149);
          if (!v152)
            break;
          v153 = v151;
          v154 = v152;
          swift_release(v26);
          if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
            v99 = (unint64_t)sub_1002C8224(0, *(_QWORD *)(v99 + 16) + 1, 1, (_QWORD *)v99);
          v26 = *(_QWORD *)(v99 + 16);
          v155 = *(_QWORD *)(v99 + 24);
          if (v26 >= v155 >> 1)
            v99 = (unint64_t)sub_1002C8224((_QWORD *)(v155 > 1), v26 + 1, 1, (_QWORD *)v99);
          *(_QWORD *)(v99 + 16) = v26 + 1;
          v156 = (_QWORD *)(v99 + 16 * v26);
          v156[4] = v153;
          v156[5] = v154;
          ++v146;
          v145 = m;
          v144 = v147;
          if (v150 == m)
            goto LABEL_166;
        }
        v307 = 0;
        v308 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v279._object = (void *)0x80000001006F8C10;
        v279._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v279);
        v309 = v26;
LABEL_346:
        v281 = &qword_1008437F0;
        goto LABEL_347;
      }
      v99 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_166:
      swift_bridgeObjectRelease_n(v144, 2);
      if (qword_1008379A0 != -1)
        swift_once(&qword_1008379A0, sub_1005B8E4C);
      v157 = qword_100872310;
      if ((unint64_t)qword_100872310 >> 62)
      {
        if (qword_100872310 < 0)
          v170 = qword_100872310;
        else
          v170 = qword_100872310 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(qword_100872310, 3);
        m = _CocoaArrayWrapper.endIndex.getter(v170);
        swift_bridgeObjectRelease(v157);
        if (m)
        {
LABEL_170:
          v306 = v157 & 0xC000000000000001;
          v158 = 4;
          v11 = (objc_class *)_swiftEmptyArrayStorage;
          v305 = (_QWORD *)v157;
          while (1)
          {
            v159 = v158 - 4;
            if (v306)
            {
              v160 = specialized _ArrayBuffer._getElementSlowPath(_:)(v158 - 4, v157);
              v161 = v160;
              v162 = v158 - 3;
              if (__OFADD__(v159, 1))
                goto LABEL_271;
            }
            else
            {
              v161 = *(_QWORD *)(v157 + 8 * v158);
              v160 = swift_retain(v161);
              v162 = v158 - 3;
              if (__OFADD__(v159, 1))
                goto LABEL_271;
            }
            v163 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v160);
            if (!v164)
              break;
            v165 = v163;
            v26 = v164;
            swift_release(v161);
            if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
              v11 = (objc_class *)sub_1002C8224(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
            v167 = *((_QWORD *)v11 + 2);
            v166 = *((_QWORD *)v11 + 3);
            if (v167 >= v166 >> 1)
              v11 = (objc_class *)sub_1002C8224((_QWORD *)(v166 > 1), v167 + 1, 1, v11);
            *((_QWORD *)v11 + 2) = v167 + 1;
            v168 = (_QWORD *)((char *)v11 + 16 * v167);
            v168[4] = v165;
            v168[5] = v26;
            ++v158;
            v157 = (uint64_t)v305;
            if (v162 == m)
              goto LABEL_192;
          }
          v307 = 0;
          v308 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v282._object = (void *)0x80000001006F8C10;
          v282._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v282);
          v309 = v161;
          goto LABEL_346;
        }
      }
      else
      {
        m = *(_QWORD *)((qword_100872310 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(qword_100872310, 2);
        if (m)
          goto LABEL_170;
      }
      v11 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_192:
      swift_bridgeObjectRelease_n(v157, 2);
      v125 = v300;
      v171 = v301;
      v172 = sub_1004B4978((uint64_t)v300, v304, 1, (Class)v99, v11);
      v84 = (uint64_t)v171;
      if (v171)
      {
LABEL_213:
        swift_bridgeObjectRelease_n(v295, 2);
        swift_unknownObjectRelease(v299);
        swift_release(v125);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v11);
        return;
      }
      v173 = v172;
      v26 = v298 + 1;
      swift_release(v125);
      swift_bridgeObjectRelease(v99);
      swift_bridgeObjectRelease(v11);
      sub_10011F1B8(v173);
      v175 = v174;
      swift_bridgeObjectRelease(v173);
      v176 = sub_1002EC450(v175);
      sub_10018D378(v176);
      v178 = v177;
      swift_bridgeObjectRelease(v175);
      swift_bridgeObjectRelease(v176);
      sub_1001940E8(v178, (int64_t)sub_1001975B4, 0, v303, type metadata accessor for RDElementManualSortID, (void (*)(void))sub_1002D6140, (void (*)(unint64_t, uint64_t))sub_1002CC554, &qword_10083DF88);
      swift_unknownObjectRelease(v299);
      if ((char *)v26 == v296)
      {
LABEL_214:
        v133 = (_QWORD *)v295;
LABEL_215:
        swift_bridgeObjectRelease_n(v133, 2);
        return;
      }
    }
    swift_unknownObjectRetain_n(*v138, 2);
LABEL_140:
    v300 = sub_1001E9C6C(m, v139, v140, v23);
    goto LABEL_147;
  }
  v67 = (void *)sub_100300818();
  v68 = v306;
  if (v67)
  {
    v284 = v67;
    v307 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v306);
    sub_10011F104(v69);
    v286 = v70;
    swift_bridgeObjectRelease(v68);
    v285 = (unint64_t)v68 >> 62;
    if ((unint64_t)v68 >> 62)
      goto LABEL_281;
    v71 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v68);
    goto LABEL_49;
  }
}

void sub_100190128(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _BYTE v13[24];
  id v14;

  v6 = *a1;
  v7 = *sub_10000A388(a2, a2[3]);
  swift_beginAccess(v7 + 16, v13, 32, 0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v6;
  v10 = sub_1002B1A08(v9, v8);
  swift_endAccess(v13);

  if (v10)
  {
    swift_beginAccess(a3, v13, 33, 0);
    v11 = v9;
    v12 = swift_retain(v10);
    sub_100191300(v12, (uint64_t)v11, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028CCB8, &qword_10083DF90, type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_1002D035C);
    swift_endAccess(v13);
    swift_release(v10);

  }
  else
  {
    swift_beginAccess(a4, v13, 33, 0);
    sub_1002DB2CC((Swift::Int *)&v14, v9);
    swift_endAccess(v13);

  }
}

void sub_100190254(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];
  id v12;

  v6 = (void *)*a1;
  v7 = objc_msgSend(*(id *)(*sub_10000A388(a2, a2[3]) + 24), "objectForKey:", *a1);
  if (v7)
  {
    v8 = v7;
    swift_beginAccess(a3, v11, 33, 0);
    v9 = v6;
    v10 = swift_retain(v8);
    sub_100191300(v10, (uint64_t)v9, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028CCA4, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
    swift_endAccess(v11);
    swift_release(v8);

  }
  else
  {
    swift_beginAccess(a4, v11, 33, 0);
    sub_1002DB2CC((Swift::Int *)&v12, v6);
    swift_endAccess(v11);

  }
}

double sub_10019036C(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v8 = sub_1002B0828((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  v9 = sub_100196440(v8, a1, a2);
  swift_bridgeObjectRelease(a2);
  v10 = sub_1002AF1B8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v9);
  swift_retain(a4);
  v11 = sub_100196A4C(v10, a2, v9, a4);
  swift_bridgeObjectRelease_n(v9, 2);
  swift_release(a4);
  v12 = *a3;
  *a3 = v11;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

uint64_t sub_100190438(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *, uint64_t))
{
  uint64_t v8;
  _QWORD v10[5];
  _BYTE v11[24];

  swift_beginAccess(a2 + 16, v11, 0, 0);
  v8 = *(_QWORD *)(a2 + 16);
  v10[2] = a1;
  swift_bridgeObjectRetain(v8);
  a4(a3, v10, v8);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1001904B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *sub_10000A388(a2, a2[3]);
  swift_beginAccess(v4 + 16, v17, 33, 0);
  v5 = v3;
  v6 = swift_retain(v2);
  sub_100191300(v6, (uint64_t)v5, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028CCB8, &qword_10083DF90, type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_1002D035C);
  swift_endAccess(v17);

  result = swift_unknownObjectWeakLoadStrong(v4 + 32, v7);
  if (result)
  {
    v9 = result;
    if (*(_QWORD *)(result + 32))
    {
      return swift_unknownObjectRelease(result);
    }
    else
    {
      v10 = *(void **)(v2 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost);
      swift_retain(v2);
      if (objc_msgSend(v10, "isCloudKit"))
      {
        if (qword_1008376B0 != -1)
          swift_once(&qword_1008376B0, sub_1004A34B4);
        v11 = type metadata accessor for Logger(0);
        v12 = sub_10001AAA8(v11, (uint64_t)qword_10084C420);
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.info.getter(v13);
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDManualSortIDCache starts observing account changes", v15, 2u);
          swift_slowDealloc(v15, -1, -1);
        }

        v16 = sub_1004A3A28();
        swift_release(v2);
        v2 = *(_QWORD *)(v9 + 32);
        *(_QWORD *)(v9 + 32) = v16;
      }
      swift_unknownObjectRelease(v9);
      return swift_release(v2);
    }
  }
  return result;
}

double sub_10019068C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  Swift::Int v12;

  v12 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(a2);
  sub_100194BC4(a1, a2, &v12);
  swift_bridgeObjectRelease(a2);
  v6 = sub_1002AF5D8((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10018B078(v6, a2, (uint64_t)&v12);
  v8 = *a3;
  *a3 = v7;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  sub_10018C640(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

uint64_t sub_100190750()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for RDManualSortIDAdapter()
{
  return objc_opt_self(_TtC7remindd21RDManualSortIDAdapter);
}

uint64_t storeEnumTagSinglePayload for RDManualSortIDAdapter.AccountManualSortIDsOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001907E8 + 4 * byte_1006ABF75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019081C + 4 * byte_1006ABF70[v4]))();
}

uint64_t sub_10019081C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100190824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019082CLL);
  return result;
}

uint64_t sub_100190838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100190840);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100190844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019084C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDManualSortIDAdapter.AccountManualSortIDsOption()
{
  return &type metadata for RDManualSortIDAdapter.AccountManualSortIDsOption;
}

unint64_t sub_10019086C()
{
  unint64_t result;

  result = qword_10083DF80;
  if (!qword_10083DF80)
  {
    result = swift_getWitnessTable(&unk_1006AC01C, &type metadata for RDManualSortIDAdapter.AccountManualSortIDsOption);
    atomic_store(result, (unint64_t *)&qword_10083DF80);
  }
  return result;
}

int64_t sub_1001908B0@<X0>(int64_t result@<X0>, int64_t a2@<X1>, int64_t a3@<X2>, int64_t *a4@<X8>)
{
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = __CocoaDictionary.makeIterator()(result);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    result = v7 | 0x8000000000000000;
  }
  else
  {
    v11 = -1;
    v12 = -1 << *(_BYTE *)(result + 32);
    v8 = result + 64;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v11 = ~(-1 << v13);
    v10 = v11 & *(_QWORD *)(result + 64);
  }
  *a4 = result;
  a4[1] = v8;
  a4[2] = v9;
  a4[3] = 0;
  a4[4] = v10;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100190944@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_10001A670(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = sub_10019756C((uint64_t)v24, (uint64_t)v22);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return sub_10000882C((uint64_t)v20, &qword_10083DFF0);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100190B18(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = v1;
  v3 = *v1;
  if ((*v1 & 0x8000000000000000) == 0)
  {
    v5 = v1[3];
    v4 = v2[4];
    if (v4)
    {
      v6 = (v4 - 1) & v4;
      v7 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_4:
      v8 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v7);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v7);
      v10 = v8;
      swift_retain(v9);
      goto LABEL_5;
    }
    v18 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    v19 = (unint64_t)(v2[2] + 64) >> 6;
    if (v18 >= v19)
    {
      v9 = 0;
      v8 = 0;
      v6 = 0;
      goto LABEL_5;
    }
    v20 = v2[1];
    v21 = *(_QWORD *)(v20 + 8 * v18);
    if (v21)
    {
LABEL_14:
      v6 = (v21 - 1) & v21;
      v7 = __clz(__rbit64(v21)) + (v18 << 6);
      v5 = v18;
      goto LABEL_4;
    }
    v22 = v5 + 2;
    if (v5 + 2 >= v19)
      goto LABEL_30;
    v21 = *(_QWORD *)(v20 + 8 * v22);
    if (v21)
    {
LABEL_18:
      v18 = v22;
      goto LABEL_14;
    }
    if (v5 + 3 < v19)
    {
      v21 = *(_QWORD *)(v20 + 8 * (v5 + 3));
      if (v21)
      {
        v18 = v5 + 3;
        goto LABEL_14;
      }
      v22 = v5 + 4;
      if (v5 + 4 >= v19)
      {
        v9 = 0;
        v8 = 0;
        v6 = 0;
        v5 += 3;
LABEL_5:
        v2[3] = v5;
        v2[4] = v6;
        if (v8)
        {
LABEL_6:
          v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v2[5];
          v25[0] = v8;
          v25[1] = v9;
          v11(&v24, v25);
          swift_release(v9);

          return v24;
        }
        return 0;
      }
      v21 = *(_QWORD *)(v20 + 8 * v22);
      if (v21)
        goto LABEL_18;
      v18 = v5 + 5;
      if (v5 + 5 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v18);
        if (v21)
          goto LABEL_14;
        v18 = v19 - 1;
        v23 = v5 + 6;
        while (v19 != v23)
        {
          v21 = *(_QWORD *)(v20 + 8 * v23++);
          if (v21)
          {
            v18 = v23 - 1;
            goto LABEL_14;
          }
        }
LABEL_30:
        v9 = 0;
        v8 = 0;
        v6 = 0;
        v5 = v18;
        goto LABEL_5;
      }
    }
    v9 = 0;
    v8 = 0;
    v6 = 0;
    v5 = v22;
    goto LABEL_5;
  }
  v12 = (uint64_t (*)(_QWORD))result;
  result = __CocoaDictionary.Iterator.next()(result);
  if (!result)
    return result;
  v14 = result;
  v15 = v13;
  v24 = result;
  v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  swift_unknownObjectRetain(v14);
  swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
  v8 = (void *)v25[0];
  swift_unknownObjectRelease(v14);
  v24 = v15;
  v17 = v12(0);
  swift_unknownObjectRetain(v15);
  swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
  v9 = v25[0];
  swift_unknownObjectRelease(v15);
  if (v8)
    goto LABEL_6;
  return 0;
}

uint64_t sub_100190D8C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    v11(&v19, v20);
    swift_bridgeObjectRelease(v9);
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100190F0C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v11(&v19, v20);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void sub_10019109C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(void **)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v11 = v8;
    v12 = v9;
    v10(&v19, v20);

    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_10019121C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_1001912D8(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028C00C, sub_100191BD8);
}

uint64_t sub_1001912EC(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028C5AC, sub_100191E28);
}

void sub_100191300(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t *a4, uint64_t (*a5)(_QWORD), void (*a6)(unint64_t, uint64_t))
{
  Swift::Int *v6;
  Swift::Int *v8;
  Swift::Int v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::Int v18;
  Swift::Int v19;

  v8 = v6;
  v11 = *v6;
  if ((*v6 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v11 < 0)
    v15 = *v6;
  else
    v15 = v11 & 0xFFFFFFFFFFFFFF8;
  v16 = __CocoaDictionary.count.getter(v15);
  if (!__OFADD__(v16, 1))
  {
    v11 = sub_100192534(v15, v16 + 1, a4, a5, a6);
    *v8 = v11;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    v19 = *v8;
    *v8 = 0x8000000000000000;
    a3(a1, a2, isUniquelyReferenced_nonNull_native);
    v18 = *v8;
    *v8 = v19;
    swift_bridgeObjectRelease(v18);
    return;
  }
  __break(1u);
}

uint64_t sub_1001913CC(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028D198, sub_100192C10);
}

uint64_t sub_1001913E0(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028E670, sub_100193300);
}

uint64_t sub_1001913F4(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028E7C0, sub_100193578);
}

uint64_t sub_100191408(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028E920, sub_1001937C8);
}

uint64_t sub_10019141C(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028EA94, sub_100193A18);
}

uint64_t sub_100191430(uint64_t a1, uint64_t a2)
{
  return sub_100191444(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10028EF10, sub_100193E98);
}

uint64_t sub_100191444(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v6 = v4;
  v9 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v9 < 0)
    v11 = *v4;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v11);
  if (!__OFADD__(result, 1))
  {
    v9 = a4(v11, result + 1);
    *v6 = v9;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    v15 = *v6;
    *v6 = 0x8000000000000000;
    a3(a1, a2, isUniquelyReferenced_nonNull_native);
    v14 = *v6;
    *v6 = v15;
    return swift_bridgeObjectRelease(v14);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1001914F4(uint64_t a1, uint64_t a2)
{
  return sub_100192534(a1, a2, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
}

Swift::Int sub_100191510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_100844410);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = type metadata accessor for REMObjectID_Codable(0);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = type metadata accessor for REMList_Codable(0);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CD56C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100191738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DFF8);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CD578(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100191988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DF98);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CDEF8(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100191BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DFE0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CEB84(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100191E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DFA0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CF2C4(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100192078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_100843820);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CF2DC(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1001922C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_1008442F0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CF678(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100192518(uint64_t a1, uint64_t a2)
{
  return sub_100192534(a1, a2, &qword_10083DF90, type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_1002D035C);
}

Swift::Int sub_100192534(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD), void (*a5)(unint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a2)
  {
    sub_10001A630(a3);
    v9 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v35 = v9;
    v10 = __CocoaDictionary.makeIterator()(a1);
    v11 = __CocoaDictionary.Iterator.next()(v10);
    if (v11)
    {
      v13 = v11;
      v14 = v12;
      v15 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v33 = v13;
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        v32 = v14;
        v26 = a4(0);
        swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
        v9 = v35;
        v27 = *(_QWORD *)(v35 + 16);
        if (*(_QWORD *)(v35 + 24) <= v27)
        {
          a5(v27 + 1, 1);
          v9 = v35;
        }
        v17 = v33;
        v16 = v34;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
        v19 = v9 + 64;
        v20 = -1 << *(_BYTE *)(v9 + 32);
        v21 = result & ~v20;
        v22 = v21 >> 6;
        if (((-1 << v21) & ~*(_QWORD *)(v9 + 64 + 8 * (v21 >> 6))) != 0)
        {
          v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 64 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v28 = 0;
          v29 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v30 = v22 == v29;
            if (v22 == v29)
              v22 = 0;
            v28 |= v30;
            v31 = *(_QWORD *)(v19 + 8 * v22);
          }
          while (v31 == -1);
          v23 = __clz(__rbit64(~v31)) + (v22 << 6);
        }
        *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        v24 = 8 * v23;
        *(_QWORD *)(*(_QWORD *)(v9 + 48) + v24) = v16;
        *(_QWORD *)(*(_QWORD *)(v9 + 56) + v24) = v17;
        ++*(_QWORD *)(v9 + 16);
        v13 = __CocoaDictionary.Iterator.next()(result);
        v14 = v25;
      }
      while (v13);
    }
    swift_release(v10);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v9;
}

Swift::Int sub_100192770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_100843B20);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D0638(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1001929C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083E008);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&unk_1008445F0, CNContact_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D0C78(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100192C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_100844860);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&unk_100840090, REMSharedEntitySyncActivity_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D19BC(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100192E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_100844100);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D3048(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1001930B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083E000);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D3054(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100193300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_100843850);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v32 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = type metadata accessor for RDManualSortIDPersistenceHost();
      do
      {
        v29[0] = v8;
        swift_dynamicCast(&v31, v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v29[0] = v9;
        v14 = type metadata accessor for RDManualSortIDCache();
        swift_dynamicCast(&v30, v29, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v4 = v32;
        v15 = *(_QWORD *)(v32 + 16);
        if (*(_QWORD *)(v32 + 24) <= v15)
        {
          sub_1002D4558(v15 + 1, 1);
          v4 = v32;
        }
        v17 = v30;
        v16 = v31;
        Hasher.init(_seed:)(v29, *(_QWORD *)(v4 + 40));
        v18 = *(_QWORD *)(v16 + 24);
        if (v18)
        {
          v19 = *(_QWORD *)(v16 + 16);
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain(v18);
          String.hash(into:)(v29, v19, v18);
          swift_bridgeObjectRelease(v18);
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        result = Hasher._finalize()();
        v21 = v4 + 64;
        v22 = -1 << *(_BYTE *)(v4 + 32);
        v23 = result & ~v22;
        v24 = v23 >> 6;
        if (((-1 << v23) & ~*(_QWORD *)(v4 + 64 + 8 * (v23 >> 6))) != 0)
        {
          v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v4 + 64 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = 0;
          v26 = (unint64_t)(63 - v22) >> 6;
          do
          {
            if (++v24 == v26 && (v25 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v27 = v24 == v26;
            if (v24 == v26)
              v24 = 0;
            v25 |= v27;
            v28 = *(_QWORD *)(v21 + 8 * v24);
          }
          while (v28 == -1);
          v11 = __clz(__rbit64(~v28)) + (v24 << 6);
        }
        *(_QWORD *)(v21 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        v12 = 8 * v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v12) = v16;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v12) = v17;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v13;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100193578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DFD8);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002CC53C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1001937C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630(&qword_10083DFD0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D488C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100193A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_10001A630(&qword_10083DFC0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v29 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
      do
      {
        v27 = v8;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v26 = v9;
        swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v4 = v29;
        v21 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v21)
        {
          sub_1002D48A4(v21 + 1, 1);
          v4 = v29;
        }
        v12 = v27;
        v11 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v24 = v17 == v23;
            if (v17 == v23)
              v17 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v25 == -1);
          v18 = __clz(__rbit64(~v25)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100193C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_10083E010);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D520C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100193E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A630((uint64_t *)&unk_1008443C0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002D55BC(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

void sub_1001940E8(int64_t a1, int64_t a2, int64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), void (*a6)(void), void (*a7)(unint64_t, uint64_t), uint64_t *a8)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  Swift::Int v23;

  v16 = *a4;
  if ((*a4 & 0xC000000000000001) != 0)
  {
    if (v16 < 0)
      v18 = *a4;
    else
      v18 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v19 = __CocoaDictionary.count.getter(v18);
    v23 = sub_100192534(v18, v19, a8, a5, a7);
    sub_100194234(a1, a2, a3, 1, &v23, (uint64_t)a5, a6, (void (*)(void))a7);
    if (v8)
    {
      swift_release(v23);
    }
    else
    {
      swift_bridgeObjectRelease(*a4);
      *a4 = v23;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v23 = *a4;
    *a4 = 0x8000000000000000;
    sub_100194234(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v23, (uint64_t)a5, a6, (void (*)(void))a7);
    v21 = *a4;
    *a4 = v23;
    swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_100194234(int64_t a1, int64_t a2, int64_t a3, char a4, _QWORD *a5, uint64_t a6, void (*a7)(void), void (*a8)(void))
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  void (*v55)(void);
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  sub_1001908B0(a1, a2, a3, (int64_t *)&v59);
  v58 = v59;
  v56 = a1;
  swift_bridgeObjectRetain(a1);
  v57 = a3;
  swift_retain(a3);
  v15 = sub_100190B18(a6);
  if (!v15)
    goto LABEL_24;
  v17 = (void *)v15;
  v18 = v16;
  v55 = a7;
  v19 = (_QWORD *)*a5;
  v21 = sub_1002C66DC(v15);
  v22 = v19[2];
  v23 = (v20 & 1) == 0;
  if (__OFADD__(v22, v23))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v24 = v20;
  if (v19[3] >= v22 + v23)
  {
    if ((a4 & 1) != 0)
    {
      v27 = (_QWORD *)*a5;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      v55();
      v27 = (_QWORD *)*a5;
      if ((v24 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v27[(v21 >> 6) + 8] |= 1 << v21;
    v29 = 8 * v21;
    *(_QWORD *)(v27[6] + v29) = v17;
    *(_QWORD *)(v27[7] + v29) = v18;
    v30 = v27[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v27[2] = v32;
LABEL_13:
    v33 = sub_100190B18(a6);
    if (v33)
    {
      v35 = (void *)v33;
      v36 = v34;
      do
      {
        v40 = (_QWORD *)*a5;
        v42 = sub_1002C66DC((uint64_t)v35);
        v43 = v40[2];
        v44 = (v41 & 1) == 0;
        if (__OFADD__(v43, v44))
          goto LABEL_25;
        v45 = v41;
        if (v40[3] < v43 + v44)
        {
          a8();
          v46 = sub_1002C66DC((uint64_t)v35);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_27;
          v42 = v46;
        }
        v48 = (_QWORD *)*a5;
        if ((v45 & 1) != 0)
        {

          v37 = v48[7];
          v38 = 8 * v42;
          swift_release(*(_QWORD *)(v37 + v38));
          *(_QWORD *)(v37 + v38) = v36;
        }
        else
        {
          v48[(v42 >> 6) + 8] |= 1 << v42;
          v49 = 8 * v42;
          *(_QWORD *)(v48[6] + v49) = v35;
          *(_QWORD *)(v48[7] + v49) = v36;
          v50 = v48[2];
          v31 = __OFADD__(v50, 1);
          v51 = v50 + 1;
          if (v31)
            goto LABEL_26;
          v48[2] = v51;
        }
        v35 = (void *)sub_100190B18(a6);
        v36 = v39;
      }
      while (v35);
    }
LABEL_24:
    swift_bridgeObjectRelease(v56);
    v52 = v60;
    swift_release(v57);
    sub_1000C6560(v58);
    return swift_release(v52);
  }
  a8();
  v25 = sub_1002C66DC((uint64_t)v17);
  if ((v24 & 1) == (v26 & 1))
  {
    v21 = v25;
    v27 = (_QWORD *)*a5;
    if ((v24 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v28 = v27[7];
    swift_release(*(_QWORD *)(v28 + 8 * v21));
    *(_QWORD *)(v28 + 8 * v21) = v18;
    goto LABEL_13;
  }
LABEL_27:
  v54 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v54);
  __break(1u);
  return result;
}

uint64_t sub_100194520@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *a2 = *(_QWORD *)a1;
  a2[1] = v3;
  v4 = v2;
  return swift_retain(v3);
}

uint64_t sub_100194548(uint64_t a1, uint64_t a2, Swift::Int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char v44;
  Swift::Int v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::Int v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  id v66;
  Swift::Int v67;
  id v68;
  void *v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  Swift::Int *v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[6];
  _QWORD *v81;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v9 = sub_1000EC524((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v10 = Set.Iterator.init(_cocoa:)(v80, v7, v8, v9);
    v5 = v80[0];
    v75 = v80[1];
    v11 = v80[2];
    v12 = v80[3];
    v13 = v80[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v75 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v74 = (unint64_t)(v11 + 64) >> 6;
  v18 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v18 = a2;
  v71 = v18;
  v76 = a2 & 0xC000000000000001;
  v19 = &selRef_isConcealed;
  v73 = a3;
  v72 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v5 < 0)
        {
          v23 = __CocoaSet.Iterator.next()(v10);
          if (!v23)
            return sub_1000C6560(v5);
          v24 = v23;
          v79 = v23;
          v25 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
          swift_unknownObjectRetain(v24);
          swift_dynamicCast(&v81, &v79, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
          v26 = v81;
          swift_unknownObjectRelease(v24);
          v22 = v12;
          v20 = v13;
          if (!v26)
            return sub_1000C6560(v5);
        }
        else
        {
          if (v13)
          {
            v20 = (v13 - 1) & v13;
            v21 = __clz(__rbit64(v13)) | (v12 << 6);
            v22 = v12;
          }
          else
          {
            v27 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_86;
            if (v27 >= v74)
              return sub_1000C6560(v5);
            v28 = *(_QWORD *)(v75 + 8 * v27);
            v22 = v12 + 1;
            if (!v28)
            {
              v22 = v12 + 2;
              if (v12 + 2 >= v74)
                return sub_1000C6560(v5);
              v28 = *(_QWORD *)(v75 + 8 * v22);
              if (!v28)
              {
                v22 = v12 + 3;
                if (v12 + 3 >= v74)
                  return sub_1000C6560(v5);
                v28 = *(_QWORD *)(v75 + 8 * v22);
                if (!v28)
                {
                  v22 = v12 + 4;
                  if (v12 + 4 >= v74)
                    return sub_1000C6560(v5);
                  v28 = *(_QWORD *)(v75 + 8 * v22);
                  if (!v28)
                  {
                    v22 = v12 + 5;
                    if (v12 + 5 >= v74)
                      return sub_1000C6560(v5);
                    v28 = *(_QWORD *)(v75 + 8 * v22);
                    if (!v28)
                    {
                      v29 = v12 + 6;
                      while (v74 != v29)
                      {
                        v28 = *(_QWORD *)(v75 + 8 * v29++);
                        if (v28)
                        {
                          v22 = v29 - 1;
                          goto LABEL_35;
                        }
                      }
                      return sub_1000C6560(v5);
                    }
                  }
                }
              }
            }
LABEL_35:
            v20 = (v28 - 1) & v28;
            v21 = __clz(__rbit64(v28)) + (v22 << 6);
          }
          v26 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v21);
          if (!v26)
            return sub_1000C6560(v5);
        }
        v30 = objc_msgSend(v26, v19[432]);
        if (v30)
          break;

        v12 = v22;
        v13 = v20;
      }
      v31 = v30;
      v77 = v20;
      v78 = v22;
      if ((unint64_t)a2 >> 62)
      {
        swift_bridgeObjectRetain(a2);
        v32 = _CocoaArrayWrapper.endIndex.getter(v71);
        if (!v32)
        {
LABEL_80:

          swift_bridgeObjectRelease(a2);
          goto LABEL_81;
        }
      }
      else
      {
        v32 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v32)
          goto LABEL_80;
      }
      v33 = v76 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
      v34 = v33;
      v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v35 = static NSObject.== infix(_:_:)(v34);

      if ((v35 & 1) == 0)
        break;
      swift_bridgeObjectRelease(a2);
LABEL_59:
      v45 = *a3;
      if ((*a3 & 0xC000000000000001) != 0)
      {
        if (v45 >= 0)
          v45 &= 0xFFFFFFFFFFFFFF8uLL;
        v46 = v26;
        v47 = v31;
        v48 = __CocoaDictionary.count.getter(v45);
        if (__OFADD__(v48, 1))
          goto LABEL_88;
        v45 = sub_100192770(v45, v48 + 1);
        *a3 = v45;
      }
      else
      {
        v49 = v26;
        v50 = v31;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      v81 = (_QWORD *)*a3;
      v52 = (Swift::Int)v81;
      *a3 = 0x8000000000000000;
      v54 = sub_1002C66DC((uint64_t)v31);
      v55 = *(_QWORD *)(v52 + 16);
      v56 = (v53 & 1) == 0;
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
        goto LABEL_87;
      v58 = v53;
      if (*(_QWORD *)(v52 + 24) >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D7F8C();
      }
      else
      {
        sub_1002D0638(v57, isUniquelyReferenced_nonNull_native);
        v59 = sub_1002C66DC((uint64_t)v31);
        if ((v58 & 1) != (v60 & 1))
          goto LABEL_90;
        v54 = v59;
      }
      v61 = v81;
      if ((v58 & 1) != 0)
      {
        v62 = v81[7];

        *(_QWORD *)(v62 + 8 * v54) = v26;
      }
      else
      {
        v81[(v54 >> 6) + 8] |= 1 << v54;
        *(_QWORD *)(v61[6] + 8 * v54) = v31;
        *(_QWORD *)(v61[7] + 8 * v54) = v26;
        v63 = v61[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_89;
        v61[2] = v65;
        v66 = v31;
      }
      a3 = v73;
      v67 = *v73;
      *v73 = (Swift::Int)v61;

      v68 = objc_msgSend(v26, "account", swift_bridgeObjectRelease(v67).n128_f64[0]);
      if (v68)
      {
        sub_1002DBEB4((Swift::Int *)&v81, v68);

        v69 = v81;
      }
      else
      {

      }
      v12 = v78;
      v13 = v77;
      v19 = &selRef_isConcealed;
    }
    if (v32 != 1)
      break;

    swift_bridgeObjectRelease(a2);
LABEL_57:
    v19 = &selRef_isConcealed;
LABEL_81:

    v13 = v77;
    v12 = v78;
  }
  if (v76)
  {
    v36 = 1;
    while (1)
    {
      v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, a2);
      v38 = v36 + 1;
      if (__OFADD__(v36, 1))
        break;
      v39 = v37;
      v40 = static NSObject.== infix(_:_:)(v37);
      swift_unknownObjectRelease(v39);
      if ((v40 & 1) != 0)
        goto LABEL_58;
      ++v36;
      if (v38 == v32)
        goto LABEL_56;
    }
    __break(1u);
  }
  else
  {
    v41 = 5;
    while (1)
    {
      v42 = v41 - 3;
      if (__OFADD__(v41 - 4, 1))
        break;
      v43 = *(id *)(a2 + 8 * v41);
      v44 = static NSObject.== infix(_:_:)(v43);

      if ((v44 & 1) != 0)
      {
LABEL_58:
        swift_bridgeObjectRelease(a2);
        v5 = v72;
        a3 = v73;
        goto LABEL_59;
      }
      ++v41;
      if (v42 == v32)
      {
LABEL_56:

        swift_bridgeObjectRelease(a2);
        v5 = v72;
        a3 = v73;
        goto LABEL_57;
      }
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
  __break(1u);
  return result;
}

uint64_t sub_100194BC4(uint64_t a1, uint64_t a2, Swift::Int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char v44;
  Swift::Int v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::Int v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  id v66;
  Swift::Int v67;
  id v68;
  void *v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  Swift::Int *v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[6];
  _QWORD *v81;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v9 = sub_1000EC524(&qword_10083B528, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v10 = Set.Iterator.init(_cocoa:)(v80, v7, v8, v9);
    v5 = v80[0];
    v75 = v80[1];
    v11 = v80[2];
    v12 = v80[3];
    v13 = v80[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v75 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v74 = (unint64_t)(v11 + 64) >> 6;
  v18 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v18 = a2;
  v71 = v18;
  v76 = a2 & 0xC000000000000001;
  v19 = &selRef_isConcealed;
  v73 = a3;
  v72 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v5 < 0)
        {
          v23 = __CocoaSet.Iterator.next()(v10);
          if (!v23)
            return sub_1000C6560(v5);
          v24 = v23;
          v79 = v23;
          v25 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          swift_unknownObjectRetain(v24);
          swift_dynamicCast(&v81, &v79, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
          v26 = v81;
          swift_unknownObjectRelease(v24);
          v22 = v12;
          v20 = v13;
          if (!v26)
            return sub_1000C6560(v5);
        }
        else
        {
          if (v13)
          {
            v20 = (v13 - 1) & v13;
            v21 = __clz(__rbit64(v13)) | (v12 << 6);
            v22 = v12;
          }
          else
          {
            v27 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_86;
            if (v27 >= v74)
              return sub_1000C6560(v5);
            v28 = *(_QWORD *)(v75 + 8 * v27);
            v22 = v12 + 1;
            if (!v28)
            {
              v22 = v12 + 2;
              if (v12 + 2 >= v74)
                return sub_1000C6560(v5);
              v28 = *(_QWORD *)(v75 + 8 * v22);
              if (!v28)
              {
                v22 = v12 + 3;
                if (v12 + 3 >= v74)
                  return sub_1000C6560(v5);
                v28 = *(_QWORD *)(v75 + 8 * v22);
                if (!v28)
                {
                  v22 = v12 + 4;
                  if (v12 + 4 >= v74)
                    return sub_1000C6560(v5);
                  v28 = *(_QWORD *)(v75 + 8 * v22);
                  if (!v28)
                  {
                    v22 = v12 + 5;
                    if (v12 + 5 >= v74)
                      return sub_1000C6560(v5);
                    v28 = *(_QWORD *)(v75 + 8 * v22);
                    if (!v28)
                    {
                      v29 = v12 + 6;
                      while (v74 != v29)
                      {
                        v28 = *(_QWORD *)(v75 + 8 * v29++);
                        if (v28)
                        {
                          v22 = v29 - 1;
                          goto LABEL_35;
                        }
                      }
                      return sub_1000C6560(v5);
                    }
                  }
                }
              }
            }
LABEL_35:
            v20 = (v28 - 1) & v28;
            v21 = __clz(__rbit64(v28)) + (v22 << 6);
          }
          v26 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v21);
          if (!v26)
            return sub_1000C6560(v5);
        }
        v30 = objc_msgSend(v26, v19[432]);
        if (v30)
          break;

        v12 = v22;
        v13 = v20;
      }
      v31 = v30;
      v77 = v20;
      v78 = v22;
      if ((unint64_t)a2 >> 62)
      {
        swift_bridgeObjectRetain(a2);
        v32 = _CocoaArrayWrapper.endIndex.getter(v71);
        if (!v32)
        {
LABEL_80:

          swift_bridgeObjectRelease(a2);
          goto LABEL_81;
        }
      }
      else
      {
        v32 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v32)
          goto LABEL_80;
      }
      v33 = v76 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
      v34 = v33;
      v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v35 = static NSObject.== infix(_:_:)(v34);

      if ((v35 & 1) == 0)
        break;
      swift_bridgeObjectRelease(a2);
LABEL_59:
      v45 = *a3;
      if ((*a3 & 0xC000000000000001) != 0)
      {
        if (v45 >= 0)
          v45 &= 0xFFFFFFFFFFFFFF8uLL;
        v46 = v26;
        v47 = v31;
        v48 = __CocoaDictionary.count.getter(v45);
        if (__OFADD__(v48, 1))
          goto LABEL_88;
        v45 = sub_100192078(v45, v48 + 1);
        *a3 = v45;
      }
      else
      {
        v49 = v26;
        v50 = v31;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      v81 = (_QWORD *)*a3;
      v52 = (Swift::Int)v81;
      *a3 = 0x8000000000000000;
      v54 = sub_1002C66DC((uint64_t)v31);
      v55 = *(_QWORD *)(v52 + 16);
      v56 = (v53 & 1) == 0;
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
        goto LABEL_87;
      v58 = v53;
      if (*(_QWORD *)(v52 + 24) >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D73A0();
      }
      else
      {
        sub_1002CF2DC(v57, isUniquelyReferenced_nonNull_native);
        v59 = sub_1002C66DC((uint64_t)v31);
        if ((v58 & 1) != (v60 & 1))
          goto LABEL_90;
        v54 = v59;
      }
      v61 = v81;
      if ((v58 & 1) != 0)
      {
        v62 = v81[7];

        *(_QWORD *)(v62 + 8 * v54) = v26;
      }
      else
      {
        v81[(v54 >> 6) + 8] |= 1 << v54;
        *(_QWORD *)(v61[6] + 8 * v54) = v31;
        *(_QWORD *)(v61[7] + 8 * v54) = v26;
        v63 = v61[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_89;
        v61[2] = v65;
        v66 = v31;
      }
      a3 = v73;
      v67 = *v73;
      *v73 = (Swift::Int)v61;

      v68 = objc_msgSend(v26, "account", swift_bridgeObjectRelease(v67).n128_f64[0]);
      if (v68)
      {
        sub_1002DBEB4((Swift::Int *)&v81, v68);

        v69 = v81;
      }
      else
      {

      }
      v12 = v78;
      v13 = v77;
      v19 = &selRef_isConcealed;
    }
    if (v32 != 1)
      break;

    swift_bridgeObjectRelease(a2);
LABEL_57:
    v19 = &selRef_isConcealed;
LABEL_81:

    v13 = v77;
    v12 = v78;
  }
  if (v76)
  {
    v36 = 1;
    while (1)
    {
      v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, a2);
      v38 = v36 + 1;
      if (__OFADD__(v36, 1))
        break;
      v39 = v37;
      v40 = static NSObject.== infix(_:_:)(v37);
      swift_unknownObjectRelease(v39);
      if ((v40 & 1) != 0)
        goto LABEL_58;
      ++v36;
      if (v38 == v32)
        goto LABEL_56;
    }
    __break(1u);
  }
  else
  {
    v41 = 5;
    while (1)
    {
      v42 = v41 - 3;
      if (__OFADD__(v41 - 4, 1))
        break;
      v43 = *(id *)(a2 + 8 * v41);
      v44 = static NSObject.== infix(_:_:)(v43);

      if ((v44 & 1) != 0)
      {
LABEL_58:
        swift_bridgeObjectRelease(a2);
        v5 = v72;
        a3 = v73;
        goto LABEL_59;
      }
      ++v41;
      if (v42 == v32)
      {
LABEL_56:

        swift_bridgeObjectRelease(a2);
        v5 = v72;
        a3 = v73;
        goto LABEL_57;
      }
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
  __break(1u);
  return result;
}

uint64_t sub_100195240()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

double sub_100195268()
{
  uint64_t v0;

  return sub_10019068C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_100195274()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100195284(uint64_t a1)
{
  uint64_t v1;

  return sub_100190438(a1, v1, (uint64_t)sub_1001952E0, (void (*)(uint64_t, _QWORD *, uint64_t))sub_100210320);
}

uint64_t sub_1001952AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001952D4()
{
  uint64_t v0;

  return sub_1004A36B8(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

id sub_1001952E0(_QWORD *a1)
{
  return sub_100197514(a1);
}

double sub_1001952F8()
{
  uint64_t v0;

  return sub_10019036C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100195304()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100195314(uint64_t a1)
{
  uint64_t v1;

  return sub_100190438(a1, v1, (uint64_t)sub_100195340, (void (*)(uint64_t, _QWORD *, uint64_t))sub_100210638);
}

uint64_t sub_100195340(uint64_t a1)
{
  uint64_t v1;

  return sub_1001904B8(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100195358(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t, __n128);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  char v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char v45;
  _QWORD *v46;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  id v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  char *v73;
  char *v74;
  uint64_t (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v68 = a1;
  v5 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - v10;
  __chkstk_darwin(v9);
  v74 = (char *)&v62 - v12;
  v13 = *(_QWORD *)(a2 + 56);
  v69 = a2 + 56;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v72 = (unint64_t)(v14 + 63) >> 6;
  v17 = a3 & 0xFFFFFFFFFFFFFF8;
  v70 = a3 & 0xFFFFFFFFFFFFFF8;
  if (a3 < 0)
    v17 = a3;
  v63 = v17;
  v66 = a3 & 0xC000000000000001;
  v18 = swift_bridgeObjectRetain(a2);
  v19 = 0;
  v78 = a3;
  v64 = a2;
  v65 = v6;
  v71 = v5;
  v73 = v11;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_26;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
      goto LABEL_65;
    if (v23 >= v72)
    {
LABEL_62:
      swift_release(a2);
      return (uint64_t)v68;
    }
    v24 = *(_QWORD *)(v69 + 8 * v23);
    ++v19;
    if (!v24)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v72)
        goto LABEL_62;
      v24 = *(_QWORD *)(v69 + 8 * v19);
      if (!v24)
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v72)
          goto LABEL_62;
        v24 = *(_QWORD *)(v69 + 8 * v19);
        if (!v24)
        {
          v19 = v23 + 3;
          if (v23 + 3 >= v72)
            goto LABEL_62;
          v24 = *(_QWORD *)(v69 + 8 * v19);
          if (!v24)
          {
            v25 = v23 + 4;
            if (v25 >= v72)
              goto LABEL_62;
            v24 = *(_QWORD *)(v69 + 8 * v25);
            v19 = v25;
            if (!v24)
              break;
          }
        }
      }
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_26:
    v26 = *(_QWORD *)(a2 + 48);
    v76 = *(_QWORD *)(v6 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    v28 = v74;
    v27(v74, v26 + v76 * v22, v5, v18);
    v75 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    v29 = v75(v11, v28, v5);
    v30 = REMManualOrdering.PinnedList.elementObjectID.getter(v29);
    if (v30)
    {
      v31 = (void *)v30;
      v77 = v19;
      if ((unint64_t)a3 >> 62)
      {
        swift_bridgeObjectRetain(a3);
        v32 = _CocoaArrayWrapper.endIndex.getter(v63);
        if (v32)
        {
LABEL_29:
          if (v66)
            v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
          else
            v33 = *(id *)(a3 + 32);
          v34 = v33;
          v5 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v35 = static NSObject.== infix(_:_:)(v34);

          if ((v35 & 1) != 0)
          {
            v36 = swift_bridgeObjectRelease(a3);
LABEL_48:
            v27(v67, (unint64_t)v73, v71, v36);
            v46 = v68;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
            v79 = v46;
            v49 = sub_1002C66DC((uint64_t)v31);
            v50 = v46[2];
            v51 = (v48 & 1) == 0;
            v52 = v50 + v51;
            if (__OFADD__(v50, v51))
              goto LABEL_66;
            v53 = v48;
            if (v46[3] >= v52)
            {
              v5 = v71;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1002D7F98();
            }
            else
            {
              sub_1002D0644(v52, isUniquelyReferenced_nonNull_native);
              v54 = sub_1002C66DC((uint64_t)v31);
              if ((v53 & 1) != (v55 & 1))
                goto LABEL_69;
              v49 = v54;
              v5 = v71;
            }
            v6 = v65;
            v56 = v79;
            if ((v53 & 1) != 0)
            {
              (*(void (**)(unint64_t, char *, uint64_t))(v65 + 40))(v79[7] + v49 * v76, v67, v5);
            }
            else
            {
              v79[(v49 >> 6) + 8] |= 1 << v49;
              *(_QWORD *)(v56[6] + 8 * v49) = v31;
              v75((char *)(v56[7] + v49 * v76), v67, v5);
              v57 = v56[2];
              v58 = __OFADD__(v57, 1);
              v59 = v57 + 1;
              if (v58)
                goto LABEL_67;
              v56[2] = v59;
              v60 = v31;
            }
            v68 = v79;

            v20 = swift_bridgeObjectRelease(0x8000000000000000);
            a3 = v78;
          }
          else
          {
            if (v32 != 1)
            {
              if (v66)
              {
                v37 = 1;
                while (1)
                {
                  v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v78);
                  v39 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    break;
                  v40 = v38;
                  v41 = static NSObject.== infix(_:_:)(v38);
                  swift_unknownObjectRelease(v40);
                  if ((v41 & 1) != 0)
                    goto LABEL_47;
                  ++v37;
                  if (v39 == v32)
                    goto LABEL_45;
                }
                __break(1u);
              }
              else
              {
                v42 = 5;
                while (1)
                {
                  v43 = v42 - 3;
                  if (__OFADD__(v42 - 4, 1))
                    break;
                  v44 = *(id *)(v78 + 8 * v42);
                  v45 = static NSObject.== infix(_:_:)(v44);

                  if ((v45 & 1) != 0)
                  {
LABEL_47:
                    v36 = swift_bridgeObjectRelease(v78);
                    a2 = v64;
                    goto LABEL_48;
                  }
                  ++v42;
                  if (v43 == v32)
                  {
LABEL_45:

                    a3 = v78;
                    v20 = swift_bridgeObjectRelease(v78);
                    a2 = v64;
                    goto LABEL_46;
                  }
                }
              }
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }

            v20 = swift_bridgeObjectRelease(a3);
LABEL_46:
            v5 = v71;
            v6 = v65;
          }
          goto LABEL_7;
        }
      }
      else
      {
        v32 = *(_QWORD *)(v70 + 16);
        swift_bridgeObjectRetain(a3);
        if (v32)
          goto LABEL_29;
      }

      v20 = swift_bridgeObjectRelease(a3);
LABEL_7:
      v11 = v73;
      v19 = v77;
    }
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v5, v20);
  }
  while (1)
  {
    v19 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v19 >= v72)
      goto LABEL_62;
    v24 = *(_QWORD *)(v69 + 8 * v19);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v5);
  __break(1u);
  return result;
}

uint64_t sub_1001958D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void (**v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  void (**v52)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v53;
  int v54;
  uint64_t result;
  uint64_t v56;
  __n128 v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  void (**v60)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void (**v80)(char *, uint64_t, uint64_t, uint64_t);
  void (**v81)(char *, uint64_t, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  Swift::Int v88;

  v5 = v4;
  v76 = a4;
  v86 = a3;
  v83 = a1;
  v7 = type metadata accessor for UUID(0);
  v72 = *(char **)(v7 - 8);
  v73 = v7;
  __chkstk_darwin(v7);
  v71 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_10083DFB8);
  __chkstk_darwin(v9);
  v11 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v13 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v82 = (char *)v69 - v17;
  if ((unint64_t)a2 >> 62)
  {
LABEL_44:
    if (a2 < 0)
      v68 = a2;
    else
      v68 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v18 = _CocoaArrayWrapper.endIndex.getter(v68);
    if (v18)
      goto LABEL_3;
LABEL_48:
    swift_bridgeObjectRelease(a2);
    return v83;
  }
  v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v18)
    goto LABEL_48;
LABEL_3:
  v74 = a2;
  v75 = v16;
  v69[1] = v5;
  v70 = v11;
  v84 = (char *)v18;
  v85 = a2 & 0xC000000000000001;
  v19 = 4;
  v81 = v13;
  while (1)
  {
    v5 = v19 - 4;
    if (v85)
    {
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, a2);
      v16 = (char *)(v19 - 3);
      if (__OFADD__(v5, 1))
        goto LABEL_42;
    }
    else
    {
      v20 = *(id *)(a2 + 8 * v19);
      v16 = (char *)(v19 - 3);
      if (__OFADD__(v5, 1))
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    v21 = v86;
    v22 = *(_QWORD *)(v86 + 16);
    v87 = v20;
    if (v22)
      break;
    v13[7](v11, 1, 1, v12);
LABEL_5:
    sub_10000882C((uint64_t)v11, &qword_10083DFB8);
LABEL_6:

    ++v19;
    if (v16 == v84)
      goto LABEL_48;
  }
  v23 = v20;
  v24 = sub_1002C66DC((uint64_t)v23);
  if ((v25 & 1) != 0)
  {
    ((void (*)(char *, unint64_t, uint64_t))v13[2])(v11, *(_QWORD *)(v21 + 56) + (_QWORD)v13[9] * v24, v12);
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  v13[7](v11, v26, 1, v12);

  if (((unsigned int (*)(char *, uint64_t, uint64_t))v13[6])(v11, 1, v12) == 1)
    goto LABEL_5;
  v27 = v82;
  ((void (*)(char *, char *, uint64_t))v13[4])(v82, v11, v12);
  v28 = v13[2];
  v29 = v75;
  ((void (*)(char *, char *, uint64_t))v28)(v75, v27, v12);
  v80 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v23;
  v30 = v76;
  v31 = (void *)REMManualOrdering.PinnedList.elementObjectID.getter(v30);
  if (v31)
  {
    v32 = v31;
    v79 = v30;
    v33 = objc_msgSend(v31, "uuid");
    v34 = v71;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v36 = UUID.uuidString.getter(v35);
    v77 = v37;
    v78 = v36;
    v11 = v72;
    v38 = v73;
    (*((void (**)(char *, uint64_t))v72 + 1))(v34, v73);
    v39 = objc_msgSend(v32, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v81[1];
    ((void (*)(char *, uint64_t))v40)(v29, v12);
    v41 = type metadata accessor for RDElementManualSortID(0);
    a2 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    v42 = v77;
    *(_QWORD *)(a2 + 16) = v78;
    *(_QWORD *)(a2 + 24) = v42;
    v43 = v34;
    v44 = v83;
    (*((void (**)(uint64_t, char *, uint64_t))v11 + 4))(a2 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v43, v38);
    *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v79;
    if ((v44 & 0xC000000000000001) != 0)
    {
      if (v44 < 0)
        v5 = v44;
      else
        v5 = v44 & 0xFFFFFFFFFFFFFF8;
      v45 = __CocoaDictionary.count.getter(v5);
      v13 = v80;
      if (__OFADD__(v45, 1))
        goto LABEL_43;
      v44 = sub_100192534(v5, v45 + 1, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
    }
    else
    {
      v13 = v80;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    v88 = v44;
    sub_10028CCA4(a2, v13, isUniquelyReferenced_nonNull_native);
    v83 = v88;

    v57 = swift_bridgeObjectRelease(0x8000000000000000);
    v11 = v70;
LABEL_33:
    v13 = v81;
    goto LABEL_34;
  }

  v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v81[1];
  ((void (*)(char *, uint64_t))v40)(v29, v12);
  if ((v83 & 0xC000000000000001) == 0)
  {
    v59 = v83;
    swift_bridgeObjectRetain(v83);
    v60 = v80;
    v61 = sub_1002C66DC((uint64_t)v80);
    v63 = v62;
    swift_bridgeObjectRelease(v59);
    if ((v63 & 1) == 0)
    {

      goto LABEL_33;
    }
    v64 = v83;
    v65 = swift_isUniquelyReferenced_nonNull_native(v83);
    v88 = v64;
    v13 = v81;
    if ((v65 & 1) == 0)
    {
      sub_1002D6140();
      v83 = v88;
    }
    v66 = v83;

    v67 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v61);
    sub_100289D74(v61, v66);
    swift_release(v67);

    v57 = swift_bridgeObjectRelease(0x8000000000000000);
LABEL_34:
    ((void (*)(char *, uint64_t, __n128))v40)(v82, v12, v57);
    a2 = v74;
    goto LABEL_6;
  }
  v46 = v83;
  if (v83 < 0)
    v47 = v83;
  else
    v47 = v83 & 0xFFFFFFFFFFFFFF8;
  v48 = v80;
  swift_bridgeObjectRetain(v46);
  v49 = __CocoaDictionary.lookup(_:)(v48, v47);

  if (!v49)
  {

    v57 = swift_bridgeObjectRelease(v83);
    goto LABEL_33;
  }
  swift_unknownObjectRelease(v49);
  v50 = __CocoaDictionary.count.getter(v47);
  v51 = sub_100192534(v47, v50, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
  swift_retain(v51);
  v52 = v48;
  v53 = sub_1002C66DC((uint64_t)v48);
  LODWORD(v80) = v54;
  result = swift_release(v51);
  v13 = v81;
  if ((v80 & 1) != 0)
  {
    v56 = *(_QWORD *)(v51 + 48);
    v80 = v40;

    v79 = *(id *)(*(_QWORD *)(v51 + 56) + 8 * v53);
    v40 = v80;
    sub_100289D74(v53, v51);
    swift_release(v79);

    v57 = swift_bridgeObjectRelease(v83);
    v83 = v51;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_100195F14(Swift::Int a1, unint64_t a2, uint64_t isUniquelyReferenced_nonNull_native, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v60;
  unint64_t v61;
  _QWORD v62[5];
  uint64_t v63;

  v5 = a2;
  if (a2 >> 62)
  {
LABEL_57:
    if (v5 < 0)
      v53 = v5;
    else
      v53 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v7)
      goto LABEL_3;
LABEL_61:
    swift_bridgeObjectRelease(v5);
    return a1;
  }
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v7)
    goto LABEL_61;
LABEL_3:
  v61 = v5 & 0xC000000000000001;
  v8 = 4;
  v56 = v5;
  v57 = isUniquelyReferenced_nonNull_native;
  v58 = v7;
  while (1)
  {
    if (v61)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v5);
    else
      v9 = *(id *)(v5 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v12 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    if ((*(_QWORD *)isUniquelyReferenced_nonNull_native & 0xC000000000000001) == 0)
      break;
    if (v12 >= 0)
      v12 &= 0xFFFFFFFFFFFFFF8uLL;
    v13 = __CocoaDictionary.lookup(_:)(v9, v12);
    if (v13)
    {
      v14 = v13;
      v63 = v13;
      v15 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      swift_unknownObjectRetain(v14);
      swift_dynamicCast(v62, &v63, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
      v16 = (id)v62[0];
      swift_unknownObjectRelease(v14);

      if (!v16)
        goto LABEL_6;
      goto LABEL_21;
    }
LABEL_5:

LABEL_6:
LABEL_7:
    ++v8;
    if (v11 == v7)
      goto LABEL_61;
  }
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_6;
  v17 = sub_1002C66DC((uint64_t)v9);
  if ((v18 & 1) == 0)
    goto LABEL_5;
  v16 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v17);

  if (!v16)
    goto LABEL_6;
LABEL_21:
  sub_100197460(*(_QWORD *)(a4 + 16) + 40, (uint64_t)v62);
  v10 = v10;
  v19 = v16;
  v20 = sub_1005B94AC(v19, (uint64_t)v62);
  v21 = a1 & 0xC000000000000001;
  v60 = v19;
  if (v20)
  {
    v22 = v20;
    if (v21)
    {
      if (a1 < 0)
        v23 = a1;
      else
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      v24 = __CocoaDictionary.count.getter(v23);
      if (__OFADD__(v24, 1))
        goto LABEL_55;
      a1 = sub_100192534(v23, v24 + 1, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v62[0] = a1;
    v26 = sub_1002C66DC((uint64_t)v10);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      goto LABEL_54;
    v5 = v25;
    if (*(_QWORD *)(a1 + 24) >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1002D6140();
    }
    else
    {
      sub_1002CC554(v29, isUniquelyReferenced_nonNull_native);
      v30 = sub_1002C66DC((uint64_t)v10);
      if ((v5 & 1) != (v31 & 1))
        goto LABEL_63;
      v26 = v30;
    }
    isUniquelyReferenced_nonNull_native = v57;
    a1 = v62[0];
    if ((v5 & 1) != 0)
    {
      v41 = *(_QWORD *)(v62[0] + 56);
      v42 = 8 * v26;
      swift_release(*(_QWORD *)(v41 + v42));
      *(_QWORD *)(v41 + v42) = v22;
    }
    else
    {
      *(_QWORD *)(v62[0] + 8 * (v26 >> 6) + 64) |= 1 << v26;
      v43 = 8 * v26;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + v43) = v10;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + v43) = v22;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_56;
      *(_QWORD *)(a1 + 16) = v46;
      v47 = v10;
    }

    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = v56;
    goto LABEL_46;
  }
  if (!v21)
  {
    swift_bridgeObjectRetain(a1);
    v48 = sub_1002C66DC((uint64_t)v10);
    v50 = v49;
    swift_bridgeObjectRelease(a1);
    if ((v50 & 1) != 0)
    {
      v51 = swift_isUniquelyReferenced_nonNull_native(a1);
      v62[0] = a1;
      if ((v51 & 1) == 0)
      {
        sub_1002D6140();
        a1 = v62[0];
      }

      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v48);
      sub_100289D74(v48, a1);

      swift_release(v52);
      swift_bridgeObjectRelease(0x8000000000000000);
      goto LABEL_7;
    }

    goto LABEL_5;
  }
  if (a1 < 0)
    v32 = a1;
  else
    v32 = a1 & 0xFFFFFFFFFFFFFF8;
  v33 = v10;
  swift_bridgeObjectRetain(a1);
  v34 = __CocoaDictionary.lookup(_:)(v33, v32);

  if (!v34)
  {

    swift_bridgeObjectRelease(a1);
    goto LABEL_46;
  }
  swift_unknownObjectRelease(v34);
  v35 = __CocoaDictionary.count.getter(v32);
  v36 = sub_100192534(v32, v35, &qword_10083DF88, type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_1002CC554);
  swift_retain(v36);
  v37 = sub_1002C66DC((uint64_t)v33);
  v39 = v38;
  swift_release(v36);
  if ((v39 & 1) != 0)
  {

    v40 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37);
    sub_100289D74(v37, v36);

    swift_release(v40);
    swift_bridgeObjectRelease(a1);
    a1 = v36;
    isUniquelyReferenced_nonNull_native = v57;
LABEL_46:
    v7 = v58;
    goto LABEL_7;
  }
  __break(1u);
LABEL_63:
  v55 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v55);
  __break(1u);
  return result;
}

uint64_t sub_100196440(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  id v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[5];
  _QWORD *v76;

  v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v9 = sub_1000EC524(&qword_10083B520, &qword_10083AA30, off_1007D6658);
    v10 = Set.Iterator.init(_cocoa:)(v75, v7, v8, v9);
    v4 = v75[0];
    v70 = v75[1];
    v12 = v75[2];
    v11 = v75[3];
    v13 = v75[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a2 + 32);
    v70 = a2 + 56;
    v12 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(a2);
    v11 = 0;
  }
  v69 = (unint64_t)(v12 + 64) >> 6;
  v17 = a3 & 0xFFFFFFFFFFFFFF8;
  if (a3 < 0)
    v17 = a3;
  v66 = v17;
  v71 = a3 & 0xC000000000000001;
  v67 = v4;
LABEL_13:
  v68 = a1;
  while (1)
  {
    v18 = v13;
    v19 = v11;
    if ((v4 & 0x8000000000000000) == 0)
      break;
    v22 = __CocoaSet.Iterator.next()(v10);
    if (!v22)
      goto LABEL_80;
    v23 = v22;
    v74 = v22;
    v24 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(&v76, &v74, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v25 = v76;
    swift_unknownObjectRelease(v23);
    v11 = v19;
    if (!v25)
      goto LABEL_80;
LABEL_40:
    v29 = objc_msgSend(v25, "remObjectID");
    if (!v29)
      goto LABEL_16;
    v30 = v29;
    v72 = v13;
    v73 = v11;
    if ((unint64_t)a3 >> 62)
    {
      swift_bridgeObjectRetain(a3);
      v31 = _CocoaArrayWrapper.endIndex.getter(v66);
      if (v31)
      {
LABEL_43:
        if (v71)
          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
        else
          v32 = *(id *)(a3 + 32);
        v33 = v32;
        v18 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v34 = static NSObject.== infix(_:_:)(v33);

        if ((v34 & 1) != 0)
        {
          swift_bridgeObjectRelease(a3);
          if ((a1 & 0xC000000000000001) != 0)
          {
LABEL_62:
            if (a1 < 0)
              v44 = a1;
            else
              v44 = a1 & 0xFFFFFFFFFFFFFF8;
            v45 = v30;
            v46 = v25;
            v47 = __CocoaDictionary.count.getter(v44);
            if (__OFADD__(v47, 1))
              goto LABEL_85;
            a1 = sub_100191988(v44, v47 + 1);
          }
          else
          {
LABEL_68:
            v48 = v30;
            v49 = v25;
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
          v76 = (_QWORD *)a1;
          v52 = sub_1002C66DC((uint64_t)v30);
          v53 = *(_QWORD *)(a1 + 16);
          v54 = (v51 & 1) == 0;
          v55 = v53 + v54;
          if (!__OFADD__(v53, v54))
          {
            v56 = v51;
            if (*(_QWORD *)(a1 + 24) >= v55)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1002D6C90();
            }
            else
            {
              sub_1002CDEF8(v55, isUniquelyReferenced_nonNull_native);
              v57 = sub_1002C66DC((uint64_t)v30);
              if ((v56 & 1) != (v58 & 1))
              {
LABEL_87:
                result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
                __break(1u);
                return result;
              }
              v52 = v57;
            }
            v4 = v67;
            a1 = (Swift::Int)v76;
            if ((v56 & 1) != 0)
            {
              v59 = v76[7];

              *(_QWORD *)(v59 + 8 * v52) = v25;
            }
            else
            {
              v76[(v52 >> 6) + 8] |= 1 << v52;
              v60 = 8 * v52;
              *(_QWORD *)(*(_QWORD *)(a1 + 48) + v60) = v30;
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + v60) = v25;
              v61 = *(_QWORD *)(a1 + 16);
              v62 = __OFADD__(v61, 1);
              v63 = v61 + 1;
              if (v62)
              {
LABEL_86:
                __break(1u);
                goto LABEL_87;
              }
              *(_QWORD *)(a1 + 16) = v63;
              v64 = v30;
            }

            swift_bridgeObjectRelease(0x8000000000000000);
            v13 = v72;
            v11 = v73;
            goto LABEL_13;
          }
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
        if (v31 != 1)
        {
          if (v71)
          {
            v35 = 1;
            while (1)
            {
              v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v35, a3);
              v37 = v35 + 1;
              if (__OFADD__(v35, 1))
                break;
              v38 = v36;
              v39 = static NSObject.== infix(_:_:)(v36);
              swift_unknownObjectRelease(v38);
              if ((v39 & 1) != 0)
                goto LABEL_61;
              ++v35;
              if (v37 == v31)
                goto LABEL_57;
            }
            __break(1u);
          }
          else
          {
            v40 = 5;
            while (1)
            {
              v41 = v40 - 3;
              if (__OFADD__(v40 - 4, 1))
                break;
              v42 = *(id *)(a3 + 8 * v40);
              v43 = static NSObject.== infix(_:_:)(v42);

              if ((v43 & 1) != 0)
              {
LABEL_61:
                swift_bridgeObjectRelease(a3);
                a1 = v68;
                if ((v68 & 0xC000000000000001) == 0)
                  goto LABEL_68;
                goto LABEL_62;
              }
              ++v40;
              if (v41 == v31)
              {
LABEL_57:

                swift_bridgeObjectRelease(a3);
                v4 = v67;
                a1 = v68;
                goto LABEL_15;
              }
            }
          }
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
      }
    }
    else
    {
      v31 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a3);
      if (v31)
        goto LABEL_43;
    }

    swift_bridgeObjectRelease(a3);
LABEL_15:
    v13 = v72;
    v11 = v73;
LABEL_16:

  }
  if (v13)
  {
    v20 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v21 = v20 | (v11 << 6);
    goto LABEL_39;
  }
  v26 = v11 + 1;
  if (__OFADD__(v11, 1))
    goto LABEL_83;
  if (v26 >= v69)
    goto LABEL_80;
  v27 = *(_QWORD *)(v70 + 8 * v26);
  ++v11;
  if (v27)
    goto LABEL_38;
  v11 = v19 + 2;
  if (v19 + 2 >= v69)
    goto LABEL_80;
  v27 = *(_QWORD *)(v70 + 8 * v11);
  if (v27)
    goto LABEL_38;
  v11 = v19 + 3;
  if (v19 + 3 >= v69)
    goto LABEL_80;
  v27 = *(_QWORD *)(v70 + 8 * v11);
  if (v27)
    goto LABEL_38;
  v11 = v19 + 4;
  if (v19 + 4 >= v69)
    goto LABEL_80;
  v27 = *(_QWORD *)(v70 + 8 * v11);
  if (v27)
    goto LABEL_38;
  v11 = v19 + 5;
  if (v19 + 5 >= v69)
    goto LABEL_80;
  v27 = *(_QWORD *)(v70 + 8 * v11);
  if (v27)
  {
LABEL_38:
    v13 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_39:
    v25 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v21);
    if (!v25)
      goto LABEL_80;
    goto LABEL_40;
  }
  v28 = v19 + 6;
  while (v69 != v28)
  {
    v27 = *(_QWORD *)(v70 + 8 * v28++);
    if (v27)
    {
      v11 = v28 - 1;
      goto LABEL_38;
    }
  }
LABEL_80:
  sub_1000C6560(v4);
  return a1;
}

uint64_t sub_100196A4C(Swift::Int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  v5 = a2;
  if (a2 >> 62)
  {
LABEL_57:
    if (v5 < 0)
      v54 = v5;
    else
      v54 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = _CocoaArrayWrapper.endIndex.getter(v54);
    if (v7)
      goto LABEL_3;
LABEL_61:
    swift_bridgeObjectRelease(v5);
    return a1;
  }
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v7)
    goto LABEL_61;
LABEL_3:
  v63 = a3 & 0xC000000000000001;
  v64 = v5 & 0xC000000000000001;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (a3 < 0)
    v8 = a3;
  v62 = v8;
  v9 = 4;
  v57 = v5;
  v58 = a3;
  v59 = v7;
  while (1)
  {
    if (v64)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v5);
    else
      v10 = *(id *)(v5 + 8 * v9);
    v11 = v10;
    v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (!v63)
      break;
    v13 = __CocoaDictionary.lookup(_:)(v10, v62);
    if (!v13)
      goto LABEL_6;
    v14 = v13;
    v65 = v13;
    v15 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    swift_unknownObjectRetain(v14);
    swift_dynamicCast(&v66, &v65, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
    v16 = v66;
    swift_unknownObjectRelease(v14);

    if (v16)
      goto LABEL_20;
LABEL_7:

LABEL_8:
    ++v9;
    if (v12 == v7)
      goto LABEL_61;
  }
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_7;
  v17 = sub_1002C66DC((uint64_t)v10);
  if ((v18 & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  v16 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v17);

  if (!v16)
    goto LABEL_7;
LABEL_20:
  a3 = type metadata accessor for RDAccountManualSortID(0);
  v19 = *(void **)(a4 + 16);
  v20 = v11;
  swift_retain(v19);
  v61 = v16;
  v21 = sub_10048F610(v61, v19);
  v22 = a1 & 0xC000000000000001;
  if (v21)
  {
    v23 = v21;
    if (v22)
    {
      if (a1 < 0)
        v24 = a1;
      else
        v24 = a1 & 0xFFFFFFFFFFFFFF8;
      v25 = __CocoaDictionary.count.getter(v24);
      if (__OFADD__(v25, 1))
        goto LABEL_55;
      a1 = sub_100192534(v24, v25 + 1, &qword_10083DF90, type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_1002D035C);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v66 = (_QWORD *)a1;
    a3 = sub_1002C66DC((uint64_t)v20);
    v28 = *(_QWORD *)(a1 + 16);
    v29 = (v27 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      goto LABEL_54;
    v5 = v27;
    if (*(_QWORD *)(a1 + 24) >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1002D7DE0();
    }
    else
    {
      sub_1002D035C(v30, isUniquelyReferenced_nonNull_native);
      v31 = sub_1002C66DC((uint64_t)v20);
      if ((v5 & 1) != (v32 & 1))
        goto LABEL_63;
      a3 = v31;
    }
    v7 = v59;
    a1 = (Swift::Int)v66;
    if ((v5 & 1) != 0)
    {
      v42 = v66[7];
      v43 = 8 * a3;
      swift_release(*(_QWORD *)(v42 + v43));
      *(_QWORD *)(v42 + v43) = v23;
    }
    else
    {
      v66[((unint64_t)a3 >> 6) + 8] |= 1 << a3;
      v44 = 8 * a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + v44) = v20;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + v44) = v23;
      v45 = *(_QWORD *)(a1 + 16);
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_56;
      *(_QWORD *)(a1 + 16) = v47;
      v48 = v20;
    }

    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = v57;
    goto LABEL_45;
  }
  if (!v22)
  {
    swift_bridgeObjectRetain(a1);
    v49 = sub_1002C66DC((uint64_t)v20);
    v51 = v50;
    swift_bridgeObjectRelease(a1);
    a3 = v58;
    v7 = v59;
    if ((v51 & 1) != 0)
    {
      v52 = swift_isUniquelyReferenced_nonNull_native(a1);
      v66 = (_QWORD *)a1;
      if ((v52 & 1) == 0)
      {
        sub_1002D7DE0();
        a1 = (Swift::Int)v66;
      }

      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v49);
      sub_100289D74(v49, a1);

      swift_release(v53);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {

    }
    goto LABEL_8;
  }
  if (a1 < 0)
    v33 = a1;
  else
    v33 = a1 & 0xFFFFFFFFFFFFFF8;
  v34 = v20;
  swift_bridgeObjectRetain(a1);
  v35 = __CocoaDictionary.lookup(_:)(v34, v33);

  v7 = v59;
  if (!v35)
  {

    swift_bridgeObjectRelease(a1);
    goto LABEL_45;
  }
  swift_unknownObjectRelease(v35);
  v36 = __CocoaDictionary.count.getter(v33);
  v37 = sub_100192534(v33, v36, &qword_10083DF90, type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_1002D035C);
  swift_retain(v37);
  v38 = sub_1002C66DC((uint64_t)v34);
  v40 = v39;
  swift_release(v37);
  if ((v40 & 1) != 0)
  {

    v41 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v38);
    sub_100289D74(v38, v37);

    swift_release(v41);
    swift_bridgeObjectRelease(a1);
    a1 = v37;
LABEL_45:
    a3 = v58;
    goto LABEL_8;
  }
  __break(1u);
LABEL_63:
  v56 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
  __break(1u);
  return result;
}

void sub_100196F9C(uint64_t a1)
{
  sub_100197028(a1, sub_100196FC8);
}

uint64_t sub_100196FAC()
{
  uint64_t v0;

  return sub_1004A36AC(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100196FB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100196FC8(void **a1)
{
  uint64_t v1;

  sub_100190128(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100196FE8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10019701C(uint64_t a1)
{
  sub_100197028(a1, (void (*)(id *))sub_100197088);
}

void sub_100197028(uint64_t a1, void (*a2)(id *))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  v3 = v2[2];
  v4 = v2[3] + 16;
  v5 = v2[4] + 16;
  v6[2] = a1;
  v6[3] = v4;
  v6[4] = v5;
  sub_10021033C(a2, (uint64_t)v6, v3);
}

uint64_t sub_100197078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100197088(_QWORD *a1)
{
  uint64_t v1;

  sub_100190254(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1001970A4()
{
  uint64_t v0;

  sub_10018E090(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(uint64_t **)(v0 + 56));
}

unint64_t sub_1001970C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083DFB0;
  if (!qword_10083DFB0)
  {
    v1 = sub_1000A5A94(&qword_10083DFA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083DFB0);
  }
  return result;
}

char *sub_100197110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;

  v5 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v40 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - v9;
  result = (char *)_swiftEmptyArrayStorage;
  v46 = (char *)_swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v34 = v2;
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v15 = *(_QWORD *)(v6 + 72);
    v35 = v6;
    v36 = v14;
    v16 = a1 + v14;
    v17 = a2 & 0xFFFFFFFFFFFFFF8;
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v45 = v15;
    if (a2 < 0)
      v17 = a2;
    v37 = v17;
    v38 = v16;
    v42 = a2 & 0xC000000000000001;
    v43 = a2 + 56;
    v39 = v12;
    v41 = a2;
    while (1)
    {
      v18 = v44(v10, v16 + v45 * v13, v5);
      v19 = REMManualOrdering.PinnedList.elementObjectID.getter(v18);
      if (v19)
      {
        v20 = (void *)v19;
        if (v42)
        {
          v21 = __CocoaSet.contains(_:)(v19, v37);

          if ((v21 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          if (*(_QWORD *)(a2 + 16))
          {
            v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
            v23 = -1 << *(_BYTE *)(a2 + 32);
            v24 = v22 & ~v23;
            if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
              v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v24);
              v26 = static NSObject.== infix(_:_:)(v25);

              if ((v26 & 1) != 0)
              {
LABEL_18:

                a2 = v41;
                v6 = v35;
LABEL_19:
                v30 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
                v30(v40, v10, v5);
                v31 = v46;
                if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
                {
                  sub_1001C205C(0, *((_QWORD *)v31 + 2) + 1, 1);
                  v31 = v46;
                }
                v33 = *((_QWORD *)v31 + 2);
                v32 = *((_QWORD *)v31 + 3);
                if (v33 >= v32 >> 1)
                {
                  sub_1001C205C(v32 > 1, v33 + 1, 1);
                  v31 = v46;
                }
                *((_QWORD *)v31 + 2) = v33 + 1;
                v30(&v31[v36 + v33 * v45], v40, v5);
                v46 = v31;
                v16 = v38;
                v12 = v39;
                goto LABEL_7;
              }
              v27 = ~v23;
              while (1)
              {
                v24 = (v24 + 1) & v27;
                a2 = v41;
                if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
                  break;
                v28 = *(id *)(*(_QWORD *)(v41 + 48) + 8 * v24);
                v29 = static NSObject.== infix(_:_:)(v28);

                if ((v29 & 1) != 0)
                  goto LABEL_18;
              }
            }
          }

          v6 = v35;
          v16 = v38;
          v12 = v39;
        }
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
LABEL_7:
      if (++v13 == v12)
        return v46;
    }
  }
  return result;
}

uint64_t sub_10019740C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_100197440()
{
  uint64_t v0;

  return sub_10018CE30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10019744C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100197460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_1008484C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001974A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  v2 = *(_QWORD *)(v1 + 16);
  v3[2] = a1;
  sub_100210320((void (*)(_QWORD *))sub_1001952E0, (uint64_t)v3, v2);
}

uint64_t sub_1001974E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_100197514(_QWORD *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*sub_10000A388(*(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24)) + 24), "setObject:forKey:", a1[1], *a1);
}

uint64_t sub_10019756C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083DFE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100197604@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10019763C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_100197650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083E020);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083E020);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1001976E0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "housekeepingingActivityScheduler");
  qword_10083E038 = (uint64_t)result;
  return result;
}

uint64_t sub_100197718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  _QWORD v33[2];
  uint64_t v34;

  v2 = v1;
  v3 = v0;
  v30 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_signpost_type_t.begin.getter(v7);
  if (qword_100836E40 != -1)
    swift_once(&qword_100836E40, sub_1001976E0);
  v9 = qword_10083E038;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, v9, "RDStaledFileAttachmentCleanupActivity.execute", 45, 2, v6);
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v30);
  v12 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  v13 = qword_100836E38;
  swift_bridgeObjectRetain(v11);
  if (v13 != -1)
    swift_once(&qword_100836E38, sub_100197650);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10083E020);
  v15 = swift_bridgeObjectRetain_n(v11, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v29 = v2;
    v20 = v19;
    v34 = v19;
    v27 = v10;
    v28 = v3;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain(v11);
    v31 = sub_10001A820(v12, v11, &v34);
    v10 = v27;
    v3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] start execute()", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
  v32[0] = 0xD000000000000025;
  v32[1] = 0x80000001006AC1E0;
  v32[3] = 0;
  v33[0] = 0;
  v32[2] = 0;
  *(_QWORD *)((char *)v33 + 6) = 0;
  __chkstk_darwin(v21);
  *(&v26 - 4) = v3;
  *(&v26 - 3) = v12;
  *(&v26 - 2) = v11;
  sub_10035288C((uint64_t)v32, (uint64_t)sub_10019B480, (uint64_t)(&v26 - 6));
  v22 = swift_bridgeObjectRelease();
  v23 = static os_signpost_type_t.end.getter(v22);
  v24 = qword_10083E038;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v24, "RDStaledFileAttachmentCleanupActivity.execute", 45, 2, v6);
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v30);
}

void sub_100197A50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;

  v8 = objc_autoreleasePoolPush();
  sub_100197ACC(a2, a1, a3, a4);
  objc_autoreleasePoolPop(v8);
}

void sub_100197ACC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v32;
  void *v33[3];
  uint64_t v34;
  uint64_t v35;
  char v36;

  v5 = v4;
  v8 = sub_100199134();
  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_10083E020);
    v25 = swift_bridgeObjectRetain_n(a4, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (void *)swift_slowAlloc(32, -1);
      v33[0] = v29;
      *(_DWORD *)v28 = 136446210;
      swift_bridgeObjectRetain(a4);
      v34 = sub_10001A820(a3, a4, (uint64_t *)v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] there's no account supporting attachments, completing execution", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    return;
  }
LABEL_21:
  if (v8 < 0)
    v23 = v8;
  else
    v23 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_25;
LABEL_3:
  v10 = a4;
  v36 = 1;
  v11 = *(_QWORD *)(a1 + 80);
  if (v11 >= 0x7FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  v34 = v11;
  swift_bridgeObjectRetain(v8);
  a4 = 4;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, v8);
    else
      v12 = *(id *)(v8 + 8 * a4);
    v13 = v12;
    v14 = a4 - 3;
    if (__OFADD__(a4 - 4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    v33[0] = v12;
    sub_100197F48(v33, &v36, (_BYTE *)a1, a2, a3, v10, (uint64_t)&v34);
    if (v5)
    {
      swift_bridgeObjectRelease_n(v8, 2);

      return;
    }

    ++a4;
  }
  while (v14 != v9);
  swift_bridgeObjectRelease_n(v8, 2);
  if ((v36 & 1) != 0)
  {
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10083E020);
    v16 = swift_bridgeObjectRetain_n(v10, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (void *)swift_slowAlloc(32, -1);
      v33[0] = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(v10);
      v32 = sub_10001A820(a3, v10, (uint64_t *)v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s] no staled attachment left, container deemed clean", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
    }
    swift_beginAccess(a1 + 40, v33, 33, 0);
    v21 = *(_QWORD *)(a1 + 64);
    v22 = *(_QWORD *)(a1 + 72);
    sub_10001BA38(a1 + 40, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 40))(1, v21, v22);
    swift_endAccess(v33);
  }
}

void sub_100197F48(void **a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  id v42;
  id v43;
  _QWORD *v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  unint64_t v69;
  Class isa;
  id v71;
  char *v72;
  Class v73;
  id v74;
  id v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  id v93;
  id v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  os_log_t v109;
  _QWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  id v117;
  _BYTE *v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[16];
  _OWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[16];
  __int128 v133;
  _BYTE v134[32];
  uint64_t v135;
  __int128 v136;
  char v137;
  __int128 v138;
  char v139;

  v123 = a7;
  v124 = a6;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = sub_100198F84(v16);
  if (v7)
    return;
  v18 = (uint64_t)v17;
  v119 = v15;
  v120 = v13;
  v121 = (_QWORD *)v12;
  v122 = a5;
  v19 = v124;
  if (v17)
  {
    if (v17[2])
    {
      v20 = (uint64_t *)v123;
      swift_beginAccess(v123, &v131, 0, 0);
      v21 = *v20;
      v22 = *v20 <= 0;
      v118 = a2;
      if (v22)
      {
        swift_bridgeObjectRelease();
        v58 = v122;
        if (qword_100836E38 == -1)
        {
LABEL_16:
          v59 = type metadata accessor for Logger(0);
          sub_10001AAA8(v59, (uint64_t)qword_10083E020);
          swift_bridgeObjectRetain_n(v19, 2);
          v60 = a3;
          v61 = swift_retain_n(a3);
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.default.getter(v62);
          if (os_log_type_enabled(v62, v63))
          {
            v64 = swift_slowAlloc(22, -1);
            v123 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v129[0] = v123;
            *(_DWORD *)v64 = 136446466;
            swift_bridgeObjectRetain(v19);
            v127 = sub_10001A820(v58, v19, (uint64_t *)v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
            swift_bridgeObjectRelease_n(v19, 3);
            *(_WORD *)(v64 + 12) = 2048;
            v65 = *((_QWORD *)v60 + 10);
            swift_release(v60);
            v127 = v65;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
            swift_release(v60);
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "[%{public}s] no delete limit left {perRunDeleteLimit: %lu}", (uint8_t *)v64, 0x16u);
            v66 = v123;
            swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v66, -1, -1);
            swift_slowDealloc(v64, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v19, 2);
            swift_release_n(a3);
          }
          *v118 = 0;
          return;
        }
      }
      else
      {
        sub_10020CB20(v21, v18, (uint64_t)&v133);
        v138 = *(_OWORD *)&v134[8];
        v136 = v133;
        v129[0] = v133;
        v129[1] = *(_OWORD *)v134;
        v126 = v135;
        v139 = v134[24];
        v137 = v134[0];
        v129[2] = *(_OWORD *)&v134[16];
        v130 = v135;
        v23 = sub_10001A630(&qword_10083E328);
        v24 = sub_10019B49C();
        v25 = v18;
        v116 = sub_100133108();
        v26 = Sequence.mapToSet<A>(_:)(sub_100198F34, 0, v23, v121, v24, v116);
        sub_10019B4E8((uint64_t)&v136);
        sub_10019B4E8((uint64_t)&v138);
        sub_1000F4320(&v126);
        v27 = v122;
        if (qword_100836E38 != -1)
          swift_once(&qword_100836E38, sub_100197650);
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10001AAA8(v28, (uint64_t)qword_10083E020);
        swift_bridgeObjectRetain_n(v19, 2);
        v30 = v16;
        swift_bridgeObjectRetain_n(v25, 2);
        swift_bridgeObjectRetain_n(v26, 2);
        v31 = v30;
        v113 = v29;
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.default.getter(v32);
        v34 = v33;
        v35 = os_log_type_enabled(v32, v33);
        v114 = 0;
        v115 = v25;
        v117 = v31;
        if (v35)
        {
          v36 = swift_slowAlloc(52, -1);
          v111 = v34;
          v37 = v36;
          v110 = (_QWORD *)swift_slowAlloc(8, -1);
          v112 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v129[0] = v112;
          *(_DWORD *)v37 = 136447234;
          swift_bridgeObjectRetain(v19);
          v127 = sub_10001A820(v27, v19, (uint64_t *)v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
          v38 = v19;
          swift_bridgeObjectRelease_n(v19, 3);
          v109 = v32;
          *(_WORD *)(v37 + 12) = 2048;
          v39 = *(_QWORD *)(v26 + 16);
          swift_bridgeObjectRelease();
          v127 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
          swift_bridgeObjectRelease();
          *(_WORD *)(v37 + 22) = 2048;
          v40 = (id *)v123;
          swift_beginAccess(v123, &v127, 0, 0);
          v125 = (uint64_t)*v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
          *(_WORD *)(v37 + 32) = 2048;
          v41 = *(_QWORD *)(v25 + 16);
          swift_bridgeObjectRelease();
          v125 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
          swift_bridgeObjectRelease();
          *(_WORD *)(v37 + 42) = 2114;
          v42 = v117;
          v125 = (uint64_t)v117;
          v43 = v117;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
          v44 = v110;
          *v110 = v42;

          v45 = v109;
          _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v111, "[%{public}s] going to purge staled attachments {to-purge.count: %ld, limit-left: %ld, total-staled: %ld, accountID: %{public}@}", (uint8_t *)v37, 0x34u);
          v46 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v44, 1, v46);
          swift_slowDealloc(v44, -1, -1);
          v47 = v112;
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v37, -1, -1);

          v48 = v42;
        }
        else
        {

          v38 = v19;
          swift_bridgeObjectRelease_n(v19, 2);
          swift_bridgeObjectRelease_n(v26, 2);
          swift_bridgeObjectRelease_n(v25, 2);
          v48 = v31;
        }
        v67 = (void *)*((_QWORD *)a3 + 4);
        v68 = v121;
        v69 = v116;
        isa = Set._bridgeToObjectiveC()().super.isa;
        v71 = objc_msgSend(v48, "uuid");
        v72 = v119;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v71);

        v73 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, _QWORD *))(v120 + 8))(v72, v68);
        *(_QWORD *)&v129[0] = 0;
        v74 = objc_msgSend(v67, "purgeAttachmentFilesWithAttachmentIDs:accountID:error:", isa, v73, v129);

        v75 = *(id *)&v129[0];
        if (!v74)
        {
          v91 = v75;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)(v91);

          swift_willThrow(v92);
          *v118 = 0;
          return;
        }
        v76 = v69;
        v77 = v38;
        v78 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v74, v68, v76);

        v79 = *(_QWORD *)(v78 + 16);
        v80 = *(_QWORD *)(v26 + 16);
        swift_bridgeObjectRelease();
        if (v79 == v80)
        {
          swift_bridgeObjectRetain_n(v77, 2);
          v81 = v117;
          swift_bridgeObjectRetain_n(v78, 2);
          v82 = v81;
          v83 = Logger.logObject.getter(v82);
          v84 = static os_log_type_t.default.getter(v83);
          v58 = v84;
          if (os_log_type_enabled(v83, v84))
          {
            v85 = swift_slowAlloc(32, -1);
            v121 = (_QWORD *)swift_slowAlloc(8, -1);
            v124 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v129[0] = v124;
            *(_DWORD *)v85 = 136446722;
            swift_bridgeObjectRetain(v77);
            v125 = sub_10001A820(v122, v77, (uint64_t *)v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            swift_bridgeObjectRelease_n(v77, 3);
            *(_WORD *)(v85 + 12) = 2048;
            v86 = *(_QWORD *)(v78 + 16);
            swift_bridgeObjectRelease();
            v125 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            swift_bridgeObjectRelease();
            *(_WORD *)(v85 + 22) = 2114;
            v125 = (uint64_t)v82;
            v87 = v82;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            v88 = v121;
            *v121 = v82;

            _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v58, "[%{public}s] purge was successful {purged.count: %ld, accountID: %{public}@}", (uint8_t *)v85, 0x20u);
            v89 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v88, 1, v89);
            swift_slowDealloc(v88, -1, -1);
            v90 = v124;
            swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v90, -1, -1);
            swift_slowDealloc(v85, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v77, 2);
            swift_bridgeObjectRelease_n(v78, 2);
          }
          v19 = v114;
          a3 = v118;
          v103 = (_QWORD *)v123;
          v104 = *(_QWORD *)(v78 + 16);
          v105 = *(_QWORD *)(v115 + 16);
          swift_bridgeObjectRelease();
          v106 = v104 == v105;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain_n(v77, 2);
          v93 = v117;
          swift_bridgeObjectRetain_n(v78, 2);
          v94 = v93;
          v95 = Logger.logObject.getter(v94);
          v96 = static os_log_type_t.error.getter();
          v58 = v96;
          if (os_log_type_enabled(v95, v96))
          {
            v97 = swift_slowAlloc(32, -1);
            v121 = (_QWORD *)swift_slowAlloc(8, -1);
            v124 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v129[0] = v124;
            *(_DWORD *)v97 = 136446722;
            swift_bridgeObjectRetain(v77);
            v125 = sub_10001A820(v122, v77, (uint64_t *)v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            swift_bridgeObjectRelease_n(v77, 3);
            *(_WORD *)(v97 + 12) = 2048;
            v98 = *(_QWORD *)(v78 + 16);
            swift_bridgeObjectRelease();
            v125 = v98;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            swift_bridgeObjectRelease();
            *(_WORD *)(v97 + 22) = 2114;
            v125 = (uint64_t)v94;
            v99 = v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
            v100 = v121;
            *v121 = v94;

            _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v58, "[%{public}s] some purge wasn't successful {purged.count: %ld, accountID: %{public}@}", (uint8_t *)v97, 0x20u);
            v101 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v100, 1, v101);
            swift_slowDealloc(v100, -1, -1);
            v102 = v124;
            swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v102, -1, -1);
            swift_slowDealloc(v97, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v77, 2);
            swift_bridgeObjectRelease_n(v78, 2);
          }
          v106 = 0;
          v19 = v114;
          a3 = v118;
          v103 = (_QWORD *)v123;
        }
        v107 = *(_QWORD *)(v78 + 16);
        swift_bridgeObjectRelease();
        swift_beginAccess(v103, v129, 1, 0);
        if (!__OFSUB__(*v103, v107))
        {
          *v103 -= v107;
          if (!v106)
            *a3 = 0;
          return;
        }
        __break(1u);
      }
      swift_once(&qword_100836E38, sub_100197650);
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_100836E38 != -1)
    swift_once(&qword_100836E38, sub_100197650);
  v49 = type metadata accessor for Logger(0);
  sub_10001AAA8(v49, (uint64_t)qword_10083E020);
  swift_bridgeObjectRetain_n(v19, 2);
  v50 = v16;
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc(22, -1);
    v121 = (_QWORD *)swift_slowAlloc(8, -1);
    v123 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v129[0] = v123;
    *(_DWORD *)v53 = 136446466;
    swift_bridgeObjectRetain(v19);
    v131 = sub_10001A820(v122, v19, (uint64_t *)v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
    swift_bridgeObjectRelease_n(v19, 3);
    *(_WORD *)(v53 + 12) = 2114;
    v131 = (uint64_t)v50;
    v54 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
    v55 = v121;
    *v121 = v50;

    _os_log_impl((void *)&_mh_execute_header, v51, v52, "[%{public}s] no staled attachment found for {accountID: %{public}@}", (uint8_t *)v53, 0x16u);
    v56 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v55, 1, v56);
    swift_slowDealloc(v55, -1, -1);
    v57 = v123;
    swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
  }
}

uint64_t sub_100198F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

id sub_100198F84(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  Class isa;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  id v20;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v2 + 32);
  v10 = objc_msgSend(a1, "uuid", v6);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v20 = 0;
  v12 = objc_msgSend(v9, "attachmentIDsFromAttachmentDirectoryWithAccountID:error:", isa, &v20);

  v13 = v20;
  if (v12)
  {
    v14 = sub_100133108();
    v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v4, v14);

    if (*(_QWORD *)(v15 + 16))
    {
      v16 = sub_100199764(a1);
      v12 = sub_100215F58((uint64_t)v16, v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    v17 = v13;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v18);
  }
  return v12;
}

uint64_t sub_100199134()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  result = sub_1001993BC();
  v1 = result;
  if (!((unint64_t)result >> 62))
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_31;
    goto LABEL_18;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v2 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
    else
      v6 = *(id *)(v1 + 8 * i + 32);
    v7 = v6;
    v8 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v6, "type"));
    v9 = objc_msgSend(v8, "supportsAttachments");

    if (v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v4 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
      v5 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v7);
      specialized ContiguousArray._endMutation()(v5);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_31;
LABEL_18:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v11 = _swiftEmptyArrayStorage[2];
    result = swift_retain();
    if (!v11)
    {
LABEL_32:
      swift_release(_swiftEmptyArrayStorage);
      swift_release(_swiftEmptyArrayStorage);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_20;
  }
LABEL_31:
  v20 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v20);
  v11 = result;
  if (!result)
    goto LABEL_32;
LABEL_20:
  if (v11 >= 1)
  {
    for (j = 0; j != v11; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
      else
        v14 = (id)_swiftEmptyArrayStorage[j + 4];
      v15 = v14;
      v16 = objc_msgSend(v14, "remObjectID");

      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v19 >= v18 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1);
        v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
        specialized Array._endMutation()(v13);
      }
    }
    goto LABEL_32;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1001993BC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[48];

  sub_10034B07C(3, 0, 7);
  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v2, v13);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006AC3C0);
  KeyPath = swift_getKeyPath(&unk_1006AC3F0);
  *(_QWORD *)(inited + 40) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  v5 = (void *)sub_100357FC0(inited, 0, 0, (uint64_t)v1);
  swift_bridgeObjectRelease();
  v6 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v7 = swift_getKeyPath(&unk_1006AC3F0);
  v8 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v7, 1);
  *(_QWORD *)(v6 + 32) = v8;
  specialized Array._endMutation()(v8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v10 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v11 = NSManagedObjectContext.fetch<A>(_:)(v5, v10);

  return v11;
}

char *sub_100199764(void *a1)
{
  uint64_t v1;
  void *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v8;

  v3 = objc_autoreleasePoolPush();
  sub_100199800(a1, v1, &v8);
  objc_autoreleasePoolPop(v3);
  v4 = v8;
  v5 = objc_autoreleasePoolPush();
  sub_100199D20((uint64_t)a1, v1, &v8);
  objc_autoreleasePoolPop(v5);
  v6 = v8;
  v8 = v4;
  sub_1001E2CE0((uint64_t)v6);
  return v8;
}

void sub_100199800(void *a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  char **v43;
  uint64_t v44;
  _QWORD v45[3];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = v3;
  v44 = a2;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006AC378);
  v11 = a1;
  v12 = objc_msgSend(v11, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 0, 1, v13);
  v14 = (void *)sub_1002E8950(KeyPath, (uint64_t)v9);
  swift_release(KeyPath);
  v15 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  v17 = v49[2];
  v16 = v49[3];
  if (v17 >= v16 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
  specialized Array._endMutation()(v18);

  v19 = (void *)sub_10000D2BC(v49);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v21 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
  v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v21), "entity");
  objc_msgSend(v20, "setEntity:", v22);

  objc_msgSend(v20, "setAffectedStores:", 0);
  objc_msgSend(v20, "setPredicate:", v19);
  objc_msgSend(v20, "setResultType:", 2);
  v23 = sub_10001A630((uint64_t *)&unk_100839E80);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 32) = 0x696669746E656469;
  *(_QWORD *)(v24 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v26 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v27 = NSManagedObjectContext.fetch<A>(_:)(v20, v26);
  if (v3)
  {
    v43 = a3;
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_10083E020);
    swift_errorRetain(v3);
    swift_errorRetain(v3);
    v29 = v44;
    v30 = swift_retain();
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v42 = (_QWORD *)swift_slowAlloc(64, -1);
      v49 = v42;
      *(_DWORD *)v33 = 136446466;
      v34 = *(_QWORD *)(v29 + 16);
      v35 = *(_QWORD *)(v29 + 24);
      swift_bridgeObjectRetain(v35);
      v47 = sub_10001A820(v34, v35, (uint64_t *)&v49);
      v41 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_release(v29);
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2082;
      swift_getErrorValue(v4, v46, v45);
      v36 = Error.rem_errorDescription.getter(v45[1], v45[2]);
      v47 = sub_10001A820(v36, v37, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s] failed to fetch file attachment UUIDs from database {error: %{public}s}", (uint8_t *)v33, 0x16u);
      v38 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {
      swift_release(v29);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    swift_errorRelease(v4);
    v39 = (char *)_swiftEmptyArrayStorage;
    a3 = v43;
  }
  else
  {
    v39 = sub_10019B068(v27, 0x696669746E656469, 0xEA00000000007265);
    swift_bridgeObjectRelease();

  }
  *a3 = v39;
}

void sub_100199D20(uint64_t a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char **v29;
  void *v30;
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  sub_10050DEE8(a1, 96);
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = type metadata accessor for REMCDSavedAttachment();
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v9, "setEntity:", v11);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v8);
  objc_msgSend(v9, "setResultType:", 2);
  v12 = sub_10001A630((uint64_t *)&unk_100839E80);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 32) = 0x696669746E656469;
  *(_QWORD *)(v13 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v15 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v9, v15);
  if (v3)
  {
    v30 = v8;
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10083E020);
    swift_errorRetain(v3);
    swift_errorRetain(v3);
    v18 = swift_retain();
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v29 = a3;
      v21 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v35 = v28;
      *(_DWORD *)v21 = 136446466;
      v22 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain(v23);
      v33 = sub_10001A820(v22, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_release(a2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      swift_getErrorValue(v4, v32, v31);
      v24 = Error.rem_errorDescription.getter(v31[1], v31[2]);
      v33 = sub_10001A820(v24, v25, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%{public}s] failed to fetch saved attachment UUIDs from database {error: %{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v26 = v21;
      a3 = v29;
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_release(a2);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }

    swift_errorRelease(v4);
    v27 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    v27 = sub_10019B068(v16, 0x696669746E656469, 0xEA00000000007265);
    swift_bridgeObjectRelease();

  }
  *a3 = v27;
}

uint64_t sub_10019A114()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_10019A148()
{
  return sub_100197718();
}

uint64_t sub_10019A168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

BOOL sub_10019A198()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 32];
  sub_10000A388(v2, v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
  if (!v5)
  {
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10083E020);
    v7 = v1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v16 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier];
      v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier + 8];
      swift_bridgeObjectRetain(v13);
      v15 = sub_10001A820(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] configuration validation fail - cannot execute because configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
  return v5 != 0;
}

uint64_t sub_10019A378@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  ObjectType = swift_getObjectType(v1);
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 24];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 32];
  sub_10000A388(&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states], v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  v7 = v1;
  v8 = v6(v4, v5);
  v9 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24];
  v10 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 32];
  sub_10000A388(&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations], v9);
  v11 = 8;
  if ((v8 & 1) != 0)
    v11 = 16;
  v12 = (*(double (**)(uint64_t))(*(_QWORD *)(v10 + 24) + v11))(v9);
  v17 = ObjectType;
  v18 = &off_1007E7DA0;
  *(_QWORD *)&v16 = v7;
  v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v14 = swift_allocObject(v13, 64, 7);
  result = sub_10001BCA8(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a1[3] = v13;
  a1[4] = (uint64_t)&off_1007F54C8;
  *a1 = v14;
  return result;
}

unint64_t sub_10019A490()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

double sub_10019A5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;

  v1 = v0[3];
  v2 = v0[4];
  sub_10000A388(v0, v1);
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  return v5;
}

uint64_t sub_10019A608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDStaledFileAttachmentCleanupActivity();
  if (swift_dynamicCast(&v25, v26, v5, v6, 0))
  {

    v7 = v2 + 16;
    swift_beginAccess(v7, &v20, 0, 0);
    sub_100018618(v7, (uint64_t)v22);
    v8 = v23;
    v9 = v24;
    sub_10000A388(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_10083E020);
    v12 = sub_100018618(a1, (uint64_t)v22);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136446210;
      sub_100018618((uint64_t)v22, (uint64_t)&v20);
      v17 = String.init<A>(describing:)(&v20, v5);
      v20 = sub_10001A820(v17, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDStaledFileAttachmentCleanupExecutionDateStorage.lastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_10019A880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v27);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDStaledFileAttachmentCleanupActivity();
  if (swift_dynamicCast(&v23, v27, v8, v9, 0))
  {

    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    swift_beginAccess(v2 + 16, v26, 33, 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = *(_QWORD *)(v2 + 48);
    sub_10001BA38(v2 + 16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, v12, v13);
    swift_endAccess(v26);
  }
  else
  {
    if (qword_100836E38 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_10083E020);
    v15 = sub_100018618(a1, (uint64_t)v26);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      sub_100018618((uint64_t)v26, (uint64_t)&v23);
      v20 = String.init<A>(describing:)(&v23, v8);
      v23 = (id)sub_10001A820(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDStaledFileAttachmentCleanupExecutionDateStorage.updateLastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
}

uint64_t sub_10019AB30()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_10019AB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019A608(a1, a2);
}

uint64_t sub_10019AB74(uint64_t a1, uint64_t a2)
{
  return sub_10019A880(a1, a2);
}

uint64_t sub_10019AC6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable);
  a1[3] = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  a1[4] = &off_1007E7D50;
  a1[5] = &off_1007E7D60;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_10019ACBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 32);
  sub_10000A388((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24);
  v7 = v5[4];
  sub_10000A388(v5, v6);
  v8 = 8;
  if ((v4 & 1) != 0)
    v8 = 16;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 24) + v8))(v6);
}

uint64_t sub_10019AD50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10083ECE0);
}

uint64_t sub_10019AD7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100008868(v3, a1, (uint64_t *)&unk_10083E300);
}

uint64_t sub_10019ADD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10019A378(a1);
}

uint64_t sub_10019ADF4()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10019AE30@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executionDateStorage, a1);
}

uint64_t sub_10019AE58@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "staledFileAttachmentCleanupLastExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10019AEDC(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v3, "setStaledFileAttachmentCleanupLastExecutionDate:");

}

id sub_10019AF7C()
{
  id *v0;

  return objc_msgSend(*v0, "staledFileAttachmentCleanupContainerDeemedClean");
}

id sub_10019AF9C(char a1)
{
  id *v1;

  return objc_msgSend(*v1, "setStaledFileAttachmentCleanupContainerDeemedClean:", a1 & 1);
}

id sub_10019AFB4()
{
  id *v0;

  return objc_msgSend(*v0, "staledFileAttachmentCleanupDefaultThrottleInterval");
}

id sub_10019AFC4()
{
  id *v0;

  return objc_msgSend(*v0, "staledFileAttachmentCleanupBackoffThrottleInterval");
}

id sub_10019AFD4()
{
  id *v0;

  return objc_msgSend(*v0, "staledFileAttachmentCleanupRateReduceFactor");
}

id sub_10019AFF8()
{
  id *v0;

  return objc_msgSend(*v0, "staledFileAttachmentCleanupPerRunDeleteLimit");
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity()
{
  return objc_opt_self(_TtC7remindd37RDStaledFileAttachmentCleanupActivity);
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable()
{
  return objc_opt_self(_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25747RDStaledFileAttachmentCleanupActivityExecutable);
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25749RDStaledFileAttachmentCleanupExecutionDateStorage);
}

char *sub_10019B068(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  int v22;
  __n128 v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;

  v4 = v3;
  v42 = a3;
  v37 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v36 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v32 = (char *)&v31 - v14;
  v38 = a1;
  if (a1 >> 62)
    goto LABEL_24;
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v15)
  {
    do
    {
      v31 = v4;
      v35 = v9 & 0xC000000000000001;
      v16 = (char *)_swiftEmptyArrayStorage;
      v17 = 4;
      v33 = (char *)&type metadata for Any + 8;
      v34 = v15;
      while (1)
      {
        v18 = v35
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v9)
            : *(id *)(v9 + 8 * v17);
        v19 = v18;
        v4 = v17 - 3;
        if (__OFADD__(v17 - 4, 1))
          break;
        *(_QWORD *)&v39[0] = v37;
        *((_QWORD *)&v39[0] + 1) = v42;
        swift_bridgeObjectRetain_n(v42, 2);
        v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v39, &type metadata for String);
        v21 = objc_msgSend(v19, "__swift_objectForKeyedSubscript:", v20);
        swift_unknownObjectRelease(v20);
        if (v21)
        {
          _bridgeAnyObjectToAny(_:)(v39, v21);
          swift_unknownObjectRelease(v21);
        }
        else
        {
          memset(v39, 0, sizeof(v39));
        }
        sub_10001A5E8((uint64_t)v39, (uint64_t)v40);
        if (v41)
        {
          v22 = swift_dynamicCast(v8, v40, v33, v10, 6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, v22 ^ 1u, 1, v10);

          v23 = swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_10000882C((uint64_t)v40, (uint64_t *)&unk_10083D5B0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);

        }
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v8, 1, v10, v23) == 1)
        {
          sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
        }
        else
        {
          v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
          v25 = v32;
          v24(v32, v8, v10);
          v24(v36, v25, v10);
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            v16 = (char *)sub_1002C8EC4(0, *((_QWORD *)v16 + 2) + 1, 1, (unint64_t)v16);
          v27 = *((_QWORD *)v16 + 2);
          v26 = *((_QWORD *)v16 + 3);
          if (v27 >= v26 >> 1)
            v16 = (char *)sub_1002C8EC4(v26 > 1, v27 + 1, 1, (unint64_t)v16);
          *((_QWORD *)v16 + 2) = v27 + 1;
          v24(&v16[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v27], v36, v10);
        }
        ++v17;
        v9 = v38;
        if (v4 == v34)
        {
          swift_bridgeObjectRelease();
          return v16;
        }
      }
      __break(1u);
LABEL_24:
      if (v9 < 0)
        v28 = v38;
      else
        v28 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v29 = _CocoaArrayWrapper.endIndex.getter(v28);
      v9 = v38;
      v15 = v29;
    }
    while (v29);
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

id sub_10019B410@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10019B448(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

const char *sub_10019B46C()
{
  return "type";
}

void sub_10019B480(uint64_t a1)
{
  uint64_t v1;

  sub_100197A50(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_10019B49C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083E330;
  if (!qword_10083E330)
  {
    v1 = sub_1000A5A94(&qword_10083E328);
    result = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10083E330);
  }
  return result;
}

uint64_t sub_10019B4E8(uint64_t a1)
{
  sub_1000E515C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t initializeWithCopy for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(_QWORD *a1, _QWORD *a2)
{
  sub_10012F174(a1, a2);
  return a1;
}

__n128 initializeWithTake for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer()
{
  return &type metadata for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer;
}

uint64_t sub_10019B664(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10083E360, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchFlatInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchFlatInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_10019B6A0(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Configuration;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __n128 v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);

  v96 = a2;
  v98 = a4;
  v86 = a3;
  v92 = a5;
  v6 = sub_10001A630(&qword_100839AA0);
  v7 = __chkstk_darwin(v6);
  v88 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v7);
  v90 = *(_QWORD *)(v9 - 8);
  v91 = v9;
  __chkstk_darwin(v9);
  v89 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v94 = (char *)&v76 - v12;
  v13 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v13);
  v84 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v93 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (uint64_t *)((char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v18 = (char *)&v76 - v17;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v20 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v76 - v28;
  v97 = a1;
  v30 = v99;
  v31 = sub_10019C0A8(a1, v98);
  if (v30)
    return;
  v77 = v22;
  v78 = v20;
  v79 = Configuration;
  v82 = v18;
  v83 = v29;
  v99 = v31;
  v80 = v26;
  v81 = v24;
  v32 = v97;
  v33 = sub_10019C7D8(v97);
  v35 = v34;
  v36 = objc_msgSend(v95, "fetchResultTokenToDiffAgainst");
  v37 = (uint64_t)v83;
  sub_100493C24(v36, v32, (uint64_t)v83);

  v96 = 0;
  LODWORD(v95) = v35;
  v76 = v33;
  v38 = v77;
  v40 = REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter(v39);
  v41 = v82;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v40);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v38, v79);
  v42 = v93;
  v43 = v85;
  v44 = v87;
  (*(void (**)(uint64_t *, char *, uint64_t))(v93 + 16))(v85, v41, v87);
  v45 = (*(uint64_t (**)(uint64_t *, uint64_t))(v42 + 88))(v43, v44);
  if (v45 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v42 + 96))(v43, v44);
    v47 = *v43;
    v48 = (uint64_t)v99;
    swift_bridgeObjectRetain(v99);
    v49 = sub_10049BB18(v47, v48, v32, v86, 0);
    v50 = _swiftEmptyArrayStorage;
    v51 = v88;
    v52 = v80;
  }
  else
  {
    v51 = v88;
    v52 = v80;
    v53 = v86;
    if (v45 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v42 + 96))(v43, v44);
      v54 = *v43;
      swift_bridgeObjectRetain(v99);
      v49 = sub_10049C4C8(v54, v37, v32, v53, 0);
      v50 = _swiftEmptyArrayStorage;
    }
    else
    {
      if (v45 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
      {
        v60 = v89;
        v59 = v90;
        v61 = v94;
        if (v45 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
        {
          _diagnoseUnexpectedEnumCase<A>(type:)(v44, v44);
          __break(1u);
          return;
        }
        v50 = _swiftEmptyArrayStorage;
        v49 = _swiftEmptyArrayStorage;
        goto LABEL_9;
      }
      (*(void (**)(uint64_t *, uint64_t))(v42 + 96))(v43, v44);
      v55 = *v43;
      v56 = sub_10001A630(&qword_100839AA8);
      v57 = v84;
      sub_100128FE0((uint64_t)v43 + *(int *)(v56 + 48), v84);
      v58 = (uint64_t)v99;
      swift_bridgeObjectRetain(v99);
      v49 = sub_10049BB18(v55, v58, v32, v53, 0);
      v50 = sub_10049CB18(v57, v58, v32, v53, 0);
      sub_10019CCC4(v57);
    }
  }
  v46 = swift_bridgeObjectRelease();
  v60 = v89;
  v59 = v90;
  v61 = v94;
LABEL_9:
  (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v82, v44, v46);
  if ((v95 & 1) != 0)
  {
    v65 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v51, 1, 1, v65);
    v63 = v99;
  }
  else
  {
    v63 = v99;
    REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)(v76, *((_QWORD *)v99 + 2), v62);
    v64 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v51, 0, 1, v64);
  }
  REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v63, v51, 2, v49, v50);
  v66 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v67 = v61;
  v68 = v59;
  v69 = v91;
  v66(v60, v67, v91);
  v70 = v81;
  v71 = v52;
  v72 = v52;
  v73 = (uint64_t)v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v71, v83, v23);
  v74 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
  v75 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v60, v72, v69, v74, v75);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v94, v69);
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v73, v23);
}

uint64_t sub_10019BCD8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_10019BE34((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release(v2);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_10019BE34((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_10019BE34(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v27 = a2;
  v29 = 0;
  v3 = 0;
  v6 = *(_QWORD *)(a3 + 56);
  v4 = a3 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(v4 - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v30 = v4;
  v31 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v3 << 6);
LABEL_22:
    v16 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v17 = objc_msgSend(v16, "entityName", v27);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    if (v18 == v22 && v20 == v24)
    {

      swift_bridgeObjectRelease_n(v20, 2);
LABEL_5:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v29++, 1))
        goto LABEL_31;
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v24, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_5;
    }
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v13);
  ++v3;
  if (v14)
    goto LABEL_21;
  v3 = v13 + 1;
  if (v13 + 1 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v3);
  if (v14)
    goto LABEL_21;
  v3 = v13 + 2;
  if (v13 + 2 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v3);
  if (v14)
  {
LABEL_21:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_28:
    swift_retain();
    sub_10021885C(a1, v27, v29, a3);
    return;
  }
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v3 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v3 >= v31)
      goto LABEL_28;
    v14 = *(_QWORD *)(v30 + 8 * v3);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void (*sub_10019C0A8(uint64_t a1, uint64_t a2))(char *, uint64_t)
{
  uint64_t Subtasks;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Configuration;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t **v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102[2];
  unint64_t *v103;

  v94 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v97 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v10);
  v92 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v12);
  v90 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v93 = (uint64_t)&v80 - v15;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v87 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v91 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v89 = (char *)&v80 - v19;
  __chkstk_darwin(v20);
  v88 = (char *)&v80 - v21;
  v85 = _s10PredicatesOMa(0);
  v22 = __chkstk_darwin(v85);
  v86 = (uint64_t *)((char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = REMRemindersListDataView.SearchFlatInvocation.Parameters.objectIDs.getter(v22);
  v98 = v6;
  v99 = Subtasks;
  v95 = v9;
  v96 = v7;
  if ((v24 & 0xC000000000000001) != 0)
  {
    v83 = v12;
    v84 = v5;
    v25 = &_swiftEmptySetSingleton;
    v103 = (unint64_t *)&_swiftEmptySetSingleton;
    if (v24 >= 0)
      v24 &= 0xFFFFFFFFFFFFFF8uLL;
    v12 = __CocoaSet.makeIterator()(v24);
    v26 = __CocoaSet.Iterator.next()(v12);
    if (v26)
    {
      v27 = v26;
      v81 = Configuration;
      v82 = a2;
      v28 = type metadata accessor for REMObjectID_Codable(0);
      while (1)
      {
        v101 = v27;
        swift_dynamicCast(v102, &v101, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
        v36 = objc_msgSend(v102[0], "entityName");
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        v40 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
        v5 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v42 = v41;

        if ((char *)v37 == v5 && v39 == v42)
          break;
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v5, v42, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
          goto LABEL_17;

LABEL_9:
        v27 = __CocoaSet.Iterator.next()(v30);
        if (!v27)
        {
          v25 = v103;
          Configuration = v81;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease_n(v39, 2);
LABEL_17:
      v45 = (uint64_t **)v102[0];
      Configuration = (uint64_t)v103;
      v46 = v103[2];
      if (v103[3] <= v46)
      {
        sub_1002DEAB4(v46 + 1);
        Configuration = (uint64_t)v103;
      }
      v29 = (uint64_t)v45;
      v30 = NSObject._rawHashValue(seed:)(*(_QWORD *)(Configuration + 40));
      v31 = Configuration + 56;
      v32 = -1 << *(_BYTE *)(Configuration + 32);
      v33 = v30 & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(Configuration + 56 + 8 * (v33 >> 6))) != 0)
      {
        v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(Configuration + 56 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v47 = 0;
        v48 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v48 && (v47 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v49 = v34 == v48;
          if (v34 == v48)
            v34 = 0;
          v47 |= v49;
          v50 = *(_QWORD *)(v31 + 8 * v34);
        }
        while (v50 == -1);
        v35 = __clz(__rbit64(~v50)) + (v34 << 6);
      }
      *(_QWORD *)(v31 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
      *(_QWORD *)(*(_QWORD *)(Configuration + 48) + 8 * v35) = v45;
      ++*(_QWORD *)(Configuration + 16);
      goto LABEL_9;
    }
LABEL_29:
    swift_release(v12);
    v12 = v83;
    v5 = v84;
  }
  else
  {
    v51 = v100;
    v25 = (void *)sub_10019BCD8(v24);
    v100 = v51;
  }
  v29 = (uint64_t)sub_1001E8984((uint64_t)v25);
  swift_release(v25);
  if (v29 < 0 || (v29 & 0x4000000000000000) != 0)
  {
LABEL_36:
    v78 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v29);
    v53 = _bridgeCocoaArray<A>(_:)(v79, v78);
    swift_release(v29);
  }
  else
  {
    swift_bridgeObjectRetain(v29);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v52);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v53 = v29;
  }
  swift_release(v29);
  sub_10001A630(&qword_10083E368);
  v54 = (uint64_t)v86;
  *v86 = v53;
  v55 = v88;
  v56 = ((uint64_t (*)(void))REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter)();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v56);
  v57 = *(void (**)(char *, uint64_t))(v87 + 8);
  v57(v55, Configuration);
  swift_storeEnumTagMultiPayload(v54, v85, 19);
  sub_10000D2C0();
  v59 = v58;
  v60 = sub_10001C744(v54, _s10PredicatesOMa);
  v61 = REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter(v60);
  v62 = v92;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v61);
  v57(v55, Configuration);
  v63 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v64 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v65 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v90, v63, v64);
  swift_storeEnumTagMultiPayload(v65, v12, 2);
  v66 = (uint64_t)v62;
  v67 = v93;
  v68 = sub_1004957D0(v66, v65, v93);
  v69 = v89;
  v70 = REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter(v68);
  v71 = (uint64_t)v95;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v70);
  v72 = ((uint64_t (*)(char *, uint64_t))v57)(v69, Configuration);
  v73 = v91;
  v74 = REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter(v72);
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v74);
  v57(v73, Configuration);
  v75 = v100;
  v76 = (void (*)(char *, uint64_t))sub_100496780(v94, (uint64_t)v59, v67, 0, 0, v71, (uint64_t)v5, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v75)
  {
    v57 = v76;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v97 + 8))(v5, v99);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v71, v98);
  sub_10001C744(v67, _s9UtilitiesO12SortingStyleOMa);
  return v57;
}

uint64_t sub_10019C7D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Configuration;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t **v36;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t *v62;

  v59 = _s10PredicatesOMa(0);
  __chkstk_darwin(v59);
  v4 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v6 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter(v9);
  v11 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Configuration);
  if ((v11 & 1) == 0)
    return 0;
  v13 = REMRemindersListDataView.SearchFlatInvocation.Parameters.objectIDs.getter(v12);
  if ((v13 & 0xC000000000000001) != 0)
  {
    v58 = v11;
    v14 = &_swiftEmptySetSingleton;
    v62 = (unint64_t *)&_swiftEmptySetSingleton;
    if (v13 >= 0)
      v13 &= 0xFFFFFFFFFFFFFF8uLL;
    v15 = __CocoaSet.makeIterator()(v13);
    v16 = __CocoaSet.Iterator.next()(v15);
    if (v16)
    {
      v17 = v16;
      v55 = v4;
      v56 = a1;
      v57 = v1;
      v18 = type metadata accessor for REMObjectID_Codable(0);
      v4 = -1;
      while (1)
      {
        v60 = v17;
        swift_dynamicCast(&v61, &v60, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v26 = objc_msgSend(v61, "entityName");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v30 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        if (v27 == v31 && v29 == v33)
          break;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v33, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0)
          goto LABEL_18;

LABEL_10:
        v17 = __CocoaSet.Iterator.next()(v20);
        if (!v17)
        {
          v14 = v62;
          v4 = v55;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease_n(v29, 2);
LABEL_18:
      v36 = (uint64_t **)v61;
      v37 = v62;
      v38 = v62[2];
      if (v62[3] <= v38)
      {
        sub_1002DEAB4(v38 + 1);
        v37 = v62;
      }
      v19 = (uint64_t)v36;
      v20 = NSObject._rawHashValue(seed:)(v37[5]);
      v21 = (char *)(v37 + 7);
      v22 = -1 << *((_BYTE *)v37 + 32);
      v23 = v20 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~v37[(v23 >> 6) + 7]) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~v37[(v23 >> 6) + 7])) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v41 = v24 == v40;
          if (v24 == v40)
            v24 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)&v21[8 * v24];
        }
        while (v42 == -1);
        v25 = __clz(__rbit64(~v42)) + (v24 << 6);
      }
      *(_QWORD *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
      *(_QWORD *)(v37[6] + 8 * v25) = v36;
      ++v37[2];
      goto LABEL_10;
    }
LABEL_31:
    swift_release(v15);
  }
  else
  {
    v14 = (void *)sub_10019BCD8(v13);
  }
  v37 = (_QWORD *)v59;
  v19 = (uint64_t)sub_1001E8984((uint64_t)v14);
  swift_release(v14);
  if (v19 < 0 || (v19 & 0x4000000000000000) != 0)
  {
LABEL_37:
    v52 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v19);
    v45 = _bridgeCocoaArray<A>(_:)(v53, v52);
    swift_release(v19);
  }
  else
  {
    swift_bridgeObjectRetain(v19);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v44);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v45 = v19;
  }
  swift_release(v19);
  *(_QWORD *)v4 = v45;
  swift_storeEnumTagMultiPayload(v4, v37, 20);
  sub_10000D2C0();
  v47 = v46;
  sub_10001C744(v4, _s10PredicatesOMa);
  v48 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v49 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v50 = objc_msgSend((id)swift_getObjCClassFromMetadata(v48), "entity");
  objc_msgSend(v49, "setEntity:", v50);

  objc_msgSend(v49, "setAffectedStores:", 0);
  objc_msgSend(v49, "setPredicate:", v47);
  v43 = NSManagedObjectContext.count<A>(for:)(v49, v48);

  return v43;
}

uint64_t sub_10019CCC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100839A98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10019CD04@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _OWORD v26[2];
  uint64_t v27;

  v3 = v1;
  result = objc_msgSend(v3, "hintData");
  if (!result)
  {
    v16 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
LABEL_6:
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 32) = v16;
    return result;
  }
  v6 = result;
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
  v9 = v8;

  v10 = objc_msgSend(v3, "serializationVersion");
  if (v10 == 1)
  {
    result = (id)sub_1000F3CCC(v7, v9, (uint64_t)v26);
    if (v2)
      return result;
    v14 = v26[0];
    v15 = v26[1];
    v16 = v27;
    goto LABEL_6;
  }
  v17 = v10;
  sub_10019CE10(0, v11, v12, v13);
  v19 = v18;
  v23 = sub_10019CE5C(v18, v20, v21, v22);
  v24 = swift_allocError(v19, v23, 0, 0);
  *v25 = v17;
  swift_willThrow(v24);
  return (id)sub_1000A71C8(v7, v9);
}

void sub_10019CE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_10083E370)
  {
    v4 = _s22DataSerializationErrorOMa(0, a2, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10083E370);
  }
}

unint64_t sub_10019CE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = qword_10083E378;
  if (!qword_10083E378)
  {
    sub_10019CE10(255, a2, a3, a4);
    result = swift_getWitnessTable(&unk_1006A8758, v5);
    atomic_store(result, (unint64_t *)&qword_10083E378);
  }
  return result;
}

uint64_t sub_10019CEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083E380);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083E380);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10019CF34(char *a1, char *a2)
{
  return sub_1002B3B78(*a1, *a2);
}

Swift::Int sub_10019CF40()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 6911093;
  else
    v2 = 0x44497463656A626FLL;
  if (v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10019CFB8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 6911093;
  else
    v2 = 0x44497463656A626FLL;
  if (*v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10019D00C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 6911093;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10019D080@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DCDE8;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10019D08C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6911093;
  if (!*v1)
    v2 = 0x44497463656A626FLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10019D0C4(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFBF0;
}

uint64_t sub_10019D0D4@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DCDE8;
  return sub_100149788(a1, v2, a2);
}

uint64_t sub_10019D0E0()
{
  _BYTE *v0;

  if (*v0)
    return 6911093;
  else
    return 0x44497463656A626FLL;
}

uint64_t sub_10019D114@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DCD98;
  return sub_1001496D8(v2, a1, a2);
}

uint64_t sub_10019D120@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DCD98;
  return sub_100149788(a1, v2, a2);
}

void sub_10019D12C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFC18;
}

void sub_10019D13C(void *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  NSString v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  Class isa;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t MetatypeMetadata;
  uint64_t v65;
  unint64_t v66;
  NSObject *v67;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  Swift::String v74;
  id v75;
  uint64_t v76;
  void *v77;
  void *v78;
  Swift::String v79;
  Swift::String v80;
  NSString v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  _QWORD v89[2];
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;

  v6 = *v2;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a2, "storeControllerManagedObjectContext", v9);
  if (!v12)
  {
    v22 = (void *)objc_opt_self(REMError);
    v23 = type metadata accessor for REMCDSavedAttachment();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v22, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v25);

    swift_willThrow(v26);
    return;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "storeController");
  if (!v14)
  {
    v27 = (void *)objc_opt_self(REMError);
    v28 = type metadata accessor for REMCDSavedAttachment();
    v29 = swift_getObjCClassFromMetadata(v28);
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "unexpectedNilPropertyWithClass:property:", v29, v30);

    swift_willThrow(v31);
    return;
  }
  v15 = v14;
  v86 = v6;
  v16 = objc_opt_self(REMURLAttachment);
  v17 = swift_dynamicCastObjCClass(a1, v16);
  v87 = v13;
  if (!v17)
  {
    v32 = objc_opt_self(REMImageAttachment);
    v33 = swift_dynamicCastObjCClass(a1, v32);
    if (v33)
    {
      v34 = (void *)v33;
      v90 = sub_10019DAE8();
      v91 = (char *)&_sMXM.Parent + 3;
      v88 = (uint64_t)v15;
      v35 = a1;
      v36 = v15;
      v84 = (uint64_t)a1;
      v37 = v15;
      v38 = v36;
      sub_1003C5D60(a2, &v88, v34, 2);
      if (!v3)
      {
        v85 = v37;

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v88);
        a1 = (void *)v84;
        goto LABEL_23;
      }

    }
    else
    {
      v39 = objc_opt_self(REMFileAttachment);
      v40 = swift_dynamicCastObjCClass(a1, v39);
      v85 = v15;
      if (!v40)
      {
        if (qword_100836E48 != -1)
          swift_once(&qword_100836E48, sub_10019CEA4);
        v43 = type metadata accessor for Logger(0);
        sub_10001AAA8(v43, (uint64_t)qword_10083E380);
        v44 = a1;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.fault.getter();
        v47 = os_log_type_enabled(v45, v46);
        v48 = v86;
        if (v47)
        {
          v49 = swift_slowAlloc(22, -1);
          v83 = (_QWORD *)swift_slowAlloc(8, -1);
          v84 = swift_slowAlloc(32, -1);
          v88 = v84;
          *(_DWORD *)v49 = 136446466;
          v50 = sub_1000D92EC(v48);
          v92 = sub_10001A820(v50, v51, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2114;
          v92 = (uint64_t)v44;
          v52 = v13;
          v53 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
          v54 = v83;
          *v83 = v44;

          v13 = v52;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s: Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: %{public}@}", (uint8_t *)v49, 0x16u);
          v55 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v54, 1, v55);
          swift_slowDealloc(v54, -1, -1);
          v56 = v84;
          swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v49, -1, -1);

        }
        else
        {

        }
        v73 = (void *)objc_opt_self(REMError);
        v88 = 0;
        v89[0] = 0xE000000000000000;
        _StringGuts.grow(_:)(111);
        v74._countAndFlagsBits = 0xD00000000000006CLL;
        v74._object = (void *)0x80000001006FB3A0;
        String.append(_:)(v74);
        v75 = objc_msgSend(v44, "description");
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

        v79._countAndFlagsBits = v76;
        v79._object = v78;
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        v80._countAndFlagsBits = 125;
        v80._object = (void *)0xE100000000000000;
        String.append(_:)(v80);
        v81 = String._bridgeToObjectiveC()();
        objc_msgSend(v73, "invalidParameterErrorWithDescription:", v81, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v82);
        goto LABEL_30;
      }
      v41 = (void *)v40;
      v90 = sub_10019DAE8();
      v91 = (char *)&_sMXM.Parent + 3;
      v88 = (uint64_t)v15;
      v42 = a1;
      v38 = v15;
      sub_1003C5D60(a2, &v88, v41, 1);

      if (!v3)
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v88);
        goto LABEL_23;
      }

    }
    goto LABEL_16;
  }
  v18 = (void *)v17;
  v90 = sub_10019DAE8();
  v91 = (char *)&_sMXM.Parent + 3;
  v88 = (uint64_t)v15;
  v19 = a1;
  v20 = a1;
  v21 = v15;
  sub_1003C5D60(a2, &v88, v18, 0);
  if (v3)
  {

LABEL_16:
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v88);
    return;
  }
  v85 = v15;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v88);
  a1 = v20;
LABEL_23:
  static Date.now.getter(objc_msgSend(a2, "setMinimumSupportedVersion:", kREMSupportedVersionFor2022));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  objc_msgSend(a2, "setLastModifiedDate:", isa);

  v58 = v86;
  if (qword_100836E48 != -1)
    swift_once(&qword_100836E48, sub_10019CEA4);
  v59 = type metadata accessor for Logger(0);
  sub_10001AAA8(v59, (uint64_t)qword_10083E380);
  v60 = a1;
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (!os_log_type_enabled(v61, v62))
  {

LABEL_30:
    v72 = v85;
    goto LABEL_31;
  }
  v63 = swift_slowAlloc(22, -1);
  v83 = (_QWORD *)swift_slowAlloc(8, -1);
  v84 = swift_slowAlloc(32, -1);
  v92 = v84;
  *(_DWORD *)v63 = 136446466;
  v88 = v58;
  MetatypeMetadata = swift_getMetatypeMetadata(v58);
  v65 = String.init<A>(describing:)(&v88, MetatypeMetadata);
  v88 = sub_10001A820(v65, v66, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89);
  swift_bridgeObjectRelease();
  *(_WORD *)(v63 + 12) = 2114;
  v88 = (uint64_t)v60;
  v67 = v61;
  v68 = v60;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89);
  v69 = v83;
  *v83 = v60;

  _os_log_impl((void *)&_mh_execute_header, v67, v62, "%{public}s: Merged storage into cdSavedAttachment {storage: %{public}@}", (uint8_t *)v63, 0x16u);
  v70 = sub_10001A630((uint64_t *)&unk_100839E70);
  swift_arrayDestroy(v69, 1, v70);
  swift_slowDealloc(v69, -1, -1);
  v71 = v84;
  swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v71, -1, -1);
  swift_slowDealloc(v63, -1, -1);

  v72 = v87;
LABEL_31:

}

uint64_t type metadata accessor for REMSavedAttachmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd28REMSavedAttachmentCDIngestor);
}

_UNKNOWN **sub_10019DA00()
{
  return &off_1007E7F68;
}

_UNKNOWN **sub_10019DA0C()
{
  return &off_1007E7F38;
}

void sub_10019DA18(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  if ((a3 & 1) != 0)
  {
    v10 = objc_msgSend(a1, "reminderID");
    sub_1003F9AC8(1, v10, a4);
    v9 = v11;

    if (v4)
      return;
    objc_msgSend(a2, "setReminder:", v9);
  }
  else
  {
    v7 = objc_msgSend(a1, "accountID");
    sub_1003F9A9C(0, v7, a4);
    v9 = v8;

    if (v4)
      return;
    objc_msgSend(a2, "setAccount:", v9);
  }

}

unint64_t sub_10019DAE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083E538;
  if (!qword_10083E538)
  {
    v1 = objc_opt_self(RDStoreController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083E538);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSavedAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMSavedAttachmentCDIngestor.RelationshipKey;
}

uint64_t _s7remindd28REMSavedAttachmentCDIngestorC15RelationshipKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10019DB84 + 4 * byte_1006AC495[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019DBB8 + 4 * byte_1006AC490[v4]))();
}

uint64_t sub_10019DBB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019DBC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019DBC8);
  return result;
}

uint64_t sub_10019DBD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019DBDCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10019DBE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019DBE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSavedAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMSavedAttachmentCDIngestor.ValueKey;
}

uint64_t sub_10019DC04()
{
  return sub_1000BAEEC(&qword_10083E540, &qword_10083E548);
}

unint64_t sub_10019DC2C()
{
  unint64_t result;

  result = qword_10083E550;
  if (!qword_10083E550)
  {
    result = swift_getWitnessTable(&unk_1006AC5BC, &type metadata for REMSavedAttachmentCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083E550);
  }
  return result;
}

uint64_t sub_10019DC70()
{
  return sub_1000BAEEC(&qword_10083E558, &qword_10083E560);
}

unint64_t sub_10019DC98()
{
  unint64_t result;

  result = qword_10083E568;
  if (!qword_10083E568)
  {
    result = swift_getWitnessTable(&unk_1006AC694, &type metadata for REMSavedAttachmentCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083E568);
  }
  return result;
}

uint64_t sub_10019DCDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083E570);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083E570);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10019DD6C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  _BYTE v34[56];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000A5B8C(a2, (uint64_t)v34);
  v8 = (void *)a1[4];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_100836E50 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836E50, sub_10019DCDC);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083E570);
  swift_retain();
  sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E498);
  swift_retain();
  v11 = sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E498);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(28, -1);
    v15 = swift_slowAlloc(64, -1);
    v33[0] = v15;
    *(_DWORD *)v14 = 136315650;
    v16 = a1[2];
    v17 = a1[3];
    swift_bridgeObjectRetain(v17);
    v32 = sub_10001A820(v16, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    v18 = sub_1004BAF90();
    v20 = v19;
    v32 = sub_10001A820(v18, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33);
    swift_bridgeObjectRelease(v20);
    sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E538);
    sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E538);
    *(_WORD *)(v14 + 22) = 1024;
    Strong = swift_unknownObjectWeakLoadStrong(a1 + 5, v21);
    swift_release(a1);
    swift_unknownObjectRelease(Strong);
    LODWORD(v32) = Strong != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDDARequestsQueue: Appending new request {identifier: %s, request: %s, hasDelegate: %{BOOL}d}.", (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    swift_release(a1);
    sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E538);
    sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E538);

    swift_release(a1);
  }
  v23 = a1 + 8;
  swift_beginAccess(a1 + 8, v33, 33, 0);
  v24 = (_QWORD *)a1[8];
  sub_10019E4FC((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019E498);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  a1[8] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = sub_1002C93D0(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
  {
    v24 = sub_1002C93D0((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
    *v23 = v24;
  }
  v24[2] = v27 + 1;
  sub_1000A5B8C((uint64_t)v34, (uint64_t)&v24[7 * v27 + 4]);
  swift_endAccess(v33);
  result = swift_unknownObjectWeakLoadStrong(a1 + 5, v28);
  if (result)
  {
    v30 = result;
    sub_100674DC0((uint64_t)a1);
    return swift_unknownObjectRelease(v30);
  }
  return result;
}

uint64_t sub_10019E168()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v1[4];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_100836E50 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836E50, sub_10019DCDC);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083E570);
  v9 = swift_retain_n(v1, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(28, -1);
    v13 = swift_slowAlloc(32, -1);
    v23[0] = v13;
    *(_DWORD *)v12 = 136315650;
    v14 = v1[2];
    v15 = v1[3];
    swift_bridgeObjectRetain(v15);
    v21 = sub_10001A820(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v12 + 12) = 2048;
    swift_beginAccess(v1 + 8, &v21, 0, 0);
    v20 = *(_QWORD *)(v1[8] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    *(_WORD *)(v12 + 22) = 1024;
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 5, v16);
    swift_release(v1);
    swift_unknownObjectRelease(Strong);
    LODWORD(v20) = Strong != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDDARequestsQueue: Draining {identifier: %s, count: %ld, hasDelegate: %{BOOL}d}.", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  swift_beginAccess(v1 + 8, v23, 1, 0);
  result = v1[8];
  v1[8] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10019E434()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_100008EFC(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for RDDARequestsQueue()
{
  return objc_opt_self(_TtC7remindd17RDDARequestsQueue);
}

uint64_t sub_10019E498(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_retain(a6);
  }
  else if (!a7)
  {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_10019E4FC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_10019E538(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_release(a6);
  }
  else if (!a7)
  {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10019E59C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083E648, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10019E5C0(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083E660, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10019E5E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019E618 + 4 * aW[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_10019E618()
{
  return 0xD000000000000017;
}

unint64_t sub_10019E728()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10019E778(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_10019E5E4(*a1);
  v5 = v4;
  v6 = sub_10019E5E4(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10019E800()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_10019E5E4(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_10019E860(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_10019E5E4(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_10019E8A0(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_10019E5E4(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10019E8FC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A1950(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019E928@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10019E5E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10019E950@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A1950(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019E974()
{
  unsigned __int8 *v0;

  return sub_10019E5E4(*v0);
}

void sub_10019E97C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF738;
}

void sub_10019E98C(char *a1)
{
  sub_1002B3804(*a1);
}

void sub_10019E998()
{
  char *v0;

  sub_1004F49C8(*v0);
}

void sub_10019E9A0()
{
  __asm { BR              X10 }
}

uint64_t sub_10019E9E0(uint64_t a1)
{
  String.hash(into:)(a1, 0x6341746E65726170, 0xEF4449746E756F63);
  return swift_bridgeObjectRelease(0xEF4449746E756F63);
}

void sub_10019EA54(uint64_t a1)
{
  char *v1;

  sub_1002B27F0(a1, *v1);
}

unint64_t sub_10019EA5C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A1908(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019EA88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10019EABC + 4 * byte_1006AC742[*v0]))();
}

void sub_10019EABC(_QWORD *a1@<X8>)
{
  *a1 = 0x6341746E65726170;
  a1[1] = 0xEF4449746E756F63;
}

void sub_10019EAE4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "parentListID");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10019EB08(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x80000001006F3EE0;
}

unint64_t sub_10019EB28@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A1908(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019EB4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019EB80 + 4 * byte_1006AC746[*v0]))(0x49746E756F636361, 0xE900000000000044);
}

uint64_t sub_10019EB80()
{
  return 0x6341746E65726170;
}

uint64_t sub_10019EBA4()
{
  return 0x694C746E65726170;
}

unint64_t sub_10019EBC4()
{
  return 0xD000000000000014;
}

void sub_10019EBE0(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFC40;
}

uint64_t sub_10019EBF0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DFC68;
  return sub_10014D200(v2, a1, a2);
}

uint64_t sub_10019EBFC@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF098;
  return sub_10014D278(a1, v2, a2);
}

void sub_10019EC08(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFCA0;
}

uint64_t sub_10019EC18@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DFCC8;
  return sub_10014D200(v2, a1, a2);
}

uint64_t sub_10019EC24@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF0D0;
  return sub_10014D278(a1, v2, a2);
}

void sub_10019EC30(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFD00;
}

void sub_10019EC40()
{
  uint64_t v0;

  sub_10019EC5C();
  qword_100871CA0 = v0;
}

void sub_10019EC5C()
{
  JUMPOUT(0x10019EE18);
}

void sub_10019F1AC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t ObjCClassFromMetadata;
  NSString v62;
  uint64_t v63;
  _QWORD v64[4];
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  _QWORD *v80;
  NSObject *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _BYTE v86[8];
  uint64_t v87;

  v74 = a4;
  v9 = *v4;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v69 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v71 = (char *)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v82 = *(_BYTE **)(v15 - 8);
  v83 = v15;
  __chkstk_darwin(v15);
  v81 = ((char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_1001A0A28();
  objc_msgSend(a1, "setParentAccountID:", v17);

  v18 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary");
  v19 = objc_msgSend(a1, "resolutionTokenMap");
  if (v19)
  {
    v75 = v11;
    v76 = v5;
    v78 = v18;
    v68 = v19;
    v77 = sub_1004053F0((uint64_t)v19, a3);
    if (qword_100836E58 != -1)
      swift_once(&qword_100836E58, sub_10019E59C);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_10083E648);
    v22 = a1;
    swift_bridgeObjectRetain_n(a3, 2);
    v23 = v22;
    v70 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    v26 = v25;
    v27 = os_log_type_enabled(v24, v25);
    v73 = a2;
    v66 = v9;
    v72 = v10;
    if (v27)
    {
      v28 = swift_slowAlloc(32, -1);
      v80 = (_QWORD *)swift_slowAlloc(8, -1);
      v84 = swift_slowAlloc(64, -1);
      v87 = v84;
      *(_DWORD *)v28 = 136446722;
      v29 = objc_msgSend(v23, "smartListType");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v85 = (_QWORD *)sub_10001A820(v30, v32, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);

      *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v28 + 12) = 2114;
      v34 = objc_msgSend(v23, "objectID", v33);
      v85 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      LODWORD(v79) = v26;
      v35 = v80;
      *v80 = v34;

      *(_WORD *)(v28 + 22) = 2082;
      swift_bridgeObjectRetain(a3);
      v37 = Array.description.getter(v36, &type metadata for REMSmartListStorageCDIngestor.ValueKey);
      v39 = v38;
      swift_bridgeObjectRelease();
      v85 = (_QWORD *)sub_10001A820(v37, v39, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v79, "Ingesting smart list storage {storage.smartListType: %{public}s, storage.objectID: %{public}@, changedValueKeys: %{public}s}", (uint8_t *)v28, 0x20u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v35, 1, v40);
      swift_slowDealloc(v35, -1, -1);
      v41 = v84;
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v42 = v77;
    v84 = *(_QWORD *)(a3 + 16);
    if (v84)
    {
      v80 = (_QWORD *)(a3 + 32);
      v67 = a3;
      v53 = swift_bridgeObjectRetain(a3);
      v64[3] = 0xD000000000000018;
      v53.n128_u64[0] = 136446722;
      v65 = v53;
      v64[2] = 0x80000001006F48D0;
      v64[1] = (char *)&type metadata for Any + 8;
      v79 = v23;
      __asm { BR              X9 }
    }

  }
  else
  {
    if (qword_100836E58 != -1)
      swift_once(&qword_100836E58, sub_10019E59C);
    v43 = type metadata accessor for Logger(0);
    sub_10001AAA8(v43, (uint64_t)qword_10083E648);
    swift_bridgeObjectRetain_n(a3, 2);
    v44 = a1;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      LODWORD(v83) = v46;
      v78 = v18;
      v47 = a3;
      v48 = swift_slowAlloc(22, -1);
      v49 = (_QWORD *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(32, -1);
      v87 = v50;
      *(_DWORD *)v48 = 138543618;
      v51 = objc_msgSend(v44, "objectID");
      v85 = v51;
      v82 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
      v84 = (uint64_t)v49;
      *v49 = v51;

      *(_WORD *)(v48 + 12) = 2082;
      v52 = *(_QWORD *)(v47 + 16);
      v67 = v47;
      if (v52)
      {
        v80 = (_QWORD *)v50;
        v81 = v45;
        v85 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v52, 0);
        __asm { BR              X9 }
      }
      v54 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v56 = v55;
      swift_bridgeObjectRelease();
      v85 = (_QWORD *)sub_10001A820(v54, v56, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v82);
      swift_bridgeObjectRelease_n(v67, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v83, "REMSmartListStorageCDIngestor: merge(storage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v48, 0x16u);
      v57 = sub_10001A630((uint64_t *)&unk_100839E70);
      v58 = v84;
      swift_arrayDestroy(v84, 1, v57);
      swift_slowDealloc(v58, -1, -1);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      v18 = v78;
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v59 = (void *)objc_opt_self(REMError);
    v60 = sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v60);
    v62 = String._bridgeToObjectiveC()();
    objc_msgSend(v59, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v62);

    swift_willThrow(v63);
  }
}

id sub_1001A0A28()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char **v11;
  id v12;

  v1 = objc_msgSend(v0, "smartListType");
  v2 = REMSmartListTypeCustom;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) == 0)
    {
      v11 = &selRef_accountID;
      return objc_msgSend(v0, *v11);
    }
  }
  v11 = &selRef_parentAccountID;
  v12 = objc_msgSend(v0, "parentAccountID");

  if (v12)
    return objc_msgSend(v0, *v11);
  return 0;
}

uint64_t type metadata accessor for REMSmartListStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd29REMSmartListStorageCDIngestor);
}

_UNKNOWN **sub_1001A0B50()
{
  return &off_1007E81D0;
}

_UNKNOWN **sub_1001A0B5C()
{
  return &off_1007E81A0;
}

_UNKNOWN **sub_1001A0B68()
{
  return &off_1007E8170;
}

_UNKNOWN **sub_1001A0B74()
{
  return &off_1007E8140;
}

NSObject *sub_1001A0B80(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  NSData v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  NSObject *v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  uint64_t v53;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  void *v60;
  NSObject *v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  unint64_t v67;
  NSString v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t ObjCClassFromMetadata;
  NSString v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  Class isa;
  void *v87;
  objc_class *v88;
  Class v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  objc_class *v95;
  Class v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  NSObject *v115;
  unint64_t v116;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v112 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v114 = (void **)((char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v10 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = 0;
  v15 = objc_msgSend(a1, "remObjectIDWithError:", &v115, v12);
  v16 = v115;
  if (v15)
  {
    v17 = v15;
    v111 = v4;
    v18 = v115;
    v19 = objc_msgSend(a1, "account");
    if (v19
      && (v16 = v19,
          v20 = -[NSObject remObjectID](v19, "remObjectID"),
          v16,
          v20))
    {
      v109 = v3;
      v21 = objc_msgSend(a1, "smartListType");
      if (v21)
      {
        v22 = v21;
        v108 = v1;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v16 = v24;

        swift_bridgeObjectRetain(v16);
        v25._countAndFlagsBits = v23;
        v25._object = v16;
        v26 = (unint64_t)REMSmartListType.init(stringValue:)(v25);
        if (v26)
        {
          v27 = v26;
          swift_bridgeObjectRelease(v16);
          v28 = objc_allocWithZone((Class)REMSmartListStorage);
          v106 = (void *)v27;
          v107 = v17;
          v110 = v20;
          v16 = objc_msgSend(v28, "initWithObjectID:accountID:smartListType:", v17, v20, v27);
          v29 = objc_msgSend(a1, "name");
          -[NSObject setName:](v16, "setName:", v29);

          v30 = objc_msgSend(a1, "color");
          -[NSObject setColor:](v16, "setColor:", v30);

          v31 = objc_msgSend(a1, "badgeEmblem");
          -[NSObject setBadgeEmblem:](v16, "setBadgeEmblem:", v31);

          -[NSObject setShowingLargeAttachments:](v16, "setShowingLargeAttachments:", objc_msgSend(a1, "showingLargeAttachments"));
          v32 = objc_msgSend(a1, "filterData");
          if (v32)
          {
            v33 = v32;
            v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v36 = v35;

            v37.super.isa = Data._bridgeToObjectiveC()().super.isa;
            sub_1000A71C8(v34, v36);
          }
          else
          {
            v37.super.isa = 0;
          }
          -[NSObject setFilterData:](v16, "setFilterData:", v37.super.isa);

          -[NSObject setIsPersisted:](v16, "setIsPersisted:", 1);
          v75 = objc_msgSend(a1, "sortingStyle");
          if (v75)
          {
            v76 = v75;
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
            v79 = v78;

            v80 = (id)REMSortingStyle.init(stringValue:)(v77, v79);
            v81 = v107;
            if (!v80)
              v80 = REMSortingStyleDefault;
            v82 = v80;
            -[NSObject setSortingStyle:](v16, "setSortingStyle:", v80);

          }
          else
          {
            -[NSObject setSortingStyle:](v16, "setSortingStyle:", REMSortingStyleDefault);
            v81 = v107;
          }
          v83 = objc_msgSend(a1, "pinnedDate");
          if (v83)
          {
            v84 = v83;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

            v85 = v113;
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, v113);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v85);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v85) == 1)
            {
              isa = 0;
            }
            else
            {
              isa = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v85);
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, 1, 1, v113);
            isa = 0;
          }
          v87 = v106;
          -[NSObject setPinnedDate:](v16, "setPinnedDate:", isa);

          v88 = (objc_class *)objc_msgSend(a1, "mostRecentTargetTemplateIdentifier");
          v89 = v88;
          v90 = v114;
          if (v88)
          {
            v91 = v112;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v88);

            v92 = v111;
            v93 = v91;
            v94 = v109;
            (*(void (**)(_QWORD *, char *, uint64_t))(v111 + 32))(v90, v93, v109);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v90, 0, 1, v94);
            if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v94) == 1)
            {
              v89 = 0;
            }
            else
            {
              v89 = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(_QWORD *, uint64_t))(v92 + 8))(v90, v94);
            }
          }
          else
          {
            (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v111 + 56))(v114, 1, 1, v109);
          }
          -[NSObject setMostRecentTargetTemplateIdentifier:](v16, "setMostRecentTargetTemplateIdentifier:", v89);

          -[NSObject setResolutionTokenMap:](v16, "setResolutionTokenMap:", 0);
          v95 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
          v96 = v95;
          if (v95)
          {
            v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
            v99 = v98;

            v96 = Data._bridgeToObjectiveC()().super.isa;
            sub_1000A71C8(v97, v99);
          }
          -[NSObject setResolutionTokenMapData:](v16, "setResolutionTokenMapData:", v96);

          v100 = objc_msgSend(a1, "parentAccount");
          if (v100)
          {
            v101 = v100;
            v102 = objc_msgSend(v100, "remObjectID");

          }
          else
          {
            v102 = 0;
          }
          -[NSObject setParentAccountID:](v16, "setParentAccountID:", v102);

          v103 = objc_msgSend(a1, "parentList");
          if (v103)
          {
            v104 = v103;
            v105 = objc_msgSend(v103, "remObjectID");

          }
          else
          {
            v105 = 0;
          }
          -[NSObject setParentListID:](v16, "setParentListID:", v105);

          -[NSObject setMinimumSupportedVersion:](v16, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));
          -[NSObject setEffectiveMinimumSupportedVersion:](v16, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));
          -[NSObject setShouldUpdateSectionsOrdering:](v16, "setShouldUpdateSectionsOrdering:", 0);
          -[NSObject setUnsavedSectionIDsOrdering:](v16, "setUnsavedSectionIDsOrdering:", 0);
          -[NSObject setUnsavedMembershipsOfRemindersInSections:](v16, "setUnsavedMembershipsOfRemindersInSections:", 0);

        }
        else
        {
          v64 = (void *)objc_opt_self(REMError);
          v115 = 0;
          v116 = 0xE000000000000000;
          _StringGuts.grow(_:)(57);
          v65._object = (void *)0x80000001006FB4B0;
          v65._countAndFlagsBits = 0xD000000000000037;
          String.append(_:)(v65);
          v66._countAndFlagsBits = v23;
          v66._object = v16;
          String.append(_:)(v66);
          swift_bridgeObjectRelease(v16);
          v67 = v116;
          v68 = String._bridgeToObjectiveC()();
          objc_msgSend(v64, "internalErrorWithDebugDescription:", v68, swift_bridgeObjectRelease(v67).n128_f64[0]);

          swift_willThrow(v69);
        }
      }
      else
      {
        v110 = v20;
        if (qword_100836E60 != -1)
          swift_once(&qword_100836E60, sub_10019E5C0);
        v55 = type metadata accessor for Logger(0);
        sub_10001AAA8(v55, (uint64_t)qword_10083E660);
        v56 = v17;
        v57 = Logger.logObject.getter(v56);
        v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc(12, -1);
          v114 = (_QWORD *)swift_slowAlloc(8, -1);
          v115 = v56;
          *(_DWORD *)v59 = 138543362;
          v16 = (v59 + 4);
          v60 = v17;
          v61 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
          v62 = v114;
          *v114 = v60;

          _os_log_impl((void *)&_mh_execute_header, v57, v58, "REMSmartListStorageCDIngestor: cdSmartList.smartListType is nil {cdSmartList.remObjectID: %{public}@}", v59, 0xCu);
          v63 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v62, 1, v63);
          swift_slowDealloc(v62, -1, -1);
          swift_slowDealloc(v59, -1, -1);
        }
        else
        {

          v57 = v56;
        }

        v70 = (void *)objc_opt_self(REMError);
        v71 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v71);
        v73 = String._bridgeToObjectiveC()();
        objc_msgSend(v70, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v73);

        swift_willThrow(v74);
      }
    }
    else
    {
      if (qword_100836E60 != -1)
        swift_once(&qword_100836E60, sub_10019E5C0);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_10083E660);
      v39 = v17;
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v114 = (_QWORD *)swift_slowAlloc(8, -1);
        v115 = v39;
        *(_DWORD *)v42 = 138543362;
        v16 = (v42 + 4);
        v43 = v17;
        v44 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
        v45 = v114;
        *v114 = v43;

        _os_log_impl((void *)&_mh_execute_header, v40, v41, "REMSmartListStorageCDIngestor: cdSmartList.account is nil {cdSmartList.remObjectID: %{public}@}", v42, 0xCu);
        v46 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v45, 1, v46);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {

        v40 = v39;
      }

      v49 = (void *)objc_opt_self(REMError);
      v50 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
      v51 = swift_getObjCClassFromMetadata(v50);
      v52 = String._bridgeToObjectiveC()();
      objc_msgSend(v49, "unexpectedNilPropertyWithClass:property:", v51, v52);

      swift_willThrow(v53);
    }
  }
  else
  {
    v47 = v115;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v48);
  }
  return v16;
}

id sub_1001A17D0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v13;

  v4 = sub_10001A630(&qword_10083E870);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1;
  REMSmartList.NonCustom.init(smartListType:)();
  v8 = type metadata accessor for REMSmartList.NonCustom(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    sub_1001A3AF0((uint64_t)v6);
    v10 = objc_msgSend((id)objc_opt_self(REMSmartList), "newObjectID");
  }
  else
  {
    v10 = (id)REMSmartList.NonCustom.remObjectID.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  v11 = objc_msgSend(objc_allocWithZone((Class)REMSmartListStorage), "initWithObjectID:accountID:smartListType:", v10, a2, v7);
  objc_msgSend(v11, "setParentAccountID:", a2);

  return v11;
}

unint64_t sub_1001A1908(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC458, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_1001A1950(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC510, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

void sub_1001A1998(void *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  os_log_type_t v48;
  NSObject *log;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;

  v2 = objc_msgSend(a1, "remObjectID");
  v3 = objc_msgSend(a1, "smartListType");
  v4 = objc_msgSend(a1, "manualOrdering");
  if (v4)
  {
    v5 = v4;
    if (qword_100836E58 != -1)
      swift_once(&qword_100836E58, sub_10019E59C);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10083E648);
    v7 = v2;
    v8 = v3;
    v9 = v5;
    v10 = v7;
    v11 = v8;
    v12 = v9;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v48 = v14;
      log = v13;
      v15 = swift_slowAlloc(32, -1);
      v16 = (_QWORD *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(32, -1);
      v52 = (uint64_t)v10;
      v53 = v50;
      *(_DWORD *)v15 = 138543874;
      v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *v16 = v10;

      *(_WORD *)(v15 + 12) = 2082;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v52 = sub_10001A820(v18, v19, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v15 + 22) = 2048;
      v21 = objc_msgSend(v12, "topLevelElementIDs", v20);
      v22 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0)
          v47 = v23;
        else
          v47 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v23);
        v24 = _CocoaArrayWrapper.endIndex.getter(v47);

        swift_bridgeObjectRelease();
      }
      else
      {
        v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      swift_bridgeObjectRelease();
      v52 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      _os_log_impl((void *)&_mh_execute_header, log, v48, "ingesting manual ordering {smart list: %{public}@, smart list type: %{public}s, top-level elements count: %ld}", (uint8_t *)v15, 0x20u);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v16, 1, v25);
      swift_slowDealloc(v16, -1, -1);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    v39 = objc_msgSend(a1, "accountID");
    v40 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v41 = type metadata accessor for REMManualOrderingCDIngestor();
    v42 = swift_allocObject(v41, 32, 7);
    *(_QWORD *)(v42 + 16) = v39;
    *(_QWORD *)(v42 + 24) = v40;
    v43 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v44 = swift_allocObject(v43, 40, 7);
    *(_OWORD *)(v44 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v44 + 32) = v12;
    v53 = v44;
    specialized Array._endMutation()(v44);
    v45 = v53;
    v46 = v12;
    sub_1005D3458(v45, v42);
    swift_release(v42);
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_100836E58 != -1)
      swift_once(&qword_100836E58, sub_10019E59C);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_10083E648);
    v27 = v2;
    v28 = v3;
    v51 = v27;
    v29 = v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = (_QWORD *)swift_slowAlloc(8, -1);
      v34 = swift_slowAlloc(32, -1);
      v53 = v34;
      *(_DWORD *)v32 = 138543618;
      v52 = (uint64_t)v51;
      v35 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *v33 = v51;

      *(_WORD *)(v32 + 12) = 2082;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v52 = sub_10001A820(v36, v37, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      swift_bridgeObjectRelease();
      v38 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v33, 1, v38);
      swift_slowDealloc(v33, -1, -1);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1001A2004(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001A203C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A7330;
  v3 = objc_msgSend(v0, "accountID");
  *(_QWORD *)(v2 + 32) = v3;
  specialized Array._endMutation()(v3);
  return v2;
}

void sub_1001A22C8(id a1, NSObject *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t inited;
  NSObject *v13;
  NSString v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  NSString v74;
  os_log_t v75;
  void *v76;
  uint64_t v77;
  uint64_t ObjCClassFromMetadata;
  NSString v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  id v90;
  os_log_t v91;
  NSObject *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  id v99;
  NSObject *v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  double v108;
  id v109;
  uint64_t v110;
  id v111;
  NSObject *v112;
  id v113;
  NSObject *v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  double v124;
  id v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  os_log_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_log_type_t v137;
  os_log_type_t v138;
  os_log_t v139;
  os_log_t v140;
  NSObject *v141;
  os_log_type_t type[8];
  os_log_type_t typeb;
  NSObject *typea;
  os_log_t v145;
  NSObject *v146;
  os_log_t v147;
  NSObject *log;
  os_log_t logd;
  uint64_t loga;
  os_log_t logb;
  os_log_t logc;
  uint64_t v154;
  char v155[40];
  uint64_t v156;
  _QWORD v157[6];
  void *v158;

  v6 = a1;
  if (a3 - 1 >= 2)
  {
    if (a3)
    {
      v19 = objc_msgSend(a1, "sectionIDsToUndelete");
      v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v21 = sub_10011A5DC();
      v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, v20, v21);

      v24 = v22;
      v145 = a2;
      v136 = v20;
      v25 = v4;
      if ((v22 & 0xC000000000000001) != 0)
      {
        if (v22 < 0)
          v26 = v22;
        else
          v26 = v22 & 0xFFFFFFFFFFFFFF8;
        v27 = __CocoaSet.makeIterator()(v26);
        v23 = Set.Iterator.init(_cocoa:)(v157, v27, v20, v21);
        v24 = v157[0];
        *(_QWORD *)type = v157[1];
        v28 = v157[2];
        v8 = v157[3];
        v7 = v157[4];
      }
      else
      {
        v8 = 0;
        v59 = -1 << *(_BYTE *)(v22 + 32);
        *(_QWORD *)type = v22 + 56;
        v28 = ~v59;
        v60 = -v59;
        if (v60 < 64)
          v61 = ~(-1 << v60);
        else
          v61 = -1;
        v7 = v61 & *(_QWORD *)(v22 + 56);
      }
      v6 = (id)(v24 & 0x7FFFFFFFFFFFFFFFLL);
      v139 = (os_log_t)((unint64_t)(v28 + 64) >> 6);
      loga = v24;
      if ((v24 & 0x8000000000000000) == 0)
        goto LABEL_38;
LABEL_35:
      v62 = __CocoaSet.Iterator.next()(v23);
      v63 = v25;
      if (v62)
      {
        v64 = v62;
        v156 = v62;
        swift_unknownObjectRetain(v62);
        swift_dynamicCast(&v158, &v156, (char *)&type metadata for Swift.AnyObject + 8, v136, 7);
        v65 = v158;
        swift_unknownObjectRelease(v64);
        v66 = v8;
        v67 = v7;
        if (!v65)
        {
LABEL_61:
          v24 = loga;
          goto LABEL_68;
        }
        while (1)
        {
          sub_1003FA2E4(3, v65, a4);
          if (v63)
          {
            sub_1000C6560(loga);

            return;
          }
          v72 = v71;
          v25 = 0;
          objc_msgSend(v71, "setSmartList:", v145);
          v73 = objc_msgSend(v72, "createResolutionTokenMapIfNecessary");
          sub_10040371C(1);
          v74 = String._bridgeToObjectiveC()();
          objc_msgSend(v73, "updateForKey:", v74, swift_bridgeObjectRelease().n128_f64[0]);

          v8 = v66;
          v7 = v67;
          v24 = loga;
          if (loga < 0)
            goto LABEL_35;
LABEL_38:
          v63 = v25;
          if (v7)
          {
            v67 = (v7 - 1) & v7;
            v68 = __clz(__rbit64(v7)) | (v8 << 6);
            v66 = v8;
          }
          else
          {
            v66 = v8 + 1;
            if (__OFADD__(v8, 1))
            {
              __break(1u);
              goto LABEL_98;
            }
            if (v66 >= (uint64_t)v139)
              break;
            v69 = *(_QWORD *)(*(_QWORD *)type + 8 * v66);
            if (!v69)
            {
              v70 = v8 + 2;
              if (v8 + 2 >= (uint64_t)v139)
                break;
              v69 = *(_QWORD *)(*(_QWORD *)type + 8 * v70);
              if (v69)
                goto LABEL_47;
              v70 = v8 + 3;
              if (v8 + 3 >= (uint64_t)v139)
                break;
              v69 = *(_QWORD *)(*(_QWORD *)type + 8 * v70);
              if (v69)
              {
LABEL_47:
                v66 = v70;
              }
              else
              {
                v66 = v8 + 4;
                if (v8 + 4 >= (uint64_t)v139)
                  break;
                v69 = *(_QWORD *)(*(_QWORD *)type + 8 * v66);
                if (!v69)
                {
                  v75 = (os_log_t)(v8 + 5);
                  while (v139 != v75)
                  {
                    v69 = *(_QWORD *)(*(_QWORD *)type + 8 * (_QWORD)v75);
                    v75 = (os_log_t)((char *)v75 + 1);
                    if (v69)
                    {
                      v66 = (uint64_t)&v75[-1].isa + 7;
                      goto LABEL_48;
                    }
                  }
                  break;
                }
              }
            }
LABEL_48:
            v67 = (v69 - 1) & v69;
            v68 = __clz(__rbit64(v69)) + (v66 << 6);
          }
          v65 = *(id *)(*(_QWORD *)(v24 + 48) + 8 * v68);
          if (!v65)
            goto LABEL_61;
        }
      }
LABEL_68:
      sub_1000C6560(v24);
    }
    else
    {
      v17 = objc_msgSend(a1, "accountID");
      sub_1003FA2C0(0, v17, a4);
      if (v4)
      {

      }
      else
      {
        v40 = v18;
        if (qword_100836E58 != -1)
          swift_once(&qword_100836E58, sub_10019E59C);
        v41 = type metadata accessor for Logger(0);
        sub_10001AAA8(v41, (uint64_t)qword_10083E648);
        v42 = a2;
        v43 = v40;
        v44 = v42;
        v45 = v43;
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.info.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          v48 = swift_slowAlloc(22, -1);
          logd = (os_log_t)swift_slowAlloc(64, -1);
          v158 = logd;
          *(_DWORD *)v48 = 136446466;
          v49 = -[NSObject remObjectID](v44, "remObjectID");
          v50 = sub_10001A630((uint64_t *)&unk_100844910);
          typeb = v47;
          v51 = Optional.descriptionOrNil.getter(v50);
          v53 = v52;

          v156 = sub_10001A820(v51, v53, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

          *(_QWORD *)&v54 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v48 + 12) = 2082;
          v55 = objc_msgSend(v45, "remObjectID", v54);
          v156 = (uint64_t)v55;
          v56 = Optional.descriptionOrNil.getter(v50);
          v58 = v57;

          v156 = sub_10001A820(v56, v58, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v46, typeb, "Updating smartList.account {smartList: %{public}s, account: %{public}s}", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy(logd, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(logd, -1, -1);
          swift_slowDealloc(v48, -1, -1);

        }
        else
        {

        }
        -[NSObject setAccount:](v44, "setAccount:", v45);

      }
    }
  }
  else
  {
    LOBYTE(v7) = a3;
    v8 = (uint64_t)-[NSObject createResolutionTokenMapIfNecessary](a2, "createResolutionTokenMapIfNecessary");
    v9 = objc_msgSend(v6, "resolutionTokenMap");
    if (v9)
    {
      v10 = v9;
      v11 = sub_10001A630(&qword_10083E868);
      inited = swift_initStackObject(v11, v155);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_BYTE *)(inited + 32) = v7;
      v13 = sub_100405764((uint64_t)v10, inited);
      swift_setDeallocating(inited);
      sub_10040335C(v7);
      v14 = String._bridgeToObjectiveC()();
      LODWORD(inited) = objc_msgSend((id)v8, "mergeWithMap:forKey:", v13, v14, swift_bridgeObjectRelease().n128_f64[0]);

      if (!(_DWORD)inited)
      {

        return;
      }
      if (v7 == 1)
      {
        v15 = sub_1001A0A28();
        if (v15)
        {
          sub_1003FA2C0(1, v15, a4);
          if (v4)
          {

            return;
          }
          v94 = v16;
        }
        else
        {
          v94 = 0;
        }
        v140 = v15;
        if (qword_100836E58 != -1)
          swift_once(&qword_100836E58, sub_10019E59C);
        v96 = type metadata accessor for Logger(0);
        sub_10001AAA8(v96, (uint64_t)qword_10083E648);
        v97 = v94;
        v98 = a2;
        v99 = v97;
        v100 = v98;
        v101 = Logger.logObject.getter(v100);
        v102 = static os_log_type_t.info.getter(v101);
        if (os_log_type_enabled(v101, v102))
        {
          v137 = v102;
          v146 = v101;
          logc = (os_log_t)v8;
          v103 = swift_slowAlloc(22, -1);
          v134 = swift_slowAlloc(64, -1);
          v158 = (void *)v134;
          *(_DWORD *)v103 = 136446466;
          v104 = -[NSObject remObjectID](v100, "remObjectID");
          v156 = (uint64_t)v104;
          v133 = sub_10001A630((uint64_t *)&unk_100844910);
          v105 = Optional.descriptionOrNil.getter(v133);
          v107 = v106;

          v156 = sub_10001A820(v105, v107, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

          *(_QWORD *)&v108 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v103 + 12) = 2082;
          if (v94)
            v109 = objc_msgSend(v99, "remObjectID", v108);
          else
            v109 = 0;
          v156 = (uint64_t)v109;
          v130 = Optional.descriptionOrNil.getter(v133);
          v132 = v131;

          v156 = sub_10001A820(v130, v132, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v146, v137, "Updating smartList.parentAccount {smartList: %{public}s, parentAccount: %{public}s}", (uint8_t *)v103, 0x16u);
          swift_arrayDestroy(v134, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v134, -1, -1);
          swift_slowDealloc(v103, -1, -1);

          v8 = (uint64_t)logc;
        }
        else
        {

        }
        -[NSObject setParentAccount:](v100, "setParentAccount:", v99);

        v129 = v140;
        goto LABEL_96;
      }
      logb = (os_log_t)v8;
      v81 = objc_msgSend(v6, "smartListType");
      v82 = REMSmartListTypeCustom;
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v85 = v84;
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      typea = v13;
      if (v83 == v87 && v85 == v86)
      {

        v88 = swift_bridgeObjectRelease_n(v85, 2).n128_u64[0];
      }
      else
      {
        v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v85, v87, v86, 0);

        swift_bridgeObjectRelease();
        v88 = swift_bridgeObjectRelease().n128_u64[0];
        if ((v89 & 1) == 0)
        {
          v95 = 0;
          v92 = 0;
          v91 = logb;
LABEL_84:
          if (qword_100836E58 != -1)
            swift_once(&qword_100836E58, sub_10019E59C);
          v110 = type metadata accessor for Logger(0);
          sub_10001AAA8(v110, (uint64_t)qword_10083E648);
          v111 = v95;
          v112 = a2;
          v113 = v111;
          v114 = v112;
          v115 = Logger.logObject.getter(v114);
          v116 = static os_log_type_t.info.getter(v115);
          if (os_log_type_enabled(v115, v116))
          {
            v138 = v116;
            v141 = v115;
            v147 = v92;
            v117 = swift_slowAlloc(22, -1);
            v135 = swift_slowAlloc(64, -1);
            v158 = (void *)v135;
            *(_DWORD *)v117 = 136315394;
            v118 = -[NSObject remObjectID](v114, "remObjectID");
            v156 = (uint64_t)v118;
            v119 = v95;
            v120 = sub_10001A630((uint64_t *)&unk_100844910);
            v121 = Optional.descriptionOrNil.getter(v120);
            v123 = v122;

            v156 = sub_10001A820(v121, v123, (uint64_t *)&v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

            *(_QWORD *)&v124 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v117 + 12) = 2080;
            if (v119)
              v125 = objc_msgSend(v113, "remObjectID", v124);
            else
              v125 = 0;
            v156 = (uint64_t)v125;
            v126 = Optional.descriptionOrNil.getter(v120);
            v128 = v127;

            v156 = sub_10001A820(v126, v128, (uint64_t *)&v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v141, v138, "Updating smartList.parentList {smartList: %s, parentList: %s}", (uint8_t *)v117, 0x16u);
            swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v135, -1, -1);
            swift_slowDealloc(v117, -1, -1);

            v92 = v147;
            v91 = logb;
          }
          else
          {

          }
          -[NSObject setParentList:](v114, "setParentList:", v113);

          v129 = typea;
LABEL_96:

          return;
        }
      }
      v90 = objc_msgSend(v6, "parentListID", *(double *)&v88);
      v91 = logb;
      if (v90)
      {
        v92 = v90;
        sub_1003FABB0(2, v92, a4);
        if (v4)
        {

          return;
        }
        v95 = v93;

      }
      else
      {
        v95 = 0;
        v92 = 0;
      }
      goto LABEL_84;
    }
    if (qword_100836E58 != -1)
LABEL_98:
      swift_once(&qword_100836E58, sub_10019E59C);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10083E648);
    v30 = v6;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      log = v31;
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      v154 = swift_slowAlloc(32, -1);
      v158 = (void *)v154;
      *(_DWORD *)v33 = 138543618;
      v35 = v8;
      v36 = objc_msgSend(v30, "objectID");
      v156 = (uint64_t)v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);
      *v34 = v36;
      v8 = (uint64_t)v35;

      *(_WORD *)(v33 + 12) = 2082;
      if (v7 == 2)
        v37 = 0x694C746E65726170;
      else
        v37 = 0x6341746E65726170;
      if (v7 == 2)
        v38 = 0xEC00000044497473;
      else
        v38 = 0xEF4449746E756F63;
      v156 = sub_10001A820(v37, v38, (uint64_t *)&v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v32, "REMSmartListStorageCDIngestor: establishRelationship(onStorage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v33, 0x16u);
      v39 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v39);
      swift_slowDealloc(v34, -1, -1);
      swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v154, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    v76 = (void *)objc_opt_self(REMError);
    v77 = sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v77);
    v79 = String._bridgeToObjectiveC()();
    objc_msgSend(v76, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v79);

    swift_willThrow(v80);
  }
}

void sub_1001A3320(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v5 = type metadata accessor for REMJSONDeserializationError(0);
  if (objc_msgSend(a2, "shouldUpdateSectionsOrdering", __chkstk_darwin(v5).n128_f64[0]))
  {
    v6 = objc_msgSend(a1, "storeControllerManagedObjectContext");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(a2, "objectID");
      if (qword_100836F50 != -1)
        swift_once(&qword_100836F50, sub_1001BB774);
      v9 = sub_1001BBE78((uint64_t)v8, 0, (uint64_t)v7, (Class)qword_100871D08, 0, 0);
      if (v2)
      {

      }
      else
      {
        v24 = v7;
        v25 = v9;
        v22 = a1;
        v23 = v8;
        v10 = objc_msgSend(a1, "sectionIDsOrderingAsData");
        if (v10)
        {
          v11 = v10;
          v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
          static REMJSONRepresentable.fromJSONData(_:)(&v26, v12, v14);
          sub_1000A71C8(v12, v14);
          v21 = v26;
          v15 = type metadata accessor for REMCDSmartListSection();
          v16 = REMOrderedIdentifierMap.reorder<A>(objects:)(v25, v15);

          swift_bridgeObjectRelease();
          v17 = v16;
        }
        else
        {
          v17 = v25;
        }
        sub_1001E039C(v17);
        swift_bridgeObjectRelease();
        v18 = objc_allocWithZone((Class)NSMutableOrderedSet);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v20 = objc_msgSend(v18, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        objc_msgSend(v22, "setSections:", v20);
      }
    }
  }
}

uint64_t sub_1001A3AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10083E870);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.RelationshipOrderingValueKey;
}

uint64_t _s7remindd29REMSmartListStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001A3B84 + 4 * byte_1006AC74A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001A3BA4 + 4 * byte_1006AC74F[v4]))();
}

_BYTE *sub_1001A3B84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001A3BA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A3BAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A3BB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A3BBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A3BC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.OrderableRelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMSmartListStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001A3C2C + 4 * byte_1006AC759[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001A3C60 + 4 * byte_1006AC754[v4]))();
}

uint64_t sub_1001A3C60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A3C70);
  return result;
}

uint64_t sub_1001A3C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3C84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001A3C88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3C90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMSmartListStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1001A3CF8 + 4 * byte_1006AC763[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001A3D2C + 4 * byte_1006AC75E[v4]))();
}

uint64_t sub_1001A3D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A3D3CLL);
  return result;
}

uint64_t sub_1001A3D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3D50);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1001A3D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.ValueKey;
}

uint64_t sub_1001A3D78()
{
  return sub_1000BAEEC(&qword_10083E878, &qword_10083E880);
}

unint64_t sub_1001A3DA0()
{
  unint64_t result;

  result = qword_10083E888;
  if (!qword_10083E888)
  {
    result = swift_getWitnessTable(&unk_1006AC8E4, &type metadata for REMSmartListStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083E888);
  }
  return result;
}

uint64_t sub_1001A3DE4()
{
  return sub_1000BAEEC(&qword_10083E890, &qword_10083E898);
}

unint64_t sub_1001A3E0C()
{
  unint64_t result;

  result = qword_10083E8A0;
  if (!qword_10083E8A0)
  {
    result = swift_getWitnessTable(&unk_1006AC9BC, &type metadata for REMSmartListStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083E8A0);
  }
  return result;
}

uint64_t sub_1001A3E50()
{
  return sub_1000BAEEC(&qword_10083E8A8, &qword_10083E8B0);
}

unint64_t sub_1001A3E78()
{
  unint64_t result;

  result = qword_10083E8B8;
  if (!qword_10083E8B8)
  {
    result = swift_getWitnessTable(&unk_1006ACA94, &type metadata for REMSmartListStorageCDIngestor.OrderableRelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083E8B8);
  }
  return result;
}

uint64_t sub_1001A3EBC()
{
  return sub_1000BAEEC(&qword_10083E8C0, &qword_10083E8C8);
}

unint64_t sub_1001A3EE4()
{
  unint64_t result;

  result = qword_10083E8D0;
  if (!qword_10083E8D0)
  {
    result = swift_getWitnessTable(&unk_1006ACB6C, &type metadata for REMSmartListStorageCDIngestor.RelationshipOrderingValueKey);
    atomic_store(result, (unint64_t *)&qword_10083E8D0);
  }
  return result;
}

uint64_t sub_1001A3F28(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = a1;
  if ((a2 & 0x80) == 0)
  {
    if ((a1 & 1) != 0)
      return sub_10000D2BC(_swiftEmptyArrayStorage);
    goto LABEL_7;
  }
  KeyPath = swift_getKeyPath("\b\x1B\x1B");
  sub_1001A4828(v2, a2);
  v5 = sub_10033F874(KeyPath, v2);
  v6 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v8 = _swiftEmptyArrayStorage[2];
  v7 = _swiftEmptyArrayStorage[3];
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
  a1 = specialized Array._endMutation()(v9);
  if ((a2 & 1) == 0)
  {
LABEL_7:
    v10 = rem_currentRuntimeVersion(a1);
    v11 = swift_getKeyPath(&unk_1006ACC30);
    v12 = sub_10033F888(v11, v10);
    v13 = swift_release(v11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
    v15 = _swiftEmptyArrayStorage[2];
    v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
    v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
    specialized Array._endMutation()(v16);
  }
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

const char *sub_1001A4070()
{
  return "reminderIdentifier";
}

id sub_1001A4084@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "sortOrder");
  *a2 = result;
  return result;
}

id sub_1001A40B4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setSortOrder:", *a1);
}

uint64_t sub_1001A40C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006ACC98);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100871CA8 = v1;
  return result;
}

void sub_1001A414C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  Class isa;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t inited;
  id v31;
  id v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _BYTE v39[32];
  id v40;
  id v41;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*a1);
    v38 = v6;
    if (v11)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    v13 = 0;
    goto LABEL_12;
  }
  if (v10 < 0)
    v14 = *a1;
  else
    v14 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v15 = _CocoaArrayWrapper.endIndex.getter(v14);
  v38 = v6;
  if (!v15)
    goto LABEL_11;
LABEL_3:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v12 = *(id *)(v10 + 32);
  }
  v13 = v12;
  swift_bridgeObjectRelease();
LABEL_12:
  v41 = v13;
  v16 = sub_10001A630(&qword_10083E8F0);
  Optional.tryUnwrap(_:file:line:)(&v40, 0xD00000000000006ALL, 0x80000001006FB640, 0xD00000000000006DLL, 0x80000001006FB570, 126, v16);
  if (v3)
  {
LABEL_13:

    return;
  }
  v37 = a2;

  v13 = v40;
  v17 = objc_msgSend(v40, "account");
  v41 = v17;
  v18 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(&v40, 0xD000000000000049, 0x80000001006FB6B0, 0xD00000000000006DLL, 0x80000001006FB570, 128, v18);

  v19 = v40;
  v40 = 0;
  v20 = objc_msgSend(v19, "remObjectIDWithError:", &v40);
  v21 = v40;
  if (!v20)
  {
    v34 = v40;
    _convertNSErrorToError(_:)(v21);

    swift_willThrow(v35);
    goto LABEL_13;
  }
  v22 = v20;
  v23 = (void *)objc_opt_self(REMReminder);
  v24 = v21;
  v25 = objc_msgSend(v13, "reminderIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v38);
  v27 = v19;
  v28 = objc_msgSend(v23, "objectIDWithUUID:", isa);

  v29 = type metadata accessor for REMDueDateDeltaAlertCDIngestor();
  inited = swift_initStackObject(v29, v39);
  *(_QWORD *)(inited + 16) = v22;
  *(_QWORD *)(inited + 24) = v28;
  v31 = v22;
  v32 = v28;
  v33 = sub_1001A46E4(v10);

  swift_release(inited);
  *v37 = v33;
}

void sub_1001A44C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_10001A630(&qword_10083E8E8);
  v3 = static _DictionaryStorage.copy(original:)(a1);
  v4 = (_QWORD *)v3;
  v5 = 0;
  v24 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v23 = (unint64_t)(v9 + 63) >> 6;
  v12 = v3 + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = *(void **)(*(_QWORD *)(v24 + 48) + 8 * i);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * i);
    v19 = v26;
    v20 = v18;
    swift_bridgeObjectRetain(v19);
    sub_1001A414C(&v26, &v25);
    swift_bridgeObjectRelease();
    if (v1)
    {

      swift_release(v4);
      return;
    }
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v4[6] + 8 * i) = v20;
    *(_QWORD *)(v4[7] + 8 * i) = v25;
    v21 = v4[2];
    v15 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v22;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_27;
    if (v5 >= v23)
      return;
    v16 = *(_QWORD *)(v7 + 8 * v5);
    if (!v16)
      break;
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v23)
    return;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 2;
  if (v5 + 2 >= v23)
    return;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 3;
  if (v5 + 3 >= v23)
    return;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v23)
      return;
    v16 = *(_QWORD *)(v7 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_1001A46E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = sub_1006776CC(v7);

      if (v2)
        return (_QWORD *)swift_release(_swiftEmptyArrayStorage);
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001A4828(uint64_t result, char a2)
{
  if (a2 < 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_1001A483C(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  id *v31;
  id v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  Class isa;
  uint64_t inited;
  uint64_t KeyPath;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  Class v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  Class v57;
  char *v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t result;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  _QWORD *v107;
  id v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char v113[32];
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  char v117[48];
  char v118[40];
  id v119;

  v5 = v3;
  LODWORD(v7) = a2;
  v112 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v99 - v12;
  v14 = (id *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v15)
      goto LABEL_3;
LABEL_82:
    swift_bridgeObjectRelease();
    return sub_1002AF1F4((uint64_t)_swiftEmptyArrayStorage);
  }
LABEL_78:
  if (a1 < 0)
    v93 = a1;
  else
    v93 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v93))
    goto LABEL_82;
LABEL_3:
  v16 = a1 & 0xC000000000000001;
  v109 = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_85:
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_87;
    }
    v17 = *(id *)(a1 + 32);
  }
  a3 = (unint64_t)v17;
  swift_bridgeObjectRelease();
  LODWORD(v108) = v7;
  if (v14)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = _swiftEmptyArrayStorage;
  v111 = v4;
  v105 = (id)a3;
  if (!v4)
    goto LABEL_23;
  v115 = _swiftEmptyArrayStorage;
  v14 = (id *)&v115;
  specialized ContiguousArray.reserveCapacity(_:)(v4);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    while (1)
    {
      if (v4 == v7)
      {
        __break(1u);
        goto LABEL_76;
      }
      v20 = v16 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1) : *(id *)(a1 + 8 * v7 + 32);
      v21 = v20;
      v119 = 0;
      v22 = objc_msgSend(v20, "remObjectIDWithError:", &v119);
      v23 = v119;
      if (!v22)
        break;
      a3 = (unint64_t)v22;
      v24 = v119;
      v25 = sub_1005CBC20((void *)a3);
      if (v5)
        goto LABEL_62;
      v26 = v25;
      ++v7;

      v14 = (id *)&v115;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      a3 = v115[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a3);
      v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a3, v26);
      specialized ContiguousArray._endMutation()(v28);
      v4 = v111;
      if (v111 == v7)
      {
        v19 = v115;
LABEL_23:
        v29 = v19[2];
        v107 = v19;
        if (v29)
        {
          v115 = _swiftEmptyArrayStorage;
          sub_1001C1BE4(0, v29, 0);
          v30 = v115;
          v31 = (id *)(v19 + 4);
          do
          {
            v32 = *v31;
            v33 = objc_msgSend(v32, "uuid");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

            v115 = v30;
            v35 = v30[2];
            v34 = v30[3];
            if (v35 >= v34 >> 1)
            {
              sub_1001C1BE4(v34 > 1, v35 + 1, 1);
              v30 = v115;
            }
            v30[2] = v35 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v35, v13, v112);
            ++v31;
            --v29;
          }
          while (v29);
        }
        else
        {
          v30 = _swiftEmptyArrayStorage;
        }
        sub_1001A3F28((uint64_t)v30, v108 & 1 | 0x80);
        swift_bridgeObjectRelease();
        sub_100677FF4();
      }
    }
    a3 = (unint64_t)v119;
    _convertNSErrorToError(_:)(v23);

    swift_willThrow(v70);
LABEL_62:

    v71 = v115;
    swift_release(v71);
    return a3;
  }
LABEL_87:
  __break(1u);
  swift_once(&qword_100836E70, sub_1001A40C8);
  sub_1001A54DC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend((id)v16, "setSortDescriptors:", isa);

  v104 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v104, v118);
  v103 = xmmword_1006A7330;
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006ACC60);
  *(_QWORD *)(inited + 32) = KeyPath;
  v115 = (_QWORD *)inited;
  specialized Array._endMutation()(KeyPath);
  a3 = (unint64_t)v115;
  v119 = (id)v4;
  sub_1001C1B0C(0, 1, 0);
  v39 = v119;
  v102 = (char *)v16;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
    a1 = v40;
  }
  else
  {
    a1 = *(_QWORD *)(a3 + 32);
    v40 = swift_retain();
  }
  v41 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v40);
  if (v42)
  {
    v43 = v41;
    v4 = v42;
    swift_release(a1);
    v45 = v39[2];
    v44 = v39[3];
    if (v45 >= v44 >> 1)
    {
      sub_1001C1B0C(v44 > 1, v45 + 1, 1);
      v39 = v119;
    }
    v39[2] = v45 + 1;
    v46 = (char *)&v39[2 * v45];
    *((_QWORD *)v46 + 4) = v43;
    *((_QWORD *)v46 + 5) = v4;
    swift_bridgeObjectRelease();
    v47 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v39);
    v13 = v102;
    objc_msgSend(v102, "setRelationshipKeyPathsForPrefetching:", v47);

    v48 = type metadata accessor for REMCDDueDateDeltaAlert();
    v49 = NSManagedObjectContext.fetch<A>(_:)(v13, v48);
    if (v5)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      a1 = v49;
      if (v111 >= 2)
      {
        swift_bridgeObjectRelease();
        v115 = _swiftEmptyDictionarySingleton;
        if ((unint64_t)a1 >> 62)
        {
          if (a1 < 0)
            v95 = a1;
          else
            v95 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          a3 = _CocoaArrayWrapper.endIndex.getter(v95);
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v100 = 0;
        if (a3)
        {
          v108 = (id)objc_opt_self(REMCDReminder);
          v109 = a1 & 0xC000000000000001;
          v7 = (uint64_t)_swiftEmptyDictionarySingleton;
          v16 = 4;
          v107 = (_QWORD *)a3;
          v106 = a1;
          while (1)
          {
            v14 = (id *)(v16 - 4);
            if (v109)
            {
              v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a1);
              v55 = v16 - 3;
              if (__OFADD__(v14, 1))
                goto LABEL_76;
            }
            else
            {
              v54 = *(id *)(a1 + 8 * v16);
              v55 = v16 - 3;
              if (__OFADD__(v14, 1))
              {
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                goto LABEL_78;
              }
            }
            v111 = v55;
            a3 = (unint64_t)v54;
            v56 = objc_msgSend(v54, "reminderIdentifier");
            v4 = (unint64_t)v110;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

            v57 = UUID._bridgeToObjectiveC()().super.isa;
            a1 = (uint64_t)objc_msgSend(v108, "objectIDWithUUID:", v57);

            (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v4, v112);
            v14 = (id *)v7;
            v5 = sub_1002C672C((void *)a1);
            v59 = *(_QWORD *)(v7 + 16);
            v60 = (v58 & 1) == 0;
            v61 = v59 + v60;
            if (__OFADD__(v59, v60))
              goto LABEL_77;
            v13 = v58;
            if (*(_QWORD *)(v7 + 24) < v61)
            {
              sub_1002CC590(v61, 1);
              v7 = (uint64_t)v115;
              v62 = sub_1002C672C((void *)a1);
              if ((v13 & 1) != (v63 & 1))
              {
                v96 = sub_10001A630((uint64_t *)&unk_100843C70);
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v96);
                __break(1u);
                goto LABEL_93;
              }
              v5 = v62;
            }
            if ((v13 & 1) != 0)
            {

              v50 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
              v4 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v52 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v4 >= v52 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1);
              v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, a3);
              specialized Array._endMutation()(v53);
            }
            else
            {
              v64 = swift_allocObject(v104, 40, 7);
              *(_OWORD *)(v64 + 16) = v103;
              *(_QWORD *)(v64 + 32) = a3;
              v119 = (id)v64;
              v14 = &v119;
              specialized Array._endMutation()(v64);
              v65 = v119;
              *(_QWORD *)(v7 + 8 * (v5 >> 6) + 64) |= 1 << v5;
              v66 = 8 * v5;
              *(_QWORD *)(*(_QWORD *)(v7 + 48) + v66) = a1;
              *(_QWORD *)(*(_QWORD *)(v7 + 56) + v66) = v65;
              v67 = *(_QWORD *)(v7 + 16);
              v68 = __OFADD__(v67, 1);
              v69 = v67 + 1;
              if (v68)
              {
                __break(1u);
                goto LABEL_85;
              }
              *(_QWORD *)(v7 + 16) = v69;
            }
            a1 = v106;
            a3 = (unint64_t)v107;
            ++v16;
            if ((_QWORD *)v111 == v107)
              goto LABEL_66;
          }
        }
        v7 = (uint64_t)_swiftEmptyDictionarySingleton;
LABEL_66:
        swift_bridgeObjectRelease();
        v74 = v100;
        sub_1001A44C4(v7);
        if (!v74)
          a3 = v75;

        swift_release(v7);
        goto LABEL_71;
      }
      if (v107[2])
      {
        v72 = (void *)v107[4];
        v73 = v72;
      }
      else
      {
        v72 = 0;
      }
      swift_bridgeObjectRelease();
      v119 = v72;
      v76 = sub_10001A630(&qword_10083E8D8);
      Optional.tryUnwrap(_:file:line:)(&v115, 0xD000000000000070, 0x80000001006FB4F0, 0xD00000000000006DLL, 0x80000001006FB570, 113, v76);

      v77 = v115;
      v78 = objc_msgSend(v105, "account");
      v119 = v78;
      v79 = sub_10001A630((uint64_t *)&unk_10083ADA0);
      Optional.tryUnwrap(_:file:line:)(&v115, 0xD00000000000005BLL, 0x80000001006FB5E0, 0xD00000000000006DLL, 0x80000001006FB570, 114, v79);

      v80 = v115;
      v115 = 0;
      v81 = objc_msgSend(v80, "remObjectIDWithError:", &v115);
      a3 = (unint64_t)v115;
      if (v81)
      {
        v82 = v81;
        v83 = type metadata accessor for REMDueDateDeltaAlertCDIngestor();
        v84 = swift_initStackObject(v83, v113);
        *(_QWORD *)(v84 + 16) = v82;
        *(_QWORD *)(v84 + 24) = v77;
        v85 = (id)a3;
        v86 = v77;
        v89 = sub_1001A46E4(a1);
        swift_bridgeObjectRelease();
        v90 = sub_10001A630(&qword_10083E8E0);
        v91 = swift_initStackObject(v90, v117);
        *(_OWORD *)(v91 + 16) = xmmword_1006A3C00;
        *(_QWORD *)(v91 + 32) = v86;
        *(_QWORD *)(v91 + 40) = v89;
        v92 = v86;
        a3 = sub_1002AF1F4(v91);
        swift_setDeallocating(v84);

        goto LABEL_71;
      }
      v87 = v115;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(a3);

      swift_willThrow(v88);
    }

LABEL_71:
    return a3;
  }
LABEL_93:
  v115 = 0;
  v116 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v97._countAndFlagsBits = 0xD00000000000002CLL;
  v97._object = (void *)0x80000001006F8C10;
  String.append(_:)(v97);
  v114 = a1;
  v98 = sub_10001A630(&qword_100843880);
  _print_unlocked<A, B>(_:_:)(&v114, &v115, v98, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v115, v116, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

unint64_t sub_1001A54DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840BE0;
  if (!qword_100840BE0)
  {
    v1 = objc_opt_self(NSSortDescriptor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100840BE0);
  }
  return result;
}

id sub_1001A5518@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1001A5550(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

id sub_1001A5564@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "sortOrder");
  *a2 = result;
  return result;
}

id sub_1001A5594(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setSortOrder:", *a1);
}

uint64_t sub_1001A55A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A560C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A56D0(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1001A597C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1001A602C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v6 = v5;
      sub_1001A9820();
      v7 = static NSObject.== infix(_:_:)(v6);

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v14 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v15 = *(id *)(a2 + 8 * v4);
        v16 = static NSObject.== infix(_:_:)(v15);

        if ((v16 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v14 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a2);
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v12 = v10;
      v13 = static NSObject.== infix(_:_:)(v10);
      swift_unknownObjectRelease(v12);
      if ((v13 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v11 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v17 = a2;
    else
      v17 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_1001A61A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 5;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 8 * v14));
    v7 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

BOOL sub_1001A62F4(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A6354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v2);
  sub_1001A63D8((uint64_t)v4);
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

void sub_1001A63D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;

  v84 = a1;
  v116 = sub_10001A630((uint64_t *)&unk_100839C80);
  v2 = __chkstk_darwin(v116);
  v114 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v115 = (char *)&v80 - v4;
  v5 = sub_10001A630(&qword_10083E948);
  __chkstk_darwin(v5);
  v102 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists(0);
  v105 = *(_QWORD *)(v112 - 8);
  v7 = __chkstk_darwin(v112);
  v91 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v95 = (char *)&v80 - v9;
  v10 = sub_10001A630(&qword_10083E950);
  __chkstk_darwin(v10);
  v99 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags(0);
  v109 = *(_QWORD *)(v101 - 8);
  v12 = __chkstk_darwin(v101);
  v90 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v100 = (char *)&v80 - v14;
  v15 = sub_10001A630(&qword_10083E958);
  __chkstk_darwin(v15);
  v113 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation(0);
  v107 = *(_QWORD *)(v108 - 8);
  v17 = __chkstk_darwin(v108);
  v92 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v98 = (char *)&v80 - v19;
  v20 = sub_10001A630(&qword_10083E960);
  __chkstk_darwin(v20);
  v88 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v96 = *(_QWORD *)(v103 - 8);
  v22 = __chkstk_darwin(v103);
  v85 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v82 = (char *)&v80 - v24;
  v25 = sub_10001A630(&qword_10083E968);
  __chkstk_darwin(v25);
  v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A630(&qword_10083E970);
  __chkstk_darwin(v28);
  v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A630(&qword_10083E978);
  v32 = __chkstk_darwin(v31);
  v83 = (char *)&v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v86 = (char *)&v80 - v35;
  v36 = __chkstk_darwin(v34);
  v87 = (char *)&v80 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v80 - v38;
  v40 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v94 = (char *)&v80 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v45 = (char *)&v80 - v44;
  v46 = _s16DateFilterActionOMa(0);
  v47 = __chkstk_darwin(v46);
  v97 = (char *)&v80 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v110 = (char *)&v80 - v50;
  v117 = _swiftEmptyArrayStorage;
  v51 = REMCustomSmartListFilterDescriptor.operation.getter(v49);
  REMCustomSmartListFilterDescriptor.date.getter(v51);
  v52 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate(0);
  v89 = *(_QWORD *)(v52 - 8);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
  v53 = v93(v39, 1, v52);
  v54 = sub_10000882C((uint64_t)v39, &qword_10083E978);
  v106 = v1;
  REMCustomSmartListFilterDescriptor.time.getter(v54);
  v55 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime(0);
  v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v30, 1, v55);
  sub_10000882C((uint64_t)v30, &qword_10083E970);
  v57 = *(int *)(v25 + 48);
  v81 = v25;
  v58 = *(int *)(v25 + 64);
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v27, v45, v40);
  v27[v57] = v53 != 1;
  v27[v58] = v56 != 1;
  v111 = v41;
  v104 = v40;
  if (v53 == 1)
  {
    v59 = v96;
    v63 = (uint64_t)v110;
    if (v56 == 1)
      v64 = 1;
    else
      v64 = 3;
    v61 = v103;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v110, v64, 4, v103);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v27, v40);
  }
  else
  {
    v59 = v96;
    v60 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v27, v40);
    v61 = v103;
    if ((_DWORD)v60 != enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
    {
      if ((_DWORD)v60 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v81, v81);
        __break(1u);
        JUMPOUT(0x1001A7E44);
      }
      if (v56 != 1)
      {
        v62 = (uint64_t)v83;
        REMCustomSmartListFilterDescriptor.date.getter(v60);
        if (v93((char *)v62, 1, v52) != 1)
        {
          v76 = v89;
          v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 88))(v62, v52);
          v78 = enum case for REMCustomSmartListFilterDescriptor.FilterDate.noDate(_:);
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v62, v52);
          v72 = v77 == v78;
          v61 = v103;
          v67 = (uint64_t)v97;
          if (v72)
          {
            v63 = (uint64_t)v110;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v110, 4, 4, v103);
            goto LABEL_25;
          }
LABEL_24:
          v63 = (uint64_t)v110;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v110, 3, 4, v61);
LABEL_25:
          sub_1001A9660(v63, v67);
          v79 = (char *)&loc_1001A6DE4
              + dword_1001A7E44[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v67, 4, v61)];
          __asm { BR              X10 }
        }
LABEL_16:
        sub_10000882C(v62, &qword_10083E978);
        v67 = (uint64_t)v97;
        goto LABEL_24;
      }
    }
    v65 = (uint64_t)v87;
    REMCustomSmartListFilterDescriptor.date.getter(v60);
    if (v93((char *)v65, 1, v52) == 1)
    {
      sub_10000882C(v65, &qword_10083E978);
      v66 = (uint64_t)v88;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v88, 1, 1, v61);
      goto LABEL_15;
    }
    v66 = (uint64_t)v88;
    REMCustomSmartListFilterDescriptor.FilterDate.range(now:)(v84);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v65, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v66, 1, v61) == 1)
    {
LABEL_15:
      v68 = sub_10000882C(v66, &qword_10083E960);
      v62 = (uint64_t)v86;
      REMCustomSmartListFilterDescriptor.date.getter(v68);
      if (v93((char *)v62, 1, v52) != 1)
      {
        v69 = v89;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 88))(v62, v52);
        v71 = enum case for REMCustomSmartListFilterDescriptor.FilterDate.noDate(_:);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v62, v52);
        v72 = v70 == v71;
        v61 = v103;
        v67 = (uint64_t)v97;
        if (v72)
        {
          v63 = (uint64_t)v110;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v110, 2, 4, v103);
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    v73 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
    v74 = v82;
    v73(v82, v66, v61);
    v75 = v110;
    v73(v110, (uint64_t)v74, v61);
    v63 = (uint64_t)v75;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v75, 0, 4, v61);
  }
  v67 = (uint64_t)v97;
  goto LABEL_25;
}

id sub_1001A7E58@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "priority");
  *a2 = result;
  return result;
}

id sub_1001A7E88(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setPriority:", *a1);
}

id sub_1001A7E9C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "displayDateIsAllDay");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001A7ECC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDisplayDateIsAllDay:", *a1);
}

void *sub_1001A7EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t PredicateType;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  _BYTE v40[40];
  uint64_t v41;
  _BYTE v42[40];

  v1 = v0;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v3 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v5 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v6);
  v9 = &v39[-v8];
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v3 + 16))(&v39[-v8], v1, PredicateType, v7);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter(v10);
  v11 = sub_1001A97B8();
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8);
  v14 = v13(v5, PredicateType);
  if ((v12 & 1) != 0)
  {
    v13(v9, PredicateType);
    v15 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v15, v39);
    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
    v17 = &unk_1006ACDB8;
  }
  else
  {
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter(v14);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
    v19 = v13(v5, PredicateType);
    if ((v18 & 1) == 0)
    {
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter(v19);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
      v26 = v13(v5, PredicateType);
      if ((v25 & 1) != 0)
      {
        v13(v9, PredicateType);
        if (qword_100836E78 != -1)
          swift_once(&qword_100836E78, sub_1001A8A14);
        v24 = qword_10083E8F8;
      }
      else
      {
        static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(v26);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
        v28 = v13(v5, PredicateType);
        if ((v27 & 1) != 0)
        {
          v13(v9, PredicateType);
          if (qword_100836E88 != -1)
            swift_once(&qword_100836E88, sub_1001A8A34);
          v24 = qword_10083E908;
        }
        else
        {
          static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter(v28);
          v29 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
          v30 = v13(v5, PredicateType);
          if ((v29 & 1) != 0)
          {
            v13(v9, PredicateType);
            if (qword_100836E98 != -1)
              swift_once(&qword_100836E98, sub_1001A8AEC);
            v24 = qword_10083E918;
          }
          else
          {
            static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter(v30);
            v31 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
            v32 = v13(v5, PredicateType);
            if ((v31 & 1) != 0)
            {
              v13(v9, PredicateType);
              if (qword_100836EA8 != -1)
                swift_once(&qword_100836EA8, sub_1001A8B14);
              v24 = qword_10083E928;
            }
            else
            {
              static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter(v32);
              v33 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
              v34 = v13(v5, PredicateType);
              if ((v33 & 1) == 0)
              {
                static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter(v34);
                v36 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
                v37 = v13(v5, PredicateType);
                if ((v36 & 1) == 0)
                {
                  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter(v37);
                  dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
                  v13(v5, PredicateType);
                  v13(v9, PredicateType);
                  return &_swiftEmptySetSingleton;
                }
                v13(v9, PredicateType);
                v38 = sub_10001A630((uint64_t *)&unk_10083AD90);
                inited = swift_initStackObject(v38, v42);
                *(_OWORD *)(inited + 16) = xmmword_1006A7330;
                v17 = &unk_1006ACED0;
                goto LABEL_5;
              }
              v13(v9, PredicateType);
              if (qword_100836EB8 != -1)
                swift_once(&qword_100836EB8, sub_1001A8B3C);
              v24 = qword_10083E938;
            }
          }
        }
      }
      swift_bridgeObjectRetain(v24);
      return (void *)v24;
    }
    v13(v9, PredicateType);
    v20 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v20, v40);
    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
    v17 = &unk_1006ACD80;
  }
LABEL_5:
  KeyPath = swift_getKeyPath(v17);
  *(_QWORD *)(inited + 32) = KeyPath;
  v41 = inited;
  specialized Array._endMutation()(KeyPath);
  v22 = v41;
  sub_10011F5C8(v41);
  v24 = v23;
  swift_bridgeObjectRelease(v22);
  return (void *)v24;
}

void *sub_1001A8370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t PredicateType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[40];

  v1 = v0;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v3 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v5 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = __chkstk_darwin(v6);
  v9 = &v38[-v8 - 8];
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v3 + 16))(&v38[-v8 - 8], v1, PredicateType, v7);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter(v10);
  v11 = sub_1001A97B8();
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
  v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v14 = v13(v5, PredicateType);
  if ((v12 & 1) == 0)
  {
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter(v14);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
    v16 = v13(v5, PredicateType);
    if ((v15 & 1) == 0)
    {
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter(v16);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
      v18 = v13(v5, PredicateType);
      if ((v17 & 1) == 0)
      {
        static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter(v18);
        v21 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
        v22 = v13(v5, PredicateType);
        if ((v21 & 1) != 0)
        {
          v13(v9, PredicateType);
          if (qword_100836E80 != -1)
            swift_once(&qword_100836E80, sub_1001A8A20);
          v19 = qword_10083E900;
        }
        else
        {
          static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(v22);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
          v24 = v13(v5, PredicateType);
          if ((v23 & 1) != 0)
          {
            v13(v9, PredicateType);
            if (qword_100836E90 != -1)
              swift_once(&qword_100836E90, sub_1001A8AD8);
            v19 = qword_10083E910;
          }
          else
          {
            static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter(v24);
            v25 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
            v26 = v13(v5, PredicateType);
            if ((v25 & 1) != 0)
            {
              v13(v9, PredicateType);
              if (qword_100836EA0 != -1)
                swift_once(&qword_100836EA0, sub_1001A8B00);
              v19 = qword_10083E920;
            }
            else
            {
              static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter(v26);
              v27 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
              v28 = v13(v5, PredicateType);
              if ((v27 & 1) != 0)
              {
                v13(v9, PredicateType);
                if (qword_100836EB0 != -1)
                  swift_once(&qword_100836EB0, sub_1001A8B28);
                v19 = qword_10083E930;
              }
              else
              {
                static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter(v28);
                v29 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
                v30 = v13(v5, PredicateType);
                if ((v29 & 1) == 0)
                {
                  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter(v30);
                  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v9, PredicateType, v11);
                  v13(v5, PredicateType);
                  v13(v9, PredicateType);
                  if ((v31 & 1) != 0)
                  {
                    v32 = sub_10001A630((uint64_t *)&unk_10083AD90);
                    inited = swift_initStackObject(v32, v38);
                    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
                    KeyPath = swift_getKeyPath(&unk_1006ACE68);
                    *(_QWORD *)(inited + 32) = KeyPath;
                    v37 = inited;
                    specialized Array._endMutation()(KeyPath);
                    v35 = v37;
                    sub_10011F5C8(v37);
                    v19 = v36;
                    swift_bridgeObjectRelease(v35);
                    return (void *)v19;
                  }
                  return &_swiftEmptySetSingleton;
                }
                v13(v9, PredicateType);
                if (qword_100836EC0 != -1)
                  swift_once(&qword_100836EC0, sub_1001A8B50);
                v19 = qword_10083E940;
              }
            }
          }
        }
        swift_bridgeObjectRetain(v19);
        return (void *)v19;
      }
    }
  }
  v13(v9, PredicateType);
  return &_swiftEmptySetSingleton;
}

void sub_1001A8790(uint64_t a1)
{
  sub_1001A87A8(a1, (uint64_t (*)(uint64_t))sub_1001A7EE0);
}

void sub_1001A879C(uint64_t a1)
{
  sub_1001A87A8(a1, (uint64_t (*)(uint64_t))sub_1001A8370);
}

void sub_1001A87A8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t PredicateType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD v25[2];

  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v5 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v25 - v9;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
LABEL_29:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002E78F8((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_3;
    }
  }
  v11 = &_swiftEmptySetSingleton;
LABEL_3:
  v12 = *(_QWORD *)(a1 + 56);
  v25[0] = a1 + 56;
  v25[1] = v11;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v16 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_7;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v16)
      goto LABEL_27;
    v23 = *(_QWORD *)(v25[0] + 8 * v22);
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_27;
      v23 = *(_QWORD *)(v25[0] + 8 * v17);
      if (!v23)
      {
        v17 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_27;
        v23 = *(_QWORD *)(v25[0] + 8 * v17);
        if (!v23)
        {
          v17 = v22 + 3;
          if (v22 + 3 >= v16)
            goto LABEL_27;
          v23 = *(_QWORD *)(v25[0] + 8 * v17);
          if (!v23)
          {
            v17 = v22 + 4;
            if (v22 + 4 >= v16)
              goto LABEL_27;
            v23 = *(_QWORD *)(v25[0] + 8 * v17);
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_26:
    v15 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_7:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * v19, PredicateType);
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, PredicateType);
    v21 = a2(v20);
    sub_1002B6490(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, PredicateType);
  }
  v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_27:
    swift_release(a1);
    return;
  }
  v23 = *(_QWORD *)(v25[0] + 8 * v24);
  if (v23)
  {
    v17 = v24;
    goto LABEL_26;
  }
  while (1)
  {
    v17 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v17 >= v16)
      goto LABEL_27;
    v23 = *(_QWORD *)(v25[0] + 8 * v17);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
  __break(1u);
}

void sub_1001A8A14(uint64_t a1)
{
  sub_1001A8A40(a1, &qword_10083E8F8);
}

void sub_1001A8A20()
{
  qword_10083E900 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001A8A34(uint64_t a1)
{
  sub_1001A8A40(a1, &qword_10083E908);
}

void sub_1001A8A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[48];

  v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v3, v8);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006ACDF0);
  KeyPath = swift_getKeyPath(&unk_1006ACE38);
  *(_QWORD *)(inited + 40) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  sub_10011F5C8(inited);
  v7 = v6;
  swift_bridgeObjectRelease(inited);
  *a2 = v7;
}

void sub_1001A8AD8()
{
  qword_10083E910 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001A8AEC()
{
  qword_10083E918 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001A8B00(uint64_t a1)
{
  sub_1001A8B64(a1, (uint64_t)&unk_1006ACD50, &qword_10083E920);
}

void sub_1001A8B14(uint64_t a1)
{
  sub_1001A8B64(a1, (uint64_t)&unk_1006ACF08, &qword_10083E928);
}

void sub_1001A8B28()
{
  qword_10083E930 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001A8B3C()
{
  qword_10083E938 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001A8B50(uint64_t a1)
{
  sub_1001A8B64(a1, (uint64_t)&unk_1006ACE98, &qword_10083E940);
}

void sub_1001A8B64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v11);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(a2);
  *(_QWORD *)(inited + 32) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  v8 = inited;
  sub_10011F5C8(inited);
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  *a3 = v10;
}

uint64_t sub_1001A8BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v20 = a2;
  v5 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMHashtagLabelDataView.Operation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a3, v5, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v15 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
  {
    v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.Operation.all(_:);
LABEL_5:
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *v16, v9);
    v17 = sub_1004D6EB4(v19, v20, (uint64_t)v13, v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return (uint64_t)v17;
  }
  if (v15 == enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
  {
    v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.Operation.some(_:);
    goto LABEL_5;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

uint64_t sub_1001A8D64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_10037DD78(2, 2, *v0);
  if (!v1)
  {
    v3 = sub_1004D6248(result);
    swift_bridgeObjectRelease();
    sub_1004D6ACC(v3);
    v5 = v4;
    swift_release(v3);
    return v5;
  }
  return result;
}

_QWORD *sub_1001A8DCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  __int128 v76;
  char v77[48];
  char v78[48];
  char v79[48];
  char v80[48];
  char v81[24];
  uint64_t v82;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD **)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v72 - v5;
  v7 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v72 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v72 - v18;
  v20 = REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange.lowerBound.getter(v17);
  REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange.upperBound.getter(v20);
  v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1000CDA74((uint64_t)v19, (uint64_t)v9);
  sub_1000CDA74((uint64_t)v16, v21);
  v22 = (uint64_t (*)(char *, uint64_t, uint64_t))v1[6];
  LODWORD(v16) = v22(v9, 1, v0);
  v23 = v22((char *)v21, 1, v0);
  v24 = v23;
  if ((_DWORD)v16 != 1)
  {
    v26 = (void (*)(char *, char *, uint64_t))v1[4];
    v26(v6, v9, v0);
    if (v24 != 1)
    {
      v26(v4, (char *)v21, v0);
      v48 = sub_10001A630(&qword_10083C4C0);
      inited = swift_initStackObject(v48, v79);
      v76 = xmmword_1006A3C40;
      *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
      KeyPath = swift_getKeyPath(&unk_1006ACE38);
      v51 = sub_10033E078(KeyPath);
      swift_release(KeyPath);
      *(_QWORD *)(inited + 32) = v51;
      v52 = swift_getKeyPath(&unk_1006ACDF0);
      Date.startOfDay.getter();
      v73 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v1[7];
      v73(v13, 0, 1, v0);
      v53 = sub_1002E74A0(v52, (uint64_t)v13);
      v54 = swift_release(v52);
      *(_QWORD *)(inited + 40) = v53;
      v82 = inited;
      specialized Array._endMutation()(v54);
      v55 = sub_10000D2BC(v82);
      v75 = v6;
      v56 = (void *)v55;
      v74 = swift_allocObject(v48, 40, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1006A3C00;
      v57 = swift_initStackObject(v48, v78);
      *(_OWORD *)(v57 + 16) = v76;
      *(_QWORD *)(v57 + 32) = v56;
      v58 = swift_initStackObject(v48, v77);
      *(_OWORD *)(v58 + 16) = v76;
      v59 = swift_getKeyPath(&unk_1006ACDF0);
      v60 = (void (*)(char *, char *, uint64_t))v1[2];
      v60(v13, v75, v0);
      v61 = v73;
      v73(v13, 0, 1, v0);
      *(_QWORD *)&v76 = v56;
      v62 = sub_10033DACC(v59, (uint64_t)v13);
      swift_release(v59);
      *(_QWORD *)(v58 + 32) = v62;
      v63 = v75;
      v64 = swift_getKeyPath(&unk_1006ACDF0);
      v60(v13, v4, v0);
      v61(v13, 0, 1, v0);
      v65 = sub_10033DAA4(v64, (uint64_t)v13);
      v66 = swift_release(v64);
      *(_QWORD *)(v58 + 40) = v65;
      v82 = v58;
      specialized Array._endMutation()(v66);
      v67 = sub_10000D2BC(v82);
      *(_QWORD *)(v57 + 40) = v67;
      v82 = v57;
      specialized Array._endMutation()(v67);
      v68 = sub_10001CC54(v82);
      v69 = v74;
      *(_QWORD *)(v74 + 32) = v68;
      v82 = v69;
      specialized Array._endMutation()(v68);
      v25 = v82;

      v70 = (void (*)(char *, uint64_t))v1[1];
      v70(v4, v0);
      v70(v63, v0);
      return (_QWORD *)v25;
    }
    v27 = sub_10001A630(&qword_10083C4C0);
    v28 = swift_initStackObject(v27, v81);
    v76 = xmmword_1006A3C40;
    *(_OWORD *)(v28 + 16) = xmmword_1006A3C40;
    v29 = swift_getKeyPath(&unk_1006ACE38);
    v30 = sub_10033E078(v29);
    swift_release(v29);
    *(_QWORD *)(v28 + 32) = v30;
    v31 = swift_getKeyPath(&unk_1006ACDF0);
    Date.startOfDay.getter();
    v32 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v1[7];
    v32(v13, 0, 1, v0);
    v33 = sub_1002E74A0(v31, (uint64_t)v13);
    v34 = swift_release(v31);
    *(_QWORD *)(v28 + 40) = v33;
    v82 = v28;
    specialized Array._endMutation()(v34);
    v35 = (void *)sub_10000D2BC(v82);
    v36 = swift_allocObject(v27, 40, 7);
    *(_OWORD *)(v36 + 16) = xmmword_1006A3C00;
    v37 = swift_initStackObject(v27, v80);
    *(_OWORD *)(v37 + 16) = v76;
    *(_QWORD *)(v37 + 32) = v35;
    v38 = swift_getKeyPath(&unk_1006ACDF0);
    ((void (*)(char *, char *, uint64_t))v1[2])(v13, v6, v0);
    v32(v13, 0, 1, v0);
    v39 = v35;
    v40 = sub_10033DACC(v38, (uint64_t)v13);
    v41 = swift_release(v38);
    *(_QWORD *)(v37 + 40) = v40;
    v82 = v37;
    specialized Array._endMutation()(v41);
    v42 = sub_10001CC54(v82);
    *(_QWORD *)(v36 + 32) = v42;
    v82 = v36;
    specialized Array._endMutation()(v42);
    v25 = v82;

    goto LABEL_7;
  }
  if (v23 != 1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v1[4])(v6, v21, v0);
    v43 = sub_10001A630(&qword_10083C4C0);
    v44 = swift_allocObject(v43, 40, 7);
    *(_OWORD *)(v44 + 16) = xmmword_1006A3C00;
    v45 = swift_getKeyPath(&unk_1006ACDF0);
    ((void (*)(char *, char *, uint64_t))v1[2])(v13, v6, v0);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v1[7])(v13, 0, 1, v0);
    v46 = sub_10033DAA4(v45, (uint64_t)v13);
    v47 = swift_release(v45);
    *(_QWORD *)(v44 + 32) = v46;
    v82 = v44;
    specialized Array._endMutation()(v47);
    v25 = v82;
LABEL_7:
    ((void (*)(char *, uint64_t))v1[1])(v6, v0);
    return (_QWORD *)v25;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001A9440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t result;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v7);
  if (v9)
  {
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    v10 = sub_10001A630(&qword_10083E988);
    v11 = swift_allocObject(v10, 48, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v11 + 32) = a2;
    *(_QWORD *)(v11 + 40) = a3;
    *(_QWORD *)(v7 + 88) = sub_10001A630(&qword_10083E990);
    *(_QWORD *)(v7 + 64) = v11;
    v12 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v12, isa);

    return (uint64_t)v14;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v16._object = (void *)0x80000001006F8C10;
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v18 = a1;
    v17 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    _print_unlocked<A, B>(_:_:)(&v18, &v19, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t _s16DateFilterActionOMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10083EA08;
  if (!qword_10083EA08)
    return swift_getSingletonMetadata(a1, &_s16DateFilterActionOMn);
  return result;
}

uint64_t sub_1001A9660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s16DateFilterActionOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A96A4(uint64_t a1)
{
  uint64_t v2;

  v2 = _s16DateFilterActionOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

const char *sub_1001A96E8()
{
  return "alarmStorage";
}

const char *sub_1001A96FC()
{
  return "flagged";
}

const char *sub_1001A9710()
{
  return "priority";
}

id sub_1001A971C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "priority");
  *a2 = result;
  return result;
}

id sub_1001A974C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setPriority:", *a1);
}

const char *sub_1001A9768()
{
  return "displayDateIsAllDay";
}

id sub_1001A9774@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "displayDateIsAllDay");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001A97A4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDisplayDateIsAllDay:", *a1);
}

unint64_t sub_1001A97B8()
{
  unint64_t result;
  uint64_t PredicateType;

  result = qword_100844470;
  if (!qword_100844470)
  {
    PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, PredicateType);
    atomic_store(result, (unint64_t *)&qword_100844470);
  }
  return result;
}

unint64_t sub_1001A9820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A1E0;
  if (!qword_10083A1E0)
  {
    v1 = objc_opt_self(REMObjectID);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083A1E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReminderIDsWithMatchingHashtagsProvider()
{
  return &type metadata for ReminderIDsWithMatchingHashtagsProvider;
}

uint64_t *sub_1001A986C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 4, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t sub_1001A9934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 4, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_1001A999C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *sub_1001A9A40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

void *sub_1001A9B30(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *sub_1001A9BD4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

uint64_t sub_1001A9CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A9CD0);
}

uint64_t sub_1001A9CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 5)
    return v5 - 4;
  else
    return 0;
}

uint64_t sub_1001A9D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A9D28);
}

uint64_t sub_1001A9D28(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 4);
  else
    v5 = 0;
  v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1001A9D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 4, v2);
}

uint64_t sub_1001A9DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 4, v4);
}

uint64_t sub_1001A9DF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 4);
    return 0;
  }
  return result;
}

uint64_t sub_1001A9E48(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001A9E80 + 4 * byte_1006ACFB0[a1]))(0xD000000000000020, 0x80000001006FB7D0);
}

uint64_t sub_1001A9E80(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1001A9EC0@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001AABA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001A9EE8()
{
  unsigned __int8 *v0;

  return sub_1001A9E48(*v0);
}

uint64_t sub_1001A9EF0()
{
  void *v0;
  unsigned int v1;

  v1 = objc_msgSend(v0, "operationTypeRawValue");
  if (v1 >= 6)
    return 5;
  else
    return (0x40302010005uLL >> (8 * v1));
}

id sub_1001A9F34()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void (*v14)(char *, char *, uint64_t);
  void *v15;
  Class isa;
  id v17;
  uint64_t v19;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  v12 = objc_msgSend(v1, "templateIdentifier");
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v14(v11, v4, v5);
  v15 = (void *)objc_opt_self(REMTemplate);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, "objectIDWithUUID:", isa);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v17;
}

id sub_1001AA0F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void (*v14)(char *, char *, uint64_t);
  int v15;
  void *v16;
  NSUUID v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v22;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v22 - v10;
  v12 = objc_msgSend(v1, "listIdentifier");
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_6;
  }
  v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_6:
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v14(v11, v4, v5);
  v15 = (unsigned __int16)objc_msgSend(v1, "operationTypeRawValue");
  if ((v15 - 1) < 3)
  {
    v16 = (void *)objc_opt_self(REMList);
    v17.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v16, "objectIDWithUUID:", v17.super.isa);
LABEL_10:
    v19 = v18;

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return v19;
  }
  if (v15 == 4)
  {
    v20 = (void *)objc_opt_self(REMSmartList);
    v17.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v20, "objectIDWithUUID:", v17.super.isa);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return 0;
}

uint64_t sub_1001AA38C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Swift::String v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  void *v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  uint64_t v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v88;
  id v89;
  _QWORD v90[2];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  *(_QWORD *)&v5 = swift_bridgeObjectRelease().n128_u64[0];
  v90[0] = 0xD000000000000021;
  v90[1] = 0x80000001006FB800;
  v6 = objc_msgSend(v0, "objectID", v5);
  v7 = objc_msgSend(v6, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8069182;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  v14 = v90[0];
  v13 = v90[1];
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  v90[0] = 0xD000000000000017;
  v90[1] = 0x80000001006FB830;
  v16 = (unsigned __int16)objc_msgSend(v1, "operationTypeRawValue", v15) - 1;
  v17 = 0xD000000000000026;
  v18 = 0x80000001006FB7A0;
  switch(v16)
  {
    case 0:
      v19 = "copyRemindersInTemplateToREMList";
      goto LABEL_7;
    case 1:
      break;
    case 2:
      v19 = "copyRemindersInREMListToTemplate";
      goto LABEL_7;
    case 3:
      v17 = 0xD000000000000028;
      v18 = 0x80000001006FB740;
      break;
    case 4:
      v19 = "batchDeleteCachedPublicTemplates";
LABEL_7:
      v18 = (unint64_t)(v19 - 32) | 0x8000000000000000;
      v17 = 0xD000000000000020;
      break;
    default:
      v18 = 0xE700000000000000;
      v17 = 0x6E776F6E6B6E75;
      break;
  }
  v20 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8236;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22 = v90[0];
  v23 = (void *)v90[1];
  v90[0] = v14;
  v90[1] = v13;
  swift_bridgeObjectRetain(v13);
  v24._countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
  v27 = v90[0];
  v26 = v90[1];
  strcpy((char *)v90, "priority: ");
  BYTE3(v90[1]) = 0;
  HIDWORD(v90[1]) = -369098752;
  v28 = objc_msgSend(v1, "priorityRawValue", v25);
  if (v28 == 30)
  {
    v31 = 0xE700000000000000;
    v30 = 0x72656B636F6C62;
  }
  else
  {
    v29 = (unsigned __int16)v28 == 20;
    if ((unsigned __int16)v28 == 20)
      v30 = 1751607656;
    else
      v30 = 0x6D756964656DLL;
    if (v29)
      v31 = 0xE400000000000000;
    else
      v31 = 0xE600000000000000;
  }
  v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 8236;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  v34 = v90[0];
  v35 = (void *)v90[1];
  v90[0] = v27;
  v90[1] = v26;
  swift_bridgeObjectRetain(v26);
  v36._countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v90[0];
  v37 = v90[1];
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  *(_QWORD *)&v39 = swift_bridgeObjectRelease().n128_u64[0];
  strcpy((char *)v90, "creationDate: ");
  HIBYTE(v90[1]) = -18;
  v40 = objc_msgSend(v1, "creationDate", v39);
  if (v40)
  {
    v41 = v40;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v42 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v4, 0, 1, v42);
  }
  else
  {
    v43 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v4, 1, 1, v43);
  }
  v44 = Optional.descriptionOrNil.getter(v2);
  v46 = v45;
  sub_10000882C((uint64_t)v4, (uint64_t *)&unk_1008380D0);
  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 8236;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  v49 = v90[0];
  v50 = (void *)v90[1];
  v90[0] = v38;
  v90[1] = v37;
  swift_bridgeObjectRetain(v37);
  v51._countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = v90[0];
  v52 = v90[1];
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  *(_QWORD *)&v54 = swift_bridgeObjectRelease().n128_u64[0];
  strcpy((char *)v90, "isCompleted: ");
  HIWORD(v90[1]) = -4864;
  v55 = objc_msgSend(v1, "isCompleted", v54);
  v56 = v55 == 0;
  if (v55)
    v57 = 1702195828;
  else
    v57 = 0x65736C6166;
  if (v56)
    v58 = 0xE500000000000000;
  else
    v58 = 0xE400000000000000;
  v59 = v58;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 8236;
  v60._object = (void *)0xE200000000000000;
  String.append(_:)(v60);
  v61 = v90[0];
  v62 = (void *)v90[1];
  v90[0] = v53;
  v90[1] = v52;
  swift_bridgeObjectRetain(v52);
  v63._countAndFlagsBits = v61;
  v63._object = v62;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v90[0];
  v64 = v90[1];
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v90[0] = 0xD000000000000012;
  v90[1] = 0x80000001006FB850;
  v66 = sub_1001A9F34();
  v89 = v66;
  v67 = sub_10001A630((uint64_t *)&unk_100844910);
  v68 = Optional.descriptionOrNil.getter(v67);
  v70 = v69;

  v71._countAndFlagsBits = v68;
  v71._object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  v72._countAndFlagsBits = 8236;
  v72._object = (void *)0xE200000000000000;
  String.append(_:)(v72);
  v73 = v90[0];
  v74 = (void *)v90[1];
  v90[0] = v65;
  v90[1] = v64;
  swift_bridgeObjectRetain(v64);
  v75._countAndFlagsBits = v73;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77 = v90[0];
  v76 = v90[1];
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v90, "listObjectID: ");
  HIBYTE(v90[1]) = -18;
  v78 = sub_1001AA0F8();
  v89 = v78;
  v79 = Optional.descriptionOrNil.getter(v67);
  v81 = v80;

  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  v83 = v90[0];
  v84 = (void *)v90[1];
  v90[0] = v77;
  v90[1] = v76;
  swift_bridgeObjectRetain(v76);
  v85._countAndFlagsBits = v83;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v90[1]);
  v86._countAndFlagsBits = 125;
  v86._object = (void *)0xE100000000000000;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  return v90[0];
}

uint64_t type metadata accessor for REMCDTemplateOperationQueueItem()
{
  return objc_opt_self(REMCDTemplateOperationQueueItem);
}

uint64_t storeEnumTagSinglePayload for REMCDTemplateOperationQueueItem.OperationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001AAAE0 + 4 * byte_1006ACFBA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001AAB14 + 4 * byte_1006ACFB5[v4]))();
}

uint64_t sub_1001AAB14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AAB1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AAB24);
  return result;
}

uint64_t sub_1001AAB30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AAB38);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001AAB3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AAB44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMCDTemplateOperationQueueItem.OperationType()
{
  return &type metadata for REMCDTemplateOperationQueueItem.OperationType;
}

unint64_t sub_1001AAB64()
{
  unint64_t result;

  result = qword_10083EA40;
  if (!qword_10083EA40)
  {
    result = swift_getWitnessTable(&unk_1006AD098, &type metadata for REMCDTemplateOperationQueueItem.OperationType);
    atomic_store(result, (unint64_t *)&qword_10083EA40);
  }
  return result;
}

uint64_t sub_1001AABA8(unsigned __int16 a1)
{
  if (a1 >= 6u)
    return 5;
  else
    return (0x40302010005uLL >> (8 * a1));
}

id REMCDSmartListSection.parentCDObject.getter()
{
  void *v0;

  return objc_msgSend(v0, "smartList");
}

uint64_t static REMCDSmartListSection.cdEntityName.getter()
{
  unint64_t v0;
  id v1;
  uint64_t v2;

  v0 = sub_1001AAD0C();
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "cdEntityName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t sub_1001AAD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083EA48;
  if (!qword_10083EA48)
  {
    v1 = objc_opt_self(REMSmartListSection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083EA48);
  }
  return result;
}

Swift::Int __swiftcall REMCDSmartListSection.parentEffectiveMinimumSupportedVersion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "smartList");
  if (!v1)
    return kREMSupportedVersionUnset;
  v2 = v1;
  v3 = objc_msgSend(v1, "effectiveMinimumSupportedVersion");

  return (Swift::Int)v3;
}

uint64_t static REMCDSmartListSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007DFD28);
  swift_arrayDestroy(&unk_1007DFD48, 1, &type metadata for String);
  return v0;
}

id REMCDSmartListSection.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDSmartListSection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for REMCDSmartListSection()
{
  return objc_opt_self(REMCDSmartListSection);
}

uint64_t sub_1001AAFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083EA80);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083EA80);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1001AB05C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "housekeepingingActivityScheduler");
  qword_10083EA98 = (uint64_t)result;
  return result;
}

uint64_t sub_1001AB094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(NSObject *, char *, uint64_t);
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(NSObject *, uint64_t);
  NSObject *v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[5];
  int v66;
  __int16 v67;
  uint64_t v68;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v60 = ((char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - v5;
  v7 = type metadata accessor for OSSignpostID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static os_signpost_type_t.begin.getter(v11);
  if (qword_100836ED0 != -1)
    swift_once(&qword_100836ED0, sub_1001AB05C);
  v13 = qword_10083EA98;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v12, &_mh_execute_header, v13, "RDBatchDeleteExpiredRemindersActivity.execute", 45, 2, v10);
  v61 = *(void (**)(char *, uint64_t))(v8 + 8);
  v61(v10, v7);
  v14 = *(_QWORD *)(v1 + 16);
  v15 = *(_QWORD *)(v1 + 24);
  v16 = qword_100836EC8;
  swift_bridgeObjectRetain(v15);
  if (v16 != -1)
    swift_once(&qword_100836EC8, sub_1001AAFCC);
  v58 = v10;
  v62 = v14;
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_10083EA80);
  v19 = swift_bridgeObjectRetain_n(v15, 2);
  v56 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v55 = v2;
    v22 = swift_slowAlloc(12, -1);
    v57 = v6;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v54 = v7;
    v25 = v24;
    v68 = v24;
    *(_DWORD *)v23 = 136446210;
    swift_bridgeObjectRetain(v15);
    v26 = v62;
    v64 = sub_10001A820(v62, v15, &v68);
    v2 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s] start execute()", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v27 = v25;
    v7 = v54;
    swift_slowDealloc(v27, -1, -1);
    v28 = v23;
    v6 = v57;
    swift_slowDealloc(v28, -1, -1);

    v30 = v60;
  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
    v30 = v60;
    v26 = v62;
  }
  v31 = Date.init()(v29);
  v65[0] = 0xD00000000000003ALL;
  v65[1] = 0x80000001006FBA00;
  memset(&v65[2], 0, 24);
  v66 = 0;
  v67 = 0x4000;
  __chkstk_darwin(v31);
  *(&v53 - 4) = v1;
  *(&v53 - 3) = v26;
  *(&v53 - 2) = v15;
  *(&v53 - 1) = (uint64_t)v6;
  v32 = v59;
  sub_10035288C((uint64_t)v65, (uint64_t)sub_1001AC7A8, (uint64_t)(&v53 - 6));
  if (v32)
  {
    v33 = swift_bridgeObjectRelease();
    v34.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v63 + 8))(v6, v2, v33);
    v35 = static os_signpost_type_t.end.getter(v34);
    v36 = qword_10083EA98;
    v37 = v58;
  }
  else
  {
    v38 = v63;
    v39 = *(void (**)(NSObject *, char *, uint64_t))(v63 + 16);
    v57 = v6;
    v39(v30, v6, v2);
    swift_bridgeObjectRetain(v15);
    v41 = Logger.logObject.getter(v40);
    v42 = v30;
    v43 = static os_log_type_t.default.getter(v41);
    v60 = v41;
    v44 = os_log_type_enabled(v41, v43);
    v37 = v58;
    if (v44)
    {
      v45 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      v68 = v59;
      *(_DWORD *)v45 = 136446466;
      swift_bridgeObjectRetain(v15);
      v64 = sub_10001A820(v62, v15, &v68);
      v55 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
      swift_bridgeObjectRelease_n(v15, 3);
      *(_WORD *)(v45 + 12) = 2048;
      v64 = Date.rem_elapsedInMilliseconds.getter(v46);
      v2 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
      v47 = *(void (**)(NSObject *, uint64_t))(v63 + 8);
      v47(v42, v2);
      v48 = v60;
      _os_log_impl((void *)&_mh_execute_header, v60, v43, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v45, 0x16u);
      v49 = v59;
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      v50 = swift_bridgeObjectRelease_n(v15, 2);
      v47 = *(void (**)(NSObject *, uint64_t))(v38 + 8);
      ((void (*)(NSObject *, uint64_t, __n128))v47)(v42, v2, v50);

    }
    v51.n128_f64[0] = ((double (*)(char *, uint64_t))v47)(v57, v2);
    v35 = static os_signpost_type_t.end.getter(v51);
    v36 = qword_10083EA98;
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v35, &_mh_execute_header, v36, "RDBatchDeleteExpiredRemindersActivity.execute", 45, 2, v37);
  return ((uint64_t (*)(char *, uint64_t))v61)(v37, v7);
}

void sub_1001AB648(void *a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  void *v10;

  v10 = objc_autoreleasePoolPush();
  sub_1001AB6CC(a2, a1, a3, a4, a5);
  objc_autoreleasePoolPop(v10);
}

void sub_1001AB6CC(_QWORD *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a3;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + 10;
  v16 = a1[13];
  v15 = a1[14];
  sub_10000A388(v14, v16);
  v17 = (*(double (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 8))(v16) / 86400.0;
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v17 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v17 >= 1.84467441e19)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    swift_once(&qword_100836EC8, sub_1001AAFCC);
    goto LABEL_6;
  }
  v18 = sub_100342FBC(a2, (unint64_t)v17);
  if (v5)
    return;
  v16 = (uint64_t)v18;
  if (qword_100836EC8 != -1)
    goto LABEL_13;
LABEL_6:
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_10083EA80);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  v20 = swift_bridgeObjectRetain_n(a4, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = a4;
    v25 = swift_slowAlloc(42, -1);
    v32 = swift_slowAlloc(32, -1);
    v35 = v32;
    *(_DWORD *)v25 = 136446978;
    v31 = v21;
    swift_bridgeObjectRetain(v24);
    v34 = sub_10001A820(v33, v24, &v35);
    LODWORD(v33) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    swift_bridgeObjectRelease_n(v24, 3);
    *(_WORD *)(v25 + 12) = 2048;
    v34 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    *(_WORD *)(v25 + 22) = 2048;
    v34 = *(_QWORD *)&v17;
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    *(_WORD *)(v25 + 32) = 2048;
    v34 = Date.rem_elapsedInMilliseconds.getter(v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v27 = v31;
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v33, "[%{public}s] batch deleted %ld reminders that were deleted for over %f days, elapsedSeconds: %f ms.", (uint8_t *)v25, 0x2Au);
    v28 = v32;
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    v29 = swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v29);

  }
}

uint64_t sub_1001AB9F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 40));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 80));
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t sub_1001ABA30()
{
  return sub_1001AB094();
}

BOOL sub_1001ABA50()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32];
  sub_10000A388(v2, v4);
  v5 = (*(double (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v4);
  if (v5 <= 0.0)
  {
    if (qword_100836EC8 != -1)
      swift_once(&qword_100836EC8, sub_1001AAFCC);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10083EA80);
    v7 = v1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v16 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier];
      v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier + 8];
      swift_bridgeObjectRetain(v13);
      v15 = sub_10001A820(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] configuration validation fail - cannot execute because configurations.batchDeleteExpiredRemindersMinimumDeletionTimeInterval must be greater than 0", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
  return v5 > 0.0;
}

unint64_t sub_1001ABC3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

uint64_t sub_1001ABD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDBatchDeleteExpiredRemindersActivity();
  if (swift_dynamicCast(&v25, v26, v5, v6, 0))
  {

    v7 = v2 + 16;
    swift_beginAccess(v7, &v20, 0, 0);
    sub_100018618(v7, (uint64_t)v22);
    v8 = v23;
    v9 = v24;
    sub_10000A388(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_100836EC8 != -1)
      swift_once(&qword_100836EC8, sub_1001AAFCC);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_10083EA80);
    v12 = sub_100018618(a1, (uint64_t)v22);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136446210;
      sub_100018618((uint64_t)v22, (uint64_t)&v20);
      v17 = String.init<A>(describing:)(&v20, v5);
      v20 = sub_10001A820(v17, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDBatchDeleteExpiredRemindersExecutionDateStorage.lastExecutedDate(for:) must work with RDBatchDeleteExpiredRemindersActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_1001ABFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v27);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDBatchDeleteExpiredRemindersActivity();
  if (swift_dynamicCast(&v23, v27, v8, v9, 0))
  {

    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    swift_beginAccess(v2 + 16, v26, 33, 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = *(_QWORD *)(v2 + 48);
    sub_10001BA38(v2 + 16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, v12, v13);
    swift_endAccess(v26);
  }
  else
  {
    if (qword_100836EC8 != -1)
      swift_once(&qword_100836EC8, sub_1001AAFCC);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_10083EA80);
    v15 = sub_100018618(a1, (uint64_t)v26);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      sub_100018618((uint64_t)v26, (uint64_t)&v23);
      v20 = String.init<A>(describing:)(&v23, v8);
      v23 = (id)sub_10001A820(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDBatchDeleteExpiredRemindersExecutionDateStorage.updateLastExecutedDate(for:) must work with RDBatchDeleteExpiredRemindersActivity only {executable: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
}

uint64_t sub_1001AC274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001ABD4C(a1, a2);
}

uint64_t sub_1001AC294(uint64_t a1, uint64_t a2)
{
  return sub_1001ABFC4(a1, a2);
}

uint64_t sub_1001AC38C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable);
  a1[3] = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  a1[4] = &off_1007E86B8;
  a1[5] = &off_1007E86C8;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1001AC3DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 24) + 8))(v2);
}

uint64_t sub_1001AC424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10083ECE0);
}

uint64_t sub_1001AC450@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100008868(v3, a1, (uint64_t *)&unk_10083E300);
}

uint64_t sub_1001AC4A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void **v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t, uint64_t);
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v5 = *v2;
  v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations;
  v7 = v6[3];
  v8 = v6[4];
  sub_10000A388(v6, v7);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  v11 = v5;
  v12 = v10(v7, v9);
  v17 = a1;
  v18 = &off_1007E8708;
  *(_QWORD *)&v16 = v11;
  v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v14 = swift_allocObject(v13, 64, 7);
  result = sub_10001BCA8(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1007F54C8;
  *a2 = v14;
  return result;
}

uint64_t sub_1001AC57C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1001AC5B8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executionDateStorage, a1);
}

uint64_t sub_1001AC5E0@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "batchDeleteExpiredRemindersLastExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1001AC664(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v3, "setBatchDeleteExpiredRemindersLastExecutionDate:");

}

id sub_1001AC704()
{
  id *v0;

  return objc_msgSend(*v0, "batchDeleteExpiredRemindersDefaultThrottleInterval");
}

id sub_1001AC714()
{
  id *v0;

  return objc_msgSend(*v0, "batchDeleteExpiredRemindersRateReduceFactor");
}

id sub_1001AC738()
{
  id *v0;

  return objc_msgSend(*v0, "batchDeleteExpiredRemindersMinimumDeletionTimeInterval");
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity()
{
  return objc_opt_self(_TtC7remindd37RDBatchDeleteExpiredRemindersActivity);
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable()
{
  return objc_opt_self(_TtCC7remindd37RDBatchDeleteExpiredRemindersActivityP33_2593B5C1FD5003923881081DF013164A47RDBatchDeleteExpiredRemindersActivityExecutable);
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd37RDBatchDeleteExpiredRemindersActivityP33_2593B5C1FD5003923881081DF013164A49RDBatchDeleteExpiredRemindersExecutionDateStorage);
}

void sub_1001AC7A8(void *a1)
{
  uint64_t v1;

  sub_1001AB648(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

ValueMetadata *type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer()
{
  return &type metadata for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer;
}

uint64_t sub_1001AC7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083ECF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083ECF0);
  if (qword_100837668 != -1)
    swift_once(&qword_100837668, sub_1004A1918);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001AC864(char *a1, char *a2)
{
  return sub_1002B2EF8(*a1, *a2);
}

Swift::Int sub_1001AC870()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD000000000000010;
  else
    v2 = 0x68636E75616CLL;
  if (v1)
    v3 = 0x80000001006F4E10;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001AC8F0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000010;
  else
    v2 = 0x68636E75616CLL;
  if (*v1)
    v3 = 0x80000001006F4E10;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001AC94C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD000000000000010;
  else
    v3 = 0x68636E75616CLL;
  if (v2)
    v4 = 0x80000001006F4E10;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001AC9C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DFD88, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001ACA24(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x68636E75616CLL;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x80000001006F4E10;
  if (!*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001ACA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100836ED8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836ED8, sub_1001AC7D4);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10083ECF0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "#️⃣ RDSharedInlineTagAutoConvertEngine Starting...", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables, v25, 0, 0);
  v16 = *v14;
  if ((v16 & 0xC000000000000001) != 0)
  {
    if (v16 < 0)
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v18 = __CocoaSet.count.getter(v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_10:
      v19 = Logger.logObject.getter(v15);
      v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
        swift_slowDealloc(v21, -1, -1);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
  }
  else if (*(_QWORD *)(v16 + 16))
  {
    goto LABEL_10;
  }
  v23 = sub_1001ACCFC();
  v19 = Logger.logObject.getter(v23);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    v22 = "#️⃣ RDSharedInlineTagAutoConvertEngine Started";
    goto LABEL_15;
  }
LABEL_16:

}

uint64_t sub_1001ACCFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80[4];

  v78 = *v0;
  v70 = sub_10001A630(&qword_10083EEC0);
  v72 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A630(&qword_10083EEC8);
  v3 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  v74 = v3;
  __chkstk_darwin(v2);
  v69 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_10083EED0);
  v6 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  v76 = v6;
  __chkstk_darwin(v5);
  v71 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100838070);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_10001A630((uint64_t *)&unk_10083A960);
  v64 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10001A630((uint64_t *)&unk_100838080);
  v67 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)sub_100399C74((void *)0xD000000000000022, 0x80000001006AD430, 0);
  v80[0] = v19;
  v20 = sub_10001A630((uint64_t *)&unk_10084D080);
  v21 = sub_10001A630((uint64_t *)&unk_100838090);
  v22 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1004A4448, 0, v20, v21, v22);
  v23 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.filter(_:)(sub_1000F27FC, 0, v11, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release(v19);
  v24 = v77;
  v66 = v77 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration;
  v80[0] = *(id *)(v77 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  v25 = v80[0];
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v59 = v26;
  v63(v10, 1, 1, v26);
  v27 = sub_1000D30A4();
  v62 = v27;
  v28 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v29 = sub_1000A5E70();
  v61 = v29;
  v30 = v25;
  v31 = v60;
  Publisher.receive<A>(on:options:)(v80, v10, v60, v27, v28, v29);
  sub_10000882C((uint64_t)v10, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v31);
  sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v32 = v65;
  v33 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v24, sub_1001ADA6C, 0, 0, 0, v65, v78);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v18, v32);
  v34 = v24 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables;
  v67 = v24 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables;
  swift_beginAccess(v24 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables, v80, 33, 0);
  AnyCancellable.store(in:)(v34);
  swift_endAccess(v80);
  swift_release(v33);
  v35 = (void *)sub_1001AD3F0();
  v80[0] = v35;
  v36 = sub_1001AD78C();
  v79 = v36;
  v37 = sub_10001A630(&qword_10083EEE8);
  v38 = sub_1000A5F84(&qword_10083EEF0, &qword_10083EEE8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v39 = v68;
  Publisher.merge(with:)(&v79, v37, v38);
  swift_release(v35);
  swift_release(v36);
  v40 = v66 + *(int *)(type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0) + 28);
  v80[0] = v30;
  v41 = v63;
  v63(v10, 1, 1, v26);
  v42 = sub_1000A5F84(&qword_10083EEF8, &qword_10083EEC0, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v43 = v30;
  v44 = v69;
  v45 = v70;
  v46 = v62;
  v47 = v61;
  Publisher.debounce<A>(for:scheduler:options:)(v40, v80, v10, v70, v62, v42, v61);
  sub_10000882C((uint64_t)v10, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v45);
  v80[0] = v43;
  v41(v10, 1, 1, v59);
  v48 = sub_1000A5F84(&qword_10083EF00, &qword_10083EEC8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v49 = v43;
  v50 = v71;
  v51 = v73;
  Publisher.receive<A>(on:options:)(v80, v10, v73, v46, v48, v47);
  sub_10000882C((uint64_t)v10, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v51);
  v52 = swift_allocObject(&unk_1007E8890, 24, 7);
  v53 = v78;
  *(_QWORD *)(v52 + 16) = v78;
  sub_1000A5F84(&qword_10083EF08, (uint64_t *)&unk_10083EED0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v54 = v75;
  v55 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v77, sub_1001AEE08, v52, 0, 0, v75, v53);
  swift_release(v52);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v54);
  v56 = v67;
  swift_beginAccess(v67, v80, 33, 0);
  AnyCancellable.store(in:)(v56);
  swift_endAccess(v80);
  return swift_release(v55);
}

uint64_t sub_1001AD3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[48];

  v1 = sub_10001A630((uint64_t *)&unk_10084D060);
  v29 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A630((uint64_t *)&unk_10083DB50);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A630((uint64_t *)&unk_10083EF38);
  v33 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v0 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  v9 = sub_10001A630((uint64_t *)&unk_10083A340);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDSharedInlineTagAutoConvertAuthor);
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerAutoConvertSharedInlineTagsMigrationAuthor);
  *(_QWORD *)(v10 + 56) = v12;
  v13 = sub_100399F04(v8, 0xD00000000000004DLL, 0x80000001006FBC20, v10);
  swift_bridgeObjectRelease();
  inited = swift_initStackObject(v9, v35);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v34 = type metadata accessor for REMCKSharedEntitySyncActivity();
  v15 = sub_10001A630(&qword_10083EF48);
  *(_QWORD *)(inited + 32) = String.init<A>(describing:)(&v34, v15);
  *(_QWORD *)(inited + 40) = v16;
  v17 = sub_10011EE40(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v34 = v13;
  v18 = swift_allocObject(&unk_1007E88B8, 24, 7);
  *(_QWORD *)(v18 + 16) = v17;
  swift_bridgeObjectRetain(v17);
  v19 = sub_10001A630((uint64_t *)&unk_10083EF50);
  v20 = sub_10001A630((uint64_t *)&unk_10083DB60);
  v21 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_100188E48, v18, v19, v20, v21);
  swift_release(v18);
  v22 = sub_1000A5F84((unint64_t *)&unk_10083DB70, (uint64_t *)&unk_10084D060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.filter(_:)(sub_1000F27FC, 0, v1, v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v1);
  swift_release(v13);
  swift_bridgeObjectRelease();
  v23 = sub_1000A5F84(&qword_10083EF70, (uint64_t *)&unk_10083DB50, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v24 = v30;
  Publisher.map<A>(_:)(sub_1000E77AC, 0, v30, &type metadata for RDSharedInlineTagAutoConvertEngine.UpdateReason, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v24);
  v25 = sub_1000A5F84(&qword_10083EF78, (uint64_t *)&unk_10083EF38, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v26 = v31;
  v27 = Publisher.eraseToAnyPublisher()(v31, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v26);
  return v27;
}

uint64_t sub_1001AD78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;

  v1 = v0;
  v2 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_10083EF10);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v9 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  v32 = v9;
  v10 = v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_10083EF18);
  v34 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_10001A630(&qword_10083EF20);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v18 = Just.init(_:)(&v37, &type metadata for RDSharedInlineTagAutoConvertEngine.UpdateReason);
  v19 = v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v18, *(double *)(v19 + 16));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v7, 1, 1, v8);
  v36 = *(id *)(v19 + 8);
  v20 = v36;
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 1, 1, v21);
  v22 = sub_1000D30A4();
  v23 = sub_1000A5F84(&qword_10083EF28, &qword_10083EF18, (uint64_t)&protocol conformance descriptor for Just<A>);
  v24 = sub_1000A5E70();
  v25 = v20;
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v12, v7, &v36, v4, v13, v22, v23, v24);
  sub_10000882C((uint64_t)v4, &qword_10083A970);

  sub_10000882C((uint64_t)v7, &qword_10083EF10);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v13);
  v26 = sub_1000A5F84(&qword_10083EF30, &qword_10083EF20, (uint64_t)&protocol conformance descriptor for Publishers.Delay<A, B>);
  v27 = v33;
  v28 = Publisher.eraseToAnyPublisher()(v33, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v27);
  return v28;
}

void sub_1001ADA6C()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1001AE4C4();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1001ADAAC(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a2;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  *v8 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    if (qword_100836ED8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836ED8, sub_1001AC7D4);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001AAA8(v12, (uint64_t)qword_10083ECF0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v25[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v24 = sub_10001A820(0xD00000000000004DLL, 0x80000001006FBC20, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: %{public}s}", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  v18 = os_transaction_create("com.apple.remindd.RDSharedInlineTagAutoConvertEngine.storeControllerDidChange");
  v19 = sub_1001AE068(v9);
  if (v19)
  {
    v20 = v19;
    v21 = objc_autoreleasePoolPush();
    sub_1001ADD28(v9, a1);
    objc_autoreleasePoolPop(v21);

  }
  else
  {
    sub_1001AE188(v9);
  }
  sub_1001AEE10();
  return swift_unknownObjectRelease(v18);
}

void sub_1001ADD28(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_100836ED8 != -1)
    swift_once(&qword_100836ED8, sub_1001AC7D4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10083ECF0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136446210;
    if ((a1 & 1) != 0)
      v10 = 0xD000000000000010;
    else
      v10 = 0x68636E75616CLL;
    if ((a1 & 1) != 0)
      v11 = 0x80000001006F4E10;
    else
      v11 = 0xE600000000000000;
    v21 = sub_10001A820(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "#️⃣ RDSharedInlineTagAutoConvertEngine: Starting journal consumption due to %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v23 = v18;
    *(_DWORD *)v17 = 136446210;
    if ((a1 & 1) != 0)
      v19 = 0xD000000000000010;
    else
      v19 = 0x68636E75616CLL;
    if ((a1 & 1) != 0)
      v20 = 0x80000001006F4E10;
    else
      v20 = 0xE600000000000000;
    v21 = sub_10001A820(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "#️⃣ RDSharedInlineTagAutoConvertEngine: Finished journal consumption due to %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

}

id sub_1001AE068(char a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t *v5;
  id v6;
  char v7;
  uint64_t v8;
  NSString v9;

  v3 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (!v3)
    return 0;
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006F4E10, 0x68636E75616CLL, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(0x80000001006F4E10);
    v5 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationStoreDidChange;
    if ((v7 & 1) != 0)
      v5 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationDidLaunch;
  }
  else
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    v5 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationDidLaunch;
  }
  v8 = *(_QWORD *)(v1 + *v5 + 8);
  swift_bridgeObjectRetain(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v6 = objc_msgSend(v4, "tokenByRegisteringAccount:forOperationWithName:", v1, v9);

  return v6;
}

void sub_1001AE188(char a1)
{
  char *v1;
  char *v2;
  uint64_t *v3;
  char v4;
  void *v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t inited;
  NSString v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[56];

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006F4E10, 0x68636E75616CLL, 0xE600000000000000, 0);
    swift_bridgeObjectRelease();
    v3 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationStoreDidChange;
    if ((v4 & 1) != 0)
      v3 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationDidLaunch;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = &OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_babysitterOperationDidLaunch;
  }
  swift_bridgeObjectRetain(*(_QWORD *)&v1[*v3 + 8]);
  v5 = (void *)objc_opt_self(REMError);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "babySatErrorWithOperationName:", v6);

  v8 = sub_10001A630((uint64_t *)&unk_10083DAB0);
  inited = swift_initStackObject(v8, v25);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v10;
  v11 = sub_1002AFCB4(inited);
  type metadata accessor for Analytics(0, v12);
  v13 = *(_QWORD *)&v2[OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_analyticsCrashDetected];
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget_analyticsCrashDetected
                     + 8];
  v15 = sub_1003B0B84(v11);
  swift_bridgeObjectRelease();
  v16 = v7;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v13, v14, v15, v7, 1);
  swift_bridgeObjectRelease();

  if (qword_100836ED8 != -1)
    swift_once(&qword_100836ED8, sub_1001AC7D4);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10083ECF0);
  v18 = v2;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_10001A820(0xD00000000000003FLL, 0x80000001006FBB90, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Babysitting RDSharedInlineTagAutoConvertEngine because it failed too many times {waiterID: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
}

void sub_1001AE4C4()
{
  void *v0;
  id v1;
  void *v2;
  NSString v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v1)
  {
    v2 = v1;
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "giveAccountWithIDAnotherChance:", v3);

    if (qword_100836ED8 != -1)
      swift_once(&qword_100836ED8, sub_1001AC7D4);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_10083ECF0);
    v9 = v0;
    v5 = Logger.logObject.getter(v9);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v11 = v8;
      *(_DWORD *)v7 = 136446210;
      v10 = sub_10001A820(0xD00000000000003FLL, 0x80000001006FBB90, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDSharedInlineTagAutoConvertEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
  }
}

id sub_1001AE778()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001AE800()
{
  uint64_t v0;

  sub_1001AEDBC(v0 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001AE860()
{
  return type metadata accessor for RDSharedInlineTagAutoConvertEngine(0);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083ED40, (uint64_t)&nominal type descriptor for RDSharedInlineTagAutoConvertEngine);
}

uint64_t sub_1001AE87C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006AD478;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083EE78, (uint64_t)&nominal type descriptor for RDSharedInlineTagAutoConvertEngine.Configuration);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget()
{
  return objc_opt_self(_TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget);
}

char *sub_1001AE940(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  char *v14;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v7 = a2[1];
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v6;
    v8 = *(int *)(a3 + 28);
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v14 = v7;
    v12(v9, v10, v11);
  }
  return v5;
}

uint64_t sub_1001AE9E8(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1001AEA38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  id v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  a1[2] = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = v4;
  v12 = v5;
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_1001AEAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001AEB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001AEBA8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001AEC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AEC38);
}

uint64_t sub_1001AEC38(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1001AECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AECC0);
}

char *sub_1001AECC0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001AED34(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001AEDBC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001AEDF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AEE08(uint64_t a1, char *a2)
{
  return sub_1001ADAAC(a1, a2);
}

void sub_1001AEE10()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;
  uint64_t v7;

  if (qword_100836ED8 != -1)
    swift_once(&qword_100836ED8, sub_1001AC7D4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083ECF0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    v4 = swift_slowAlloc(32, -1);
    v7 = v4;
    *(_DWORD *)v3 = 136446210;
    v6 = sub_10001A820(0xD00000000000004DLL, 0x80000001006FBC20, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7);
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "os_transaction RELEASE {name: %{public}s}", v3, 0xCu);
    swift_arrayDestroy(v4, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1001AEF98()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertEngine.UpdateReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001AF008 + 4 * byte_1006AD445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001AF03C + 4 * byte_1006AD440[v4]))();
}

uint64_t sub_1001AF03C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AF04CLL);
  return result;
}

uint64_t sub_1001AF058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AF060);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001AF064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF06C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertEngine.UpdateReason()
{
  return &type metadata for RDSharedInlineTagAutoConvertEngine.UpdateReason;
}

unint64_t sub_1001AF08C()
{
  unint64_t result;

  result = qword_10083EF80;
  if (!qword_10083EF80)
  {
    result = swift_getWitnessTable(&unk_1006AD534, &type metadata for RDSharedInlineTagAutoConvertEngine.UpdateReason);
    atomic_store(result, (unint64_t *)&qword_10083EF80);
  }
  return result;
}

uint64_t sub_1001AF0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083EF90);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083EF90);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1001AF160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  Class isa;
  Class v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  _BYTE v20[32];

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = v1;
    v4 = sub_10001A6DC(0x73656E6F6870, 0xE600000000000000);
    if ((v5 & 1) != 0)
    {
      sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v20);
      v6 = sub_10001A630((uint64_t *)&unk_10083AE10);
      if ((swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16))
        {
          v7 = sub_10001A6DC(0x736C69616D65, 0xE600000000000000);
          if ((v8 & 1) != 0)
          {
            sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v20);
            if ((swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
            {
              v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              v11 = Array._bridgeToObjectiveC()().super.isa;
              v12 = objc_msgSend(v9, "initWithPhones:emails:", isa, v11, swift_bridgeObjectRelease().n128_f64[0]);

              return v12;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  if (qword_100836EE0 != -1)
    swift_once(&qword_100836EE0, sub_1001AF0D0);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001AAA8(v13, (uint64_t)qword_10083EF90);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Can't construct REMContactRepresentation from invalid JSON", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  return 0;
}

id sub_1001AF37C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_1001AF160(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001AF3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083EFA8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083EFA8);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001AF430@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  id v12;
  void *v13;
  id v14;
  id v15;
  _BYTE *v16;
  id v17;
  id v18;
  _UNKNOWN **v19;
  id v20;
  _UNKNOWN **v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _BYTE *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _BYTE *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _BYTE *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _UNKNOWN **v56;
  char v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  char v65;
  char v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _UNKNOWN **v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  int64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t ObjectType;
  uint64_t WitnessTable;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t result;
  uint8_t *v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  os_log_type_t v110;
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  _UNKNOWN **v115;

  v5 = sub_10001A630(&qword_10083EFC0);
  v6 = swift_allocObject(v5, 128, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1006A3BF0;
  v7 = (void *)objc_opt_self(ICCloudConfiguration);
  v8 = a3;
  v9 = objc_msgSend(v7, "sharedConfiguration");
  v10 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v10);
  v12 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v13 = (void *)objc_opt_self(DABabysitter);
  v14 = objc_msgSend(v13, "sharedBabysitter");
  if (v14)
  {
    v15 = v14;
    *((_QWORD *)&v114 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
    v115 = &off_1007F4EC0;
    *(_QWORD *)&v113 = v15;
  }
  else
  {
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
  }
  v16 = objc_allocWithZone((Class)type metadata accessor for RDStaledFileAttachmentCleanupActivity());
  v17 = sub_1001B02BC(v8, (uint64_t)v9, v12, (uint64_t)&v113, v16);

  *(_QWORD *)(v6 + 32) = v17;
  *(_QWORD *)(v6 + 40) = &off_1007E7DF8;
  v18 = sub_1001B0A88(v8);
  if (v18)
    v19 = &off_1007F96A0;
  else
    v19 = 0;
  *(_QWORD *)(v6 + 48) = v18;
  *(_QWORD *)(v6 + 56) = v19;
  v20 = sub_1001B1320(v8);
  if (v20)
    v21 = &off_1007F96A0;
  else
    v21 = 0;
  *(_QWORD *)(v6 + 64) = v20;
  *(_QWORD *)(v6 + 72) = v21;
  v22 = v8;
  v23 = objc_msgSend(v7, "sharedConfiguration");
  v24 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v25 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v26 = objc_msgSend(v13, "sharedBabysitter");
  if (v26)
  {
    v27 = v26;
    *((_QWORD *)&v114 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
    v115 = &off_1007F4EC0;
    *(_QWORD *)&v113 = v27;
  }
  else
  {
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
  }
  v28 = objc_allocWithZone((Class)type metadata accessor for RDSuggestConversionToGroceryListActivity());
  v29 = sub_1001B16F4(v22, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)&v113, v28);

  *(_QWORD *)(v6 + 80) = v29;
  *(_QWORD *)(v6 + 88) = &off_1007FC628;
  v30 = v22;
  v31 = objc_msgSend(v7, "sharedConfiguration");
  v32 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v33 = objc_msgSend(v13, "sharedBabysitter");
  if (v33)
  {
    v34 = v33;
    *((_QWORD *)&v114 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
    v115 = &off_1007F4EC0;
    *(_QWORD *)&v113 = v34;
  }
  else
  {
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
  }
  v35 = objc_allocWithZone((Class)type metadata accessor for RDAnalyticsActivity());
  v36 = sub_1001B1A38(v30, (uint64_t)v31, (uint64_t)v32, (uint64_t)&v113, v35);

  *(_QWORD *)(v6 + 96) = v36;
  *(_QWORD *)(v6 + 104) = &off_1007F0960;
  v37 = v30;
  v38 = objc_msgSend(v7, "sharedConfiguration");
  v39 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  v40 = objc_msgSend(v13, "sharedBabysitter");
  if (v40)
  {
    v41 = v40;
    *((_QWORD *)&v114 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
    v115 = &off_1007F4EC0;
    *(_QWORD *)&v113 = v41;
  }
  else
  {
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
  }
  v42 = objc_allocWithZone((Class)type metadata accessor for RDBatchDeleteExpiredRemindersActivity());
  v43 = sub_1001B1D74(v37, (uint64_t)v38, (uint64_t)v39, (uint64_t)&v113, v42);

  *(_QWORD *)(v6 + 112) = v43;
  *(_QWORD *)(v6 + 120) = &off_1007E8760;
  *(_QWORD *)&v113 = v6;
  v44 = sub_10001A630(&qword_10083EFC8);
  v45 = sub_10001A630(&qword_10083EFD0);
  v46 = sub_1001B2094();
  v47 = Sequence.removingNils<A>()(v44, v45, v46);
  v48 = objc_msgSend(v7, "sharedConfiguration", swift_bridgeObjectRelease(v6).n128_f64[0]);
  objc_msgSend(v48, "housekeepingActivityMinimumDelay");
  v50 = v49;

  v51 = sub_1001DF658(v47);
  v52 = v51;
  v53 = v51[2];
  if (v53)
  {
    v54 = (uint64_t)(v51 + 4);
    while (1)
    {
      sub_100018618(v54, (uint64_t)&v113);
      v55 = *((_QWORD *)&v114 + 1);
      v56 = v115;
      sub_10000A388(&v113, *((uint64_t *)&v114 + 1));
      v57 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v56[1])(v55, v56);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v113);
      if ((v57 & 1) == 0)
        break;
      v54 += 40;
      if (!--v53)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease(v52);
    v58 = 0;
  }
  else
  {
LABEL_23:
    swift_bridgeObjectRelease(v52);
    v58 = 1;
  }
  v59 = sub_1001DF658(v47);
  v60 = v59;
  v61 = v59[2];
  if (v61)
  {
    v62 = (uint64_t)(v59 + 4);
    while (1)
    {
      sub_100018618(v62, (uint64_t)&v113);
      v63 = *((_QWORD *)&v114 + 1);
      v64 = v115;
      sub_10000A388(&v113, *((uint64_t *)&v114 + 1));
      v65 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v64[2])(v63, v64);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v113);
      if ((v65 & 1) != 0)
        break;
      v62 += 40;
      if (!--v61)
        goto LABEL_29;
    }
    swift_bridgeObjectRelease(v60);
    v66 = 1;
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease(v60);
    v66 = 0;
  }
  v67 = sub_1001DF658(v47);
  v68 = v67;
  v69 = v67[2];
  if (v69)
  {
    v70 = (uint64_t)(v67 + 4);
    while (1)
    {
      sub_100018618(v70, (uint64_t)&v113);
      v71 = *((_QWORD *)&v114 + 1);
      v72 = v115;
      sub_10000A388(&v113, *((uint64_t *)&v114 + 1));
      v73 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v72[3])(v71, v72);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v113);
      if ((v73 & 1) != 0)
        break;
      v70 += 40;
      if (!--v69)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease(v68);
    v74 = 1;
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRelease(v68);
    v74 = 0;
  }
  v75 = type metadata accessor for RDJitteredMinimumDelayXPCActivityFactory();
  v76 = swift_allocObject(v75, 27, 7);
  *(_QWORD *)(v76 + 16) = v50;
  *(_BYTE *)(v76 + 24) = v58;
  *(_BYTE *)(v76 + 25) = v66;
  *(_BYTE *)(v76 + 26) = v74;
  v77 = sub_10001A630(&qword_10083EFE0);
  v78 = swift_allocObject(v77, 136, 7);
  *(_OWORD *)(v78 + 56) = xmmword_1006AD590;
  *(_QWORD *)(v78 + 72) = 0x80000001006FBC70;
  *(_QWORD *)(v78 + 80) = 0xD00000000000001DLL;
  *(_QWORD *)(v78 + 128) = 0;
  *(_QWORD *)(v78 + 88) = 0x80000001006FBC70;
  *(_QWORD *)(v78 + 96) = 0;
  *(_QWORD *)(v78 + 104) = 0;
  *(_QWORD *)(v78 + 112) = 0;
  *(_QWORD *)(v78 + 118) = 0;
  *(_QWORD *)(v78 + 16) = v47;
  *(_QWORD *)(v78 + 24) = a1;
  *(_QWORD *)(v78 + 32) = a2;
  *(_QWORD *)(v78 + 40) = v37;
  *(_QWORD *)(v78 + 48) = v76;
  v79 = qword_100836EE8;
  v80 = v37;
  swift_bridgeObjectRetain(v47);
  v81 = a1;
  v82 = a2;
  swift_retain(v76);
  if (v79 != -1)
    swift_once(&qword_100836EE8, sub_1001AF3A0);
  v83 = type metadata accessor for Logger(0);
  sub_10001AAA8(v83, (uint64_t)qword_10083EFA8);
  swift_bridgeObjectRetain(v47);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.default.getter(v85);
  if (os_log_type_enabled(v85, v86))
  {
    v110 = v86;
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v108 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v113 = v108;
    *(_DWORD *)v87 = 136446210;
    v88 = *(_QWORD *)(v47 + 16);
    v89 = _swiftEmptyArrayStorage;
    if (v88)
    {
      v103 = v87;
      v104 = v85;
      v105 = v77;
      v106 = v76;
      v112 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v88, 0);
      v89 = _swiftEmptyArrayStorage;
      v90 = (_QWORD *)(v47 + 32);
      do
      {
        ObjectType = swift_getObjectType(*v90);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, ObjectType);
        v93 = dispatch thunk of CustomStringConvertible.description.getter(ObjectType, WitnessTable);
        v95 = v94;
        v112 = v89;
        v97 = v89[2];
        v96 = v89[3];
        if (v97 >= v96 >> 1)
        {
          sub_1001C1B0C(v96 > 1, v97 + 1, 1);
          v89 = v112;
        }
        v89[2] = v97 + 1;
        v98 = &v89[2 * v97];
        v98[4] = v93;
        v98[5] = v95;
        v90 += 2;
        --v88;
      }
      while (v88);
      v76 = v106;
      v85 = v104;
      v77 = v105;
      v87 = v103;
    }
    v99 = Array.description.getter(v89, &type metadata for String);
    v101 = v100;
    swift_bridgeObjectRelease(v89);
    v112 = (_QWORD *)sub_10001A820(v99, v101, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_bridgeObjectRelease_n(v47, 2);
    swift_bridgeObjectRelease(v101);
    _os_log_impl((void *)&_mh_execute_header, v85, v110, "RDHousekeepingActivitiesAssembly has registered activities: %{public}s", v87, 0xCu);
    swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    swift_slowDealloc(v87, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v47, 2);
  }
  a4[3] = v77;
  a4[4] = (uint64_t)&off_1007F1E00;
  result = swift_release(v76);
  *a4 = v78;
  return result;
}

_QWORD *sub_1001AFD80(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[3] = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  v21[4] = &off_1007E7CA8;
  v21[0] = a2;
  a4[2] = 0xD000000000000022;
  a4[3] = 0x80000001006FBD60;
  a4[4] = a1;
  sub_100018618((uint64_t)v21, (uint64_t)(a4 + 5));
  a4[10] = a3;
  if (!a3)
  {
    v8 = qword_100836E38;
    v9 = a1;
    if (v8 != -1)
      swift_once(&qword_100836E38, sub_100197650);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_10083E020);
    v11 = swift_retain_n(a4, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = a4[2];
      v17 = a4[3];
      swift_bridgeObjectRetain(v17);
      v19 = sub_10001A820(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_release_n(a4, 2);
    }

  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v21);
  return a4;
}

_QWORD *sub_1001AFFA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __n128 a9, uint64_t (*a10)(_QWORD), uint64_t a11, uint64_t *a12)
{
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  _QWORD v44[5];

  v44[3] = type metadata accessor for Analytics(0, a9);
  v44[4] = &protocol witness table for Analytics;
  v44[0] = a7;
  v43[3] = a10(0);
  v43[4] = a11;
  v42 = a2;
  v43[0] = a4;
  a8[2] = a1;
  a8[3] = a2;
  v41 = a1;
  v20 = a5;
  swift_bridgeObjectRetain(a2);
  v21._countAndFlagsBits = 0x617475636578452ELL;
  v21._object = (void *)0xEB00000000656C62;
  String.append(_:)(v21);
  v23 = v41;
  v22 = v42;
  a8[18] = v41;
  a8[19] = v22;
  a8[4] = a3;
  sub_100018618((uint64_t)v43, (uint64_t)(a8 + 5));
  a8[10] = a5;
  a8[11] = a6;
  v24 = sub_10001A630(a12);
  v25 = (_QWORD *)swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25[5] = _swiftEmptyArrayStorage;
  v25[6] = _swiftEmptyArrayStorage;
  v26 = (char *)v25 + qword_10084E678;
  v27 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v25[2] = a6;
  v25[3] = v23;
  v25[4] = v22;
  a8[17] = v25;
  sub_100018618((uint64_t)v44, (uint64_t)(a8 + 12));
  if (a6)
  {
    swift_bridgeObjectRetain(v22);
  }
  else
  {
    v28 = qword_100837838;
    v29 = a3;
    swift_retain(v20);
    swift_bridgeObjectRetain(v22);
    if (v28 != -1)
      swift_once(&qword_100837838, sub_10052041C);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_10084E3F0);
    v31 = swift_retain_n(a8, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v41 = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = v29;
      v38 = a8[2];
      v37 = a8[3];
      swift_bridgeObjectRetain(v37);
      v40 = sub_10001A820(v38, v37, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      swift_release_n(a8, 2);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%{public}s] configurations.approximatePerRunDeleteLimit is 0", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {
      swift_release_n(a8, 2);

    }
    swift_release(v20);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v44);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v43);
  return a8;
}

id sub_1001B02BC(void *a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  objc_class *ObjectType;
  void *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  objc_super v33;
  __int128 v34;
  ValueMetadata *v35;
  _UNKNOWN **v36;
  id v37[5];
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;

  ObjectType = (objc_class *)swift_getObjectType(a5);
  v39 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v40 = &off_1007E7CE0;
  v38[0] = a2;
  v11 = (void *)sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityAllowBattery] = 1;
  v37[4] = &off_1007E7CA8;
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityIsCPUIntensive] = 0;
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityIsDiskIntensive] = 0;
  v37[3] = v11;
  v37[0] = a3;
  v12 = &a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier];
  *(_QWORD *)&v34 = ObjectType;
  v13 = a5;
  v14 = sub_10001A630(&qword_10083F060);
  *v12 = String.init<A>(reflecting:)(&v34, v14);
  v12[1] = v15;
  v16 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter];
  *(_QWORD *)(v16 + 32) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_storeController] = a1;
  sub_100018618((uint64_t)v38, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations]);
  sub_100018618((uint64_t)v37, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states]);
  swift_beginAccess(v16, &v34, 33, 0);
  v17 = a1;
  sub_1001B20E0(a4, v16);
  swift_endAccess(&v34);
  sub_100018618((uint64_t)v37, (uint64_t)&v34);
  v18 = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupExecutionDateStorage();
  v19 = swift_allocObject(v18, 56, 7);
  sub_10001BCA8(&v34, v19 + 16);
  v20 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executionDateStorage];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1007E7D38;
  *v20 = v19;
  v21 = v39;
  v22 = v40;
  v23 = sub_10000A388(v38, v39);
  v35 = &type metadata for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer;
  v36 = &off_1007E7EC0;
  v24 = (_QWORD *)swift_allocObject(&unk_1007E8AB0, 56, 7);
  *(_QWORD *)&v34 = v24;
  v24[5] = v21;
  v24[6] = v22[2];
  v25 = sub_1000087F0(v24 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v25, v23, v21);
  sub_1001B214C((uint64_t)&v34, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_rateReducerConfiguration]);
  v26 = (void *)v38[0];
  v27 = v17;
  v28 = objc_msgSend(v26, "staledFileAttachmentCleanupPerRunDeleteLimit");
  v29 = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  v30 = (_QWORD *)swift_allocObject(v29, 88, 7);
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable] = sub_1001AFD80(v27, (uint64_t)v37[0], (uint64_t)v28, v30);

  v33.receiver = v13;
  v33.super_class = ObjectType;
  v31 = objc_msgSendSuper2(&v33, "init");
  sub_1001B2194(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v38);
  return v31;
}

id sub_1001B05C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _BYTE *a7)
{
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  __n128 v41;
  id v42;
  objc_super v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  _UNKNOWN **v49;
  _QWORD v50[5];
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;

  ObjectType = swift_getObjectType(a7);
  v52 = type metadata accessor for RDImageDeduplicationActivity.Configurations();
  v53 = &off_1007F95C0;
  v51[0] = a2;
  v50[3] = type metadata accessor for RDImageDeduplicationActivity.States();
  v50[4] = &off_1007F9550;
  v50[0] = a3;
  a7[qword_10084E470] = 0;
  a7[qword_10084E478] = 1;
  a7[qword_10084E480] = 1;
  v14 = (uint64_t)&a7[qword_10084E488];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = (uint64_t)&a7[qword_10084E498];
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)&a7[qword_10084E4A0] = a1;
  sub_100018618((uint64_t)v51, (uint64_t)&a7[qword_10084E4A8]);
  sub_100018618((uint64_t)v50, (uint64_t)&a7[qword_10084E4B0]);
  *(_QWORD *)&a7[qword_10084E4B8] = a4;
  swift_beginAccess(v15, &v47, 33, 0);
  v16 = a7;
  v17 = a1;
  swift_retain(a4);
  sub_1001B20E0(a5, v15);
  swift_endAccess(&v47);
  sub_100018618((uint64_t)v50, (uint64_t)&v47);
  v18 = sub_10001A630(&qword_10083F038);
  v19 = swift_allocObject(v18, 56, 7);
  sub_10001BCA8(&v47, v19 + 16);
  v20 = (uint64_t *)&v16[qword_10084E490];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1007F95E0;
  *v20 = v19;
  v21 = v52;
  v22 = v53;
  v23 = sub_10000A388(v51, v52);
  v48 = sub_10001A630(&qword_10083F040);
  v49 = &off_1007F97B0;
  v24 = (_QWORD *)swift_allocObject(&unk_1007E8A88, 56, 7);
  *(_QWORD *)&v47 = v24;
  v24[5] = v21;
  v24[6] = v22[2];
  v25 = sub_1000087F0(v24 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v25, v23, v21);
  swift_beginAccess(v14, v46, 33, 0);
  sub_1001B221C((uint64_t)&v47, v14);
  swift_endAccess(v46);
  *(_QWORD *)&v47 = ObjectType;
  MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
  v27 = String.init<A>(reflecting:)(&v47, MetatypeMetadata);
  v29 = v28;
  v30 = *(_QWORD *)(v51[0] + 40);
  v31 = *(_QWORD *)(v51[0] + 48);
  sub_10000A388((_QWORD *)(v51[0] + 16), v30);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
  v34 = v17;
  swift_retain(a4);
  v35 = v33(v30, v32);
  if (v35 >= 0x7FFFFFFFFFFFFFFFLL)
    v36 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v36 = v35;
  v37 = sub_10001A630(&qword_10083F048);
  v38 = (_QWORD *)swift_allocObject(v37, 160, 7);
  v39 = v50[0];
  v40 = a6;
  swift_retain(v39);
  *(_QWORD *)&v16[qword_10084E4C0] = sub_1001AFFA8(v27, v29, v34, v39, a4, v36, (uint64_t)v40, v38, v41, (uint64_t (*)(_QWORD))type metadata accessor for RDImageDeduplicationActivity.States, (uint64_t)&off_1007F9550, &qword_10083F058);

  v45.receiver = v16;
  v45.super_class = (Class)sub_10001A630(&qword_10083F050);
  v42 = objc_msgSendSuper2(&v45, "init");
  sub_1001B2194(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v50);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v51);
  return v42;
}

id sub_1001B0968(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v19[2];
  _QWORD v20[5];

  v20[3] = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v20[4] = &off_1007F8F50;
  v20[0] = a2;
  v12 = objc_allocWithZone((Class)type metadata accessor for RDImageDeduplicationActivity(0));
  sub_100018618((uint64_t)v20, (uint64_t)v19);
  v13 = type metadata accessor for RDImageDeduplicationActivity.Configurations();
  v14 = swift_allocObject(v13, 56, 7);
  sub_10001BCA8(v19, v14 + 16);
  v15 = type metadata accessor for RDImageDeduplicationActivity.States();
  v16 = swift_allocObject(v15, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = &off_1007F8EE0;
  sub_1001B21D4(a5, (uint64_t)v19);
  v17 = sub_1001B05C4(a1, v14, v16, a4, (uint64_t)v19, a6, v12);
  sub_1001B2194(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
  return v17;
}

id sub_1001B0A88(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  __n128 v32;
  id v33;
  id v34;
  __int128 v36;
  __int128 v37;
  _UNKNOWN **v38;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = objc_msgSend(a1, "_dataSeparationIncompatible_defaultReminderDataContainerURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  *((_QWORD *)&v37 + 1) = sub_1000151B0(0, &qword_10083F008, NSFileManager_ptr);
  v38 = &off_1007F2AD0;
  *(_QWORD *)&v36 = v10;
  v11 = type metadata accessor for RDSentinelFileLocation(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v12 + 16) = 0xD00000000000001BLL;
  *(_QWORD *)(v12 + 24) = 0x80000001006FBD40;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL, v6, v2);
  sub_10001BCA8(&v36, v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_10000A388((_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager), *(_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24));
  v14 = sub_1003D8E44();
  v16 = v15;
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t))(v13 + 8))(v14);
  swift_bridgeObjectRelease(v16);
  if ((v6 & 1) != 0)
  {
    if (qword_100836EE8 != -1)
      swift_once(&qword_100836EE8, sub_1001AF3A0);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10083EFA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDImageDeduplicationActivity's sentinel file exists, activity does not need to register.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0;
  }
  else
  {
    v23 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
    v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "daemonUserDefaults");
    v25 = (void *)objc_opt_self(ICCloudConfiguration);
    v26 = a1;
    v27 = objc_msgSend(v25, "sharedConfiguration");
    v28 = (void *)objc_opt_self(DABabysitter);
    v29 = v24;
    v30 = objc_msgSend(v28, "sharedBabysitter");
    if (v30)
    {
      v31 = v30;
      *((_QWORD *)&v37 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
      v38 = &off_1007F4EC0;
      *(_QWORD *)&v36 = v31;
    }
    else
    {
      v38 = 0;
      v32 = 0uLL;
      v36 = 0u;
      v37 = 0u;
    }
    v33 = objc_allocWithZone((Class)type metadata accessor for Analytics(0, v32));
    v34 = objc_msgSend(v33, "init", (_QWORD)v36);
    v22 = sub_1001B0968(v26, (uint64_t)v27, (uint64_t)v29, v12, (uint64_t)&v36, v34);

    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v22;
}

id sub_1001B0E5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _BYTE *a7)
{
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  __n128 v41;
  id v42;
  objc_super v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  _UNKNOWN **v49;
  _QWORD v50[5];
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;

  ObjectType = swift_getObjectType(a7);
  v52 = type metadata accessor for RDSavedImageDeduplicationActivity.Configurations();
  v53 = &off_1007F9530;
  v51[0] = a2;
  v50[3] = type metadata accessor for RDSavedImageDeduplicationActivity.States();
  v50[4] = &off_1007F94C0;
  v50[0] = a3;
  a7[qword_10084E470] = 0;
  a7[qword_10084E478] = 1;
  a7[qword_10084E480] = 1;
  v14 = (uint64_t)&a7[qword_10084E488];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = (uint64_t)&a7[qword_10084E498];
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)&a7[qword_10084E4A0] = a1;
  sub_100018618((uint64_t)v51, (uint64_t)&a7[qword_10084E4A8]);
  sub_100018618((uint64_t)v50, (uint64_t)&a7[qword_10084E4B0]);
  *(_QWORD *)&a7[qword_10084E4B8] = a4;
  swift_beginAccess(v15, &v47, 33, 0);
  v16 = a7;
  v17 = a1;
  swift_retain(a4);
  sub_1001B20E0(a5, v15);
  swift_endAccess(&v47);
  sub_100018618((uint64_t)v50, (uint64_t)&v47);
  v18 = sub_10001A630(&qword_10083F010);
  v19 = swift_allocObject(v18, 56, 7);
  sub_10001BCA8(&v47, v19 + 16);
  v20 = (uint64_t *)&v16[qword_10084E490];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1007F95E0;
  *v20 = v19;
  v21 = v52;
  v22 = v53;
  v23 = sub_10000A388(v51, v52);
  v48 = sub_10001A630(&qword_10083F018);
  v49 = &off_1007F97B0;
  v24 = (_QWORD *)swift_allocObject(&unk_1007E8A60, 56, 7);
  *(_QWORD *)&v47 = v24;
  v24[5] = v21;
  v24[6] = v22[2];
  v25 = sub_1000087F0(v24 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v25, v23, v21);
  swift_beginAccess(v14, v46, 33, 0);
  sub_1001B221C((uint64_t)&v47, v14);
  swift_endAccess(v46);
  *(_QWORD *)&v47 = ObjectType;
  MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
  v27 = String.init<A>(reflecting:)(&v47, MetatypeMetadata);
  v29 = v28;
  v30 = *(_QWORD *)(v51[0] + 40);
  v31 = *(_QWORD *)(v51[0] + 48);
  sub_10000A388((_QWORD *)(v51[0] + 16), v30);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
  v34 = v17;
  swift_retain(a4);
  v35 = v33(v30, v32);
  if (v35 >= 0x7FFFFFFFFFFFFFFFLL)
    v36 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v36 = v35;
  v37 = sub_10001A630(&qword_10083F020);
  v38 = (_QWORD *)swift_allocObject(v37, 160, 7);
  v39 = v50[0];
  v40 = a6;
  swift_retain(v39);
  *(_QWORD *)&v16[qword_10084E4C0] = sub_1001AFFA8(v27, v29, v34, v39, a4, v36, (uint64_t)v40, v38, v41, (uint64_t (*)(_QWORD))type metadata accessor for RDSavedImageDeduplicationActivity.States, (uint64_t)&off_1007F94C0, &qword_10083F030);

  v45.receiver = v16;
  v45.super_class = (Class)sub_10001A630(&qword_10083F028);
  v42 = objc_msgSendSuper2(&v45, "init");
  sub_1001B2194(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v50);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v51);
  return v42;
}

id sub_1001B1200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v19[2];
  _QWORD v20[5];

  v20[3] = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v20[4] = &off_1007F8FA8;
  v20[0] = a2;
  v12 = objc_allocWithZone((Class)type metadata accessor for RDSavedImageDeduplicationActivity(0));
  sub_100018618((uint64_t)v20, (uint64_t)v19);
  v13 = type metadata accessor for RDSavedImageDeduplicationActivity.Configurations();
  v14 = swift_allocObject(v13, 56, 7);
  sub_10001BCA8(v19, v14 + 16);
  v15 = type metadata accessor for RDSavedImageDeduplicationActivity.States();
  v16 = swift_allocObject(v15, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = &off_1007F8F18;
  sub_1001B21D4(a5, (uint64_t)v19);
  v17 = sub_1001B0E5C(a1, v14, v16, a4, (uint64_t)v19, a6, v12);
  sub_1001B2194(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
  return v17;
}

id sub_1001B1320(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  __n128 v32;
  id v33;
  id v34;
  __int128 v36;
  __int128 v37;
  _UNKNOWN **v38;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = objc_msgSend(a1, "_dataSeparationIncompatible_defaultReminderDataContainerURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  *((_QWORD *)&v37 + 1) = sub_1000151B0(0, &qword_10083F008, NSFileManager_ptr);
  v38 = &off_1007F2AD0;
  *(_QWORD *)&v36 = v10;
  v11 = type metadata accessor for RDSentinelFileLocation(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v12 + 16) = 0xD000000000000020;
  *(_QWORD *)(v12 + 24) = 0x80000001006FBD10;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL, v6, v2);
  sub_10001BCA8(&v36, v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_10000A388((_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager), *(_QWORD *)(v12 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24));
  v14 = sub_1003D8E44();
  v16 = v15;
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t))(v13 + 8))(v14);
  swift_bridgeObjectRelease(v16);
  if ((v6 & 1) != 0)
  {
    if (qword_100836EE8 != -1)
      swift_once(&qword_100836EE8, sub_1001AF3A0);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10083EFA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDSavedImageDeduplicationActivity's sentinel file exists, activity does not need to register.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0;
  }
  else
  {
    v23 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
    v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "daemonUserDefaults");
    v25 = (void *)objc_opt_self(ICCloudConfiguration);
    v26 = a1;
    v27 = objc_msgSend(v25, "sharedConfiguration");
    v28 = (void *)objc_opt_self(DABabysitter);
    v29 = v24;
    v30 = objc_msgSend(v28, "sharedBabysitter");
    if (v30)
    {
      v31 = v30;
      *((_QWORD *)&v37 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
      v38 = &off_1007F4EC0;
      *(_QWORD *)&v36 = v31;
    }
    else
    {
      v38 = 0;
      v32 = 0uLL;
      v36 = 0u;
      v37 = 0u;
    }
    v33 = objc_allocWithZone((Class)type metadata accessor for Analytics(0, v32));
    v34 = objc_msgSend(v33, "init", (_QWORD)v36);
    v22 = sub_1001B1200(v26, (uint64_t)v27, (uint64_t)v29, v12, (uint64_t)&v36, v34);

    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v22;
}

id sub_1001B16F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  objc_class *ObjectType;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  objc_super v33;
  __int128 v34;
  ValueMetadata *v35;
  _UNKNOWN **v36;
  _QWORD v37[5];
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[5];

  ObjectType = (objc_class *)swift_getObjectType(a6);
  v13 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  v41[3] = v13;
  v41[4] = &off_1007FC518;
  v41[0] = a4;
  v39 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v40 = &off_1007FC530;
  v38[0] = a2;
  v37[4] = &off_1007FC4F8;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityAllowBattery] = 0;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityIsCPUIntensive] = 1;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityIsDiskIntensive] = 0;
  v37[3] = v13;
  v37[0] = a3;
  v14 = &a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier];
  *(_QWORD *)&v34 = ObjectType;
  v15 = a6;
  v16 = sub_10001A630(&qword_10083F000);
  *v14 = String.init<A>(reflecting:)(&v34, v16);
  v14[1] = v17;
  v18 = (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter];
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_storeController] = a1;
  sub_100018618((uint64_t)v38, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations]);
  sub_100018618((uint64_t)v37, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_states]);
  sub_100018618((uint64_t)v41, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults]);
  swift_beginAccess(v18, &v34, 33, 0);
  v19 = a1;
  sub_1001B20E0(a5, v18);
  swift_endAccess(&v34);
  sub_100018618((uint64_t)v37, (uint64_t)&v34);
  v20 = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListExecutionDateStorage();
  v21 = swift_allocObject(v20, 56, 7);
  sub_10001BCA8(&v34, v21 + 16);
  v22 = (uint64_t *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executionDateStorage];
  v22[3] = v20;
  v22[4] = (uint64_t)&off_1007FC568;
  *v22 = v21;
  v23 = v39;
  v24 = v40;
  v25 = sub_10000A388(v38, v39);
  v35 = &type metadata for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer;
  v36 = &off_1007FC6F0;
  v26 = (_QWORD *)swift_allocObject(&unk_1007E8A38, 56, 7);
  *(_QWORD *)&v34 = v26;
  v26[5] = v23;
  v26[6] = v24[1];
  v27 = sub_1000087F0(v26 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v27, v25, v23);
  sub_1001B214C((uint64_t)&v34, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_rateReducerConfiguration]);
  sub_100018618((uint64_t)v37, (uint64_t)&v34);
  v28 = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  v29 = (_QWORD *)swift_allocObject(v28, 80, 7);
  v29[2] = 0xD000000000000025;
  v29[3] = 0x80000001006FBCE0;
  v29[4] = v19;
  sub_10001BCA8(&v34, (uint64_t)(v29 + 5));
  *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable] = v29;
  v30 = v19;

  v33.receiver = v15;
  v33.super_class = ObjectType;
  v31 = objc_msgSendSuper2(&v33, "init");
  sub_1001B2194(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v41);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v38);
  return v31;
}

id sub_1001B1A38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  objc_class *ObjectType;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  objc_class *v26;
  char *v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  objc_super v33;
  objc_super v34;
  __int128 v35;
  ValueMetadata *v36;
  _UNKNOWN **v37;
  _QWORD v38[5];
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  ObjectType = (objc_class *)swift_getObjectType(a5);
  v40 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v41 = &off_1007F0858;
  v39[0] = a2;
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityAllowBattery] = 0;
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityIsCPUIntensive] = 0;
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityIsDiskIntensive] = 1;
  v38[3] = v11;
  v38[4] = &off_1007F0838;
  v38[0] = a3;
  v12 = &a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier];
  *(_QWORD *)&v35 = ObjectType;
  v13 = a5;
  v14 = sub_10001A630(&qword_10083EFF8);
  *v12 = String.init<A>(reflecting:)(&v35, v14);
  v12[1] = v15;
  v16 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter];
  *(_QWORD *)(v16 + 32) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_storeController] = a1;
  sub_100018618((uint64_t)v39, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations]);
  sub_100018618((uint64_t)v38, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_states]);
  swift_beginAccess(v16, &v35, 33, 0);
  v17 = a1;
  sub_1001B20E0(a4, v16);
  swift_endAccess(&v35);
  sub_100018618((uint64_t)v38, (uint64_t)&v35);
  v18 = type metadata accessor for RDAnalyticsActivity.RDAnalyticsExecutionDateStorage();
  v19 = swift_allocObject(v18, 56, 7);
  sub_10001BCA8(&v35, v19 + 16);
  v20 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executionDateStorage];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1007F0890;
  *v20 = v19;
  v21 = v40;
  v22 = v41;
  v23 = sub_10000A388(v39, v40);
  v36 = &type metadata for RDAnalyticsActivity.RDAnalyticsRateReducer;
  v37 = &off_1007F0AE8;
  v24 = (_QWORD *)swift_allocObject(&unk_1007E8A10, 56, 7);
  *(_QWORD *)&v35 = v24;
  v24[5] = v21;
  v24[6] = v22[1];
  v25 = sub_1000087F0(v24 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v25, v23, v21);
  sub_1001B214C((uint64_t)&v35, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_rateReducerConfiguration]);
  sub_100018618((uint64_t)v38, (uint64_t)&v35);
  v26 = (objc_class *)type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = &v27[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name];
  *(_QWORD *)v28 = 0xD000000000000010;
  *((_QWORD *)v28 + 1) = 0x80000001006FBCC0;
  *(_QWORD *)&v27[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_storeController] = v17;
  sub_100018618((uint64_t)&v35, (uint64_t)&v27[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_states]);
  v34.receiver = v27;
  v34.super_class = v26;
  v29 = v17;
  v30 = objc_msgSendSuper2(&v34, "init");
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v35);
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable] = v30;

  v33.receiver = v13;
  v33.super_class = ObjectType;
  v31 = objc_msgSendSuper2(&v33, "init");
  sub_1001B2194(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v38);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v39);
  return v31;
}

id sub_1001B1D74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  objc_class *ObjectType;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  objc_super v31;
  __int128 v32[2];
  __int128 v33;
  ValueMetadata *v34;
  _UNKNOWN **v35;
  _QWORD v36[5];
  _QWORD v37[3];
  uint64_t v38;
  _UNKNOWN **v39;

  ObjectType = (objc_class *)swift_getObjectType(a5);
  v38 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  v39 = &off_1007E8650;
  v37[0] = a2;
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityAllowBattery] = 0;
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityIsCPUIntensive] = 1;
  v36[4] = &off_1007E8630;
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityIsDiskIntensive] = 0;
  v36[3] = v11;
  v36[0] = a3;
  v12 = &a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier];
  *(_QWORD *)&v33 = ObjectType;
  v13 = a5;
  v14 = sub_10001A630(&qword_10083EFF0);
  *v12 = String.init<A>(reflecting:)(&v33, v14);
  v12[1] = v15;
  v16 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter];
  *(_QWORD *)(v16 + 32) = 0;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_storeController] = a1;
  sub_100018618((uint64_t)v37, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations]);
  sub_100018618((uint64_t)v36, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_states]);
  swift_beginAccess(v16, &v33, 33, 0);
  v17 = a1;
  sub_1001B20E0(a4, v16);
  swift_endAccess(&v33);
  sub_100018618((uint64_t)v36, (uint64_t)&v33);
  v18 = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersExecutionDateStorage();
  v19 = swift_allocObject(v18, 56, 7);
  sub_10001BCA8(&v33, v19 + 16);
  v20 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executionDateStorage];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1007E86A0;
  *v20 = v19;
  v21 = v38;
  v22 = v39;
  v23 = sub_10000A388(v37, v38);
  v34 = &type metadata for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer;
  v35 = &off_1007E8828;
  v24 = (_QWORD *)swift_allocObject(&unk_1007E89E8, 56, 7);
  *(_QWORD *)&v33 = v24;
  v24[5] = v21;
  v24[6] = v22[2];
  v25 = sub_1000087F0(v24 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v25, v23, v21);
  sub_1001B214C((uint64_t)&v33, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_rateReducerConfiguration]);
  sub_100018618((uint64_t)v36, (uint64_t)&v33);
  sub_100018618((uint64_t)v37, (uint64_t)v32);
  v26 = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  v27 = (_QWORD *)swift_allocObject(v26, 120, 7);
  v27[2] = 0xD000000000000022;
  v27[3] = 0x80000001006FBC90;
  v27[4] = v17;
  sub_10001BCA8(&v33, (uint64_t)(v27 + 5));
  sub_10001BCA8(v32, (uint64_t)(v27 + 10));
  *(_QWORD *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable] = v27;
  v28 = v17;

  v31.receiver = v13;
  v31.super_class = ObjectType;
  v29 = objc_msgSendSuper2(&v31, "init");
  sub_1001B2194(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v36);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v37);
  return v29;
}

unint64_t sub_1001B2094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083EFD8;
  if (!qword_10083EFD8)
  {
    v1 = sub_1000A5A94(&qword_10083EFC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083EFD8);
  }
  return result;
}

uint64_t sub_1001B20E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083E300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B2128()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001B214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083ECE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B2194(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_10083E300);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B21D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083E300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B221C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10083ECE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B2278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001B23AC(void *a1, uint64_t a2)
{
  return sub_1001B2558(a1, a2, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

uint64_t sub_1001B23C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1001B2544(void *a1, uint64_t a2)
{
  return sub_1001B2558(a1, a2, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
}

uint64_t sub_1001B2558(void *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  id v6;
  char v7;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  id v20;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
      v12 = -1 << *(_BYTE *)(a2 + 32);
      v13 = v11 & ~v12;
      v14 = a2 + 56;
      if (((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
      {
        sub_1000151B0(0, a3, a4);
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v13);
        v16 = static NSObject.== infix(_:_:)(v15);

        if ((v16 & 1) != 0)
        {
          v17 = 1;
          return v17 & 1;
        }
        v18 = ~v12;
        v19 = (v13 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        {
          do
          {
            v20 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v19);
            v17 = static NSObject.== infix(_:_:)(v20);

            if ((v17 & 1) != 0)
              break;
            v19 = (v19 + 1) & v18;
          }
          while (((*(_QWORD *)(v14 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0);
          return v17 & 1;
        }
      }
    }
    v17 = 0;
    return v17 & 1;
  }
  if (a2 < 0)
    v5 = a2;
  else
    v5 = a2 & 0xFFFFFFFFFFFFFF8;
  v6 = a1;
  v7 = __CocoaSet.contains(_:)(v6, v5);

  return v7 & 1;
}

uint64_t sub_1001B26B4(uint64_t a1, uint64_t a2)
{
  uint64_t PredicateType;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v19 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, PredicateType, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, PredicateType);
      v15 = sub_10009FC50((unint64_t *)&qword_100844470, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, PredicateType, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, PredicateType);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1001B2838(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for REMObjectID_Codable(0);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t sub_1001B2984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_10009FC50(&qword_10083F068, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1001B2B08(char a1, uint64_t a2)
{
  _QWORD v4[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v4, *(_QWORD *)(a2 + 40));
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(dictionary:forEvaluatingAgainst:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t PredicateType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  int v81;
  char v82;
  __n128 v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  __int16 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;

  v110 = a1;
  v105 = a3;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v104 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v100 = (char *)&v98 - v7;
  __chkstk_darwin(v8);
  v109 = (uint64_t)&v98 - v9;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v11 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v103 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v102 = (uint64_t)&v98 - v17;
  __chkstk_darwin(v18);
  v101 = (uint64_t)&v98 - v19;
  __chkstk_darwin(v20);
  v99 = (char *)&v98 - v21;
  __chkstk_darwin(v22);
  v107 = (uint64_t)&v98 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v98 - v25;
  __chkstk_darwin(v27);
  v108 = (char *)&v98 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v98 - v30;
  __chkstk_darwin(v32);
  v34 = (char *)&v98 - v33;
  v35 = type metadata accessor for UUID(0);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v106 = v34;
  v37 = v36(v34, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter(v37);
  v38 = sub_1001B26B4((uint64_t)v13, a2);
  v39 = *(void (**)(char *, uint64_t))(v11 + 8);
  v39(v13, PredicateType);
  if ((v38 & 1) != 0)
  {
    *(_QWORD *)&v112 = 0x696669746E656469;
    *((_QWORD *)&v112 + 1) = 0xEA00000000007265;
    v40 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
    v41 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v40);
    swift_unknownObjectRelease(v40);
    if (v41)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v41);
      swift_unknownObjectRelease(v41);
      sub_10000882C((uint64_t)v106, (uint64_t *)&unk_100839C80);
    }
    else
    {
      sub_10000882C((uint64_t)v106, (uint64_t *)&unk_100839C80);
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v42 = swift_dynamicCast(v31, &v114, (char *)&type metadata for Any + 8, v35, 6) ^ 1;
      v43 = v31;
    }
    else
    {
      sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v43 = v31;
      v42 = 1;
    }
    v36(v43, v42, 1, v35);
    sub_1000A5CA8((uint64_t)v31, (uint64_t)v106, (uint64_t *)&unk_100839C80);
  }
  v44 = v36(v108, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter(v44);
  v45 = sub_1001B26B4((uint64_t)v13, a2);
  v39(v13, PredicateType);
  v46 = v107;
  if ((v45 & 1) != 0)
  {
    *(_QWORD *)&v112 = 0x6564692E7473696CLL;
    *((_QWORD *)&v112 + 1) = 0xEF7265696669746ELL;
    v47 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
    v48 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v47);
    swift_unknownObjectRelease(v47);
    if (v48)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v48);
      swift_unknownObjectRelease(v48);
      sub_10000882C((uint64_t)v108, (uint64_t *)&unk_100839C80);
    }
    else
    {
      sub_10000882C((uint64_t)v108, (uint64_t *)&unk_100839C80);
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v49 = swift_dynamicCast(v26, &v114, (char *)&type metadata for Any + 8, v35, 6) ^ 1;
      v50 = v26;
    }
    else
    {
      sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v50 = v26;
      v49 = 1;
    }
    v36(v50, v49, 1, v35);
    sub_1000A5CA8((uint64_t)v26, (uint64_t)v108, (uint64_t *)&unk_100839C80);
  }
  v51 = v36((char *)v46, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter(v51);
  v52 = sub_1001B26B4((uint64_t)v13, a2);
  v39(v13, PredicateType);
  if ((v52 & 1) != 0)
  {
    *(_QWORD *)&v112 = 0xD000000000000012;
    *((_QWORD *)&v112 + 1) = 0x80000001006FBDE0;
    v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
    v54 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v53);
    swift_unknownObjectRelease(v53);
    if (v54)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v54);
      swift_unknownObjectRelease(v54);
      sub_10000882C(v46, (uint64_t *)&unk_100839C80);
    }
    else
    {
      sub_10000882C(v46, (uint64_t *)&unk_100839C80);
      v112 = 0u;
      v113 = 0u;
    }
    v55 = (uint64_t)v99;
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v56 = swift_dynamicCast(v55, &v114, (char *)&type metadata for Any + 8, v35, 6) ^ 1;
      v57 = v55;
    }
    else
    {
      sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v57 = v55;
      v56 = 1;
    }
    v36((char *)v57, v56, 1, v35);
    sub_1000A5CA8(v55, v46, (uint64_t *)&unk_100839C80);
  }
  v58 = type metadata accessor for Date(0);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
  v60 = v59(v109, 1, 1, v58);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter(v60);
  v61 = sub_1001B26B4((uint64_t)v13, a2);
  v62 = ((uint64_t (*)(char *, uint64_t))v39)(v13, PredicateType);
  if ((v61 & 1) != 0
    || (static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(v62),
        v63 = sub_1001B26B4((uint64_t)v13, a2),
        v64 = ((uint64_t (*)(char *, uint64_t))v39)(v13, PredicateType),
        (v63 & 1) != 0))
  {
    *(_QWORD *)&v112 = 0x4479616C70736964;
    *((_QWORD *)&v112 + 1) = 0xEF65746144657461;
    v65 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
    v66 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v65);
    swift_unknownObjectRelease(v65);
    if (v66)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v66);
      swift_unknownObjectRelease(v66);
      sub_10000882C(v109, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      sub_10000882C(v109, (uint64_t *)&unk_1008380D0);
      v112 = 0u;
      v113 = 0u;
    }
    v67 = (uint64_t)v100;
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v68 = swift_dynamicCast(v67, &v114, (char *)&type metadata for Any + 8, v58, 6) ^ 1;
      v69 = v67;
    }
    else
    {
      sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v69 = v67;
      v68 = 1;
    }
    v59(v69, v68, 1, v58);
    sub_1000A5CA8(v67, v109, (uint64_t *)&unk_1008380D0);
    v114 = 0xD000000000000013;
    v115 = 0x80000001006FA0E0;
    v70 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v114, &type metadata for String);
    v71 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v70);
    swift_unknownObjectRelease(v70);
    if (v71)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v71);
      swift_unknownObjectRelease(v71);
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v64 = swift_dynamicCast(&v111, &v114, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
      if ((_DWORD)v64)
        v72 = v111;
      else
        v72 = 2;
    }
    else
    {
      v64 = sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v72 = 2;
    }
  }
  else
  {
    v72 = 2;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter(v64);
  v73 = sub_1001B26B4((uint64_t)v13, a2);
  v74 = ((uint64_t (*)(char *, uint64_t))v39)(v13, PredicateType);
  if ((v73 & 1) != 0)
  {
    *(_QWORD *)&v112 = 0x797469726F697270;
    *((_QWORD *)&v112 + 1) = 0xE800000000000000;
    v75 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
    v76 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v75);
    swift_unknownObjectRelease(v75);
    if (v76)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v76);
      swift_unknownObjectRelease(v76);
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      v74 = swift_dynamicCast(&v111, &v114, (char *)&type metadata for Any + 8, &type metadata for Int64, 6);
      if ((v74 & 1) != 0)
      {
        if (v111 < 0)
        {
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
          return result;
        }
        v74 = REMReminderPriorityLevelForPriority();
        v100 = (char *)v74;
        LODWORD(v99) = 0;
        goto LABEL_52;
      }
    }
    else
    {
      v74 = sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    }
  }
  v100 = 0;
  LODWORD(v99) = 1;
LABEL_52:
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter(v74);
  v77 = sub_1001B26B4((uint64_t)v13, a2);
  v78 = ((uint64_t (*)(char *, uint64_t))v39)(v13, PredicateType);
  if ((v77 & 1) == 0)
    goto LABEL_60;
  *(_QWORD *)&v112 = 0x64656767616C66;
  *((_QWORD *)&v112 + 1) = 0xE700000000000000;
  v79 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v112, &type metadata for String);
  v80 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v79);
  swift_unknownObjectRelease(v79);
  if (v80)
  {
    _bridgeAnyObjectToAny(_:)(&v112, v80);
    swift_unknownObjectRelease(v80);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
  if (!v116)
  {
    v78 = sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    goto LABEL_60;
  }
  v78 = swift_dynamicCast(&v111, &v114, (char *)&type metadata for Any + 8, &type metadata for Int64, 6);
  if ((v78 & 1) == 0)
  {
LABEL_60:
    v81 = 2;
    goto LABEL_61;
  }
  v81 = v111 > 0;
LABEL_61:
  HIDWORD(v98) = v81;
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter(v78);
  v82 = sub_1001B26B4((uint64_t)v13, a2);
  v83 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v39)(v13, PredicateType, v83);
  LODWORD(v98) = v72;
  if ((v82 & 1) != 0)
  {
    v114 = 0x6574656C706D6F63;
    v115 = 0xE900000000000064;
    v84 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v114, &type metadata for String);
    v85 = objc_msgSend(v110, "__swift_objectForKeyedSubscript:", v84, v98, v99, v100);
    swift_unknownObjectRelease(v84);
    v86 = (uint64_t)v104;
    if (v85)
    {
      _bridgeAnyObjectToAny(_:)(&v112, v85);
      swift_unknownObjectRelease(v85);
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v112, (uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
    if (v116)
    {
      if (swift_dynamicCast(&v111, &v114, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))v88 = v111;
      else
        v88 = 2;
    }
    else
    {
      sub_10000882C((uint64_t)&v114, (uint64_t *)&unk_10083D5B0);
      v88 = 2;
    }
    v87 = v88;
  }
  else
  {
    v87 = 2;
    v86 = (uint64_t)v104;
  }
  v89 = (uint64_t)v106;
  v90 = v101;
  sub_100008868((uint64_t)v106, v101, (uint64_t *)&unk_100839C80);
  v91 = (uint64_t)v108;
  v92 = v102;
  sub_100008868((uint64_t)v108, v102, (uint64_t *)&unk_100839C80);
  v93 = v107;
  v94 = v103;
  sub_100008868(v107, v103, (uint64_t *)&unk_100839C80);
  v95 = v109;
  sub_100008868(v109, v86, (uint64_t *)&unk_1008380D0);
  HIBYTE(v97) = v87;
  LOBYTE(v97) = BYTE4(v98);
  REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(identifier:listIdentifier:accountIdentifier:displayDateDate:displayDateIsAllDay:alarmTriggers:priority:flagged:completed:)(v90, v92, v94, v86, v98, 0, v100, v99, v97);

  sub_10000882C(v95, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v93, (uint64_t *)&unk_100839C80);
  sub_10000882C(v91, (uint64_t *)&unk_100839C80);
  return sub_10000882C(v89, (uint64_t *)&unk_100839C80);
}

uint64_t sub_1001B3B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F070);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F070);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDHashtag.recordTypes()()
{
  return &off_1007DFDD8;
}

uint64_t static REMCDHashtag.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDHashtag), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDHashtag.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "setAccount:", a2);
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v12);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836EF0 != -1)
        swift_once(&qword_100836EF0, sub_1001B3B3C);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_10083F070);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDHashtag.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x67617468736148;
  v1 = (void *)0xE700000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDHashtag.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  NSString v28;
  double v29;
  NSString v30;
  double v31;
  __int128 v32;
  _QWORD v33[2];
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  void *v47;
  char *v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  objc_super v54;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v33[1] = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v43 = (char *)v33 - v8;
  __chkstk_darwin(v9);
  v42 = (char *)v33 - v10;
  __chkstk_darwin(v11);
  v38 = (char *)v33 - v12;
  __chkstk_darwin(v13);
  v37 = (char *)v33 - v14;
  __chkstk_darwin(v15);
  v46 = (char *)v33 - v16;
  v17 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v45 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v36 = (char *)v33 - v20;
  v21 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v21);
  v23 = (char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v24 - 8);
  v52 = v24;
  __chkstk_darwin(v24);
  v44 = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = String._bridgeToObjectiveC()();
  v54.receiver = v3;
  v54.super_class = (Class)REMCDHashtag;
  objc_msgSendSuper2(&v54, "mergeDataFromRecord:accountID:", from.super.isa, v26);

  v27 = -[objc_class recordID](from.super.isa, "recordID");
  v28 = objc_msgSend(v27, "recordName");

  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v28 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v30 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v28, v29);

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v30 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v31 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v30, v31);

  *(_QWORD *)&v32 = 136446722;
  v41 = v32;
  v40 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v32 = 136446466;
  v39 = v32;
  *(_QWORD *)&v32 = 136446210;
  v34 = v32;
  v35 = 0x80000001006FBE00;
  v47 = v3;
  v48 = v23;
  isa = from.super.isa;
  v50 = v17;
  JUMPOUT(0x1001B4590);
}

void sub_1001B4590()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v3 = CKRecord.subscript.getter(0x6E6F697461657243, 0xEC00000065746144);
  if (v3)
  {
    *(_QWORD *)(v2 - 128) = v3;
    v4 = sub_10001A630(&qword_1008398E0);
    v5 = *(_QWORD *)(v2 - 144);
    v6 = swift_dynamicCast(v1, v2 - 128, v4, v5, 6);
    v7 = *(_QWORD *)(v2 - 152);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v1, v6 ^ 1u, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1, 1, v5) != 1)
    {
      v9 = *(_QWORD *)(v2 - 152);
      v8 = *(_QWORD *)(v2 - 144);
      v10 = *(_QWORD *)(v2 - 216);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v1, v8);
      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v0, "setCreationDate:", isa);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 56))(v1, 1, 1, *(_QWORD *)(v2 - 144));
  }
  sub_10000882C(v1, (uint64_t *)&unk_1008380D0);
  if (qword_100836EF0 != -1)
    swift_once(&qword_100836EF0, sub_1001B3B3C);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001AAA8(v12, (uint64_t)qword_10083F070);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Hashtag does not have creation date", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

LABEL_10:
  JUMPOUT(0x1001B456CLL);
}

CKRecord_optional __swiftcall REMCDHashtag.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  Swift::Bool v18;
  __int128 v19;
  objc_class *v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  const char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  id v36;
  objc_super v37;
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v22 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v28 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - v8;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v21 - v15;
  v37.receiver = v1;
  v37.super_class = (Class)REMCDHashtag;
  v17 = objc_msgSendSuper2(&v37, "newlyCreatedRecord", v14);
  if (v17)
  {
    v27 = v2;
    *(_QWORD *)&v19 = 136446210;
    v31 = v19;
    v29 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v19 = 136446722;
    v25 = v19;
    *(_QWORD *)&v19 = 136446466;
    v21 = v19;
    *(_QWORD *)&v19 = 136446978;
    v23 = v19;
    v24 = "account.identifier";
    v30 = 0x80000001006FBE00;
    v32 = v1;
    v33 = v9;
    v26 = v3;
    v34 = v12;
    v35 = v16;
    v36 = v17;
    JUMPOUT(0x1001B5A7CLL);
  }
  v20 = 0;
  result.value.super.isa = v20;
  result.is_nil = v18;
  return result;
}

Swift::Void __swiftcall REMCDHashtag.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_100836EF0 != -1)
    swift_once(&qword_100836EF0, sub_1001B3B3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083F070);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for hashtag {hashtagID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reminder is marked for deletion but hashtag is not {hashtagID: %{public}s, reminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

Swift::Void __swiftcall REMCDHashtag.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_100836EF0 != -1)
    swift_once(&qword_100836EF0, sub_1001B3B3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083F070);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType(v9);
    v6 = sub_10001A630(&qword_10083F088);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

uint64_t _sSo12REMCDHashtagC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836EF0 != -1)
    swift_once(&qword_100836EF0, sub_1001B3B3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083F070);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083F088);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo12REMCDHashtagC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836EF0 != -1)
    swift_once(&qword_100836EF0, sub_1001B3B3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083F070);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083F088);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1001B7834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F090);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F090);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Class sub_1001B78C4(void *a1)
{
  return sub_1001B78DC(a1, (SEL *)&selRef_suggestedAttributesTrainingOverrides);
}

Class sub_1001B78D0(void *a1)
{
  return sub_1001B78DC(a1, (SEL *)&selRef_suggestedAttributesHarvestingOverrides);
}

Class sub_1001B78DC(void *a1, SEL *a2)
{
  objc_class *v2;
  Class isa;
  uint64_t v4;

  v2 = (objc_class *)objc_msgSend(a1, *a2);
  isa = v2;
  if (v2)
  {
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  return isa;
}

char *sub_1001B7978(void *a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  id v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  objc_class *v51;
  _QWORD v52[3];
  id v53;
  objc_super v54;

  v4 = v3;
  ObjectType = swift_getObjectType();
  v9 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_10083F1A0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v4;
  v49 = v13;
  v50 = v12;
  v51 = (objc_class *)ObjectType;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1002EA204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v17 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cancellables] = v17;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList] = 0;
  v18 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedEditingSessionID];
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels];
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 5) = 255;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *(_OWORD *)(v20 + 73) = 0u;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedContacts] = _swiftEmptyDictionarySingleton;
  v21 = OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_contactStore;
  *(_QWORD *)&v16[v21] = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  v22 = a3;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue] = a3;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_storePerformer] = a1;
  v23 = *(_QWORD *)(a2 + 8);
  v24 = *(_QWORD *)(a2 + 24);
  v25 = a1;
  v26 = *(_QWORD *)(a2 + 40);
  v27 = *(_QWORD *)(a2 + 56);
  v28 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource];
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v28 = *(_OWORD *)a2;
  *((_OWORD *)v28 + 1) = v29;
  v30 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v28 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v28 + 3) = v30;
  v31 = v22;
  v44 = v25;
  v48 = v23;
  swift_retain();
  v47 = v24;
  swift_retain();
  v46 = v26;
  swift_retain();
  v45 = v27;
  swift_retain();

  v54.receiver = v16;
  v54.super_class = v51;
  v32 = objc_msgSendSuper2(&v54, "init");
  v33 = qword_100836F00;
  v34 = (char *)v32;
  if (v33 != -1)
    swift_once(&qword_100836F00, sub_1001B9C44);
  v52[0] = qword_10083F0A8;
  v53 = v31;
  v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v11, 1, 1, v35);
  swift_retain();
  v36 = sub_10001A630((uint64_t *)&unk_10083F1A8);
  v37 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v38 = sub_1000A5F84((unint64_t *)&unk_10083F1B8, (uint64_t *)&unk_10083F1A8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v39 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v53, v11, v36, v37, v38, v39);
  sub_10000882C((uint64_t)v11, &qword_10083A970);
  swift_release(v52[0]);
  sub_1000A5F84(&qword_10083F1C8, &qword_10083F1A0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v40 = v50;
  v41 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v34, sub_1001B7DBC, 0, 0, 0, v50, v51);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v40);
  v42 = &v34[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cancellables];
  swift_beginAccess(&v34[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cancellables], v52, 33, 0);
  AnyCancellable.store(in:)(v42);
  swift_endAccess(v52);
  swift_release(v41);

  swift_release(v45);
  swift_release(v46);
  swift_release(v47);
  swift_release(v48);

  return v34;
}

uint64_t sub_1001B7DBC()
{
  return sub_1001B7DDC();
}

uint64_t sub_1001B7DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[25];
  _BYTE v25[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100836EF8, sub_1001B7834);
    goto LABEL_5;
  }
  v1 = v0 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels;
  swift_beginAccess(v0 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels, v25, 0, 0);
  if (*(_BYTE *)(v1 + 40) != 0xFF)
  {
    v8 = *(_QWORD *)(v1 + 80);
    v9 = *(_BYTE *)(v1 + 88);
    v18 = v8;
    v19 = v9;
    sub_1001B9DB8(v8, v9);
    v10 = sub_10001A630(&qword_10083F1D8);
    Result<>.tryMap<A>(transform:)(v20, sub_1001B9C08, 0, v10, &type metadata for Bool);
    sub_1001B9E20(v8, v9);
    sub_1000D0278(*(uint64_t *)&v20[0], SBYTE8(v20[0]));
  }
  if (qword_100836EF8 != -1)
    goto LABEL_9;
LABEL_5:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_10083F090);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "SuggestedAttributesPerformer.cachedMLModels invalidating cache", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v22 = 255;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  swift_beginAccess(v1, &v18, 33, 0);
  sub_1001BA3C8((uint64_t)v20, v1);
  return swift_endAccess(&v18);
}

id sub_1001B8018()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  objc_super v9;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_100836EF8 != -1)
    swift_once(&qword_100836EF8, sub_1001B7834);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10083F090);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deallocating SuggestedAttributesPerformer", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc");
}

uint64_t sub_1001B8304()
{
  return type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
}

uint64_t type metadata accessor for RDXPCSuggestedAttributesPerformer(uint64_t a1)
{
  uint64_t result;

  result = qword_10083F178;
  if (!qword_10083F178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDXPCSuggestedAttributesPerformer);
  return result;
}

_QWORD *sub_1001B8348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _OWORD v15[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (_QWORD *)((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100836EF8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836EF8, sub_1001B7834);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10083F090);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Prewarming models", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1001B84C8(v15);
  return sub_1001BA410(v15);
}

double sub_1001B84C8@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double result;
  __int128 v22;
  _BYTE v23[24];
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  _BYTE v28[24];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(void **)(v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100836EF8, sub_1001B7834);
LABEL_4:
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10083F090);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      v17 = "SuggestedAttributesPerformer.cachedMLModels cache miss, loaded and set cache";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v17, v16, 2u);
      swift_slowDealloc(v16, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  v10 = (uint64_t)&v29;
  v11 = v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels, v28, 0, 0);
  sub_100008868(v11, (uint64_t)v24, &qword_10083F1D0);
  if (BYTE8(v25) == 0xFF)
  {
    sub_10000882C((uint64_t)v24, &qword_10083F1D0);
    sub_1001B8938((uint64_t)&v29);
    sub_1001BA43C((uint64_t *)&v29, (uint64_t)v24);
    swift_beginAccess(v11, v23, 33, 0);
    sub_1001BA3C8((uint64_t)v24, v11);
    swift_endAccess(v23);
    if (qword_100836EF8 == -1)
      goto LABEL_4;
    goto LABEL_13;
  }
  v31 = v25;
  v32 = v26;
  v33[0] = v27[0];
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v27 + 9);
  v29 = v24[0];
  v30 = v24[1];
  if (qword_100836EF8 != -1)
    swift_once(&qword_100836EF8, sub_1001B7834);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10083F090);
  v14 = Logger.logObject.getter(v19);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    v17 = "SuggestedAttributesPerformer.cachedMLModels cache hit";
    goto LABEL_10;
  }
LABEL_11:

  v20 = v32;
  a1[2] = v31;
  a1[3] = v20;
  a1[4] = v33[0];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)(v10 + 73);
  result = *(double *)&v29;
  v22 = v30;
  *a1 = v29;
  a1[1] = v22;
  return result;
}

uint64_t sub_1001B8938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  void *v32;
  NSString v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 v78;
  _BYTE v79[56];

  v70 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v63 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v63 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v63 - v9;
  sub_1000151B0(0, (unint64_t *)&qword_10083F1E0, REMPaths_ptr);
  static REMPaths.mlModelURL()();
  sub_1001B9650((uint64_t)v10, (uint64_t *)&v71);
  v73 = 0;
  sub_1000A5CA8((uint64_t)&v71, (uint64_t)&v75, (uint64_t *)&unk_10083F190);
  sub_1000A5CA8((uint64_t)&v75, (uint64_t)v79, (uint64_t *)&unk_10083F190);
  v64 = v3;
  v11 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v11(v7, v10, v70);
  v12 = type metadata accessor for REMkNNByTitleEmbedding(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v69 = REMkNNByTitleEmbedding.init(from:with:)(v7, 0, 0);
  __chkstk_darwin(v69);
  v66 = v10;
  *(&v63 - 2) = v10;
  v13 = sub_10001A630((uint64_t *)&unk_10083F190);
  v15 = type metadata accessor for RDIntentClusterModel(0, v14);
  v16 = Result<>.tryMap<A>(transform:)(&v77, sub_1001BA470, &v63 - 4, v13, v15);
  v67 = v77;
  v68 = v78;
  v17 = v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource;
  v18 = (*(uint64_t (**)(_QWORD *))(v1
                                            + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                                            + 48))(v16);
  if (!v18)
  {
    v75 = 0u;
    v76 = 0u;
LABEL_11:
    v23 = sub_10000882C((uint64_t)&v75, (uint64_t *)&unk_10083D5B0);
    goto LABEL_12;
  }
  v19 = (void *)v18;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "valueForKey:", v20);

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)(&v71, v21);
    swift_unknownObjectRelease(v21);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  sub_1000A5CA8((uint64_t)&v71, (uint64_t)&v75, (uint64_t *)&unk_10083D5B0);
  if (!*((_QWORD *)&v76 + 1))
    goto LABEL_11;
  v22 = sub_10001A630(&qword_10083F1F0);
  v23 = swift_dynamicCast(&v71, &v75, (char *)&type metadata for Any + 8, v22, 6);
  if ((v23 & 1) == 0)
  {
LABEL_12:
    v28 = 0;
    v65 = 0;
    v29 = 1;
    v30 = 1;
    goto LABEL_13;
  }
  v24 = v71;
  if (*(_QWORD *)(v71 + 16))
  {
    v25 = sub_10001A6DC(0x65766974616C6572, 0xEF74726F70707553);
    if ((v26 & 1) != 0)
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
    else
      v27 = 0;
    v30 = v26 ^ 1;
    v41 = *(_QWORD *)(v24 + 16);
    v65 = v27;
    if (v41)
    {
      v42 = sub_10001A6DC(0x6E656469666E6F63, 0xEA00000000006563);
      if ((v43 & 1) != 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v42);
        swift_bridgeObjectRelease();
        v29 = 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v65 = 0;
    v30 = 1;
  }
  swift_bridgeObjectRelease();
  v28 = 0;
  v29 = 1;
LABEL_13:
  v31 = (*(uint64_t (**)(uint64_t))(v17 + 32))(v23);
  if (!v31)
  {
    v75 = 0u;
    v76 = 0u;
    v35 = v66;
LABEL_23:
    sub_10000882C((uint64_t)&v75, (uint64_t *)&unk_10083D5B0);
    goto LABEL_36;
  }
  v32 = (void *)v31;
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v32, "valueForKey:", v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)(&v71, v34);
    swift_unknownObjectRelease(v34);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  v35 = v66;
  sub_1000A5CA8((uint64_t)&v71, (uint64_t)&v75, (uint64_t *)&unk_10083D5B0);
  if (!*((_QWORD *)&v76 + 1))
    goto LABEL_23;
  v36 = sub_10001A630(&qword_10083F1F0);
  if ((swift_dynamicCast(&v71, &v75, (char *)&type metadata for Any + 8, v36, 6) & 1) == 0)
    goto LABEL_36;
  v37 = v71;
  if (*(_QWORD *)(v71 + 16))
  {
    v38 = sub_10001A6DC(0x65766974616C6572, 0xEF74726F70707553);
    if ((v39 & 1) != 0)
      v40 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v38);
    else
      v40 = 0;
    v30 = v39 ^ 1;
    v44 = *(_QWORD *)(v37 + 16);
    v65 = v40;
    if (v44)
    {
      v45 = sub_10001A6DC(0x6E656469666E6F63, 0xEA00000000006563);
      if ((v46 & 1) != 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v45);
        swift_bridgeObjectRelease();
        v29 = 0;
        goto LABEL_36;
      }
    }
  }
  else
  {
    v65 = 0;
    v30 = 1;
  }
  swift_bridgeObjectRelease();
  v28 = 0;
  v29 = 1;
LABEL_36:
  v47 = v11;
  v48 = (uint64_t)v63;
  v47(v63, v35, v70);
  v49 = type metadata accessor for RDCoreBehaviorModel(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = sub_10042C018(v48, v65, v30 & 1, v28, v29);
  sub_100008868((uint64_t)v79, a1, (uint64_t *)&unk_10083F190);
  v51 = v69;
  *(_QWORD *)(a1 + 48) = v69;
  *(_BYTE *)(a1 + 56) = 0;
  v52 = v67;
  *(_QWORD *)(a1 + 64) = v67;
  v53 = v68;
  *(_BYTE *)(a1 + 72) = v68;
  *(_QWORD *)(a1 + 80) = v50;
  *(_BYTE *)(a1 + 88) = 0;
  sub_1001B9DB8(v51, 0);
  sub_1001B9DB8(v52, v53);
  sub_1001B9DB8((uint64_t)v50, 0);
  if (qword_100836EF8 != -1)
    swift_once(&qword_100836EF8, sub_1001B7834);
  v54 = type metadata accessor for Logger(0);
  sub_10001AAA8(v54, (uint64_t)qword_10083F090);
  v55 = sub_1001BA43C((uint64_t *)a1, (uint64_t)&v75);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    LODWORD(v65) = 0;
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v74 = v59;
    *(_DWORD *)v58 = 136446210;
    sub_1001BA43C((uint64_t *)&v75, (uint64_t)&v71);
    v60 = String.init<A>(describing:)(&v71, &type metadata for RDXPCSuggestedAttributesPerformer.MLModels);
    *(_QWORD *)&v71 = sub_10001A820(v60, v61, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
    swift_bridgeObjectRelease();
    sub_1001BA410(&v75);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Loaded MLModels {models: %{public}s}", v58, 0xCu);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    sub_1001B9E20((uint64_t)v50, v65);
  }
  else
  {

    sub_1001BA410(&v75);
    sub_1001B9E20((uint64_t)v50, 0);
  }
  sub_1001B9E20(v67, v68);
  sub_1001B9E20(v69, 0);
  sub_10000882C((uint64_t)v79, (uint64_t *)&unk_10083F190);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v66, v70);
}

uint64_t sub_1001B9130(unint64_t a1)
{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSString *v8;
  NSString *v9;
  uint64_t v10;
  NSString *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  char isUniquelyReferenced_nonNull_native;
  id v36;
  Swift::Int v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  id v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;

  v1 = a1;
  v69 = (uint64_t)_swiftEmptyDictionarySingleton;
  v2 = (void *)(a1 >> 62);
  if (a1 >> 62)
    goto LABEL_50;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  sub_10001A630(&qword_10083F210);
  Dictionary.reserveCapacity(_:)(v3);
  v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v5 = swift_allocObject(v4, 56, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006AAD80;
  v6 = objc_msgSend((id)objc_opt_self(CNContactFormatter), "descriptorForRequiredKeysForStyle:", 0);
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = CNContactPhoneNumbersKey;
  *(_QWORD *)(v5 + 48) = CNContactEmailAddressesKey;
  v68[0] = v5;
  specialized Array._endMutation()(v6);
  v66 = v68[0];
  if (v2)
  {
    if (v1 < 0)
      v10 = v1;
    else
      v10 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v11 = CNContactPhoneNumbersKey;
    v12 = CNContactEmailAddressesKey;
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    if (!v7)
      goto LABEL_46;
  }
  else
  {
    v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    v8 = CNContactPhoneNumbersKey;
    v9 = CNContactEmailAddressesKey;
    if (!v7)
    {
LABEL_46:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v69;
    }
  }
  if (v7 >= 1)
  {
    v13 = 0;
    v14 = (uint64_t *)(v65 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedContacts);
    v64 = v1;
    v15 = v1 & 0xC000000000000001;
    v16 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    v62 = v1 & 0xC000000000000001;
    v63 = v7;
    while (1)
    {
      if (v15)
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v1);
      else
        v17 = *(id *)(v1 + 8 * v13 + 32);
      v18 = v17;
      v19 = objc_msgSend(v17, v16[118]);
      if (!v19
        || (v20 = v19,
            v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19),
            v23 = v22,
            v20,
            sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr),
            (v24 = REMContactRepresentation.init(address:)(v21, v23)) == 0))
      {

        goto LABEL_13;
      }
      v2 = (void *)v24;
      swift_beginAccess(v14, v68, 32, 0);
      v25 = *v14;
      if (*(_QWORD *)(*v14 + 16))
      {
        v26 = v2;
        v27 = sub_1002C6C80((uint64_t)v26);
        if ((v28 & 1) != 0)
        {
          v29 = *(void **)(*(_QWORD *)(v25 + 56) + 8 * v27);
          swift_endAccess(v68);
          v30 = v29;

          if (v29)
            goto LABEL_26;

          v16 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
          goto LABEL_13;
        }

      }
      swift_endAccess(v68);
      v31 = CNContactStore.contact(matching:keysToFetch:)(v2, v66);
      if (v31)
      {
        v32 = (void *)v31;
        swift_beginAccess(v14, v68, 33, 0);
        v30 = v32;
        v33 = *v14;
        v34 = v2;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
        v67 = *v14;
        *v14 = 0x8000000000000000;
        sub_10028CE40((uint64_t)v32, v34, isUniquelyReferenced_nonNull_native);
        *v14 = v67;

        swift_bridgeObjectRelease();
        swift_endAccess(v68);
LABEL_26:
        v36 = v30;
        v1 = (uint64_t)objc_msgSend(v18, "objectID");
        v37 = v69;
        if ((v69 & 0xC000000000000001) != 0)
        {
          if (v69 < 0)
            v38 = v69;
          else
            v38 = v69 & 0xFFFFFFFFFFFFFF8;
          v39 = v36;
          v40 = __CocoaDictionary.count.getter(v38);
          if (__OFADD__(v40, 1))
            goto LABEL_48;
          v37 = sub_1001929C0(v38, v40 + 1);
        }
        else
        {
          v41 = v36;
        }
        v42 = swift_isUniquelyReferenced_nonNull_native(v37);
        v68[0] = v37;
        v69 = 0x8000000000000000;
        v44 = sub_1002C66DC(v1);
        v45 = *(_QWORD *)(v37 + 16);
        v46 = (v43 & 1) == 0;
        v47 = v45 + v46;
        if (__OFADD__(v45, v46))
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          if (v1 < 0)
            v60 = v1;
          else
            v60 = v1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v1);
          v3 = _CocoaArrayWrapper.endIndex.getter(v60);
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v48 = v43;
        if (*(_QWORD *)(v37 + 24) >= v47)
        {
          if ((v42 & 1) != 0)
          {
            v51 = (_QWORD *)v68[0];
            if ((v43 & 1) == 0)
              goto LABEL_43;
          }
          else
          {
            sub_1002D8374();
            v51 = (_QWORD *)v68[0];
            if ((v48 & 1) == 0)
              goto LABEL_43;
          }
        }
        else
        {
          sub_1002D0C78(v47, v42);
          v49 = sub_1002C66DC(v1);
          if ((v48 & 1) != (v50 & 1))
            goto LABEL_55;
          v44 = v49;
          v51 = (_QWORD *)v68[0];
          if ((v48 & 1) == 0)
          {
LABEL_43:
            v51[(v44 >> 6) + 8] |= 1 << v44;
            v54 = 8 * v44;
            *(_QWORD *)(v51[6] + v54) = v1;
            *(_QWORD *)(v51[7] + v54) = v36;
            v55 = v51[2];
            v56 = __OFADD__(v55, 1);
            v57 = v55 + 1;
            if (v56)
              goto LABEL_49;
            v51[2] = v57;
            v58 = (id)v1;
            goto LABEL_45;
          }
        }
        v52 = v51[7];
        v53 = 8 * v44;

        *(_QWORD *)(v52 + v53) = v36;
LABEL_45:
        v69 = (uint64_t)v51;

        swift_bridgeObjectRelease();
        v7 = v63;
        v1 = v64;
        v15 = v62;
        v16 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
        goto LABEL_13;
      }

      v16 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_13:
      if (v7 == ++v13)
        goto LABEL_46;
    }
  }
  __break(1u);
LABEL_55:
  v61 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v61);
  __break(1u);
  return result;
}

uint64_t sub_1001B9650@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  uint64_t result;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  NSString v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;

  v55 = a1;
  v52 = a2;
  v51 = sub_10001A630(&qword_10083F1F8);
  __chkstk_darwin(v51);
  v54 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_10083F200);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMTitleEmbeddingConfig(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v50 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v50 - v19;
  v22 = __chkstk_darwin(v21);
  v53 = (char *)&v50 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v6, v55, v3, v22);
  v24 = v58;
  REMTitleEmbeddingConfig.init(url:)(v6);
  if (v24)
  {
    swift_errorRelease(v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_10083F200);
    v25 = (void *)objc_opt_self(REMError);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "internalErrorWithDebugDescription:", v26);

    return swift_willThrow(v27);
  }
  v29 = v17;
  v58 = v20;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  v30 = v53;
  v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v53, v10, v11);
  v32 = REMTitleEmbeddingConfig.currentMethod.getter(v31);
  v33 = v54;
  REMTitleEmbeddingMethods.init(rawValue:)(v32);
  v34 = type metadata accessor for REMTitleEmbeddingMethods(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
  {
    v36 = (void *)objc_opt_self(REMError);
    v56 = 0;
    v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v37._object = (void *)0x80000001006FBF90;
    v37._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v37);
    v39._countAndFlagsBits = REMTitleEmbeddingConfig.currentMethod.getter(v38);
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 0xD000000000000021;
    v40._object = (void *)0x80000001006FBFB0;
    String.append(_:)(v40);
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "internalErrorWithDebugDescription:", v41, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v42);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v30, v11);
  }
  v43 = (*(uint64_t (**)(char *, uint64_t))(v35 + 88))(v33, v34);
  if (v43 == enum case for REMTitleEmbeddingMethods.Sentence2Vec(_:))
  {
    v44 = type metadata accessor for REMSentence2VecTitleEmbedding(0);
    v45 = v30;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v29, v30, v11);
    v46 = REMSentence2VecTitleEmbedding.__allocating_init(from:)(v29);
    v47 = &protocol witness table for REMSentence2VecTitleEmbedding;
    v48 = v52;
  }
  else
  {
    v45 = v30;
    if (v43 == enum case for REMTitleEmbeddingMethods.UniversalGrammar(_:))
    {
      v44 = type metadata accessor for REMUniversalGrammarTitleEmbedding(0);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v30, v11);
      v46 = REMUniversalGrammarTitleEmbedding.__allocating_init(from:)(v14);
      v48 = v52;
      v47 = &protocol witness table for REMUniversalGrammarTitleEmbedding;
    }
    else
    {
      v48 = v52;
      if (v43 != enum case for REMTitleEmbeddingMethods.FilteredStopWords(_:))
      {
        result = _diagnoseUnexpectedEnumCase<A>(type:)(v51, v51);
        __break(1u);
        return result;
      }
      v44 = type metadata accessor for REMFilteredTitleEmbedding(0);
      v49 = v58;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v30, v11);
      v46 = REMFilteredTitleEmbedding.__allocating_init(from:)(v49);
      v47 = &protocol witness table for REMFilteredTitleEmbedding;
    }
  }
  v48[3] = v44;
  v48[4] = (uint64_t)v47;
  *v48 = v46;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v45, v11);
}

uint64_t sub_1001B9B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE v14[40];

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for RDIntentClusterModel(0, v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  sub_100018618(a1, (uint64_t)v14);
  result = RDIntentClusterModel.__allocating_init(url:embedding:)(v11, v14);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1001B9C08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100428228();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001B9C44()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083F1A8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = PassthroughSubject.init()();
  qword_10083F0A8 = result;
  return result;
}

void sub_1001B9CB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "@";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1006AD5F0;
  sub_1001B9D64(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_1006AD608;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

void sub_1001B9D64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10083F188)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10083F188);
  }
}

uint64_t sub_1001B9DB8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_retain(a1);
}

uint64_t destroy for RDXPCSuggestedAttributesPerformer.MLModels(_QWORD *a1)
{
  if ((a1[5] & 1) != 0)
    swift_errorRelease(*a1);
  else
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  sub_1001B9E20(a1[6], *((_BYTE *)a1 + 56));
  sub_1001B9E20(a1[8], *((_BYTE *)a1 + 72));
  return sub_1001B9E20(a1[10], *((_BYTE *)a1 + 88));
}

uint64_t sub_1001B9E20(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_release(a1);
}

uint64_t initializeWithCopy for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v4 = *((_BYTE *)a2 + 40);
  if ((v4 & 1) != 0)
  {
    v5 = *a2;
    swift_errorRetain(*a2);
    *(_QWORD *)a1 = v5;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
  }
  *(_BYTE *)(a1 + 40) = v4;
  v7 = a2[6];
  v8 = *((_BYTE *)a2 + 56);
  sub_1001B9DB8(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = *((_BYTE *)a2 + 72);
  sub_1001B9DB8(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = *((_BYTE *)a2 + 88);
  sub_1001B9DB8(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  if ((uint64_t *)a1 != a2)
  {
    sub_10000882C(a1, (uint64_t *)&unk_10083F190);
    v4 = *((_BYTE *)a2 + 40);
    if ((v4 & 1) != 0)
    {
      v5 = *a2;
      swift_errorRetain(*a2);
      *(_QWORD *)a1 = v5;
    }
    else
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    *(_BYTE *)(a1 + 40) = v4;
  }
  v7 = a2[6];
  v8 = *((_BYTE *)a2 + 56);
  sub_1001B9DB8(v7, v8);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  sub_1001B9E20(v9, v10);
  v11 = a2[8];
  v12 = *((_BYTE *)a2 + 72);
  sub_1001B9DB8(v11, v12);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  sub_1001B9E20(v13, v14);
  v15 = a2[10];
  v16 = *((_BYTE *)a2 + 88);
  sub_1001B9DB8(v15, v16);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v16;
  sub_1001B9E20(v17, v18);
  return a1;
}

__n128 initializeWithTake for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    sub_10000882C(a1, (uint64_t *)&unk_10083F190);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v5;
  sub_1001B9E20(v6, v7);
  v8 = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v8;
  sub_1001B9E20(v9, v10);
  v11 = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v11;
  sub_1001B9E20(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCSuggestedAttributesPerformer.MLModels()
{
  return &type metadata for RDXPCSuggestedAttributesPerformer.MLModels;
}

uint64_t destroy for RDXPCSuggestedAttributesPerformer.ConfigurationSource(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for RDXPCSuggestedAttributesPerformer.ConfigurationSource(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v4 = *(_QWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 56) = v4;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for RDXPCSuggestedAttributesPerformer.ConfigurationSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  v11 = a2[6];
  v10 = a2[7];
  v12 = a1[7];
  a1[6] = v11;
  a1[7] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for RDSavedReminders(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDXPCSuggestedAttributesPerformer.ConfigurationSource(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = a2[3];
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedReminders(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedReminders(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCSuggestedAttributesPerformer.ConfigurationSource()
{
  return &type metadata for RDXPCSuggestedAttributesPerformer.ConfigurationSource;
}

uint64_t sub_1001BA3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083F1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1001BA410(_QWORD *a1)
{
  destroy for RDXPCSuggestedAttributesPerformer.MLModels(a1);
  return a1;
}

uint64_t sub_1001BA43C(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for RDXPCSuggestedAttributesPerformer.MLModels(a2, a1);
  return a2;
}

uint64_t sub_1001BA470@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1001B9B40(a1, *(_QWORD *)(v2 + 16), a2);
}

id sub_1001BA4C0(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4, uint64_t a5)
{
  if (*a3 != -1)
    swift_once(a3, a5);
  return *a4;
}

id sub_1001BA538()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDDispatchQueue_ObjC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDDispatchQueue_ObjC()
{
  return objc_opt_self(_TtC7remindd20RDDispatchQueue_ObjC);
}

uint64_t sub_1001BA588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000D30A4();
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_1001BAB10();
  v12 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v13 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001006FC0C0, v9, v6, v3, 0);
  qword_100871CC8 = result;
  return result;
}

NSObject *sub_1001BA718()
{
  NSObject *result;

  result = rd_dispatch_workloop_create("com.apple.remindd.xpc.default");
  qword_100871CD0 = (uint64_t)result;
  return result;
}

NSObject *sub_1001BA744()
{
  NSObject *result;

  result = rd_dispatch_workloop_create("com.apple.remindd.xpc.notification");
  qword_100871CD8 = (uint64_t)result;
  return result;
}

uint64_t sub_1001BA770()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D30A4();
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_1001BAB10();
  v12 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v13 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x80000001006FC0E0, v5, v2, v9, 0);
  qword_100871CE0 = result;
  return result;
}

uint64_t sub_1001BA8F8(uint64_t a1)
{
  return sub_1001BA950(a1, (void (*)(void))&static DispatchQoS.utility.getter, 0xD000000000000019, 0x80000001006FC120, &qword_100871CE8);
}

uint64_t sub_1001BA924(uint64_t a1)
{
  return sub_1001BA950(a1, (void (*)(void))&static DispatchQoS.background.getter, 0xD00000000000001CLL, 0x80000001006FC080, &qword_100871CF0);
}

uint64_t sub_1001BA950(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;

  v24 = a4;
  v25 = a5;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D30A4();
  a2();
  v26 = _swiftEmptyArrayStorage;
  v17 = sub_1001BAB10();
  v18 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v19 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v18, v19, v11, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  if (qword_100836F38 != -1)
    swift_once(&qword_100836F38, sub_1001BABA4);
  v20 = qword_100871CF8;
  v21 = (id)qword_100871CF8;
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a3, v24, v16, v13, v10, v20);
  *v25 = result;
  return result;
}

unint64_t sub_1001BAB10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A990;
  if (!qword_10083A990)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10083A990);
  }
  return result;
}

unint64_t sub_1001BAB58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A9A0;
  if (!qword_10083A9A0)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083DBD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083A9A0);
  }
  return result;
}

NSObject *sub_1001BABA4()
{
  NSObject *result;

  result = rd_dispatch_workloop_create("com.apple.remindd.discretionary");
  qword_100871CF8 = (uint64_t)result;
  return result;
}

uint64_t sub_1001BABD0(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  void *object;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;

  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000D30A4();
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v24);
  v23 = (_QWORD *)0xD000000000000019;
  v24 = 0x80000001006FC100;
  v22 = a1;
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14 = v23;
  v15 = v24;
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_1001BAB10();
  v18 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v19 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v14, v15, v11, v8, v5, 0);
}

uint64_t sub_1001BADBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F240);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F240);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t type metadata accessor for RDAlarmCoreSuggestionsConsumer()
{
  return objc_opt_self(_TtC7remindd30RDAlarmCoreSuggestionsConsumer);
}

double sub_1001BAE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  double result;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;

  v2 = v1;
  if (qword_100836F40 != -1)
    swift_once(&qword_100836F40, sub_1001BADBC);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10083F240);
  swift_bridgeObjectRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v27 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDAlarmCoreSuggestionsConsumer consume %ld producerAlarms", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v9 = _swiftEmptyArrayStorage;
  v27 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v25 = v2;
    sub_100017004();
    v26 = (id)objc_opt_self(REMList);
    swift_bridgeObjectRetain(a1);
    v11 = (unsigned __int8 *)(a1 + 64);
    do
    {
      v14 = (void *)*((_QWORD *)v11 - 3);
      v15 = *((_QWORD *)v11 - 2);
      v16 = *((_QWORD *)v11 - 1);
      LODWORD(v13) = *v11;
      v17 = *((id *)v11 - 4);
      sub_1001BB164(v14, v15, v16, v13);
      v18 = objc_msgSend(v17, "list");
      v19 = objc_msgSend(v18, "objectID");

      v20 = objc_msgSend(v26, "siriFoundInAppsListID");
      v21 = static NSObject.== infix(_:_:)(v19);

      if ((v21 & 1) != 0 && !(_DWORD)v13)
      {
        v13 = v17;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v23 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v22 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v23 >= v22 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v13);
        specialized Array._endMutation()(v12);
        LOBYTE(v13) = 0;
      }
      v11 += 40;

      sub_1001BB1AC(v14, v15, v16, (char)v13);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v9 = (_QWORD *)v27;
    v2 = v25;
  }
  sub_10000A388((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40));
  sub_100339CD4((uint64_t)v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1001BB144(uint64_t a1)
{
  return sub_1001BAE6C(a1);
}

id sub_1001BB164(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  id v5;

  if (a4 < 3u || a4 == 4)
    return result;
  if (a4 == 3)
  {
    v5 = result;
    swift_bridgeObjectRetain(a3);
    return v5;
  }
  return result;
}

void sub_1001BB1AC(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 4:

      break;
    case 3:

      swift_bridgeObjectRelease(a3);
      break;
    default:
      return;
  }
}

id sub_1001BB200@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "smartList");
  *a2 = result;
  return result;
}

id sub_1001BB238(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setSmartList:", *a1);
}

uint64_t sub_1001BB24C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[48];
  _QWORD *v60;
  _QWORD *v61;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - v9;
  v61 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    KeyPath = swift_getKeyPath(&unk_1006AD6F8);
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v56 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v56 = a1;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v56);
      sub_1001BC180((id)a1, a2);
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v60 = _swiftEmptyArrayStorage;
      result = sub_1001C1BB8(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
        __break(1u);
        return result;
      }
      v58 = KeyPath;
      v23 = 0;
      v21 = v60;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a1);
        else
          v24 = *(id *)(a1 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v27 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 0, 1, v27);

        v60 = v21;
        v29 = v21[2];
        v28 = v21[3];
        if (v29 >= v28 >> 1)
        {
          sub_1001C1BB8(v28 > 1, v29 + 1, 1);
          v21 = v60;
        }
        ++v23;
        v21[2] = v29 + 1;
        sub_1000F2CE4((uint64_t)v7, (uint64_t)v21+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v29);
      }
      while (v20 != v23);
      KeyPath = v58;
    }
    v30 = sub_10033F5F0(KeyPath, (uint64_t)v21);
    v31 = swift_release(KeyPath);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
    v33 = v61[2];
    v32 = v61[3];
    if (v33 >= v32 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1);
    v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
    specialized Array._endMutation()(v34);
  }
  else
  {
    v11 = swift_getKeyPath(&unk_1006AD858);
    v12 = objc_msgSend((id)a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
    v14 = sub_1002E7B5C(v11, (uint64_t)v10);
    v15 = swift_release(v11);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
    v17 = v61[2];
    v16 = v61[3];
    if (v17 >= v16 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
    v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
    specialized Array._endMutation()(v18);
    sub_1001BC180((id)a1, a2);
    if ((a2 & 1) == 0)
      goto LABEL_26;
  }
  v35 = sub_10001CC08(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = v61[2];
  v36 = v61[3];
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
  specialized Array._endMutation()(v38);
  v39 = sub_10001A630(&qword_10083F2F8);
  inited = swift_initStackObject(v39, v59);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  v41 = swift_getKeyPath(&unk_1006AD730);
  v42 = sub_10033F604(v41);
  swift_release(v41);
  *(_QWORD *)(inited + 32) = v42;
  v43 = swift_getKeyPath(&unk_1006AD780);
  v44 = sub_10033F628(v43);
  v45 = swift_release(v43);
  *(_QWORD *)(inited + 40) = v44;
  v60 = (_QWORD *)inited;
  specialized Array._endMutation()(v45);
  v46 = sub_10001CC54(v60);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = v61[2];
  v47 = v61[3];
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
  specialized Array._endMutation()(v49);
LABEL_26:
  v50 = swift_getKeyPath(&unk_1006AD7E8);
  v51 = sub_10033F628(v50);
  v52 = swift_release(v50);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
  v54 = v61[2];
  v53 = v61[3];
  if (v54 >= v53 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1);
  v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
  specialized Array._endMutation()(v55);
  return sub_10000D2BC(v61);
}

uint64_t sub_1001BB6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006AD730);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100871D00 = v1;
  return result;
}

uint64_t sub_1001BB774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  sub_1001A54DC();
  KeyPath = swift_getKeyPath(&unk_1006AD8B0);
  *(_QWORD *)(v1 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  v3 = swift_getKeyPath(&unk_1006AD6F8);
  v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v3, 1);
  *(_QWORD *)(v1 + 40) = v4;
  result = specialized Array._endMutation()(v4);
  qword_100871D08 = v1;
  return result;
}

void sub_1001BB810()
{
  sub_1001C1B0C(0, 5, 0);
  __asm { BR              X10; loc_1001BB8F8 }
}

uint64_t sub_1001BBCA0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19[40];

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v0, v19);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006AD730);
  *(_QWORD *)(inited + 32) = KeyPath;
  v17 = inited;
  specialized Array._endMutation()(KeyPath);
  if ((inited & 0xC000000000000001) != 0)
  {
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
    v4 = v3;
  }
  else
  {
    v4 = *(_QWORD *)(v17 + 32);
    v3 = swift_retain();
  }
  v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v3);
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    swift_release(v4);
    v9 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      v9 = sub_1002C8224(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
    v11 = v9[2];
    v10 = v9[3];
    if (v11 >= v10 >> 1)
      v9 = sub_1002C8224((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
    v9[2] = v11 + 1;
    v12 = &v9[2 * v11];
    v12[4] = v7;
    v12[5] = v8;
    swift_bridgeObjectRelease(inited);
    return (uint64_t)v9;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001006F8C10;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    v16 = v4;
    v15 = sub_10001A630(&qword_10083F300);
    _print_unlocked<A, B>(_:_:)(&v16, &v17, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17, v18, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BBE78(uint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;

  v9 = (void *)sub_1001BB24C(a1, a2);
  v10 = type metadata accessor for REMCDSmartListSection();
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (isa)
  {
    v14 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v14).n128_u64[0];
  }
  objc_msgSend(v11, "setPropertiesToFetch:", isa, v13);

  if (a6)
    a6 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setRelationshipKeyPathsForPrefetching:", a6);

  if (a4)
  {
    sub_1001A54DC();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v11, "setSortDescriptors:", a4);

  v15 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  return v15;
}

uint64_t sub_1001BC024@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1001BC050(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

const char *sub_1001BC084()
{
  return "smartList";
}

id sub_1001BC090@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "smartList");
  *a2 = result;
  return result;
}

id sub_1001BC0C8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setSmartList:", *a1);
}

id sub_1001BC0DC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001BC10C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

id sub_1001BC120@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1001BC158(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

const char *sub_1001BC16C()
{
  return "inactive";
}

void sub_1001BC180(id a1, char a2)
{
  if (a2 < 0)
    swift_bridgeObjectRelease(a1);
  else

}

uint64_t sub_1001BC194@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1001BC1C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setCreationDate_);
}

int32x4_t *sub_1001BC1F4(unint64_t a1, int32x2_t a2)
{
  int32x4_t *result;
  __int32 *i32;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = (int32x4_t *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a1)
    return (int32x4_t *)&_swiftEmptyArrayStorage;
  result = (int32x4_t *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Float);
  result[1].i64[0] = a1;
  i32 = result[2].i32;
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *i32++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  i32 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = result + 3;
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

char *sub_1001BC2E4(unint64_t a1, double a2)
{
  char *result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = (char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a1)
    return (char *)&_swiftEmptyArrayStorage;
  result = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Double);
  *((_QWORD *)result + 2) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t static REMGroceryClassifier.modelBaseLocale(for:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for REMGroceryDummyModel(0);
  return static REMGroceryDummyModel.modelBaseLocale(for:)(a1, a2);
}

_QWORD *static REMGroceryClassifier.intelligentCategoryNamesFromTrial(localeIdentifier:includeMisc:removeDuplicate:)(uint64_t a1, unint64_t a2, int a3, int a4)
{
  return sub_1001C6154(a1, a2, a3, a4);
}

uint64_t static REMGroceryClassifier.isSupported(localeIdentifier:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for REMGroceryDummyModel(0);
  return static REMGroceryDummyModel.isSupported(localeIdentifier:)(a1, a2) & 1;
}

uint64_t sub_1001BC484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F308);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F308);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t REMGroceryModelType.modelFileName.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_1001BC53C + 4 * byte_1006AD8E0[a1]))(0, 0);
}

unint64_t sub_1001BC53C()
{
  return 0xD000000000000014;
}

uint64_t REMGroceryModelType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BC5D8 + 4 * byte_1006AD8E5[a1]))(1953654114, 0xE400000000000000);
}

uint64_t sub_1001BC5D8()
{
  return 0x6465726F68636E61;
}

uint64_t sub_1001BC5FC()
{
  return 0x7865676572;
}

uint64_t sub_1001BC610()
{
  return 0x796D6D7564;
}

uint64_t sub_1001BC624()
{
  return 0x6C774F69726973;
}

uint64_t REMGroceryModelType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_1001BC648@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7remindd19REMGroceryModelTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001BC670(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t REMGroceryClassifierLoadingError.msg.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  return a2;
}

uint64_t sub_1001BC6AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BC6E0 + 4 * byte_1006AD8EA[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

unint64_t sub_1001BC6E0()
{
  return 0xD000000000000010;
}

uint64_t sub_1001BC828(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BC85C + 4 * byte_1006AD8F8[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_1001BC85C()
{
  return 0x7079546C65646F6DLL;
}

uint64_t sub_1001BC878()
{
  return 0x6E656B6F5478616DLL;
}

uint64_t sub_1001BC89C()
{
  return 0x6C6F687365726874;
}

uint64_t sub_1001BC8B8()
{
  return 1315991412;
}

uint64_t sub_1001BC8C8()
{
  return 0x69726F6765746163;
}

unint64_t sub_1001BC8E8()
{
  return 0xD000000000000019;
}

unint64_t sub_1001BC904()
{
  return 0xD000000000000022;
}

uint64_t sub_1001BC924()
{
  return 0x6C6E4F6969637361;
}

unint64_t sub_1001BC944()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F6973726576;
  if (*v0 != 1)
    v1 = 0x6974636572726F63;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1001BC9AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C69E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001BC9D0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1001BC9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CAD7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BCA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CAD7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001BCA2C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001C6B50(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1001BCA58()
{
  unsigned __int8 *v0;

  return sub_1001BC6AC(*v0);
}

uint64_t sub_1001BCA60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C6CEC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001BCA84(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1001BCA90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CB92C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BCAB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CB92C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001BCAE0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;

  sub_1001C726C(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_WORD *)(a2 + 112) = v14;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9;
    v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t sub_1001BCB44()
{
  unsigned __int8 *v0;

  return sub_1001BC828(*v0);
}

uint64_t sub_1001BCB4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C7A18(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001BCB70(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1001BCB7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CB9C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BCBA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CB9C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1001BCBCC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  char v7;

  sub_1001C7DDC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

char *static REMGroceryClassifier.fromTrial(localeIdentifier:client:)(uint64_t a1, void (*a2)(char *, uint64_t), char *a3)
{
  return sub_1001C9B14(a1, a2, a3);
}

void sub_1001BCC34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1001BCC94(uint64_t a1, uint64_t a2, void *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  const char *v33;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  NSObject *oslog;
  uint64_t v51;
  uint64_t v52;

  if (a2)
  {
    if (qword_100836F58 != -1)
      swift_once(&qword_100836F58, sub_1001BC484);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_10083F308);
    v11 = a3;
    swift_errorRetain(a2);
    v12 = v11;
    v13 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      v17 = swift_slowAlloc(32, -1);
      v52 = v17;
      *(_DWORD *)v15 = 136315394;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v51 = sub_10001A820(v18, v19, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      swift_errorRetain(a2);
      v20 = _swift_stdlib_bridgeErrorToNSError(a2);
      v51 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v16 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, a7, (uint8_t *)v15, 0x16u);
      v21 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v16, 1, v21);
      swift_slowDealloc(v16, -1, -1);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      return;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);
    goto LABEL_27;
  }
  if (a1)
  {
    if (a1 == 2)
    {
      if (qword_100836F58 != -1)
        swift_once(&qword_100836F58, sub_1001BC484);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_10083F308);
      oslog = a3;
      v25 = Logger.logObject.getter(oslog);
      v36 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v36))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v52 = v28;
        *(_DWORD *)v27 = 136315138;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(oslog);
        v51 = sub_10001A820(v37, v38, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

        swift_bridgeObjectRelease();
        v31 = v25;
        v32 = v36;
        v33 = a5;
        goto LABEL_18;
      }
      goto LABEL_24;
    }
    if (a1 == 1)
    {
      if (qword_100836F58 != -1)
        swift_once(&qword_100836F58, sub_1001BC484);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10083F308);
      oslog = a3;
      v25 = Logger.logObject.getter(oslog);
      v26 = static os_log_type_t.info.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v52 = v28;
        *(_DWORD *)v27 = 136315138;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(oslog);
        v51 = sub_10001A820(v29, v30, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

        swift_bridgeObjectRelease();
        v31 = v25;
        v32 = v26;
        v33 = a4;
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v31, v32, v33, v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        return;
      }
LABEL_24:

LABEL_26:
LABEL_27:

      return;
    }
    if (qword_100836F58 != -1)
      swift_once(&qword_100836F58, sub_1001BC484);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_10083F308);
    oslog = a3;
    v41 = Logger.logObject.getter(oslog);
    v42 = static os_log_type_t.error.getter(v41);
    if (!os_log_type_enabled(v41, v42))
    {

      goto LABEL_26;
    }
    v43 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(64, -1);
    v52 = v44;
    *(_DWORD *)v43 = 136315394;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(oslog);
    v51 = sub_10001A820(v45, v46, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    v51 = a1;
    type metadata accessor for AssetsResult(0);
    v48 = String.init<A>(describing:)(&v51, v47);
    v51 = sub_10001A820(v48, v49, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, a6, (uint8_t *)v43, 0x16u);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
}

uint64_t REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  *(_QWORD *)(v9 + 376) = v14;
  *(_QWORD *)(v9 + 384) = v8;
  *(_BYTE *)(v9 + 65) = v17;
  *(_BYTE *)(v9 + 59) = v16;
  *(_BYTE *)(v9 + 58) = v15;
  *(_QWORD *)(v9 + 360) = a7;
  *(_QWORD *)(v9 + 368) = a8;
  *(_QWORD *)(v9 + 344) = a4;
  *(_QWORD *)(v9 + 352) = a6;
  *(_BYTE *)(v9 + 57) = a5;
  *(_QWORD *)(v9 + 328) = a2;
  *(_QWORD *)(v9 + 336) = a3;
  *(_QWORD *)(v9 + 320) = a1;
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v9 + 392) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 400) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 408) = swift_task_alloc(v12);
  *(_QWORD *)(v9 + 416) = swift_task_alloc(v12);
  return swift_task_switch(sub_1001BD3E0, 0, 0);
}

void sub_1001BD3E0()
{
  uint64_t v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  Class isa;
  NSString v39;
  uint64_t v40;
  int32x2_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  int32x4_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  os_log_type_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91[3];

  v1 = (__int128 *)(v0 + 72);
  v89 = v0 + 272;
  if (qword_100836F58 != -1)
    swift_once(&qword_100836F58, sub_1001BC484);
  v2 = (_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 424) = sub_10001AAA8(v5, (uint64_t)qword_10083F308);
  swift_bridgeObjectRetain_n(v3, 2);
  v6 = swift_bridgeObjectRetain_n(v4, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v87 = *(unsigned __int8 *)(v0 + 65);
    v85 = *(unsigned __int8 *)(v0 + 59);
    v84 = *(unsigned __int8 *)(v0 + 58);
    v81 = *(_QWORD *)(v0 + 352);
    v82 = *(_QWORD *)(v0 + 360);
    v80 = *(_BYTE *)(v0 + 57);
    v9 = *(_QWORD *)(v0 + 336);
    v79 = *(_QWORD *)(v0 + 344);
    v88 = v8;
    v10 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 328);
    v83 = v3;
    v12 = swift_slowAlloc(60, -1);
    v86 = swift_slowAlloc(128, -1);
    v91[0] = v86;
    *(_DWORD *)v12 = 136316674;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 272) = sub_10001A820(v10, v11, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v89, v0 + 280);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v12 + 12) = 2080;
    *(_DWORD *)(v0 + 60) = v9;
    *(_BYTE *)(v0 + 64) = BYTE4(v9) & 1;
    v13 = sub_10001A630(&qword_10083F358);
    v14 = Optional.descriptionOrNil.getter(v13);
    *(_QWORD *)(v0 + 288) = sub_10001A820(v14, v15, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    *(_QWORD *)(v0 + 216) = v79;
    *(_BYTE *)(v0 + 224) = v80 & 1;
    v16 = sub_10001A630(&qword_10083F360);
    v17 = Optional.descriptionOrNil.getter(v16);
    *(_QWORD *)(v0 + 304) = sub_10001A820(v17, v18, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 32) = 2080;
    v1 = (__int128 *)(v0 + 72);
    *(_QWORD *)(v0 + 200) = v81;
    *(_QWORD *)(v0 + 208) = v82;
    v19 = sub_10001A630((uint64_t *)&unk_10083A370);
    v20 = Optional.descriptionOrNil.getter(v19);
    *(_QWORD *)(v0 + 280) = sub_10001A820(v20, v21, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v83, 2);
    *(_WORD *)(v12 + 42) = 1024;
    *(_DWORD *)(v0 + 68) = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 68, v0 + 72);
    *(_WORD *)(v12 + 48) = 1024;
    *(_DWORD *)(v0 + 228) = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 228, v0 + 232);
    *(_WORD *)(v12 + 54) = 1024;
    *(_DWORD *)(v0 + 536) = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 540);
    _os_log_impl((void *)&_mh_execute_header, v7, v88, "REMGroceryClassifier predicting {title: %s, threshold: %s, topN: %s, localeReason: %s, withGlobalCorrections: %{BOOL}d, includeMisc: %{BOOL}d, shouldPostGroceryPredictionAnalytics: %{BOOL}d}", (uint8_t *)v12, 0x3Cu);
    swift_arrayDestroy(v86, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
    swift_bridgeObjectRelease_n(v3, 2);

  }
  v23 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 328);
  Date.init()(v22);
  v25 = sub_1001BEB1C(v23, v24);
  *(_QWORD *)(v0 + 432) = v25;
  *(_QWORD *)(v0 + 440) = v26;
  v28 = sub_1001BED08(v25, v26, v27);
  v30 = v29;
  *(_QWORD *)(v0 + 448) = v28;
  *(_QWORD *)(v0 + 456) = v29;
  v31 = objc_msgSend(objc_allocWithZone((Class)NLTokenizer), "initWithUnit:", 0);
  *(_QWORD *)(v0 + 464) = v31;
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v31, "setString:", v32);

  v33 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v33 = v28;
  v34 = 7;
  if (((v30 >> 60) & ((v28 & 0x800000000000000) == 0)) != 0)
    v34 = 11;
  v35 = NLTokenizer.tokens(for:)(15, v34 | (v33 << 16));
  swift_bridgeObjectRetain(v30);
  sub_1001C5BD0(v35, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 296) = _swiftEmptyArrayStorage;
  v37 = (void *)objc_opt_self(REMOVSChecker);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39 = String._bridgeToObjectiveC()();
  LODWORD(v37) = objc_msgSend(v37, "profanityInTokens:forLocaleIdentifier:", isa, v39);

  if ((_DWORD)v37)
  {
    v42 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.info.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMGroceryClassifier predict func triggered profanity", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    *v2 = _swiftEmptyArrayStorage;
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 384);
    if ((*(_QWORD *)(v0 + 336) & 0x100000000) != 0)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v45 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_thresholds));
    }
    else
    {
      v41.i32[0] = *(_QWORD *)(v0 + 336);
      v46 = sub_1001BC1F4(*(_QWORD *)(*(_QWORD *)(v45 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels) + 16), v41);
      v45 = *(_QWORD *)(v0 + 384);
    }
    *(_QWORD *)(v0 + 472) = v46;
    v47 = *(_QWORD *)(v45 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_models);
    *(_QWORD *)(v0 + 480) = v47;
    v48 = *(_QWORD *)(v45 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
    *(_QWORD *)(v0 + 488) = v48;
    v49 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v0 + 496) = v49;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    if (v49)
    {
      *(_QWORD *)(v0 + 504) = 0;
      if (!*(_QWORD *)(v47 + 16))
      {
        __break(1u);
        return;
      }
      sub_100018618(v47 + 32, (uint64_t)v1);
      if (*(_QWORD *)(v48 + 16))
      {
        v50 = *(_BYTE *)(*(_QWORD *)(v0 + 488) + 32);
        *(_BYTE *)(v0 + 66) = v50;
        sub_10001BCA8(v1, v0 + 16);
        *(_BYTE *)(v0 + 56) = v50;
        sub_10001BCA8((__int128 *)(v0 + 16), v0 + 112);
        v51 = *(_QWORD *)(v0 + 136);
        v52 = *(_QWORD *)(v0 + 144);
        sub_10000A388((_QWORD *)(v0 + 112), v51);
        v53 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of REMGroceryModel.predict(_:thresholds:)[1]);
        *(_QWORD *)(v0 + 512) = v53;
        *v53 = v0;
        v53[1] = sub_1001BDDF4;
        dispatch thunk of REMGroceryModel.predict(_:thresholds:)(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 472), v51, v52);
        return;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = *(_QWORD **)(v0 + 296);
  }
  v54 = v0 + 176;
  v55 = swift_bridgeObjectRetain_n(v36, 2);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.info.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v91[0] = v59;
    *(_DWORD *)v58 = 136315138;
    v60 = Array.description.getter(v36, &type metadata for REMGroceryClassifier.PredictionResult);
    *(_QWORD *)(v0 + 264) = sub_10001A820(v60, v61, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v89);
    v54 = v0 + 176;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v36, 2);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v58, 0xCu);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    v62 = v59;
    v2 = (_QWORD *)(v0 + 296);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v36, 2);
  }

  v63 = *(_BYTE *)(v0 + 57);
  swift_beginAccess(v2, v54, 0, 0);
  if ((v63 & 1) != 0)
    v64 = (uint64_t *)(*(_QWORD *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
  else
    v64 = (uint64_t *)(v0 + 344);
  v65 = *(_QWORD *)(v0 + 416);
  v66 = *(_QWORD *)(v0 + 400);
  v67 = *(_QWORD *)(v0 + 408);
  v68 = *(_QWORD *)(v0 + 392);
  v90 = sub_1001BEEA0(*(_QWORD **)(v0 + 296), *(unsigned __int8 *)(v0 + 59), *v64, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(unsigned __int8 *)(v0 + 58), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_BYTE *)(v0 + 65));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Date.init()(v69);
  v70 = Date.timeIntervalSince(_:)(v65);
  v71 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 8);
  v72 = v71(v67, v68);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.info.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v75 = 134217984;
    *(double *)(v0 + 256) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "REMGroceryClassifier model prediction time: %f", v75, 0xCu);
    swift_slowDealloc(v75, -1, -1);
  }
  v77 = *(_QWORD *)(v0 + 408);
  v76 = *(_QWORD *)(v0 + 416);
  v78 = *(_QWORD *)(v0 + 392);

  v71(v76, v78);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  (*(void (**)(_QWORD *))(v0 + 8))(v90);
}

uint64_t sub_1001BDDF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 512);
  *(_QWORD *)(v3 + 520) = a1;
  *(_QWORD *)(v3 + 528) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1001BE4AC;
  else
    v5 = sub_1001BDE64;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001BDE64()
{
  uint64_t v0;
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = (_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 520) + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    *(_QWORD *)(v0 + 240) = _swiftEmptyArrayStorage;
    sub_1001C20C0(0, v2, 0);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v1 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
  {
    v4 = *(_QWORD *)(v0 + 496);
    v5 = *(_QWORD *)(v0 + 504) + 1;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 112));
    if (v5 == v4)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(_QWORD **)(v0 + 296);
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(v0 + 504) + 1;
    *(_QWORD *)(v0 + 504) = v6;
    v7 = *(_QWORD *)(v0 + 480);
    if (v6 >= *(_QWORD *)(v7 + 16))
    {
      __break(1u);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 488);
      sub_100018618(v7 + 40 * v6 + 32, v0 + 72);
      v9 = *(_QWORD *)(v8 + 16);
      if (v6 == v9)
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 72));
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      if (v6 < v9)
      {
        v43 = *(_BYTE *)(*(_QWORD *)(v0 + 488) + v6 + 32);
        *(_BYTE *)(v0 + 66) = v43;
        sub_10001BCA8((__int128 *)(v0 + 72), v0 + 16);
        *(_BYTE *)(v0 + 56) = v43;
        sub_10001BCA8((__int128 *)(v0 + 16), v0 + 112);
        v44 = *(_QWORD *)(v0 + 136);
        v45 = *(_QWORD *)(v0 + 144);
        sub_10000A388((_QWORD *)(v0 + 112), v44);
        v46 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of REMGroceryModel.predict(_:thresholds:)[1]);
        *(_QWORD *)(v0 + 512) = v46;
        *v46 = v0;
        v46[1] = sub_1001BDDF4;
        return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 472), v44, v45);
      }
    }
    __break(1u);
    JUMPOUT(0x1001BE498);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 112));
LABEL_11:
  v10 = v0 + 176;
  v11 = swift_bridgeObjectRetain_n(v3, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  v49 = v0 + 264;
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v50 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = Array.description.getter(v3, &type metadata for REMGroceryClassifier.PredictionResult);
    *(_QWORD *)(v48 + 264) = sub_10001A820(v16, v17, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v48 + 272);
    v10 = v0 + 176;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v3, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v18 = v15;
    v1 = v47;
    v0 = v48;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v3, 2);
  }

  v19 = *(_BYTE *)(v0 + 57);
  swift_beginAccess(v1, v10, 0, 0);
  v20 = *(_QWORD **)(v0 + 296);
  if ((v19 & 1) != 0)
    v21 = (uint64_t *)(*(_QWORD *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
  else
    v21 = (uint64_t *)(v0 + 344);
  v22 = *v21;
  v23 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 456);
  v25 = *(_QWORD *)(v0 + 432);
  v26 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 416);
  v28 = *(_QWORD *)(v48 + 408);
  v29 = *(_QWORD *)(v48 + 400);
  v30 = *(_QWORD *)(v48 + 392);
  v31 = sub_1001BEEA0(v20, *(unsigned __int8 *)(v48 + 59), v22, *(_QWORD *)(v48 + 352), *(_QWORD *)(v48 + 360), *(_QWORD *)(v48 + 368), *(_QWORD *)(v48 + 376), *(unsigned __int8 *)(v48 + 58), v25, v26, v23, v24, *(_BYTE *)(v48 + 65));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Date.init()(v32);
  v33 = Date.timeIntervalSince(_:)(v27);
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
  v35 = v34(v28, v30);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v38 = 134217984;
    *(double *)(v48 + 256) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v48 + 256, v49);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "REMGroceryClassifier model prediction time: %f", v38, 0xCu);
    swift_slowDealloc(v38, -1, -1);
  }
  v40 = *(_QWORD *)(v48 + 408);
  v39 = *(_QWORD *)(v48 + 416);
  v41 = *(_QWORD *)(v48 + 392);

  v34(v39, v41);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(_QWORD *))(v48 + 8))(v31);
}

uint64_t sub_1001BE4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 528);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 66);
    v6 = (_DWORD *)swift_slowAlloc(22, -1);
    *(_QWORD *)(v0 + 248) = swift_slowAlloc(64, -1);
    *v6 = 136315394;
    __asm { BR              X9 }
  }
  v7 = *(_QWORD *)(v0 + 528);
  swift_errorRelease(v7);
  swift_errorRelease(v7);
  swift_errorRelease(v7);

  v8 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 504) + 1;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 112));
  if (v9 != v8)
  {
    v10 = *(_QWORD *)(v0 + 504) + 1;
    *(_QWORD *)(v0 + 504) = v10;
    v11 = *(_QWORD *)(v0 + 480);
    if (v10 >= *(_QWORD *)(v11 + 16))
    {
      __break(1u);
    }
    else
    {
      v12 = *(_QWORD *)(v0 + 488);
      sub_100018618(v11 + 40 * v10 + 32, v0 + 72);
      v13 = *(_QWORD *)(v12 + 16);
      if (v10 == v13)
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 72));
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      if (v10 < v13)
      {
        v41 = *(_BYTE *)(*(_QWORD *)(v0 + 488) + v10 + 32);
        *(_BYTE *)(v0 + 66) = v41;
        sub_10001BCA8((__int128 *)(v0 + 72), v0 + 16);
        *(_BYTE *)(v0 + 56) = v41;
        sub_10001BCA8((__int128 *)(v0 + 16), v0 + 112);
        v42 = *(_QWORD *)(v0 + 136);
        v43 = *(_QWORD *)(v0 + 144);
        sub_10000A388((_QWORD *)(v0 + 112), v42);
        v44 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of REMGroceryModel.predict(_:thresholds:)[1]);
        *(_QWORD *)(v0 + 512) = v44;
        *v44 = v0;
        v44[1] = sub_1001BDDF4;
        return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 472), v42, v43);
      }
    }
    __break(1u);
    JUMPOUT(0x1001BEB08);
  }
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  v14 = v0 + 176;
  v15 = v0 + 296;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v0 + 296);
  v17 = swift_bridgeObjectRetain_n(v16, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v46 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = Array.description.getter(v16, &type metadata for REMGroceryClassifier.PredictionResult);
    *(_QWORD *)(v0 + 264) = sub_10001A820(v22, v23, &v46);
    v14 = v0 + 176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272);
    v15 = v0 + 296;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v16, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }

  v24 = *(_BYTE *)(v0 + 57);
  swift_beginAccess(v15, v14, 0, 0);
  if ((v24 & 1) != 0)
    v25 = (uint64_t *)(*(_QWORD *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
  else
    v25 = (uint64_t *)(v0 + 344);
  v26 = *(_QWORD *)(v0 + 416);
  v27 = *(_QWORD *)(v0 + 400);
  v28 = *(_QWORD *)(v0 + 408);
  v29 = *(_QWORD *)(v0 + 392);
  v45 = sub_1001BEEA0(*(_QWORD **)(v0 + 296), *(unsigned __int8 *)(v0 + 59), *v25, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(unsigned __int8 *)(v0 + 58), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_BYTE *)(v0 + 65));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Date.init()(v30);
  v31 = Date.timeIntervalSince(_:)(v26);
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  v33 = v32(v28, v29);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v36 = 134217984;
    *(double *)(v0 + 256) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "REMGroceryClassifier model prediction time: %f", v36, 0xCu);
    swift_slowDealloc(v36, -1, -1);
  }
  v38 = *(_QWORD *)(v0 + 408);
  v37 = *(_QWORD *)(v0 + 416);
  v39 = *(_QWORD *)(v0 + 392);

  v32(v37, v39);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v45);
}

uint64_t sub_1001BEB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  NSString rawValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[3];

  v5 = type metadata accessor for CharacterSet(0);
  v25 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale.Components(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale;
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
  v15 = *(_QWORD *)(v13 + 8);
  v16 = swift_bridgeObjectRetain(v15);
  Locale.Components.init(identifier:)(v14, v15, v16);
  rawValue = Locale.Components.rem_language()()._rawValue;
  type metadata accessor for REMFilteredTitleEmbedding(0);
  v26[1] = static REMFilteredTitleEmbedding.decodeEmojiInText(_:language:)(a1, a2, rawValue);
  v26[2] = v18;
  v26[0] = &off_1007DFE88;
  v19 = sub_10009FC50(&qword_10083F620, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet);
  v20 = sub_10001A630(&qword_10083F628);
  v21 = sub_1000A5F84(&qword_10083F630, &qword_10083F628, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v26, v20, v21, v5, v19);
  v22 = sub_1000E525C();
  v23 = StringProtocol.trimmingCharacters(in:)(v8, &type metadata for String, v22);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1001BED08(uint64_t a1, unint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __C::NLLanguage v14;
  void (*v15)(char *, uint64_t, __n128);
  __n128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v24[2];

  v4 = v3;
  v7 = type metadata accessor for Locale.Components(0, a3);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
  v13 = swift_bridgeObjectRetain(v12);
  Locale.Components.init(identifier:)(v11, v12, v13);
  v14._rawValue = Locale.Components.rem_language()()._rawValue;
  v24[0] = a1;
  v24[1] = a2;
  if (sub_1001A62F4(0, *(_QWORD *)(v4 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes)))
  {
    v15 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
    v16 = swift_bridgeObjectRetain(a2);
    v15(v10, v7, v16);
LABEL_10:

    return v24[0];
  }
  v17 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization);
  v18 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers);
  if (v18 == 2)
  {
    if ((v17 & 1) != 0)
    {
      v19 = 0;
LABEL_9:
      v20 = v17 & 1;
      swift_bridgeObjectRetain(a2);
      v21 = objc_autoreleasePoolPush();
      sub_1001C0D00(v20, a1, a2, (uint64_t)v14._rawValue, v19, v24);
      objc_autoreleasePoolPop(v21);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      goto LABEL_10;
    }
  }
  else if (((v18 | v17) & 1) != 0)
  {
    v19 = v18 & 1;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(a2);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v24[0];
}

_QWORD *sub_1001BEEA0(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t countAndFlagsBits;
  Swift::String v57;
  Swift::Bool v58;
  void *object;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  void *v68;
  unsigned __int8 v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  _QWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  char v132;
  char v133;
  __n128 v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __n128 v189;
  __n128 v190;
  int64_t v191;
  _QWORD *v192;
  _DWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD v202[2];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  void (*v208)(char *, uint64_t);
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(char *, _QWORD, uint64_t);
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;

  v222 = a7;
  v221 = a5;
  v223 = type metadata accessor for REMAnalyticsEvent(0);
  v218 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)v202 - v21;
  LODWORD(v217) = a2;
  v209 = v23;
  v220 = a6;
  v219 = a4;
  LODWORD(v224) = a8;
  if ((a2 & 1) != 0)
  {
    v20 = swift_bridgeObjectRetain(a1);
    v24 = a1;
  }
  else
  {
    v25 = a1[2];
    if (v25)
    {
      v216 = a3;
      swift_bridgeObjectRetain_n(a1, 2);
      v215 = a1;
      v26 = a1 + 9;
      v27 = _swiftEmptyArrayStorage;
      do
      {
        v31 = *(v26 - 4);
        v32 = *(v26 - 3);
        if (v31 != 0x616C6C656373694DLL || v32 != 0xED000073756F656ELL)
        {
          v225 = *(v26 - 5);
          v34 = *((_DWORD *)v26 - 4);
          v36 = *(v26 - 1);
          v35 = *v26;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0x616C6C656373694DLL, 0xED000073756F656ELL, 0) & 1) == 0)
          {
            swift_bridgeObjectRetain(v32);
            swift_bridgeObjectRetain(v35);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
            *(_QWORD *)&v233 = v27;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001C20C0(0, v27[2] + 1, 1);
              v27 = (_QWORD *)v233;
            }
            v29 = v27[2];
            v28 = v27[3];
            if (v29 >= v28 >> 1)
            {
              sub_1001C20C0(v28 > 1, v29 + 1, 1);
              v27 = (_QWORD *)v233;
            }
            v27[2] = v29 + 1;
            v30 = &v27[6 * v29];
            v30[4] = v225;
            v30[5] = v31;
            v30[6] = v32;
            *((_DWORD *)v30 + 14) = v34;
            v30[8] = v36;
            v30[9] = v35;
          }
        }
        v26 += 6;
        --v25;
      }
      while (v25);
      v20 = swift_bridgeObjectRelease_n(v215, 2);
      a3 = v216;
      v24 = v27;
    }
    else
    {
      v24 = _swiftEmptyArrayStorage;
    }
  }
  v38 = sub_100206860(a3, v24, v20);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  if ((v43 & 1) == 0)
    goto LABEL_19;
  v46 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v47 = swift_unknownObjectRetain_n(v38, 2);
  v48 = (_QWORD *)swift_dynamicCastClass(v47, v46);
  if (!v48)
  {
    swift_unknownObjectRelease(v38);
    v48 = _swiftEmptyArrayStorage;
  }
  v49 = v48[2];
  v50 = swift_release(v48);
  if (__OFSUB__(v44 >> 1, v42))
  {
    __break(1u);
    goto LABEL_100;
  }
  v50 = v38;
  if (v49 != (v44 >> 1) - v42)
  {
LABEL_100:
    swift_unknownObjectRelease(v50);
LABEL_19:
    v45 = sub_1001E9F1C(v38, v40, v42, v44);
    goto LABEL_26;
  }
  v45 = (_QWORD *)swift_dynamicCastClass(v38, v46);
  if (!v45)
  {
    swift_unknownObjectRelease(v38);
    v45 = _swiftEmptyArrayStorage;
  }
LABEL_26:
  v52 = a11;
  v51 = a12;
  v53 = a10;
  v210 = a9;
  swift_unknownObjectRelease(v38);
  v227 = v45;
  v54 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_corrections + 16);
  v55 = String.lowercased()();
  countAndFlagsBits = v55._countAndFlagsBits;
  swift_bridgeObjectRetain(v45);
  v57._countAndFlagsBits = 115;
  v57._object = (void *)0xE100000000000000;
  v58 = String.hasSuffix(_:)(v57);
  swift_bridgeObjectRetain(v55._object);
  v225 = v55._countAndFlagsBits;
  object = v55._object;
  if (v58)
  {
    v60 = sub_1005543E0(1, v225, (unint64_t)v55._object);
    v62 = v61;
    v64 = v63;
    v216 = v54;
    v66 = v65;
    v67 = swift_bridgeObjectRelease();
    countAndFlagsBits = static String._fromSubstring(_:)(v60, v62, v64, v66, v67);
    object = v68;
    v53 = a10;
    v51 = a12;
    v52 = a11;
    v54 = v216;
    swift_bridgeObjectRelease();
  }
  v69 = a13;
  if ((v224 & 1) != 0)
  {
    if (*(_QWORD *)(v54 + 16))
    {
      swift_bridgeObjectRetain(v53);
      v70 = sub_10001A6DC(v210, v53);
      if ((v71 & 1) != 0)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v70);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v207 = v53;
        goto LABEL_42;
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v54 + 16))
      {
        swift_bridgeObjectRetain(v51);
        v73 = sub_10001A6DC(v52, v51);
        if ((v74 & 1) != 0)
        {
          v207 = v53;
          v72 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v73);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v54 + 16))
        {
          v75 = sub_10001A6DC(v225, (uint64_t)v55._object);
          if ((v76 & 1) != 0)
          {
            v207 = v53;
            v72 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v75);
            swift_bridgeObjectRelease();
            goto LABEL_42;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v54 + 16))
    {
      v77 = sub_10001A6DC(countAndFlagsBits, (uint64_t)object);
      if ((v78 & 1) != 0)
      {
        v207 = v53;
        v72 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v77);
LABEL_42:
        swift_bridgeObjectRelease();
        v79 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels);
        v228 = v79;
        *(_QWORD *)&v232 = v72;
        swift_bridgeObjectRetain(v79);
        v80 = sub_10001A630((uint64_t *)&unk_10083AE10);
        v81 = sub_1000A5F84(&qword_10084EF60, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
        Collection.subscript.getter(&v233, &v232, v80, v81);
        v82 = *((_QWORD *)&v233 + 1);
        if (*((_QWORD *)&v233 + 1))
        {
          v83 = v233;
          swift_bridgeObjectRelease();
          if ((v83 == 0x616C6C656373694DLL && v82 == 0xED000073756F656ELL
             || (_stringCompareWithSmolCheck(_:_:expecting:)(v83, v82, 0x616C6C656373694DLL, 0xED000073756F656ELL, 0) & 1) != 0)
            && (v217 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v84 = v45[2];
            if (v84)
            {
              *(_QWORD *)&v233 = _swiftEmptyArrayStorage;
              sub_1001C2088(0, v84, 0);
              v85 = (_QWORD *)v233;
              v86 = v45;
              v87 = v45 + 7;
              do
              {
                v88 = *((_QWORD *)v87 - 3);
                v89 = *((_QWORD *)v87 - 2);
                v90 = *((_QWORD *)v87 - 1);
                v91 = *v87;
                *(_QWORD *)&v233 = v85;
                v93 = v85[2];
                v92 = v85[3];
                swift_bridgeObjectRetain(v90);
                if (v93 >= v92 >> 1)
                {
                  sub_1001C2088(v92 > 1, v93 + 1, 1);
                  v85 = (_QWORD *)v233;
                }
                v85[2] = v93 + 1;
                v94 = &v85[4 * v93];
                v94[4] = v88;
                v94[5] = v89;
                v94[6] = v90;
                *((_DWORD *)v94 + 14) = v91;
                v87 += 12;
                --v84;
              }
              while (v84);
              swift_release_n(v86);
              return v85;
            }
            swift_release_n(v45);
            return _swiftEmptyArrayStorage;
          }
          v131 = sub_1001CB004((uint64_t)v45, v83, v82);
          v133 = v132;
          swift_release(v45);
          if ((v133 & 1) == 0)
          {
            sub_1003DCBAC(v131, (uint64_t)&v228);
            v232 = v229;
            sub_1001CB094((uint64_t)&v232);
            v231 = v230;
            sub_1001CB094((uint64_t)&v231);
            goto LABEL_78;
          }
          if (!v45[2])
          {
LABEL_78:
            if ((a13 & 1) != 0)
            {
              v224 = type metadata accessor for REMAnalyticsManager(0, v134);
              v225 = static REMAnalyticsManager.shared.getter(v136);
              v137 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
              v138 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
              v139 = *(_QWORD **)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
              v140 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
              *(_QWORD *)v22 = 0xD000000000000010;
              *((_QWORD *)v22 + 1) = 0x80000001006FC430;
              v22[16] = 0;
              v217 = v137;
              *((_QWORD *)v22 + 3) = v137;
              *((_QWORD *)v22 + 4) = v138;
              v204 = v83;
              v141 = v221;
              *((_QWORD *)v22 + 5) = v219;
              *((_QWORD *)v22 + 6) = v141;
              v205 = v82;
              v142 = v222;
              *((_QWORD *)v22 + 7) = v220;
              *((_QWORD *)v22 + 8) = v142;
              v143 = v205;
              *((_QWORD *)v22 + 9) = v204;
              *((_QWORD *)v22 + 10) = v143;
              v215 = v139;
              *((_QWORD *)v22 + 11) = v139;
              *((_QWORD *)v22 + 12) = v140;
              v144 = v218;
              v145 = *(void (**)(_QWORD))(v218 + 104);
              LODWORD(v213) = enum case for REMAnalyticsEvent.groceryPrediction(_:);
              v146 = v223;
              v212 = (void (*)(char *, _QWORD, uint64_t))v145;
              v145(v22);
              v214 = v140;
              swift_bridgeObjectRetain(v140);
              v216 = v138;
              swift_bridgeObjectRetain(v138);
              v147 = v141;
              v83 = v204;
              swift_bridgeObjectRetain(v147);
              v148 = v142;
              v82 = v205;
              swift_bridgeObjectRetain(v148);
              v149 = swift_bridgeObjectRetain(v82);
              v150 = v225;
              REMAnalyticsManager.post(event:)(v22, v149);
              swift_release(v150);
              v151 = *(void (**)(char *, uint64_t))(v144 + 8);
              v151(v22, v146);
              v152 = v227[2];
              if (v152)
              {
                v203 = v72;
                v206 = a13;
                swift_bridgeObjectRetain(v227);
                v202[1] = v153;
                v154 = (uint64_t *)(v153 + 72);
                v208 = v151;
                v155 = v221;
                v156 = v222;
                do
                {
                  v157 = *(v154 - 4);
                  v158 = *(v154 - 3);
                  v159 = *(v154 - 1);
                  v160 = *v154;
                  swift_bridgeObjectRetain(v158);
                  v161 = swift_bridgeObjectRetain(v160);
                  v225 = static REMAnalyticsManager.shared.getter(v161);
                  *(_QWORD *)v22 = v159;
                  *((_QWORD *)v22 + 1) = v160;
                  v22[16] = 0;
                  v162 = v216;
                  *((_QWORD *)v22 + 3) = v217;
                  *((_QWORD *)v22 + 4) = v162;
                  *((_QWORD *)v22 + 5) = v219;
                  *((_QWORD *)v22 + 6) = v155;
                  *((_QWORD *)v22 + 7) = v220;
                  *((_QWORD *)v22 + 8) = v156;
                  *((_QWORD *)v22 + 9) = v157;
                  *((_QWORD *)v22 + 10) = v158;
                  v163 = v214;
                  *((_QWORD *)v22 + 11) = v215;
                  *((_QWORD *)v22 + 12) = v163;
                  v164 = v223;
                  v212(v22, v213, v223);
                  swift_bridgeObjectRetain(v162);
                  swift_bridgeObjectRetain(v155);
                  swift_bridgeObjectRetain(v156);
                  swift_bridgeObjectRetain(v163);
                  swift_bridgeObjectRetain(v158);
                  v165 = swift_bridgeObjectRetain(v160);
                  v166 = v225;
                  REMAnalyticsManager.post(event:)(v22, v165);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v167 = v166;
                  v168 = v208;
                  swift_release(v167);
                  v168(v22, v164);
                  v154 += 6;
                  --v152;
                }
                while (v152);
                swift_bridgeObjectRelease();
                v69 = v206;
                v72 = v203;
                v82 = v205;
                v83 = v204;
              }
            }
            *(_QWORD *)&v233 = v72;
            *((_QWORD *)&v233 + 1) = v83;
            v234 = v82;
            v235 = 1065353216;
            v236 = 0xD000000000000010;
            v237 = 0x80000001006FC430;
            sub_1001CEA44(0, 0, &v233);
            goto LABEL_84;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) != 0)
          {
            v135 = v45[2];
            if (v135)
            {
LABEL_77:
              v45[2] = v135 - 1;
              swift_bridgeObjectRelease();
              v134 = swift_bridgeObjectRelease();
              v227 = v45;
              goto LABEL_78;
            }
          }
          else
          {
            v45 = sub_1001CEC40(v45);
            v135 = v45[2];
            if (v135)
              goto LABEL_77;
          }
          __break(1u);
          JUMPOUT(0x1001C016CLL);
        }
        if (qword_100836F58 != -1)
          swift_once(&qword_100836F58, sub_1001BC484);
        v115 = type metadata accessor for Logger(0);
        sub_10001AAA8(v115, (uint64_t)qword_10083F308);
        swift_bridgeObjectRetain(v79);
        v117 = Logger.logObject.getter(v116);
        v118 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v117, v118))
        {
          v119 = swift_slowAlloc(22, -1);
          *(_DWORD *)v119 = 134218240;
          *(_QWORD *)&v233 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 8);
          *(_WORD *)(v119 + 12) = 2048;
          v120 = *(_QWORD *)(v79 + 16);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v233 = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, (char *)&v233 + 8);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "REMGroceryClassifier topNFilteredCorrected asked for %ld in intelligentCategoryNames with count %ld", (uint8_t *)v119, 0x16u);
          swift_slowDealloc(v119, -1, -1);

          v121 = v45[2];
          if (v121)
            goto LABEL_64;
        }
        else
        {

          swift_bridgeObjectRelease_n(v79, 2);
          v121 = v45[2];
          if (v121)
          {
LABEL_64:
            *(_QWORD *)&v233 = _swiftEmptyArrayStorage;
            sub_1001C2088(0, v121, 0);
            v85 = (_QWORD *)v233;
            v122 = v45;
            v123 = v45 + 7;
            do
            {
              v124 = *((_QWORD *)v123 - 3);
              v125 = *((_QWORD *)v123 - 2);
              v126 = *((_QWORD *)v123 - 1);
              v127 = *v123;
              *(_QWORD *)&v233 = v85;
              v129 = v85[2];
              v128 = v85[3];
              swift_bridgeObjectRetain(v126);
              if (v129 >= v128 >> 1)
              {
                sub_1001C2088(v128 > 1, v129 + 1, 1);
                v85 = (_QWORD *)v233;
              }
              v85[2] = v129 + 1;
              v130 = &v85[4 * v129];
              v130[4] = v124;
              v130[5] = v125;
              v130[6] = v126;
              *((_DWORD *)v130 + 14) = v127;
              v123 += 12;
              --v121;
            }
            while (v121);
            swift_release(v122);
            goto LABEL_73;
          }
        }
        swift_release(v45);
        v85 = _swiftEmptyArrayStorage;
LABEL_73:
        swift_bridgeObjectRelease();
        return v85;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v95 = swift_bridgeObjectRelease();
  if ((a13 & 1) == 0)
  {
    swift_release(v45);
    goto LABEL_89;
  }
  v207 = v53;
  v96 = v45[2];
  if (v96)
  {
    v206 = a13;
    v217 = type metadata accessor for REMAnalyticsManager(0, v95);
    v97 = *(_QWORD **)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    v216 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    v215 = v97;
    v214 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
    v213 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
    LODWORD(v212) = enum case for REMAnalyticsEvent.groceryPrediction(_:);
    v208 = (void (*)(char *, uint64_t))v45;
    v98 = v45 + 9;
    v99 = v222;
    v100 = v223;
    do
    {
      v225 = v96;
      v101 = *(v98 - 4);
      v102 = *(v98 - 3);
      v103 = *(v98 - 1);
      v104 = *v98;
      swift_bridgeObjectRetain(v102);
      v105 = swift_bridgeObjectRetain(v104);
      v224 = static REMAnalyticsManager.shared.getter(v105);
      *(_QWORD *)v22 = v103;
      *((_QWORD *)v22 + 1) = v104;
      v22[16] = 0;
      v106 = v215;
      *((_QWORD *)v22 + 3) = v216;
      *((_QWORD *)v22 + 4) = v106;
      v107 = v221;
      *((_QWORD *)v22 + 5) = v219;
      *((_QWORD *)v22 + 6) = v107;
      *((_QWORD *)v22 + 7) = v220;
      *((_QWORD *)v22 + 8) = v99;
      *((_QWORD *)v22 + 9) = v101;
      *((_QWORD *)v22 + 10) = v102;
      v108 = v213;
      *((_QWORD *)v22 + 11) = v214;
      *((_QWORD *)v22 + 12) = v108;
      v109 = v218;
      (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v22, v212, v100);
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v106);
      v110 = swift_bridgeObjectRetain(v108);
      v111 = v224;
      REMAnalyticsManager.post(event:)(v22, v110);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v111);
      v112 = *(void (**)(char *, uint64_t))(v109 + 8);
      v113 = v225;
      v112(v22, v100);
      v98 += 6;
      v96 = v113 - 1;
    }
    while (v96);
    swift_release(v208);
    v69 = v206;
  }
  else
  {
    swift_release(v45);
  }
LABEL_84:
  v45 = v227;
  if (!v227[2] && (v69 & 1) != 0)
  {
    type metadata accessor for REMAnalyticsManager(0, v114);
    v170 = static REMAnalyticsManager.shared.getter(v169);
    v171 = v170;
    v172 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
    v173 = *(_QWORD *)(v172 + 16);
    if (v173)
    {
      v225 = v170;
      v226 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v172);
      sub_1001C1B0C(0, v173, 0);
      __asm { BR              X9 }
    }
    v226 = _swiftEmptyArrayStorage;
    v174 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v175 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
    v176 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v174, v175);
    v178 = v177;
    v179 = swift_bridgeObjectRelease();
    v180 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    v181 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    v182 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
    v183 = *(_QWORD *)(v211 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
    v184 = v209;
    *v209 = v176;
    v184[1] = v178;
    *((_BYTE *)v184 + 16) = 1;
    v184[3] = v180;
    v184[4] = v181;
    v185 = v221;
    v184[5] = v219;
    v184[6] = v185;
    v186 = v222;
    v184[7] = v220;
    v184[8] = v186;
    v184[9] = 0;
    v184[10] = 0;
    v184[11] = v182;
    v184[12] = v183;
    v187 = v218;
    v188 = v223;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, __n128))(v218 + 104))(v184, enum case for REMAnalyticsEvent.groceryPrediction(_:), v223, v179);
    swift_bridgeObjectRetain(v183);
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRetain(v186);
    v189 = swift_bridgeObjectRetain(v181);
    REMAnalyticsManager.post(event:)(v184, v189);
    swift_release(v171);
    v190.n128_f64[0] = (*(double (**)(uint64_t *, uint64_t))(v187 + 8))(v184, v188);
    type metadata accessor for Analytics(0, v190);
    static Analytics.postBiomeEventForUncategorizedGroceryItem(item:)(v210, v207);
    v45 = v227;
  }
LABEL_89:
  v191 = v45[2];
  if (!v191)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  v226 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v45);
  sub_1001C2088(0, v191, 0);
  v85 = v226;
  v192 = v45;
  v193 = v45 + 7;
  do
  {
    v194 = *((_QWORD *)v193 - 3);
    v195 = *((_QWORD *)v193 - 2);
    v196 = *((_QWORD *)v193 - 1);
    v197 = *v193;
    v226 = v85;
    v199 = v85[2];
    v198 = v85[3];
    swift_bridgeObjectRetain(v196);
    if (v199 >= v198 >> 1)
    {
      sub_1001C2088(v198 > 1, v199 + 1, 1);
      v85 = v226;
    }
    v85[2] = v199 + 1;
    v200 = &v85[4 * v199];
    v200[4] = v194;
    v200[5] = v195;
    v200[6] = v196;
    *((_DWORD *)v200 + 14) = v197;
    v193 += 12;
    --v191;
  }
  while (v191);
  swift_bridgeObjectRelease_n(v192, 2);
  return v85;
}

uint64_t REMGroceryClassifier.shouldSuggestConvertToGrocery(titles:listName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch(sub_1001C019C, 0, 0);
}

void sub_1001C019C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  char v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
  if ((unint64_t)v2 <= 4)
  {
    v3 = 1.0;
    if (!*(_QWORD *)(v0 + 80))
      goto LABEL_10;
    *(_QWORD *)(v0 + 16) = 0x65697265636F7247;
    *(_QWORD *)(v0 + 24) = 0xE900000000000073;
    v4 = sub_1000E525C();
    v5 = StringProtocol.localizedLowercase.getter(&type metadata for String, v4);
    v7 = v6;
    v8 = String.lowercased()();
    if (v5 == v8._countAndFlagsBits && v7 == v8._object)
    {
      v11 = swift_bridgeObjectRelease_n(v7, 2);
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8._countAndFlagsBits, v8._object, 0);
      swift_bridgeObjectRelease();
      v11 = swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        v1 = *(_QWORD *)(v0 + 88);
        goto LABEL_10;
      }
    }
    (*(void (**)(uint64_t, __n128))(v0 + 8))(1, v11);
    return;
  }
  v3 = *(float *)(v1 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreThreshold);
LABEL_10:
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreExcludedCategories);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_1001C5CEC(v14, v12);
  v16 = v15;
  *(_QWORD *)(v0 + 96) = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = ceilf(v3 * (float)v2);
  *(float *)(v0 + 120) = v17;
  if ((~LODWORD(v17) & 0x7F800000) != 0)
  {
    if (v17 > -9.2234e18)
    {
      if (v17 < 9.2234e18)
      {
        v18 = *(_QWORD *)(v0 + 88);
        *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 64);
        *(_QWORD *)(v0 + 56) = 0;
        v19 = swift_task_alloc(32);
        *(_QWORD *)(v0 + 104) = v19;
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = v16;
        v20 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncReduce<A>(_:_:)[1]);
        *(_QWORD *)(v0 + 112) = v20;
        v21 = sub_10001A630((uint64_t *)&unk_10083AE10);
        v22 = sub_1000A5F84((unint64_t *)&unk_1008458F0, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
        *v20 = v0;
        v20[1] = sub_1001C0420;
        Sequence.asyncReduce<A>(_:_:)(v0 + 40, v0 + 56, &unk_10083F388, v19, v21, &type metadata for Int, v22);
        return;
      }
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

uint64_t sub_1001C0420()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001C0488, 0, 0);
}

uint64_t sub_1001C0488()
{
  uint64_t v0;

  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 40) >= (uint64_t)*(float *)(v0 + 120));
}

uint64_t sub_1001C04A8(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v8 = sub_10001A630(&qword_100839A10);
  v9 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  v5[5] = v9;
  v5[6] = v10;
  v11 = a3[1];
  v5[7] = *a3;
  v5[8] = v11;
  return swift_task_switch(sub_1001C051C, 0, 0);
}

uint64_t sub_1001C051C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v6 = (void *)v0[3];
  v5 = v0[4];
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1007E8EB0, 72, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  v8[5] = v2;
  v8[6] = v1;
  v8[7] = v5;
  v8[8] = v4;
  v9 = v6;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v5);
  v10 = sub_1000CAB00(v3, (uint64_t)&unk_10083F610, (uint64_t)v8);
  v0[9] = v10;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v0[10] = v11;
  *v11 = v0;
  v11[1] = sub_1001C0618;
  return Task<>.value.getter(v0[2], v10, &type metadata for Int);
}

uint64_t sub_1001C0618()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 40);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001C0678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;

  v8[8] = a7;
  v8[9] = a8;
  v8[7] = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_10083F324);
  v8[10] = v11;
  *v11 = v8;
  v11[1] = sub_1001C0728;
  return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(a5, a6, 0x100000000, 1, 0, 0, 0, 0xD000000000000017);
}

uint64_t sub_1001C0728(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1001C082C;
  else
    v5 = sub_1001C0794;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001C0794()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __n128 v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 88);
  if (!v1[2])
    goto LABEL_6;
  v2 = *(_QWORD **)(v0 + 64);
  v3 = v1[5];
  v4 = v1[6];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = sub_1001A560C(v3, v4, v2);
  v6 = swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 72);
  if ((v5 & 1) == 0 && __OFADD__(v7++, 1))
  {
    __break(1u);
LABEL_6:
    v6 = swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 72);
  }
  **(_QWORD **)(v0 + 56) = v7;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v6);
}

uint64_t sub_1001C082C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (qword_100836F58 != -1)
    swift_once(&qword_100836F58, sub_1001BC484);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10083F308);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.rem_errorDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_10001A820(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "REMGroceryClassifier.shouldSuggestConvertToGrocery: predict failed with {error: %s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  **(_QWORD **)(v0 + 56) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t REMGroceryClassifier.modelTypesDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    sub_1001C1B0C(0, v2, 0);
    __asm { BR              X9 }
  }
  v3 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v4 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

char *REMGroceryClassifier.__allocating_init(baseURL:modelLocale:trialDeploymentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v20 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17((char *)&v20 - v15, a1, v9, v14);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v12, a1, v9);
  v18 = sub_1001C85C0(v16, (uint64_t)v12, a2, a3, a4, v21);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return v18;
}

double sub_1001C0D00(int a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSString *v15;
  NSString *v16;
  _QWORD *v17;
  id v18;
  Class isa;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  double result;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  _UNKNOWN **v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;

  v45 = a6;
  v43 = a5;
  v10 = type metadata accessor for CharacterSet(0);
  v44 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_1008447C0);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v14 + 32) = NLTagSchemeNameTypeOrLexicalClass;
  v42 = a1;
  v15 = NLTagSchemeNameTypeOrLexicalClass;
  if ((a1 & 1) != 0)
  {
    v16 = NLTagSchemeLemma;
    v17 = sub_1002C986C((_QWORD *)1, 2, 1, (_QWORD *)v14);
    v17[2] = 2;
    v17[5] = v16;
  }
  v18 = objc_allocWithZone((Class)NLTagger);
  type metadata accessor for NLTagScheme(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v18, "initWithTagSchemes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setString:", v21);

  v22 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v22 = a2;
  v23 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
    v23 = 11;
  v24 = v23 | (v22 << 16);
  v25 = NLTagger.setLanguage(_:range:)(a4, 15, v24);
  v49 = _swiftEmptyArrayStorage;
  v26 = __chkstk_darwin(v25);
  *((_BYTE *)&v41 - 48) = v43 & 1;
  *((_BYTE *)&v41 - 47) = v42 & 1;
  *(&v41 - 5) = (uint64_t)v20;
  *(&v41 - 4) = (uint64_t)&v49;
  *(&v41 - 3) = a2;
  *(&v41 - 2) = a3;
  NLTagger.enumerateTags(in:unit:scheme:options:using:)(15, v24, 0, NLTagSchemeNameTypeOrLexicalClass, 0, sub_1001CB0BC, v26);
  v47 = v49;
  swift_bridgeObjectRetain(v49);
  v27 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v28 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
  v31 = v30;
  swift_bridgeObjectRelease();
  v47 = (_QWORD *)v29;
  v48 = v31;
  v46 = &off_1007DFEB8;
  v32 = sub_10009FC50(&qword_10083F620, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet);
  v33 = sub_10001A630(&qword_10083F628);
  v34 = sub_1000A5F84(&qword_10083F630, &qword_10083F628, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v33, v34, v10, v32);
  v35 = sub_1000E525C();
  v36 = StringProtocol.trimmingCharacters(in:)(v12, &type metadata for String, v35);
  v38 = v37;

  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v10);
  swift_bridgeObjectRelease();
  v39 = v45;
  *v45 = v36;
  v39[1] = v38;
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001C1080(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;

  if ((a4 & 1) == 0 || !a1)
    goto LABEL_8;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLTagNumber);
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    return 1;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_8:
    if ((a5 & 1) != 0)
    {
      v21 = NLTagger.tags(in:unit:scheme:options:)(a2, a3, 0, NLTagSchemeLemma, 0);
      if (*(_QWORD *)(v21 + 16))
      {
        v22 = *(void **)(v21 + 32);
        v23 = v22;
        swift_bridgeObjectRelease();
        if (v22)
        {
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
          v26 = v25;

LABEL_15:
          v33 = (_QWORD *)*a7;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a7);
          *a7 = v33;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v33 = sub_1002C8224(0, v33[2] + 1, 1, v33);
            *a7 = v33;
          }
          v36 = v33[2];
          v35 = v33[3];
          if (v36 >= v35 >> 1)
          {
            v33 = sub_1002C8224((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
            *a7 = v33;
          }
          v33[2] = v36 + 1;
          v37 = &v33[2 * v36];
          v37[4] = v24;
          v37[5] = v26;
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v27 = String.subscript.getter(a2, a3, a8, a9);
    v24 = static String._fromSubstring(_:)(v27, v28, v29, v30, v31);
    v26 = v32;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  return 1;
}

id sub_1001C1258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16)
{
  _BYTE *v16;
  objc_class *ObjectType;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  objc_super v33;

  ObjectType = (objc_class *)swift_getObjectType(v16);
  v26 = OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization;
  v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization] = 2;
  v27 = OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers;
  v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers] = 2;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_models] = a1;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes] = a2;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels] = a3;
  v28 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_corrections];
  *v28 = a4;
  v28[1] = a5;
  v28[2] = a6;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_thresholds] = a7;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN] = a8;
  *(float *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreThreshold] = a9;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreExcludedCategories] = a10;
  v29 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
  *v29 = a11;
  v29[1] = a12;
  v30 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID];
  *v30 = a13;
  v30[1] = a14;
  v16[v26] = a15;
  v16[v27] = a16;
  v33.receiver = v16;
  v33.super_class = ObjectType;
  return objc_msgSendSuper2(&v33, "init");
}

void REMGroceryClassifier.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("remindd.REMGroceryClassifier", 28, "init()", 6, 0);
  __break(1u);
}

uint64_t REMRegExTextClassifier.predict(_:thresholds:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  result = REMRegExTextClassifier.predictIndices(_:)();
  if (!v1)
  {
    v3 = result;
    swift_retain();
    v4 = sub_1001C685C(v3);
    swift_bridgeObjectRelease();
    swift_release(v0);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1001C1530()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v0;
  v3 = REMRegExTextClassifier.predictIndices(_:)();
  swift_retain();
  v4 = sub_1001C685C(v3);
  swift_bridgeObjectRelease();
  swift_release(v2);
  return sub_1001CAE24(*(uint64_t (**)(uint64_t))(v1 + 8), v1, (uint64_t)v4);
}

uint64_t sub_1001C15B8()
{
  return REMRegExTextClassifier.labels.getter();
}

uint64_t sub_1001C15D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1001C15E0(uint64_t a1)
{
  return sub_1001C1604(a1, (uint64_t (*)(void))sub_1001C1B0C);
}

uint64_t sub_1001C15EC(uint64_t a1)
{
  return sub_1001C1604(a1, (uint64_t (*)(void))sub_1001C1BB8);
}

uint64_t sub_1001C15F8(uint64_t a1)
{
  return sub_1001C1604(a1, (uint64_t (*)(void))sub_1001C1BE4);
}

uint64_t sub_1001C1604(uint64_t a1, uint64_t (*a2)(void))
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t result;

  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v4;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v4 + 24) >> 1)
    return a2();
  return result;
}

_QWORD *sub_1001C167C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    v2 = sub_10001A630(&qword_10083F3F8);
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1001C171C(uint64_t a1)
{
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String);
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001C17B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = sub_10001A630((uint64_t *)&unk_100839C80);
      v3 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
      v3[2] = a1;
    }
    else
    {
      v3 = _swiftEmptyArrayStorage;
    }
    sub_10001A630((uint64_t *)&unk_100839C80);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_1001C1878(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = type metadata accessor for UUID(0);
      v3 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
      v3[2] = a1;
    }
    else
    {
      v3 = &_swiftEmptyArrayStorage;
    }
    type metadata accessor for UUID(0);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_1001C1934()
{
  return sub_1001C1958((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1001C1B0C);
}

uint64_t sub_1001C1940()
{
  return sub_1001C1958((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1001C1BB8);
}

uint64_t sub_1001C194C()
{
  return sub_1001C1958((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1001C1BE4);
}

uint64_t sub_1001C1958(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t sub_1001C19B4(uint64_t a1)
{
  return sub_1001C19D8(a1, (uint64_t (*)(BOOL))sub_1001C1B0C);
}

uint64_t sub_1001C19C0(uint64_t a1)
{
  return sub_1001C19D8(a1, (uint64_t (*)(BOOL))sub_1001C1BB8);
}

uint64_t sub_1001C19CC(uint64_t a1)
{
  return sub_1001C19D8(a1, (uint64_t (*)(BOOL))sub_1001C1BE4);
}

uint64_t sub_1001C19D8(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

uint64_t sub_1001C1A04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t sub_1001C1A1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  return sub_1000F2CE4(a2, v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1);
}

uint64_t sub_1001C1A7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, a2, v6);
}

uint64_t sub_1001C1AE0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C36E0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F660, &qword_1008400A0);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1B0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C24D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1B28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C2638(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1B44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C36E0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F450, &qword_10083F458);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1B70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C27EC(a1, a2, a3, (_QWORD *)*v3, &qword_10083F438, (uint64_t *)&unk_100844090);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1B9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C2994(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1BB8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5810(a1, a2, a3, (_QWORD *)*v3, &qword_10083F3F0, (uint64_t *)&unk_100839C80);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1BE4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083DA80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1C10(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C2B18(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1C2C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C2C70(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1C48(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C2DF8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1C64(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_100844030, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.SectionLite);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1C90(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C36E0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F4D0, &qword_10083F4D8);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1CBC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F540, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.Account);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1CE8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F538, (uint64_t (*)(_QWORD))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1D14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F530, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1D40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5810(a1, a2, a3, (_QWORD *)*v3, &qword_10083F580, &qword_10083F588);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1D6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F590, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1D98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5810(a1, a2, a3, (_QWORD *)*v3, &qword_10083F500, &qword_100844170);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1DC4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_1008443F0, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1DF0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5810(a1, a2, a3, (_QWORD *)*v3, &qword_10083F518, &qword_10083F520);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1E1C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083BFA0, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ReminderLite);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1E48(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100850D50, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1E74(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C2F78(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1E90(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F598, (uint64_t (*)(_QWORD))&type metadata accessor for REMSmartListSection.PredefinedSectionType.Today);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1EBC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C342C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1ED8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4604(a1, a2, a3, (_QWORD *)*v3, &qword_10083F568, &qword_10084EF00);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1F04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4604(a1, a2, a3, (_QWORD *)*v3, &qword_10083F570, (uint64_t *)&unk_100844080);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1F30(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3588(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1F4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C36E0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F510, (uint64_t *)&unk_100844340);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1F78(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3884(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1F94(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3A08(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1FB0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3B88(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C1FCC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F508, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
  *v3 = result;
  return result;
}

uint64_t sub_1001C1FF8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3D0C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2014(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4C20(a1, a2, a3, *v3, &qword_10083F488);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2038(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C56B8(a1, a2, a3, *v3, &qword_10083FFF0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C205C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_100843B30, (uint64_t (*)(_QWORD))&type metadata accessor for REMManualOrdering.PinnedList);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2088(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C3E64(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C20A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C3FE8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C20C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4140(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C20DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_100843680, type metadata accessor for RDXPCEventStream.AlarmHandler);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2108(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C42C4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2124(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4468(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2140(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4604(a1, a2, a3, (_QWORD *)*v3, &qword_10083F640, &qword_10083F648);
  *v3 = result;
  return result;
}

uint64_t sub_1001C216C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_100844810, type metadata accessor for RDTimelineEngineReminder);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2198(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F658, type metadata accessor for RDTimelineEngineDueReminder);
  *v3 = result;
  return result;
}

uint64_t sub_1001C21C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_10084BDC0, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
  *v3 = result;
  return result;
}

uint64_t sub_1001C21F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4604(a1, a2, a3, (_QWORD *)*v3, &qword_10083F5D0, &qword_10083F5D8);
  *v3 = result;
  return result;
}

uint64_t sub_1001C221C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4790(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2238(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C56B8(a1, a2, a3, *v3, &qword_10083E988);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C225C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4918(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2278(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4C20(a1, a2, a3, *v3, &qword_10083F4A0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C229C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4AA0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C22B8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C4C20(a1, a2, a3, *v3, &qword_10083F5A0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C22DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100844620, (uint64_t (*)(_QWORD))&type metadata accessor for REMSuggestedAttributeOutput);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2308(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C4D78(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2324(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C50A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2340(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C520C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C235C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5520(a1, a2, a3, (_QWORD *)*v3, &qword_10083F4E8, &qword_10083EFD0);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2388(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F528, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.AccountChild);
  *v3 = result;
  return result;
}

uint64_t sub_1001C23B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_1008434A0, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
  *v3 = result;
  return result;
}

uint64_t sub_1001C23E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, &qword_10083F420, (uint64_t (*)(_QWORD))&type metadata accessor for Locale);
  *v3 = result;
  return result;
}

uint64_t sub_1001C240C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C53B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2428(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5520(a1, a2, a3, (_QWORD *)*v3, &qword_10083F548, &qword_10083F550);
  *v3 = result;
  return result;
}

uint64_t sub_1001C2454(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001C56B8(a1, a2, a3, *v3, &qword_100844710);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001C2478(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C5810(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100843EE0, (uint64_t *)&unk_100850D60);
  *v3 = result;
  return result;
}

uint64_t sub_1001C24A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001C59F0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100844670, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.DatesModel.Group);
  *v3 = result;
  return result;
}

uint64_t sub_1001C24D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_10083A340);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2638(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_100837FF0);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_10001A630(&qword_10083F638);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C27D8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C27EC(a1, a2, a3, a4, &qword_10083F440, &qword_10083F448);
}

uint64_t sub_1001C27EC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A630(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 24 * v11)
      memmove(v14 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 24 * v11 || v16 >= v17 + 24 * v11)
  {
    sub_10001A630(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2994(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F410);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    type metadata accessor for NLLanguage(0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2B18(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F408);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2C70(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F400);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A630((uint64_t *)&unk_10083A370);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2DF8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_100839E80);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C2F64(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C59F0(a1, a2, a3, a4, (uint64_t *)&unk_100850D50, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_1001C2F78(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F5C0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A630(&qword_10083F5C8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3100(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083FF90);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A630(&qword_10083F578);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C32A4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F558);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A630(&qword_10083F560);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C342C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_100843870);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3588(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4A8);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C36E0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A630(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_10001A630(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3884(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F490);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3A08(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F480);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3B88(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F498);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3D0C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4C0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3E58(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001C56B8(a1, a2, a3, a4, &qword_10083FFF0);
}

uint64_t sub_1001C3E64(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_100844790);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = v11 + 4;
  v15 = a4 + 4;
  v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v11 + 4, a4 + 4, v16 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    sub_10001A630(&qword_10083F4C8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C3FE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F5E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4140(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F618);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C42C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F650);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A630((uint64_t *)&unk_100843690);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4468(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F3E8);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C45DC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C59F0(a1, a2, a3, a4, &qword_100844840, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1001C45F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C59F0(a1, a2, a3, a4, (uint64_t *)&unk_10084BDC0, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1001C4604(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A630(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_10001A630(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4790(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F5B8);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C490C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001C56B8(a1, a2, a3, a4, &qword_10083E988);
}

uint64_t sub_1001C4918(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4B0);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_10001A630(&qword_10083F4B8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4AA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4F8);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4C20(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001A630(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    memcpy(v15, v16, 16 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4D78(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_1008445C0);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A630(&qword_10083F5A8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4F1C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630((uint64_t *)&unk_1008445E0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A630(&qword_10083F5B0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C50A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4F0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C520C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F418);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C5390(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C5520(a1, a2, a3, a4, &qword_10083F4E8, &qword_10083EFD0);
}

uint64_t sub_1001C53A4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C59F0(a1, a2, a3, a4, (uint64_t *)&unk_10083FCD0, type metadata accessor for RDPermanentlyHiddenReminder);
}

uint64_t sub_1001C53B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083F4E0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C5520(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A630(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 4);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 16 * v11)
      memmove(v14 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 16 * v11 || v17 >= v18 + 16 * v11)
  {
    sub_10001A630(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C56AC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001C56B8(a1, a2, a3, a4, &qword_100844710);
}

uint64_t sub_1001C56B8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001A630(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C5810(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A630(a5);
  v14 = *(_QWORD *)(sub_10001A630(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_10001A630(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C59F0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A630(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001C5BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1001C1B0C(0, v3, 0);
    v7 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = String.subscript.getter(*(v7 - 1), *v7, a2, a3);
      static String._fromSubstring(_:)(v8, v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      v13 = String.lowercased()();
      swift_bridgeObjectRelease();
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_1001C1B0C(v14 > 1, v15 + 1, 1);
      v7 += 2;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      *(Swift::String *)&_swiftEmptyArrayStorage[2 * v15 + 4] = v13;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1001C5CEC(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1001C1B0C(0, v2, 0);
    v5 = (unint64_t *)(a1 + 32);
    v6 = a2 + 32;
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v5++;
      v8 = v9;
      if (v9 >= v7)
        break;
      v10 = (uint64_t *)(v6 + 16 * v8);
      v12 = *v10;
      v11 = v10[1];
      v13 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v11);
      if (v13 >= v14 >> 1)
        sub_1001C1B0C(v14 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v13];
      v15[4] = v12;
      v15[5] = v11;
      if (!--v2)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_1001C5DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  _OWORD v27[7];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)(0x74736566696E616DLL, 0xED00006E6F736A2ELL);
  v7 = Data.init(contentsOf:options:)(v6, 0);
  if (v1)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10 = v7;
  v11 = v8;
  v12 = type metadata accessor for JSONDecoder(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = JSONDecoder.init()(v13);
  v15 = sub_1001CACF4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for REMGroceryClassifier.ModelInfo, v10, v11, &type metadata for REMGroceryClassifier.ModelInfo, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release(v14);
  result = sub_1000A71C8(v10, v11);
  v17 = v28;
  v16 = v29;
  v18 = v30;
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  v23 = v35;
  v24 = v36;
  v25 = v37;
  v26 = v38;
  *(_OWORD *)a1 = v27[6];
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 24) = v16;
  *(_OWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 48) = v19;
  *(_DWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  *(_BYTE *)(a1 + 72) = v22;
  *(_OWORD *)(a1 + 80) = v23;
  *(_OWORD *)(a1 + 96) = v24;
  *(_BYTE *)(a1 + 112) = v25;
  *(_BYTE *)(a1 + 113) = v26;
  return result;
}

_QWORD *sub_1001C6154(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[6];
  _QWORD *v71;
  _QWORD *v72;

  v58 = a4;
  v65 = a3;
  v66 = a1;
  v5 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v62 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting(0, v6);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for REMGroceryLocaleMapping(0, v10);
  v13 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836F58 != -1)
    swift_once(&qword_100836F58, sub_1001BC484);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001AAA8(v16, (uint64_t)qword_10083F308);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v57 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v60 = v5;
  v61 = v9;
  v64 = v12;
  if (v21)
  {
    v22 = swift_slowAlloc(18, -1);
    v23 = swift_slowAlloc(32, -1);
    v56 = v13;
    v24 = v23;
    v69 = (_QWORD *)v23;
    *(_DWORD *)v22 = 136446466;
    swift_bridgeObjectRetain(a2);
    v68 = sub_10001A820(v66, a2, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    v25 = (_QWORD *)a2;
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v22 + 12) = 1026;
    LODWORD(v68) = v65 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "loading category names from Trial assets for {locale: %{public}s, includeMisc: %{BOOL,public}d}", (uint8_t *)v22, 0x12u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v13 = v56;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    v25 = (_QWORD *)a2;
    v26 = swift_bridgeObjectRelease_n(a2, 2);
  }
  v27 = type metadata accessor for REMTrialClient(0, v26);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = v67;
  v29 = REMTrialClient.init()();
  if (!v28)
  {
    v30 = v29;
    dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()();
    v31 = REMGroceryLocaleMapping.localeSetting(for:)(v66, v25);
    v33 = REMGroceryLocaleMapping.LocaleSetting.meta.getter(v31);
    v34 = v62;
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)(v33);
    swift_bridgeObjectRelease();
    sub_1001C5DEC((uint64_t)v70);
    v55 = v15;
    if ((v65 & 1) != 0)
    {
      v25 = v71;
      swift_bridgeObjectRetain(v71);
      sub_1001CAE38(v70);
    }
    else
    {
      v67 = v8;
      v72 = v71;
      v36 = v71[2];
      if (v36)
      {
        v56 = v13;
        swift_bridgeObjectRetain(v71);
        v38 = (_QWORD *)(v37 + 40);
        v25 = _swiftEmptyArrayStorage;
        do
        {
          v43 = *(v38 - 1);
          v44 = *v38;
          v45 = v43 == 0x616C6C656373694DLL && v44 == 0xED000073756F656ELL;
          if (!v45
            && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v38 - 1), *v38, 0x616C6C656373694DLL, 0xED000073756F656ELL, 0) & 1) == 0)
          {
            swift_bridgeObjectRetain(v44);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
            v69 = v25;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001C1B0C(0, v25[2] + 1, 1);
              v25 = v69;
            }
            v40 = v25[2];
            v39 = v25[3];
            v41 = v40 + 1;
            if (v40 >= v39 >> 1)
            {
              v47 = v40 + 1;
              v66 = v40;
              sub_1001C1B0C(v39 > 1, v40 + 1, 1);
              v41 = v47;
              v40 = v66;
              v25 = v69;
            }
            v25[2] = v41;
            v42 = &v25[2 * v40];
            v42[4] = v43;
            v42[5] = v44;
          }
          v38 += 2;
          --v36;
        }
        while (v36);
        sub_1000F4320(&v72);
        v13 = v56;
        v34 = v62;
      }
      else
      {
        v25 = _swiftEmptyArrayStorage;
      }
      sub_1001CAE38(v70);
      v8 = v67;
    }
    if ((v58 & 1) != 0)
    {
      v48 = Array<A>.removingDuplicates()(v35);
      swift_bridgeObjectRelease();
      v25 = (_QWORD *)v48;
    }
    swift_bridgeObjectRetain(v25);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v52 = 134349056;
      v69 = (_QWORD *)v25[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Number of category names loaded {count: %{public}ld}", v52, 0xCu);
      v53 = v52;
      v34 = v62;
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release(v30);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v60);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v55, v63);
  }
  return v25;
}

_QWORD *sub_1001C685C(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return _swiftEmptyArrayStorage;
  v2 = swift_bridgeObjectRetain(a1);
  v3 = 0;
  v4 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *(_QWORD *)(a1 + 8 * v3 + 32);
    v18 = REMRegExTextClassifier.labels.getter(v2);
    v15 = v6;
    v7 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v8 = sub_1000A5F84(&qword_10084EF60, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
    Collection.subscript.getter(&v16, &v15, v7, v8);
    v2 = swift_bridgeObjectRelease();
    v9 = v17;
    if (v17)
    {
      v10 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1002C9530(0, v4[2] + 1, 1, v4);
      v12 = v4[2];
      v11 = v4[3];
      if (v12 >= v11 >> 1)
        v4 = sub_1002C9530((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
      v4[2] = v12 + 1;
      v5 = &v4[4 * v12];
      v5[4] = v6;
      v5[5] = v10;
      v5[6] = v9;
      *((_DWORD *)v5 + 14) = 1065353216;
    }
    ++v3;
  }
  while (v14 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t _s7remindd19REMGroceryModelTypeO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_1001C69E8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001006FC470;
    if (a2 == 0x80000001006FC470)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006FC470, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v6 = 0xE700000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6974636572726F63 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease(0xEB00000000736E6FLL);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974636572726F63, 0xEB00000000736E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001C6B50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  v2 = sub_10001A630(&qword_10083F460);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10000A388(a1, v6);
  v8 = sub_1001CAD7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys, &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys, v8, v6, v7);
  v17 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  v16 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v2);
  v11 = sub_10001A630(&qword_10083F470);
  v14 = 2;
  v12 = sub_1001CADC0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v11, &v14, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v9;
}

uint64_t sub_1001C6CEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001006FC490)
  {
    v7 = 0x80000001006FC490;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006FC490, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7079546C65646F6DLL && a2 == 0xEA00000000007365)
  {
    v8 = 0xEA00000000007365;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546C65646F6DLL, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E656B6F5478616DLL && a2 == 0xEE006874676E654CLL)
  {
    v9 = 0xEE006874676E654CLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F5478616DLL, 0xEE006874676E654CLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C6F687365726874 && a2 == 0xEA00000000007364)
  {
    v10 = 0xEA00000000007364;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874, 0xEA00000000007364, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 1315991412 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1315991412, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    v12 = 0xEA00000000007365;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001006FC2B0)
  {
    v13 = 0x80000001006FC2B0;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001006FC2B0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000001006FC2F0)
  {
    v14 = 0x80000001006FC2F0;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000001006FC2F0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x6C6E4F6969637361 && a2 == 0xE900000000000079)
  {
    v15 = 0xE900000000000079;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6E4F6969637361, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0xD000000000000014)
  {
    v16 = 0x80000001006FC4B0;
    if (a2 == 0x80000001006FC4B0)
      goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001006FC4B0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001006FC4D0)
  {
    v17 = 0x80000001006FC4D0;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001006FC4D0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD000000000000014)
  {
    v18 = 0x80000001006FC320;
    if (a2 == 0x80000001006FC320)
      goto LABEL_78;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001006FC320, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001006FC340)
  {
    swift_bridgeObjectRelease(0x80000001006FC340);
    return 13;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006FC340, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

void sub_1001C726C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  v5 = sub_10001A630(&qword_10083F680);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001CB92C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for REMGroceryClassifier.ModelInfo.CodingKeys, &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    LOBYTE(v61) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    LOBYTE(v61) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    v57 = v12;
    v58 = v13;
    v14 = sub_10001A630(&qword_10084EF00);
    v60 = 2;
    v15 = sub_1001CB970(&qword_10083F690, &qword_10084EF00);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, v14, &v60, v5, v14, v15);
    v56 = v15;
    v16 = v61;
    LOBYTE(v61) = 3;
    swift_bridgeObjectRetain(v16);
    v54 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    v55 = v16;
    v17 = sub_10001A630(&qword_10083F698);
    v60 = 4;
    v18 = sub_1001CB970(&qword_10083F6A0, &qword_10083F698);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v61, v17, &v60, v5, v17, v18);
    v19 = v61;
    LOBYTE(v61) = 5;
    v20 = v19;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v61, v5);
    v59 = v20;
    v53 = v21;
    v22 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v60 = 6;
    v23 = sub_1001CB970(&qword_10083F6A8, (uint64_t *)&unk_10083AE10);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, v22, &v60, v5, v22, v23);
    v24 = v61;
    LOBYTE(v61) = 7;
    v52 = v24;
    v25 = swift_bridgeObjectRetain(v24);
    KeyedDecodingContainer.decode(_:forKey:)(&v61, v5, v25);
    v26 = v52;
    v51 = v27;
    v50 = a2;
    v60 = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, v14, &v60, v5, v14, v56);
    v28 = v5;
    v29 = v61;
    LOBYTE(v61) = 9;
    v30 = swift_bridgeObjectRetain(v29);
    v56 = v28;
    v31 = v8;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v28, v30);
    LOBYTE(v61) = 10;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v56);
    v33 = v32;
    LOBYTE(v61) = 11;
    swift_bridgeObjectRetain(v32);
    v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v56);
    v35 = v34;
    LOBYTE(v61) = 12;
    v36 = swift_bridgeObjectRetain(v34);
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v56, v36);
    LOBYTE(v61) = 13;
    LOBYTE(v22) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v56, v37);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v56);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 = v26;
    swift_bridgeObjectRelease();
    v39 = v59;
    swift_bridgeObjectRelease();
    v40 = v55;
    swift_bridgeObjectRelease();
    v41 = v50;
    v42 = v58;
    *v50 = v57;
    v41[1] = v42;
    v43 = v54;
    v41[2] = v40;
    v41[3] = v43;
    v44 = v53;
    v41[4] = v39;
    v41[5] = v44;
    v41[6] = v38;
    *((_DWORD *)v41 + 14) = v51;
    v41[8] = v29;
    *((_BYTE *)v41 + 72) = v49;
    v41[10] = v48;
    v41[11] = v33;
    v41[12] = v47;
    v41[13] = v35;
    *((_BYTE *)v41 + 112) = v46;
    *((_BYTE *)v41 + 113) = v22;
  }
}

uint64_t sub_1001C7A18(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7079546C65646F6DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546C65646F6DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E656B6F5478616DLL && a2 == 0xEE006874676E654CLL)
  {
    v8 = 0xEE006874676E654CLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F5478616DLL, 0xEE006874676E654CLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C6F687365726874 && a2 == 0xEA00000000007364)
  {
    v9 = 0xEA00000000007364;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874, 0xEA00000000007364, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1315991412 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1315991412, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    v11 = 0xEA00000000007365;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000019)
  {
    v12 = 0x80000001006FC2B0;
    if (a2 == 0x80000001006FC2B0)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001006FC2B0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000001006FC2F0)
  {
    v13 = 0x80000001006FC2F0;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000001006FC2F0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6C6E4F6969637361 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease(0xE900000000000079);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6E4F6969637361, 0xE900000000000079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

void sub_1001C7DDC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v5 = sub_10001A630(&qword_10083F6B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001CB9C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys, &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    LOBYTE(v38) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    LOBYTE(v38) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    LOBYTE(v38) = 2;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    v36 = v13;
    v14 = sub_10001A630(&qword_10083F698);
    v37 = 3;
    v15 = sub_1001CB970(&qword_10083F6A0, &qword_10083F698);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v38, v14, &v37, v5, v14, v15);
    v16 = v38;
    LOBYTE(v38) = 4;
    swift_bridgeObjectRetain(v16);
    v33 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    v34 = v16;
    v17 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v37 = 5;
    v18 = sub_1001CB970(&qword_10083F6A8, (uint64_t *)&unk_10083AE10);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v38, v17, &v37, v5, v17, v18);
    v19 = v38;
    LOBYTE(v38) = 6;
    v32 = v19;
    v20 = swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decode(_:forKey:)(&v38, v5, v20);
    v22 = v21;
    v23 = sub_10001A630(&qword_10084EF00);
    v37 = 7;
    v24 = sub_1001CB970(&qword_10083F690, &qword_10084EF00);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v38, v23, &v37, v5, v23, v24);
    v25 = v38;
    LOBYTE(v38) = 8;
    v26 = swift_bridgeObjectRetain(v25);
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5, v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v28 = v34;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    v29 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v36;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v30;
    *(_QWORD *)(a2 + 16) = v35;
    *(_QWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 32) = v33;
    *(_QWORD *)(a2 + 40) = v29;
    *(_DWORD *)(a2 + 48) = v22;
    *(_QWORD *)(a2 + 56) = v25;
    *(_BYTE *)(a2 + 64) = v27;
  }
}

uint64_t sub_1001C8234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[4];

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  v4 = (char *)v13 - v3;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000010, 0x80000001006FC3F0, 0);
  v5 = Data.init(contentsOf:options:)(v4, 0);
  v7 = v6;
  v8 = type metadata accessor for JSONDecoder(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = JSONDecoder.init()(v9);
  v11 = sub_1001CAEF0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for REMGroceryClassifier.GlobalCorrections, v5, v7, &type metadata for REMGroceryClassifier.GlobalCorrections, v11);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  swift_release(v10);
  sub_1000A71C8(v5, v7);
  return v13[3];
}

char *sub_1001C85C0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  __n128 v35;
  void (*v36)(uint64_t, uint64_t, __n128);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  void (**v52)(char *, char *, __n128);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t (**v61)(char *, uint64_t, uint64_t);
  char *v62;
  void (*v63)(char *, char *, char *);
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, char *);
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (**v84)(char *, char *, __n128);
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  objc_class *v113;
  id v114;
  __n128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  id v126;
  id v127;
  id v128;
  NSURL *v129;
  void *v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, char *);
  unint64_t v142;
  unint64_t v143;
  void (**v144)(char *, char *, __n128);
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  __int16 v152;
  id v153;
  void (*v154)(char *, char *, __n128);
  uint64_t v155;
  char *v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, char *);
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  void (*v170)(uint64_t, char *, __n128);
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, char *);
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  __int128 v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t (**v212)(char *, uint64_t, uint64_t);
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  _QWORD *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  _QWORD *v223;
  char v224[8];
  uint64_t v225;
  uint64_t v226;
  char v227[8];
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  void *v231;
  _QWORD v232[2];
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  float v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int16 v245;

  v208 = a6;
  v200 = a5;
  v209 = a4;
  v206 = a3;
  v220 = a2;
  v213 = a1;
  v6 = type metadata accessor for URL(0);
  v217 = *(char **)(v6 - 8);
  __chkstk_darwin(v6);
  v204 = (char *)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v207 = (char *)&v183 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v183 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v183 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v183 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v183 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v183 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v183 - v26;
  __chkstk_darwin(v28);
  v30 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)&v183 - v29);
  __chkstk_darwin(v31);
  v33 = (char *)&v183 - v32;
  v34 = v223;
  sub_1001C5DEC((uint64_t)v232);
  v214 = (uint64_t)v34;
  if (v34)
  {
    swift_bridgeObjectRelease();
    v35 = swift_bridgeObjectRelease();
    v36 = (void (*)(_QWORD, _QWORD, __n128))*((_QWORD *)v217 + 1);
    v36(v220, v6, v35);
    v37 = v213;
    v38 = (char *)v6;
LABEL_3:
    ((void (*)(char *, char *))v36)(v37, v38);
    return v12;
  }
  v210 = v33;
  v218 = v24;
  v194 = v21;
  v195 = v12;
  v196 = v15;
  v212 = v30;
  v201 = v27;
  v211 = v18;
  v39 = v233;
  v40 = v235;
  v228 = v233;
  v41 = v237;
  v42 = v239;
  v43 = v242;
  v192 = v241;
  v44 = v244;
  v193 = v243;
  sub_1000F4348(&v228);
  v215 = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v41);
  v190 = v40;
  swift_bridgeObjectRetain(v40);
  v191 = v42;
  swift_bridgeObjectRetain(v42);
  v205 = v43;
  swift_bridgeObjectRetain(v43);
  sub_1001CAE38(v232);
  v184 = sub_1001C8234();
  v183 = v46;
  v199 = v47;
  v48 = *(_QWORD *)(v39 + 16);
  v216 = v41;
  v221 = (char *)v6;
  v49 = _swiftEmptyArrayStorage;
  if (!v48)
  {
    v51 = _swiftEmptyArrayStorage;
    v52 = (void (**)(char *, char *, __n128))v217;
LABEL_57:
    v144 = v52;
    sub_1000F4320(&v228);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v145 = v199;
    v219 = v51;
    if (v199)
    {
      v146 = v213;
      v147 = v220;
      v148 = v184;
      v149 = v183;
    }
    else
    {
      v148 = v232[0];
      v145 = sub_1002B0848((uint64_t)_swiftEmptyArrayStorage);
      v149 = 0;
      v146 = v213;
      v147 = v220;
    }
    v150 = v236;
    v151 = v238;
    v152 = v245;
    v153 = objc_allocWithZone((Class)type metadata accessor for REMGroceryClassifier());
    v12 = (char *)sub_1001C1258((uint64_t)v219, (uint64_t)v49, v216, v148, v149, v145, v190, v150, v151, v191, v206, v209, v200, v208, v152, SHIBYTE(v152));
    v154 = v144[1];
    v155 = v147;
    v156 = v221;
    ((void (*)(uint64_t, char *))v154)(v155, v221);
    ((void (*)(char *, char *))v154)(v146, v156);
    return v12;
  }
  v50 = (uint64_t *)(v39 + 32);
  v189 = v240 & 1;
  v188 = v234;
  v187 = 0x80000001006FC200;
  v186 = 0x80000001006FC1E0;
  v185 = 0x80000001006FC1C0;
  *(_QWORD *)&v45 = 134218242;
  v203 = v45;
  v202 = (char *)&type metadata for Any + 8;
  v51 = _swiftEmptyArrayStorage;
  v52 = (void (**)(char *, char *, __n128))v217;
  v53 = v215;
  v54 = v218;
  while (2)
  {
    v222 = v48;
    v55 = *v50;
    v223 = v50 + 1;
    v56 = (char *)v52;
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      v49 = sub_1002C9524(0, v49[2] + 1, 1, v49);
    v58 = v49[2];
    v57 = v49[3];
    if (v58 >= v57 >> 1)
      v49 = sub_1002C9524((_QWORD *)(v57 > 1), v58 + 1, 1, v49);
    v49[2] = v58 + 1;
    *((_BYTE *)v49 + v58 + 32) = v55;
    v59 = v55;
    v60 = v211;
    v61 = v212;
    switch(v59)
    {
      case 0:
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000014, v187, 0);
        v62 = v201;
        URL.appendingPathComponent(_:isDirectory:)(0x78742E6261636F76, 0xE900000000000074, 0);
        v63 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v56 + 2);
        v64 = v62;
        v65 = v41;
        v66 = v221;
        v63(v54, v64, v221);
        v67 = v194;
        v68 = v66;
        v41 = v65;
        v63(v194, v61, v68);
        v69 = *(_QWORD *)(v65 + 16);
        v70 = type metadata accessor for REMBertTextClassifier(0);
        v71 = swift_bridgeObjectRetain(v65);
        v72 = v214;
        v73 = REMBertTextClassifier.__allocating_init(vocabURL:modelURL:numOfClasses:maxLength:labels:asciiOnly:)(v54, v67, v69, v188, v65, v189, v71);
        v214 = v72;
        if (!v72)
        {
          v74 = v73;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            v51 = sub_1002C93E4(0, v51[2] + 1, 1, v51);
          v75 = v221;
          v76 = v201;
          v78 = v51[2];
          v77 = v51[3];
          if (v78 >= v77 >> 1)
            v51 = sub_1002C93E4((_QWORD *)(v77 > 1), v78 + 1, 1, v51);
          v230 = v70;
          v231 = &protocol witness table for REMBertTextClassifier;
          *(_QWORD *)&v229 = v74;
          v51[2] = v78 + 1;
          sub_10001BCA8(&v229, (uint64_t)&v51[5 * v78 + 4]);
          swift_release(v74);
          v52 = (void (**)(char *, char *, __n128))v217;
          v79 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v217 + 1);
          v79(v76, v75);
          v79(v212, v75);
          goto LABEL_29;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000F4320(&v228);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v158 = v214;
        swift_getErrorValue(v214, v227, v224);
        v159 = Error.rem_errorDescription.getter(v225, v226);
        v161 = v160;
        v162 = sub_1001CAEAC();
        v163 = swift_allocError(&type metadata for REMGroceryClassifierLoadingError, v162, 0, 0);
        *(_BYTE *)v164 = 0;
        *(_QWORD *)(v164 + 8) = v159;
        *(_QWORD *)(v164 + 16) = v161;
        swift_willThrow(v163);
        swift_errorRelease(v158);
        v165 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v56 + 1);
        v12 = v221;
        v165(v220, v221);
        v165(v213, v12);
        v165(v201, v12);
        v165(v212, v12);
        v214 = v163;
        return v12;
      case 1:
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, v186, 0);
        v93 = type metadata accessor for REMAnchoredBubbleModel(0);
        v94 = static REMAnchoredBubbleModel.loadGroceryModel(from:labels:)(v60, v41);
        if (!v94)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000F4320(&v228);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v166 = sub_1001CAEAC();
          v167 = swift_allocError(&type metadata for REMGroceryClassifierLoadingError, v166, 0, 0);
          *(_BYTE *)v168 = 1;
          *(_QWORD *)(v168 + 8) = 0xD000000000000025;
          *(_QWORD *)(v168 + 16) = 0x80000001006FC3C0;
          v214 = v167;
          swift_willThrow(v167);
          v36 = (void (*)(_QWORD, _QWORD, __n128))*((_QWORD *)v56 + 1);
          v12 = v221;
          ((void (*)(uint64_t, char *))v36)(v220, v221);
          ((void (*)(char *, char *))v36)(v213, v12);
          v37 = v60;
          goto LABEL_68;
        }
        v95 = v94;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = sub_1002C93E4(0, v51[2] + 1, 1, v51);
        v96 = v221;
        v98 = v51[2];
        v97 = v51[3];
        if (v98 >= v97 >> 1)
          v51 = sub_1002C93E4((_QWORD *)(v97 > 1), v98 + 1, 1, v51);
        v230 = v93;
        v231 = &protocol witness table for REMAnchoredBubbleModel;
        *(_QWORD *)&v229 = v95;
        v51[2] = v98 + 1;
        sub_10001BCA8(&v229, (uint64_t)&v51[5 * v98 + 4]);
        swift_release(v95);
        v52 = (void (**)(char *, char *, __n128))v217;
        (*((void (**)(char *, char *))v217 + 1))(v60, v96);
LABEL_29:
        v53 = v215;
        goto LABEL_30;
      case 2:
        v100 = v41;
        v101 = v196;
        URL.appendingPathComponent(_:isDirectory:)(0x736A2E7865676572, 0xEA00000000006E6FLL, 0);
        v102 = type metadata accessor for REMRegExTextClassifier(0);
        v103 = v195;
        (*((void (**)(char *, char *, char *))v56 + 2))(v195, v101, v221);
        v104 = *(_QWORD *)(v100 + 16);
        v105 = swift_bridgeObjectRetain(v100);
        v106 = v104;
        v107 = v214;
        v108 = REMRegExTextClassifier.__allocating_init(modelURL:numOfClasses:labels:)(v103, v106, v100, v105);
        v214 = v107;
        if (v107)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v169 = swift_bridgeObjectRelease();
          v12 = (char *)v51;
          v170 = (void (*)(_QWORD, _QWORD, __n128))*((_QWORD *)v56 + 1);
          v171 = v221;
          v170(v220, v221, v169);
          ((void (*)(char *, char *))v170)(v213, v171);
          ((void (*)(char *, char *))v170)(v101, v171);
          sub_1000F4320(&v228);
          swift_bridgeObjectRelease();
          goto LABEL_70;
        }
        v109 = v108;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = sub_1002C93E4(0, v51[2] + 1, 1, v51);
        v99 = v222;
        v110 = v221;
        v112 = v51[2];
        v111 = v51[3];
        if (v112 >= v111 >> 1)
          v51 = sub_1002C93E4((_QWORD *)(v111 > 1), v112 + 1, 1, v51);
        v230 = v102;
        v231 = (void *)sub_10009FC50(&qword_10083F5F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRegExTextClassifier, (uint64_t)&protocol conformance descriptor for REMRegExTextClassifier);
        *(_QWORD *)&v229 = v109;
        v51[2] = v112 + 1;
        sub_10001BCA8(&v229, (uint64_t)&v51[5 * v112 + 4]);
        swift_release(v109);
        v52 = (void (**)(char *, char *, __n128))v217;
        (*((void (**)(char *, char *))v217 + 1))(v101, v110);
        v53 = v215;
        v50 = v223;
        v41 = v216;
        goto LABEL_54;
      case 3:
        if (v199)
        {
          v113 = (objc_class *)type metadata accessor for REMGroceryDummyModel(0);
          v114 = objc_allocWithZone(v113);
          v115 = swift_bridgeObjectRetain(v41);
          v116 = REMGroceryDummyModel.init(labels:)(v115);
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            v51 = sub_1002C93E4(0, v51[2] + 1, 1, v51);
          v99 = v222;
          v118 = v51[2];
          v117 = v51[3];
          if (v118 >= v117 >> 1)
            v51 = sub_1002C93E4((_QWORD *)(v117 > 1), v118 + 1, 1, v51);
          v230 = (uint64_t)v113;
          v231 = &protocol witness table for REMGroceryDummyModel;
          *(_QWORD *)&v229 = v116;
          v51[2] = v118 + 1;
          sub_10001BCA8(&v229, (uint64_t)&v51[5 * v118 + 4]);
          goto LABEL_52;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000F4320(&v228);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v172 = sub_1001CAEAC();
        v173 = swift_allocError(&type metadata for REMGroceryClassifierLoadingError, v172, 0, 0);
        *(_BYTE *)v174 = 3;
        v175 = 0xD000000000000026;
        v176 = "Dummy model missing global corrections";
        goto LABEL_67;
      case 4:
        if (!v205)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000F4320(&v228);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v177 = sub_1001CAEAC();
          v173 = swift_allocError(&type metadata for REMGroceryClassifierLoadingError, v177, 0, 0);
          *(_BYTE *)v174 = 4;
          v175 = 0xD000000000000028;
          v176 = "Missing siriEmbeddingVersion for siriOwl";
LABEL_67:
          *(_QWORD *)(v174 + 8) = v175;
          *(_QWORD *)(v174 + 16) = (unint64_t)(v176 - 32) | 0x8000000000000000;
          v214 = v173;
          swift_willThrow(v173);
          v36 = (void (*)(_QWORD, _QWORD, __n128))*((_QWORD *)v56 + 1);
          v12 = v221;
          ((void (*)(uint64_t, char *))v36)(v220, v221);
          v37 = v213;
LABEL_68:
          v38 = v12;
          goto LABEL_3;
        }
        v198 = v49;
        swift_bridgeObjectRetain(v205);
        v119 = v207;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016, v185, 0);
        v120 = v193;
        v121 = v53;
        v122 = v206;
        if (!v53)
        {
          swift_bridgeObjectRetain(v209);
          v120 = v122;
        }
        v219 = (_QWORD *)v121;
        v123 = v204;
        v124 = v221;
        (*((void (**)(char *, char *, char *))v56 + 2))(v204, v119, v221);
        v125 = v216;
        v197 = *(_QWORD *)(v216 + 16);
        v126 = objc_allocWithZone((Class)MLModelConfiguration);
        swift_bridgeObjectRetain(v125);
        v127 = objc_msgSend(v126, "init", swift_bridgeObjectRetain(v53).n128_f64[0]);
        objc_msgSend(v127, "setComputeUnits:", 2);
        v128 = v127;
        URL._bridgeToObjectiveC()(v129);
        v131 = v130;
        v132 = (void *)objc_opt_self(MLModel);
        *(_QWORD *)&v229 = 0;
        v133 = objc_msgSend(v132, "modelWithContentsOfURL:configuration:error:", v131, v128, &v229);

        v134 = v229;
        if (v133)
        {
          v135 = (id)v229;

          v136 = type metadata accessor for REMOwlEmbeddingClassifier(0);
          v137 = (_QWORD *)swift_allocObject(v136, *(unsigned int *)(v136 + 48), *(unsigned __int16 *)(v136 + 52));
          v137[3] = objc_msgSend(objc_allocWithZone((Class)CDMClient), "init");
          Locale.init(identifier:)(v120, v219);

          v138 = (_QWORD *)((char *)v137 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion);
          v139 = v205;
          *v138 = v192;
          v138[1] = v139;
          v140 = v197;
          v137[4] = v133;
          v137[5] = v140;
          v137[2] = v125;
          v141 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v217 + 1);
          v141(v123, v124);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            v51 = sub_1002C93E4(0, v51[2] + 1, 1, v51);
          v49 = v198;
          v99 = v222;
          v143 = v51[2];
          v142 = v51[3];
          v41 = v216;
          if (v143 >= v142 >> 1)
            v51 = sub_1002C93E4((_QWORD *)(v142 > 1), v143 + 1, 1, v51);
          v230 = v136;
          v231 = (void *)sub_10009FC50(&qword_10083F5F0, type metadata accessor for REMOwlEmbeddingClassifier, (uint64_t)&protocol conformance descriptor for REMOwlEmbeddingClassifier);
          *(_QWORD *)&v229 = v137;
          v51[2] = v143 + 1;
          sub_10001BCA8(&v229, (uint64_t)&v51[5 * v143 + 4]);
          swift_release(v137);
          v141(v207, v221);
LABEL_52:
          v52 = (void (**)(char *, char *, __n128))v217;
          v53 = v215;
LABEL_53:
          v50 = v223;
LABEL_54:
          v48 = v99 - 1;
          v54 = v218;
          if (!v48)
            goto LABEL_57;
          continue;
        }
        v178 = (id)v229;
        v179 = _convertNSErrorToError(_:)(v134);

        v214 = v179;
        swift_willThrow(v180);

        v12 = (char *)v51;
        v181 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v217 + 1);
        v181(v123, v124);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v125, 2);
        swift_bridgeObjectRelease_n(v205, 2);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        v182 = swift_bridgeObjectRelease();
        ((void (*)(uint64_t, char *, __n128))v181)(v220, v124, v182);
        v181(v213, v124);
        v181(v207, v124);
        sub_1000F4320(&v228);
        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        return v12;
      default:
        v219 = v51;
        v80 = v49;
        if (qword_100836F58 != -1)
          swift_once(&qword_100836F58, sub_1001BC484);
        v81 = type metadata accessor for Logger(0);
        sub_10001AAA8(v81, (uint64_t)qword_10083F308);
        v82 = v210;
        v83 = v61[2](v210, v220, (uint64_t)v56);
        v84 = (void (**)(char *, char *, __n128))v61;
        v85 = Logger.logObject.getter(v83);
        v86 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v85, v86))
        {
          v87 = swift_slowAlloc(22, -1);
          v88 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v229 = v88;
          *(_DWORD *)v87 = v203;
          *(_QWORD *)(v87 + 4) = v60;
          *(_WORD *)(v87 + 12) = 2080;
          v89 = URL.description.getter();
          *(_QWORD *)(v87 + 14) = sub_10001A820(v89, v90, (uint64_t *)&v229);
          v91 = swift_bridgeObjectRelease();
          v84[1](v82, v221, v91);
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Invalid model type value %ld found in model info file %s}.", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy(v88, 1, v202);
          swift_slowDealloc(v88, -1, -1);
          v92 = v87;
          v53 = v215;
          swift_slowDealloc(v92, -1, -1);
        }
        else
        {
          ((void (*)(char *, char *))v84[1])(v82, v56);
        }

        v52 = v84;
        v49 = v80;
        v51 = v219;
        v41 = v216;
LABEL_30:
        v99 = v222;
        goto LABEL_53;
    }
  }
}

char *sub_1001C9B14(uint64_t a1, void (*a2)(char *, uint64_t), char *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t (*v60)(char *, uint64_t, __n128);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  __n128 v66;
  os_log_t v67;
  uint64_t v68;
  __n128 v69;
  void (*v70)(char *, uint64_t, __n128);
  char *v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  os_log_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v101 = a2;
  v99 = a1;
  v5 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v5 - 8);
  v92 = v5;
  __chkstk_darwin(v5);
  v89 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v88 = (char *)&v80 - v8;
  __chkstk_darwin(v9);
  v90 = (char *)&v80 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - v12;
  __chkstk_darwin(v14);
  v93 = (char *)&v80 - v15;
  v17 = __chkstk_darwin(v16);
  v96 = (char *)&v80 - v18;
  v19 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting(0, v17);
  v94 = *(_QWORD *)(v19 - 8);
  v95 = v19;
  v20 = __chkstk_darwin(v19);
  v100 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for REMGroceryLocaleMapping(0, v20);
  v97 = *(_QWORD *)(v22 - 8);
  v98 = v22;
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for REMTrialNamespace(0, v23);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v87 = v13;
    v31 = a3;
  }
  else
  {
    v37 = type metadata accessor for REMTrialClient(0, v28);
    v32 = (char *)swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v38 = REMTrialClient.init()();
    if (v3)
      return v32;
    v31 = (char *)v38;
    v87 = v13;
  }
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v27 + 104))(v30, enum case for REMTrialNamespace.grocery(_:), v26, v28);
  swift_retain();
  v32 = v31;
  v33 = dispatch thunk of REMTrialClient.deploymentId(for:)(v30);
  v35 = v34;
  v36 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()(v36);
  if (v3)
  {
    swift_release(v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    v86 = v33;
    v39 = v35;
    v40 = v100;
    v41 = REMGroceryLocaleMapping.localeSetting(for:)(v99, v101);
    v42 = REMGroceryLocaleMapping.LocaleSetting.base.getter(v41);
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)(v42);
    swift_bridgeObjectRelease();
    v44 = REMGroceryLocaleMapping.LocaleSetting.meta.getter(v43);
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)(v44);
    swift_bridgeObjectRelease();
    v45 = v92;
    if (qword_100836F58 != -1)
      swift_once(&qword_100836F58, sub_1001BC484);
    v46 = type metadata accessor for Logger(0);
    sub_10001AAA8(v46, (uint64_t)qword_10083F308);
    v47 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
    v47(v87, v96, v45);
    v85 = v47;
    v47(v90, v93, v45);
    v48 = v39;
    swift_bridgeObjectRetain_n(v39, 2);
    v49 = (unint64_t)v101;
    v50 = swift_bridgeObjectRetain_n(v101, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.info.getter(v51);
    v83 = v52;
    v53 = os_log_type_enabled(v51, v52);
    v84 = v48;
    if (v53)
    {
      v54 = swift_slowAlloc(42, -1);
      v82 = swift_slowAlloc(128, -1);
      v104 = v82;
      *(_DWORD *)v54 = 136446978;
      v81 = v51;
      swift_bridgeObjectRetain(v48);
      v102 = sub_10001A820(v86, v48, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      swift_bridgeObjectRelease_n(v48, 3);
      *(_WORD *)(v54 + 12) = 2082;
      swift_bridgeObjectRetain(v49);
      v102 = sub_10001A820(v99, v49, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      swift_bridgeObjectRelease_n(v49, 3);
      *(_WORD *)(v54 + 22) = 2082;
      v55 = v87;
      v57 = URL.absoluteString.getter(v56);
      v102 = sub_10001A820(v57, v58, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      v59 = swift_bridgeObjectRelease();
      v60 = *(uint64_t (**)(char *, uint64_t, __n128))(v91 + 8);
      v61 = v60(v55, v92, v59);
      *(_WORD *)(v54 + 32) = 2082;
      v62 = v92;
      v101 = (void (*)(char *, uint64_t))(v54 + 34);
      v63 = v90;
      v64 = URL.absoluteString.getter(v61);
      v102 = sub_10001A820(v64, v65, &v104);
      v40 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      v66 = swift_bridgeObjectRelease();
      v101 = (void (*)(char *, uint64_t))v60;
      v60(v63, v62, v66);
      v67 = v81;
      _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v83, "loading model from Trial {deploymentId: %{public}s, locale: %{public}s, base directory: %{public}s, meta directory: %{public}s}", (uint8_t *)v54, 0x2Au);
      v68 = v82;
      swift_arrayDestroy(v82, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v49, 2);
      v69 = swift_bridgeObjectRelease_n(v48, 2);
      v70 = *(void (**)(char *, uint64_t, __n128))(v91 + 8);
      v70(v87, v45, v69);
      v101 = (void (*)(char *, uint64_t))v70;
      ((void (*)(char *, uint64_t))v70)(v90, v45);

      v62 = v45;
    }
    v71 = v88;
    v72 = (uint64_t (*)(char *, char *, uint64_t))v85;
    v85(v88, v96, v62);
    v73 = (uint64_t)v89;
    v74 = v93;
    v75 = v72(v89, v93, v62);
    v76 = REMGroceryLocaleMapping.LocaleSetting.meta.getter(v75);
    v32 = sub_1001C85C0(v71, v73, v76, v77, v86, v84);
    swift_release(v31);
    v79 = v101;
    v101(v74, v62);
    v79(v96, v62);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v40, v95);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v25, v98);
  }
  return v32;
}

void _s7remindd20REMGroceryClassifierC26requestNLAssetsIfNecessary11modelLocaleySS_tFZ_0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  __C::NLLanguage v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  char v17;
  __C::NLLanguage *v18;
  void *v19;
  __C::NLLanguage *v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  NSString v24;
  id v25;
  uint64_t v26;
  NSString *v27;
  __C::NLLanguage *v28;
  void *v29;
  __C::NLLanguage *v30;
  NSString v31;
  void **aBlock;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, void *);
  void *v35;
  void (*v36)(uint64_t, uint64_t);
  __C::NLLanguage *v37;

  v5 = type metadata accessor for Locale.Components(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_bridgeObjectRetain(a2);
  Locale.Components.init(identifier:)(a1, a2, v9);
  v10._rawValue = Locale.Components.rem_language()()._rawValue;
  v11 = (void *)objc_opt_self(NLTagger);
  v12 = objc_msgSend(v11, "availableTagSchemesForUnit:language:", 0, v10._rawValue);
  type metadata accessor for NLTagScheme(0);
  v14 = v13;
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  v16 = NLTagSchemeNameTypeOrLexicalClass;
  v17 = sub_1001A61A0((uint64_t)v16, v15);
  swift_bridgeObjectRelease();

  if ((v17 & 1) == 0)
  {
    v18 = (__C::NLLanguage *)swift_allocObject(&unk_1007E8ED8, 24, 7);
    v18[2]._rawValue = v10._rawValue;
    v36 = sub_1001CB114;
    v37 = v18;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_1001BCC34;
    v35 = &unk_1007E8EF0;
    v19 = _Block_copy(&aBlock);
    v20 = v37;
    v21 = v6;
    v22 = v5;
    v23 = v10._rawValue;
    swift_release(v20);
    v24 = v23;
    v5 = v22;
    v6 = v21;
    objc_msgSend(v11, "requestAssetsForLanguage:tagScheme:completionHandler:", v24, v16, v19);
    _Block_release(v19);
  }
  v25 = objc_msgSend(v11, "availableTagSchemesForUnit:language:", 0, v10._rawValue);
  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v14);

  v27 = NLTagSchemeLemma;
  LOBYTE(v25) = sub_1001A61A0((uint64_t)v27, v26);
  swift_bridgeObjectRelease();

  if ((v25 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  }
  else
  {
    v28 = (__C::NLLanguage *)swift_allocObject(&unk_1007E8F28, 24, 7);
    v28[2]._rawValue = v10._rawValue;
    v36 = sub_1001CB14C;
    v37 = v28;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_1001BCC34;
    v35 = &unk_1007E8F40;
    v29 = _Block_copy(&aBlock);
    v30 = v37;
    v31 = v10._rawValue;
    swift_release(v30);
    objc_msgSend(v11, "requestAssetsForLanguage:tagScheme:completionHandler:", v31, v27, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1001CA548(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = (_QWORD *)swift_task_alloc(dword_10083F384);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_1000CAD70;
  return sub_1001C04A8(a1, a2, a3, v9, v8);
}

unint64_t sub_1001CA5C8()
{
  unint64_t result;

  result = qword_10083F390;
  if (!qword_10083F390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for REMGroceryModelType, &type metadata for REMGroceryModelType);
    atomic_store(result, (unint64_t *)&qword_10083F390);
  }
  return result;
}

uint64_t sub_1001CA610(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for REMGroceryClassifierError(uint64_t a1)
{
  return sub_1001CA638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1001CA638(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s7remindd25REMGroceryClassifierErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001CA610(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifierError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001CA610(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001CA638(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for REMGroceryClassifierError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001CA638(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifierError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifierError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001CA7BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifierError()
{
  return &type metadata for REMGroceryClassifierError;
}

uint64_t storeEnumTagSinglePayload for REMGroceryModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001CA820 + 4 * byte_1006AD90B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001CA854 + 4 * byte_1006AD906[v4]))();
}

uint64_t sub_1001CA854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CA85C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CA864);
  return result;
}

uint64_t sub_1001CA870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CA878);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001CA87C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CA884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryModelType()
{
  return &type metadata for REMGroceryModelType;
}

uint64_t sub_1001CA8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifierLoadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for RDSavedDueDateDeltaAlert(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifierLoadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for REMGroceryClassifierLoadingError()
{
  return &type metadata for REMGroceryClassifierLoadingError;
}

uint64_t type metadata accessor for REMGroceryClassifier()
{
  return objc_opt_self(_TtC7remindd20REMGroceryClassifier);
}

uint64_t initializeBufferWithCopyOfBuffer for REMGroceryClassifier.GlobalCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for REMGroceryClassifier.GlobalCorrections(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for REMGroceryClassifier.GlobalCorrections(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for REMGroceryClassifier.GlobalCorrections(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.GlobalCorrections()
{
  return &type metadata for REMGroceryClassifier.GlobalCorrections;
}

uint64_t destroy for REMGroceryClassifier.PredictionResult(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.PredictionResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.PredictionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.PredictionResult()
{
  return &type metadata for REMGroceryClassifier.PredictionResult;
}

unint64_t sub_1001CACF4()
{
  unint64_t result;

  result = qword_10083F428;
  if (!qword_10083F428)
  {
    result = swift_getWitnessTable(&unk_1006ADCD0, &type metadata for REMGroceryClassifier.ModelInfo);
    atomic_store(result, (unint64_t *)&qword_10083F428);
  }
  return result;
}

unint64_t sub_1001CAD38()
{
  unint64_t result;

  result = qword_10083F430;
  if (!qword_10083F430)
  {
    result = swift_getWitnessTable(&unk_1006ADCA8, &type metadata for REMGroceryClassifier.ModelInfoV2);
    atomic_store(result, (unint64_t *)&qword_10083F430);
  }
  return result;
}

unint64_t sub_1001CAD7C()
{
  unint64_t result;

  result = qword_10083F468;
  if (!qword_10083F468)
  {
    result = swift_getWitnessTable(&unk_1006ADC58, &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F468);
  }
  return result;
}

unint64_t sub_1001CADC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083F478;
  if (!qword_10083F478)
  {
    v1 = sub_1000A5A94(&qword_10083F470);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10083F478);
  }
  return result;
}

uint64_t sub_1001CAE24(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

_QWORD *sub_1001CAE38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[11];
  v6 = a1[13];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_1001CAEAC()
{
  unint64_t result;

  result = qword_10083F5E8;
  if (!qword_10083F5E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for REMGroceryClassifierLoadingError, &type metadata for REMGroceryClassifierLoadingError);
    atomic_store(result, (unint64_t *)&qword_10083F5E8);
  }
  return result;
}

unint64_t sub_1001CAEF0()
{
  unint64_t result;

  result = qword_10083F600;
  if (!qword_10083F600)
  {
    result = swift_getWitnessTable(&unk_1006ADB54, &type metadata for REMGroceryClassifier.GlobalCorrections);
    atomic_store(result, &qword_10083F600);
  }
  return result;
}

uint64_t sub_1001CAF34()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001CAF70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10083F60C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000CAD70;
  return sub_1001C0678(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001CB004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v6 = 0;
  for (i = (uint64_t *)(a1 + 48); ; i += 6)
  {
    v8 = *(i - 1);
    v9 = *i;
    v10 = v8 == a2 && v9 == a3;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, a2, a3, 0) & 1) != 0)
      break;
    if (v3 == ++v6)
      return 0;
  }
  return v6;
}

uint64_t sub_1001CB094(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1001CB0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001C1080(a1, a2, a3, *(_BYTE *)(v3 + 16), *(_BYTE *)(v3 + 17), *(_QWORD *)(v3 + 24), *(_QWORD **)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48)) & 1;
}

uint64_t sub_1001CB0F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001CB114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001BCC94(a1, a2, *(void **)(v2 + 16), "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) not available", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) error in loading asset", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) unknown result: %s", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) error: %@");
}

void sub_1001CB14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001BCC94(a1, a2, *(void **)(v2 + 16), "REMGroceryClassifier.requestAssets(%s, lemma) not available", "REMGroceryClassifier.requestAssets(%s, lemma) error in loading asset", "REMGroceryClassifier.requestAssets(%s, lemma) unknown result: %s", "REMGroceryClassifier.requestAssets(%s, lemma) error: %@");
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.GlobalCorrections.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001CB1D0 + 4 * byte_1006AD915[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001CB204 + 4 * byte_1006AD910[v4]))();
}

uint64_t sub_1001CB204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CB20C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CB214);
  return result;
}

uint64_t sub_1001CB220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CB228);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001CB22C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CB234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.GlobalCorrections.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys;
}

uint64_t destroy for REMGroceryClassifier.ModelInfoV2(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfoV2()
{
  return &type metadata for REMGroceryClassifier.ModelInfoV2;
}

uint64_t destroy for REMGroceryClassifier.ModelInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.ModelInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 114))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 114) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 114) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfo()
{
  return &type metadata for REMGroceryClassifier.ModelInfo;
}

unint64_t sub_1001CB858()
{
  unint64_t result;

  result = qword_10083F668;
  if (!qword_10083F668)
  {
    result = swift_getWitnessTable(&unk_1006ADC30, &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F668);
  }
  return result;
}

unint64_t sub_1001CB8A0()
{
  unint64_t result;

  result = qword_10083F670;
  if (!qword_10083F670)
  {
    result = swift_getWitnessTable(&unk_1006ADBA0, &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F670);
  }
  return result;
}

unint64_t sub_1001CB8E8()
{
  unint64_t result;

  result = qword_10083F678;
  if (!qword_10083F678)
  {
    result = swift_getWitnessTable(&unk_1006ADBC8, &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F678);
  }
  return result;
}

unint64_t sub_1001CB92C()
{
  unint64_t result;

  result = qword_10083F688;
  if (!qword_10083F688)
  {
    result = swift_getWitnessTable(&unk_1006ADEB8, &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F688);
  }
  return result;
}

uint64_t sub_1001CB970(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001CB9C4()
{
  unint64_t result;

  result = qword_10083F6B8;
  if (!qword_10083F6B8)
  {
    result = swift_getWitnessTable(&unk_1006ADE68, &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001CBAE4 + 4 * byte_1006AD91F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001CBB18 + 4 * byte_1006AD91A[v4]))();
}

uint64_t sub_1001CBB18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CBB20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CBB28);
  return result;
}

uint64_t sub_1001CBB34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CBB3CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001CBB40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CBB48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfoV2.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1001CBBB0 + 4 * byte_1006AD929[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001CBBE4 + 4 * byte_1006AD924[v4]))();
}

uint64_t sub_1001CBBE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CBBEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CBBF4);
  return result;
}

uint64_t sub_1001CBC00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CBC08);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1001CBC0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CBC14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfo.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys;
}

unint64_t sub_1001CBC34()
{
  unint64_t result;

  result = qword_10083F6C0;
  if (!qword_10083F6C0)
  {
    result = swift_getWitnessTable(&unk_1006ADD88, &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6C0);
  }
  return result;
}

unint64_t sub_1001CBC7C()
{
  unint64_t result;

  result = qword_10083F6C8;
  if (!qword_10083F6C8)
  {
    result = swift_getWitnessTable(&unk_1006ADE40, &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6C8);
  }
  return result;
}

unint64_t sub_1001CBCC4()
{
  unint64_t result;

  result = qword_10083F6D0;
  if (!qword_10083F6D0)
  {
    result = swift_getWitnessTable(&unk_1006ADDB0, &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6D0);
  }
  return result;
}

unint64_t sub_1001CBD0C()
{
  unint64_t result;

  result = qword_10083F6D8;
  if (!qword_10083F6D8)
  {
    result = swift_getWitnessTable(&unk_1006ADDD8, &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6D8);
  }
  return result;
}

unint64_t sub_1001CBD54()
{
  unint64_t result;

  result = qword_10083F6E0;
  if (!qword_10083F6E0)
  {
    result = swift_getWitnessTable(&unk_1006ADCF8, &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6E0);
  }
  return result;
}

unint64_t sub_1001CBD9C()
{
  unint64_t result;

  result = qword_10083F6E8;
  if (!qword_10083F6E8)
  {
    result = swift_getWitnessTable(&unk_1006ADD20, &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083F6E8);
  }
  return result;
}

void *sub_1001CBDF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  __int128 v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  Class isa;
  double v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  __int128 v19;
  void *v20;

  v1 = sub_10001A630((uint64_t *)&unk_100839E80);
  v2 = (_QWORD *)swift_allocObject(v1, 64, 7);
  *((_OWORD *)v2 + 1) = xmmword_1006A3C00;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 0xE000000000000000;
  v3._object = (void *)0x80000001006F4570;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  Date.timeIntervalSinceReferenceDate.getter(v5);
  Double.write<A>(to:)(&v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6 = v19;
  v2[7] = &type metadata for String;
  *((_OWORD *)v2 + 2) = v6;
  *(_QWORD *)&v19 = 0xD000000000000018;
  *((_QWORD *)&v19 + 1) = 0x80000001006FC4F0;
  v7._countAndFlagsBits = sub_1001CC068(*(_QWORD *)(v0
                                                  + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v20 = &type metadata for String;
  v9 = v2[2];
  v8 = v2[3];
  if (v9 >= v8 >> 1)
    v2 = sub_1002C8358((_QWORD *)(v8 > 1), v9 + 1, 1, v2);
  v2[2] = v9 + 1;
  sub_10001A6CC(&v19, &v2[4 * v9 + 4]);
  v10 = objc_autoreleasePoolPush();
  v11 = (void *)objc_opt_self(NSJSONSerialization);
  swift_bridgeObjectRetain(v2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
  *(_QWORD *)&v19 = 0;
  v14 = objc_msgSend(v11, "dataWithJSONObject:options:error:", isa, 0, &v19, v13);

  v15 = (id)v19;
  if (v14)
  {
    v16 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);

  }
  else
  {
    v16 = v15;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow(v17);
  }
  objc_autoreleasePoolPop(v10);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1001CC068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v2 = type metadata accessor for Locale(0);
  v38 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = _swiftEmptyArrayStorage;
    if (v5)
    {
      v39 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v5, 0);
      v7 = a1 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v37 = *(_QWORD *)(v38 + 72);
      v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 16);
      do
      {
        v9 = v8(v4, v7, v2);
        v10 = Locale.identifier.getter(v9);
        v12 = v11;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v2);
        v6 = (_QWORD *)v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        {
          sub_1001C1B0C(0, v6[2] + 1, 1);
          v6 = (_QWORD *)v39;
        }
        v14 = v6[2];
        v13 = v6[3];
        if (v14 >= v13 >> 1)
        {
          sub_1001C1B0C(v13 > 1, v14 + 1, 1);
          v6 = (_QWORD *)v39;
        }
        v6[2] = v14 + 1;
        v15 = &v6[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        v7 += v37;
        --v5;
      }
      while (v5);
    }
    v16 = sub_1002C8224(0, 1, 1, _swiftEmptyArrayStorage);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = sub_1002C8224((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = &v16[2 * v18];
    v19[4] = 0xD000000000000013;
    v19[5] = 0x80000001006FC510;
    v39 = 0x3A73656C61636F6CLL;
    v40 = 0xE800000000000000;
    v20 = Array.description.getter(v6, &type metadata for String);
    v22 = v21;
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v27 = v16[2];
    v26 = v16[3];
    if (v27 >= v26 >> 1)
      v16 = sub_1002C8224((_QWORD *)(v26 > 1), v27 + 1, 1, v16);
    v16[2] = v27 + 1;
    v28 = &v16[2 * v27];
    v28[4] = v25;
    v29 = v28 + 4;
  }
  else
  {
    v16 = sub_1002C8224(0, 1, 1, _swiftEmptyArrayStorage);
    v31 = v16[2];
    v30 = v16[3];
    if (v31 >= v30 >> 1)
      v16 = sub_1002C8224((_QWORD *)(v30 > 1), v31 + 1, 1, v16);
    v16[2] = v31 + 1;
    v32 = &v16[2 * v31];
    v32[4] = 0xD000000000000012;
    v29 = v32 + 4;
    v24 = 0x80000001006FC530;
  }
  v29[1] = v24;
  v39 = (uint64_t)v16;
  v33 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v34 = sub_1001CC40C();
  v35 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v33, v34);
  swift_bridgeObjectRelease();
  return v35;
}

void *sub_1001CC3A8()
{
  return sub_1001CBDF8();
}

uint64_t sub_1001CC3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for REMChecksumAlgorithm.sha512(_:);
  v3 = type metadata accessor for REMChecksumAlgorithm(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

unint64_t sub_1001CC40C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B050;
  if (!qword_10083B050)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083AE10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083B050);
  }
  return result;
}

uint64_t sub_1001CC458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F6F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F6F0);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1001CC4E8()
{
  sub_1005A6CDC();
}

uint64_t type metadata accessor for RDTodayNotificationAssembly()
{
  return objc_opt_self(_TtC7remindd27RDTodayNotificationAssembly);
}

uint64_t sub_1001CC528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v13;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000030, 0x80000001006FC670, "remindd/RDXPCEventStream.swift", 30, 2, 181, 0);
    __break(1u);
  }
  else
  {
    v1 = v0;
    *(_BYTE *)(v0 + 24) = 1;
    if (qword_100836F68 != -1)
      swift_once(&qword_100836F68, sub_1001CC708);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_10083F7A0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting XPC Event Stream", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = *(NSObject **)(v1 + 16);
    v8 = swift_allocObject(&unk_1007E93A8, 24, 7);
    swift_weakInit(v8 + 16, v1);
    aBlock[4] = sub_1001CF94C;
    v13 = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004F4824;
    aBlock[3] = &unk_1007E93C0;
    v9 = _Block_copy(aBlock);
    v10 = v13;
    swift_retain_n(v8, 2);
    swift_release(v10);
    xpc_set_event_stream_handler("com.apple.alarm", v7, v9);
    _Block_release(v9);
    return swift_release_n(v8, 2);
  }
  return result;
}

uint64_t sub_1001CC708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083F7A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083F7A0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_1001CC798()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v0 = type metadata accessor for UUID(0);
  v1 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000017;
}

Swift::Int sub_1001CC860()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001CC8CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1001CC924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001CC990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t *v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];

  v32 = a3;
  v33 = a4;
  v31 = a1;
  v8 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (unint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v5 + 16);
  *v18 = (unint64_t)v19;
  (*(void (**)(unint64_t *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  v22 = (*(uint64_t (**)(unint64_t *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) != 0)
  {
    UUID.init()(v22);
    sub_1000151E8(a5, (uint64_t)v13, type metadata accessor for RDXPCEventStream.Token);
    v23 = &v13[*(int *)(v8 + 20)];
    *(_QWORD *)v23 = v31;
    *((_QWORD *)v23 + 1) = a2;
    v24 = &v13[*(int *)(v8 + 24)];
    v25 = v33;
    *(_QWORD *)v24 = v32;
    *((_QWORD *)v24 + 1) = v25;
    sub_1000151E8((uint64_t)v13, (uint64_t)v10, type metadata accessor for RDXPCEventStream.AlarmHandler);
    v18 = (unint64_t *)(v5 + 32);
    swift_beginAccess(v5 + 32, v35, 33, 0);
    v21 = *(_QWORD *)(v5 + 32);
    swift_bridgeObjectRetain(a2);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    *(_QWORD *)(v5 + 32) = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v21 = sub_1002C8004(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
  *v18 = v21;
LABEL_3:
  v28 = *(_QWORD *)(v21 + 16);
  v27 = *(_QWORD *)(v21 + 24);
  if (v28 >= v27 >> 1)
  {
    v21 = sub_1002C8004(v27 > 1, v28 + 1, 1, v21);
    *v18 = v21;
  }
  *(_QWORD *)(v21 + 16) = v28 + 1;
  sub_1001CE4E4((uint64_t)v10, v21+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v28);
  swift_endAccess(v35);
  return sub_10001C744((uint64_t)v13, type metadata accessor for RDXPCEventStream.AlarmHandler);
}

void sub_1001CCBE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    __chkstk_darwin(v11);
    *(&v14 - 2) = a1;
    swift_beginAccess(v2 + 32, v15, 33, 0);
    sub_1001CE578((uint64_t (*)(unint64_t, __n128))sub_1001CE528, (uint64_t)(&v14 - 4), type metadata accessor for RDXPCEventStream.AlarmHandler, (uint64_t (*)(uint64_t))sub_1001CEC54);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
    if (v13 >= v12)
    {
      sub_1001CF6AC(v12, v13, (uint64_t (*)(void))sub_1002C8004, type metadata accessor for RDXPCEventStream.AlarmHandler);
      swift_endAccess(v15);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001CCD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  double v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  xpc_object_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47[2];

  v2 = v1;
  v4 = type metadata accessor for RDXPCEventStream.Alarm(0);
  __chkstk_darwin(v4);
  v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(void **)(v2 + 16);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v14 = ceil(Date.timeIntervalSince1970.getter(v13));
  if (v14 >= 9.22337204e18)
  {
    if (qword_100836F68 == -1)
    {
LABEL_11:
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10001AAA8(v22, (uint64_t)qword_10083F7A0);
      v18 = Logger.logObject.getter(v23);
      v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v18, v19))
      {
LABEL_14:

        return;
      }
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "Not scheduling alarm because timeIntervalInSeconds > Int64.max";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
      swift_slowDealloc(v20, -1, -1);
      goto LABEL_14;
    }
LABEL_24:
    swift_once(&qword_100836F68, sub_1001CC708);
    goto LABEL_11;
  }
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
    goto LABEL_22;
  if (v14 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v15 = 1000000000 * (uint64_t)v14;
  if ((unsigned __int128)((uint64_t)v14 * (__int128)1000000000) >> 64 != v15 >> 63)
  {
    if (qword_100836F68 != -1)
      swift_once(&qword_100836F68, sub_1001CC708);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_10083F7A0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_14;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Not scheduling alarm because dateInNanoSeconds > Int64.max";
    goto LABEL_13;
  }
  v24 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_date(v24, "Date", v15);
  xpc_dictionary_set_BOOL(v24, "UserVisible", *(_BYTE *)(a1 + 16));
  v25 = xpc_copy_description(v24);
  if (qword_100836F68 != -1)
    swift_once(&qword_100836F68, sub_1001CC708);
  v26 = type metadata accessor for Logger(0);
  sub_10001AAA8(v26, (uint64_t)qword_10083F7A0);
  v27 = sub_1000151E8(a1, (uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter(v28);
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(64, -1);
    v47[0] = v44;
    *(_DWORD *)v31 = 136315394;
    v43 = v30;
    v32 = String.init(cString:)(v25);
    v45 = v25;
    v34 = v33;
    v46 = sub_10001A820(v32, v33, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v31 + 12) = 2080;
    v36 = Date.description.getter(v35);
    v38 = v37;
    v46 = sub_10001A820(v36, v37, v47);
    v25 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
    swift_bridgeObjectRelease(v38);
    sub_10001C744((uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v43, "Setting xpc event {xpc_event: %s, date: %s}", (uint8_t *)v31, 0x16u);
    v39 = v44;
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_10001C744((uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
  }

  swift_slowDealloc(v25, -1, -1);
  v40 = *(_QWORD *)a1;
  v41 = *(_QWORD *)(a1 + 8);
  swift_retain(v2);
  swift_unknownObjectRetain(v24);
  sub_1001CD218(v40, v41, v2, (uint64_t)v24);
  swift_unknownObjectRelease(v24);
}

uint64_t sub_1001CD218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[2];

  v9[2] = a3;
  v9[3] = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_1001CF870, v9, a1, a2, (char *)&type metadata for () + 8);
    if (v4)
    {
LABEL_7:
      swift_unknownObjectRelease(a4);
      return swift_release(a3);
    }
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v7 = _StringObject.sharedUTF8.getter(a1, a2);
    xpc_set_event("com.apple.alarm", v7, a4);
    if (v4)
      goto LABEL_7;
LABEL_10:
    swift_release(a3);
    return swift_unknownObjectRelease(a4);
  }
  v10[0] = a1;
  v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  xpc_set_event("com.apple.alarm", v10, a4);
  swift_release(a3);
  return swift_unknownObjectRelease(a4);
}

void sub_1001CD328(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t Strong;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  const char *string;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, xpc_object_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  xpc_object_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[3];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[4];

  v4 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for DispatchPredicate(0);
  v82 = *(_QWORD **)(v83 - 8);
  __chkstk_darwin(v83);
  v9 = (uint64_t *)((char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a2 + 16;
  v87 = a1;
  v11 = xpc_copy_description(a1);
  v86 = String.init(cString:)(v11);
  v13 = v12;
  swift_slowDealloc(v11, -1, -1);
  if (qword_100836F68 != -1)
    swift_once(&qword_100836F68, sub_1001CC708);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10083F7A0);
  v16 = swift_bridgeObjectRetain_n(v13, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v81 = v7;
  v80 = v5;
  if (v19)
  {
    v20 = swift_slowAlloc(12, -1);
    v85 = v15;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v84 = v4;
    v23 = v22;
    *(_QWORD *)&v94 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(v13);
    v92 = sub_10001A820(v86, v13, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received xpc event {xpc_event: %s}", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v24 = v23;
    v4 = v84;
    swift_slowDealloc(v24, -1, -1);
    v25 = v21;
    v15 = v85;
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
  swift_beginAccess(v10, &v92, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (!Strong)
  {
    swift_bridgeObjectRelease(v13);
    return;
  }
  v27 = Strong;
  v28 = *(void **)(Strong + 16);
  *v9 = v28;
  v29 = v82;
  v30 = v83;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v82[13])(v9, enum case for DispatchPredicate.onQueue(_:), v83);
  v31 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v9);
  ((void (*)(_QWORD *, uint64_t))v29[1])(v9, v30);
  if ((v28 & 1) != 0)
  {
    v83 = v13;
    if (qword_1008371A8 == -1)
      goto LABEL_9;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008371A8, sub_1003201E8);
LABEL_9:
  v94 = xmmword_1006ADF60;
  v96 = 0;
  v97[0] = 0;
  v95 = 0;
  *(_QWORD *)((char *)v97 + 6) = 0;
  sub_10001B228((uint64_t)&v94, 0x6C7070612E6D6F63, 0xEF6D72616C612E65);
  string = xpc_dictionary_get_string(v87, _xpc_event_key_name);
  if (!string)
  {
    v43 = v83;
    swift_bridgeObjectRetain(v83);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v45, v46))
    {

      swift_release(v27);
      swift_bridgeObjectRelease_n(v43, 2);
      return;
    }
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = v27;
    v49 = swift_slowAlloc(32, -1);
    v90[0] = v49;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(v43);
    v91 = sub_10001A820(v86, v43, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease_n(v43, 3);
    v50 = "Received xpc_event missing name {xpc_event: %s}";
    goto LABEL_21;
  }
  v33 = string;
  v34 = String.init(cString:)(string);
  v36 = v35;
  v37 = swift_bridgeObjectRetain_n(v35, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v84 = v4;
  v85 = v15;
  if (v40)
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v90[0] = v42;
    *(_DWORD *)v41 = 136315138;
    swift_bridgeObjectRetain(v36);
    v91 = sub_10001A820(v34, v36, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease_n(v36, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unsetting alarm {eventName: %s}", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v36, 2);
  }
  xpc_set_event("com.apple.alarm", v33, 0);
  swift_beginAccess(v27 + 32, v90, 0, 0);
  v51 = *(_QWORD *)(v27 + 32);
  swift_bridgeObjectRetain(v51);
  v53 = sub_1001CF08C(v52, v34, v36);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v36);
  v54 = v53[2];
  if (!v54)
  {
    swift_bridgeObjectRelease(v53);
    v61 = v83;
    swift_bridgeObjectRetain(v83);
    v45 = Logger.logObject.getter(v62);
    v46 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v45, v46))
    {

      swift_bridgeObjectRelease_n(v61, 2);
      swift_release(v27);
      return;
    }
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = v27;
    v49 = swift_slowAlloc(32, -1);
    v91 = v49;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(v61);
    v88 = sub_10001A820(v86, v61, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_bridgeObjectRelease_n(v61, 3);
    v50 = "Received xpc_event with no handlers -- Dropping {xpc_event: %s}";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v45, v46, v50, v47, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v47, -1, -1);
    swift_release(v48);

    return;
  }
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRetain(v53);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.info.getter(v56);
  v58 = os_log_type_enabled(v56, v57);
  v82 = v53;
  if (v58)
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v59 = 134217984;
    v91 = v53[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Delivering xpc_event to handlers {handlers.count: %ld}", v59, 0xCu);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v53);
  }
  v63 = (uint64_t)v81;
  v64 = v80;
  v83 = v27;
  v65 = Logger.logObject.getter(v60);
  v66 = static os_log_type_t.default.getter(v65);
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "os_transaction INIT {name: com.apple.remindd.xpcalarm}", v67, 2u);
    swift_slowDealloc(v67, -1, -1);
  }

  v79 = os_transaction_create("com.apple.remindd.xpcalarm");
  v68 = v63 + *(int *)(v84 + 24);
  v69 = (uint64_t *)(v63 + *(int *)(v84 + 20));
  v70 = (uint64_t)v82 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
  v86 = *(_QWORD *)(v64 + 72);
  do
  {
    sub_1000151E8(v70, v63, type metadata accessor for RDXPCEventStream.AlarmHandler);
    v72 = *(void (**)(uint64_t, uint64_t, xpc_object_t))v68;
    v71 = *(_QWORD *)(v68 + 8);
    v73 = *v69;
    v74 = v69[1];
    swift_retain(v71);
    swift_bridgeObjectRetain(v74);
    sub_10001C744(v63, type metadata accessor for RDXPCEventStream.AlarmHandler);
    v72(v73, v74, v87);
    swift_release(v71);
    swift_bridgeObjectRelease(v74);
    v70 += v86;
    --v54;
  }
  while (v54);
  swift_bridgeObjectRelease(v82);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.default.getter(v76);
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "os_transaction RELEASE {name: com.apple.remindd.xpcalarm}", v78, 2u);
    swift_slowDealloc(v78, -1, -1);
    swift_release(v83);

  }
  else
  {

    swift_release(v83);
  }
  swift_unknownObjectRelease(v79);
}

uint64_t sub_1001CDD04()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for RDXPCEventStream()
{
  return objc_opt_self(_TtC7remindd16RDXPCEventStream);
}

uint64_t type metadata accessor for RDXPCEventStream.SystemXPCEventInterface()
{
  return objc_opt_self(_TtCC7remindd16RDXPCEventStreamP33_42BD93B4E4BDBF740267D11659A1191423SystemXPCEventInterface);
}

uint64_t sub_1001CDD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1001CDDB4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001CDDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001CDE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001CDE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001CDEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001CDEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CDF04);
}

uint64_t sub_1001CDF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001CDF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CDF4C);
}

uint64_t sub_1001CDF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RDXPCEventStream.Token(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083F968, (uint64_t)&nominal type descriptor for RDXPCEventStream.Token);
}

uint64_t sub_1001CDFA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1001CE008(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)v4 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v12);
  }
  swift_retain(v15);
  return v4;
}

uint64_t sub_1001CE0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1001CE108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v11);
  swift_retain(v14);
  return a1;
}

uint64_t sub_1001CE188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  v16 = v13[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_1001CE228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001CE28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_1001CE310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CE31C);
}

uint64_t sub_1001CE31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RDXPCEventStream.Token(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001CE39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CE3A8);
}

uint64_t sub_1001CE3A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RDXPCEventStream.Token(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RDXPCEventStream.AlarmHandler(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083F9F8, (uint64_t)&nominal type descriptor for RDXPCEventStream.AlarmHandler);
}

uint64_t sub_1001CE438(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006AE000;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001CE4B8()
{
  return sub_10009FC50(&qword_10083FA38, type metadata accessor for RDXPCEventStream.Token, (uint64_t)&unk_1006AE088);
}

uint64_t sub_1001CE4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CE528(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_1001CE554(uint64_t (*a1)(unint64_t, __n128), uint64_t a2)
{
  sub_1001CE578(a1, a2, type metadata accessor for RDStoreControllerNotificationCenter.Observer, (uint64_t (*)(uint64_t))sub_1001CEBD8);
}

void sub_1001CE578(uint64_t (*a1)(unint64_t, __n128), uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(_QWORD);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  uint64_t *v36;
  uint64_t (*v37)(uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  uint64_t (*v44)(unint64_t, __n128);

  v7 = v4;
  v44 = a1;
  v42 = a3;
  v8 = a3(0);
  v9 = __chkstk_darwin(v8);
  v40 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v39 = (uint64_t)&v36 - v12;
  __chkstk_darwin(v11);
  v41 = (uint64_t)&v36 - v14;
  v15 = *v4;
  v16 = *(_QWORD *)(*v4 + 16);
  if (v16)
  {
    v37 = a4;
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v18 = *(_QWORD *)(v13 + 72);
    v19 = swift_bridgeObjectRetain(v15);
    v20 = 0;
    v38 = v17;
    while (1)
    {
      v21 = v44(v15 + v17, v19);
      if (v5)
      {
LABEL_6:
        swift_bridgeObjectRelease(v15);
        return;
      }
      if ((v21 & 1) != 0)
        break;
      ++v20;
      v17 += v18;
      if (v16 == v20)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease(v15);
    if (!__OFADD__(v20, 1))
    {
      v22 = *(_QWORD *)(v15 + 16);
      if (v20 + 1 == v22)
        return;
      v23 = v18 + v17;
      v24 = v20 + 1;
      v36 = v4;
      while (v24 < v22)
      {
        v25 = v18;
        v26 = v7;
        v43 = v23;
        v27 = v41;
        v28 = v42;
        sub_1000151E8(v15 + v23, v41, v42);
        v29 = ((uint64_t (*)(uint64_t))v44)(v27);
        sub_10001C744(v27, v28);
        if ((v29 & 1) != 0)
        {
          v7 = v26;
          v18 = v25;
        }
        else
        {
          v7 = v26;
          v18 = v25;
          if (v24 != v20)
          {
            if ((v20 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v30 = *v26;
            v31 = *(_QWORD *)(*v26 + 16);
            if (v20 >= v31)
              goto LABEL_32;
            v32 = v42;
            sub_1000151E8(v30 + v38 + v20 * v25, v39, v42);
            if (v24 >= v31)
              goto LABEL_33;
            sub_1000151E8(v30 + v43, v40, v32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
            v7 = v36;
            *v36 = v30;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v30 = v37(v30);
              *v7 = v30;
            }
            if (v20 >= *(_QWORD *)(v30 + 16))
              goto LABEL_34;
            sub_1001CF8A4(v40, v30 + v38 + v20 * v25, v32);
            if (v24 >= *(_QWORD *)(*v7 + 16))
              goto LABEL_35;
            sub_1001CF8A4(v39, *v7 + v43, v32);
          }
          if (__OFADD__(v20++, 1))
            goto LABEL_30;
        }
        v35 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_29;
        v15 = *v7;
        v22 = *(_QWORD *)(*v7 + 16);
        ++v24;
        v23 = v43 + v18;
        if (v35 == v22)
          return;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1001CE87C(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1002C874C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for REMRemindersListDataView.DatesModel.Group(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  return sub_1001CF8E8(a3);
}

char *sub_1001CEA44(uint64_t a1, int64_t a2, _OWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  _OWORD *v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1002C9748(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = &v5[6 * a1 + 4];
  result = (char *)swift_arrayDestroy(v14, v8, &type metadata for REMGroceryClassifier.PredictionResult);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 3);
    v19 = (char *)&v5[6 * a2 + 4];
    if (v14 + 3 != (_OWORD *)v19 || result >= &v19[48 * v18])
      result = (char *)memmove(result, v19, 48 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = a3[1];
      *v14 = *a3;
      v14[1] = v22;
      v14[2] = a3[2];
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001CEBD8(unint64_t a1)
{
  return sub_1002C7FDC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001CEBF0(unint64_t a1)
{
  return sub_1002C84A0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001CEC04(unint64_t a1)
{
  return sub_1002C88E4(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1001CEC18(_QWORD *a1)
{
  return sub_1002C91F0(0, a1[2], 0, a1);
}

_QWORD *sub_1001CEC2C(_QWORD *a1)
{
  return sub_1002C8EEC(0, a1[2], 0, a1);
}

_QWORD *sub_1001CEC40(_QWORD *a1)
{
  return sub_1002C9748(0, a1[2], 0, a1);
}

uint64_t sub_1001CEC54(unint64_t a1)
{
  return sub_1002C8004(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1001CEC68(_QWORD *a1)
{
  return sub_1002C9978(0, a1[2], 0, a1);
}

uint64_t sub_1001CEC7C(unint64_t a1)
{
  return sub_1002C9F60(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1001CEC90(_QWORD *a1)
{
  return sub_1002CA590(0, a1[2], 0, a1);
}

uint64_t sub_1001CECA4(unint64_t a1)
{
  return sub_1002CA9C8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001CECB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_1001CED20(uint64_t a1, uint64_t a2)
{
  return sub_1001CF6AC(a1, a2, (uint64_t (*)(void))sub_1002C7FDC, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
}

uint64_t sub_1001CED34(uint64_t a1, uint64_t a2)
{
  return sub_1001CED5C(a1, a2, (unint64_t *)&qword_10083AE90, (unint64_t *)off_1007D6708);
}

uint64_t sub_1001CED48(uint64_t a1, uint64_t a2)
{
  return sub_1001CED5C(a1, a2, &qword_100840C10, (unint64_t *)off_1007D6670);
}

uint64_t sub_1001CED5C(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v6 = a1;
    v8 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v8 < 0)
    v28 = v8;
  else
    v28 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v11 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease();
  if (v11 < v4)
    goto LABEL_34;
LABEL_4:
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v10 = (unint64_t *)(v6 - v4);
  if (__OFSUB__(0, v8))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v11 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v12 - v8;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v11 < 0)
      v30 = v11;
    else
      v30 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v16 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease();
    v11 = *v5;
    goto LABEL_15;
  }
LABEL_37:
  if (v11 < 0)
    v29 = v11;
  else
    v29 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v12 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease();
  v13 = (uint64_t)v10 + v12;
  if (__OFADD__(v12, v10))
    goto LABEL_42;
LABEL_8:
  v11 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v11;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v15 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  v36 = v6;
  v6 = v8;
  v8 = (uint64_t)v10;
  v10 = v7;
  v7 = v9;
  if ((unint64_t)v11 >> 62)
    goto LABEL_43;
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain(v11);
  *v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v16, 1, v11);
  swift_bridgeObjectRelease();
  v15 = *v5 & 0xFFFFFFFFFFFFFF8;
  v9 = v7;
  v7 = v10;
  v10 = (unint64_t *)v8;
  v8 = v6;
  v6 = v36;
LABEL_18:
  v17 = v15 + 32;
  v18 = (char *)(v15 + 32 + 8 * v6);
  v19 = sub_1000151B0(0, v7, v9);
  v20 = (void *)swift_arrayDestroy(v18, v8, v19);
  if (!v10)
    return specialized Array._endMutation()(v20);
  v21 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v4;
    if (!__OFSUB__(v22, v4))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v21 < 0)
    v31 = *v5;
  else
    v31 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v5);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease();
  v23 = v32 - v4;
  if (__OFSUB__(v32, v4))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (char *)(v17 + 8 * v4);
    if (v6 != v4 || v18 >= &v24[8 * v23])
      v20 = memmove(v18, v24, 8 * v23);
    v4 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      v25 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      v26 = (char *)v10 + v25;
      if (!__OFADD__(v25, v10))
      {
LABEL_27:
        *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
        return specialized Array._endMutation()(v20);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v4 < 0)
      v33 = v4;
    else
      v33 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease();
    v26 = (char *)v10 + v34;
    if (!__OFADD__(v34, v10))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v35 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v35, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001CF08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v26 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  v7 = __chkstk_darwin(v26);
  v27 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  result = _swiftEmptyArrayStorage;
  v28 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v24 = v3;
    v25 = (v14 + 32) & ~v14;
    v16 = a1 + v25;
    v17 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000151E8(v16, (uint64_t)v11, type metadata accessor for RDXPCEventStream.AlarmHandler);
      v18 = &v11[*(int *)(v26 + 20)];
      v19 = *((_QWORD *)v18 + 1);
      v20 = *(_QWORD *)v18 == a2 && v19 == a3;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v18, v19, a2, a3, 0) & 1) != 0)
      {
        v21 = a3;
        sub_1001CE4E4((uint64_t)v11, v27);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          sub_1001C20DC(0, v17[2] + 1, 1);
        v17 = v28;
        v23 = v28[2];
        v22 = v28[3];
        if (v23 >= v22 >> 1)
        {
          sub_1001C20DC(v22 > 1, v23 + 1, 1);
          v17 = v28;
        }
        v17[2] = v23 + 1;
        sub_1001CE4E4(v27, (uint64_t)v17 + v25 + v23 * v15);
        a3 = v21;
      }
      else
      {
        sub_10001C744((uint64_t)v11, type metadata accessor for RDXPCEventStream.AlarmHandler);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
    return v28;
  }
  return result;
}

void *sub_1001CF260(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1002C9114(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_10001A630((uint64_t *)&unk_10083FA50);
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v17[16 * v16])
      result = memmove(&v4[2 * a1 + 4], v17, 16 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001CF3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001CF6AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = a4(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  result = swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v20 = *(_QWORD *)(v6 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_28;
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (v17 < v16 * a2 || v18 >= v15 + v16 * a2 + v21 * v16)
    {
      result = swift_arrayInitWithTakeFrontToBack(v18);
    }
    else if (v17 != v16 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v18);
    }
    v23 = *(_QWORD *)(v6 + 16);
    v24 = __OFADD__(v23, v10);
    v25 = v23 - v9;
    if (!v24)
    {
      *(_QWORD *)(v6 + 16) = v25;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RDXPCEventStream.Alarm(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083FAC0, (uint64_t)&nominal type descriptor for RDXPCEventStream.Alarm);
}

uint64_t sub_1001CF870(uint64_t a1)
{
  uint64_t v1;

  return xpc_set_event("com.apple.alarm", a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001CF8A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001CF8E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10083FA60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001CF928()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001CF94C(void *a1)
{
  uint64_t v1;

  sub_1001CD328(a1, v1);
}

_QWORD *sub_1001CF954(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1001CF9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1001CFA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1001CFAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001CFB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001CFBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001CFC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CFC20);
}

uint64_t sub_1001CFC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1001CFC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CFCA8);
}

uint64_t sub_1001CFCA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001CFD1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1006AE000;
  v4[1] = &unk_1006AE0C8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001CFD98(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10083FB48, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_1001CFDD4(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_1001D52F8(v2, (uint64_t)v5);
  return sub_1001CFE64;
}

void (*sub_1001CFE68(_QWORD *a1, void *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = sub_1001D53BC(v4, a2);
  return sub_1001CFEC0;
}

void sub_1001CFEC0(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

void (*sub_1001CFEF4(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1001D5490(v6, a2, a3);
  return sub_1001CFF60;
}

void (*sub_1001CFF64(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1001D5524(v6, a2, a3);
  return sub_1001CFF60;
}

void sub_1001CFFD0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

void (*sub_1001D0008(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_1001D5604(v2, (uint64_t)v5);
  return sub_1001CFE64;
}

void sub_1001D0098(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_1001D00EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083FB00);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083FB00);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1001D017C(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Subtasks;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t Configuration;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  id v42;
  void *v43;
  __n128 v44;
  uint64_t v45;
  double (*v46)(char *, uint64_t);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  objc_class *v64;
  objc_class *v65;
  objc_class *v66;
  objc_class *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  id v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  char *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;

  v132 = a2;
  v135 = a1;
  v119 = a3;
  v3 = sub_10001A630(&qword_100839AA0);
  v4 = __chkstk_darwin(v3);
  v114 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v4);
  v7 = __chkstk_darwin(v6);
  v115 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.TemplateSectionsModel(0, v7);
  v117 = *(_QWORD *)(v9 - 8);
  v118 = v9;
  __chkstk_darwin(v9);
  v122 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v124 = (char *)&v109 - v12;
  v123 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v112 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v120 = (char *)&v109 - v15;
  __chkstk_darwin(v16);
  v116 = (char *)&v109 - v17;
  __chkstk_darwin(v18);
  v127 = (char *)&v109 - v19;
  v20 = sub_10001A630(&qword_100839A90);
  __chkstk_darwin(v20);
  v113 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v126 = (uint64_t)&v109 - v23;
  v24 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v24);
  v130 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v129);
  v128 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v131 = (uint64_t)&v109 - v28;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v30 = *(_QWORD *)(Subtasks - 8);
  v31 = __chkstk_darwin(Subtasks);
  v134 = (char *)&v109 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration(0, v31);
  v34 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v36 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v109 - v38;
  v41 = (char *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter(v40);
  v42 = v133;
  sub_1001D0C64(v41, (uint64_t)v135, v132);
  if (v42)
  {

  }
  else
  {
    v110 = v30;
    v111 = Subtasks;
    v132 = 0;
    v133 = v43;
    v45 = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter(v44);
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.fetchSubtasks.getter(v45);
    v46 = *(double (**)(char *, uint64_t))(v34 + 8);
    v47.n128_f64[0] = v46(v39, Configuration);
    v48 = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter(v47);
    v49 = (uint64_t)v130;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.sortingStyle.getter(v48);
    v46(v36, Configuration);
    v50 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    v51 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    v52 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v128, v50, v51);
    swift_storeEnumTagMultiPayload(v52, v129, 2);
    v53 = v131;
    sub_1004957D0(v49, v52, v131);
    v54 = v135;
    v55 = v132;
    v56 = sub_1001D6E14((uint64_t)v41, v135, (uint64_t)v134, v53);
    if (v55)
    {

      sub_1001D8B58(v53);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v134, v111);
    }
    else
    {
      v57 = (uint64_t)v56;
      v130 = v41;
      sub_1001D8B58(v53);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v134, v111);
      v58 = v54;
      v134 = (char *)objc_msgSend(v133, "accountID");
      v59 = objc_msgSend(v54, "persistentStoreOfAccountWithAccountID:");
      v60 = v59;
      if (v59)
      {
        v61 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v62 = swift_allocObject(v61, 40, 7);
        *(_OWORD *)(v62 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v62 + 32) = v60;
        v136 = v62;
        v59 = (id)specialized Array._endMutation()(v62);
      }
      v63 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter(v59);
      if (qword_1008372C0 != -1)
        swift_once(&qword_1008372C0, sub_100374590);
      v64 = (objc_class *)qword_100871E70;
      sub_1003746B0();
      v66 = v65;
      v67 = (objc_class *)sub_100374B40();
      v68 = sub_100374DD8((uint64_t)v63, 1, (uint64_t)v58, v64, v66, v67);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69 = (_QWORD *)sub_1001DFF24(v68);
      swift_bridgeObjectRelease();
      v70 = sub_1001327A0(v69, v57);
      swift_bridgeObjectRelease();
      v71 = v126;
      sub_1001D0FD8(v58, v134, v126);
      v72 = objc_msgSend(v125, "fetchResultTokenToDiffAgainst");
      v73 = v127;
      sub_1001D11B4(v72);
      v132 = 0;

      v74 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      v75 = v114;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v114, 1, 1, v74);
      v76 = v115;
      REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v70, v75, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
      sub_100008868(v71, v113, &qword_100839A90);
      v133 = v133;
      REMRemindersListDataView.TemplateSectionsModel.init(sectionsModel:listRepresentationOfTemplate:manualOrderingID:)(v76);
      if (qword_100836F70 != -1)
        swift_once(&qword_100836F70, sub_1001D00EC);
      v77 = type metadata accessor for Logger(0);
      sub_10001AAA8(v77, (uint64_t)qword_10083FB00);
      v78 = v121;
      v79 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
      v80 = v116;
      v81 = v123;
      v79(v116, v73, v123);
      v82 = v120;
      v83 = v79;
      v79(v120, v73, v81);
      swift_bridgeObjectRetain(v57);
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.default.getter(v85);
      if (os_log_type_enabled(v85, v86))
      {
        v87 = swift_slowAlloc(32, -1);
        *(_DWORD *)v87 = 134218496;
        v88 = *(_QWORD *)(v57 + 16);
        swift_bridgeObjectRelease();
        v136 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        swift_bridgeObjectRelease();
        *(_WORD *)(v87 + 12) = 2048;
        v90 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v89);
        if ((v90 & 0xC000000000000001) != 0)
        {
          if (v90 >= 0)
            v90 &= 0xFFFFFFFFFFFFFF8uLL;
          v91 = __CocoaSet.count.getter(v90);
        }
        else
        {
          v91 = *(_QWORD *)(v90 + 16);
        }
        v97 = v120;
        v98 = swift_bridgeObjectRelease();
        v135 = *(id *)(v121 + 8);
        ((void (*)(char *, uint64_t, __n128))v135)(v80, v123, v98);
        v136 = v91;
        v99 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        *(_WORD *)(v87 + 22) = 2048;
        v100 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v99);
        if ((v100 & 0xC000000000000001) != 0)
        {
          if (v100 >= 0)
            v100 &= 0xFFFFFFFFFFFFFF8uLL;
          v101 = __CocoaSet.count.getter(v100);
        }
        else
        {
          v101 = *(_QWORD *)(v100 + 16);
        }
        v96 = v112;
        v102 = swift_bridgeObjectRelease();
        v94 = v123;
        ((void (*)(char *, __n128))v135)(v97, v102);
        v136 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "REMRemindersListDataView.TemplateSectionsInvocation: reminders %ld updated %ld inserted %ld", (uint8_t *)v87, 0x20u);
        swift_slowDealloc(v87, -1, -1);

        v95 = v118;
      }
      else
      {
        v92 = *(void **)(v78 + 8);
        v135 = v92;
        ((void (*)(char *, uint64_t))v92)(v82, v81);
        ((void (*)(char *, uint64_t))v92)(v80, v81);

        v93 = swift_bridgeObjectRelease_n(v57, 2);
        v94 = v81;
        v95 = v118;
        v96 = v112;
      }
      v103 = v117;
      v104 = v124;
      (*(void (**)(char *, char *, uint64_t, __n128))(v117 + 16))(v122, v124, v95, v93);
      v105 = v96;
      v106 = v127;
      v83(v96, v127, v94);
      v107 = sub_10009FC50(&qword_10083FB88, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsModel);
      v108 = sub_10009FC50((unint64_t *)&unk_10083FB90, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v122, v105, v95, v107, v108);

      (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v95);
      ((void (*)(char *, uint64_t))v135)(v106, v94);
      sub_10000882C(v126, &qword_100839A90);
    }
  }
}

void sub_1001D0C64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Class isa;
  double v14;
  uint64_t v15;
  Class v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  __n128 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;

  v7 = objc_msgSend(objc_allocWithZone((Class)REMListsDataViewInvocation_fetchByTemplateObjectID), "initWithTemplateObjectID:", a1);
  sub_10015C404(a2);
  v9 = v8;

  if (v3)
    return;
  v10 = objc_opt_self(REMListsDataViewInvocationResult);
  v11 = swift_dynamicCastObjCClass(v9, v10);
  if (!v11)
  {
    v28 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", a1);
    swift_willThrow(v28);
LABEL_21:

    return;
  }
  v12 = (void *)v11;
  v33 = v9;
  isa = (Class)objc_msgSend(v12, "accountStorages");
  if (!isa)
  {
    v15 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v15);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v16 = (Class)objc_msgSend(v12, "listStorages", v14);
  if (!v16)
  {
    v17 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v17);
    v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v18 = (void *)objc_opt_self(REMListsDataView);
  v19 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v20 + 32) = a1;
  specialized Array._endMutation()(v20);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v32 = a1;
  v21 = Array._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v18, "listsFromAccountStorages:listStorages:store:requestedListIDs:", isa, v16, a3, v21, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v22)
  {
LABEL_20:
    v31 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v32);
    swift_willThrow(v31);

    goto LABEL_21;
  }
  v23 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v29 = v24;
    else
      v29 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease();
    if (v30)
      goto LABEL_10;
    goto LABEL_19;
  }
  if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_10:
  if ((v24 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v24 + 32);
LABEL_13:
    v26 = v25;
    v27 = swift_bridgeObjectRelease();
    REMList.codable.getter(v27);

    return;
  }
  __break(1u);
}

uint64_t sub_1001D0FD8@<X0>(void *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t Configuration;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char ManualOrdering;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v31 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration(0, v7);
  v11 = *(_QWORD *)(Configuration - 8);
  v12 = __chkstk_darwin(Configuration);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter(v12);
  ManualOrdering = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.shouldFetchManualOrderingID.getter(v15);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, Configuration);
  if ((ManualOrdering & 1) != 0)
  {
    v18 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter(v17);
    v19 = objc_msgSend(v18, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v24 = sub_10049D5F4((void *)6, v21, v23, v31, a1);
    if (!v24)
      v24 = objc_msgSend((id)objc_opt_self(REMManualOrdering), "newObjectID");
    v25 = v24;
    v26 = REMObjectID.codable.getter(v24);
    REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)(v26, 6, v21, v23);

    v27 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a3, 0, 1, v27);
  }
  else
  {
    v29 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a3, 1, 1, v29);
  }
}

void sub_1001D11B4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  char v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  os_log_type_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  os_log_type_t v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *v73;
  os_log_type_t v74;
  const char *v75;
  uint64_t v76;
  id v77;
  os_log_type_t v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  os_log_type_t v82;
  const char *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  void *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *ObjCClassFromMetadata;
  id v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;

  if (!a1)
  {
    v2 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
      v97 = &_swiftEmptySetSingleton;
      goto LABEL_102;
    }
LABEL_114:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
      v97 = v107;
    }
    else
    {
      v97 = &_swiftEmptySetSingleton;
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
        goto LABEL_102;
    }
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
      v98 = v109;
LABEL_103:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
        v100 = v99;
        goto LABEL_106;
      }
LABEL_105:
      v100 = &_swiftEmptySetSingleton;
      v101 = &_swiftEmptySetSingleton;
      if ((v2 & 0xC000000000000000) == 0)
      {
LABEL_110:
        REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v97, v98, v100, v101, &_swiftEmptySetSingleton);
        return;
      }
LABEL_106:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
        v101 = v102;
      }
      else
      {
        v101 = &_swiftEmptySetSingleton;
      }
      goto LABEL_110;
    }
LABEL_102:
    v98 = &_swiftEmptySetSingleton;
    if ((v2 & 0xC000000000000000) == 0)
      goto LABEL_105;
    goto LABEL_103;
  }
  v127 = &_swiftEmptySetSingleton;
  v125 = &_swiftEmptySetSingleton;
  v126 = &_swiftEmptySetSingleton;
  v124 = &_swiftEmptySetSingleton;
  v3 = a1;
  sub_100502B8C(v3);
  v110 = v1;
  if (!v1)
  {
    v5 = v4;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v108 = v4;
      else
        v108 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v6 = _CocoaArrayWrapper.endIndex.getter(v108);
      swift_bridgeObjectRelease();
      if (v6)
      {
LABEL_5:
        v7 = 0;
        v117 = v5 & 0xC000000000000001;
        v111 = v5 + 32;
        v112 = v5 & 0xFFFFFFFFFFFFFF8;
        v114 = v5;
        v115 = v3;
        v113 = v6;
        while (1)
        {
          if (v117)
          {
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
          }
          else
          {
            if (v7 >= *(_QWORD *)(v112 + 16))
              goto LABEL_113;
            v8 = *(id *)(v111 + 8 * v7);
          }
          v9 = v8;
          if (__OFADD__(v7++, 1))
          {
            __break(1u);
            goto LABEL_112;
          }
          v11 = objc_msgSend(v8, "changes");
          if (!v11)
          {
            if (qword_100836F70 != -1)
              swift_once(&qword_100836F70, sub_1001D00EC);
            v90 = type metadata accessor for Logger(0);
            sub_10001AAA8(v90, (uint64_t)qword_10083FB00);
            v91 = v9;
            v92 = Logger.logObject.getter(v91);
            v93 = static os_log_type_t.info.getter(v92);
            if (os_log_type_enabled(v92, v93))
            {
              v94 = swift_slowAlloc(12, -1);
              v2 = swift_slowAlloc(8, -1);
              *(_DWORD *)v94 = 138412290;
              *(_QWORD *)(v94 + 4) = v91;
              *(_QWORD *)v2 = v91;
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v94, 0xCu);
              v95 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v2, 1, v95);
              swift_slowDealloc(v2, -1, -1);
              swift_slowDealloc(v94, -1, -1);

            }
            else
            {

            }
            goto LABEL_7;
          }
          v12 = v11;
          v13 = sub_1000151B0(0, &qword_10083FB80, NSPersistentHistoryChange_ptr);
          v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

          v119 = v14;
          if (!((unint64_t)v14 >> 62))
          {
            v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v15)
              break;
            goto LABEL_99;
          }
          v96 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v14);
          v15 = _CocoaArrayWrapper.endIndex.getter(v96);
          swift_bridgeObjectRelease();
          if (v15)
            break;
LABEL_99:

          swift_bridgeObjectRelease();
LABEL_7:
          if (v7 == v6)
          {
            swift_bridgeObjectRelease();
            v103 = v127;
            v105 = v125;
            v104 = v126;
            v106 = v124;
LABEL_121:
            REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v103, v104, v105, v106, &_swiftEmptySetSingleton);
            goto LABEL_122;
          }
        }
        v118 = type metadata accessor for REMCDSavedReminder();
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v118);
        sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
        if (v15 >= 1)
        {
          v116 = v9;
          v16 = 0;
          v17 = v14;
          v120 = v15;
          v121 = v14 & 0xC000000000000001;
          v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          while (1)
          {
            v19 = v121
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v17)
                : *(id *)(v17 + 8 * v16 + 32);
            v20 = v19;
            v21 = objc_msgSend(v19, "changedObjectID", v110);
            v22 = objc_msgSend(v21, v18[214]);
            v2 = (uint64_t)objc_msgSend(ObjCClassFromMetadata, v18[214]);
            v23 = static NSObject.== infix(_:_:)(v2);

            if ((v23 & 1) == 0)
              break;

            v24 = sub_100500E7C(v21);
            if (!v24)
              goto LABEL_19;
            v2 = (uint64_t)v24;
            v25 = swift_dynamicCastClass(v24, v118);
            if (!v25)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v53 = type metadata accessor for Logger(0);
              sub_10001AAA8(v53, (uint64_t)qword_10083FB00);
              v54 = v21;
              v55 = Logger.logObject.getter(v54);
              v56 = static os_log_type_t.fault.getter();
              if (!os_log_type_enabled(v55, v56))
              {

LABEL_70:
                v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
                goto LABEL_20;
              }
              v57 = swift_slowAlloc(12, -1);
              v58 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v57 = 138412290;
              *(_QWORD *)(v57 + 4) = v54;
              *v58 = v54;

              _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed to cast managedObject to REMCDSavedReminder {objectID: %@}", (uint8_t *)v57, 0xCu);
              v59 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v58, 1, v59);
              swift_slowDealloc(v58, -1, -1);
              v60 = v57;
              v17 = v119;
              swift_slowDealloc(v60, -1, -1);

              goto LABEL_57;
            }
            v26 = (void *)v25;
            v2 = (uint64_t)(id)v2;
            v27 = objc_msgSend(v26, "remObjectID");
            if (!v27)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v61 = type metadata accessor for Logger(0);
              sub_10001AAA8(v61, (uint64_t)qword_10083FB00);
              v62 = v21;
              v55 = Logger.logObject.getter(v62);
              v63 = static os_log_type_t.error.getter(v55);
              if (!os_log_type_enabled(v55, v63))
              {

                goto LABEL_70;
              }
              v64 = swift_slowAlloc(12, -1);
              v65 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v64 = 138412290;
              *(_QWORD *)(v64 + 4) = v62;
              *v65 = v62;

              _os_log_impl((void *)&_mh_execute_header, v55, v63, "Failed to get remObjectID from REMCDSavedReminder {objectID: %@}", (uint8_t *)v64, 0xCu);
              v66 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v65, 1, v66);
              v67 = v65;
              v17 = v119;
              swift_slowDealloc(v67, -1, -1);
              swift_slowDealloc(v64, -1, -1);

LABEL_57:
              v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
              goto LABEL_20;
            }
            v28 = v27;
            v29 = objc_msgSend(v20, "changeType");
            if (v29 != (id)2)
            {
              if (v29 == (id)1)
              {
                v30 = (void *)REMObjectID.codable.getter(1);
                goto LABEL_72;
              }
              if (!v29)
              {
                v30 = (void *)REMObjectID.codable.getter(0);
LABEL_72:
                sub_1002DB304((Swift::Int *)&v123, v30);

                goto LABEL_73;
              }
            }

LABEL_20:
            if (v120 == ++v16)
            {

              swift_bridgeObjectRelease();
              v5 = v114;
              v3 = v115;
              v6 = v113;
              goto LABEL_7;
            }
          }
          v31 = type metadata accessor for REMCDTemplate();
          v32 = swift_getObjCClassFromMetadata(v31);
          v33 = v22;
          v2 = (uint64_t)objc_msgSend((id)v32, v18[214]);
          LOBYTE(v32) = static NSObject.== infix(_:_:)(v2);

          if ((v32 & 1) != 0)
          {

            v34 = sub_100500E7C(v21);
            if (!v34)
              goto LABEL_44;
            v2 = (uint64_t)v34;
            v35 = swift_dynamicCastClass(v34, v31);
            if (!v35)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v68 = type metadata accessor for Logger(0);
              sub_10001AAA8(v68, (uint64_t)qword_10083FB00);
              v69 = v21;
              v48 = Logger.logObject.getter(v69);
              v70 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v48, v70))
              {
                v71 = swift_slowAlloc(12, -1);
                v72 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v71 = 138412290;
                *(_QWORD *)(v71 + 4) = v69;
                *v72 = v69;
                v73 = v48;
                v74 = v70;
                v75 = "Failed to cast managedObject to REMCDTemplate {objectID: %@}";
                goto LABEL_78;
              }
LABEL_79:

LABEL_87:
LABEL_88:
              v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
              v17 = v119;
              goto LABEL_20;
            }
            v36 = (void *)v35;
            v2 = (uint64_t)(id)v2;
            v37 = objc_msgSend(v36, "remObjectID");
            if (!v37)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v76 = type metadata accessor for Logger(0);
              sub_10001AAA8(v76, (uint64_t)qword_10083FB00);
              v77 = v21;
              v48 = Logger.logObject.getter(v77);
              v78 = static os_log_type_t.error.getter(v48);
              if (os_log_type_enabled(v48, v78))
              {
                v79 = swift_slowAlloc(12, -1);
                v80 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v79 = 138412290;
                *(_QWORD *)(v79 + 4) = v77;
                *v80 = v77;
                v81 = v48;
                v82 = v78;
                v83 = "Failed to get remObjectID from REMCDTemplate {objectID: %@}";
LABEL_84:
                _os_log_impl((void *)&_mh_execute_header, v81, v82, v83, (uint8_t *)v79, 0xCu);
                v89 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v80, 1, v89);
                swift_slowDealloc(v80, -1, -1);
                swift_slowDealloc(v79, -1, -1);

                goto LABEL_85;
              }
              goto LABEL_89;
            }
            v38 = v37;
            v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
            v17 = v119;
            if (objc_msgSend(v20, "changeType") == (id)1)
              goto LABEL_43;
          }
          else
          {
            v39 = type metadata accessor for REMCDTemplateSection();
            v2 = (uint64_t)objc_msgSend((id)swift_getObjCClassFromMetadata(v39), v18[214]);
            v40 = static NSObject.== infix(_:_:)(v2);

            if ((v40 & 1) == 0)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v46 = type metadata accessor for Logger(0);
              sub_10001AAA8(v46, (uint64_t)qword_10083FB00);
              v47 = v21;
              v48 = Logger.logObject.getter(v47);
              v49 = static os_log_type_t.debug.getter();
              v2 = v49;
              if (!os_log_type_enabled(v48, v49))
              {

                goto LABEL_87;
              }
              v50 = swift_slowAlloc(12, -1);
              v51 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v50 = 138412290;
              *(_QWORD *)(v50 + 4) = v47;
              *v51 = v47;
              _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v2, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v50, 0xCu);
              v52 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v51, 1, v52);
              swift_slowDealloc(v51, -1, -1);
              swift_slowDealloc(v50, -1, -1);

              goto LABEL_86;
            }
            v41 = sub_100500E7C(v21);
            if (!v41)
            {
LABEL_44:

              goto LABEL_88;
            }
            v2 = (uint64_t)v41;
            v42 = swift_dynamicCastClass(v41, v39);
            if (!v42)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v84 = type metadata accessor for Logger(0);
              sub_10001AAA8(v84, (uint64_t)qword_10083FB00);
              v69 = v21;
              v48 = Logger.logObject.getter(v69);
              v85 = static os_log_type_t.fault.getter();
              if (!os_log_type_enabled(v48, v85))
                goto LABEL_79;
              v71 = swift_slowAlloc(12, -1);
              v72 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v71 = 138412290;
              *(_QWORD *)(v71 + 4) = v69;
              *v72 = v69;
              v73 = v48;
              v74 = v85;
              v75 = "Failed to cast managedObject to REMCDTemplateSection {objectID: %@}";
LABEL_78:
              _os_log_impl((void *)&_mh_execute_header, v73, v74, v75, (uint8_t *)v71, 0xCu);
              v86 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v72, 1, v86);
              swift_slowDealloc(v72, -1, -1);
              swift_slowDealloc(v71, -1, -1);

LABEL_85:
LABEL_86:

              goto LABEL_87;
            }
            v43 = (void *)v42;
            v2 = (uint64_t)(id)v2;
            v44 = objc_msgSend(v43, "remObjectID");
            if (!v44)
            {
              if (qword_100836F70 != -1)
                swift_once(&qword_100836F70, sub_1001D00EC);
              v87 = type metadata accessor for Logger(0);
              sub_10001AAA8(v87, (uint64_t)qword_10083FB00);
              v77 = v21;
              v48 = Logger.logObject.getter(v77);
              v88 = static os_log_type_t.error.getter(v48);
              if (os_log_type_enabled(v48, v88))
              {
                v79 = swift_slowAlloc(12, -1);
                v80 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v79 = 138412290;
                *(_QWORD *)(v79 + 4) = v77;
                *v80 = v77;
                v81 = v48;
                v82 = v88;
                v83 = "Failed to get remObjectID from REMCDTemplateSection {objectID: %@}";
                goto LABEL_84;
              }
LABEL_89:

              goto LABEL_87;
            }
            v38 = v44;
            v18 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
            v17 = v119;
            if (objc_msgSend(v20, "changeType") == (id)1)
            {
LABEL_43:
              v45 = (void *)REMObjectID.codable.getter(1);
              sub_1002DB304((Swift::Int *)&v123, v45);

LABEL_73:
              goto LABEL_20;
            }
          }

LABEL_19:
          goto LABEL_20;
        }
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    v106 = &_swiftEmptySetSingleton;
    v105 = &_swiftEmptySetSingleton;
    v104 = &_swiftEmptySetSingleton;
    v103 = &_swiftEmptySetSingleton;
    goto LABEL_121;
  }
LABEL_122:

}

void sub_1001D20FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v4, v6);
  v11 = sub_10009FC50((unint64_t *)&qword_10083A850, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SortingDirection);
  v12 = v9;
  swift_bridgeObjectRetain(v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v24, v4, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v4, v11);
  v13 = v24;
  v14 = v23;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v13 == v14)
    v15 = -1;
  else
    v15 = 1;
  if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v10);
    v16 = (uint64_t)sub_1001E8DD4(v21);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v16 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
  }
  v24 = v16;
  v17 = v22;
  sub_1001D3FE0(&v24, v15);
  if (v17)
  {
    swift_release(v24);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v18 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v24 = *a1;
    *a1 = 0x8000000000000000;
    sub_10028BBA8(v18, v12, isUniquelyReferenced_nonNull_native);
    v20 = *a1;
    *a1 = v24;

    swift_bridgeObjectRelease(v20);
  }
}

uint64_t sub_1001D22D4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Subtasks;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  id v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  id v104;
  char *v105;
  char v106[48];
  uint64_t v107;

  v95 = a5;
  v98 = a4;
  v101 = a3;
  v10 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v10);
  v103 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v105 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v102 = (char *)&v90 - v16;
  v96 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v96);
  v97 = (uint64_t *)((char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v19 = *(_QWORD *)(Subtasks - 8);
  *(_QWORD *)&v20 = __chkstk_darwin(Subtasks).n128_u64[0];
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v104 = objc_msgSend(v23, "remObjectID", v20);
  if (!v104)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a6, 1, 1, v12);
  v99 = a6;
  v100 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a2, Subtasks);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v22, Subtasks);
  if ((_DWORD)v24 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
    goto LABEL_3;
  if ((_DWORD)v24 != enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    if ((_DWORD)v24 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
      __break(1u);
      return result;
    }
    v69 = *(_QWORD *)v101;
    v27 = v99;
    if (*(_QWORD *)(*(_QWORD *)v101 + 16))
    {
      v30 = v104;
      v70 = v104;
      v71 = sub_1002C66DC((uint64_t)v70);
      v28 = v12;
      if ((v72 & 1) != 0)
      {
        v73 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v71);
        swift_bridgeObjectRetain(v73);

        v29 = v100;
        if ((unint64_t)v73 >> 62)
        {
          if (v73 < 0)
            v88 = v73;
          else
            v88 = v73 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v73);
          v26 = _CocoaArrayWrapper.endIndex.getter(v88);
          swift_bridgeObjectRelease_n(v73, 2);
        }
        else
        {
          v26 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease(v73);
        }
        v25 = 0;
      }
      else
      {

        v25 = 0;
        v26 = 0;
        v29 = v100;
      }
      goto LABEL_5;
    }
    v25 = 0;
    v26 = 0;
LABEL_4:
    v28 = v12;
    v29 = v100;
    v30 = v104;
    goto LABEL_5;
  }
  v33 = *(_QWORD *)v101;
  if (!*(_QWORD *)(*(_QWORD *)v101 + 16))
  {
LABEL_3:
    v25 = 0;
    v26 = 0;
    v27 = v99;
    goto LABEL_4;
  }
  v30 = v104;
  v34 = v104;
  v35 = sub_1002C66DC((uint64_t)v34);
  if ((v36 & 1) == 0)
  {

    v25 = 0;
    v26 = 0;
    v28 = v12;
    v27 = v99;
    v29 = v100;
    goto LABEL_5;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
  swift_bridgeObjectRetain(v37);

  if ((unint64_t)v37 >> 62)
  {
    if (v37 < 0)
      v86 = v37;
    else
      v86 = v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v38 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRetain(v37);
    v87 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v37);
    v39 = (uint64_t)v103;
    if (!v87)
      goto LABEL_31;
  }
  else
  {
    v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    v39 = (uint64_t)v103;
    if (!v38)
    {
LABEL_31:
      v43 = v6;
      goto LABEL_32;
    }
  }
  v40 = v97;
  sub_1001D8AD8(v98, (uint64_t)v97);
  if (swift_getEnumCaseMultiPayload(v40, v96) != 4)
  {
    sub_1001D8B58((uint64_t)v40);
    goto LABEL_31;
  }
  v41 = v40;
  v42 = *v40;
  v34 = (id)v41[1];
  v101 = v41[2];
  v96 = v41[3];
  v94 = v41[4];

  v43 = v6;
  if (!v42)
  {
LABEL_32:
    v28 = v12;
LABEL_33:
    v29 = v100;
    goto LABEL_34;
  }
  v28 = v12;
  if (!v95)
  {
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v42);
    goto LABEL_33;
  }
  v92 = (uint64_t)v34;
  v93 = v42;
  v97 = (_QWORD *)v37;
  v95 = v95;
  v34 = sub_10053CA80();
  v44 = type metadata accessor for RDManualSortIDCache();
  v37 = v44;
  v29 = v100;
  if (qword_1008376B8 != -1)
    goto LABEL_74;
  while (1)
  {
    v45 = qword_10084C438;
    __chkstk_darwin(v44);
    *(&v90 - 4) = v37;
    *(&v90 - 3) = (uint64_t)v34;
    *(&v90 - 2) = v45;
    OS_dispatch_queue.sync<A>(execute:)(&v107, sub_1001D92EC);
    v46 = v107;
    v47 = type metadata accessor for RDManualSortIDAdapter();
    swift_allocObject(v47, 33, 7);
    v34 = (id)sub_10018C174(v46, (uint64_t)v34, 0);
    v48 = objc_msgSend(v23, "remObjectID");
    if (!v48)
      goto LABEL_52;
    v49 = v48;
    v50 = sub_10001A630((uint64_t *)&unk_10083AD90);
    inited = swift_initStackObject(v50, v106);
    *(_OWORD *)(inited + 16) = xmmword_1006A7330;
    *(_QWORD *)(inited + 32) = v23;
    v107 = inited;
    specialized Array._endMutation()(inited);
    v52 = v107;
    v53 = v23;
    sub_10011F580(v52);
    v55 = v54;
    swift_bridgeObjectRelease(v52);
    sub_10018D378(v55);
    v57 = v56;
    swift_bridgeObjectRelease(v55);
    v58 = v49;
    v23 = (void *)sub_1002B18C8(v58, v57);
    swift_bridgeObjectRelease(v57);

    if (v23)
    {
      v59 = v92;
      v60 = sub_100239574((uint64_t)v23, v92);
      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v96);
      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v93);
      v39 = (uint64_t)v103;
      if (v60)
      {
        if (*(_QWORD *)(v60 + 16))
        {
          v91 = v34;
          v34 = v97;
          swift_bridgeObjectRetain(v97);
          sub_10011F1B8(v61);
          v98 = v43;
          v63 = v62;
          swift_bridgeObjectRelease(v34);
          v64 = sub_1002EC450(v63);
          sub_10018D378(v64);
          v66 = v65;
          swift_bridgeObjectRelease(v63);
          v67 = v64;
          v29 = v100;
          v39 = (uint64_t)v103;
          swift_bridgeObjectRelease(v67);
          v68 = sub_1001D6BDC(v60, v66, (unint64_t)v34);
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v60);
          swift_release(v91);
          swift_release(v23);

          swift_bridgeObjectRelease(v66);
          v37 = (uint64_t)v68;
          v43 = v98;
          goto LABEL_34;
        }
        swift_release(v23);
        swift_bridgeObjectRelease(v60);
      }
      else
      {
        swift_release(v23);
      }
      swift_release(v34);

    }
    else
    {
LABEL_52:
      swift_release(v34);

      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v96);
      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v93);
      v39 = (uint64_t)v103;
    }
    v37 = (uint64_t)v97;
LABEL_34:
    v100 = v38;
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v89 = v37;
      else
        v89 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v38 = _CocoaArrayWrapper.endIndex.getter(v89);
      v98 = v43;
      if (!v38)
      {
LABEL_71:
        v25 = (char *)_swiftEmptyArrayStorage;
        goto LABEL_72;
      }
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v37);
      v98 = v43;
      if (!v38)
        goto LABEL_71;
    }
    if (v38 >= 1)
      break;
    __break(1u);
LABEL_74:
    v44 = swift_once(&qword_1008376B8, sub_1004A3E44);
  }
  v74 = 0;
  v101 = v37 & 0xC000000000000001;
  v25 = (char *)_swiftEmptyArrayStorage;
  v75 = v37;
  do
  {
    if (v101)
      v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v37);
    else
      v76 = *(id *)(v37 + 8 * v74 + 32);
    v77 = v76;
    v78 = objc_msgSend(v76, "remObjectID");
    if (v78)
    {
      v79 = v78;
      v80 = REMObjectID.codable.getter(v78);
      REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)(v80, 0, 0);

      v81 = 0;
    }
    else
    {
      v81 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v39, v81, 1, v28);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v39, 1, v28) == 1)
    {
      sub_10000882C(v39, &qword_10083FB68);
    }
    else
    {
      v82 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 32);
      v83 = v102;
      v82(v102, v39, v28);
      v82(v105, (uint64_t)v83, v28);
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        v25 = (char *)sub_1002C8478(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
      v85 = *((_QWORD *)v25 + 2);
      v84 = *((_QWORD *)v25 + 3);
      if (v85 >= v84 >> 1)
        v25 = (char *)sub_1002C8478(v84 > 1, v85 + 1, 1, (unint64_t)v25);
      *((_QWORD *)v25 + 2) = v85 + 1;
      v82(&v25[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v85], (uint64_t)v105, v28);
      v39 = (uint64_t)v103;
    }
    ++v74;
    v37 = v75;
  }
  while (v38 != v74);
LABEL_72:
  swift_bridgeObjectRelease_n(v37, 2);
  v27 = v99;
  v26 = v100;
  v30 = v104;
LABEL_5:
  v31 = REMObjectID.codable.getter(v24);
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)(v31, 0, v26, v25);

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
}

uint64_t sub_1001D2C50@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, id *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Subtasks;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  id v28;
  double v29;
  id v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id *v41;
  char isUniquelyReferenced_nonNull_native;
  id v43;
  __n128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t, uint64_t, __n128);
  __n128 v51;
  double *v52;
  char *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t, __n128);
  __n128 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double *v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double v85;
  double v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  id *v92;
  uint64_t v93;
  char *v94;
  id v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;

  v91 = a6;
  v92 = a5;
  v93 = a4;
  v96 = a7;
  v10 = sub_10001A630(&qword_100846B60);
  v11 = *(_QWORD *)(v10 - 8);
  v99 = v10;
  v100 = v11;
  __chkstk_darwin(v10);
  v94 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (char *)&v87 - v14;
  v15 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v89 = *(_QWORD *)(v15 - 8);
  v90 = (void *)v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v19 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a1;
  v97 = v22;
  sub_1001D32C8(a2);
  v95 = v23;
  v25 = v24;
  v26 = v24 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a3, Subtasks);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, Subtasks);
  if (v27 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
  {
    v28 = v97;
LABEL_3:
    v29 = *(double *)&v95;
LABEL_13:
    v101 = v28;
    v54 = type metadata accessor for REMCDSavedReminder();
    v55 = v28;
    v56 = v96;
    REMSortableElement.init(element:sortIndex:)(&v101, *(_QWORD *)&v29, v26, v54);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v56, 0, 1, v99);
  }
  if (v27 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    v28 = v97;
    v30 = objc_msgSend(v97, "remObjectID");
    if (!v30)
      goto LABEL_3;
    v31 = *(_QWORD *)v93;
    if (!*(_QWORD *)(*(_QWORD *)v93 + 16))
    {

      goto LABEL_3;
    }
    v32 = v30;
    v33 = sub_1002C66DC((uint64_t)v32);
    if ((v34 & 1) == 0)
    {

      goto LABEL_3;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v33);
    swift_bridgeObjectRetain(v35);

    __chkstk_darwin(v36);
    *(&v87 - 2) = a2;
    v37 = v98;
    sub_100350C10((void (*)(unsigned __int8 **))sub_1001D9230, (uint64_t)(&v87 - 4), v35);
    v39 = v38;
    swift_bridgeObjectRelease(v35);
    v40 = v32;
    swift_bridgeObjectRetain(v39);
    v41 = v92;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v92);
    v101 = *v41;
    *v41 = (id)0x8000000000000000;
    sub_10028CFA0(v39, v40, isUniquelyReferenced_nonNull_native);
    v43 = *v41;
    *v41 = v101;

    v44 = swift_bridgeObjectRelease(v43);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease(v39);

      v26 = 0;
      goto LABEL_3;
    }
    v45 = v89;
    v22 = v90;
    (*(void (**)(char *, uint64_t, void *, __n128))(v89 + 16))(v17, v91, v90, v44);
    v46 = (*(uint64_t (**)(char *, void *))(v45 + 88))(v17, v22);
    if (v46 == enum case for REMRemindersListDataView.SortingDirection.ascending(_:))
    {
      v47 = *(_QWORD *)(v39 + 16);
      if (v47)
      {
        v95 = v40;
        v98 = v37;
        v48 = v39 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
        v49 = *(_QWORD *)(v100 + 72);
        v50 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v100 + 16);
        v93 = v39;
        v51 = swift_bridgeObjectRetain(v39);
        v52 = (double *)_swiftEmptyArrayStorage;
        v53 = v88;
        do
        {
          v58 = v99;
          v50(v53, v48, v99, v51);
          v59 = REMSortableElement.sortIndex.getter(v58);
          v61 = v60;
          (*(void (**)(char *, uint64_t))(v100 + 8))(v53, v58);
          if ((v61 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
              v52 = (double *)sub_1002C9978(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
            v63 = *((_QWORD *)v52 + 2);
            v62 = *((_QWORD *)v52 + 3);
            if (v63 >= v62 >> 1)
              v52 = (double *)sub_1002C9978((_QWORD *)(v62 > 1), v63 + 1, 1, v52);
            *((_QWORD *)v52 + 2) = v63 + 1;
            *(_QWORD *)&v52[v63 + 4] = v59;
          }
          v48 += v49;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease_n(v93, 2);
        v28 = v97;
        v40 = v95;
      }
      else
      {
        swift_bridgeObjectRelease(v39);
        v52 = (double *)_swiftEmptyArrayStorage;
      }
      v76 = *((_QWORD *)v52 + 2);
      v26 = v76 == 0;
      if (v76)
      {
        v77 = v52[4];
        v78 = v76 - 1;
        if (v78)
        {
          v79 = v52 + 5;
          do
          {
            v80 = *v79++;
            v81 = v80;
            if (v80 < v77)
              v77 = v81;
            --v78;
          }
          while (v78);
        }
LABEL_52:
        v29 = v77;
LABEL_54:
        swift_bridgeObjectRelease(v52);

        goto LABEL_13;
      }
      goto LABEL_53;
    }
    if (v46 == enum case for REMRemindersListDataView.SortingDirection.descending(_:))
    {
      v64 = *(_QWORD *)(v39 + 16);
      if (v64)
      {
        v95 = v40;
        v98 = v37;
        v65 = v39 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
        v66 = *(_QWORD *)(v100 + 72);
        v67 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v100 + 16);
        v93 = v39;
        v68 = swift_bridgeObjectRetain(v39);
        v52 = (double *)_swiftEmptyArrayStorage;
        v69 = v94;
        do
        {
          v70 = v99;
          v67(v69, v65, v99, v68);
          v71 = REMSortableElement.sortIndex.getter(v70);
          v73 = v72;
          (*(void (**)(char *, uint64_t))(v100 + 8))(v69, v70);
          if ((v73 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
              v52 = (double *)sub_1002C9978(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
            v75 = *((_QWORD *)v52 + 2);
            v74 = *((_QWORD *)v52 + 3);
            if (v75 >= v74 >> 1)
              v52 = (double *)sub_1002C9978((_QWORD *)(v74 > 1), v75 + 1, 1, v52);
            *((_QWORD *)v52 + 2) = v75 + 1;
            *(_QWORD *)&v52[v75 + 4] = v71;
          }
          v65 += v66;
          --v64;
        }
        while (v64);
        swift_bridgeObjectRelease_n(v93, 2);
        v28 = v97;
        v40 = v95;
      }
      else
      {
        swift_bridgeObjectRelease(v39);
        v52 = (double *)_swiftEmptyArrayStorage;
      }
      v82 = *((_QWORD *)v52 + 2);
      v26 = v82 == 0;
      if (v82)
      {
        v77 = v52[4];
        v83 = v82 - 1;
        if (v83)
        {
          v84 = v52 + 5;
          do
          {
            v85 = *v84++;
            v86 = v85;
            if (v77 < v85)
              v77 = v86;
            --v83;
          }
          while (v83);
        }
        goto LABEL_52;
      }
LABEL_53:
      v29 = 0.0;
      goto LABEL_54;
    }
  }
  else
  {
    v28 = v97;
    v29 = *(double *)&v95;
    if (v27 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
      goto LABEL_13;
    _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
    __break(1u);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v22, v22);
  __break(1u);
  return result;
}

void sub_1001D32C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = type metadata accessor for Date(0);
  __chkstk_darwin(v2);
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D8AD8(a1, (uint64_t)v7);
  v8 = (char *)&loc_1001D33DC + dword_1001D357C[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_1001D33EC()
{
  uint64_t v0;

  sub_1001D8B58(v0);
  return 0;
}

uint64_t sub_1001D3594@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;

  v13 = *a1;
  v5 = v13;
  sub_1001D32C8(a2);
  v7 = v6;
  v9 = v8 & 1;
  v10 = type metadata accessor for REMCDSavedReminder();
  REMSortableElement.init(element:sortIndex:)(&v13, v7, v9, v10);
  v11 = sub_10001A630(&qword_100846B60);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 0, 1, v11);
}

uint64_t sub_1001D3638(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t sub_1001D367C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

void sub_1001D36C0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Subtasks;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  __n128 v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  id v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;

  v57 = a2;
  v58 = a4;
  v56 = a3;
  v62 = a1;
  v6 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v65 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v61 = (char *)&v56 - v13;
  v14 = sub_10001A630(&qword_100846B60);
  v66 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v68 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v17 = *(_QWORD *)(Subtasks - 8);
  v18 = __chkstk_darwin(Subtasks);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMSortableElement.element.getter(&v69, v14, v18);
  v21 = v69;
  v63 = objc_msgSend(v69, "remObjectID");
  if (!v63)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a5, 1, 1, v9);

    return;
  }
  v67 = v10;
  v64 = v9;
  v60 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v62, Subtasks);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, Subtasks);
  v59 = v21;
  if ((_DWORD)v22 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
  {
    v23 = 0;
    v24 = 0;
    v25 = v60;
    v26 = v63;
    v27 = v64;
LABEL_35:
    v54 = REMObjectID.codable.getter(v22);
    REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)(v54, 0, v24, v23);

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v25, 0, 1, v27);
    return;
  }
  v26 = v63;
  if ((_DWORD)v22 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    v28 = *(_QWORD *)v57;
    if (!*(_QWORD *)(*(_QWORD *)v57 + 16))
    {
      v23 = 0;
      v24 = 0;
      v25 = v60;
      v27 = v64;
      goto LABEL_35;
    }
    v29 = v63;
    v30 = sub_1002C66DC((uint64_t)v29);
    v27 = v64;
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v30);
      swift_bridgeObjectRetain(v32);

      v57 = *(_QWORD *)(v32 + 16);
      v33 = sub_1000A5F84(&qword_10083FB50, &qword_100846B60, (uint64_t)&protocol conformance descriptor for REMSortableElement<A>);
      v34 = Array<A>.sorted(by:)(v56, v32, v14, v33);
      swift_bridgeObjectRelease(v32);
      v35 = *(_QWORD *)(v34 + 16);
      if (v35)
      {
        v36 = v34 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
        v62 = *(_QWORD *)(v66 + 72);
        v58 = *(uint64_t **)(v66 + 16);
        v56 = v34;
        v37 = swift_bridgeObjectRetain(v34);
        v23 = _swiftEmptyArrayStorage;
        do
        {
          ((void (*)(char *, unint64_t, uint64_t, __n128))v58)(v68, v36, v14, v37);
          REMSortableElement.element.getter(&v69, v14, v38);
          v39 = v69;
          v40 = objc_msgSend(v69, "remObjectID");
          if (v40)
          {
            v41 = v40;
            v42 = REMObjectID.codable.getter(v40);
            REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)(v42, 0, 0);

            v43 = v67;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v8, 0, 1, v27);
          }
          else
          {
            v43 = v67;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v8, 1, 1, v27);

          }
          (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v14);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v8, 1, v27) == 1)
          {
            sub_10000882C((uint64_t)v8, &qword_10083FB68);
          }
          else
          {
            v44 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
            v45 = v61;
            v44(v61, v8, v27);
            v44(v65, v45, v27);
            if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
              v23 = (_QWORD *)sub_1002C8478(0, v23[2] + 1, 1, (unint64_t)v23);
            v47 = v23[2];
            v46 = v23[3];
            if (v47 >= v46 >> 1)
              v23 = (_QWORD *)sub_1002C8478(v46 > 1, v47 + 1, 1, (unint64_t)v23);
            v23[2] = v47 + 1;
            v48 = (unint64_t)v23
                + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))
                + *(_QWORD *)(v67 + 72) * v47;
            v27 = v64;
            v44((char *)v48, v65, v64);
          }
          v36 += v62;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease_n(v56, 2);
        v25 = v60;
        v26 = v63;
      }
      else
      {
        swift_bridgeObjectRelease(v34);
        v23 = _swiftEmptyArrayStorage;
        v25 = v60;
      }
      v24 = v57;
      goto LABEL_35;
    }

LABEL_29:
    v23 = 0;
    v24 = 0;
    v25 = v60;
    goto LABEL_35;
  }
  if ((_DWORD)v22 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
  {
    v49 = *v58;
    v27 = v64;
    if (*(_QWORD *)(*v58 + 16))
    {
      v50 = v63;
      v51 = sub_1002C66DC((uint64_t)v50);
      if ((v52 & 1) != 0)
      {
        v53 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v51);
        swift_bridgeObjectRetain(v53);

        if ((unint64_t)v53 >> 62)
        {
          if (v53 < 0)
            v55 = v53;
          else
            v55 = v53 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v53);
          v24 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease_n(v53, 2);
        }
        else
        {
          v24 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease(v53);
        }
        v23 = 0;
      }
      else
      {

        v23 = 0;
        v24 = 0;
      }
      v25 = v60;
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
  __break(1u);
}

uint64_t sub_1001D3CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006AE238);
  KeyPath = swift_getKeyPath(&unk_1006AE280);
  *(_QWORD *)(v1 + 40) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_10083FB18 = v1;
  return result;
}

uint64_t sub_1001D3D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006AE200);
  *(_QWORD *)(v1 + 32) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_10083FB20 = v1;
  return result;
}

void sub_1001D3DB8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "title");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1001D3E1C(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setTitle:");

}

uint64_t sub_1001D3E78@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "creationDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1001D3EFC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v6, (uint64_t *)&unk_1008380D0);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setCreationDate:", isa);

}

uint64_t sub_1001D3FE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001D6098(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_1001D4060(v9, a2);
  return specialized ContiguousArray._endMutation()(v7);
}

void sub_1001D4060(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  char *v133;
  char *v134;
  unint64_t v135;
  Swift::Int v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  uint64_t v140;
  void **__dst;
  uint64_t v142;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;

  v3 = v2;
  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_154;
    if (v5)
      sub_1000ED864(0, v5, 1, a1, a2);
    return;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_162;
  v8 = v6;
  v129 = a1;
  if (v5 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v148 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= 2)
        goto LABEL_118;
LABEL_130:
      v121 = v12;
LABEL_131:
      swift_bridgeObjectRelease(v121);
      *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v128);
      swift_bridgeObjectRelease(v148);
      return;
    }
  }
  else
  {
    v9 = v7 >> 1;
    v10 = type metadata accessor for REMCDSavedReminder();
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    __dst = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v148 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v131 = *a1 + 16;
  v132 = v8;
  v130 = *a1 - 8;
  v12 = (char *)_swiftEmptyArrayStorage;
  v137 = v5;
  v142 = *a1;
  while (1)
  {
    v16 = v13++;
    v138 = v16;
    if (v13 < v5)
    {
      v133 = v12;
      v17 = *(void **)(v14 + 8 * v16);
      v18 = *(id *)(v14 + 8 * v13);
      v19 = v17;
      v20 = objc_msgSend(v18, "title");
      if (v20)
      {
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

      }
      else
      {
        v22 = 0;
        v24 = 0xE000000000000000;
      }
      v146 = v22;
      v147 = v24;
      v25 = objc_msgSend(v19, "title");
      if (v25)
      {
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v29 = v28;

      }
      else
      {
        v27 = 0;
        v29 = 0xE000000000000000;
      }
      v144 = v27;
      v145 = v29;
      v135 = sub_1000E525C();
      v139 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v135, v135);

      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v29);
      v13 = v16 + 2;
      if (v16 + 2 < v5)
      {
        v30 = (id *)(v131 + 8 * v16);
        while (1)
        {
          v31 = *(v30 - 1);
          v32 = *v30;
          v33 = v31;
          v34 = objc_msgSend(v32, "title");
          if (v34)
          {
            v35 = v34;
            v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v38 = v37;

          }
          else
          {
            v36 = 0;
            v38 = 0xE000000000000000;
          }
          v146 = v36;
          v147 = v38;
          v39 = objc_msgSend(v33, "title");
          if (v39)
          {
            v40 = v39;
            v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v43 = v42;

          }
          else
          {
            v41 = 0;
            v43 = 0xE000000000000000;
          }
          v144 = v41;
          v145 = v43;
          v44 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v135, v135);

          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v43);
          if ((v139 == a2) == (v44 != a2))
            break;
          ++v13;
          ++v30;
          v5 = v137;
          if (v137 == v13)
          {
            v13 = v137;
            goto LABEL_34;
          }
        }
        v5 = v137;
LABEL_34:
        v16 = v138;
      }
      v14 = v142;
      v12 = v133;
      if (v139 == a2)
      {
        if (v13 < v16)
          goto LABEL_155;
        if (v16 < v13)
        {
          v45 = (uint64_t *)(v130 + 8 * v13);
          v46 = v13;
          v47 = v16;
          v48 = (uint64_t *)(v142 + 8 * v16);
          do
          {
            if (v47 != --v46)
            {
              if (!v142)
                goto LABEL_160;
              v49 = *v48;
              *v48 = *v45;
              *v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
      }
    }
    if (v13 >= v5)
      goto LABEL_68;
    if (__OFSUB__(v13, v16))
      goto LABEL_153;
    if (v13 - v16 >= v132)
      goto LABEL_68;
    if (__OFADD__(v16, v132))
      goto LABEL_156;
    v50 = v16 + v132 >= v5 ? v5 : v16 + v132;
    if (v50 < v16)
      break;
    if (v13 != v50)
    {
      v134 = v12;
      v136 = v50;
      v51 = v130 + 8 * v13;
      do
      {
        v52 = *(void **)(v14 + 8 * v13);
        v140 = v51;
        while (1)
        {
          v53 = *(void **)v51;
          v54 = v52;
          v55 = v53;
          v56 = objc_msgSend(v54, "title");
          if (v56)
          {
            v57 = v56;
            v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
            v60 = v59;

          }
          else
          {
            v58 = 0;
            v60 = 0xE000000000000000;
          }
          v146 = v58;
          v147 = v60;
          v61 = objc_msgSend(v55, "title");
          if (v61)
          {
            v62 = v61;
            v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v65 = v64;

          }
          else
          {
            v63 = 0;
            v65 = 0xE000000000000000;
          }
          v144 = v63;
          v145 = v65;
          v66 = sub_1000E525C();
          v67 = StringProtocol.localizedStandardCompare<A>(_:)(&v144, &type metadata for String, &type metadata for String, v66, v66);

          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(v65);
          if (v67 != a2)
            break;
          v14 = v142;
          if (!v142)
            goto LABEL_158;
          v68 = *(void **)v51;
          v52 = *(void **)(v51 + 8);
          *(_QWORD *)v51 = v52;
          *(_QWORD *)(v51 + 8) = v68;
          v51 -= 8;
          if (v13 == ++v16)
            goto LABEL_55;
        }
        v14 = v142;
LABEL_55:
        ++v13;
        v16 = v138;
        v51 = v140 + 8;
      }
      while (v13 != v136);
      v13 = v136;
      v12 = v134;
    }
LABEL_68:
    if (v13 < v16)
      goto LABEL_148;
    v69 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
      v12 = v69;
    else
      v12 = sub_1001D4DF0(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    v71 = *((_QWORD *)v12 + 2);
    v70 = *((_QWORD *)v12 + 3);
    v15 = v71 + 1;
    v14 = v142;
    if (v71 >= v70 >> 1)
    {
      v120 = sub_1001D4DF0((char *)(v70 > 1), v71 + 1, 1, v12);
      v14 = v142;
      v12 = v120;
    }
    *((_QWORD *)v12 + 2) = v15;
    v72 = v12 + 32;
    v73 = &v12[16 * v71 + 32];
    *(_QWORD *)v73 = v138;
    *((_QWORD *)v73 + 1) = v13;
    if (v71)
    {
      while (1)
      {
        v74 = v15 - 1;
        if (v15 >= 4)
        {
          v79 = &v72[16 * v15];
          v80 = *((_QWORD *)v79 - 8);
          v81 = *((_QWORD *)v79 - 7);
          v85 = __OFSUB__(v81, v80);
          v82 = v81 - v80;
          if (v85)
            goto LABEL_137;
          v84 = *((_QWORD *)v79 - 6);
          v83 = *((_QWORD *)v79 - 5);
          v85 = __OFSUB__(v83, v84);
          v77 = v83 - v84;
          v78 = v85;
          if (v85)
            goto LABEL_138;
          v86 = v15 - 2;
          v87 = &v72[16 * v15 - 32];
          v89 = *(_QWORD *)v87;
          v88 = *((_QWORD *)v87 + 1);
          v85 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          if (v85)
            goto LABEL_140;
          v85 = __OFADD__(v77, v90);
          v91 = v77 + v90;
          if (v85)
            goto LABEL_143;
          if (v91 >= v82)
          {
            v109 = &v72[16 * v74];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v85 = __OFSUB__(v110, v111);
            v112 = v110 - v111;
            if (v85)
              goto LABEL_147;
            v102 = v77 < v112;
            goto LABEL_105;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v103 = *((_QWORD *)v12 + 4);
            v104 = *((_QWORD *)v12 + 5);
            v85 = __OFSUB__(v104, v103);
            v96 = v104 - v103;
            v97 = v85;
            goto LABEL_99;
          }
          v76 = *((_QWORD *)v12 + 4);
          v75 = *((_QWORD *)v12 + 5);
          v85 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          v78 = v85;
        }
        if ((v78 & 1) != 0)
          goto LABEL_139;
        v86 = v15 - 2;
        v92 = &v72[16 * v15 - 32];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v95 = __OFSUB__(v93, v94);
        v96 = v93 - v94;
        v97 = v95;
        if (v95)
          goto LABEL_142;
        v98 = &v72[16 * v74];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v85 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v85)
          goto LABEL_145;
        if (__OFADD__(v96, v101))
          goto LABEL_146;
        if (v96 + v101 >= v77)
        {
          v102 = v77 < v101;
LABEL_105:
          if (v102)
            v74 = v86;
          goto LABEL_107;
        }
LABEL_99:
        if ((v97 & 1) != 0)
          goto LABEL_141;
        v105 = &v72[16 * v74];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v85 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v85)
          goto LABEL_144;
        if (v108 < v96)
          goto LABEL_14;
LABEL_107:
        v113 = v74 - 1;
        if (v74 - 1 >= v15)
        {
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        if (!v14)
          goto LABEL_159;
        v114 = v12;
        v115 = &v72[16 * v113];
        v116 = *(_QWORD *)v115;
        v117 = &v72[16 * v74];
        v118 = *((_QWORD *)v117 + 1);
        sub_1001D499C((void **)(v14 + 8 * *(_QWORD *)v115), (id *)(v14 + 8 * *(_QWORD *)v117), v14 + 8 * v118, __dst, a2);
        if (v2)
        {
LABEL_116:
          v121 = v114;
          goto LABEL_131;
        }
        if (v118 < v116)
          goto LABEL_134;
        if (v74 > *((_QWORD *)v114 + 2))
          goto LABEL_135;
        *(_QWORD *)v115 = v116;
        *(_QWORD *)&v72[16 * v113 + 8] = v118;
        v119 = *((_QWORD *)v114 + 2);
        if (v74 >= v119)
          goto LABEL_136;
        v15 = v119 - 1;
        memmove(&v72[16 * v74], v117 + 16, 16 * (v119 - 1 - v74));
        v12 = v114;
        *((_QWORD *)v114 + 2) = v119 - 1;
        v14 = v142;
        if (v119 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v5 = v137;
    if (v13 >= v137)
    {
      v3 = v2;
      if (v15 < 2)
        goto LABEL_130;
LABEL_118:
      v122 = *v129;
      while (1)
      {
        v123 = v15 - 2;
        if (v15 < 2)
          goto LABEL_149;
        if (!v122)
          goto LABEL_161;
        v114 = v12;
        v124 = *(_QWORD *)&v12[16 * v123 + 32];
        v125 = *(_QWORD *)&v12[16 * v15 + 24];
        sub_1001D499C((void **)(v122 + 8 * v124), (id *)(v122 + 8 * *(_QWORD *)&v12[16 * v15 + 16]), v122 + 8 * v125, __dst, a2);
        if (v3)
          goto LABEL_116;
        if (v125 < v124)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v114) & 1) == 0)
          v114 = sub_1001D52E4((uint64_t)v114);
        if (v123 >= *((_QWORD *)v114 + 2))
          goto LABEL_151;
        v126 = &v114[16 * v123 + 32];
        *(_QWORD *)v126 = v124;
        *((_QWORD *)v126 + 1) = v125;
        v127 = *((_QWORD *)v114 + 2);
        if (v15 > v127)
          goto LABEL_152;
        memmove(&v114[16 * v15 + 16], &v114[16 * v15 + 32], 16 * (v127 - v15));
        v12 = v114;
        *((_QWORD *)v114 + 2) = v127 - 1;
        v15 = v127 - 1;
        if (v127 <= 2)
          goto LABEL_130;
      }
    }
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1001D499C(void **__src, id *a2, unint64_t a3, void **__dst, uint64_t a5)
{
  void **v5;
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id *v30;
  void **v31;
  id *v32;
  id *v33;
  void **v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t result;
  void **v52;
  void **v53;
  void **v55;
  unint64_t v56;
  id *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void **v63;
  void **v64;
  id *v65;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v65 = __src;
  v64 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v31 = &v5[v13];
      v63 = v31;
      v65 = v6;
      v53 = v7;
      if (v7 < v6 && v11 >= 8)
      {
        v32 = (id *)(a3 - 8);
        v33 = v6;
        v52 = v5;
        do
        {
          v56 = (unint64_t)v31;
          v34 = v31 - 1;
          v35 = *--v33;
          v36 = *(v31 - 1);
          v37 = v35;
          v38 = objc_msgSend(v36, "title");
          v58 = v6;
          if (v38)
          {
            v39 = v38;
            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            v42 = v41;

          }
          else
          {
            v40 = 0;
            v42 = 0xE000000000000000;
          }
          v61 = v40;
          v62 = v42;
          v43 = objc_msgSend(v37, "title");
          if (v43)
          {
            v44 = v43;
            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v47 = v46;

          }
          else
          {
            v45 = 0;
            v47 = 0xE000000000000000;
          }
          v48 = v32 + 1;
          v59 = v45;
          v60 = v47;
          v49 = sub_1000E525C();
          v50 = StringProtocol.localizedStandardCompare<A>(_:)(&v59, &type metadata for String, &type metadata for String, v49, v49);

          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v47);
          if (v50 == a5)
          {
            v31 = (void **)v56;
            if (v48 != v58 || v32 >= v58)
              *v32 = *v33;
            v65 = v33;
          }
          else
          {
            v63 = v34;
            if ((unint64_t)v48 < v56 || (unint64_t)v32 >= v56 || v48 != (id *)v56)
              *v32 = *v34;
            v33 = v58;
            v31 = v34;
          }
          if (v33 <= v53)
            break;
          --v32;
          v6 = v33;
        }
        while (v31 > v52);
      }
      goto LABEL_54;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v55 = &v5[v10];
    v63 = v55;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v14 = *v5;
        v15 = *v6;
        v16 = v14;
        v17 = objc_msgSend(v15, "title");
        if (v17)
        {
          v18 = v17;
          v19 = v6;
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v22 = v21;

        }
        else
        {
          v19 = v6;
          v20 = 0;
          v22 = 0xE000000000000000;
        }
        v61 = v20;
        v62 = v22;
        v23 = objc_msgSend(v16, "title");
        if (v23)
        {
          v24 = v23;
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v27 = v26;

        }
        else
        {
          v25 = 0;
          v27 = 0xE000000000000000;
        }
        v59 = v25;
        v60 = v27;
        v28 = sub_1000E525C();
        v29 = StringProtocol.localizedStandardCompare<A>(_:)(&v59, &type metadata for String, &type metadata for String, v28, v28);

        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v27);
        if (v29 == a5)
        {
          v30 = v19 + 1;
          if (v7 < v19 || v7 >= v30 || v7 != v19)
            *v7 = *v19;
        }
        else
        {
          if (v7 != v5)
            *v7 = *v5;
          v64 = ++v5;
          v30 = v19;
        }
        ++v7;
        if (v5 >= v55)
          break;
        v6 = v30;
      }
      while ((unint64_t)v30 < a3);
      v65 = v7;
    }
LABEL_54:
    sub_1001D505C((void **)&v65, (const void **)&v64, &v63);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1001D4DF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A630(&qword_10083FB58);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1001D4EE8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_1001D4FA8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001D51D8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

char *sub_1001D4FB4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1001D505C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1001D5104(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

uint64_t sub_1001D51A8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001D51D8(a1, a2, a3, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1001D51B4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001D51D8(a1, a2, a3, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1001D51C0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001D51D8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_1001D51CC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001D51D8(a1, a2, a3, type metadata accessor for RDPermanentlyHiddenReminder);
}

uint64_t sub_1001D51D8(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4);
  return result;
}

char *sub_1001D52E4(uint64_t a1)
{
  return sub_1001D4DF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void (*sub_1001D52F8(_QWORD *a1, uint64_t a2))(uint64_t)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_1001D5DD8(v5);
  v5[12] = sub_1001D5730(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1001D53B8;
}

void (*sub_1001D53BC(_QWORD *a1, void *a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = a2;
  v5[9] = sub_1001D5E04(v5);
  v5[10] = sub_1001D5860(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_1001D5444;
}

void sub_1001D5444(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);

  v2(v1, 0);
  free(v1);
}

void (*sub_1001D5490(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1001D5E04(v7);
  v7[10] = sub_1001D59C8(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1001D5520;
}

void (*sub_1001D5524(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1001D5E04(v7);
  v7[10] = sub_1001D5B08(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1001D5520;
}

void sub_1001D55B4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_1001D5604(_QWORD *a1, uint64_t a2))(uint64_t)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_1001D5E04(v5);
  v5[12] = sub_1001D5C78(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1001D53B8;
}

void sub_1001D56C4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_1001D5730(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **, uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_1002C65F8(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_1001D584C;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1002D6158();
      goto LABEL_7;
    }
    sub_1002CC56C(v14, a3 & 1);
    v18 = sub_1002C65F8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = type metadata accessor for UUID(0);
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_1001D584C(uint64_t **a1, uint64_t a2)
{
  sub_1001D5D94(a1, a2, (void (*)(uint64_t, char *, uint64_t, uint64_t))sub_10028F070, (void (*)(uint64_t, _QWORD))sub_100289B98);
}

void (*sub_1001D5860(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_1002C66DC(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_1001D598C;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1002D691C();
      goto LABEL_7;
    }
    sub_1002CD5D4(v14, a3 & 1);
    v18 = sub_1002C66DC(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_1001D598C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1001D5E24(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

void (*sub_1001D59C8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **, uint64_t);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_10001A6DC(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_1001D5AF4;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1002D70F4();
      goto LABEL_7;
    }
    sub_1002CEEA4(v16, a4 & 1);
    v20 = sub_10001A6DC(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1001D5AF4(uint64_t **a1, uint64_t a2)
{
  sub_1001D5C34(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_10028F274, (void (*)(uint64_t, _QWORD))sub_100289D70);
}

void (*sub_1001D5B08(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **, uint64_t);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_10001A6DC(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_1001D5AF4;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1002D7114();
      goto LABEL_7;
    }
    sub_1002CEED4(v16, a4 & 1);
    v20 = sub_10001A6DC(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1001D5C34(uint64_t **a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), void (*a4)(uint64_t, _QWORD))
{
  uint64_t *v4;

  v4 = *a1;
  sub_1001D5ECC(*a1, *((_BYTE *)*a1 + 40), (_QWORD *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], a3, a4);
  swift_bridgeObjectRelease(*v4);
  free(v4);
}

void (*sub_1001D5C78(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **, uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_1002C65F8(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_1001D584C;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1002D95B4();
      goto LABEL_7;
    }
    sub_1002D2C88(v14, a3 & 1);
    v18 = sub_1002C65F8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = type metadata accessor for UUID(0);
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_1001D5D94(uint64_t **a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t, uint64_t), void (*a4)(uint64_t, _QWORD))
{
  uint64_t *v4;

  v4 = *a1;
  sub_1001D5F74(*a1, *((_BYTE *)*a1 + 32), (_QWORD *)(*a1)[2], (*a1)[3], (*a1)[1], a3, a4);
  swift_bridgeObjectRelease(*v4);
  free(v4);
}

uint64_t (*sub_1001D5DD8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001D5DF8;
}

uint64_t sub_1001D5DF8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*sub_1001D5E04(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001D92D0;
}

double sub_1001D5E24(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  double result;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_10028F114(a4, (uint64_t)a5, v7, v8);
      v12 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    v9 = *(_QWORD *)(*a3 + 48) + 8 * a4;
    v10 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_arrayDestroy(v9, 1, v10);
    sub_100289D74(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

uint64_t sub_1001D5ECC(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), void (*a8)(uint64_t, _QWORD))
{
  uint64_t v10;

  v10 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    a8(a4, *a3);
  }
  return swift_bridgeObjectRetain(v10);
}

uint64_t sub_1001D5F74(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, char *, uint64_t, uint64_t), void (*a7)(uint64_t, _QWORD))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v14 = type metadata accessor for UUID(0);
  __chkstk_darwin(v14);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  if (v19)
  {
    v20 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * a4) = v19;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 16))(v18, a5);
      a6(a4, v18, v19, v20);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v16 + 72) * a4, 1, v15);
    a7(a4, *a3);
  }
  return swift_bridgeObjectRetain(v19);
}

uint64_t sub_1001D6070(_QWORD *a1)
{
  return sub_1001C27D8(0, a1[2], 0, a1);
}

uint64_t sub_1001D6084(uint64_t a1)
{
  return sub_1001C24D0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001D6098(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001D60AC(_QWORD *a1)
{
  return sub_1001C3100(0, a1[2], 0, a1);
}

uint64_t sub_1001D60C0(_QWORD *a1)
{
  return sub_1001C32A4(0, a1[2], 0, a1);
}

uint64_t sub_1001D60D4(uint64_t a1)
{
  return sub_1001C3FE8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001D60E8(_QWORD *a1)
{
  return sub_1001C45DC(0, a1[2], 0, a1);
}

uint64_t sub_1001D60FC(_QWORD *a1)
{
  return sub_1001C45F0(0, a1[2], 0, a1);
}

uint64_t sub_1001D6110(uint64_t a1)
{
  return sub_1001C3E58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001D6124(uint64_t a1)
{
  return sub_1001C490C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001D6138(_QWORD *a1)
{
  return sub_1001C2F64(0, a1[2], 0, a1);
}

uint64_t sub_1001D614C(_QWORD *a1)
{
  return sub_1001C4F1C(0, a1[2], 0, a1);
}

uint64_t sub_1001D6160(_QWORD *a1)
{
  return sub_1001C5390(0, a1[2], 0, a1);
}

uint64_t sub_1001D6174(_QWORD *a1)
{
  return sub_1001C53A4(0, a1[2], 0, a1);
}

uint64_t sub_1001D6188(uint64_t a1)
{
  return sub_1001C56AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

id sub_1001D619C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "remObjectID");
  *a2 = result;
  return result;
}

_QWORD *sub_1001D61DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v6 = sub_1002AF1C4((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  v7 = sub_1001D8C9C(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_10028B870);
  swift_bridgeObjectRelease(a2);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(a1);
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(v7 + 16))
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        swift_bridgeObjectRetain_n(*v9, 2);
        v12 = sub_10001A6DC(v10, v11);
        if ((v13 & 1) != 0)
        {
          v14 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease(v11);
          v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v17 >= v16 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
          specialized Array._endMutation()(v18);
          swift_bridgeObjectRelease(v11);

        }
        else
        {
          swift_bridgeObjectRelease_n(v11, 2);
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRelease(v7);
  v19 = sub_10001A630(&qword_10083D590);
  v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v21 = sub_1000A5F84((unint64_t *)&qword_10083FB70, &qword_10083D590, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = sub_10011A5DC();
  v23 = Sequence.compactMapToSet<A>(_:)(sub_1001D92D8, 0, v19, v20, v21, v22);
  swift_bridgeObjectRetain(a3);
  v25 = sub_1001D6940(v24, v23);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v23);
  sub_1001E1178((uint64_t)v25);
  return _swiftEmptyArrayStorage;
}

void sub_1001D6414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D8AD8(a1, (uint64_t)v4);
  v5 = (char *)sub_1001D64A0 + 4 * byte_1006AE0E0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1001D64A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006AE1A0);
  *(_QWORD *)(v3 + 32) = KeyPath;
  *(_QWORD *)(v1 - 40) = v3;
  specialized Array._endMutation()(KeyPath);
  v5 = *(_QWORD *)(v1 - 40);
  sub_1001D8B58(v0);
  return v5;
}

void sub_1001D65C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D8AD8(a1, (uint64_t)v4);
  v5 = (char *)sub_1001D664C + 4 * byte_1006AE0E6[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

_QWORD *sub_1001D664C()
{
  uint64_t v0;

  sub_1001D8B58(v0);
  return _swiftEmptyArrayStorage;
}

void sub_1001D66BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001D8AD8(a1, (uint64_t)v6);
  v7 = (char *)sub_1001D679C + 4 * byte_1006AE0EC[swift_getEnumCaseMultiPayload(v6, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1001D679C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  sub_1001D8B58(v0);
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006AE130);
  v5 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v3 + 32) = v5;
  *(_QWORD *)(v1 - 72) = v3;
  specialized Array._endMutation()(v5);
  return *(_QWORD *)(v1 - 72);
}

_QWORD *sub_1001D6940(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_30;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v33 = v2;
      v4 = 0;
      v5 = v2 & 0xC000000000000001;
      v6 = v2 & 0xFFFFFFFFFFFFFF8;
      v7 = v2 + 32;
      v2 = a2;
      v8 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v8 = a2;
      v38 = v8;
      v39 = a2 + 56;
      v36 = v5;
      v37 = v3;
      v34 = v7;
      v35 = v6;
      while (v5)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v33);
LABEL_11:
        v10 = v9;
        if (__OFADD__(v4++, 1))
          goto LABEL_29;
        v12 = objc_msgSend(v9, "remObjectID");
        if (!v12)
          goto LABEL_6;
        v13 = v12;
        if ((a2 & 0xC000000000000001) != 0)
        {
          v14 = v12;
          v15 = __CocoaSet.contains(_:)(v14, v38);

          if ((v15 & 1) == 0)
            goto LABEL_25;
LABEL_6:

          goto LABEL_7;
        }
        if (!*(_QWORD *)(a2 + 16))
          goto LABEL_24;
        v17 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        v18 = -1 << *(_BYTE *)(a2 + 32);
        v19 = v17 & ~v18;
        if (((*(_QWORD *)(v39 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          goto LABEL_24;
        sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v20 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v19);
        v21 = static NSObject.== infix(_:_:)(v20);

        if ((v21 & 1) == 0)
        {
          v22 = ~v18;
          for (i = v19 + 1; ; i = v24 + 1)
          {
            v24 = i & v22;
            if (((*(_QWORD *)(v39 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0)
              break;
            v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v24);
            v26 = static NSObject.== infix(_:_:)(v25);

            if ((v26 & 1) != 0)
              goto LABEL_19;
          }
LABEL_24:

          v5 = v36;
          v3 = v37;
          v7 = v34;
          v6 = v35;
LABEL_25:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v27 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
          v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v10);
          specialized ContiguousArray._endMutation()(v28);
          goto LABEL_7;
        }
LABEL_19:

        v5 = v36;
        v3 = v37;
        v7 = v34;
        v6 = v35;
LABEL_7:
        if (v4 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)(v6 + 16))
        break;
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      if (v2 < 0)
        v30 = v2;
      else
        v30 = v2 & 0xFFFFFFFFFFFFFF8;
      v31 = v2;
      v32 = _CocoaArrayWrapper.endIndex.getter(v30);
      v2 = v31;
      v3 = v32;
      if (!v32)
        return _swiftEmptyArrayStorage;
    }
    v9 = *(id *)(v7 + 8 * v4);
    goto LABEL_11;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001D6BDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v6 = sub_1002AF934((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  v7 = sub_1001D8C9C(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_10028BB94);
  swift_bridgeObjectRelease(a2);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(a1);
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(v7 + 16))
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        swift_bridgeObjectRetain_n(*v9, 2);
        v12 = sub_10001A6DC(v10, v11);
        if ((v13 & 1) != 0)
        {
          v14 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease(v11);
          v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v17 >= v16 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
          specialized Array._endMutation()(v18);
          swift_bridgeObjectRelease(v11);

        }
        else
        {
          swift_bridgeObjectRelease_n(v11, 2);
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRelease(v7);
  v19 = sub_10001A630(&qword_1008519F0);
  v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v21 = sub_1000A5F84(&qword_10083FB60, &qword_1008519F0, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = sub_10011A5DC();
  v23 = Sequence.compactMapToSet<A>(_:)(sub_1001D92D8, 0, v19, v20, v21, v22);
  swift_bridgeObjectRetain(a3);
  v25 = sub_1001D6940(v24, v23);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v23);
  sub_1001E1FE4((uint64_t)v25);
  return _swiftEmptyArrayStorage;
}

id sub_1001D6E14(uint64_t a1, id isa, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  Class v61;
  double v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  Class v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  double v74;
  char *v75;
  id v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(unint64_t *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  Class v90;
  id v91;
  char v92;
  _QWORD *v93;
  void (*v94)(_QWORD *);
  _QWORD *v95;
  id v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  id v122;
  unint64_t *v123;
  uint64_t v124;
  char *v125;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];
  int v133;
  uint64_t (*v134)(char *, uint64_t);
  void (*v135)(char *, uint64_t, uint64_t);
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  id v148;
  uint64_t Subtasks;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  id ObjCClassFromMetadata;
  char *v155;
  char *v156;
  char *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  unint64_t *v163;
  __int128 v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v151 = a3;
  v7 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v7);
  v143 = (char *)v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v132 - v10;
  __chkstk_darwin(v12);
  v138 = (char *)v132 - v13;
  __chkstk_darwin(v14);
  v156 = (char *)v132 - v15;
  __chkstk_darwin(v16);
  v145 = (char *)v132 - v17;
  __chkstk_darwin(v18);
  v144 = (uint64_t)v132 - v19;
  v142 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v137 = (char *)v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v140 = (char *)v132 - v22;
  __chkstk_darwin(v23);
  v139 = (char *)v132 - v24;
  v25 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v25);
  v27 = (_QWORD *)((char *)v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v160 = type metadata accessor for UUID(0);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v157 = (char *)v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v155 = (char *)v132 - v30;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v31 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v136 = (char *)v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v35 = (char *)v132 - v34;
  if (qword_100836F78 != -1)
    goto LABEL_37;
  while (1)
  {
    v158 = v27;
    v148 = isa;
    v168 = qword_10083FB18;
    v36 = qword_100836F80;
    swift_bridgeObjectRetain(qword_10083FB18);
    if (v36 != -1)
      swift_once(&qword_100836F80, sub_1001D3D48);
    v167 = qword_10083FB20;
    swift_bridgeObjectRetain(qword_10083FB20);
    sub_1001D6414(a4);
    sub_1001E21BC(v37);
    sub_1001D65C0(a4);
    sub_1001E21BC(v38);
    v39 = sub_10001A630(&qword_10083FCC0);
    Array<A>.removeDuplicates()(v39, &protocol witness table for AnyKeyPath);
    Array<A>.removeDuplicates()(v39, &protocol witness table for AnyKeyPath);
    v40 = Subtasks;
    v135 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v135(v35, v151, Subtasks);
    v134 = *(uint64_t (**)(char *, uint64_t))(v31 + 88);
    v41 = v134(v35, v40);
    if (v41 != enum case for REMRemindersListDataView.FetchSubtasks.off(_:)
      && v41 != enum case for REMRemindersListDataView.FetchSubtasks.on(_:)
      && v41 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
    {
      goto LABEL_110;
    }
    v133 = enum case for REMRemindersListDataView.FetchSubtasks.off(_:);
    v132[3] = a1;
    sub_1004B2BC8(a1, (v41 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:)) | 0x20);
    v43 = v42;
    v44 = type metadata accessor for REMCDSavedReminder();
    v35 = (char *)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v146 = v44;
    ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v44);
    isa = objc_msgSend(ObjCClassFromMetadata, "entity");
    objc_msgSend(v35, "setEntity:", isa);

    objc_msgSend(v35, "setAffectedStores:", 0);
    *(_QWORD *)&v153 = v35;
    objc_msgSend(v35, "setPredicate:", v43);

    v31 = v168;
    if ((unint64_t)v168 >> 62)
    {
      isa = (id)(v168 < 0 ? v168 : v168 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain_n(v168, 2);
      a1 = _CocoaArrayWrapper.endIndex.getter(isa);
      swift_bridgeObjectRelease(v31);
    }
    else
    {
      a1 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v168);
    }
    v150 = v7;
    v152 = a4;
    *(_QWORD *)&v162 = v31;
    if (!a1)
      break;
    v166 = (unint64_t)_swiftEmptyArrayStorage;
    v27 = &v166;
    sub_1001C1C48(0, a1 & ~(a1 >> 63), 0);
    if (a1 < 0)
      goto LABEL_96;
    a4 = 0;
    v7 = v166;
    v35 = (char *)(v31 & 0xC000000000000001);
    while (a1 != a4)
    {
      if (v35)
      {
        v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(a4, v31);
        v46 = (unint64_t *)v45;
      }
      else
      {
        v46 = *(unint64_t **)(v31 + 8 * a4 + 32);
        v45 = swift_retain();
      }
      v47 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v45);
      if (!v48)
      {
        *(_QWORD *)&v164 = 0;
        *((_QWORD *)&v164 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v128._object = (void *)0x80000001006F8C10;
        v128._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v128);
        v163 = v46;
        goto LABEL_108;
      }
      v49 = v47;
      v27 = v48;
      v165 = &type metadata for String;
      swift_release(v46);
      *(_QWORD *)&v164 = v49;
      *((_QWORD *)&v164 + 1) = v27;
      v166 = v7;
      v51 = *(_QWORD *)(v7 + 16);
      v50 = *(_QWORD *)(v7 + 24);
      isa = (id)(v51 + 1);
      if (v51 >= v50 >> 1)
      {
        v27 = &v166;
        sub_1001C1C48(v50 > 1, v51 + 1, 1);
        v7 = v166;
      }
      ++a4;
      *(_QWORD *)(v7 + 16) = isa;
      sub_10001A6CC(&v164, (_OWORD *)(v7 + 32 * v51 + 32));
      v31 = v162;
      if (a1 == a4)
      {
        swift_bridgeObjectRelease(v162);
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once(&qword_100836F78, sub_1001D3CC8);
  }
  swift_bridgeObjectRelease(v31);
  v7 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_22:
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v52 = swift_bridgeObjectRelease(v7).n128_u64[0];
  objc_msgSend((id)v153, "setPropertiesToFetch:", isa, v52);

  v53 = v167;
  v132[2] = v11;
  if ((unint64_t)v167 >> 62)
  {
    if (v167 < 0)
      isa = (id)v167;
    else
      isa = (id)(v167 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain_n(v167, 2);
    v7 = _CocoaArrayWrapper.endIndex.getter(isa);
    swift_bridgeObjectRelease(v53);
    if (v7)
      goto LABEL_24;
  }
  else
  {
    v7 = *(_QWORD *)((v167 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v167);
    if (v7)
    {
LABEL_24:
      v166 = (unint64_t)_swiftEmptyArrayStorage;
      v27 = &v166;
      sub_1001C1B0C(0, v7 & ~(v7 >> 63), 0);
      if (v7 < 0)
        goto LABEL_97;
      v31 = 0;
      a4 = v166;
      *(_QWORD *)&v161 = v53 & 0xC000000000000001;
      v11 = (char *)v53;
      while (1)
      {
        if (v7 == v31)
          goto LABEL_36;
        if ((_QWORD)v161)
        {
          v54 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v53);
          v55 = (unint64_t *)v54;
        }
        else
        {
          v55 = *(unint64_t **)(v53 + 8 * v31 + 32);
          v54 = swift_retain();
        }
        v27 = v55;
        v56 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v54);
        if (!v57)
          break;
        v35 = (char *)v56;
        v58 = v57;
        swift_release(v55);
        v166 = a4;
        a1 = *(_QWORD *)(a4 + 16);
        v59 = *(_QWORD *)(a4 + 24);
        isa = (id)(a1 + 1);
        if (a1 >= v59 >> 1)
        {
          v27 = &v166;
          sub_1001C1B0C(v59 > 1, a1 + 1, 1);
          a4 = v166;
        }
        ++v31;
        *(_QWORD *)(a4 + 16) = isa;
        v60 = a4 + 16 * a1;
        *(_QWORD *)(v60 + 32) = v35;
        *(_QWORD *)(v60 + 40) = v58;
        v53 = (uint64_t)v11;
        if (v7 == v31)
        {
          swift_bridgeObjectRelease(v11);
          goto LABEL_47;
        }
      }
      *(_QWORD *)&v164 = 0;
      *((_QWORD *)&v164 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v129._object = (void *)0x80000001006F8C10;
      v129._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v129);
      v163 = v55;
LABEL_108:
      v130 = sub_10001A630(&qword_1008437F0);
      _print_unlocked<A, B>(_:_:)(&v163, &v164, v130, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v164, *((_QWORD *)&v164 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
      __break(1u);
LABEL_109:
      v131 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v131);
      __break(1u);
LABEL_110:
      _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
      __break(1u);
      JUMPOUT(0x1001D8AB4);
    }
  }
  swift_bridgeObjectRelease(v53);
  a4 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_47:
  v61 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v62 = swift_bridgeObjectRelease(a4).n128_u64[0];
  v63 = (void *)v153;
  objc_msgSend((id)v153, "setRelationshipKeyPathsForPrefetching:", v61, v62);

  sub_1001D66BC(v152);
  v65 = v64;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v66 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v63, "setSortDescriptors:", v66, swift_bridgeObjectRelease(v65).n128_f64[0]);

  v67 = v148;
  v68 = v147;
  v69 = NSManagedObjectContext.fetch<A>(_:)(v63, v146);
  v11 = v68;
  if (!v68)
  {
    v31 = v69;

    v166 = (unint64_t)_swiftEmptyArrayStorage;
    v163 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    v35 = (char *)((unint64_t)v31 >> 62);
    if ((unint64_t)v31 >> 62)
      goto LABEL_99;
    v70 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v31);
LABEL_51:
    v71 = v150;
    v132[0] = v35;
    if (!v70)
    {
      v146 = 0;
LABEL_94:
      swift_bridgeObjectRelease(v31);
      v124 = v144;
      sub_1001D8AD8(v152, v144);
      v125 = (char *)&loc_1001D7C0C + *((int *)qword_1001D8AC0 + swift_getEnumCaseMultiPayload(v124, v71));
      __asm { BR              X10 }
    }
    *(_QWORD *)&v162 = v31 & 0xC000000000000001;
    if ((v31 & 0xC000000000000001) != 0)
    {
      v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    }
    else
    {
      if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_105;
      v72 = *(id *)(v31 + 32);
    }
    v73 = v72;
    *(_QWORD *)&v74 = swift_bridgeObjectRelease(v31).n128_u64[0];
    v75 = (char *)objc_msgSend(v73, "account", v74, v132[0]);

    if (v75)
      v76 = objc_msgSend(v75, "remObjectID");
    else
      v76 = 0;
    v146 = (uint64_t)v76;
    v147 = v75;
    v132[1] = v11;
    if (v70 >= 1)
    {
      swift_bridgeObjectRetain(v31);
      v77 = 0;
      v153 = xmmword_1006A7330;
      *(_QWORD *)&v161 = v70;
      while (1)
      {
        if ((_QWORD)v162)
          v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v31);
        else
          v78 = *(id *)(v31 + 8 * v77 + 32);
        v79 = v78;
        v35 = (char *)v31;
        v80 = objc_msgSend(v78, "parentSavedReminderIdentifier");
        if (!v80)
        {
          v85 = (uint64_t)v158;
          (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v159 + 56))(v158, 1, 1, v160);
LABEL_74:
          sub_10000882C(v85, (uint64_t *)&unk_100839C80);
LABEL_75:
          v100 = v79;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
          v102 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v101 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v102 >= v101 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1);
          v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v100);
          specialized Array._endMutation()(v103);

          goto LABEL_78;
        }
        v81 = v80;
        v82 = v157;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v80);

        v83 = v159;
        v84 = *(void (**)(unint64_t *, char *, uint64_t))(v159 + 32);
        v85 = (uint64_t)v158;
        v86 = v82;
        v87 = v160;
        v84(v158, v86, v160);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v87);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v85, 1, v87) == 1)
          goto LABEL_74;
        v88 = v155;
        v89 = v160;
        v84((unint64_t *)v155, (char *)v85, v160);
        v90 = UUID._bridgeToObjectiveC()().super.isa;
        v31 = (uint64_t)objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", v90);

        (*(void (**)(char *, uint64_t))(v159 + 8))(v88, v89);
        if (!v31)
          goto LABEL_75;
        if (v163[2])
        {
          v91 = (id)v31;
          sub_1002C66DC((uint64_t)v91);
          if ((v92 & 1) != 0)
          {
            v94 = sub_1001CFE68(&v164, v91);
            if (*v93)
            {
              v95 = v93;
              v96 = v79;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v96);
              v98 = *(_QWORD *)((*v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v97 = *(_QWORD *)((*v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v98 >= v97 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1);
              v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v96);
              specialized Array._endMutation()(v99);
              ((void (*)(__int128 *, _QWORD))v94)(&v164, 0);

            }
            else
            {
              ((void (*)(__int128 *, _QWORD))v94)(&v164, 0);

            }
            goto LABEL_78;
          }

        }
        v104 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v105 = swift_allocObject(v104, 40, 7);
        *(_OWORD *)(v105 + 16) = v153;
        *(_QWORD *)(v105 + 32) = v79;
        *(_QWORD *)&v164 = v105;
        specialized Array._endMutation()(v105);
        v106 = v164;
        v107 = (id)v31;
        v11 = v79;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v163);
        v109 = v163;
        v163 = (unint64_t *)0x8000000000000000;
        *(_QWORD *)&v164 = v109;
        v111 = sub_1002C66DC((uint64_t)v107);
        v112 = v109[2];
        v113 = (v110 & 1) == 0;
        v114 = v112 + v113;
        if (__OFADD__(v112, v113))
        {
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          if (v31 < 0)
            v127 = v31;
          else
            v127 = v31 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v31);
          v70 = _CocoaArrayWrapper.endIndex.getter(v127);
          goto LABEL_51;
        }
        v31 = v110;
        if ((uint64_t)v109[3] >= v114)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1002D691C();
        }
        else
        {
          sub_1002CD5D4(v114, isUniquelyReferenced_nonNull_native);
          v115 = sub_1002C66DC((uint64_t)v107);
          if ((v31 & 1) != (v116 & 1))
            goto LABEL_109;
          v111 = v115;
        }
        v117 = (unint64_t *)v164;
        if ((v31 & 1) != 0)
        {
          v118 = *(_QWORD *)(v164 + 56);
          swift_bridgeObjectRelease(*(_QWORD *)(v118 + 8 * v111));
          *(_QWORD *)(v118 + 8 * v111) = v106;
        }
        else
        {
          *(_QWORD *)(v164 + 8 * (v111 >> 6) + 64) |= 1 << v111;
          *(_QWORD *)(v117[6] + 8 * v111) = v107;
          *(_QWORD *)(v117[7] + 8 * v111) = v106;
          v119 = v117[2];
          v120 = __OFADD__(v119, 1);
          v121 = v119 + 1;
          if (v120)
            goto LABEL_98;
          v117[2] = v121;
          v122 = v107;
        }
        v123 = v163;
        v163 = v117;

        swift_bridgeObjectRelease(v123);
        v71 = v150;
LABEL_78:
        v31 = (uint64_t)v35;
        if ((_QWORD)v161 == ++v77)
          goto LABEL_94;
      }
    }
    __break(1u);
LABEL_105:
    __break(1u);
    JUMPOUT(0x1001D8934);
  }
  swift_bridgeObjectRelease(v162);
  swift_bridgeObjectRelease(v53);

  return v67;
}

uint64_t sub_1001D8AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9UtilitiesO12SortingStyleOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D8B1C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001D2C50(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(id **)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

void sub_1001D8B3C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1001D36C0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t **)(v1 + 40), a1);
}

uint64_t sub_1001D8B58(uint64_t a1)
{
  uint64_t v2;

  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D8B94@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001D22D4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_1001D8BB0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1004A3544(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_1001D8BCC()
{
  uint64_t v0;

  sub_10018C280(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_1001D8BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9UtilitiesO12SortingStyleOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001D8C2C(_QWORD *a1, uint64_t a2)
{
  sub_1001D20FC(a1, a2);
}

uint64_t sub_1001D8C44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_1001D8C9C(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(id, uint64_t, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::String v24;
  void *object;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v5 = a2;
  if (a2 >> 62)
    goto LABEL_28;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v7)
  {
    v45 = v5 & 0xC000000000000001;
    v42 = a1;
    v43 = a3 & 0xC000000000000001;
    v8 = a3 & 0xFFFFFFFFFFFFFF8;
    if (a3 < 0)
      v8 = a3;
    v40 = v8;
    v9 = 4;
    v39 = a3;
    v44 = v5;
    v38 = v7;
    while (1)
    {
      v10 = v45 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v5) : *(id *)(v5 + 8 * v9);
      v11 = v10;
      a1 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v12 = objc_msgSend(v10, "remObjectID");
      if (v12)
      {
        v13 = v12;
        v14 = v7;
        if (v43)
        {
          v15 = __CocoaDictionary.lookup(_:)(v12, v40);
          if (v15)
          {
            v16 = v15;
            v48 = v15;
            v17 = type metadata accessor for RDElementManualSortID(0);
            swift_unknownObjectRetain(v16);
            swift_dynamicCast(&v46, &v48, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
            v18 = v46;
            swift_unknownObjectRelease(v16);

            if (v18)
              goto LABEL_20;
            goto LABEL_23;
          }
LABEL_22:

        }
        else if (*(_QWORD *)(a3 + 16))
        {
          v19 = sub_1002C66DC((uint64_t)v12);
          if ((v20 & 1) != 0)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v19);
            swift_retain();

            if (v18)
            {
LABEL_20:
              v21 = *(_QWORD *)(v18 + 24);
              if (v21)
              {
                v22 = *(_QWORD *)(v18 + 16);
                v23 = *(_QWORD *)(v18 + 24);
              }
              else
              {
                v24._countAndFlagsBits = UUID.uuidString.getter(0);
                object = v24._object;
                v46 = 0x7C6C61636F6CLL;
                v47 = 0xE600000000000000;
                String.append(_:)(v24);
                swift_bridgeObjectRelease(object);
                v21 = 0;
                v22 = v46;
                v23 = v47;
              }
              swift_bridgeObjectRetain(v21);
              v26 = v11;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
              v46 = v42;
              a4(v26, v22, v23, isUniquelyReferenced_nonNull_native);
              v28 = v46;
              swift_bridgeObjectRelease(v23);
              swift_bridgeObjectRelease(0x8000000000000000);
              v30._countAndFlagsBits = UUID.uuidString.getter(v29);
              v31 = v30._object;
              v46 = 0x7C6C61636F6CLL;
              v47 = 0xE600000000000000;
              String.append(_:)(v30);
              swift_bridgeObjectRelease(v31);
              v32 = v46;
              v33 = v47;
              v34 = v26;
              v35 = swift_isUniquelyReferenced_nonNull_native(v28);
              v46 = v28;
              a4(v34, v32, v33, v35);
              v42 = v46;

              swift_release(v18);
              swift_bridgeObjectRelease(v33);
              swift_bridgeObjectRelease(0x8000000000000000);
              v5 = v44;
              v7 = v38;
              a3 = v39;
              goto LABEL_7;
            }
            goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:

        v7 = v14;
        v5 = v44;
        goto LABEL_7;
      }

LABEL_7:
      ++v9;
      if (a1 == v7)
      {
        swift_bridgeObjectRelease(v5);
        return v42;
      }
    }
    __break(1u);
LABEL_28:
    if (v5 < 0)
      v36 = v5;
    else
      v36 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = _CocoaArrayWrapper.endIndex.getter(v36);
  }
  swift_bridgeObjectRelease(v5);
  return a1;
}

_QWORD *sub_1001D8FF8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v6 = sub_1002B01BC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  v7 = sub_1001D8C9C(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_10028C41C);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(a1);
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(v7 + 16))
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        swift_bridgeObjectRetain_n(*v9, 2);
        v12 = sub_10001A6DC(v10, v11);
        if ((v13 & 1) != 0)
        {
          v14 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease();
          v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v17 >= v16 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
          specialized Array._endMutation()(v18);
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease_n(v11, 2);
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v19 = sub_10001A630(&qword_100851900);
  v20 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v21 = sub_1000A5F84(&qword_10083FB78, &qword_100851900, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = sub_10011A5DC();
  v23 = Sequence.compactMapToSet<A>(_:)(sub_1001D619C, 0, v19, v20, v21, v22);
  swift_bridgeObjectRetain(a3);
  v25 = sub_1001D6940(v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001E295C((uint64_t)v25);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001D9230@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001D3594(a1, *(_QWORD *)(v2 + 16), a2);
}

id sub_1001D9250@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "priority");
  *a2 = result;
  return result;
}

id sub_1001D9288(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setPriority:", *a1);
}

const char *sub_1001D92BC()
{
  return "parentSavedReminderIdentifier";
}

id sub_1001D92D8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001D619C(a1, a2);
}

uint64_t sub_1001D92EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001D8BB0(a1);
}

void *sub_1001D9300(uint64_t a1)
{
  uint64_t v2;
  void *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = (void *)sub_1000E1B14(a1);
    v4 = (uint64_t)result;
    v6 = v5;
    v7 = 0;
    v8 = a1 + 64;
    v19 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_23;
      v20 = v7;
      v11 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v12 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      result = (void *)specialized ContiguousArray._endMutation()(v13);
      v9 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v9)
        goto LABEL_24;
      v14 = *(_QWORD *)(v8 + 8 * v10);
      if ((v14 & (1 << v4)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_26;
      v15 = v14 & (-2 << (v4 & 0x3F));
      if (v15)
      {
        v9 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v16 = v10 + 1;
        v17 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v17)
        {
          v18 = *(_QWORD *)(v8 + 8 * v16);
          if (v18)
          {
LABEL_18:
            v9 = __clz(__rbit64(v18)) + (v16 << 6);
          }
          else
          {
            while (v17 - 2 != v10)
            {
              v18 = *(_QWORD *)(a1 + 80 + 8 * v10++);
              if (v18)
              {
                v16 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v7 = v20 + 1;
      v4 = v9;
      if (v20 + 1 == v19)
        return &_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

char *sub_1001D94DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  id v48;
  void *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  void (*v58)(uint64_t, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  id v67;
  void *v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  id v71;
  void *v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  id v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  int v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  _QWORD v120[2];
  _QWORD v121[2];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v110 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v114 = (char *)&v102 - v7;
  __chkstk_darwin(v8);
  v113 = (char *)&v102 - v9;
  __chkstk_darwin(v10);
  v112 = (char *)&v102 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v118 = (char *)&v102 - v17;
  __chkstk_darwin(v18);
  v111 = (char *)&v102 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v102 - v21;
  __chkstk_darwin(v23);
  v119 = (char *)&v102 - v24;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v91 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v32 = ~v91;
    v92 = -v91;
    if (v92 < 64)
      v93 = ~(-1 << v92);
    else
      v93 = -1;
    v33 = v93 & *(_QWORD *)(a1 + 56);
    v108 = a1;
    swift_bridgeObjectRetain(a1);
    v31 = 0;
    if (v33)
      goto LABEL_7;
    goto LABEL_69;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v26 = __CocoaSet.makeIterator()(v25);
  v27 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v28 = sub_1001DD67C();
  v29 = Set.Iterator.init(_cocoa:)(&v122, v26, v27, v28);
  v30 = v123;
  v32 = v124;
  v31 = v125;
  v33 = v126;
  v108 = v122;
  if ((v122 & 0x8000000000000000) == 0)
  {
    if (v126)
    {
LABEL_7:
      v103 = v32;
      v105 = v30;
      v102 = v2;
      v34 = (v33 - 1) & v33;
      v35 = __clz(__rbit64(v33)) | ((_QWORD)v31 << 6);
      v36 = v31;
      goto LABEL_8;
    }
LABEL_69:
    v94 = (int64_t)(v31 + 1);
    if (__OFADD__(v31, 1))
    {
LABEL_91:
      __break(1u);
      goto LABEL_75;
    }
    v95 = (unint64_t)(v32 + 64) >> 6;
    if (v94 >= v95)
      goto LABEL_75;
    v103 = v32;
    v96 = *(_QWORD *)(v30 + 8 * v94);
    v36 = v31 + 1;
    if (!v96)
    {
      v36 = v31 + 2;
      if ((uint64_t)(v31 + 2) >= v95)
        goto LABEL_75;
      v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
      if (!v96)
      {
        v36 = v31 + 3;
        if ((uint64_t)(v31 + 3) >= v95)
          goto LABEL_75;
        v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
        if (!v96)
        {
          v36 = v31 + 4;
          if ((uint64_t)(v31 + 4) >= v95)
            goto LABEL_75;
          v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
          if (!v96)
          {
            v36 = v31 + 5;
            if ((uint64_t)(v31 + 5) >= v95)
              goto LABEL_75;
            v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
            if (!v96)
            {
              v101 = v31 + 6;
              do
              {
                if ((char *)v95 == v101)
                  goto LABEL_75;
                v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v101++);
              }
              while (!v96);
              v36 = v101 - 1;
            }
          }
        }
      }
    }
    v105 = v30;
    v102 = v2;
    v34 = (v96 - 1) & v96;
    v35 = __clz(__rbit64(v96)) + ((_QWORD)v36 << 6);
LABEL_8:
    v37 = (char *)*(id *)(*(_QWORD *)(v108 + 48) + 8 * v35);
    v115 = 1;
    v127 = v37;
    if (v37)
      goto LABEL_9;
LABEL_75:
    sub_1000C6560(v108);
    return 0;
  }
  v127 = v125;
  v105 = v123;
  v97 = __CocoaSet.Iterator.next()(v29);
  if (!v97)
    goto LABEL_75;
  v98 = v97;
  v103 = v32;
  v102 = v2;
  v120[0] = v97;
  swift_unknownObjectRetain(v97);
  swift_dynamicCast(v121, v120, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
  v99 = (char *)v121[0];
  v37 = (char *)swift_unknownObjectRelease(v98);
  v115 = 0;
  v36 = v127;
  v34 = v33;
  v127 = v99;
  if (!v99)
    goto LABEL_75;
LABEL_9:
  v109 = v15;
  v107 = v108 & 0x7FFFFFFFFFFFFFFFLL;
  v104 = (unint64_t)(v103 + 64) >> 6;
  v106 = (char *)&type metadata for Swift.AnyObject + 8;
  if (!v115)
    goto LABEL_12;
LABEL_10:
  if (v34)
  {
    v38 = (v34 - 1) & v34;
    v39 = __clz(__rbit64(v34)) | ((_QWORD)v36 << 6);
    v40 = v36;
    goto LABEL_31;
  }
  v45 = (int64_t)(v36 + 1);
  if (__OFADD__(v36, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v45 < v104)
  {
    v46 = *(_QWORD *)(v105 + 8 * v45);
    v40 = v36 + 1;
    if (v46)
      goto LABEL_30;
    v40 = v36 + 2;
    if ((uint64_t)(v36 + 2) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
      goto LABEL_30;
    v40 = v36 + 3;
    if ((uint64_t)(v36 + 3) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
      goto LABEL_30;
    v40 = v36 + 4;
    if ((uint64_t)(v36 + 4) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
    {
LABEL_30:
      v38 = (v46 - 1) & v46;
      v39 = __clz(__rbit64(v46)) + ((_QWORD)v40 << 6);
LABEL_31:
      v44 = (char *)*(id *)(*(_QWORD *)(v108 + 48) + 8 * v39);
      if (v44)
      {
        while (1)
        {
          v116 = v38;
          v117 = v40;
          v48 = objc_msgSend(v44, "creationDate", v102);
          if (v48)
          {
            v49 = v48;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

            v50 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
            v51 = (uint64_t)v112;
            v50(v112, v22, v12);
            v52 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
            v52((char *)v51, 0, 1, v12);
            v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v51, 1, v12);
            v55 = (uint64_t)v113;
            v54 = (uint64_t)v114;
            if ((_DWORD)v53 != 1)
            {
              v50(v119, (char *)v51, v12);
              goto LABEL_37;
            }
          }
          else
          {
            v52 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
            v51 = (uint64_t)v112;
            v53 = v52(v112, 1, 1, v12);
            v55 = (uint64_t)v113;
            v54 = (uint64_t)v114;
          }
          static Date.distantFuture.getter(v53);
          sub_10000882C(v51, (uint64_t *)&unk_1008380D0);
LABEL_37:
          v56 = objc_msgSend(v127, "creationDate");
          if (v56)
          {
            v57 = v56;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v56);

            v58 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
            v58(v55, v22, v12);
            v52((char *)v55, 0, 1, v12);
            v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v55, 1, v12);
            if ((_DWORD)v59 != 1)
            {
              v60 = v111;
              v58((uint64_t)v111, (char *)v55, v12);
              v61 = v60;
              goto LABEL_42;
            }
          }
          else
          {
            v59 = v52((char *)v55, 1, 1, v12);
          }
          v61 = v111;
          static Date.distantFuture.getter(v59);
          sub_10000882C(v55, (uint64_t *)&unk_1008380D0);
LABEL_42:
          v62 = v119;
          v63 = static Date.< infix(_:_:)(v119, v61);
          v64 = v61;
          v65 = v63;
          v66 = *(void (**)(char *, uint64_t))(v13 + 8);
          v66(v64, v12);
          v66(v62, v12);
          if ((v65 & 1) != 0)
            goto LABEL_64;
          v67 = objc_msgSend(v44, "creationDate");
          if (v67)
          {
            v68 = v67;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

            v69 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
            v69(v54, v22, v12);
            v52((char *)v54, 0, 1, v12);
            v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v54, 1, v12);
            if ((_DWORD)v70 != 1)
            {
              v69((uint64_t)v118, (char *)v54, v12);
              goto LABEL_48;
            }
          }
          else
          {
            v70 = v52((char *)v54, 1, 1, v12);
          }
          static Date.distantFuture.getter(v70);
          sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
LABEL_48:
          v71 = objc_msgSend(v127, "creationDate");
          if (!v71)
          {
            v74 = (uint64_t)v110;
            v75 = v52(v110, 1, 1, v12);
LABEL_52:
            v76 = v109;
            static Date.distantFuture.getter(v75);
            sub_10000882C(v74, (uint64_t *)&unk_1008380D0);
            goto LABEL_53;
          }
          v72 = v71;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

          v73 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
          v74 = (uint64_t)v110;
          v73(v110, v22, v12);
          v52((char *)v74, 0, 1, v12);
          v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v74, 1, v12);
          if ((_DWORD)v75 == 1)
            goto LABEL_52;
          v76 = v109;
          v73(v109, (char *)v74, v12);
LABEL_53:
          v77 = v118;
          v78 = static Date.== infix(_:_:)(v118, v76);
          v66(v76, v12);
          v66(v77, v12);
          if ((v78 & 1) != 0)
          {
            v79 = objc_msgSend(v44, "name");
            if (v79)
            {
              v80 = v79;
              v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
              v83 = v82;

            }
            else
            {
              v81 = 0;
              v83 = 0xE000000000000000;
            }
            v121[0] = v81;
            v121[1] = v83;
            v84 = objc_msgSend(v127, "name");
            if (v84)
            {
              v85 = v84;
              v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
              v88 = v87;

            }
            else
            {
              v86 = 0;
              v88 = 0xE000000000000000;
            }
            v120[0] = v86;
            v120[1] = v88;
            v89 = sub_1000E525C();
            v90 = StringProtocol.localizedStandardCompare<A>(_:)(v120, &type metadata for String, &type metadata for String, v89, v89);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v90 == -1)
            {
LABEL_64:

              v127 = v44;
              goto LABEL_62;
            }
          }

LABEL_62:
          v34 = v116;
          v36 = v117;
          if (v115)
            goto LABEL_10;
LABEL_12:
          v41 = __CocoaSet.Iterator.next()(v37);
          if (v41)
          {
            v42 = v41;
            v120[0] = v41;
            v43 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
            swift_unknownObjectRetain(v42);
            swift_dynamicCast(v121, v120, v106, v43, 7);
            v44 = (char *)v121[0];
            swift_unknownObjectRelease(v42);
            v40 = v36;
            v38 = v34;
            if (v44)
              continue;
          }
          goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
    v40 = v36 + 5;
    if ((uint64_t)(v36 + 5) < v104)
    {
      v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
      if (!v46)
      {
        v47 = v36 + 6;
        do
        {
          if ((char *)v104 == v47)
            goto LABEL_76;
          v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v47++);
        }
        while (!v46);
        v40 = v47 - 1;
      }
      goto LABEL_30;
    }
  }
LABEL_76:
  sub_1000C6560(v108);
  return v127;
}

void sub_1001D9F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  char *v60;
  void (*v61)(uint64_t, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  id v70;
  void *v71;
  char *v72;
  void (*v73)(uint64_t, char *, uint64_t);
  uint64_t v74;
  id v75;
  void *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  _QWORD v123[2];
  _QWORD v124[2];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v113 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v117 = (char *)&v105 - v7;
  __chkstk_darwin(v8);
  v116 = (char *)&v105 - v9;
  __chkstk_darwin(v10);
  v115 = (char *)&v105 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v121 = (char *)&v105 - v17;
  __chkstk_darwin(v18);
  v114 = (char *)&v105 - v19;
  __chkstk_darwin(v20);
  v130 = (char *)&v105 - v21;
  __chkstk_darwin(v22);
  v122 = (char *)&v105 - v23;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v96 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v31 = ~v96;
    v97 = -v96;
    if (v97 < 64)
      v98 = ~(-1 << v97);
    else
      v98 = -1;
    v32 = v98 & *(_QWORD *)(a1 + 56);
    v111 = a1;
    swift_bridgeObjectRetain(a1);
    v30 = 0;
    if (v32)
      goto LABEL_7;
    goto LABEL_69;
  }
  if (a1 < 0)
    v24 = a1;
  else
    v24 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v25 = __CocoaSet.makeIterator()(v24);
  v26 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v27 = sub_1001DD67C();
  v28 = Set.Iterator.init(_cocoa:)(&v125, v25, v26, v27);
  v29 = v126;
  v31 = v127;
  v30 = v128;
  v32 = v129;
  v111 = v125;
  if ((v125 & 0x8000000000000000) == 0)
  {
    if (v129)
    {
LABEL_7:
      v106 = v31;
      v108 = v29;
      v105 = v2;
      v33 = (v32 - 1) & v32;
      v34 = __clz(__rbit64(v32)) | (v30 << 6);
      v35 = v30;
LABEL_8:
      v36 = *(id *)(*(_QWORD *)(v111 + 48) + 8 * v34);
      v37 = v36;
      v118 = 1;
      if (!v36)
        goto LABEL_75;
      goto LABEL_9;
    }
LABEL_69:
    v99 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_91;
    v100 = (unint64_t)(v31 + 64) >> 6;
    if (v99 >= v100)
      goto LABEL_75;
    v106 = v31;
    v101 = *(_QWORD *)(v29 + 8 * v99);
    v35 = v30 + 1;
    if (!v101)
    {
      v35 = v30 + 2;
      if (v30 + 2 >= v100)
        goto LABEL_75;
      v101 = *(_QWORD *)(v29 + 8 * v35);
      if (!v101)
      {
        v35 = v30 + 3;
        if (v30 + 3 >= v100)
          goto LABEL_75;
        v101 = *(_QWORD *)(v29 + 8 * v35);
        if (!v101)
        {
          v35 = v30 + 4;
          if (v30 + 4 >= v100)
            goto LABEL_75;
          v101 = *(_QWORD *)(v29 + 8 * v35);
          if (!v101)
          {
            v35 = v30 + 5;
            if (v30 + 5 >= v100)
              goto LABEL_75;
            v101 = *(_QWORD *)(v29 + 8 * v35);
            if (!v101)
            {
              v104 = v30 + 6;
              do
              {
                if (v100 == v104)
                  goto LABEL_75;
                v101 = *(_QWORD *)(v29 + 8 * v104++);
              }
              while (!v101);
              v35 = v104 - 1;
            }
          }
        }
      }
    }
    v108 = v29;
    v105 = v2;
    v33 = (v101 - 1) & v101;
    v34 = __clz(__rbit64(v101)) + (v35 << 6);
    goto LABEL_8;
  }
  v108 = v126;
  v102 = __CocoaSet.Iterator.next()(v28);
  if (!v102)
    goto LABEL_75;
  v103 = v102;
  v106 = v31;
  v105 = v2;
  v123[0] = v102;
  swift_unknownObjectRetain(v102);
  swift_dynamicCast(v124, v123, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
  v37 = (void *)v124[0];
  v36 = (id)swift_unknownObjectRelease(v103);
  v118 = 0;
  v35 = v30;
  v33 = v32;
  if (!v37)
    goto LABEL_75;
LABEL_9:
  v112 = v15;
  v110 = v111 & 0x7FFFFFFFFFFFFFFFLL;
  v107 = (unint64_t)(v106 + 64) >> 6;
  v109 = (char *)&type metadata for Swift.AnyObject + 8;
  if (!v118)
    goto LABEL_12;
LABEL_10:
  if (v33)
  {
    v38 = (v33 - 1) & v33;
    v39 = __clz(__rbit64(v33)) | (v35 << 6);
    v40 = v35;
    goto LABEL_31;
  }
  v45 = v35 + 1;
  if (!__OFADD__(v35, 1))
  {
    if (v45 < v107)
    {
      v46 = *(_QWORD *)(v108 + 8 * v45);
      v40 = v35 + 1;
      if (v46)
        goto LABEL_30;
      v40 = v35 + 2;
      if (v35 + 2 >= v107)
        goto LABEL_75;
      v46 = *(_QWORD *)(v108 + 8 * v40);
      if (v46)
        goto LABEL_30;
      v40 = v35 + 3;
      if (v35 + 3 >= v107)
        goto LABEL_75;
      v46 = *(_QWORD *)(v108 + 8 * v40);
      if (v46)
        goto LABEL_30;
      v40 = v35 + 4;
      if (v35 + 4 >= v107)
        goto LABEL_75;
      v46 = *(_QWORD *)(v108 + 8 * v40);
      if (v46)
      {
LABEL_30:
        v38 = (v46 - 1) & v46;
        v39 = __clz(__rbit64(v46)) + (v40 << 6);
LABEL_31:
        v44 = *(id *)(*(_QWORD *)(v111 + 48) + 8 * v39);
        if (v44)
        {
          while (1)
          {
            v119 = v38;
            v120 = v40;
            v48 = v37;
            v49 = objc_msgSend(v37, "creationDate", v105);
            if (v49)
            {
              v50 = v49;
              v51 = v130;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

              v52 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
              v53 = (uint64_t)v115;
              v52(v115, v51, v12);
              v54 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
              v54((char *)v53, 0, 1, v12);
              v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v53, 1, v12);
              v57 = (uint64_t)v116;
              v56 = (uint64_t)v117;
              if ((_DWORD)v55 != 1)
              {
                v52(v122, (char *)v53, v12);
                goto LABEL_37;
              }
            }
            else
            {
              v54 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
              v53 = (uint64_t)v115;
              v55 = v54(v115, 1, 1, v12);
              v57 = (uint64_t)v116;
              v56 = (uint64_t)v117;
            }
            static Date.distantFuture.getter(v55);
            sub_10000882C(v53, (uint64_t *)&unk_1008380D0);
LABEL_37:
            v58 = objc_msgSend(v44, "creationDate");
            if (v58)
            {
              v59 = v58;
              v60 = v130;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

              v61 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
              v61(v57, v60, v12);
              v54((char *)v57, 0, 1, v12);
              v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v57, 1, v12);
              if ((_DWORD)v62 != 1)
              {
                v63 = v114;
                v61((uint64_t)v114, (char *)v57, v12);
                v64 = v63;
                goto LABEL_42;
              }
            }
            else
            {
              v62 = v54((char *)v57, 1, 1, v12);
            }
            v64 = v114;
            static Date.distantFuture.getter(v62);
            sub_10000882C(v57, (uint64_t *)&unk_1008380D0);
LABEL_42:
            v65 = v122;
            v66 = static Date.< infix(_:_:)(v122, v64);
            v67 = v64;
            v68 = v66;
            v69 = *(void (**)(char *, uint64_t))(v13 + 8);
            v69(v67, v12);
            v69(v65, v12);
            v37 = v48;
            if ((v68 & 1) != 0)
              goto LABEL_64;
            v70 = objc_msgSend(v48, "creationDate");
            if (v70)
            {
              v71 = v70;
              v72 = v130;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

              v73 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
              v73(v56, v72, v12);
              v54((char *)v56, 0, 1, v12);
              v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v56, 1, v12);
              if ((_DWORD)v74 != 1)
              {
                v73((uint64_t)v121, (char *)v56, v12);
                goto LABEL_48;
              }
            }
            else
            {
              v74 = v54((char *)v56, 1, 1, v12);
            }
            static Date.distantFuture.getter(v74);
            sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
LABEL_48:
            v75 = objc_msgSend(v44, "creationDate");
            if (!v75)
            {
              v79 = (uint64_t)v113;
              v80 = v54(v113, 1, 1, v12);
LABEL_52:
              v81 = v112;
              static Date.distantFuture.getter(v80);
              sub_10000882C(v79, (uint64_t *)&unk_1008380D0);
              goto LABEL_53;
            }
            v76 = v75;
            v77 = v130;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

            v78 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
            v79 = (uint64_t)v113;
            v78(v113, v77, v12);
            v54((char *)v79, 0, 1, v12);
            v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v79, 1, v12);
            if ((_DWORD)v80 == 1)
              goto LABEL_52;
            v81 = v112;
            v78(v112, (char *)v79, v12);
LABEL_53:
            v82 = v121;
            v83 = static Date.== infix(_:_:)(v121, v81);
            v69(v81, v12);
            v69(v82, v12);
            v37 = v48;
            if ((v83 & 1) != 0)
            {
              v84 = objc_msgSend(v48, "name");
              if (v84)
              {
                v85 = v84;
                v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
                v88 = v87;

              }
              else
              {
                v86 = 0;
                v88 = 0xE000000000000000;
              }
              v124[0] = v86;
              v124[1] = v88;
              v89 = objc_msgSend(v44, "name");
              if (v89)
              {
                v90 = v89;
                v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
                v93 = v92;

              }
              else
              {
                v91 = 0;
                v93 = 0xE000000000000000;
              }
              v123[0] = v91;
              v123[1] = v93;
              v94 = sub_1000E525C();
              v95 = StringProtocol.localizedStandardCompare<A>(_:)(v123, &type metadata for String, &type metadata for String, v94, v94);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v95 == -1)
              {
LABEL_64:

                v37 = v44;
                goto LABEL_62;
              }
            }

LABEL_62:
            v33 = v119;
            v35 = v120;
            if (v118)
              goto LABEL_10;
LABEL_12:
            v41 = __CocoaSet.Iterator.next()(v36);
            if (v41)
            {
              v42 = v41;
              v123[0] = v41;
              v43 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
              swift_unknownObjectRetain(v42);
              swift_dynamicCast(v124, v123, v109, v43, 7);
              v44 = (id)v124[0];
              swift_unknownObjectRelease(v42);
              v40 = v35;
              v38 = v33;
              if (v44)
                continue;
            }
            goto LABEL_75;
          }
        }
        goto LABEL_75;
      }
      v40 = v35 + 5;
      if (v35 + 5 < v107)
      {
        v46 = *(_QWORD *)(v108 + 8 * v40);
        if (!v46)
        {
          v47 = v35 + 6;
          do
          {
            if (v107 == v47)
              goto LABEL_75;
            v46 = *(_QWORD *)(v108 + 8 * v47++);
          }
          while (!v46);
          v40 = v47 - 1;
        }
        goto LABEL_30;
      }
    }
LABEL_75:
    sub_1000C6560(v111);
    return;
  }
  __break(1u);
LABEL_91:
  __break(1u);
}

uint64_t sub_1001DA9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083FBA0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083FBA0);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD00000000000003CLL;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006AE290;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_10083D5B0);
LABEL_9:
    sub_1001DAC88(_.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD00000000000003CLL;
    v13[1] = 0x80000001006AE290;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

uint64_t sub_1001DAC88(void *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  uint64_t aBlock[5];
  uint64_t v25;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  if (qword_100836F88 != -1)
    swift_once(&qword_100836F88, sub_1001DA9F8);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10083FBA0);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = sub_1002AEF14();
    v23 = sub_10001A820((uint64_t)v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, aBlock);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DiacriticsInsensitiveHashtagLabelsMigrator BEGIN {store: %{public}s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v13 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v14 = objc_msgSend(v6, "persistentStoreCoordinator");
  objc_msgSend(v13, "setPersistentStoreCoordinator:", v14);

  objc_msgSend(v13, "setTransactionAuthor:", RDStoreControllerDiacriticsInsensitiveHashtagLabelsMigrationAuthor);
  v15 = (_QWORD *)swift_allocObject(&unk_1007E9460, 48, 7);
  v15[2] = v2;
  v15[3] = v13;
  v15[4] = v6;
  v15[5] = ObjectType;
  v16 = swift_allocObject(&unk_1007E9488, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1001DBAC0;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = (uint64_t)sub_1000098E4;
  v25 = v16;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000098C4;
  aBlock[3] = (uint64_t)&unk_1007E94A0;
  v17 = _Block_copy(aBlock);
  v18 = v25;
  v19 = v6;
  v20 = v2;
  v21 = v13;
  swift_retain();
  swift_release(v18);
  objc_msgSend(v21, "performBlockAndWait:", v17);

  _Block_release(v17);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v16, "", 132, 36, 28, 1);
  swift_release(v15);
  result = swift_release(v16);
  if ((v21 & 1) != 0)
    __break(1u);
  return result;
}

void sub_1001DAFB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t p_weak_ivar_lyt;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  BOOL v24;
  unsigned int v25;
  id v26;
  id v27;
  uint64_t v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  id v52;

  v4 = sub_1001DBADC((uint64_t)a2, a3, 50);
  v5 = 0;
  p_weak_ivar_lyt = (uint64_t)&RDAlarmEngine.weak_ivar_lyt;
  v15 = v4;
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v32 = v4;
    else
      v32 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v16 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_8:
      v46 = v16;
      v16 = 0;
      v17 = 0;
      p_weak_ivar_lyt = v15 & 0xC000000000000001;
      while (1)
      {
        v18 = p_weak_ivar_lyt
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v15)
            : *(id *)(v15 + 8 * v16 + 32);
        v19 = v18;
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        v21 = (uint64_t)sub_1001DC5BC(v18, a2, a3);
        if ((unint64_t)v21 >> 62)
        {
          if (v21 < 0)
            v28 = v21;
          else
            v28 = v21 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v21);
          v22 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease();
        }
        else
        {
          v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
        v24 = __OFADD__(v17, v22);
        v17 += v22;
        if (v24)
          goto LABEL_28;
        if (__ROR8__(0x8F5C28F5C28F5C29 * v20 + 0x51EB851EB851EB8, 1) <= 0x51EB851EB851EB8uLL
          && (objc_msgSend(a2, "hasChanges", v23) & 1) != 0)
        {
          v52 = 0;
          v25 = objc_msgSend(a2, "save:", &v52);
          v26 = v52;
          if (!v25)
          {
            v30 = v52;
            swift_bridgeObjectRelease();
            v5 = _convertNSErrorToError(_:)(v26);

            swift_willThrow(v31);
            ++v16;
            p_weak_ivar_lyt = 0x100836000;
            goto LABEL_2;
          }
          v27 = v52;
        }

        ++v16;
        if (v20 == v46)
        {
          *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
          p_weak_ivar_lyt = 0x100836000;
          v16 = v46;
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      swift_once(&qword_100836F88, sub_1001DA9F8);
LABEL_3:
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10083FBA0);
      swift_errorRetain(v5);
      v8 = swift_errorRetain(v5);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(12, -1);
        v12 = (void *)swift_slowAlloc(32, -1);
        v52 = v12;
        *(_DWORD *)v11 = 136315138;
        swift_getErrorValue(v5, v49, v48);
        v13 = Error.rem_errorDescription.getter(v48[1], v48[2]);
        v50 = sub_10001A820(v13, v14, (uint64_t *)&v52);
        p_weak_ivar_lyt = 0x100836000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
        swift_bridgeObjectRelease();
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "DiacriticsInsensitiveHashtagLabelsMigrator with error: %s", v11, 0xCu);
        swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v12, -1, -1);
        swift_slowDealloc(v11, -1, -1);

        swift_errorRelease(v5);
      }
      else
      {
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        swift_errorRelease(v5);

      }
      goto LABEL_38;
    }
  }
  else
  {
    v16 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_8;
  }
  *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
  v17 = 0;
LABEL_35:
  if ((objc_msgSend(a2, "hasChanges", v29, v46) & 1) != 0)
  {
    v52 = 0;
    v33 = objc_msgSend(a2, "save:", &v52);
    v34 = v52;
    if (v33)
    {
      v35 = v52;
      goto LABEL_38;
    }
    v44 = v52;
    v5 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v45);
LABEL_2:
    if (*(_QWORD *)(p_weak_ivar_lyt + 3976) == -1)
      goto LABEL_3;
    goto LABEL_29;
  }
LABEL_38:
  if (*(_QWORD *)(p_weak_ivar_lyt + 3976) != -1)
    swift_once(&qword_100836F88, sub_1001DA9F8);
  v36 = type metadata accessor for Logger(0);
  sub_10001AAA8(v36, (uint64_t)qword_10083FBA0);
  v37 = a3;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(32, -1);
    v41 = (void *)swift_slowAlloc(32, -1);
    v52 = v41;
    *(_DWORD *)v40 = 136446722;
    v42 = sub_1002AEF14();
    v50 = sub_10001A820((uint64_t)v42, v43, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);

    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2048;
    v50 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    *(_WORD *)(v40 + 22) = 2048;
    v50 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "DiacriticsInsensitiveHashtagLabelsMigrator END {store: %{public}s, existing hashtag labels count = %ld, newly created hashtag labels count: %ld}", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
}

void sub_1001DB5B0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  id v28;
  id v29;
  void *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  Class isa;
  void (*v35)(char *, uint64_t);
  void *v36;
  void *v37;
  double v38;
  id v39;
  void *v40;
  void (*v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  Class v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  id v48;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - v13;
  *(_QWORD *)&v16 = __chkstk_darwin(v15).n128_u64[0];
  v18 = (char *)&v44 - v17;
  v48 = v1;
  v19 = objc_msgSend(v1, "hashtags", v16);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v22 = sub_1001DD67C();
    v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

    if ((v23 & 0xC000000000000001) != 0)
    {
      if (v23 < 0)
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFFFFFFFF8;
      if (!__CocoaSet.count.getter(v24))
        goto LABEL_13;
    }
    else if (!*(_QWORD *)(v23 + 16))
    {
      goto LABEL_13;
    }
    v25 = sub_1001D94DC(v23);
    if (v25)
    {
      v46 = 0;
      v26 = v4;
      v27 = v25;
      v28 = objc_msgSend(v25, "name");
      objc_msgSend(v48, "setName:", v28);

      v47 = v27;
      v29 = objc_msgSend(v27, "creationDate");
      if (v29)
      {
        v30 = v29;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v31 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v31(v7, v14, v8);
        v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v45(v7, 0, 1, v8);
        v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
        v33 = (uint64_t)v26;
        if ((_DWORD)v32 != 1)
        {
          v31(v18, v7, v8);
          goto LABEL_16;
        }
      }
      else
      {
        v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v32 = v45(v7, 1, 1, v8);
        v33 = (uint64_t)v26;
      }
      static Date.distantFuture.getter(v32);
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
LABEL_16:
      isa = Date._bridgeToObjectiveC()().super.isa;
      v35 = *(void (**)(char *, uint64_t))(v9 + 8);
      v35(v18, v8);
      objc_msgSend(v48, "setFirstOccurrenceCreationDate:", isa);

      sub_1001D9F74(v23);
      v37 = v36;
      *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
      if (!v37)
      {

        return;
      }
      v39 = objc_msgSend(v37, "creationDate", v38);
      if (v39)
      {
        v40 = v39;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

        v41 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        v41(v33, v14, v8);
        v45((char *)v33, 0, 1, v8);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v33, 1, v8);
        if ((_DWORD)v42 != 1)
        {
          v41((uint64_t)v11, (char *)v33, v8);
LABEL_23:
          v43 = Date._bridgeToObjectiveC()().super.isa;
          v35(v11, v8);
          objc_msgSend(v48, "setRecencyDate:", v43);

          return;
        }
      }
      else
      {
        v42 = v45((char *)v33, 1, 1, v8);
      }
      static Date.distantPast.getter(v42);
      sub_10000882C(v33, (uint64_t *)&unk_1008380D0);
      goto LABEL_23;
    }
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

id RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels()
{
  return objc_opt_self(_TtC7remindd60RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels);
}

id RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001DBA8C()
{
  id *v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_1001DBAC0()
{
  uint64_t v0;

  sub_1001DAFB0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1001DBACC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DBADC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  Class v49;
  uint64_t v50;
  id v51;
  Class v52;
  uint64_t v53;
  uint64_t result;
  Swift::String v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char v65[40];
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  __int128 v69;
  void *v70;
  char v71[48];
  char v72[56];
  _QWORD *v73;

  v3 = sub_10001A630((uint64_t *)&unk_10083FC00);
  inited = swift_initStackObject(v3, v72);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006AE370);
  v6 = swift_getKeyPath(&unk_1006AE308);
  v7 = sub_1002A52BC(KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  *(_QWORD *)(inited + 32) = v7;
  v8 = swift_getKeyPath(&unk_1006AE340);
  v9 = sub_100341E64(v8, 1);
  v10 = swift_release(v8);
  *(_QWORD *)(inited + 40) = v9;
  specialized Array._endMutation()(v10);
  v11 = sub_10001CC54(inited);
  v12 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "entity");
  objc_msgSend(v13, "setEntity:", v14);

  objc_msgSend(v13, "setAffectedStores:", 0);
  objc_msgSend(v13, "setPredicate:", v11);
  v15 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v16 = swift_initStackObject(v15, v71);
  *(_OWORD *)(v16 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v16 + 32) = swift_getKeyPath(&unk_1006AE370);
  v17 = swift_getKeyPath(&unk_1006AE308);
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)&v69 = v16;
  specialized Array._endMutation()(v17);
  v18 = v16;
  v73 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 2, 0);
  v19 = v73;
  v61 = v12;
  v62 = (void *)v11;
  if ((v16 & 0xC000000000000001) != 0)
  {
    v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    v21 = v20;
  }
  else
  {
    v21 = *(_QWORD *)(v16 + 32);
    v20 = swift_retain();
  }
  v22 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v20);
  if (!v23)
    goto LABEL_20;
  v24 = v22;
  v25 = v23;
  v70 = &type metadata for String;
  swift_release(v21);
  *(_QWORD *)&v69 = v24;
  *((_QWORD *)&v69 + 1) = v25;
  v27 = v19[2];
  v26 = v19[3];
  if (v27 >= v26 >> 1)
  {
    sub_1001C1C48(v26 > 1, v27 + 1, 1);
    v19 = v73;
  }
  v19[2] = v27 + 1;
  sub_10001A6CC(&v69, &v19[4 * v27 + 4]);
  if ((v18 & 0xC000000000000001) != 0)
  {
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v18);
    v21 = v28;
  }
  else
  {
    v21 = *(_QWORD *)(v18 + 40);
    v28 = swift_retain();
  }
  v29 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v28);
  if (!v30)
  {
LABEL_20:
    v67 = 0;
    v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v55._object = (void *)0x80000001006F8C10;
    v55._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v55);
    v66 = v21;
    v56 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v66, &v67, v56, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v57 = v67;
    v58 = v68;
LABEL_22:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v57, v58, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
    return result;
  }
  v31 = v29;
  v32 = v30;
  v70 = &type metadata for String;
  swift_release(v21);
  *(_QWORD *)&v69 = v31;
  *((_QWORD *)&v69 + 1) = v32;
  v73 = v19;
  v34 = v19[2];
  v33 = v19[3];
  if (v34 >= v33 >> 1)
  {
    sub_1001C1C48(v33 > 1, v34 + 1, 1);
    v19 = v73;
  }
  v19[2] = v34 + 1;
  sub_10001A6CC(&v69, &v19[4 * v34 + 4]);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v19);
  objc_msgSend(v13, "setPropertiesToFetch:", isa);

  v36 = swift_initStackObject(v15, v65);
  *(_OWORD *)(v36 + 16) = xmmword_1006A7330;
  v37 = swift_getKeyPath(&unk_1006AE340);
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)&v69 = v36;
  specialized Array._endMutation()(v37);
  v38 = v69;
  v67 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v39 = v67;
  if ((v38 & 0xC000000000000001) != 0)
  {
    v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
    v41 = (_QWORD *)v40;
  }
  else
  {
    v41 = *(_QWORD **)(v38 + 32);
    v40 = swift_retain();
  }
  v42 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v40);
  if (!v43)
  {
    *(_QWORD *)&v69 = 0;
    *((_QWORD *)&v69 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v59._object = (void *)0x80000001006F8C10;
    v59._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v59);
    v73 = v41;
    v60 = sub_10001A630(&qword_10083DAA8);
    _print_unlocked<A, B>(_:_:)(&v73, &v69, v60, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v58 = *((_QWORD *)&v69 + 1);
    v57 = (_QWORD *)v69;
    goto LABEL_22;
  }
  v44 = v42;
  v45 = v43;
  swift_release(v41);
  v47 = v39[2];
  v46 = v39[3];
  if (v47 >= v46 >> 1)
  {
    sub_1001C1B0C(v46 > 1, v47 + 1, 1);
    v39 = v67;
  }
  v39[2] = v47 + 1;
  v48 = &v39[2 * v47];
  v48[4] = v44;
  v48[5] = v45;
  swift_bridgeObjectRelease();
  v49 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v39);
  objc_msgSend(v13, "setRelationshipKeyPathsForPrefetching:", v49);

  v50 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v50 + 32) = a2;
  *(_QWORD *)&v69 = v50;
  specialized Array._endMutation()(v50);
  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v51 = a2;
  v52 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setAffectedStores:", v52, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v13, "setFetchBatchSize:", a3);
  v53 = NSManagedObjectContext.fetch<A>(_:)(v13, v61);

  return v53;
}

uint64_t sub_1001DC144(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  Class isa;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class v30;
  uint64_t v31;
  id v32;
  uint64_t result;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42[40];
  _QWORD *v43;

  KeyPath = swift_getKeyPath(&unk_1006AE308);
  swift_bridgeObjectRetain(a2);
  v8 = (void *)sub_1002E89AC(KeyPath, a1, a2);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  v9 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v37 = v9;
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setPropertiesToFetch:", isa);

  v13 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v13, v42);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  v15 = swift_getKeyPath(&unk_1006AE340);
  *(_QWORD *)(inited + 32) = v15;
  v40 = inited;
  specialized Array._endMutation()(v15);
  v43 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v16 = v43;
  if ((inited & 0xC000000000000001) != 0)
  {
    v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v18 = v17;
  }
  else
  {
    v18 = *(_QWORD *)(inited + 32);
    v17 = swift_retain();
  }
  v19 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v17);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_release(v18);
    v24 = v16[2];
    v23 = v16[3];
    if (v24 >= v23 >> 1)
    {
      sub_1001C1B0C(v23 > 1, v24 + 1, 1);
      v16 = v43;
    }
    v16[2] = v24 + 1;
    v25 = &v16[2 * v24];
    v25[4] = v21;
    v25[5] = v22;
    swift_bridgeObjectRelease();
    v26 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v16);
    objc_msgSend(v10, "setRelationshipKeyPathsForPrefetching:", v26);

    v27 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v27 + 16) = xmmword_1006A7330;
    v28 = (uint64_t)a4;
    *(_QWORD *)(v27 + 32) = a4;
    v40 = v27;
    specialized Array._endMutation()(v27);
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v29 = a4;
    v30 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setAffectedStores:", v30, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(v10, "setFetchLimit:", 1);
    v31 = NSManagedObjectContext.fetch<A>(_:)(v10, v37);
    if (v4)
    {

      return v28;
    }
    v18 = v31;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v34 = v31;
      else
        v34 = v31 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v31);
      v28 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease();
      if (!v28)
        goto LABEL_15;
    }
    else
    {
      v28 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v28)
      {
LABEL_15:
        swift_bridgeObjectRelease();

        return v28;
      }
    }
    if ((v18 & 0xC000000000000001) != 0)
    {
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
      goto LABEL_14;
    }
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v18 + 32);
LABEL_14:
      v28 = (uint64_t)v32;
      goto LABEL_15;
    }
    __break(1u);
  }
  v40 = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v35._object = (void *)0x80000001006F8C10;
  v35._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v35);
  v39 = v18;
  v36 = sub_10001A630(&qword_10083DAA8);
  _print_unlocked<A, B>(_:_:)(&v39, &v40, v36, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v40, v41, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001DC5BC(void *a1, void *a2, void *a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  int64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  NSObject *v70;
  _BOOL4 v71;
  uint64_t v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  _QWORD *v84;
  unint64_t v85;
  char v86;
  id v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  NSObject *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  NSObject *v102;
  uint64_t v103;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v105;
  int64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int64_t v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  id v115;
  unint64_t v117;
  int64_t v118;
  id v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v128[2];
  __n128 v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  id v133;
  unint64_t v134;
  int v135;
  char *v136;
  __n128 v137;
  void *v138;
  id v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  int64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156[2];
  _QWORD v157[5];

  v138 = a3;
  v141 = a2;
  v4 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v149 = (char *)v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "hashtags", v5);
  if (!v7)
    return _swiftEmptyArrayStorage;
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v134 = sub_1001DD67C();
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v134);

  v11 = objc_msgSend(a1, "canonicalName");
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  v12 = v11;
  v139 = a1;
  v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  if (qword_100836F88 != -1)
LABEL_116:
    swift_once(&qword_100836F88, sub_1001DA9F8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083FBA0);
  swift_bridgeObjectRetain_n(v14, 2);
  v17 = swift_bridgeObjectRetain_n(v10, 2);
  v147 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v151 = (void *)v14;
  if (v20)
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(32, -1);
    v156[0] = v22;
    *(_DWORD *)v21 = 136315394;
    swift_bridgeObjectRetain(v14);
    v155 = sub_10001A820(v153, v14, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v21 + 12) = 2048;
    if ((v10 & 0xC000000000000001) != 0)
    {
      if (v10 < 0)
        v23 = v10;
      else
        v23 = v10 & 0xFFFFFFFFFFFFFF8;
      v24 = __CocoaSet.count.getter(v23);
    }
    else
    {
      v24 = *(_QWORD *)(v10 + 16);
    }
    swift_bridgeObjectRelease();
    v155 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "DiacriticsInsensitiveHashtagLabelsMigrator: process hashtag label '%s' with hashtags: %ld", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    if ((v10 & 0xC000000000000001) == 0)
      goto LABEL_19;
LABEL_13:
    if (v10 < 0)
      v28 = v10;
    else
      v28 = v10 & 0xFFFFFFFFFFFFFF8;
    v29 = __CocoaSet.makeIterator()(v28);
    v26 = Set.Iterator.init(_cocoa:)(v157, v29, v9, v134);
    v10 = v157[0];
    v146 = v157[1];
    v30 = v157[2];
    v31 = v157[3];
    v32 = v157[4];
    goto LABEL_23;
  }

  swift_bridgeObjectRelease_n(v14, 2);
  v27 = swift_bridgeObjectRelease_n(v10, 2);
  if ((v10 & 0xC000000000000001) != 0)
    goto LABEL_13;
LABEL_19:
  v31 = 0;
  v33 = *(_QWORD *)(v10 + 56);
  v146 = v10 + 56;
  v34 = -1 << *(_BYTE *)(v10 + 32);
  v35 = ~v34;
  v36 = -v34;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  else
    v37 = -1;
  v32 = v37 & v33;
  v30 = v35;
LABEL_23:
  v143 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  v130 = v30;
  v144 = (unint64_t)(v30 + 64) >> 6;
  v128[1] = v156;
  v145 = &_swiftEmptyDictionarySingleton;
  v27.n128_u64[0] = 136446210;
  v137 = v27;
  v136 = (char *)&type metadata for Any + 8;
  v27.n128_u64[0] = 136446466;
  v131 = v27;
  v27.n128_u64[0] = 138412290;
  v129 = v27;
  v142 = (char *)&type metadata for Swift.AnyObject + 8;
  v140 = v9;
  v152 = v10;
  while (1)
  {
    if (v10 < 0)
    {
      v40 = __CocoaSet.Iterator.next()(v26);
      if (!v40)
        goto LABEL_78;
      v41 = v40;
      v155 = v40;
      swift_unknownObjectRetain(v40);
      swift_dynamicCast(v156, &v155, v142, v9, 7);
      v42 = (id)v156[0];
      swift_unknownObjectRelease(v41);
      v14 = v31;
      v38 = v32;
      if (!v42)
        goto LABEL_78;
      goto LABEL_41;
    }
    if (v32)
    {
      v38 = (v32 - 1) & v32;
      v39 = __clz(__rbit64(v32)) | (v31 << 6);
      v14 = v31;
      goto LABEL_40;
    }
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    if (v14 >= v144)
      goto LABEL_78;
    v43 = *(_QWORD *)(v146 + 8 * v14);
    if (!v43)
      break;
LABEL_39:
    v38 = (v43 - 1) & v43;
    v39 = __clz(__rbit64(v43)) + (v14 << 6);
LABEL_40:
    v42 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v39);
    if (!v42)
      goto LABEL_78;
LABEL_41:
    v45 = objc_msgSend(v42, "name");
    if (v45)
    {
      v46 = v45;
      v154 = v14;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      v156[0] = v47;
      v156[1] = v49;
      v50 = (uint64_t)v149;
      static Locale.current.getter(v51);
      v52 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
      v53 = sub_1000E525C();
      v54 = StringProtocol.foldedStringForWriting(locale:)(v50, &type metadata for String, v53);
      v25 = v55;
      sub_10000882C(v50, (uint64_t *)&unk_10083FBE0);
      swift_bridgeObjectRelease();
      v56 = v151;
      if (v54 == v153 && v25 == v151
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v25, v153, v151, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();

        v31 = v154;
        goto LABEL_50;
      }
      swift_bridgeObjectRetain_n(v56, 2);
      v69 = v42;
      v70 = Logger.logObject.getter(v69);
      v135 = static os_log_type_t.info.getter(v70);
      v71 = os_log_type_enabled(v70, (os_log_type_t)v135);
      v148 = v38;
      if (v71)
      {
        v72 = swift_slowAlloc(22, -1);
        v132 = swift_slowAlloc(64, -1);
        v156[0] = v132;
        *(_DWORD *)v72 = v131.n128_u32[0];
        v133 = v69;
        v73 = objc_msgSend(v69, "remObjectID");
        if (v73)
        {
          v74 = v73;
          v75 = objc_msgSend(v73, "description");

          v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
          v78 = v77;

          v38 = v148;
        }
        else
        {
          v78 = 0xE300000000000000;
          v76 = 7104878;
        }
        *(_QWORD *)(v72 + 4) = sub_10001A820(v76, v78, v156);
        v79 = v133;

        swift_bridgeObjectRelease();
        *(_WORD *)(v72 + 12) = 2080;
        v80 = (unint64_t)v151;
        swift_bridgeObjectRetain(v151);
        *(_QWORD *)(v72 + 14) = sub_10001A820(v153, v80, v156);
        v81 = v80;
        v69 = v79;
        swift_bridgeObjectRelease_n(v81, 3);
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v135, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not match hashtag label name '%s'", (uint8_t *)v72, 0x16u);
        v82 = v132;
        swift_arrayDestroy(v132, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v72, -1, -1);

        v9 = v140;
      }
      else
      {

        swift_bridgeObjectRelease_n(v56, 2);
      }
      objc_msgSend(v139, "removeHashtagsObject:", v69);
      v83 = v154;
      if (!v145[2])
        goto LABEL_63;
      swift_bridgeObjectRetain(v25);
      v84 = v145;
      v85 = sub_10001A6DC(v54, (uint64_t)v25);
      if ((v86 & 1) != 0)
      {
        v87 = *(id *)(v84[7] + 8 * v85);
        objc_msgSend(v87, "addHashtagsObject:", v69, swift_bridgeObjectRelease_n(v25, 2).n128_f64[0]);

        v31 = v83;
LABEL_50:
        v32 = v38;
        v10 = v152;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_63:
        v88 = v69;
        v89 = v150;
        v90 = (void *)sub_1001DC144(v54, (uint64_t)v25, (uint64_t)v141, v138);
        v150 = v89;
        if (v89)
        {
          sub_1000C6560(v152);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v25;
        }
        v91 = v90;
        if (v90)
        {
          v92 = v90;
          v93 = Logger.logObject.getter(v92);
          v94 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v93, v94))
          {
            v95 = swift_slowAlloc(12, -1);
            v96 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v95 = v129.n128_u32[0];
            *(_QWORD *)(v95 + 4) = v92;
            *v96 = v91;
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag label '%@' is already in database", (uint8_t *)v95, 0xCu);
            v97 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v96, 1, v97);
            v98 = v96;
            v9 = v140;
            swift_slowDealloc(v98, -1, -1);
            v99 = v95;
            v83 = v154;
            swift_slowDealloc(v99, -1, -1);
          }
          else
          {

            v93 = v92;
          }

          -[NSObject addHashtagsObject:](v92, "addHashtagsObject:", v88);
          v105 = v92;
        }
        else
        {
          v100 = v150;
          v101 = sub_10057A454(v88, v141);
          v150 = v100;
          v105 = v101;
        }
        v102 = v105;
        v103 = (uint64_t)v145;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v145);
        v156[0] = v103;
        sub_10028B8A8((uint64_t)v102, v54, (uint64_t)v25, isUniquelyReferenced_nonNull_native);
        v145 = (_QWORD *)v156[0];

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v83;
LABEL_71:
        v32 = v148;
        v10 = v152;
      }
    }
    else
    {
      v57 = v42;
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v148 = v38;
        v60 = v14;
        v61 = swift_slowAlloc(12, -1);
        v62 = swift_slowAlloc(32, -1);
        v156[0] = v62;
        *(_DWORD *)v61 = v137.n128_u32[0];
        v63 = objc_msgSend(v57, "remObjectID");
        if (v63)
        {
          v64 = v63;
          v65 = objc_msgSend(v63, "description");

          v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
          v68 = v67;

          v9 = v140;
        }
        else
        {
          v68 = 0xE300000000000000;
          v66 = 7104878;
        }
        *(_QWORD *)(v61 + 4) = sub_10001A820(v66, v68, v156);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not have canonicalName", (uint8_t *)v61, 0xCu);
        swift_arrayDestroy(v62, 1, v136);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v61, -1, -1);

        v31 = v60;
        goto LABEL_71;
      }

      v31 = v14;
      v32 = v38;
    }
  }
  v44 = v31 + 2;
  if (v31 + 2 >= v144)
    goto LABEL_78;
  v43 = *(_QWORD *)(v146 + 8 * v44);
  if (v43)
    goto LABEL_38;
  v44 = v31 + 3;
  if (v31 + 3 >= v144)
    goto LABEL_78;
  v43 = *(_QWORD *)(v146 + 8 * v44);
  if (v43)
  {
LABEL_38:
    v14 = v44;
    goto LABEL_39;
  }
  v14 = v31 + 4;
  if (v31 + 4 >= v144)
    goto LABEL_78;
  v43 = *(_QWORD *)(v146 + 8 * v14);
  if (v43)
    goto LABEL_39;
  v106 = v31 + 5;
  while (v144 != v106)
  {
    v43 = *(_QWORD *)(v146 + 8 * v106++);
    if (v43)
    {
      v14 = v106 - 1;
      goto LABEL_39;
    }
  }
LABEL_78:
  sub_1000C6560(v10);
  swift_bridgeObjectRelease();
  v14 = (int64_t)v145;
  v107 = (char *)(v145 + 8);
  v108 = 1 << *((_BYTE *)v145 + 32);
  v109 = -1;
  if (v108 < 64)
    v109 = ~(-1 << v108);
  v110 = v109 & v145[8];
  v111 = (unint64_t)(v108 + 63) >> 6;
  swift_bridgeObjectRetain(v145);
  v112 = 0;
  while (2)
  {
    if (v110)
    {
      v113 = __clz(__rbit64(v110));
      v110 &= v110 - 1;
      v114 = v113 | (v112 << 6);
      goto LABEL_82;
    }
    if (__OFADD__(v112++, 1))
    {
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    if (v112 >= v111)
      break;
    v117 = *(_QWORD *)&v107[8 * v112];
    if (v117)
      goto LABEL_94;
    v118 = v112 + 1;
    if (v112 + 1 >= v111)
      break;
    v117 = *(_QWORD *)&v107[8 * v118];
    if (v117)
      goto LABEL_93;
    v118 = v112 + 2;
    if (v112 + 2 >= v111)
      break;
    v117 = *(_QWORD *)&v107[8 * v118];
    if (v117)
      goto LABEL_93;
    v118 = v112 + 3;
    if (v112 + 3 < v111)
    {
      v117 = *(_QWORD *)&v107[8 * v118];
      if (!v117)
      {
        while (1)
        {
          v112 = v118 + 1;
          if (__OFADD__(v118, 1))
            goto LABEL_114;
          if (v112 >= v111)
            goto LABEL_99;
          v117 = *(_QWORD *)&v107[8 * v112];
          ++v118;
          if (v117)
            goto LABEL_94;
        }
      }
LABEL_93:
      v112 = v118;
LABEL_94:
      v110 = (v117 - 1) & v117;
      v114 = __clz(__rbit64(v117)) + (v112 << 6);
LABEL_82:
      v115 = *(id *)(*(_QWORD *)(v14 + 56) + 8 * v114);
      sub_1001DB5B0();

      continue;
    }
    break;
  }
LABEL_99:
  swift_release(v14);
  v119 = v139;
  v120 = objc_msgSend(v139, "hashtags");
  if (v120
    && ((v121 = v120,
         v122 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v120, v9, v134),
         v121,
         (v122 & 0xC000000000000001) == 0)
      ? (v124 = *(_QWORD *)(v122 + 16))
      : (v122 < 0 ? (v123 = v122) : (v123 = v122 & 0xFFFFFFFFFFFFFF8), v124 = __CocoaSet.count.getter(v123)),
        swift_bridgeObjectRelease(),
        v124))
  {
    if (*(_QWORD *)(v14 + 16))
      sub_1001DB5B0();
  }
  else
  {
    objc_msgSend(v141, "deleteObject:", v119);
  }
  swift_bridgeObjectRetain(v14);
  v125 = v150;
  v25 = sub_1001D9300(v126);
  v150 = v125;
  swift_bridgeObjectRelease_n(v14, 2);
  return v25;
}

unint64_t sub_1001DD67C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083BDF0;
  if (!qword_10083BDF0)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10083BDF0);
  }
  return result;
}

_QWORD *sub_1001DD6EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v1 = type metadata accessor for CharacterSet(0);
  v2 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)&v3 = __chkstk_darwin(v1).n128_u64[0];
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, "isInserted", v3) && (objc_msgSend(v0, "completed") & 1) == 0)
  {
    v6 = sub_1002C9A84(0, 1, 1, _swiftEmptyArrayStorage);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_1002C9A84((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v6[2] = v8 + 1;
    *((_BYTE *)v6 + v8 + 32) = 1;
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  v9 = objc_msgSend(v0, "changedValues");
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if ((objc_msgSend(v0, "isInserted") & 1) == 0)
  {
    if (*(_QWORD *)(v10 + 16))
    {
      v11 = sub_10001A6DC(0x6574656C706D6F63, 0xE900000000000064);
      if ((v12 & 1) != 0)
      {
        sub_10001A670(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v31);
        if ((swift_dynamicCast(&v30, &v31, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
          && v30 == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
            v6 = sub_1002C9A84(0, v6[2] + 1, 1, v6);
          v14 = v6[2];
          v13 = v6[3];
          if (v14 >= v13 >> 1)
            v6 = sub_1002C9A84((_QWORD *)(v13 > 1), v14 + 1, 1, v6);
          v6[2] = v14 + 1;
          *((_BYTE *)v6 + v14 + 32) = 2;
        }
      }
    }
  }
  static CharacterSet.hashtagTokenPrefixCharacters.getter();
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = sub_10001A6DC(0x656C746974, 0xE500000000000000);
    if ((v16 & 1) != 0)
    {
      sub_10001A670(*(_QWORD *)(v10 + 56) + 32 * v15, (uint64_t)&v31);
      if ((swift_dynamicCast(&v30, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v31 = v30;
        v17 = sub_1000E525C();
        StringProtocol.rangeOfCharacter(from:options:range:)(v5, 0, 0, 0, 1, &type metadata for String, v17);
        v19 = v18;
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
            v6 = sub_1002C9A84(0, v6[2] + 1, 1, v6);
          v21 = v6[2];
          v20 = v6[3];
          if (v21 >= v20 >> 1)
            v6 = sub_1002C9A84((_QWORD *)(v20 > 1), v21 + 1, 1, v6);
          v6[2] = v21 + 1;
          *((_BYTE *)v6 + v21 + 32) = 3;
        }
      }
    }
  }
  if (*(_QWORD *)(v10 + 16) && (v22 = sub_10001A6DC(0x7365746F6ELL, 0xE500000000000000), (v23 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v32 + 1))
  {
    if ((swift_dynamicCast(&v30, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v31 = v30;
      v24 = sub_1000E525C();
      StringProtocol.rangeOfCharacter(from:options:range:)(v5, 0, 0, 0, 1, &type metadata for String, v24);
      v26 = v25;
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_1002C9A84(0, v6[2] + 1, 1, v6);
        v28 = v6[2];
        v27 = v6[3];
        if (v28 >= v27 >> 1)
          v6 = sub_1002C9A84((_QWORD *)(v27 > 1), v28 + 1, 1, v6);
        v6[2] = v28 + 1;
        *((_BYTE *)v6 + v28 + 32) = 4;
      }
    }
  }
  else
  {
    sub_1000F4294((uint64_t)&v31);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

unint64_t sub_1001DDB68(uint64_t a1)
{
  unint64_t result;

  result = sub_1001DDB8C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001DDB8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FC30;
  if (!qword_10083FC30)
  {
    v1 = type metadata accessor for REMListStableSortingDataView.Invocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMListStableSortingDataView.Invocation, v1);
    atomic_store(result, (unint64_t *)&qword_10083FC30);
  }
  return result;
}

uint64_t sub_1001DDBD4(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_1001DDD30((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release(v2);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_1001DDD30((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_1001DDD30(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v27 = a2;
  v29 = 0;
  v3 = 0;
  v6 = *(_QWORD *)(a3 + 56);
  v4 = a3 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(v4 - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v30 = v4;
  v31 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v3 << 6);
LABEL_22:
    v16 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v17 = objc_msgSend(v16, "entityName", v27);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    if (v18 == v22 && v20 == v24)
    {

      swift_bridgeObjectRelease_n(v20, 2);
LABEL_5:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v29++, 1))
        goto LABEL_31;
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v24, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_5;
    }
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v13);
  ++v3;
  if (v14)
    goto LABEL_21;
  v3 = v13 + 1;
  if (v13 + 1 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v3);
  if (v14)
    goto LABEL_21;
  v3 = v13 + 2;
  if (v13 + 2 >= v31)
    goto LABEL_28;
  v14 = *(_QWORD *)(v30 + 8 * v3);
  if (v14)
  {
LABEL_21:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_28:
    swift_retain();
    sub_10021885C(a1, v27, v29, a3);
    return;
  }
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v3 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v3 >= v31)
      goto LABEL_28;
    v14 = *(_QWORD *)(v30 + 8 * v3);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void sub_1001DDFA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  void (*v63)(__int128 *, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t i;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  id v84;
  Swift::Int v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  Swift::Int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  char v116;
  id v117;
  unint64_t v118;
  id v119;
  uint64_t v120;
  _QWORD *v121;
  id v122;
  void *v123;
  void *v124;
  id v125;
  objc_class *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  Class isa;
  id v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  id v150;
  Class v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  void *v168;
  Class v169;
  id v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  id v176;
  Class v177;
  id v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  Swift::String v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  Swift::String v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  Swift::Int v200;
  unint64_t v201;
  id v202;
  void *v203;
  uint64_t v204;
  id v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  __int128 v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  char v219[16];
  __int128 v220;
  void *v221;
  uint64_t v222;

  v6 = v3;
  v203 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v212 = (char *)&v194 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v213 = *(_QWORD *)(v11 - 8);
  v214 = v11;
  __chkstk_darwin(v11);
  v209 = (char *)&v194 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = _s10PredicatesOMa(0);
  __chkstk_darwin(v204);
  v206 = (unint64_t *)((char *)&v194 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v208 = a1;
  if ((a3 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain(a3);
    v41 = sub_1001DDBD4(v40);
    goto LABEL_32;
  }
  *(_QWORD *)&v220 = &_swiftEmptySetSingleton;
  if (a3 < 0)
    v14 = a3;
  else
    v14 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v15 = __CocoaSet.makeIterator()(v14);
  v16 = __CocoaSet.Iterator.next()(v15);
  if (!v16)
  {
    v41 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_31:
    swift_release(v15);
LABEL_32:
    v211 = v41 & 0xC000000000000001;
    v215 = v41;
    if ((v41 & 0xC000000000000001) != 0)
    {
      if (!__CocoaSet.count.getter(v41))
        goto LABEL_49;
      v42 = __CocoaSet.count.getter(v41);
      v34 = (uint64_t)_swiftEmptyArrayStorage;
      if (!v42)
        goto LABEL_52;
      v5 = v42;
      v222 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v42);
      v41 = v215;
      *(_QWORD *)&v216 = __CocoaSet.startIndex.getter(v215);
      *((_QWORD *)&v216 + 1) = v43;
      LOBYTE(v217) = 1;
      if ((v5 & 0x8000000000000000) == 0)
      {
        do
        {
LABEL_42:
          v51 = *((_QWORD *)&v216 + 1);
          v52 = v216;
          v4 = v217;
          sub_100364654(v216, *((uint64_t *)&v216 + 1), v217, v41);
          v54 = v53;
          v55 = sub_1005CCB64(v54);
          if (v6)
          {

            sub_1000E515C(v52, v51, v4);
            v65 = v222;
            swift_release(v215);
            swift_release(v65);
            return;
          }
          v56 = v55;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
          v58 = *(_QWORD *)(v222 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
          v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
          specialized ContiguousArray._endMutation()(v59);
          if (v211)
          {
            if ((v4 & 1) == 0)
            {
              __break(1u);
LABEL_201:
              *(_QWORD *)&v220 = 0;
              *((_QWORD *)&v220 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              v189._object = (void *)0x80000001006F8C10;
              v189._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v189);
              v222 = v4;
              v190 = sub_10001A630(&qword_100843760);
              v191 = &v222;
              goto LABEL_202;
            }
            v60 = __CocoaSet.Index.handleBitPattern.getter(v52, v51);
            if (v60)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v62 = sub_10001A630(&qword_10083FC38);
            v63 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v220, v62);
            __CocoaSet.formIndex(after:isUnique:)(v64, isUniquelyReferenced_nonNull_native, v215);
            v63(&v220, 0);
          }
          else
          {
            v46 = sub_10036456C(v52, v51, v4, v215);
            v48 = v47;
            v50 = v49;
            sub_1000E515C(v52, v51, v4);
            *(_QWORD *)&v216 = v46;
            *((_QWORD *)&v216 + 1) = v48;
            LOBYTE(v217) = v50 & 1;
          }
          --v5;
          v41 = v215;
        }
        while (v5);
        sub_1000E515C(v216, *((uint64_t *)&v216 + 1), v217);
        v34 = v222;
LABEL_52:
        if (qword_1008376D8 == -1)
          goto LABEL_53;
        goto LABEL_67;
      }
      __break(1u);
    }
    v5 = *(_QWORD *)(v41 + 16);
    if (v5)
    {
      v222 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v5);
      v41 = v215;
      *(_QWORD *)&v216 = sub_100364E8C(v215);
      *((_QWORD *)&v216 + 1) = v44;
      LOBYTE(v217) = v45 & 1;
      goto LABEL_42;
    }
LABEL_49:
    swift_release(v41);
    sub_1002AF824((uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  v17 = v16;
  v207 = v6;
  v5 = type metadata accessor for REMObjectID_Codable(0);
  v6 = -1;
LABEL_11:
  v222 = v17;
  swift_dynamicCast(&v216, &v222, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
  v24 = objc_msgSend((id)v216, "entityName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v26 = v25;

  v27 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  if (v4 == v28 && v26 == v30)
  {
    swift_bridgeObjectRelease_n(v26, 2);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v26, v28, v30, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {

      goto LABEL_10;
    }
  }
  v33 = v216;
  v34 = v220;
  v35 = *(_QWORD *)(v220 + 16);
  if (*(_QWORD *)(v220 + 24) <= v35)
  {
    sub_1002DEAB4(v35 + 1);
    v34 = v220;
  }
  v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v34 + 40));
  v19 = v34 + 56;
  v20 = -1 << *(_BYTE *)(v34 + 32);
  v21 = v18 & ~v20;
  v22 = v21 >> 6;
  if (((-1 << v21) & ~*(_QWORD *)(v34 + 56 + 8 * (v21 >> 6))) != 0)
  {
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v34 + 56 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    goto LABEL_9;
  }
  v36 = 0;
  v37 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v37 || (v36 & 1) == 0)
  {
    v38 = v22 == v37;
    if (v22 == v37)
      v22 = 0;
    v36 |= v38;
    v39 = *(_QWORD *)(v19 + 8 * v22);
    if (v39 != -1)
    {
      v23 = __clz(__rbit64(~v39)) + (v22 << 6);
LABEL_9:
      *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * v23) = v33;
      ++*(_QWORD *)(v34 + 16);
LABEL_10:
      v17 = __CocoaSet.Iterator.next()(v18);
      if (!v17)
      {
        v41 = v220;
        v6 = v207;
        goto LABEL_31;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  swift_once(&qword_1008376D8, sub_1004A7104);
LABEL_53:
  v205 = (id)v34;
  v66 = qword_1008721E0;
  if ((unint64_t)qword_1008721E0 >> 62)
  {
    if (qword_1008721E0 < 0)
      v34 = qword_1008721E0;
    else
      v34 = qword_1008721E0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(qword_1008721E0, 2);
    v52 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
    if (v52)
      goto LABEL_55;
LABEL_72:
    swift_bridgeObjectRelease();
    v68 = _swiftEmptyArrayStorage;
    goto LABEL_73;
  }
  v52 = *(_QWORD *)((qword_1008721E0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(qword_1008721E0);
  if (!v52)
    goto LABEL_72;
LABEL_55:
  v207 = v6;
  *(_QWORD *)&v216 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v52 & ~(v52 >> 63), 0);
  if (v52 < 0)
  {
    __break(1u);
    goto LABEL_89;
  }
  v67 = 0;
  v68 = (_QWORD *)v216;
  *(_QWORD *)&v210 = v66 & 0xC000000000000001;
  v6 = v66;
  do
  {
    if (v52 == v67)
      goto LABEL_66;
    if ((_QWORD)v210)
    {
      v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(v67, v66);
      v4 = v69;
    }
    else
    {
      v4 = *(_QWORD *)(v66 + 8 * v67 + 32);
      v69 = swift_retain();
    }
    v70 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v69);
    if (!v71)
      goto LABEL_201;
    v72 = v70;
    v34 = v71;
    swift_release(v4);
    *(_QWORD *)&v216 = v68;
    v5 = v68[2];
    v73 = v68[3];
    v4 = v5 + 1;
    if (v5 >= v73 >> 1)
    {
      sub_1001C1B0C(v73 > 1, v5 + 1, 1);
      v68 = (_QWORD *)v216;
    }
    ++v67;
    v68[2] = v4;
    v74 = &v68[2 * v5];
    v74[4] = v72;
    v74[5] = v34;
    v66 = v6;
  }
  while (v52 != v67);
  swift_bridgeObjectRelease();
  v6 = v207;
LABEL_73:
  v34 = (uint64_t)v205;
  v75 = sub_1005CEADC((uint64_t)v205, 0, 1, (uint64_t)v68, 0);
  if (v6)
  {
    swift_release(v215);
    swift_bridgeObjectRelease();
    goto LABEL_126;
  }
  v5 = (uint64_t)v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v220 = _swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
LABEL_89:
    if (v5 < 0)
      v83 = v5;
    else
      v83 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v76 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    if (v76)
      goto LABEL_77;
LABEL_93:
    swift_bridgeObjectRelease();
    v4 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_194;
    goto LABEL_94;
  }
  v76 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v76)
    goto LABEL_93;
LABEL_77:
  if (v76 < 1)
  {
    __break(1u);
    goto LABEL_196;
  }
  for (i = 0; i != v76; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v80 = *(id *)(v5 + 8 * i + 32);
    v81 = v80;
    v82 = objc_msgSend(v80, "isConcealed");
    if ((v82 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v82);
      v78 = *(_QWORD *)(v220 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v78);
      v79 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v81);
      specialized ContiguousArray._endMutation()(v79);
    }
  }
  swift_bridgeObjectRelease();
  v4 = v220;
  if ((v220 & 0x8000000000000000) != 0)
    goto LABEL_194;
LABEL_94:
  if ((v4 & 0x4000000000000000) != 0)
    goto LABEL_194;
  v84 = *(id *)(v4 + 16);
  swift_retain();
  while (1)
  {
    v85 = (Swift::Int)_swiftEmptyDictionarySingleton;
    if (!v84)
      break;
    *(_QWORD *)&v210 = v4 & 0xC000000000000001;
    v86 = 4;
    v207 = v4;
    v205 = v84;
    while (1)
    {
      v87 = (_QWORD)v210
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v86 - 4, v4)
          : *(id *)(v4 + 8 * v86);
      v88 = v87;
      v89 = (id)(v86 - 3);
      if (__OFADD__(v86 - 4, 1))
        break;
      v90 = objc_msgSend(v87, "remObjectID");
      if (v90)
      {
        v52 = (uint64_t)v90;
        if ((v85 & 0xC000000000000001) != 0)
        {
          if (v85 < 0)
            v91 = v85;
          else
            v91 = v85 & 0xFFFFFFFFFFFFFF8;
          v92 = v88;
          v93 = __CocoaDictionary.count.getter(v91);
          if (__OFADD__(v93, 1))
            goto LABEL_188;
          v85 = sub_100191738(v91, v93 + 1);
        }
        else
        {
          v94 = v88;
        }
        v95 = swift_isUniquelyReferenced_nonNull_native(v85);
        *(_QWORD *)&v220 = v85;
        v97 = sub_1002C66DC(v52);
        v98 = *(_QWORD *)(v85 + 16);
        v99 = (v96 & 1) == 0;
        v100 = v98 + v99;
        if (__OFADD__(v98, v99))
          goto LABEL_187;
        v4 = v96;
        if (*(_QWORD *)(v85 + 24) >= v100)
        {
          if ((v95 & 1) != 0)
          {
            v85 = v220;
            if ((v96 & 1) == 0)
              goto LABEL_116;
          }
          else
          {
            sub_1002D68E4();
            v85 = v220;
            if ((v4 & 1) == 0)
              goto LABEL_116;
          }
        }
        else
        {
          sub_1002CD578(v100, v95);
          v101 = sub_1002C66DC(v52);
          if ((v4 & 1) != (v102 & 1))
            goto LABEL_203;
          v97 = v101;
          v85 = v220;
          if ((v4 & 1) == 0)
          {
LABEL_116:
            *(_QWORD *)(v85 + 8 * (v97 >> 6) + 64) |= 1 << v97;
            v103 = 8 * v97;
            *(_QWORD *)(*(_QWORD *)(v85 + 48) + v103) = v52;
            *(_QWORD *)(*(_QWORD *)(v85 + 56) + v103) = v88;
            v104 = *(_QWORD *)(v85 + 16);
            v105 = __OFADD__(v104, 1);
            v106 = v104 + 1;
            if (v105)
              goto LABEL_189;
            *(_QWORD *)(v85 + 16) = v106;
            v107 = (id)v52;
            goto LABEL_121;
          }
        }
        v108 = *(_QWORD *)(v85 + 56);

        *(_QWORD *)(v108 + 8 * v97) = v88;
LABEL_121:

        swift_bridgeObjectRelease();
        v4 = v207;
        v84 = v205;
        goto LABEL_99;
      }

LABEL_99:
      ++v86;
      if (v89 == v84)
        goto LABEL_124;
    }
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    v186 = swift_retain();
    swift_bridgeObjectRetain(v186);
    v84 = (id)_CocoaArrayWrapper.endIndex.getter(v187);
    swift_release(v4);
  }
LABEL_124:
  swift_release(v4);
  sub_1004A87E4(v4, v203);
  if (v6)
  {
    swift_release(v215);
    swift_release(v4);
    goto LABEL_126;
  }
  v196 = v109;
  swift_release(v4);
  v222 = (uint64_t)_swiftEmptyDictionarySingleton;
  v200 = v85;
  v110 = v215;
  if (v211)
    v111 = __CocoaSet.count.getter(v215);
  else
    v111 = *(_QWORD *)(v215 + 16);
  swift_release(v110);
  sub_10001A630(&qword_10083FC40);
  Dictionary.reserveCapacity(_:)(v111);
  v34 = v196;
  if (v196 >> 62)
  {
LABEL_196:
    if (v34 < 0)
      v188 = v34;
    else
      v188 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v112 = _CocoaArrayWrapper.endIndex.getter(v188);
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
  v112 = *(_QWORD *)((v196 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_132:
  v113 = v200;
  if (v112)
  {
    v114 = 0;
    v199 = v196 & 0xC000000000000001;
    v195 = v196 & 0xFFFFFFFFFFFFFF8;
    v194 = v196 + 32;
    v210 = xmmword_1006A7330;
    v198 = (char *)&type metadata for Any + 8;
    v197 = v112;
    while (1)
    {
      if (v199)
      {
        v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114, v196);
        v105 = __OFADD__(v114, 1);
        v118 = v114 + 1;
        if (v105)
          goto LABEL_190;
      }
      else
      {
        if (v114 >= *(_QWORD *)(v195 + 16))
          goto LABEL_193;
        v117 = *(id *)(v194 + 8 * v114);
        v105 = __OFADD__(v114, 1);
        v118 = v114 + 1;
        if (v105)
          goto LABEL_190;
      }
      v201 = v118;
      v203 = v117;
      v119 = objc_msgSend(v117, "objectID", v194);
      v120 = v113;
      v121 = v206;
      *v206 = v119;
      swift_storeEnumTagMultiPayload(v121, v204, 7);
      v122 = v119;
      sub_10000D2C0();
      v124 = v123;
      v125 = v122;
      v126 = (objc_class *)sub_1002B1928(v125, v120);
      v202 = v125;

      if (v126)
      {
        v127 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v128 = swift_allocObject(v127, 40, 7);
        *(_OWORD *)(v128 + 16) = v210;
        *(_QWORD *)(v128 + 32) = v126;
        *(_QWORD *)&v220 = v128;
        specialized Array._endMutation()(v128);
        v129 = sub_10001A630(&qword_10083FCF0);
        v130 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
        v131 = sub_1001DF5B4();
        v132 = sub_1001DF600();
        v133 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v129, v130, v131, v132);
        v126 = (objc_class *)sub_1001E8870(v133);
        swift_bridgeObjectRelease();
      }
      v205 = sub_100495248(v126, (uint64_t)v124);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v134 = sub_10001A630((uint64_t *)&unk_10083AD90);
      inited = swift_initStackObject(v134, v219);
      *(_OWORD *)(inited + 16) = v210;
      KeyPath = swift_getKeyPath(&unk_1006AE3F0);
      *(_QWORD *)(inited + 32) = KeyPath;
      *(_QWORD *)&v220 = inited;
      specialized Array._endMutation()(KeyPath);
      v137 = v220;
      *(_QWORD *)&v216 = _swiftEmptyArrayStorage;
      sub_1001C1C48(0, 1, 0);
      v4 = v216;
      if ((v137 & 0xC000000000000001) != 0)
      {
        v138 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v137);
        v52 = v138;
      }
      else
      {
        v52 = *(_QWORD *)(v137 + 32);
        v138 = swift_retain();
      }
      v139 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v138);
      if (!v140)
      {
        while (1)
        {
          *(_QWORD *)&v220 = 0;
          *((_QWORD *)&v220 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v193._object = (void *)0x80000001006F8C10;
          v193._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v193);
          v218 = v52;
          v190 = sub_10001A630((uint64_t *)&unk_10083AEC0);
          v191 = &v218;
LABEL_202:
          _print_unlocked<A, B>(_:_:)(v191, &v220, v190, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v220, *((_QWORD *)&v220 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
          __break(1u);
LABEL_203:
          v192 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v192);
          __break(1u);
        }
      }
      v141 = v139;
      v142 = v140;
      v221 = &type metadata for String;
      swift_release(v52);
      *(_QWORD *)&v220 = v141;
      *((_QWORD *)&v220 + 1) = v142;
      v144 = *(_QWORD *)(v4 + 16);
      v143 = *(_QWORD *)(v4 + 24);
      if (v144 >= v143 >> 1)
      {
        sub_1001C1C48(v143 > 1, v144 + 1, 1);
        v4 = v216;
      }
      *(_QWORD *)(v4 + 16) = v144 + 1;
      sub_10001A6CC(&v220, (_OWORD *)(v4 + 32 * v144 + 32));
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v4);
      v146 = v205;
      objc_msgSend(v205, "setPropertiesToFetch:", isa);

      v147 = swift_allocObject(v134, 40, 7);
      v148 = v147;
      *(_OWORD *)(v147 + 16) = v210;
      if (qword_100837210 != -1)
        v147 = swift_once(&qword_100837210, sub_10033CE28);
      v149 = (void *)qword_100871DF8;
      *(_QWORD *)(v148 + 32) = qword_100871DF8;
      *(_QWORD *)&v220 = v148;
      specialized Array._endMutation()(v147);
      sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
      v150 = v149;
      v151 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v146, "setSortDescriptors:", v151, swift_bridgeObjectRelease().n128_f64[0]);

      v152 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
      v153 = NSManagedObjectContext.fetch<A>(_:)(v146, v152);
      if (v6)
        break;
      v154 = v153;
      v207 = 0;
      v218 = (uint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v153 >> 62)
      {
        if (v153 < 0)
          v185 = v153;
        else
          v185 = v153 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v153);
        v155 = _CocoaArrayWrapper.endIndex.getter(v185);
      }
      else
      {
        v155 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v153);
      }
      v6 = 0x696669746E656469;
      if (v155)
      {
        if (v155 < 1)
          goto LABEL_191;
        v156 = 0;
        v211 = v154 & 0xC000000000000001;
        v215 = v154;
        while (2)
        {
          if (v211)
            v157 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v156, v154);
          else
            v157 = *(id *)(v154 + 8 * v156 + 32);
          v158 = v157;
          *(_QWORD *)&v216 = 0x696669746E656469;
          *((_QWORD *)&v216 + 1) = 0xEA00000000007265;
          v159 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v216, &type metadata for String);
          v160 = objc_msgSend(v158, "__swift_objectForKeyedSubscript:", v159);
          swift_unknownObjectRelease(v159);
          if (v160)
          {
            _bridgeAnyObjectToAny(_:)(&v216, v160);
            swift_unknownObjectRelease(v160);
          }
          else
          {
            v216 = 0u;
            v217 = 0u;
          }
          v161 = (uint64_t)v212;
          sub_10001A5E8((uint64_t)&v216, (uint64_t)&v220);
          if (v221)
          {
            v162 = v214;
            v163 = swift_dynamicCast(v161, &v220, (char *)&type metadata for Any + 8, v214, 6);
            v164 = v213;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v213 + 56))(v161, v163 ^ 1u, 1, v162);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v161, 1, v162) != 1)
            {
              v166 = v213;
              v165 = v214;
              v167 = v209;
              (*(void (**)(char *, uint64_t, uint64_t))(v213 + 32))(v209, v161, v214);
              v168 = (void *)objc_opt_self(REMReminder);
              v169 = UUID._bridgeToObjectiveC()().super.isa;
              v170 = objc_msgSend(v168, "objectIDWithUUID:", v169);

              (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v165);
              if (v170)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v171);
                v173 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v172 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v173 >= v172 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v172 > 1);
                v174 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v173, v170);
                specialized Array._endMutation()(v174);
              }
LABEL_160:
              ++v156;
              v154 = v215;
              if (v155 == v156)
              {
                swift_bridgeObjectRelease();
                v175 = (_QWORD *)v218;
                v146 = v205;
                goto LABEL_175;
              }
              continue;
            }
          }
          else
          {
            sub_10000882C((uint64_t)&v220, (uint64_t *)&unk_10083D5B0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v213 + 56))(v161, 1, 1, v214);
          }
          break;
        }
        sub_10000882C(v161, (uint64_t *)&unk_100839C80);

        goto LABEL_160;
      }
      swift_bridgeObjectRelease();
      v175 = _swiftEmptyArrayStorage;
LABEL_175:
      swift_bridgeObjectRelease();
      sub_1001DFD18((uint64_t)v175);
      swift_bridgeObjectRelease();
      v176 = objc_allocWithZone((Class)NSOrderedSet);
      v177 = Array._bridgeToObjectiveC()().super.isa;
      v178 = objc_msgSend(v176, "initWithArray:", v177, swift_bridgeObjectRelease().n128_f64[0]);

      v179 = v203;
      objc_msgSend(v203, "hack_overrideReminderIDsOrderingWithOrderedObjectIDs:", v178);

      v180 = v202;
      v4 = REMObjectID.codable.getter(v181);
      v182 = v222;
      v6 = v207;
      if ((v222 & 0xC000000000000001) != 0)
      {
        if (v222 >= 0)
          v182 = v222 & 0xFFFFFFFFFFFFFF8;
        v183 = v179;
        v184 = __CocoaDictionary.count.getter(v182);
        if (__OFADD__(v184, 1))
          goto LABEL_192;
        v182 = sub_100191510(v182, v184 + 1);
      }
      else
      {
        v115 = v179;
      }
      v116 = swift_isUniquelyReferenced_nonNull_native(v182);
      *(_QWORD *)&v220 = v182;
      sub_10028BA44((uint64_t)v179, (void *)v4, v116);
      v222 = v220;

      swift_bridgeObjectRelease();
      sub_1000CACA8((uint64_t)v206);
      v114 = v201;
      v113 = v200;
      if (v201 == v197)
        goto LABEL_184;
    }

    swift_bridgeObjectRelease();
    sub_1000CACA8((uint64_t)v206);
    swift_bridgeObjectRelease();
LABEL_126:
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_184:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001DF5B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FC48;
  if (!qword_10083FC48)
  {
    v1 = sub_1000A5A94(&qword_10083FCF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083FC48);
  }
  return result;
}

unint64_t sub_1001DF600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083FE40;
  if (!qword_10083FE40)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10083FE40);
  }
  return result;
}

_QWORD *sub_1001DF658(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  __int128 *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12[2];
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v13 = _swiftEmptyArrayStorage;
    sub_1001C1AE0(0, v1, 0);
    v4 = (__int128 *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v11 = *v4;
      v5 = (id)v11;
      v6 = sub_10001A630(&qword_10083EFD0);
      v7 = sub_10001A630(&qword_1008400A0);
      swift_dynamicCast(v12, &v11, v6, v7, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001C1AE0(0, v2[2] + 1, 1);
        v2 = v13;
      }
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001C1AE0(v8 > 1, v9 + 1, 1);
        v2 = v13;
      }
      v2[2] = v9 + 1;
      sub_10001BCA8(v12, (uint64_t)&v2[5 * v9 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001DF794(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[40];
  _BYTE v11[40];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_1001C1B28(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_100018618(v4, (uint64_t)v10);
      v5 = sub_10001A630((uint64_t *)&unk_100840060);
      v6 = sub_10001A630(&qword_10083F638);
      swift_dynamicCast(v11, v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001C1B28(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_1001C1B28(v7 > 1, v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_1000A5CA8((uint64_t)v11, (uint64_t)&v2[5 * v8 + 4], &qword_10083F638);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001DF8D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_100839C80);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v12(v5, v11, v2);
      swift_dynamicCast(v8, v5, v2, v18, 7);
      v10 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_1001C1BB8(0, v10[2] + 1, 1);
        v10 = v19;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001C1BB8(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_1000A5CA8((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, (uint64_t *)&unk_100839C80);
      v11 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_1001DFA94(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_1001C1C2C(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v13[0] = *(v4 - 1);
      v13[1] = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v6 = sub_10001A630((uint64_t *)&unk_10083A370);
      swift_dynamicCast(v14, v13, &type metadata for String, v6, 7);
      v7 = v14[0];
      v8 = v14[1];
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001C1C2C(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_1001C1C2C(v9 > 1, v10 + 1, 1);
        v2 = v15;
      }
      v4 += 2;
      v2[2] = v10 + 1;
      v11 = &v2[2 * v10];
      v11[4] = v7;
      v11[5] = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001DFBD0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_1001C1C48(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001C1C48(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1001C1C48(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10001A6CC(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001DFCF4(uint64_t a1)
{
  return sub_1001DFD50(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001C1C90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, (uint64_t)&off_1007E5920, (void (*)(_QWORD *, _QWORD *))sub_10001BCA8);
}

uint64_t sub_1001DFD18(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
}

uint64_t sub_1001DFD2C(uint64_t a1)
{
  return sub_1001DFD50(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001C1C90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, (uint64_t)&off_1007E58F8, (void (*)(_QWORD *, _QWORD *))sub_10001BCA8);
}

uint64_t sub_1001DFD50(uint64_t a1, void (*a2)(BOOL, unint64_t, uint64_t), uint64_t (*a3)(_QWORD), uint64_t a4, void (*a5)(_QWORD *, _QWORD *))
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  void (*v23)(BOOL, unint64_t, uint64_t);
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = _swiftEmptyArrayStorage;
  if (!v10)
    return (uint64_t)v11;
  v27 = _swiftEmptyArrayStorage;
  result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a2)(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v23 = a2;
    v11 = v27;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v13 = 0;
      do
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
        v27 = v11;
        v16 = v11[2];
        v15 = v11[3];
        if (v16 >= v15 >> 1)
        {
          v23(v15 > 1, v16 + 1, 1);
          v11 = v27;
        }
        ++v13;
        v25 = a3(0);
        v26 = a4;
        v24[0] = v14;
        v11[2] = v16 + 1;
        a5(v24, &v11[5 * v16 + 4]);
      }
      while (v10 != v13);
    }
    else
    {
      v17 = (void **)(a1 + 32);
      do
      {
        v18 = *v17;
        v27 = v11;
        v19 = v11[2];
        v20 = v11[3];
        v21 = v18;
        if (v19 >= v20 >> 1)
        {
          v23(v20 > 1, v19 + 1, 1);
          v11 = v27;
        }
        v25 = a3(0);
        v26 = a4;
        v24[0] = v21;
        v11[2] = v19 + 1;
        a5(v24, &v11[5 * v19 + 4]);
        ++v17;
        --v10;
      }
      while (v10);
    }
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001DFF24(uint64_t a1)
{
  return sub_1001DFD50(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001C1C90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, (uint64_t)&off_1007E5948, (void (*)(_QWORD *, _QWORD *))sub_10001BCA8);
}

uint64_t sub_1001DFF48(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_1001C1F4C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001C1F4C(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
        v17 = &off_1007E4008;
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10001BCA8(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1001C1F4C(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
        v17 = &off_1007E4008;
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10001BCA8(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E0138(uint64_t a1)
{
  return sub_1001DFD50(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001C1F4C, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, (uint64_t)&off_1007E4048, (void (*)(_QWORD *, _QWORD *))sub_10001BCA8);
}

uint64_t sub_1001E015C(uint64_t a1)
{
  return sub_1001E0168(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection);
}

uint64_t sub_1001E0168(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  _OWORD v18[2];
  _QWORD *v19;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v19 = _swiftEmptyArrayStorage;
  result = sub_1001C1C48(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v8 = a2(0);
        swift_dynamicCast(v18, &v17, v8, (char *)&type metadata for Any + 8, 7);
        v5 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_1001C1C48(0, v5[2] + 1, 1);
          v5 = v19;
        }
        v10 = v5[2];
        v9 = v5[3];
        if (v10 >= v9 >> 1)
        {
          sub_1001C1C48(v9 > 1, v10 + 1, 1);
          v5 = v19;
        }
        v5[2] = v10 + 1;
        sub_10001A6CC(v18, &v5[4 * v10 + 4]);
      }
    }
    else
    {
      v11 = (id *)(a1 + 32);
      v12 = a2(0);
      do
      {
        v17 = *v11;
        v13 = v17;
        swift_dynamicCast(v18, &v17, v12, (char *)&type metadata for Any + 8, 7);
        v5 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_1001C1C48(0, v5[2] + 1, 1);
          v5 = v19;
        }
        v15 = v5[2];
        v14 = v5[3];
        if (v15 >= v14 >> 1)
        {
          sub_1001C1C48(v14 > 1, v15 + 1, 1);
          v5 = v19;
        }
        v5[2] = v15 + 1;
        sub_10001A6CC(v18, &v5[4 * v15 + 4]);
        ++v11;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E039C(uint64_t a1)
{
  return sub_1001E0168(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection);
}

uint64_t sub_1001E03A8(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&unk_100840000, off_1007D6720);
}

uint64_t sub_1001E03BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _OWORD v20[2];
  _QWORD *v21;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v21 = _swiftEmptyArrayStorage;
  result = sub_1001C1C48(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v10 = sub_1000151B0(0, a2, a3);
        swift_dynamicCast(v20, &v19, v10, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_1001C1C48(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          sub_1001C1C48(v11 > 1, v12 + 1, 1);
          v7 = v21;
        }
        v7[2] = v12 + 1;
        sub_10001A6CC(v20, &v7[4 * v12 + 4]);
      }
    }
    else
    {
      v13 = (id *)(a1 + 32);
      v14 = sub_1000151B0(0, a2, a3);
      do
      {
        v19 = *v13;
        v15 = v19;
        swift_dynamicCast(v20, &v19, v14, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_1001C1C48(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v17 = v7[2];
        v16 = v7[3];
        if (v17 >= v16 >> 1)
        {
          sub_1001C1C48(v16 > 1, v17 + 1, 1);
          v7 = v21;
        }
        v7[2] = v17 + 1;
        sub_10001A6CC(v20, &v7[4 * v17 + 4]);
        ++v13;
        --v6;
      }
      while (v6);
    }
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E060C(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&unk_10083FE30, NSString_ptr);
}

uint64_t sub_1001E0620(uint64_t a1)
{
  return sub_1001E0168(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection);
}

uint64_t sub_1001E062C(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&qword_10083AE90, off_1007D6708);
}

uint64_t sub_1001E0640(uint64_t a1)
{
  return sub_1001E03BC(a1, &qword_100840020, off_1007D6690);
}

uint64_t sub_1001E0654(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&qword_10083DA60, off_1007D66C8);
}

uint64_t sub_1001E0668(uint64_t a1)
{
  return sub_1001E0168(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment);
}

uint64_t sub_1001E0674(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
}

_QWORD *sub_1001E0688(uint64_t a1)
{
  return sub_1001E06A0(a1, (uint64_t)&off_1007F8E40);
}

_QWORD *sub_1001E0694(uint64_t a1)
{
  return sub_1001E06A0(a1, (uint64_t)&off_1007F8E90);
}

_QWORD *sub_1001E06A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  id *v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v4)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)sub_1001C2428(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = 0;
      do
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_1001C2428(v8 > 1, v9 + 1, 1);
        ++v6;
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[2 * v9];
        v10[4] = v7;
        v10[5] = a2;
      }
      while (v4 != v6);
    }
    else
    {
      v11 = (id *)(a1 + 32);
      do
      {
        v12 = _swiftEmptyArrayStorage[2];
        v13 = _swiftEmptyArrayStorage[3];
        v14 = *v11;
        if (v12 >= v13 >> 1)
          sub_1001C2428(v13 > 1, v12 + 1, 1);
        _swiftEmptyArrayStorage[2] = v12 + 1;
        v15 = &_swiftEmptyArrayStorage[2 * v12];
        v15[4] = v14;
        v15[5] = a2;
        ++v11;
        --v4;
      }
      while (v4);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E081C(uint64_t a1)
{
  return sub_1001E03BC(a1, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
}

BOOL sub_1001E0830(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_1001E085C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_17:
      if (!v2)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain(v3);
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease(*v1);
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_17;
LABEL_5:
  v10 = *(_QWORD *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_23;
  sub_10001A630((uint64_t *)&unk_10083FC80);
  swift_arrayInitWithCopy(v11);
  if (v9 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(*v1 + 16);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *(_QWORD *)(*v1 + 16) = v15;
LABEL_18:
    swift_bridgeObjectRelease(a1);
    return specialized Array._endMutation()(v16);
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001E09F4(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1002C8358(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

uint64_t sub_1001E0B4C(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001ECFE0);
}

uint64_t sub_1001E0B58(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001ED1F4);
}

void sub_1001E0B64(uint64_t a1)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;

  v4 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    a1 = __CocoaSet.count.getter(a1);
    v6 = a1;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 < 0)
    v23 = *v4;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  v9 = v24 + v6;
  if (__OFADD__(v24, v6))
    goto LABEL_30;
LABEL_8:
  v10 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v10;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v29 = v10;
    else
      v29 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9)
    v14 = v9;
  swift_bridgeObjectRetain(v10);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v14, 1, v10);
  swift_bridgeObjectRelease(*v4);
  *v4 = v15;
  v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (*(_QWORD *)(v13 + 24) >> 1) - v16;
  a1 = (uint64_t)sub_1001EC114(&v56, (uint64_t **)(v13 + 8 * v16 + 32), v17, v5, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (unint64_t *)&qword_10083A1F0);
  if (a1 < v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a1 >= 1)
  {
    v18 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = __OFADD__(v18, a1);
    v20 = v18 + a1;
    if (v19)
    {
      __break(1u);
LABEL_42:
      v30 = __CocoaSet.Iterator.next()(a1);
      if (!v30)
        goto LABEL_86;
      v31 = v30;
      v54 = v30;
      v32 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_unknownObjectRetain(v31);
      swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v32, 7);
      v28 = v55;
      a1 = swift_unknownObjectRelease(v31);
      while (2)
      {
        if (!v28)
        {
          v6 = v56;
LABEL_86:
          v21 = v6;
          goto LABEL_24;
        }
        while (1)
        {
          v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          v34 = *(_QWORD *)(v33 + 0x18);
          if (v3 + 1 > (uint64_t)(v34 >> 1))
          {
            a1 = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1);
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v35 = *(_QWORD *)(v33 + 24) >> 1;
          if (v3 < v35)
            break;
LABEL_46:
          *(_QWORD *)(v33 + 16) = v3;
        }
        v36 = v33 + 32;
        while (1)
        {
          *(_QWORD *)(v36 + 8 * v3++) = v28;
          v37 = v56;
          v38 = v59;
          if ((v56 & 0x8000000000000000) == 0)
            break;
          v41 = __CocoaSet.Iterator.next()(a1);
          if (!v41)
            goto LABEL_84;
          v42 = v41;
          v54 = v41;
          v43 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          swift_unknownObjectRetain(v42);
          swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v43, 7);
          v28 = v55;
          a1 = swift_unknownObjectRelease(v42);
LABEL_58:
          if (!v28)
          {
            v37 = v56;
LABEL_84:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            v21 = v37;
            goto LABEL_24;
          }
          if (v3 >= v35)
          {
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_46;
          }
        }
        if (v60)
        {
          v39 = (v60 - 1) & v60;
          v40 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_54:
          v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v40);
          a1 = v28;
LABEL_55:
          v59 = v38;
          v60 = v39;
          goto LABEL_58;
        }
        v44 = v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
LABEL_109:
          v28 = 0;
          v26 = 0;
          v25 = v1;
LABEL_36:
          v59 = v25;
          v60 = v26;
          continue;
        }
        break;
      }
      v45 = (unint64_t)(v58 + 64) >> 6;
      if (v44 >= v45)
      {
        v28 = 0;
        v39 = 0;
        goto LABEL_55;
      }
      v46 = *(_QWORD *)(v57 + 8 * v44);
      if (v46)
      {
LABEL_64:
        v39 = (v46 - 1) & v46;
        v40 = __clz(__rbit64(v46)) + (v44 << 6);
        v38 = v44;
        goto LABEL_54;
      }
      v47 = v59 + 2;
      if (v59 + 2 < v45)
      {
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
        {
LABEL_68:
          v44 = v47;
          goto LABEL_64;
        }
        v1 = v59 + 3;
        if (v59 + 3 >= v45)
          goto LABEL_81;
        v46 = *(_QWORD *)(v57 + 8 * v1);
        if (v46)
        {
          v44 = v59 + 3;
          goto LABEL_64;
        }
        v47 = v59 + 4;
        if (v59 + 4 >= v45)
        {
          v28 = 0;
          v39 = 0;
          v38 = v59 + 3;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
          goto LABEL_68;
        v44 = v59 + 5;
        if (v59 + 5 >= v45)
        {
LABEL_81:
          v28 = 0;
          v39 = 0;
          v38 = v47;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v44);
        if (v46)
          goto LABEL_64;
        v44 = v45 - 1;
        v48 = v59 + 6;
        while (v45 != v48)
        {
          v46 = *(_QWORD *)(v57 + 8 * v48++);
          if (v46)
          {
            v44 = v48 - 1;
            goto LABEL_64;
          }
        }
      }
      v28 = 0;
      v39 = 0;
      v38 = v44;
      goto LABEL_55;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (a1 != v17)
  {
    v21 = v56;
LABEL_24:
    v22 = sub_1000C6560(v21);
    specialized Array._endMutation()(v22);
    return;
  }
LABEL_32:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v56;
  v25 = v59;
  if (v56 < 0)
    goto LABEL_42;
  if (v60)
  {
    v26 = (v60 - 1) & v60;
    v27 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_35:
    v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v27);
    a1 = v28;
    goto LABEL_36;
  }
  v49 = v59 + 1;
  if (!__OFADD__(v59, 1))
  {
    v50 = (unint64_t)(v58 + 64) >> 6;
    if (v49 >= v50)
    {
      v28 = 0;
      v26 = 0;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v49);
    if (v51)
      goto LABEL_90;
    v52 = v59 + 2;
    if (v59 + 2 >= v50)
    {
LABEL_106:
      v28 = 0;
      v26 = 0;
      v25 = v49;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v52);
    if (v51)
      goto LABEL_94;
    v1 = v59 + 3;
    if (v59 + 3 < v50)
    {
      v51 = *(_QWORD *)(v57 + 8 * v1);
      if (v51)
      {
        v49 = v59 + 3;
        goto LABEL_90;
      }
      v52 = v59 + 4;
      if (v59 + 4 >= v50)
        goto LABEL_109;
      v51 = *(_QWORD *)(v57 + 8 * v52);
      if (v51)
      {
LABEL_94:
        v49 = v52;
LABEL_90:
        v26 = (v51 - 1) & v51;
        v27 = __clz(__rbit64(v51)) + (v49 << 6);
        v25 = v49;
        goto LABEL_35;
      }
      v49 = v59 + 5;
      if (v59 + 5 < v50)
      {
        v51 = *(_QWORD *)(v57 + 8 * v49);
        if (!v51)
        {
          v49 = v50 - 1;
          v53 = v59 + 6;
          do
          {
            if (v50 == v53)
              goto LABEL_106;
            v51 = *(_QWORD *)(v57 + 8 * v53++);
          }
          while (!v51);
          v49 = v53 - 1;
        }
        goto LABEL_90;
      }
    }
    v28 = 0;
    v26 = 0;
    v25 = v52;
    goto LABEL_36;
  }
  __break(1u);
}

uint64_t sub_1001E1178(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001ED408);
}

void sub_1001E1184(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1002C8464(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_10001A630(&qword_100844170);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
}

uint64_t sub_1001E12FC(uint64_t a1)
{
  return sub_1001E21E0(a1, (uint64_t *)&unk_10083AEC0, &qword_10083FD38, &qword_10083FD30, (uint64_t *)sub_1002E69C8);
}

void sub_1001E1320(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;

  v5 = v2;
  v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    a1 = __CocoaSet.count.getter(a1);
    v7 = a1;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  v8 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = v9 + v7;
    if (!__OFADD__(v9, v7))
      goto LABEL_8;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v8 < 0)
    v23 = *v5;
  else
    v23 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v5);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v8);
  v10 = v24 + v7;
  if (__OFADD__(v24, v7))
    goto LABEL_30;
LABEL_8:
  v11 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v11;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v14 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v10 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v13 = 1;
  }
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v27 = v11;
    else
      v27 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v3 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v3 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 <= v10)
    v3 = v10;
  swift_bridgeObjectRetain(v11);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v3, 1, v11);
  swift_bridgeObjectRelease(*v5);
  *v5 = v15;
  v14 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v16 = *(_QWORD *)(v14 + 16);
  v17 = (*(_QWORD *)(v14 + 24) >> 1) - v16;
  a1 = (uint64_t)sub_1001EACAC(&v52, (_QWORD *)(v14 + 8 * v16 + 32), v17, v6);
  if (a1 < v7)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a1 >= 1)
  {
    v18 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = __OFADD__(v18, a1);
    v20 = v18 + a1;
    if (v19)
    {
      __break(1u);
      goto LABEL_41;
    }
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (a1 != v17)
  {
    v21 = v52;
LABEL_24:
    v22 = sub_1000C6560(v21);
    specialized Array._endMutation()(v22);
    return;
  }
LABEL_32:
  v4 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v17 = v52;
  v49 = v53;
  v7 = v54;
  v3 = v55;
  v10 = v56;
  if (v52 < 0)
  {
LABEL_41:
    v28 = __CocoaSet.Iterator.next()(a1);
    if (v28)
    {
      v29 = v28;
      v50 = v28;
      swift_unknownObjectRetain(v28);
      v30 = sub_10001A630((uint64_t *)&unk_10083AEC0);
      swift_dynamicCast(&v51, &v50, (char *)&type metadata for Swift.AnyObject + 8, v30, 7);
      v26 = v51;
      a1 = swift_unknownObjectRelease(v29);
      goto LABEL_48;
    }
LABEL_50:
    v21 = v17;
    goto LABEL_24;
  }
  if (v56)
  {
    v10 = (v56 - 1) & v56;
    v25 = __clz(__rbit64(v56)) | (v55 << 6);
LABEL_35:
    v26 = *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v25);
    a1 = swift_retain();
    goto LABEL_48;
  }
  v31 = v55 + 1;
  if (!__OFADD__(v55, 1))
  {
    v32 = (unint64_t)(v54 + 64) >> 6;
    if (v31 >= v32)
    {
      v10 = 0;
      v26 = 0;
      goto LABEL_48;
    }
    v33 = *(_QWORD *)(v53 + 8 * v31);
    if (v33)
      goto LABEL_46;
    v47 = v55 + 2;
    if (v55 + 2 >= v32)
    {
LABEL_101:
      v10 = 0;
      v26 = 0;
      v3 = v31;
      goto LABEL_48;
    }
    v33 = *(_QWORD *)(v53 + 8 * v47);
    if (v33)
      goto LABEL_86;
    v1 = v55 + 3;
    if (v55 + 3 < v32)
    {
      v33 = *(_QWORD *)(v53 + 8 * v1);
      if (v33)
      {
        v31 = v55 + 3;
        goto LABEL_46;
      }
      v47 = v55 + 4;
      if (v55 + 4 >= v32)
        goto LABEL_104;
      v33 = *(_QWORD *)(v53 + 8 * v47);
      if (v33)
      {
LABEL_86:
        v31 = v47;
LABEL_46:
        v10 = (v33 - 1) & v33;
        v25 = __clz(__rbit64(v33)) + (v31 << 6);
        v3 = v31;
        goto LABEL_35;
      }
      v31 = v55 + 5;
      if (v55 + 5 < v32)
      {
        v33 = *(_QWORD *)(v53 + 8 * v31);
        if (!v33)
        {
          v31 = v32 - 1;
          v48 = v55 + 6;
          do
          {
            if (v32 == v48)
              goto LABEL_101;
            v33 = *(_QWORD *)(v53 + 8 * v48++);
          }
          while (!v33);
          v31 = v48 - 1;
        }
        goto LABEL_46;
      }
    }
    v10 = 0;
    v26 = 0;
    v3 = v47;
LABEL_48:
    while (2)
    {
      if (!v26)
        goto LABEL_50;
      v7 = (unint64_t)(v7 + 64) >> 6;
      while (1)
      {
        v34 = *v5 & 0xFFFFFFFFFFFFFF8;
        v35 = *(_QWORD *)(v34 + 0x18);
        if (v4 + 1 > (uint64_t)(v35 >> 1))
        {
          a1 = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1);
          v34 = *v5 & 0xFFFFFFFFFFFFFF8;
        }
        v36 = *(_QWORD *)(v34 + 24) >> 1;
        if (v4 < v36)
          break;
LABEL_52:
        *(_QWORD *)(v34 + 16) = v4;
      }
      v37 = v34 + 32;
      while (1)
      {
        *(_QWORD *)(v37 + 8 * v4++) = v26;
        if ((v17 & 0x8000000000000000) == 0)
          break;
        v43 = __CocoaSet.Iterator.next()(a1);
        if (!v43)
          goto LABEL_92;
        v44 = v43;
        v50 = v43;
        swift_unknownObjectRetain(v43);
        v45 = sub_10001A630((uint64_t *)&unk_10083AEC0);
        swift_dynamicCast(&v51, &v50, (char *)&type metadata for Swift.AnyObject + 8, v45, 7);
        v26 = v51;
        a1 = swift_unknownObjectRelease(v44);
        if (!v26)
          goto LABEL_92;
LABEL_59:
        if (v4 >= v36)
        {
          v34 = *v5 & 0xFFFFFFFFFFFFFF8;
          goto LABEL_52;
        }
      }
      if (v10)
      {
        v38 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v39 = v38 | (v3 << 6);
        goto LABEL_58;
      }
      v40 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
LABEL_104:
        v10 = 0;
        v26 = 0;
        v3 = v1;
        continue;
      }
      break;
    }
    if (v40 >= v7)
      goto LABEL_92;
    v41 = *(_QWORD *)(v49 + 8 * v40);
    if (!v41)
    {
      v42 = v3 + 2;
      if (v3 + 2 >= v7)
        goto LABEL_92;
      v41 = *(_QWORD *)(v49 + 8 * v42);
      if (!v41)
      {
        if (v3 + 3 >= v7)
          goto LABEL_92;
        v41 = *(_QWORD *)(v49 + 8 * (v3 + 3));
        if (v41)
        {
          v40 = v3 + 3;
          goto LABEL_74;
        }
        v42 = v3 + 4;
        if (v3 + 4 >= v7)
          goto LABEL_92;
        v41 = *(_QWORD *)(v49 + 8 * v42);
        if (!v41)
        {
          v40 = v3 + 5;
          if (v3 + 5 >= v7)
            goto LABEL_92;
          v41 = *(_QWORD *)(v49 + 8 * v40);
          if (!v41)
          {
            v46 = v3 + 6;
            while (v7 != v46)
            {
              v41 = *(_QWORD *)(v49 + 8 * v46++);
              if (v41)
              {
                v40 = v46 - 1;
                goto LABEL_74;
              }
            }
LABEL_92:
            *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10) = v4;
            v21 = v17;
            goto LABEL_24;
          }
          goto LABEL_74;
        }
      }
      v40 = v42;
    }
LABEL_74:
    v10 = (v41 - 1) & v41;
    v39 = __clz(__rbit64(v41)) + (v40 << 6);
    v3 = v40;
LABEL_58:
    v26 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v39);
    a1 = swift_retain();
    if (!v26)
      goto LABEL_92;
    goto LABEL_59;
  }
  __break(1u);
}

uint64_t sub_1001E1900(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001ED61C);
}

void sub_1001E190C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1002C8224(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_1001E1A5C(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001ED830);
}

uint64_t sub_1001E1A68(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EDA44);
}

uint64_t sub_1001E1A74(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_17:
      if (!v2)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain(v3);
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease(*v1);
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_17;
LABEL_5:
  v10 = *(_QWORD *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_23;
  sub_10001A630(&qword_10083FC98);
  swift_arrayInitWithCopy(v11);
  if (v9 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(*v1 + 16);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *(_QWORD *)(*v1 + 16) = v15;
LABEL_18:
    swift_bridgeObjectRelease(a1);
    return specialized Array._endMutation()(v16);
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001E1C0C(uint64_t a1)
{
  return sub_1001E34DC(a1, (uint64_t (*)(void))sub_1002C84A0, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_1001E1C20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EDE6C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))&type metadata accessor for REMObjectID_Codable, &qword_10083FE28, &qword_10083FE20, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E6974);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E1DF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EE074(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))_s19PolymorphicListItemCMa_0, (unint64_t *)&unk_10083FFA0, &qword_10083FF98, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E1FD0(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C84F0, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
}

uint64_t sub_1001E1FE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EDE6C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))type metadata accessor for REMCDSavedReminder, &qword_10083FC90, &qword_1008519F0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E691C);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E21BC(uint64_t a1)
{
  return sub_1001E21E0(a1, &qword_1008437F0, &qword_10083FCC8, &qword_10083FCC0, (uint64_t *)sub_1002E69C8);
}

uint64_t sub_1001E21E0(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v24 = a1;
    else
      v24 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v12 < 0)
    v25 = *v5;
  else
    v25 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v5);
  v13 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v12);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_29;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v27 = v11;
  v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if ((unint64_t)v12 >> 62)
    goto LABEL_31;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain(v12);
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v17, 1, v12);
    swift_bridgeObjectRelease(*v5);
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    v11 = v27;
LABEL_15:
    result = sub_1001ECDD8(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v12 < 0)
      v26 = v12;
    else
      v26 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v12);
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v23);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E23F0(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C8478, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ReminderLite);
}

uint64_t sub_1001E2404(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EE074(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))_s19PolymorphicListItemCMa_1, &qword_10083FF68, &qword_10083FF60, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E25DC(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C8738, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
}

uint64_t sub_1001E25F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EE074(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))_s8BaseListCMa, &qword_10083FFD8, &qword_10083FFD0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E27C8(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C88E4, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

void sub_1001E27DC(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1002C8ED8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  sub_10001A630((uint64_t *)&unk_100844340);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

uint64_t sub_1001E2950(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EE490);
}

uint64_t sub_1001E295C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EDE6C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))type metadata accessor for REMCDTemplate, (unint64_t *)&unk_10083FFB0, &qword_100851900, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E691C);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E2B34(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EE6A4);
}

uint64_t sub_1001E2B40(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EE8B8);
}

uint64_t sub_1001E2B4C(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EEACC);
}

void sub_1001E2B58(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;

  v3 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v1;
  v6 = *(_QWORD *)(*v1 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(v3 - 8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v5;
  if (!isUniquelyReferenced_nonNull_native || (v10 = *(_QWORD *)(v5 + 24) >> 1, v10 < v7))
  {
    if (v6 <= v7)
      v11 = v6 + v4;
    else
      v11 = v6;
    v5 = sub_1002C84B4(isUniquelyReferenced_nonNull_native, v11, 1, v5);
    *v1 = v5;
    v10 = *(_QWORD *)(v5 + 24) >> 1;
  }
  v12 = *(_QWORD *)(v5 + 16);
  v13 = v10 - v12;
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v4)
      goto LABEL_19;
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v13 < v4)
  {
    __break(1u);
    goto LABEL_25;
  }
  v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v15 = *(_QWORD *)(v8 + 72);
  v16 = v5 + v14 + v15 * v12;
  if (a1 + v14 < v16 + v15 * v4 && v16 < a1 + v14 + v15 * v4)
    goto LABEL_26;
  swift_arrayInitWithCopy(v16);
  if (v4)
  {
    v18 = *(_QWORD *)(v5 + 16);
    v19 = __OFADD__(v18, v4);
    v20 = v18 + v4;
    if (!v19)
    {
      *(_QWORD *)(v5 + 16) = v20;
      goto LABEL_19;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    v21 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v21, 1092, 0);
    __break(1u);
    return;
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  if (v4 == v13)
LABEL_23:
    *v1 = v5;
}

uint64_t sub_1001E2CE0(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C8EC4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_1001E2CF4(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EE27C);
}

uint64_t sub_1001E2D00(uint64_t a1)
{
  return sub_1001E34DC(a1, (uint64_t (*)(void))sub_1002CA064, type metadata accessor for RDTimelineEngineReminder);
}

uint64_t sub_1001E2D14(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002CA0A0, type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

void sub_1001E2D28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1002CA0D4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_1001E2E80(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EEEF4);
}

uint64_t sub_1001E2E8C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E3048(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002CA57C, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1001E305C(uint64_t a1)
{
  return sub_1001E3070(a1, (uint64_t (*)(void))sub_1002C848C, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.SectionLite);
}

uint64_t sub_1001E3070(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001E31E8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[4];

  v2 = v1;
  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)objc_msgSend(a1, "count", v6);
  v10 = (_QWORD *)*v2;
  v11 = *(_QWORD *)(*v2 + 16);
  v12 = &v9[v11];
  if (__OFADD__(v11, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v13 = (uint64_t)v9;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v10;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v15 = v10[3] >> 1, v15 < (uint64_t)v12))
  {
    if (v11 <= (uint64_t)v12)
      v16 = (int64_t)v12;
    else
      v16 = v11;
    v10 = sub_1002C8358(isUniquelyReferenced_nonNull_native, v16, 1, v10);
    *v2 = v10;
    v15 = v10[3] >> 1;
  }
  v17 = v10[2];
  v18 = v15 - v17;
  sub_1001EF524((uint64_t)v8, &v10[4 * v17 + 4], v15 - v17);
  if (v19 < v13)
    goto LABEL_15;
  if (v19 >= 1)
  {
    v20 = v10[2];
    v21 = __OFADD__(v20, v19);
    v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return;
    }
    v10[2] = v22;
  }
  if (v19 != v18)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return;
  }
LABEL_16:
  v23 = v10[2];
  v24 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(v34, v4, v24);
  sub_1000E6B28((uint64_t)v34, (uint64_t)&v32);
  while (v33)
  {
    sub_10000882C((uint64_t)&v32, (uint64_t *)&unk_10083D5B0);
    v26 = (_QWORD *)*v2;
    v27 = *(_QWORD *)(*v2 + 24);
    v28 = v27 >> 1;
    if ((uint64_t)(v27 >> 1) < v23 + 1)
    {
      v26 = sub_1002C8358((_QWORD *)(v27 > 1), v23 + 1, 1, (_QWORD *)*v2);
      *v2 = v26;
      v28 = v26[3] >> 1;
    }
    sub_1000E6B28((uint64_t)v34, (uint64_t)&v30);
    if (v31)
    {
      if (v23 <= v28)
        v25 = v28;
      else
        v25 = v23;
      v29 = &v26[4 * v23 + 4];
      while (1)
      {
        sub_10001A6CC(&v30, &v32);
        if (v25 == v23)
          break;
        sub_10000882C((uint64_t)v34, (uint64_t *)&unk_10083D5B0);
        sub_10001A6CC(&v32, v29);
        ++v23;
        dispatch thunk of IteratorProtocol.next()(v34, v4, v24);
        sub_1000E6B28((uint64_t)v34, (uint64_t)&v30);
        v29 += 2;
        if (!v31)
          goto LABEL_18;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v32);
      v23 = v25;
    }
    else
    {
LABEL_18:
      sub_10000882C((uint64_t)&v30, (uint64_t *)&unk_10083D5B0);
      v25 = v23;
    }
    *(_QWORD *)(*v2 + 16) = v25;
    sub_1000E6B28((uint64_t)v34, (uint64_t)&v32);
  }
  sub_10000882C((uint64_t)v34, (uint64_t *)&unk_10083D5B0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_10000882C((uint64_t)&v32, (uint64_t *)&unk_10083D5B0);
}

uint64_t sub_1001E34C8(uint64_t a1)
{
  return sub_1001E34DC(a1, (uint64_t (*)(void))sub_1002CA9F0, (uint64_t (*)(_QWORD))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate);
}

uint64_t sub_1001E34DC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  char v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  v12 = (*(_QWORD *)(v5 + 24) >> 1) - v11;
  v13 = a3(0);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v5 + v15 + v16 * v11;
  v18 = a1 + v15;
  v19 = v16 * v10;
  v20 = v17 + v19;
  v21 = v18 + v19;
  if (v18 < v20 && v17 < v21)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v10);
  v25 = v23 + v10;
  if (!v24)
  {
    *(_QWORD *)(v5 + 16) = v25;
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v27, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001E3658(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1001EE074(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))_s19PolymorphicListItemCMa, (unint64_t *)&unk_10083FF80, &qword_10083FF78, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E6A1C);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E3830(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EF108);
}

uint64_t sub_1001E383C(uint64_t a1)
{
  return sub_1001E2E8C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001EF310);
}

void _s7remindd13REMCDTemplateC19sortChildrenObjectsyyF_0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  id v30;
  uint64_t v31;
  os_log_type_t log;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36[2];

  v1 = v0;
  if ((sub_1001E457C() & 1) == 0)
  {
    v2 = objc_msgSend(v0, "remObjectID");
    if (v2)
    {
      v33 = v2;
      v3 = objc_msgSend(v0, "storeControllerManagedObjectContext");
      if (v3)
      {
        v4 = v3;
        v5 = qword_1008372C8;
        v6 = v33;
        if (v5 != -1)
          swift_once(&qword_1008372C8, sub_100374614);
        v7 = sub_100374DD8((uint64_t)v33, 0, (uint64_t)v4, (Class)qword_100871E78, 0, 0);

        v8 = objc_msgSend(v1, "sectionIDsOrderingAsData");
        if (v8)
        {
          v9 = v8;
          v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
          v12 = v11;

          sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
          static REMJSONRepresentable.fromJSONData(_:)(v36, v10, v12);
          sub_1000A71C8(v10, v12);
          v13 = (void *)v36[0];
          v14 = type metadata accessor for REMCDTemplateSection();
          v15 = REMOrderedIdentifierMap.reorder<A>(objects:)(v7, v14);
          swift_bridgeObjectRelease(v7);
          if (qword_100836F90 != -1)
            swift_once(&qword_100836F90, sub_1001E4124);
          v16 = type metadata accessor for Logger(0);
          sub_10001AAA8(v16, (uint64_t)qword_10083FC50);
          v17 = v1;
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.default.getter(v18);
          if (os_log_type_enabled(v18, v19))
          {
            log = v19;
            v34 = v13;
            v20 = (uint8_t *)swift_slowAlloc(12, -1);
            v31 = swift_slowAlloc(32, -1);
            v36[0] = v31;
            *(_DWORD *)v20 = 136315138;
            v21 = objc_msgSend(v17, "remObjectID");
            if (v21)
            {
              v22 = v21;
              v23 = objc_msgSend(v21, "description");

              v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
              v26 = v25;

            }
            else
            {
              v24 = 7104878;
              v26 = 0xE300000000000000;
            }
            v35 = sub_10001A820(v24, v26, v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);

            swift_bridgeObjectRelease(v26);
            _os_log_impl((void *)&_mh_execute_header, v18, log, "REMCDTemplate+CloudKit#sortChildSections(): Sorted child sections {cdTemplate: %s}", v20, 0xCu);
            swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v31, -1, -1);
            swift_slowDealloc(v20, -1, -1);

          }
          else
          {

          }
        }
        else
        {
          v15 = v7;
        }
        v27 = sub_1001E0168(v15, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection);
        swift_bridgeObjectRelease(v15);
        v28 = objc_allocWithZone((Class)NSMutableOrderedSet);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v30 = objc_msgSend(v28, "initWithArray:", isa, swift_bridgeObjectRelease(v27).n128_f64[0]);

        objc_msgSend(v1, "setSections:", v30);
      }
      else
      {

      }
    }
  }
}

uint64_t sub_1001E4124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083FC50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083FC50);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001E41BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001E41F8 + 4 * byte_1006AE419[a1]))(0x626D456567646162, 0xEB000000006D656CLL);
}

uint64_t sub_1001E41F8()
{
  return 0x726F6C6F63;
}

uint64_t sub_1001E420C()
{
  return 0x6E6F697461657263;
}

unint64_t sub_1001E422C()
{
  return 0xD000000000000010;
}

uint64_t sub_1001E4350()
{
  return 0x53676E6974726F73;
}

uint64_t sub_1001E4370()
{
  return 0x694C656372756F73;
}

uint64_t sub_1001E4394(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1001E41BC(*a1);
  v5 = v4;
  v6 = sub_1001E41BC(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1001E441C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_1001E41BC(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_1001E447C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_1001E41BC(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1001E44BC(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_1001E41BC(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001E4518@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001EF6B4(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1001E4544@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001E41BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1001E456C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DD3B0;
}

uint64_t sub_1001E457C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  id v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, "managedObjectContext");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_opt_self(RDStoreControllerManagedObjectContext);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  if (!v4)
  {
LABEL_11:

    return 0;
  }
  v5 = (void *)v4;
  v6 = (uint64_t)objc_msgSend(v0, "recordID");
  if (v6)
  {
    if ((objc_msgSend(v5, "containerShouldSortChildrenAfterFetchingWithRecordID:", v6) & 1) != 0)
    {
      if (qword_100836F90 != -1)
        swift_once(&qword_100836F90, sub_1001E4124);
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10083FC50);
      v8 = (id)v6;
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.info.getter(v9);
      if (!os_log_type_enabled(v9, v10))
      {

        return 1;
      }
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      v16 = v8;
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      *v12 = v6;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sorting children (sections) deferred {templateRecordID: %{public}@}", v11, 0xCu);
      v14 = sub_10001A630((uint64_t *)&unk_100839E70);
      v6 = 1;
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v6;
}

_UNKNOWN **static REMCDTemplate.recordTypes()()
{
  return &off_1007DFEE8;
}

uint64_t static REMCDTemplate.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDTemplate();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDTemplate.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "setAccount:", a2);
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v12);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836F90 != -1)
        swift_once(&qword_100836F90, sub_1001E4124);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_10083FC50);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDTemplate.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6574616C706D6554;
  v1 = (void *)0xE800000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDTemplate.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  objc_class *v10;
  id v11;
  NSString v12;
  double v13;
  NSString v14;
  double v15;
  id v16;
  id v17;
  id v18;
  objc_class *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  objc_super v56;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = String._bridgeToObjectiveC()();
  v10 = (objc_class *)type metadata accessor for REMCDTemplate();
  v56.receiver = v3;
  v56.super_class = v10;
  objc_msgSendSuper2(&v56, "mergeDataFromRecord:accountID:", from.super.isa, v9);

  v11 = -[objc_class recordID](from.super.isa, "recordID");
  v12 = objc_msgSend(v11, "recordName");

  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v14 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v12, v13);

  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v14, v15);

  v16 = objc_msgSend(v3, "mergeDataRevertedLocallyMarkedForDeletion");
  v17 = objc_msgSend(v3, "mergeDataRefusedToMergeMarkedForDeletion");
  v55 = 0;
  v18 = v3;
  v19 = from.super.isa;
  sub_100437C24(v19, (uint64_t)v16, (uint64_t)v17, v18, v18, v19, (uint64_t)&v55, ObjectType);
  if (v55 == 1)
  {
    if (qword_100836F90 != -1)
      swift_once(&qword_100836F90, sub_1001E4124);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_10083FC50);
    v21 = v18;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      v24 = swift_slowAlloc(32, -1);
      v25 = swift_slowAlloc(96, -1);
      v54 = v25;
      *(_DWORD *)v24 = 136446722;
      v26 = objc_msgSend(v21, "ckIdentifier");
      HIDWORD(v50) = v23;
      v51 = v25;
      if (v26)
      {
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

      }
      else
      {
        v28 = 0;
        v30 = 0;
      }
      v52 = v28;
      v53 = v30;
      v31 = sub_10001A630((uint64_t *)&unk_10083A370);
      v32 = Optional.descriptionOrNil.getter(v31);
      v34 = v33;
      swift_bridgeObjectRelease();
      v52 = sub_10001A820(v32, v34, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      *(_QWORD *)&v35 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v24 + 12) = 2082;
      v36 = Bool.yesno.getter(objc_msgSend(v21, "markedForDeletion", v35));
      v52 = sub_10001A820(v36, v37, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v24 + 22) = 2082;
      v39 = objc_msgSend(v21, "sourceListIDURL", v38);
      if (v39)
      {
        v40 = v39;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v39);

        v41 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v8, 0, 1, v41);
      }
      else
      {
        v42 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v8, 1, 1, v42);
      }
      v43 = BYTE4(v50);
      v44 = Optional.descriptionOrNil.getter(v6);
      v46 = v45;
      sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C70);
      v52 = sub_10001A820(v44, v46, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v43, "REMCDTemplate.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' due to change in 'sourceListIDURL' {ckIdentifier: %{public}s, markedForDeletion: %{public}s, sourceListIDURL: %{public}s}", (uint8_t *)v24, 0x20u);
      v47 = v51;
      swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    v48 = objc_msgSend(v21, "storeControllerManagedObjectContext");
    if (v48)
    {
      v49 = v48;
      objc_msgSend(v48, "setPendingPostSaveActions:", (unint64_t)objc_msgSend(v48, "pendingPostSaveActions") | 4);

    }
  }
}

void sub_1001E5324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[18];

  v17[1] = a5;
  v17[7] = a4;
  v17[8] = a3;
  v17[9] = a2;
  v17[6] = 0;
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for URL(0);
  v17[4] = *(_QWORD *)(v7 - 8);
  v17[5] = v7;
  __chkstk_darwin(v7);
  v17[0] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for UUID(0);
  v17[2] = *(_QWORD *)(v10 - 8);
  v17[3] = v10;
  __chkstk_darwin(v10);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __asm { BR              X10 }
}

void sub_1001E551C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  NSString v3;

  v1 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(0x626D456567646142, 0xEB000000006D656CLL, v1, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v0 - 96))
  {
    v3 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v2 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(*(id *)(v0 - 152), "setBadgeEmblem:", v3, v2);

}

CKRecord_optional __swiftcall REMCDTemplate.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  objc_class *v44;
  objc_class *v45;
  Swift::Bool v46;
  objc_class *v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  objc_class *v60;
  _QWORD v61[37];
  id v62;
  __int128 v63;
  objc_super v64;
  uint64_t v65;
  char v66[8];
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v61[31] = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v61[32] = (char *)v61 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v61[21] = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v13);
  v61[27] = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v61[30] = (char *)v61 - v16;
  v17 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v17);
  v61[26] = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)v61 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)v61 - v23;
  __chkstk_darwin(v25);
  v61[36] = (char *)v61 - v26;
  __chkstk_darwin(v27);
  v61[25] = (char *)v61 - v28;
  __chkstk_darwin(v29);
  v61[34] = (char *)v61 - v30;
  __chkstk_darwin(v31);
  v61[24] = (char *)v61 - v32;
  __chkstk_darwin(v33);
  v61[29] = (char *)v61 - v34;
  __chkstk_darwin(v35);
  v61[23] = (char *)v61 - v36;
  __chkstk_darwin(v37);
  v61[35] = (char *)v61 - v38;
  __chkstk_darwin(v39);
  v61[22] = (char *)v61 - v40;
  *(_QWORD *)&v42 = __chkstk_darwin(v41).n128_u64[0];
  v61[28] = (char *)v61 - v43;
  v62 = v1;
  if (objc_msgSend(v1, "isOwnedByCurrentUser", v42))
  {
    v44 = (objc_class *)type metadata accessor for REMCDTemplate();
    v64.receiver = v62;
    v64.super_class = v44;
    v45 = (objc_class *)objc_msgSendSuper2(&v64, "newlyCreatedRecord");
    v47 = v45;
    if (v45)
    {
      v61[19] = v11;
      v61[3] = v5;
      v61[17] = v3;
      v61[18] = v2;
      v61[16] = v10;
      v61[14] = 0x80000001006FC7B0;
      v61[5] = "indersInSectionsChecksum";
      v61[2] = 0x80000001006FA6F0;
      v61[13] = 0x80000001006FA6C0;
      v61[12] = 0x80000001006FC780;
      v61[11] = 0x80000001006FA670;
      v61[10] = 0x80000001006FC760;
      v61[9] = 0x80000001006FC740;
      v61[8] = 0x80000001006F65E0;
      v61[7] = 0x80000001006FC720;
      v61[6] = 0x80000001006F6540;
      v61[4] = "ShowingLargeAttachments";
      v61[1] = 0x80000001006FA650;
      v61[15] = v21;
      v61[33] = v24;
      v61[20] = v45;
      JUMPOUT(0x1001E6EE4);
    }
  }
  else
  {
    if (qword_100836F90 != -1)
      swift_once(&qword_100836F90, sub_1001E4124);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_10083FC50);
    v49 = v62;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v63 = v53;
      *(_DWORD *)v52 = 136446210;
      v54 = objc_msgSend(v49, "remObjectID");
      if (v54)
      {
        v55 = v54;
        v56 = objc_msgSend(v54, "description");

        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v59 = v58;

      }
      else
      {
        v59 = 0xE300000000000000;
        v57 = 7104878;
      }
      v65 = sub_10001A820(v57, v59, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "REMCDTemplate will not be used to represent a public template, which is fetched from a template's public link, and is not expected to be shared, we shouldn't upload it for non-owner (templateID: %{public}s)", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

    }
    v47 = 0;
  }
  v60 = v47;
  result.value.super.isa = v60;
  result.is_nil = v46;
  return result;
}

Swift::Void __swiftcall REMCDTemplate.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_100836F90 != -1)
    swift_once(&qword_100836F90, sub_1001E4124);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083FC50);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630((uint64_t *)&unk_10083FC70);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

_QWORD *REMCDTemplate.objectsToBeDeletedBeforeThisObject()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "savedReminders");
  if (v1)
  {
    v2 = v1;
    v3 = type metadata accessor for REMCDSavedReminder();
    v4 = sub_10009FC50(&qword_10083B518, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedReminder, (uint64_t)&protocol conformance descriptor for NSObject);
    v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

    v6 = sub_1001E8998(v5, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedReminder, &qword_10083B518);
    swift_bridgeObjectRelease();
    v7 = sub_1001E0168((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
    swift_release(v6);
    sub_1001E09F4(v7);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001E8600(uint64_t a1)
{
  return sub_1001E8F10(a1, &qword_10083F440, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_1001EA7C4);
}

uint64_t *sub_1001E8614(uint64_t a1)
{
  return sub_1001EA3BC(a1, (unint64_t *)&unk_100844190, REMListStorage_ptr);
}

uint64_t *sub_1001E8628(uint64_t a1)
{
  return sub_1001EA3BC(a1, &qword_10083FF70, REMAccountStorage_ptr);
}

_QWORD *sub_1001E863C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, &qword_10083FCA0, (unint64_t *)&unk_10083FCB0, &qword_10083FCA8, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E8750(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, (uint64_t *)&unk_10083AEC0, &qword_10083FD38, &qword_10083FD30, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E8864(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001ED408);
}

uint64_t **sub_1001E8870(uint64_t a1)
{
  return sub_1001E9124(a1, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr, (unint64_t *)&qword_10083FE40);
}

_QWORD *sub_1001E888C(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDC8);
}

_QWORD *sub_1001E8898(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083D118);
}

_QWORD *sub_1001E88A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001A630(a2);
  v5 = (_QWORD *)swift_allocObject(v4, 8 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 3);
  v8 = sub_1001EC9E4(&v11, v5 + 4, v2, a1);
  v9 = v11;
  swift_bridgeObjectRetain(a1);
  sub_1000C6560(v9);
  if (v8 != (_QWORD *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

uint64_t **sub_1001E8984(uint64_t a1)
{
  return sub_1001E8998(a1, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (unint64_t *)&unk_100840EC0);
}

uint64_t **sub_1001E8998(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **result;
  uint64_t v13;

  v5 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v6 = __CocoaSet.count.getter(a1);
  if (!v6)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v6 <= 0)
  {
    v8 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v8 = (uint64_t **)swift_allocObject(v7, 8 * v6 + 32, 7);
    v9 = j__malloc_size(v8);
    v10 = v9 - 32;
    if (v9 < 32)
      v10 = v9 - 25;
    v8[2] = (uint64_t *)v6;
    v8[3] = (uint64_t *)((2 * (v10 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v5);
  v11 = sub_1001EBE24(&v13, v8 + 4, v6, v5, a2, a3);
  result = (uint64_t **)sub_1000C6560(v13);
  if (v11 == (uint64_t *)v6)
    return v8;
  __break(1u);
  return result;
}

_QWORD *sub_1001E8AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1001EACAC(&v9, v4 + 4, v2, v1);
  result = (_QWORD *)sub_1000C6560(v9);
  if (v7 == (uint64_t *)v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_1001E8BA0(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001EDC58);
}

_QWORD *sub_1001E8BAC(uint64_t a1)
{
  return sub_1001E9020(a1, (uint64_t *)&unk_10083A340, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1001EAF90, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1001EFD14);
}

_QWORD *sub_1001E8BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A630(&qword_10083DA80);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      sub_1001EB18C(&v13, (char *)v8 + v7, v1, a1);
      v12 = v11;
      sub_1000C6560(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001E8CC0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, &qword_1008437F0, &qword_10083FCC8, &qword_10083FCC0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E8DD4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001EDE6C((unint64_t)(v4 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for REMCDSavedReminder, &qword_10083FC90, &qword_1008519F0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E691C);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t *sub_1001E8EE8(uint64_t a1)
{
  return sub_1001EA3BC(a1, &qword_10083AA30, off_1007D6658);
}

_QWORD *sub_1001E8EFC(uint64_t a1)
{
  return sub_1001E8F10(a1, &qword_10083FF90, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_1001EB4DC);
}

_QWORD *sub_1001E8F10(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_10001A630(a2);
  v7 = (_QWORD *)swift_allocObject(v6, 24 * v3 + 32, 7);
  v8 = j__malloc_size(v7);
  v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 24);
  v9 = a3(&v12, v7 + 4, v3, a1);
  v10 = v12;
  swift_bridgeObjectRetain(a1);
  sub_1000C6560(v10);
  if (v9 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

_QWORD *sub_1001E9004(uint64_t a1)
{
  return sub_1001E9020(a1, &qword_10083F558, (uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1001EB6DC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000C6560);
}

_QWORD *sub_1001E9020(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, _QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v20[5];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v8 = sub_10001A630(a2);
  v9 = (_QWORD *)swift_allocObject(v8, 16 * v4 + 32, 7);
  v10 = j__malloc_size(v9);
  v11 = v10 - 32;
  if (v10 < 32)
    v11 = v10 - 17;
  v9[2] = v4;
  v9[3] = 2 * (v11 >> 4);
  v12 = a3(v20, v9 + 4, v4, a1);
  v13 = v20[0];
  v14 = v20[1];
  v15 = v20[2];
  v16 = v20[3];
  v17 = v20[4];
  v18 = swift_bridgeObjectRetain(a1);
  a4(v13, v14, v15, v16, v17, v18);
  if (v12 != v4)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

uint64_t **sub_1001E9108(uint64_t a1)
{
  return sub_1001E9124(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (unint64_t *)&qword_10083A1F0);
}

uint64_t **sub_1001E9124(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **result;
  uint64_t v15;

  v7 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v8 = __CocoaSet.count.getter(a1);
  if (!v8)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v8 <= 0)
  {
    v10 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v10 = (uint64_t **)swift_allocObject(v9, 8 * v8 + 32, 7);
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = (uint64_t *)v8;
    v10[3] = (uint64_t *)((2 * (v12 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v7);
  v13 = sub_1001EC114(&v15, v10 + 4, v8, v7, a2, a3, a4);
  result = (uint64_t **)sub_1000C6560(v15);
  if (v13 == (uint64_t *)v8)
    return v10;
  __break(1u);
  return result;
}

_QWORD *sub_1001E9244(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001E96B4(a1, a2, a3, a4, &qword_1008434A0, (uint64_t (*)(_QWORD))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

_QWORD *sub_1001E9258(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001EE27C);
}

_QWORD *sub_1001E9264(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDA8);
}

_QWORD *sub_1001E9270(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD00);
}

_QWORD *sub_1001E9280(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001EE074((unint64_t)(v4 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for DueDateNonVerifiableAlarm, &qword_100840058, &qword_100840050, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E9394(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001EE074((unint64_t)(v4 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for DueDateVerifiableAlarm, &qword_100840048, &qword_100840040, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E94A8(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FE08);
}

_QWORD *sub_1001E94B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A630((uint64_t *)&unk_10083A340);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001ECBDC((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000C6560(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t *sub_1001E9598(uint64_t a1)
{
  return sub_1001EA3BC(a1, &qword_10083DAC0, REMHashtag_ptr);
}

_QWORD *sub_1001E95AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_1001EB8DC(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000C6560(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E9694(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD28);
}

_QWORD *sub_1001E96A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001E96B4(a1, a2, a3, a4, &qword_10083DA80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_1001E96B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD *result;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v7)
    return _swiftEmptyArrayStorage;
  if (v7 > 0)
  {
    v11 = sub_10001A630(a5);
    v12 = *(_QWORD *)(a6(0) - 8);
    v13 = *(_QWORD *)(v12 + 72);
    v14 = *(unsigned __int8 *)(v12 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = (_QWORD *)swift_allocObject(v11, v15 + v13 * v7, v14 | 7);
    v17 = j__malloc_size(v16);
    if (!v13)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v17 - v15 == 0x8000000000000000 && v13 == -1)
      goto LABEL_23;
    v16[2] = v7;
    v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
    if (v6 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
  v16 = _swiftEmptyArrayStorage;
  if (v6 == a3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  if (v7 < 0)
  {
LABEL_24:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (char *)v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v21 = *(_QWORD *)(v19 + 72);
  v22 = a2 + v21 * a3;
  v23 = v21 * v7;
  v24 = &v20[v23];
  v25 = v22 + v23;
  if (v22 >= (unint64_t)v24 || (unint64_t)v20 >= v25)
  {
    swift_arrayInitWithCopy(v20);
    return v16;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_1001E987C(uint64_t a1)
{
  return sub_1001EA66C(a1, &qword_10083DA80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t, __n128))sub_1001EBAD4);
}

_QWORD *sub_1001E9898(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10001A630((uint64_t *)&unk_10083A340);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001E9A08(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FEE0);
}

_QWORD *sub_1001E9A14(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FED8);
}

_QWORD *sub_1001E9A20(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FED0);
}

_QWORD *sub_1001E9A2C(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FEC8);
}

_QWORD *sub_1001E9A38(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001ED1F4);
}

_QWORD *sub_1001E9A44(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, &qword_10083FD40, (unint64_t *)&unk_10083FD50, &qword_10083FD48, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E9B58(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, &qword_100843760, &qword_10083FD68, &qword_10083FD60, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E9C6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001E9DFC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001ECDD8((unint64_t)(v4 + 4), v2, v1, &qword_10083FD70, (unint64_t *)&unk_10083FD80, &qword_10083FD78, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002E69C8);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001E9F10(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001EECE0);
}

_QWORD *sub_1001E9F1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_10001A630(&qword_10083F618);
    v9 = (_QWORD *)swift_allocObject(v8, 48 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 48);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 48 * a3;
  if (v12 >= (unint64_t)&v9[6 * v5 + 4] || v11 >= v12 + 48 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1001EA0A8(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001ED830);
}

_QWORD *sub_1001EA0B4(uint64_t a1)
{
  return sub_1001EA0C0(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001EEEF4);
}

_QWORD *sub_1001EA0C0(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    v9 = swift_bridgeObjectRetain(a1);
    v10 = a2(v6 + 4, v4, a1, v9);
    a2 = v11;
    swift_bridgeObjectRelease(v10);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_1001EA1C0(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDD0);
}

_QWORD *sub_1001EA1CC(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDD8);
}

uint64_t **sub_1001EA1D8(uint64_t a1)
{
  return sub_1001E9124(a1, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, &qword_10083A250);
}

_QWORD *sub_1001EA1F4(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDF0);
}

_QWORD *sub_1001EA200(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDF8);
}

_QWORD *sub_1001EA20C(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FE00);
}

uint64_t **sub_1001EA218(uint64_t a1)
{
  return sub_1001E9124(a1, &qword_10083DAC0, REMHashtag_ptr, (unint64_t *)&qword_10083B670);
}

_QWORD *sub_1001EA234(uint64_t a1)
{
  return sub_1001E88A4(a1, (uint64_t *)&unk_10083FE10);
}

char *sub_1001EA240(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return (char *)_swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10001A630(&qword_10083FFF0);
  v10 = (char *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 32;
  v14 = (char *)(a2 + 8 * a3);
  if (v14 >= &v10[v8 + 32] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, 8 * v5);
    return v10;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t *sub_1001EA3A8(uint64_t a1)
{
  return sub_1001EA3BC(a1, (unint64_t *)&unk_100840090, REMSharedEntitySyncActivity_ptr);
}

uint64_t *sub_1001EA3BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;

  v5 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v6 = __CocoaDictionary.count.getter(a1);
  if (!v6)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v6 <= 0)
  {
    v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v8 = (uint64_t *)swift_allocObject(v7, 8 * v6 + 32, 7);
    v9 = j__malloc_size(v8);
    v10 = v9 - 32;
    if (v9 < 32)
      v10 = v9 - 25;
    v8[2] = v6;
    v8[3] = (2 * (v10 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v5);
  v11 = sub_1001EA9C8((uint64_t)&v13, v8 + 4, v6, v5, a2, a3);
  result = (uint64_t *)sub_1000C6560(v13);
  if (v11 == v6)
    return v8;
  __break(1u);
  return result;
}

uint64_t **sub_1001EA4CC(uint64_t a1)
{
  return sub_1001E9124(a1, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0);
}

uint64_t **sub_1001EA4E8(uint64_t a1)
{
  return sub_1001E9124(a1, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0);
}

uint64_t **sub_1001EA504(uint64_t a1)
{
  return sub_1001E9124(a1, &qword_100840020, off_1007D6690, (unint64_t *)&unk_1008448C0);
}

uint64_t **sub_1001EA520(uint64_t a1)
{
  return sub_1001E8998(a1, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedAttachment, (unint64_t *)&unk_100840010);
}

_QWORD *sub_1001EA534(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD08);
}

_QWORD *sub_1001EA540(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FE48);
}

_QWORD *sub_1001EA54C(uint64_t a1)
{
  return sub_1001E88A4(a1, (uint64_t *)&unk_10083FE50);
}

uint64_t *sub_1001EA558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaDictionary.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v4 = (uint64_t *)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_1001EC40C((uint64_t)&v9, v4 + 4, v2, v1);
  result = (uint64_t *)sub_1000C6560(v9);
  if (v7 == v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_1001EA650(uint64_t a1)
{
  return sub_1001EA66C(a1, (uint64_t *)&unk_10083FCD0, type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t, __n128))sub_1001EC6D8);
}

_QWORD *sub_1001EA66C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t *, char *, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v8 = sub_10001A630(a2);
  v9 = *(_QWORD *)(a3(0) - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v4, v11 | 7);
  result = (_QWORD *)j__malloc_size(v13);
  if (v10)
  {
    if ((_QWORD *)((char *)result - v12) != (_QWORD *)0x8000000000000000 || v10 != -1)
    {
      v13[2] = v4;
      v13[3] = 2 * (((uint64_t)result - v12) / v10);
      v16 = swift_bridgeObjectRetain(a1);
      v17 = a4(&v18, (char *)v13 + v12, v4, a1, v16);
      sub_1000C6560(v18);
      if (v17 == v4)
        return v13;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001EA770(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FFF8);
}

_QWORD *sub_1001EA77C(uint64_t a1)
{
  return sub_1001E88A4(a1, (uint64_t *)&unk_10083FCE0);
}

_QWORD *sub_1001EA788(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD10);
}

_QWORD *sub_1001EA794(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD18);
}

_QWORD *sub_1001EA7A0(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FD20);
}

_QWORD *sub_1001EA7AC(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083D110);
}

_QWORD *sub_1001EA7B8(uint64_t a1)
{
  return sub_1001E88A4(a1, &qword_10083FDA0);
}

uint64_t sub_1001EA7C4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 3;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001EA9C8(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v6;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v36;
  uint64_t v37;

  v6 = a4;
  v8 = a2;
  v9 = (_QWORD *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v10 = a4;
    else
      v10 = a4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.makeIterator()(v10);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v6 = result | 0x8000000000000000;
    if (v8)
      goto LABEL_6;
LABEL_39:
    v14 = 0;
    a3 = 0;
LABEL_48:
    *v9 = v6;
    v9[1] = v11;
    v9[2] = v12;
    v9[3] = v14;
    v9[4] = v13;
    return a3;
  }
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v11 = a4 + 64;
  v28 = ~v27;
  v29 = -v27;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  else
    v30 = -1;
  v13 = v30 & *(_QWORD *)(a4 + 64);
  v12 = v28;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v14 = 0;
    goto LABEL_48;
  }
  if (a3 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v31 = v12;
  v32 = v9;
  v14 = 0;
  v15 = 0;
  v33 = (unint64_t)(v12 + 64) >> 6;
  while ((v6 & 0x8000000000000000) != 0)
  {
    v21 = v11;
    v22 = __CocoaDictionary.Iterator.next()(result);
    if (!v22)
    {
      a3 = v15;
LABEL_47:
      v12 = v31;
      v9 = v32;
      goto LABEL_48;
    }
    v24 = v23;
    swift_unknownObjectRelease(v22);
    v36 = v24;
    v25 = sub_1000151B0(0, a5, a6);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v18 = v37;
    result = swift_unknownObjectRelease(v24);
    v11 = v21;
    if (!v18)
      goto LABEL_46;
LABEL_11:
    ++v15;
    *v8++ = v18;
    if (v15 == a3)
      goto LABEL_47;
  }
  if (v13)
  {
    v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v17 = v16 | (v14 << 6);
    goto LABEL_10;
  }
  v19 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v19 >= v33)
    goto LABEL_42;
  v20 = *(_QWORD *)(v11 + 8 * v19);
  if (v20)
    goto LABEL_26;
  v14 += 2;
  if (v19 + 1 >= v33)
  {
    v13 = 0;
    v14 = v19;
    goto LABEL_46;
  }
  v20 = *(_QWORD *)(v11 + 8 * v14);
  if (v20)
  {
LABEL_19:
    v19 = v14;
LABEL_26:
    v13 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v14 = v19;
LABEL_10:
    result = (uint64_t)*(id *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    v18 = result;
    if (!result)
      goto LABEL_46;
    goto LABEL_11;
  }
  v26 = v19 + 2;
  if (v19 + 2 >= v33)
    goto LABEL_42;
  v20 = *(_QWORD *)(v11 + 8 * v26);
  if (v20)
  {
LABEL_25:
    v19 = v26;
    goto LABEL_26;
  }
  v14 = v19 + 3;
  if (v19 + 3 >= v33)
  {
    v13 = 0;
    v14 = v19 + 2;
    goto LABEL_46;
  }
  v20 = *(_QWORD *)(v11 + 8 * v14);
  if (v20)
    goto LABEL_19;
  v26 = v19 + 4;
  if (v19 + 4 >= v33)
  {
LABEL_42:
    v13 = 0;
LABEL_46:
    a3 = v15;
    goto LABEL_47;
  }
  v20 = *(_QWORD *)(v11 + 8 * v26);
  if (v20)
    goto LABEL_25;
  while (1)
  {
    v19 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v19 >= v33)
    {
      v13 = 0;
      v14 = v33 - 1;
      goto LABEL_46;
    }
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v26;
    if (v20)
      goto LABEL_26;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t *sub_1001EAC90(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  return sub_1001EC114(a1, a2, a3, a4, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (unint64_t *)&qword_10083A1F0);
}

uint64_t *sub_1001EACAC(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    result = Set.Iterator.init(_cocoa:)(v35, v9, v10, &protocol witness table for AnyKeyPath);
    v4 = v35[0];
    v11 = v35[1];
    v12 = v35[2];
    v13 = v35[3];
    v14 = v35[4];
    v31 = v7;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v15 = 0;
LABEL_49:
    *v31 = v4;
    v31[1] = v11;
    v31[2] = v12;
    v31[3] = v13;
    v31[4] = v14;
    return (uint64_t *)v15;
  }
  v13 = 0;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v11 = a4 + 56;
  v12 = ~v27;
  v28 = -v27;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v14 = v29 & *(_QWORD *)(a4 + 56);
  v31 = result;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v15 = 0;
    goto LABEL_49;
  }
  if (a3 < 0)
    goto LABEL_51;
  v15 = 0;
  v32 = (unint64_t)(v12 + 64) >> 6;
  v30 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      v22 = v11;
      v23 = __CocoaSet.Iterator.next()(result);
      if (!v23)
        goto LABEL_48;
      v24 = v23;
      v33 = v23;
      swift_unknownObjectRetain(v23);
      v25 = sub_10001A630((uint64_t *)&unk_10083AEC0);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
      v18 = v34;
      result = (uint64_t *)swift_unknownObjectRelease(v24);
      v11 = v22;
      if (!v18)
        goto LABEL_48;
      goto LABEL_11;
    }
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v19 >= v32)
    {
      v14 = 0;
      goto LABEL_48;
    }
    v20 = *(_QWORD *)(v11 + 8 * v19);
    if (v20)
      goto LABEL_26;
    v21 = v13 + 2;
    if (v13 + 2 >= v32)
    {
      v14 = 0;
      ++v13;
      goto LABEL_48;
    }
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v32)
        goto LABEL_45;
      v20 = *(_QWORD *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        v19 = v13 + 3;
        goto LABEL_26;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v32)
      {
        v14 = 0;
        v13 += 3;
        goto LABEL_48;
      }
      v20 = *(_QWORD *)(v11 + 8 * v21);
      if (!v20)
      {
        v19 = v13 + 5;
        if (v13 + 5 >= v32)
        {
LABEL_45:
          v14 = 0;
          v13 = v21;
          goto LABEL_48;
        }
        v20 = *(_QWORD *)(v11 + 8 * v19);
        if (!v20)
        {
          v26 = v13 + 6;
          while (v32 != v26)
          {
            v20 = *(_QWORD *)(v11 + 8 * v26++);
            if (v20)
            {
              v19 = v26 - 1;
              goto LABEL_26;
            }
          }
          v14 = 0;
          v13 = v32 - 1;
          goto LABEL_48;
        }
        goto LABEL_26;
      }
    }
    v19 = v21;
LABEL_26:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_10:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = (uint64_t *)swift_retain();
    if (!v18)
      goto LABEL_48;
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      v15 = a3;
LABEL_48:
      v12 = v30;
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1001EAF90(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1001EB18C(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 64;
  v14 = *(_QWORD *)(a4 + 64);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 64;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    v30(a2, v22, v11);
    if (v21 == v39)
    {
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v23 + 56))(v10, 1, 1, v11, v12);
          v19 = 0;
LABEL_38:
          sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_1001EB4DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    ++v13;
    *(_OWORD *)v11 = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    *(_QWORD *)(v11 + 16) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }
    v11 += 24;
    result = swift_bridgeObjectRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001EB6DC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1001EB8DC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001EBAD4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t *sub_1001EBE24(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6)
{
  uint64_t v6;
  uint64_t **v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v38;
  uint64_t *v39;
  _QWORD v40[5];

  v6 = a4;
  v8 = a2;
  v35 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v11 = a4;
    else
      v11 = a4 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.makeIterator()(v11);
    v13 = a5(0);
    v14 = sub_10009FC50(a6, a5, (uint64_t)&protocol conformance descriptor for NSObject);
    result = Set.Iterator.init(_cocoa:)(v40, v12, v13, v14);
    v6 = v40[0];
    v15 = v40[1];
    v16 = v40[2];
    v17 = v40[3];
    v18 = v40[4];
    if (v8)
      goto LABEL_6;
LABEL_39:
    v19 = 0;
    goto LABEL_41;
  }
  v17 = 0;
  v30 = -1 << *(_BYTE *)(a4 + 32);
  v15 = a4 + 56;
  v16 = ~v30;
  v31 = -v30;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v18 = v32 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v19 = 0;
LABEL_41:
    v33 = v35;
LABEL_44:
    *v33 = v6;
    v33[1] = v15;
    v33[2] = v16;
    v33[3] = v17;
    v33[4] = v18;
    return (uint64_t *)v19;
  }
  if (a3 < 0)
    goto LABEL_51;
  v19 = 0;
  v36 = (unint64_t)(v16 + 64) >> 6;
  v34 = v16;
  while (1)
  {
    if (v6 < 0)
    {
      v26 = __CocoaSet.Iterator.next()(result);
      if (!v26)
        goto LABEL_43;
      v27 = v26;
      v38 = v26;
      v28 = a5(0);
      swift_unknownObjectRetain(v27);
      swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
      v22 = v39;
      result = (uint64_t *)swift_unknownObjectRelease(v27);
      if (!v22)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_10;
    }
    v23 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v23 >= v36)
    {
      v18 = 0;
      goto LABEL_43;
    }
    v24 = *(_QWORD *)(v15 + 8 * v23);
    if (v24)
      goto LABEL_26;
    v25 = v17 + 2;
    if (v17 + 2 >= v36)
    {
      v18 = 0;
      ++v17;
      goto LABEL_43;
    }
    v24 = *(_QWORD *)(v15 + 8 * v25);
    if (!v24)
    {
      if (v17 + 3 >= v36)
        goto LABEL_47;
      v24 = *(_QWORD *)(v15 + 8 * (v17 + 3));
      if (v24)
      {
        v23 = v17 + 3;
        goto LABEL_26;
      }
      v25 = v17 + 4;
      if (v17 + 4 >= v36)
      {
        v18 = 0;
        v17 += 3;
        goto LABEL_43;
      }
      v24 = *(_QWORD *)(v15 + 8 * v25);
      if (!v24)
      {
        v23 = v17 + 5;
        if (v17 + 5 >= v36)
        {
LABEL_47:
          v18 = 0;
          v17 = v25;
          goto LABEL_43;
        }
        v24 = *(_QWORD *)(v15 + 8 * v23);
        if (!v24)
        {
          v29 = v17 + 6;
          while (v36 != v29)
          {
            v24 = *(_QWORD *)(v15 + 8 * v29++);
            if (v24)
            {
              v23 = v29 - 1;
              goto LABEL_26;
            }
          }
          v18 = 0;
          v17 = v36 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v23 = v25;
LABEL_26:
    v18 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
    v17 = v23;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v6 + 48) + 8 * v21);
    v22 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v19;
    *v8++ = v22;
    if (v19 == a3)
    {
      v19 = a3;
LABEL_43:
      v16 = v34;
      v33 = v35;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t *sub_1001EC114(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6, unint64_t *a7)
{
  uint64_t v7;
  uint64_t **v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v41;
  uint64_t *v42;
  _QWORD v43[5];

  v7 = a4;
  v9 = a2;
  v37 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v13 = a4;
    else
      v13 = a4 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaSet.makeIterator()(v13);
    v15 = sub_1000151B0(0, a5, a6);
    v16 = sub_1000EC524(a7, a5, a6);
    result = Set.Iterator.init(_cocoa:)(v43, v14, v15, v16);
    v7 = v43[0];
    v17 = v43[1];
    v18 = v43[2];
    v19 = v43[3];
    v20 = v43[4];
    if (v9)
      goto LABEL_6;
LABEL_39:
    v21 = 0;
    goto LABEL_41;
  }
  v19 = 0;
  v32 = -1 << *(_BYTE *)(a4 + 32);
  v17 = a4 + 56;
  v18 = ~v32;
  v33 = -v32;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  else
    v34 = -1;
  v20 = v34 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v21 = 0;
LABEL_41:
    v35 = v37;
LABEL_44:
    *v35 = v7;
    v35[1] = v17;
    v35[2] = v18;
    v35[3] = v19;
    v35[4] = v20;
    return (uint64_t *)v21;
  }
  if (a3 < 0)
    goto LABEL_51;
  v21 = 0;
  v38 = (unint64_t)(v18 + 64) >> 6;
  v36 = v18;
  while (1)
  {
    if (v7 < 0)
    {
      v28 = __CocoaSet.Iterator.next()(result);
      if (!v28)
        goto LABEL_43;
      v29 = v28;
      v41 = v28;
      v30 = sub_1000151B0(0, a5, a6);
      swift_unknownObjectRetain(v29);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v30, 7);
      v24 = v42;
      result = (uint64_t *)swift_unknownObjectRelease(v29);
      if (!v24)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_10;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v25 >= v38)
    {
      v20 = 0;
      goto LABEL_43;
    }
    v26 = *(_QWORD *)(v17 + 8 * v25);
    if (v26)
      goto LABEL_26;
    v27 = v19 + 2;
    if (v19 + 2 >= v38)
    {
      v20 = 0;
      ++v19;
      goto LABEL_43;
    }
    v26 = *(_QWORD *)(v17 + 8 * v27);
    if (!v26)
    {
      if (v19 + 3 >= v38)
        goto LABEL_47;
      v26 = *(_QWORD *)(v17 + 8 * (v19 + 3));
      if (v26)
      {
        v25 = v19 + 3;
        goto LABEL_26;
      }
      v27 = v19 + 4;
      if (v19 + 4 >= v38)
      {
        v20 = 0;
        v19 += 3;
        goto LABEL_43;
      }
      v26 = *(_QWORD *)(v17 + 8 * v27);
      if (!v26)
      {
        v25 = v19 + 5;
        if (v19 + 5 >= v38)
        {
LABEL_47:
          v20 = 0;
          v19 = v27;
          goto LABEL_43;
        }
        v26 = *(_QWORD *)(v17 + 8 * v25);
        if (!v26)
        {
          v31 = v19 + 6;
          while (v38 != v31)
          {
            v26 = *(_QWORD *)(v17 + 8 * v31++);
            if (v26)
            {
              v25 = v31 - 1;
              goto LABEL_26;
            }
          }
          v20 = 0;
          v19 = v38 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v25 = v27;
LABEL_26:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v25 << 6);
    v19 = v25;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v7 + 48) + 8 * v23);
    v24 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v21;
    *v9++ = v24;
    if (v21 == a3)
    {
      v21 = a3;
LABEL_43:
      v18 = v36;
      v35 = v37;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1001EC40C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.makeIterator()(v8);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v4 = result | 0x8000000000000000;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v12 = 0;
    a3 = 0;
LABEL_48:
    *v7 = v4;
    v7[1] = v9;
    v7[2] = v10;
    v7[3] = v12;
    v7[4] = v11;
    return a3;
  }
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v9 = a4 + 64;
  v25 = ~v24;
  v26 = -v24;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  else
    v27 = -1;
  v11 = v27 & *(_QWORD *)(a4 + 64);
  v10 = v25;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_48;
  }
  if (a3 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v28 = v10;
  v29 = v7;
  v12 = 0;
  v13 = 0;
  v30 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    v19 = v9;
    v20 = __CocoaDictionary.Iterator.nextKey()(result);
    if (!v20)
    {
      a3 = v13;
LABEL_47:
      v10 = v28;
      v7 = v29;
      goto LABEL_48;
    }
    v21 = v20;
    v31 = v20;
    v22 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v16 = v32;
    result = swift_unknownObjectRelease(v21);
    v9 = v19;
    if (!v16)
      goto LABEL_46;
LABEL_11:
    ++v13;
    *v6++ = v16;
    if (v13 == a3)
      goto LABEL_47;
  }
  if (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_10;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v17 >= v30)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v17);
  if (v18)
    goto LABEL_26;
  v12 += 2;
  if (v17 + 1 >= v30)
  {
    v11 = 0;
    v12 = v17;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
  {
LABEL_19:
    v17 = v12;
LABEL_26:
    v11 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
LABEL_10:
    result = (uint64_t)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v15);
    v16 = result;
    if (!result)
      goto LABEL_46;
    goto LABEL_11;
  }
  v23 = v17 + 2;
  if (v17 + 2 >= v30)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v23);
  if (v18)
  {
LABEL_25:
    v17 = v23;
    goto LABEL_26;
  }
  v12 = v17 + 3;
  if (v17 + 3 >= v30)
  {
    v11 = 0;
    v12 = v17 + 2;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
    goto LABEL_19;
  v23 = v17 + 4;
  if (v17 + 4 >= v30)
  {
LABEL_42:
    v11 = 0;
LABEL_46:
    a3 = v13;
    goto LABEL_47;
  }
  v18 = *(_QWORD *)(v9 + 8 * v23);
  if (v18)
    goto LABEL_25;
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v30)
    {
      v11 = 0;
      v12 = v30 - 1;
      goto LABEL_46;
    }
    v18 = *(_QWORD *)(v9 + 8 * v17);
    ++v23;
    if (v18)
      goto LABEL_26;
  }
LABEL_51:
  __break(1u);
  return result;
}

void sub_1001EC6D8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  v34 = a1;
  v35 = v19;
  v20 = -v19;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v22 = v21 & v16;
  if (!a2)
  {
    v23 = 0;
LABEL_38:
    v31 = v34;
    v32 = ~v35;
    *v34 = v38;
    v31[1] = v17;
    v31[2] = v32;
    v31[3] = v23;
    v31[4] = v22;
    return;
  }
  if (!a3)
  {
    v23 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v37 = a3;
  v23 = 0;
  v24 = 0;
  v36 = (unint64_t)(63 - v35) >> 6;
  v33 = v36 - 1;
  if (!v22)
    goto LABEL_9;
LABEL_8:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v26 = v25 | (v23 << 6);
  while (1)
  {
    v30 = *(_QWORD *)(v12 + 72);
    sub_10011FECC(*(_QWORD *)(v38 + 48) + v30 * v26, (uint64_t)v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      goto LABEL_37;
    ++v24;
    sub_10011FF10((uint64_t)v10, (uint64_t)v15);
    sub_10011FF10((uint64_t)v15, a2);
    if (v24 == v37)
      goto LABEL_38;
    a2 += v30;
    if (v22)
      goto LABEL_8;
LABEL_9:
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v36)
      goto LABEL_36;
    v28 = *(_QWORD *)(v17 + 8 * v27);
    if (!v28)
      break;
LABEL_21:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v23 = v27;
  }
  v29 = v23 + 2;
  ++v23;
  if (v27 + 1 >= v36)
    goto LABEL_36;
  v28 = *(_QWORD *)(v17 + 8 * v29);
  if (v28)
    goto LABEL_14;
  v23 = v27 + 1;
  if (v27 + 2 >= v36)
    goto LABEL_36;
  v28 = *(_QWORD *)(v17 + 8 * (v27 + 2));
  if (v28)
  {
    v27 += 2;
    goto LABEL_21;
  }
  v23 = v27 + 2;
  if (v27 + 3 >= v36)
    goto LABEL_36;
  v28 = *(_QWORD *)(v17 + 8 * (v27 + 3));
  if (v28)
  {
    v27 += 3;
    goto LABEL_21;
  }
  v29 = v27 + 4;
  v23 = v27 + 3;
  if (v27 + 4 >= v36)
  {
LABEL_36:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(v10, 1, 1, v11, v13);
    v22 = 0;
LABEL_37:
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100843FD0);
    goto LABEL_38;
  }
  v28 = *(_QWORD *)(v17 + 8 * v29);
  if (v28)
  {
LABEL_14:
    v27 = v29;
    goto LABEL_21;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v36)
    {
      v23 = v33;
      goto LABEL_36;
    }
    v28 = *(_QWORD *)(v17 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_21;
  }
LABEL_41:
  __break(1u);
}

_QWORD *sub_1001EC9E4(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001ECBDC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001ECDD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_1000BAEEC(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_10001A630(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          swift_retain(*v24);
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    sub_10001A630(a4);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001ECFE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FE90, (uint64_t *)&unk_10083FE80);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630((uint64_t *)&unk_10083FE80);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001ED1F4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FD90, &qword_10083DFA8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083DFA8);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001ED408(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FE70, &qword_10083D590);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083D590);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001ED61C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FF40, &qword_10083FF30);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FF30);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_10083FF38, NSPersistentHistoryTransaction_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001ED830(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FEA8, &qword_10083FEA0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FEA0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EDA44(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FF58, &qword_10083FF50);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FF50);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EDC58(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FE68, &qword_10083FE60);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FE60);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EDE6C(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_1000BAEEC(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_10001A630(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EE074(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_1000BAEEC(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_10001A630(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          swift_retain();
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EE27C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FDC0, (uint64_t *)&unk_10083FDB0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630((uint64_t *)&unk_10083FDB0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EE490(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FCF8, &qword_10083FCF0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FCF0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EE6A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FEF8, &qword_10083FEF0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FEF0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EE8B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FF08, &qword_10083DAE0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083DAE0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EEACC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_10083FF20, (uint64_t *)&unk_10083FF10);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630((uint64_t *)&unk_10083FF10);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_100844930, off_1007D6710);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EECE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FEC0, &qword_10083FEB8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FEB8);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_10083FEB0, BMRule_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EEEF4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FFE8, &qword_10083FFE0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FFE0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EF108(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC(&qword_10083FFC8, &qword_10083FFC0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_10083FFC0);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001A630(&qword_100844630);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EF310(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BAEEC((unint64_t *)&unk_100840080, &qword_100840078);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A630(&qword_100840078);
          v13 = sub_1002E691C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000151B0(0, &qword_100840070, INRelevantShortcut_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001EF524(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];

  v7 = type metadata accessor for NSFastEnumerationIterator(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSOrderedSet.makeIterator()(v9);

  if (!a2 || !a3)
  {
LABEL_9:
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
    return;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()(&v14, v7, v12);
    if (v15)
    {
      v13 = 0;
      do
      {
        sub_10001A6CC(&v14, v16);
        sub_10001A6CC(v16, a2);
        if (a3 - 1 == v13)
          goto LABEL_9;
        a2 += 2;
        dispatch thunk of IteratorProtocol.next()(&v14, v7, v12);
        ++v13;
      }
      while (v15);
    }
    sub_10000882C((uint64_t)&v14, (uint64_t *)&unk_10083D5B0);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
  }
}

uint64_t sub_1001EF6B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DD3E8, a1, a2, &unk_100837A60);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x11)
    return 17;
  else
    return v3;
}

uint64_t _s7remindd13REMCDTemplateC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836F90 != -1)
    swift_once(&qword_100836F90, sub_1001E4124);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083FC50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10083FC70);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd13REMCDTemplateC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836F90 != -1)
    swift_once(&qword_100836F90, sub_1001E4124);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083FC50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10083FC70);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s14descr1007E95F9V6FieldsOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14descr1007E95F9V6FieldsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1001EFB58 + 4 * byte_1006AE42F[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1001EFB8C + 4 * byte_1006AE42A[v4]))();
}

uint64_t sub_1001EFB8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EFB94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EFB9CLL);
  return result;
}

uint64_t sub_1001EFBA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EFBB0);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1001EFBB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EFBBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1007E95F9V6FieldsOMa()
{
  return &_s14descr1007E95F9V6FieldsON;
}

unint64_t sub_1001EFBD8(uint64_t a1)
{
  unint64_t result;

  result = sub_1001EFBFC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001EFBFC()
{
  unint64_t result;

  result = qword_1008400A8;
  if (!qword_1008400A8)
  {
    result = swift_getWitnessTable(&unk_1006AE478, &_s14descr1007E95F9V6FieldsON);
    atomic_store(result, (unint64_t *)&qword_1008400A8);
  }
  return result;
}

unint64_t sub_1001EFC40(uint64_t a1)
{
  unint64_t result;

  result = sub_1001EFC64();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001EFC64()
{
  unint64_t result;

  result = qword_1008400B0;
  if (!qword_1008400B0)
  {
    result = swift_getWitnessTable(&unk_1006AE440, &_s14descr1007E95F9V6FieldsON);
    atomic_store(result, (unint64_t *)&qword_1008400B0);
  }
  return result;
}

uint64_t sub_1001EFCA8()
{
  return sub_1000BAEEC(&qword_1008400B8, &qword_1008400C0);
}

unint64_t sub_1001EFCD0()
{
  unint64_t result;

  result = qword_1008400C8;
  if (!qword_1008400C8)
  {
    result = swift_getWitnessTable(&unk_1006AE528, &_s14descr1007E95F9V6FieldsON);
    atomic_store(result, (unint64_t *)&qword_1008400C8);
  }
  return result;
}

uint64_t sub_1001EFD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008400D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008400D0);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1001EFDA8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  void (*v34)(void);
  id v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, __n128);
  uint64_t v50;
  char *v51;
  id v52;
  void (*v53)(char *, uint64_t, __n128);
  void *v54;
  NSString v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  double v63;
  id v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, __n128);
  char *v102;
  _QWORD *v103;
  id v104;
  id v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  void *v117;

  v109 = a7;
  v103 = a6;
  v113 = a4;
  v114 = a5;
  v105 = a3;
  v112 = a2;
  v97 = *v7;
  v9 = sub_10001A630((uint64_t *)&unk_10083F200);
  v10 = __chkstk_darwin(v9);
  v102 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMTitleEmbeddingConfig(0, v10);
  v110 = *(_QWORD *)(v12 - 8);
  v111 = v12;
  __chkstk_darwin(v12);
  v91 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (char *)&v91 - v15;
  v106 = type metadata accessor for URL(0);
  v100 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v99 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v91 - v18;
  v21 = __chkstk_darwin(v20);
  v108 = (char *)&v91 - v22;
  v23 = type metadata accessor for SymmetricKeySize(0, v21);
  __chkstk_darwin(v23);
  v25 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A630(&qword_100840200);
  __chkstk_darwin(v26);
  v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SymmetricKey(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v91 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[2] = a1;
  v107 = v7;
  sub_1000184A8(v112, (uint64_t)(v7 + 3));
  sub_100008868(v113, (uint64_t)v28, &qword_100840200);
  v112 = v30;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29);
  v104 = a1;
  if (v33 == 1)
  {
    static SymmetricKeySize.bits128.getter(a1);
    SymmetricKey.init(size:)(v25);
    sub_10000882C((uint64_t)v28, &qword_100840200);
    v34 = *(void (**)(void))(v112 + 32);
  }
  else
  {
    v34 = *(void (**)(void))(v112 + 32);
    ((void (*)(char *, char *, uint64_t))v34)(v32, v28, v29);
    v35 = a1;
  }
  v36 = v107;
  v96 = (char *)v107 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_salt;
  v34();
  v37 = (char *)v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
  v38 = type metadata accessor for TimeZone(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v95 = v37;
  v40(v37, v114, v38);
  v41 = v105;
  v93 = OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options;
  *(_QWORD *)((char *)v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options) = v105;
  v42 = v109;
  v94 = (uint64_t)v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL;
  sub_100008868(v109, (uint64_t)v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t *)&unk_100839C70);
  sub_1000151B0(0, (unint64_t *)&qword_10083F1E0, REMPaths_ptr);
  v105 = v41;
  v43 = static REMPaths.mlModelURL()();
  v44 = static REMTitleEmbeddingConfig.configFileName.getter(v43);
  v92 = v29;
  v45 = v108;
  URL.appendingPathComponent(_:)(v44, v46);
  v47 = swift_bridgeObjectRelease();
  v48 = v100;
  v49 = *(void (**)(char *, uint64_t, __n128))(v100 + 8);
  v50 = v106;
  v49(v19, v106, v47);
  v51 = v99;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v99, v45, v50);
  v53 = v101;
  v52 = v102;
  REMTitleEmbeddingConfig.init(url:)(v51);
  if (v53)
  {
    swift_errorRelease(v53);
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v110 + 56))(v52, 1, 1, v111);
    sub_10000882C((uint64_t)v52, (uint64_t *)&unk_10083F200);
    v54 = (void *)objc_opt_self(REMError);
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v54, "internalErrorWithDebugDescription:", v55);

    swift_willThrow(v56);
    sub_10000882C(v42, (uint64_t *)&unk_100839C70);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v103);
    v57 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v57(v114, v38);
    sub_10000882C(v113, &qword_100840200);
    ((void (*)(char *, uint64_t))v49)(v45, v50);

    sub_1000178E8(v36[3], v36[4], v36[5], v36[6], v36[7], *((unsigned int *)v36 + 16) | ((unint64_t)*((unsigned __int16 *)v36 + 34) << 32));
    (*(void (**)(char *, uint64_t))(v112 + 8))(v96, v92);
    v57((uint64_t)v95, v38);

    sub_10000882C(v94, (uint64_t *)&unk_100839C70);
    swift_deallocPartialClassInstance(v36, v97, *(unsigned int *)(*v36 + 48), *(unsigned __int16 *)(*v36 + 52), v58);
  }
  else
  {
    v100 = v39;
    v101 = v49;
    v112 = v38;
    v59 = v110;
    v60 = v111;
    (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v110 + 56))(v52, 0, 1, v111);
    v61 = (*(uint64_t (**)(char *, id, uint64_t))(v59 + 32))(v98, v52, v60);
    REMTitleEmbeddingConfig.majorLanguage.getter(v61);
    v62 = (char *)String._bridgeToObjectiveC()();
    *(_QWORD *)&v63 = swift_bridgeObjectRelease().n128_u64[0];
    v64 = v105;
    v65 = objc_msgSend(v105, "includeReminderTitleCategorySentence2Vec", v63);
    v102 = v62;
    if (v65)
    {
      v66 = type metadata accessor for REMSentence2VecTitleEmbedding(0);
      swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
      v62;
      v67 = REMSentence2VecTitleEmbedding.init(lang:)();
      v36 = v107;
      v69 = v67;
      swift_retain();
      v68 = sub_1002C9A90(0, 1, 1, _swiftEmptyArrayStorage);
      v71 = v68[2];
      v70 = v68[3];
      if (v71 >= v70 >> 1)
        v68 = sub_1002C9A90((_QWORD *)(v70 > 1), v71 + 1, 1, v68);
      v116 = v66;
      v117 = &protocol witness table for REMSentence2VecTitleEmbedding;
      *(_QWORD *)&v115 = v69;
      v68[2] = v71 + 1;
      sub_10001BCA8(&v115, (uint64_t)&v68[5 * v71 + 4]);
      swift_release(v69);
      v45 = v108;
      v62 = v102;
    }
    else
    {
      v68 = _swiftEmptyArrayStorage;
      v36 = v107;
    }
    if (objc_msgSend(v64, "includeReminderTitleCategoryUniversalGrammar"))
    {
      v72 = type metadata accessor for REMUniversalGrammarTitleEmbedding(0);
      v73 = v62;
      v74 = REMUniversalGrammarTitleEmbedding.__allocating_init(lang:)();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v68 = sub_1002C9A90(0, v68[2] + 1, 1, v68);
      v77 = v68[2];
      v76 = v68[3];
      if (v77 >= v76 >> 1)
        v68 = sub_1002C9A90((_QWORD *)(v76 > 1), v77 + 1, 1, v68);
      v116 = v72;
      v117 = &protocol witness table for REMUniversalGrammarTitleEmbedding;
      *(_QWORD *)&v115 = v74;
      v68[2] = v77 + 1;
      v107 = v68;
      sub_10001BCA8(&v115, (uint64_t)&v68[5 * v77 + 4]);
      swift_release(v74);
      v45 = v108;
    }
    else
    {
      v107 = v68;
    }
    v78 = v109;
    v79 = v104;
    v80 = v112;
    v81 = (void (*)(char *, uint64_t))v101;
    if (objc_msgSend(v64, "includeReminderTitleCategoryFilteredStopWords"))
    {
      v82 = type metadata accessor for REMFilteredTitleEmbedding(0);
      v83 = v91;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v91, v98, v111);
      v85 = REMFilteredTitleEmbedding.__allocating_init(from:)(v83);
      swift_retain();
      v86 = swift_isUniquelyReferenced_nonNull_native(v107);
      if ((v86 & 1) == 0)
        v107 = sub_1002C9A90(0, v107[2] + 1, 1, v107);
      v88 = v107[2];
      v87 = v107[3];
      if (v88 >= v87 >> 1)
        v107 = sub_1002C9A90((_QWORD *)(v87 > 1), v88 + 1, 1, v107);
      v116 = v82;
      v117 = &protocol witness table for REMFilteredTitleEmbedding;
      *(_QWORD *)&v115 = v85;
      v89 = v107;
      v107[2] = v88 + 1;
      sub_10001BCA8(&v115, (uint64_t)&v89[5 * v88 + 4]);

      swift_release(v85);
      v84 = v89;

      sub_10000882C(v109, (uint64_t *)&unk_100839C70);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v103);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v114, v112);
      sub_10000882C(v113, &qword_100840200);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v111);
      ((void (*)(char *, uint64_t))v101)(v108, v50);
    }
    else
    {

      sub_10000882C(v78, (uint64_t *)&unk_100839C70);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v103);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v114, v80);
      sub_10000882C(v113, &qword_100840200);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v111);
      v81(v45, v50);
      v84 = v107;
    }
    *(_QWORD *)((char *)v36
              + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings) = v84;
  }
  return v36;
}

void sub_1001F0C74(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[48];
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  v13 = objc_msgSend(v12, "includeSystemLanguage", v9);
  v14 = 0;
  v15 = 0;
  if ((_DWORD)v13)
  {
    v16 = static Locale.current.getter(v13);
    v17 = Locale.languageCodeIdentifier.getter(v16);
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v19)
      v14 = v17;
    else
      v14 = 0x6E776F6E6B6E753CLL;
    if (v19)
      v15 = v19;
    else
      v15 = 0xE90000000000003ELL;
  }
  v31 = v14;
  v20 = objc_msgSend(v12, "includeSystemTimezone");
  if (v20)
  {
    v21 = TimeZone.identifier.getter();
    v23 = v22;
    Date.init()(v21);
    v24 = TimeZone.secondsFromGMT(for:)(v6);
    v25 = v6;
    v26 = v21;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v33);
  }
  else
  {
    v24 = 0;
    v26 = 0;
    v23 = 0;
  }
  v27 = v35;
  sub_1000184A8(v2 + 24, (uint64_t)v34);
  sub_100354DE4((uint64_t)v34, (uint64_t)sub_1001F69B4, v2);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v31;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = v29;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v24;
    *(_BYTE *)(a1 + 48) = v20 ^ 1;
  }
}

void sub_1001F0E70(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  sub_10034B07C(3, 0, 7);
  v8 = v7;
  v9 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v10, v9);
  if (v3)
  {

  }
  else
  {
    v13 = v12;

    swift_retain();
    v14 = a1;
    v15 = sub_1001F9010(v13, a2, v14);
    swift_bridgeObjectRelease();

    swift_release(a2);
    *a3 = v15;
  }
}

void sub_1001F0FD8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  double v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v8 = *(void **)(v3 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  if (objc_msgSend(v8, "includeListNames")
    && (v9 = objc_msgSend(a1, "name")) != 0)
  {
    v10 = v9;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v32 = v11;

  }
  else
  {
    v28 = 0;
    v32 = 0;
  }
  if (objc_msgSend(v8, "includeListNameFuzzedEmbeddings"))
  {
    v13 = objc_msgSend(a1, "name");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = sub_1001F121C(v15, v17);
    v30 = v20;
    v31 = v19;
    v29 = v21;
    *(_QWORD *)&v12 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v18 = 0;
    v30 = 0;
    v31 = 0;
    v29 = 0;
  }
  if (objc_msgSend(v8, "includeListGroupInfo", v12))
  {
    v22 = objc_msgSend(a1, "isShared");
    v23 = objc_msgSend(a1, "isGroup");
  }
  else
  {
    v23 = 2;
    v22 = 2;
  }
  v24 = sub_1004A6A14((uint64_t)a2, (uint64_t)objc_msgSend(v8, "creationDateWithinDays"));
  if (v33)
  {
    swift_bridgeObjectRelease();
    sub_1001F92A0((uint64_t)v18, v31, v30, v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = (uint64_t)v24;
    swift_retain();
    v26 = a2;
    v27 = sub_1001F8B54(v25, v4, (uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_release(v4);

    *(_BYTE *)a3 = v22;
    *(_BYTE *)(a3 + 1) = v23;
    *(_QWORD *)(a3 + 8) = v28;
    *(_QWORD *)(a3 + 16) = v32;
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 40) = v30;
    *(_QWORD *)(a3 + 48) = v29;
    *(_QWORD *)(a3 + 56) = v27;
  }
}

id sub_1001F121C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  id v24;
  NSString v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString *v30;
  Class isa;
  id v32;
  NSString v33;
  unint64_t countAndFlagsBits;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  if (a2)
  {
    v50 = v10;
    v47 = v11;
    v14 = (void *)objc_opt_self(NLLanguageRecognizer);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "dominantLanguageForString:", v15);

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLLanguageUndetermined);
      if (v17 == v20 && v19 == v21)
      {
        swift_bridgeObjectRelease_n(v19, 2);
      }
      else
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
          goto LABEL_14;
      }

    }
    v25 = sub_1001F3B78();
    if (!v25)
      return 0;
    v16 = v25;
LABEL_14:
    v45 = v13;
    v46 = v2;
    v48 = *(id *)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
    v49 = objc_autoreleasePoolPush();
    v26 = String.lowercased()();
    v27 = sub_10001A630(&qword_1008447C0);
    v28 = swift_allocObject(v27, 40, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v28 + 32) = NLTagSchemeLexicalClass;
    v29 = objc_allocWithZone((Class)NLTagger);
    type metadata accessor for NLTagScheme(0);
    v30 = NLTagSchemeLexicalClass;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(v29, "initWithTagSchemes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "setString:", v33);

    countAndFlagsBits = ((unint64_t)v26._object >> 56) & 0xF;
    if (((uint64_t)v26._object & 0x2000000000000000) == 0)
      countAndFlagsBits = v26._countAndFlagsBits;
    v35 = 11;
    if ((((unint64_t)v26._object >> 60) & ((v26._countAndFlagsBits & 0x800000000000000) == 0)) == 0)
      v35 = 7;
    v36 = NLTagger.tags(in:unit:scheme:options:)(15, v35 | (countAndFlagsBits << 16), 0, v30, 14);
    v37 = v48;
    swift_bridgeObjectRetain(v26._object);
    v38 = sub_1001F7EE4(v36, v37, v26._countAndFlagsBits, (uint64_t)v26._object);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n(v26._object, 2);
    objc_autoreleasePoolPop(v49);
    if (v38[2])
    {
      sub_100008868(v46 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t)v6, (uint64_t *)&unk_100839C70);
      v39 = v50;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v50) == 1)
      {
        sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C70);
        v24 = objc_msgSend((id)objc_opt_self(NLEmbedding), "wordEmbeddingForLanguage:", v16);
        if (v24)
        {
LABEL_21:
          v40 = v24;
          v24 = sub_1001F8544((uint64_t)v38, v40);
          objc_msgSend(v40, "revision", swift_bridgeObjectRelease().n128_f64[0]);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

          return v24;
        }
      }
      else
      {
        v41 = v45;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v6, v39);
        sub_1000151B0(0, &qword_1008401D8, NLEmbedding_ptr);
        v42 = v47;
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v47, v41, v39);
        v24 = sub_1001F3CA0(v42);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v41, v39);
        if (v24)
          goto LABEL_21;
      }
      swift_bridgeObjectRelease();

      return v24;
    }
    swift_bridgeObjectRelease();

    return 0;
  }
  return 0;
}

void sub_1001F16EC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t *v91;
  char **v92;
  id v93;
  void *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t *v111;
  id v112;
  void *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  char *v126;
  uint64_t *v127;
  id v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void (*v132)(uint64_t, char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  uint64_t *v142;
  id v143;
  void *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  id v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t *v153;
  id v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  id v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  id v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  unsigned int v173;
  id v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  id v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  BOOL v193;
  unsigned int v194;
  uint64_t v195;
  id v196;
  _QWORD *v197;
  id v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  id v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  id v216;
  void *v217;
  id v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  void *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  id v233;
  void *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  id v238;
  double v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  id v245;
  id v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  char *v252;
  uint64_t *v253;
  char *v254;
  uint64_t *v255;
  char *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  void (*v268)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t *v273;
  char *v274;
  _QWORD *v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void (*v292)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  id v296;
  char v297[8];
  void *v298;
  uint64_t v299;

  v296 = a1;
  v3 = sub_10001A630(&qword_1008401F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v250 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = type metadata accessor for Calendar.Component(0);
  v284 = *(_QWORD *)(v285 - 8);
  __chkstk_darwin(v285);
  v283 = (char *)&v250 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = type metadata accessor for Calendar(0);
  v281 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v280 = (char *)&v250 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v250 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v270 = (char *)&v250 - v12;
  __chkstk_darwin(v13);
  v266 = (char *)&v250 - v14;
  __chkstk_darwin(v15);
  v274 = (char *)&v250 - v16;
  __chkstk_darwin(v17);
  v265 = (char *)&v250 - v18;
  __chkstk_darwin(v19);
  v264 = (char *)&v250 - v20;
  __chkstk_darwin(v21);
  v263 = (char *)&v250 - v22;
  v23 = type metadata accessor for Date(0);
  __chkstk_darwin(v23);
  v256 = (char *)&v250 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v254 = (char *)&v250 - v26;
  __chkstk_darwin(v27);
  v287 = (char *)&v250 - v28;
  v30 = __chkstk_darwin(v29);
  v252 = (char *)&v250 - v31;
  v290 = v32;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56);
  v33(a2, 1, 1, v23, v30);
  v34 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  v35 = a2 + v34[5];
  *(_QWORD *)v35 = 0;
  v251 = (uint64_t *)v35;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = a2 + v34[6];
  *(_QWORD *)v36 = 0;
  v253 = (uint64_t *)v36;
  *(_BYTE *)(v36 + 8) = 1;
  v37 = a2 + v34[7];
  *(_QWORD *)v37 = 0;
  v255 = (uint64_t *)v37;
  *(_BYTE *)(v37 + 8) = 1;
  v38 = a2 + v34[8];
  *(_QWORD *)v38 = 0;
  v257 = (uint64_t *)v38;
  *(_BYTE *)(v38 + 8) = 1;
  v39 = (_QWORD *)(a2 + v34[9]);
  *v39 = 0;
  v39[1] = 0;
  v275 = v39;
  v40 = (uint64_t *)(a2 + v34[10]);
  *(_OWORD *)v40 = 0u;
  *((_OWORD *)v40 + 1) = 0u;
  v276 = v40;
  v41 = (uint64_t *)(a2 + v34[11]);
  *v41 = 0;
  v41[1] = 0;
  v42 = (uint64_t *)(a2 + v34[12]);
  *v42 = 0;
  v42[1] = 0;
  v295 = v42;
  v43 = (uint64_t *)(a2 + v34[13]);
  *v43 = 0;
  v43[1] = 0;
  v288 = v43;
  v44 = (uint64_t *)(a2 + v34[14]);
  *v44 = 0;
  v44[1] = 0;
  v273 = v44;
  v45 = a2 + v34[15];
  v46 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
  v272 = v45;
  v269 = v46;
  v268 = v47;
  ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v45, 1, 1);
  v267 = a2 + v34[16];
  v291 = v23;
  v48 = v33;
  ((void (*)(void))v33)();
  *(_QWORD *)(a2 + v34[17]) = _swiftEmptyArrayStorage;
  v277 = v34[18];
  *(_BYTE *)(a2 + v277) = 2;
  v49 = a2 + v34[19];
  *(_QWORD *)v49 = 0;
  v278 = (_QWORD *)v49;
  *(_BYTE *)(v49 + 8) = 1;
  v50 = (_QWORD *)(a2 + v34[20]);
  *v50 = 0;
  v50[1] = 0;
  v51 = (_QWORD *)(a2 + v34[21]);
  *v51 = 0;
  v51[1] = 0;
  v52 = (uint64_t *)(a2 + v34[22]);
  *v52 = 0;
  v52[1] = 0;
  v279 = v52;
  v258 = v34[23];
  *(_QWORD *)(a2 + v258) = 0;
  v259 = v34[24];
  *(_BYTE *)(a2 + v259) = 2;
  v261 = v34[25];
  *(_BYTE *)(a2 + v261) = 2;
  v262 = v34[26];
  *(_BYTE *)(a2 + v262) = 2;
  v53 = v34[27];
  v293 = a2;
  v260 = v53;
  *(_BYTE *)(a2 + v53) = 2;
  v54 = objc_msgSend(v296, "title");
  v286 = v5;
  v271 = v10;
  v292 = v33;
  if (!v54)
    goto LABEL_19;
  v55 = v54;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v58 = v57;

  v59 = *(_QWORD *)(v294
                  + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings);
  v60 = *(_QWORD *)(v59 + 16);
  if (!v60)
    goto LABEL_18;
  v61 = v59 + 32;
  v250 = *(_QWORD *)(v294
                   + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings);
  swift_bridgeObjectRetain(v59);
  do
  {
    sub_100018618(v61, (uint64_t)&v298);
    sub_100018618((uint64_t)&v298, (uint64_t)v297);
    v69 = sub_10001A630(&qword_1008440C0);
    v70 = type metadata accessor for REMSentence2VecTitleEmbedding(0);
    if (swift_dynamicCast(&v299, v297, v69, v70, 6))
    {
      v62 = v299;
      v63 = swift_bridgeObjectRetain(v58);
      v64 = REMSentence2VecTitleEmbedding.vector(for:)(v56, v58, v63);
      v65 = swift_bridgeObjectRelease();
      v66 = REMSentence2VecTitleEmbedding.closestWord(for:)(v64, v65);
      v68 = v67;
      swift_release(v62);
      swift_release(v64);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v298);
      swift_bridgeObjectRelease();
      *v41 = v66;
      v41[1] = v68;
      goto LABEL_5;
    }
    sub_100018618((uint64_t)&v298, (uint64_t)v297);
    v71 = type metadata accessor for REMUniversalGrammarTitleEmbedding(0);
    if (swift_dynamicCast(&v299, v297, v69, v71, 6))
    {
      v72 = v299;
      v73 = swift_bridgeObjectRetain(v58);
      v74 = REMUniversalGrammarTitleEmbedding.vector(for:)(v56, v58, v73);
      v75 = swift_bridgeObjectRelease();
      v76 = REMUniversalGrammarTitleEmbedding.closestWord(for:)(v74, v75);
      v78 = v77;
      swift_release(v72);
      swift_release(v74);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v298);
      v79 = v295;
LABEL_11:
      swift_bridgeObjectRelease();
      *v79 = v76;
      v79[1] = v78;
      goto LABEL_5;
    }
    sub_100018618((uint64_t)&v298, (uint64_t)v297);
    v80 = type metadata accessor for REMFilteredTitleEmbedding(0);
    if (swift_dynamicCast(&v299, v297, v69, v80, 6))
    {
      v81 = v299;
      v82 = swift_bridgeObjectRetain(v58);
      v83 = REMFilteredTitleEmbedding.vector(for:)(v56, v58, v82);
      v84 = swift_bridgeObjectRelease();
      v76 = REMFilteredTitleEmbedding.closestWord(for:)(v83, v84);
      v78 = v85;
      swift_release(v81);
      swift_release(v83);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v298);
      v79 = v288;
      goto LABEL_11;
    }
    if (qword_100836F98 != -1)
      swift_once(&qword_100836F98, sub_1001EFD18);
    v86 = type metadata accessor for Logger(0);
    v87 = sub_10001AAA8(v86, (uint64_t)qword_1008400D0);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "DES unrecognized embedding", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v298);
LABEL_5:
    v61 += 40;
    --v60;
  }
  while (v60);
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  v48 = v292;
LABEL_19:
  v91 = *(uint64_t **)(v294 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  v92 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  if (!objc_msgSend(v91, "includeDayOfWeek"))
    goto LABEL_37;
  v93 = objc_msgSend(v296, "creationDate");
  if (v93)
  {
    v94 = v93;
    v95 = v287;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v93);

    v96 = v290;
    v97 = v291;
    v98 = *(void (**)(char *, char *, uint64_t))(v290 + 32);
    v99 = (uint64_t)v263;
    v98(v263, v95, v291);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v48)(v99, 0, 1, v97);
    v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v99, 1, v97);
    v101 = (uint64_t)v265;
    if (v100 != 1)
    {
      v102 = v252;
      v103 = ((uint64_t (*)(char *, uint64_t, uint64_t))v98)(v252, v99, v97);
      v104 = v280;
      static Calendar.current.getter(v103);
      v105 = v284;
      v106 = v283;
      v107 = v285;
      (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v283, enum case for Calendar.Component.weekday(_:), v285);
      v108 = Calendar.component(_:from:)(v106, v102);
      v109 = *(void (**)(char *, uint64_t))(v105 + 8);
      v48 = v292;
      v109(v106, v107);
      (*(void (**)(char *, uint64_t))(v281 + 8))(v104, v282);
      v110 = v102;
      v92 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      (*(void (**)(char *, uint64_t))(v290 + 8))(v110, v97);
      v111 = v251;
      *v251 = v108;
      *((_BYTE *)v111 + 8) = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v99 = (uint64_t)v263;
    v97 = v291;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v48)(v263, 1, 1, v291);
    v101 = (uint64_t)v265;
  }
  sub_10000882C(v99, (uint64_t *)&unk_1008380D0);
LABEL_25:
  v112 = objc_msgSend(v296, "completionDate");
  if (v112)
  {
    v113 = v112;
    v114 = v287;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v112);

    v115 = v290;
    v116 = *(void (**)(char *, char *, uint64_t))(v290 + 32);
    v117 = (uint64_t)v264;
    v116(v264, v114, v97);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v48)(v117, 0, 1, v97);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v117, 1, v97) != 1)
    {
      v118 = v254;
      v119 = ((uint64_t (*)(char *, uint64_t, uint64_t))v116)(v254, v117, v97);
      v120 = v280;
      static Calendar.current.getter(v119);
      v121 = v284;
      v122 = v283;
      v123 = v285;
      (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v283, enum case for Calendar.Component.weekday(_:), v285);
      v124 = Calendar.component(_:from:)(v122, v118);
      v125 = *(void (**)(char *, uint64_t))(v121 + 8);
      v48 = v292;
      v125(v122, v123);
      (*(void (**)(char *, uint64_t))(v281 + 8))(v120, v282);
      v126 = v118;
      v92 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      (*(void (**)(char *, uint64_t))(v290 + 8))(v126, v97);
      v127 = v253;
      *v253 = v124;
      *((_BYTE *)v127 + 8) = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v117 = (uint64_t)v264;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v48)(v264, 1, 1, v97);
  }
  sub_10000882C(v117, (uint64_t *)&unk_1008380D0);
LABEL_30:
  v128 = objc_msgSend(v296, "dueDate");
  if (!v128)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v101, 1, 1, v97);
    goto LABEL_34;
  }
  v129 = v128;
  v130 = v287;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v128);

  v131 = v290;
  v132 = *(void (**)(uint64_t, char *, uint64_t))(v290 + 32);
  v132(v101, v130, v97);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v48)(v101, 0, 1, v97);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v101, 1, v97) == 1)
  {
LABEL_34:
    sub_10000882C(v101, (uint64_t *)&unk_1008380D0);
    goto LABEL_35;
  }
  v133 = v256;
  v134 = ((uint64_t (*)(char *, uint64_t, uint64_t))v132)(v256, v101, v97);
  v135 = v280;
  static Calendar.current.getter(v134);
  v136 = v284;
  v137 = v283;
  v138 = v285;
  (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v283, enum case for Calendar.Component.weekday(_:), v285);
  v139 = Calendar.component(_:from:)(v137, v133);
  v140 = *(void (**)(char *, uint64_t))(v136 + 8);
  v48 = v292;
  v140(v137, v138);
  (*(void (**)(char *, uint64_t))(v281 + 8))(v135, v282);
  v141 = v133;
  v92 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  (*(void (**)(char *, uint64_t))(v290 + 8))(v141, v97);
  v142 = v255;
  *v255 = v139;
  *((_BYTE *)v142 + 8) = 0;
LABEL_35:
  v143 = objc_msgSend(v296, "displayDate");
  if (v143)
  {
    v144 = v143;
    v145 = v280;
    static Calendar.current.getter(v143);
    v146 = v284;
    v147 = v283;
    v148 = v285;
    (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v283, enum case for Calendar.Component.weekday(_:), v285);
    v149 = objc_msgSend(v144, "date");
    v150 = v287;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v149);

    v151 = Calendar.component(_:from:)(v147, v150);
    (*(void (**)(char *, uint64_t))(v290 + 8))(v150, v291);
    v152 = *(void (**)(char *, uint64_t))(v146 + 8);
    v48 = v292;
    v152(v147, v148);
    (*(void (**)(char *, uint64_t))(v281 + 8))(v145, v282);
    v153 = v257;
    *v257 = v151;
    *((_BYTE *)v153 + 8) = 0;
  }
LABEL_37:
  if (objc_msgSend(v91, "includeDates"))
  {
    v154 = objc_msgSend(v296, v92[74]);
    if (v154)
    {
      v155 = v154;
      v156 = (uint64_t)v266;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v154);

      v157 = 0;
    }
    else
    {
      v157 = 1;
      v156 = (uint64_t)v266;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v156, v157, 1, v291);
    v158 = v274;
    sub_1001F2D4C(v156, v274);
    sub_10000882C(v156, (uint64_t *)&unk_1008380D0);
    sub_1000BABD0((uint64_t)v158, v293, (uint64_t *)&unk_1008380D0);
  }
  if (objc_msgSend(v91, "includeReminderTitles"))
  {
    v159 = objc_msgSend(v296, "title");
    if (v159)
    {
      v160 = v159;
      v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
      v163 = v162;

    }
    else
    {
      v161 = 0;
      v163 = 0;
    }
    v164 = v273;
    swift_bridgeObjectRelease();
    *v164 = v161;
    v164[1] = v163;
  }
  if (objc_msgSend(v91, "includeReminderTitleSaltedHash"))
  {
    v165 = objc_msgSend(v296, "title");
    v166 = v165;
    if (v165)
    {
      v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v169 = v168;

      v166 = (void *)String.base64EncodedHMACString(using:)(v294 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_salt, v167, v169);
      v171 = v170;
      swift_bridgeObjectRelease();
    }
    else
    {
      v171 = 0;
    }
    v172 = v275;
    swift_bridgeObjectRelease();
    *v172 = v166;
    v172[1] = v171;
  }
  v173 = objc_msgSend(v91, "includeReminderTitleFuzzedEmbeddings");
  v295 = v91;
  if (v173)
  {
    v174 = objc_msgSend(v296, "title");
    if (v174)
    {
      v175 = v174;
      v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
      v178 = v177;

    }
    else
    {
      v176 = 0;
      v178 = 0;
    }
    v179 = sub_1001F121C(v176, v178);
    v181 = v180;
    v183 = v182;
    v185 = v184;
    swift_bridgeObjectRelease();
    v186 = v276;
    sub_1001F92A0(*v276, v276[1], v276[2], v276[3]);
    *v186 = (uint64_t)v179;
    v186[1] = v181;
    v186[2] = v183;
    v186[3] = v185;
    v91 = v295;
  }
  if (objc_msgSend(v91, "includeDates"))
  {
    v187 = objc_msgSend(v296, "completionDate");
    if (v187)
    {
      v188 = v187;
      v189 = (uint64_t)v271;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v187);

      v190 = 0;
    }
    else
    {
      v190 = 1;
      v189 = (uint64_t)v271;
    }
    v191 = v270;
    v192 = v267;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v292)(v189, v190, 1, v291);
    sub_1001F2D4C(v189, v191);
    sub_10000882C(v189, (uint64_t *)&unk_1008380D0);
    sub_1000BABD0((uint64_t)v191, v192, (uint64_t *)&unk_1008380D0);
  }
  if (objc_msgSend(v91, "includeIsFlagged"))
  {
    v193 = objc_msgSend(v296, "flagged") != 0;
    *(_BYTE *)(v293 + v277) = v193;
  }
  v194 = objc_msgSend(v91, "includePriority");
  v195 = (uint64_t)v286;
  if (v194)
  {
    v196 = objc_msgSend(v296, "priority");
    v197 = v278;
    *v278 = v196;
    *((_BYTE *)v197 + 8) = 0;
  }
  if (objc_msgSend(v91, "includeDates"))
  {
    v198 = objc_msgSend(v296, "displayDate");
    v199 = v293;
    if (v198)
    {
      v298 = v198;
      v200 = v198;
      v201 = v289;
      sub_1001F2F00(&v298, v195);
      v289 = v201;

      v268(v195, 0, 1, v269);
    }
    else
    {
      v268(v195, 1, 1, v269);
    }
    sub_1000BABD0(v195, v272, &qword_1008401F0);
  }
  else
  {
    v199 = v293;
  }
  if (objc_msgSend(v91, "includeRecurrenceInfo"))
  {
    v202 = objc_msgSend(v296, "recurrenceRules");
    v203 = sub_1001F8664((uint64_t)v202);
    v205 = v204;

    v206 = v279;
    swift_bridgeObjectRelease();
    *v206 = v203;
    v206[1] = v205;
  }
  if (!objc_msgSend(v91, "includeAttachmentUTIs"))
    goto LABEL_99;
  v207 = objc_msgSend(v296, "attachments");
  if (!v207)
  {
    v215 = 0;
    goto LABEL_98;
  }
  v208 = v207;
  v298 = v207;
  v209 = sub_1000151B0(0, (unint64_t *)&unk_10083AE20, off_1007D6698);
  v210 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v211 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v212 = Sequence.elements<A>(ofType:)(v209, v210, v209, v211);

  if ((unint64_t)v212 >> 62)
  {
    if (v212 < 0)
      v226 = v212;
    else
      v226 = v212 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v212);
    v213 = _CocoaArrayWrapper.endIndex.getter(v226);
    v91 = v295;
    if (!v213)
      goto LABEL_96;
LABEL_78:
    if (v213 >= 1)
    {
      v214 = 0;
      v215 = _swiftEmptyArrayStorage;
      do
      {
        if ((v212 & 0xC000000000000001) != 0)
          v216 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v214, v212);
        else
          v216 = *(id *)(v212 + 8 * v214 + 32);
        v217 = v216;
        v218 = objc_msgSend(v216, "uti");
        if (v218)
        {
          v219 = v218;
          v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v218);
          v222 = v221;

          if ((swift_isUniquelyReferenced_nonNull_native(v215) & 1) == 0)
            v215 = sub_1002C8224(0, v215[2] + 1, 1, v215);
          v224 = v215[2];
          v223 = v215[3];
          if (v224 >= v223 >> 1)
            v215 = sub_1002C8224((_QWORD *)(v223 > 1), v224 + 1, 1, v215);
          v215[2] = v224 + 1;
          v225 = &v215[2 * v224];
          v225[4] = v220;
          v225[5] = v222;
          v91 = v295;
        }
        else
        {

        }
        ++v214;
      }
      while (v213 != v214);
      goto LABEL_97;
    }
    __break(1u);
  }
  else
  {
    v213 = *(_QWORD *)((v212 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v212);
    v91 = v295;
    if (v213)
      goto LABEL_78;
LABEL_96:
    v215 = _swiftEmptyArrayStorage;
LABEL_97:
    swift_bridgeObjectRelease_n(v212, 2);
    v199 = v293;
LABEL_98:
    v227 = v258;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v199 + v227) = v215;
LABEL_99:
    if (objc_msgSend(v91, "includeRemindMeWhenMessagingInfo"))
    {
      v228 = objc_msgSend(v296, "contactHandles");
      v229 = v228;
      if (v228)
      {
        v230 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v228);
        v232 = v231;

        sub_1000A71C8(v230, v232);
      }
      *(_BYTE *)(v199 + v259) = v229 != 0;
    }
    if (objc_msgSend(v91, "includeUserActivityInfo"))
    {
      v233 = objc_msgSend(v296, "userActivity");
      v234 = v233;
      if (v233)
      {
        v235 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v233);
        v237 = v236;

        sub_1000A71C8(v235, v237);
      }
      *(_BYTE *)(v199 + v260) = v234 != 0;
    }
    if (objc_msgSend(v91, "includeSubtaskInfo"))
    {
      v238 = objc_msgSend(v296, "children");
      if (v238)
      {
        v240 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
        v241 = sub_1000E51DC((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708, (uint64_t)&protocol conformance descriptor for NSObject);
        v242 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v238, v240, v241);

        if ((v242 & 0xC000000000000001) != 0)
        {
          if (v242 < 0)
            v243 = v242;
          else
            v243 = v242 & 0xFFFFFFFFFFFFFF8;
          v238 = (id)__CocoaSet.count.getter(v243);
        }
        else
        {
          v238 = *(id *)(v242 + 16);
        }
        *(_QWORD *)&v239 = swift_bridgeObjectRelease().n128_u64[0];
      }
      *(_BYTE *)(v199 + v261) = (uint64_t)v238 > 0;
      v244 = objc_msgSend(v296, "parentReminder", v239);
      v245 = v244;
      if (v244)

      *(_BYTE *)(v199 + v262) = v245 != 0;
    }
    if (objc_msgSend(v91, "includeAlarmDates"))
    {
      v246 = objc_msgSend(v296, "alarms");
      if (v246)
      {
        v247 = v246;
        v248 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
        v249 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v247, v248);

      }
      else
      {
        v249 = 0;
      }
      sub_1001F3178(v199, v249);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1001F2D4C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  id v17;
  double v18;
  double v19;
  char *v20;
  char *v21;
  uint64_t v23;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - v13;
  sub_100008868(a1, (uint64_t)v7, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
    v15 = 1;
  }
  else
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v16(v14, v7, v8);
    v17 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options), "dateResolutionInSeconds");
    if (v17)
    {
      v18 = (double)(unint64_t)v17;
      v19 = Date.timeIntervalSinceReferenceDate.getter(v17);
      Date.init(timeIntervalSinceReferenceDate:)(floor(v19 / v18) * v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      v20 = a2;
      v21 = v11;
    }
    else
    {
      v20 = a2;
      v21 = v14;
    }
    v16(v20, v21, v8);
    v15 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v15, 1, v8);
}

uint64_t sub_1001F2F00@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;

  v4 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - v8;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v29 - v15;
  v17 = *a1;
  v18 = objc_msgSend(v17, "date", v14);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 0, 1, v19);
  sub_1001F2D4C((uint64_t)v12, v16);
  sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
  v20 = objc_msgSend(v17, "timeZone");
  if (v20)
  {
    v21 = v20;
    static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 0, 1, v22);
  }
  else
  {
    v22 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
  }
  sub_1000A5CA8((uint64_t)v6, (uint64_t)v9, &qword_1008401F8);
  type metadata accessor for TimeZone(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v22) == 1)
  {
    sub_10000882C((uint64_t)v9, &qword_1008401F8);
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v24 = TimeZone.identifier.getter();
    v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
  }
  sub_1000A5CA8((uint64_t)v16, a2, (uint64_t *)&unk_1008380D0);
  result = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v28 = (uint64_t *)(a2 + *(int *)(result + 20));
  *v28 = v24;
  v28[1] = v25;
  return result;
}

void sub_1001F3178(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  char *v53;
  Class isa;
  void (*v55)(char *, uint64_t);
  Class v56;
  id v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v103 = a1;
  v3 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  __chkstk_darwin(v6);
  v95 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v94 = (uint64_t)&v84 - v9;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v87 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v93 = (char *)&v84 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v84 - v15;
  v17 = type metadata accessor for DateComponents(0);
  v99 = *(_QWORD *)(v17 - 8);
  v100 = v17;
  __chkstk_darwin(v17);
  v86 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v98 = (char *)&v84 - v20;
  v21 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v21 - 8);
  v102 = v21;
  __chkstk_darwin(v21);
  v92 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v91 = (char *)&v84 - v24;
  if (a2)
    v25 = a2;
  else
    v25 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v83 = v25;
    else
      v83 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v25);
    v26 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_6;
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
  v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v26)
    goto LABEL_37;
LABEL_6:
  if (v26 >= 1)
  {
    v97 = v16;
    v85 = v5;
    v27 = 0;
    v96 = v90 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
    v105 = v25;
    v106 = v25 & 0xC000000000000001;
    v104 = v26;
    while (1)
    {
      if (v106)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
      else
        v39 = *(id *)(v25 + 8 * v27 + 32);
      v40 = v39;
      v41 = objc_msgSend(v39, "trigger");
      v42 = objc_opt_self(REMAlarmLocationTrigger);
      v43 = swift_dynamicCastObjCClass(v41, v42);
      if (v43)
      {
        v44 = (void *)v43;
        v45 = v41;
        v46 = (unint64_t)objc_msgSend(v44, "proximity");
        if (v46 <= 2)
        {
          v28 = *(_QWORD *)&aNone_3[8 * v46];
          v29 = qword_1006AEFF8[v46];
        }
        else
        {
          v29 = 0xE90000000000003ELL;
          v28 = 0x6E776F6E6B6E753CLL;
        }
        v30 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
        v31 = v103;
        v32 = (uint64_t *)(v103 + *(int *)(v30 + 84));
        *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
        *v32 = v28;
        v32[1] = v29;
        v34 = objc_msgSend(v44, "structuredLocation", v33);
        v35 = sub_1001F87E8(v34);
        v37 = v36;

        v38 = (uint64_t *)(v31 + *(int *)(v30 + 80));
        swift_bridgeObjectRelease();
        *v38 = v35;
        v38[1] = v37;
      }
      else
      {
        v47 = objc_opt_self(REMAlarmDateTrigger);
        v48 = swift_dynamicCastObjCClass(v41, v47);
        if (!v48)
        {

          goto LABEL_11;
        }
        v49 = (void *)v48;
        v50 = (void *)objc_opt_self(NSDateComponents);
        v51 = v41;
        v52 = objc_msgSend(v49, "dateComponents");
        v53 = v98;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v52);

        isa = DateComponents._bridgeToObjectiveC()().super.isa;
        v55 = *(void (**)(char *, uint64_t))(v99 + 8);
        v55(v53, v100);
        v56 = TimeZone._bridgeToObjectiveC()().super.isa;
        v57 = objc_msgSend(v50, "rem_dateWithDateComponents:timeZone:", isa, v56);

        if (v57)
        {
          v58 = v92;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

          v59 = v101;
          v60 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
          v61 = (uint64_t)v97;
          v62 = v58;
          v63 = v102;
          v60(v97, v62, v102);
          v64 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56);
          v64(v61, 0, 1, v63);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v61, 1, v63) != 1)
          {
            v65 = v91;
            v66 = v102;
            v60(v91, (char *)v61, v102);
            v67 = (uint64_t)v87;
            (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v87, v65, v66);
            v64(v67, 0, 1, v66);
            sub_1001F2D4C(v67, v93);
            sub_10000882C(v67, (uint64_t *)&unk_1008380D0);
            v68 = objc_msgSend(v49, "dateComponents");
            v69 = v86;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v68);

            v70 = (uint64_t)v85;
            DateComponents.timeZone.getter(v71);
            v55(v69, v100);
            v72 = type metadata accessor for TimeZone(0);
            v73 = *(_QWORD *)(v72 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v70, 1, v72) == 1)
            {
              sub_10000882C(v70, &qword_1008401F8);
              v74 = 0;
              v75 = 0;
            }
            else
            {
              v74 = TimeZone.identifier.getter();
              v75 = v76;
              (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v70, v72);
            }
            v77 = v94;
            sub_1000A5CA8((uint64_t)v93, v94, (uint64_t *)&unk_1008380D0);
            v78 = (uint64_t *)(v77 + *(int *)(v89 + 20));
            *v78 = v74;
            v78[1] = v75;
            sub_1000151E8(v77, v95, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            v79 = *(int *)(type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0) + 68);
            v80 = *(_QWORD *)(v103 + v79);
            if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
              v80 = sub_1002C9CFC(0, *(_QWORD *)(v80 + 16) + 1, 1, v80);
            v26 = v104;
            v25 = v105;
            v82 = *(_QWORD *)(v80 + 16);
            v81 = *(_QWORD *)(v80 + 24);
            if (v82 >= v81 >> 1)
              v80 = sub_1002C9CFC(v81 > 1, v82 + 1, 1, v80);
            *(_QWORD *)(v80 + 16) = v82 + 1;
            sub_1000B8680(v95, v80+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v82, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);

            *(_QWORD *)(v103 + v79) = v80;
            sub_10001C744(v94, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            (*(void (**)(char *, uint64_t))(v101 + 8))(v91, v102);
            goto LABEL_11;
          }
        }
        else
        {
          v61 = (uint64_t)v97;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v97, 1, 1, v102);
        }

        sub_10000882C(v61, (uint64_t *)&unk_1008380D0);
      }
      v26 = v104;
      v25 = v105;
LABEL_11:
      if (v26 == ++v27)
        goto LABEL_37;
    }
  }
  __break(1u);
}

void sub_1001F3928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Swift::String v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  _BYTE v23[104];

  if (a2)
  {
    v15 = String.lowercased()();
    v16 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v16, v23);
    *(_QWORD *)(inited + 32) = a3;
    *(_OWORD *)(inited + 16) = xmmword_1006A5130;
    *(_QWORD *)(inited + 40) = a4;
    *(_QWORD *)(inited + 48) = a5;
    *(_QWORD *)(inited + 56) = a6;
    *(_QWORD *)(inited + 64) = a7;
    *(_QWORD *)(inited + 72) = a8;
    *(_QWORD *)(inited + 80) = a9;
    *(_QWORD *)(inited + 88) = a10;
    v22 = v15;
    v20 = a3;
    v21 = a4;
    v18 = sub_1000E525C();
    swift_bridgeObjectRetain_n(a4, 2);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    if ((StringProtocol.contains<A>(_:)(&v20, &type metadata for String, &type metadata for String, v18, v18) & 1) != 0)
      goto LABEL_8;
    swift_bridgeObjectRelease();
    v22 = v15;
    v20 = a5;
    v21 = a6;
    swift_bridgeObjectRetain(a6);
    if ((StringProtocol.contains<A>(_:)(&v20, &type metadata for String, &type metadata for String, v18, v18) & 1) != 0)
      goto LABEL_8;
    swift_bridgeObjectRelease();
    v22 = v15;
    v20 = a7;
    v21 = a8;
    swift_bridgeObjectRetain(a8);
    if ((StringProtocol.contains<A>(_:)(&v20, &type metadata for String, &type metadata for String, v18, v18) & 1) != 0
      || (swift_bridgeObjectRelease(),
          v22 = v15,
          v20 = a9,
          v21 = a10,
          swift_bridgeObjectRetain(a10),
          (StringProtocol.contains<A>(_:)(&v20, &type metadata for String, &type metadata for String, v18, v18) & 1) != 0))
    {
LABEL_8:
      swift_release(inited);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, 4, &type metadata for String);
    }
    swift_bridgeObjectRelease();
  }
}

NSString sub_1001F3B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Locale.current.getter(v2);
  Locale.languageCodeIdentifier.getter(v5);
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7)
  {
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLLanguageUndetermined);
    if (v9 == v12 && v11 == v13)
    {
      swift_bridgeObjectRelease_n(v11, 2);
    }
    else
    {
      v15 = v13;
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) == 0)
        return v8;
    }

  }
  return 0;
}

id sub_1001F3CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v15 = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "embeddingWithContentsOfURL:error:", v4, &v15);

  v7 = v15;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v15;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    v13 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v6;
}

void sub_1001F3DB4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void *v7;
  uint64_t v8;
  _QWORD *inited;
  id v10;
  NSString *v11;
  NSString *v12;
  NSString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v36[48];

  v7 = *(void **)a1;
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 8);
  v8 = sub_10001A630(&qword_1008401E0);
  inited = (_QWORD *)swift_initStackObject(v8, v36);
  *((_OWORD *)inited + 1) = xmmword_1006A3C40;
  inited[4] = NLTagVerb;
  inited[5] = NLTagNoun;
  v10 = v7;
  v11 = NLTagVerb;
  v12 = NLTagNoun;
  if (objc_msgSend(a2, "relevantWordTagsIncludeOtherWord"))
  {
    v13 = NLTagOtherWord;
    v14 = 3;
    inited = sub_1002C9E54((_QWORD *)1, 3, 1, inited);
    inited[2] = 3;
    inited[6] = NLTagOtherWord;
  }
  else
  {
    v14 = inited[2];
    if (!v14)
    {

LABEL_17:
      swift_bridgeObjectRelease();
      *a5 = 0;
      a5[1] = 0;
      return;
    }
  }
  swift_bridgeObjectRetain(inited);
  v15 = 0;
  while (1)
  {
    v16 = inited[v15 + 4];
    if (!v16)
    {
      if (!v7)
        goto LABEL_19;
      goto LABEL_6;
    }
    if (!v7)
      goto LABEL_6;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    if (v17 == v20 && v19 == v21)
      break;
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
      goto LABEL_19;
LABEL_6:
    if (v14 == ++v15)
    {

      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease_n(v19, 2);
LABEL_19:
  swift_bridgeObjectRelease_n(inited, 2);
  v24 = String.subscript.getter(v33, v32, a3, a4);
  v29 = static String._fromSubstring(_:)(v24, v25, v26, v27, v28);
  v31 = v30;
  swift_bridgeObjectRelease();

  *a5 = v29;
  a5[1] = v31;
}

uint64_t sub_1001F3FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  Class isa;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  char v18;

  v2 = v0;
  v3 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONEncoder.init()();
  v5 = *(_OWORD *)(v2 + 16);
  v17[0] = *(_OWORD *)v2;
  v17[1] = v5;
  v17[2] = *(_OWORD *)(v2 + 32);
  v18 = *(_BYTE *)(v2 + 48);
  v6 = sub_1001F6970();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v17, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult, v6);
  v9 = v8;
  result = swift_release(v4);
  if (!v1)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    v12 = -[objc_class TT_gzipDeflate](isa, "TT_gzipDeflate");

    if (v12)
    {
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

    }
    else
    {
      v13 = 0;
      v15 = 0xF000000000000000;
    }
    v16 = sub_10001A630(&qword_10083A6E0);
    Optional.tryUnwrap(_:file:line:)(v17, 0x73736572706D6F63, 0xEA00000000006465, 0xD000000000000061, 0x80000001006FC8B0, 442, v16);
    sub_1000A71C8(v7, v9);
    sub_1000A71B4(v13, v15);
    return *(_QWORD *)&v17[0];
  }
  return result;
}

uint64_t sub_1001F416C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = sub_10001A630(&qword_100840388);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FBE8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys, v11, v9, v10);
  v22 = *v3;
  HIBYTE(v21) = 0;
  v12 = sub_10001A630(&qword_100840398);
  v13 = sub_1000EAEE8(&qword_1008403A0, &qword_100840398, (void (*)(void))sub_1001FBED0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v12, v13);
  if (!v2)
  {
    v14 = v3[1];
    v15 = v3[2];
    BYTE6(v21) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, (char *)&v21 + 6, v5);
    v16 = v3[3];
    v17 = v3[4];
    BYTE5(v21) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, (char *)&v21 + 5, v5);
    v18 = v3[5];
    v19 = *((unsigned __int8 *)v3 + 48);
    BYTE4(v21) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, (char *)&v21 + 4, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F4318()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F4348 + 4 * byte_1006AE550[*v0]))(0x73746E756F636361, 0xE800000000000000);
}

uint64_t sub_1001F4348()
{
  return 0x614C6D6574737973;
}

unint64_t sub_1001F436C()
{
  return 0xD000000000000012;
}

unint64_t sub_1001F4388()
{
  return 0xD000000000000014;
}

uint64_t sub_1001F43A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FC0D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001F43CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBE8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F43F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBE8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001F441C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  char v8;

  sub_1001FC2A4(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1001F4468(_QWORD *a1)
{
  return sub_1001F416C(a1);
}

uint64_t sub_1001F447C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return sub_1001F7DFC((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1001F44D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A630(&qword_1008404D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000A388(a1, v12);
  v14 = sub_1001FDDB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_10001A630(&qword_1008404C0);
    v16 = sub_1000EAEE8(&qword_1008404E0, &qword_1008404C0, (void (*)(void))sub_1001FDE40, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001F4640()
{
  _BYTE *v0;

  if (*v0)
    return 0x737473696CLL;
  else
    return 1701869940;
}

uint64_t sub_1001F4670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FC520(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001F4694(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1001F46A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDDB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F46C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDDB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F46F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001FC5F8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1001F471C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001F44D4(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1001F4738(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      v7 = *a1;
      v8 = v7 == *a2 && v3 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v3, *a2, v5, 0) & 1) != 0)
        return sub_100305BD8(v4, v6);
    }
  }
  else if (!v5)
  {
    return sub_100305BD8(v4, v6);
  }
  return 0;
}

uint64_t sub_1001F47A0(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  _QWORD v22[4];
  _BYTE v23[32];

  v3 = v1;
  v5 = sub_10001A630(&qword_100840490);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FDCF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v22[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v22, v5);
  if (!v2)
  {
    v13 = v3[1];
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v22, v5);
    v14 = *((_QWORD *)v3 + 1);
    v15 = *((_QWORD *)v3 + 2);
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v22, v5);
    sub_1000A5CA8((uint64_t)(v3 + 24), (uint64_t)v23, &qword_100840498);
    sub_1000A5CA8((uint64_t)v23, (uint64_t)v22, &qword_100840498);
    v21 = 3;
    v16 = sub_1001FBFE0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, v16);
    v22[0] = *((_QWORD *)v3 + 7);
    v21 = 4;
    v17 = sub_10001A630(&qword_100840478);
    v18 = sub_1001FDD34(&qword_1008404A0, &qword_1008404A8, (uint64_t)&unk_1006AE8AC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F49A8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F49D8 + 4 * byte_1006AE554[*v0]))(0x6465726168537369, 0xE800000000000000);
}

uint64_t sub_1001F49D8()
{
  return 0x70756F72477369;
}

uint64_t sub_1001F49F0()
{
  return 0x656C746974;
}

unint64_t sub_1001F4A04()
{
  return 0xD000000000000015;
}

uint64_t sub_1001F4A20()
{
  return 0x7265646E696D6572;
}

uint64_t sub_1001F4A3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FC7A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001F4A60(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1001F4A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDCF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4A94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDCF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001F4ABC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1001FC9BC(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1001F4AFC(_QWORD *a1)
{
  return sub_1001F47A0(a1);
}

BOOL sub_1001F4B34(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1001F6E5C((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

uint64_t sub_1001F4B80(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F4BBC + 4 * byte_1006AE559[a1]))(0x6E6F697461657263, 0xEC00000065746144);
}

unint64_t sub_1001F4BBC()
{
  return 0xD000000000000011;
}

uint64_t sub_1001F4DE4()
{
  return 0x746E657261507369;
}

uint64_t sub_1001F4E04()
{
  return 0x7361746275537369;
}

uint64_t sub_1001F4E24()
{
  return 0x4172657355736168;
}

uint64_t sub_1001F4E48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  char v73;

  v3 = v1;
  v5 = sub_10001A630(&qword_1008403F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FBF58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys, v11, v9, v10);
  LOBYTE(v72[0]) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_10009FC50(&qword_10083C3E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, v72, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = *((unsigned __int8 *)v15 + 8);
    LOBYTE(v72[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v72, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = *((unsigned __int8 *)v18 + 8);
    LOBYTE(v72[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v72, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 8);
    LOBYTE(v72[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v72, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = *((unsigned __int8 *)v24 + 8);
    LOBYTE(v72[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v72, v5);
    v27 = (uint64_t *)(v3 + v14[9]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v72[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, v72, v5);
    v30 = (_OWORD *)(v3 + v14[10]);
    v31 = v30[1];
    v72[0] = *v30;
    v72[1] = v31;
    v73 = 6;
    v32 = sub_1001FBFE0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v72, &v73, v5, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, v32);
    v33 = (uint64_t *)(v3 + v14[11]);
    v34 = *v33;
    v35 = v33[1];
    LOBYTE(v72[0]) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, v72, v5);
    v36 = (uint64_t *)(v3 + v14[12]);
    v37 = *v36;
    v38 = v36[1];
    LOBYTE(v72[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, v72, v5);
    v39 = (uint64_t *)(v3 + v14[13]);
    v40 = *v39;
    v41 = v39[1];
    LOBYTE(v72[0]) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, v72, v5);
    v42 = (uint64_t *)(v3 + v14[14]);
    v43 = *v42;
    v44 = v42[1];
    LOBYTE(v72[0]) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v44, v72, v5);
    v71 = v3 + v14[15];
    LOBYTE(v72[0]) = 11;
    v45 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
    v46 = sub_10009FC50(&qword_100840408, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate, (uint64_t)&unk_1006AE924);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v71, v72, v5, v45, v46);
    v47 = v3 + v14[16];
    LOBYTE(v72[0]) = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v47, v72, v5, v12, v13);
    *(_QWORD *)&v72[0] = *(_QWORD *)(v3 + v14[17]);
    v73 = 13;
    v48 = sub_10001A630(&qword_1008403E8);
    v49 = sub_1001FC024(&qword_100840410, &qword_100840408, (uint64_t)&unk_1006AE924, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v72, &v73, v5, v48, v49);
    v50 = *(unsigned __int8 *)(v3 + v14[18]);
    LOBYTE(v72[0]) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v72, v5);
    v51 = (uint64_t *)(v3 + v14[19]);
    v52 = *v51;
    v53 = *((unsigned __int8 *)v51 + 8);
    LOBYTE(v72[0]) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, v72, v5);
    v54 = (uint64_t *)(v3 + v14[20]);
    v55 = *v54;
    v56 = v54[1];
    LOBYTE(v72[0]) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, v56, v72, v5);
    v57 = (uint64_t *)(v3 + v14[21]);
    v58 = *v57;
    v59 = v57[1];
    LOBYTE(v72[0]) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v59, v72, v5);
    v60 = (uint64_t *)(v3 + v14[22]);
    v61 = *v60;
    v62 = v60[1];
    LOBYTE(v72[0]) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v61, v62, v72, v5);
    *(_QWORD *)&v72[0] = *(_QWORD *)(v3 + v14[23]);
    v73 = 19;
    v63 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v64 = sub_1001FDC94(&qword_100840418, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v72, &v73, v5, v63, v64);
    v65 = *(unsigned __int8 *)(v3 + v14[24]);
    LOBYTE(v72[0]) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v65, v72, v5);
    v66 = *(unsigned __int8 *)(v3 + v14[25]);
    LOBYTE(v72[0]) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v72, v5);
    v67 = *(unsigned __int8 *)(v3 + v14[26]);
    LOBYTE(v72[0]) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v67, v72, v5);
    v68 = *(unsigned __int8 *)(v3 + v14[27]);
    LOBYTE(v72[0]) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v72, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F549C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(void);
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  char v109;
  __n128 v110;
  char v111;
  __n128 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __n128 v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  uint64_t *v150;
  char *v151;
  _QWORD *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  char v156;

  v152 = a1;
  v127 = a2;
  v2 = sub_10001A630(&qword_1008401F0);
  __chkstk_darwin(v2);
  v135 = (uint64_t *)((char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v132 = (uint64_t *)((char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v147 = (uint64_t *)((char *)&v118 - v7);
  v148 = sub_10001A630(&qword_1008403C8);
  v146 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v9 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  v15 = &v12[v10[5]];
  *(_QWORD *)v15 = 0;
  *(_QWORD *)&v144 = v15;
  v15[8] = 1;
  v16 = &v12[v10[6]];
  *(_QWORD *)v16 = 0;
  v143 = (uint64_t *)v16;
  v16[8] = 1;
  v17 = &v12[v10[7]];
  *(_QWORD *)v17 = 0;
  v142 = (uint64_t *)v17;
  v17[8] = 1;
  v18 = &v12[v10[8]];
  *(_QWORD *)v18 = 0;
  v141 = (uint64_t *)v18;
  v18[8] = 1;
  v19 = &v12[v10[9]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v140 = v19;
  v20 = (uint64_t *)&v12[v10[10]];
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  v139 = v20;
  v21 = &v12[v10[11]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v138 = v21;
  v22 = &v12[v10[12]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v137 = v22;
  v23 = &v12[v10[13]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v136 = v23;
  v24 = &v12[v10[14]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v133 = v24;
  v25 = (uint64_t)&v12[v10[15]];
  v26 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v131 = v25;
  v134 = v26;
  v27(v25, 1, 1);
  v130 = &v12[v10[16]];
  v145 = v13;
  v14();
  v129 = v10[17];
  *(_QWORD *)&v12[v129] = _swiftEmptyArrayStorage;
  v128 = v10[18];
  v12[v128] = 2;
  v28 = &v12[v10[19]];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  v29 = &v12[v10[20]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = &v12[v10[21]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = &v12[v10[22]];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v123 = v10[23];
  *(_QWORD *)&v12[v123] = 0;
  v124 = v10[24];
  v12[v124] = 2;
  v125 = v10[25];
  v12[v125] = 2;
  v126 = v10[26];
  v12[v126] = 2;
  v32 = v10[27];
  v151 = v12;
  v12[v32] = 2;
  v34 = v152[3];
  v33 = v152[4];
  sub_10000A388(v152, v34);
  v35 = sub_1001FBF58();
  v149 = v9;
  v36 = v150;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys, v35, v34, v33);
  if (v36)
  {
    v114 = (uint64_t)v151;
  }
  else
  {
    v150 = (uint64_t *)v28;
    v122 = v29;
    v119 = v30;
    v120 = v31;
    v121 = v32;
    v37 = v146;
    LOBYTE(v153) = 0;
    v38 = (_QWORD *)sub_10009FC50(&qword_10083C448, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v40 = v147;
    v39 = v148;
    v41 = v145;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v147, v145, &v153, v148, v145, v38);
    sub_1000BABD0((uint64_t)v40, (uint64_t)v151, (uint64_t *)&unk_1008380D0);
    LOBYTE(v153) = 1;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v39);
    v44 = v144;
    *(_QWORD *)v144 = v43;
    *(_BYTE *)(v44 + 8) = v45 & 1;
    LOBYTE(v153) = 2;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v39);
    v47 = v143;
    *v143 = v46;
    *((_BYTE *)v47 + 8) = v48 & 1;
    LOBYTE(v153) = 3;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v39);
    v50 = v142;
    *v142 = v49;
    *((_BYTE *)v50 + 8) = v51 & 1;
    LOBYTE(v153) = 4;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v39);
    v147 = v38;
    v53 = v141;
    *v141 = v52;
    *((_BYTE *)v53 + 8) = v54 & 1;
    LOBYTE(v153) = 5;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v39);
    v57 = v56;
    v58 = (uint64_t *)v140;
    swift_bridgeObjectRelease();
    *v58 = v55;
    v58[1] = v57;
    v156 = 6;
    v59 = sub_1001FBF9C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v153, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, &v156, v39, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, v59);
    v144 = v153;
    v60 = v154;
    v61 = v155;
    v62 = v139;
    sub_1001F92A0(*v139, v139[1], v139[2], v139[3]);
    *(_OWORD *)v62 = v144;
    v62[2] = v60;
    v62[3] = v61;
    v63 = v148;
    LOBYTE(v153) = 7;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v66 = v65;
    v67 = (uint64_t *)v138;
    swift_bridgeObjectRelease();
    *v67 = v64;
    v67[1] = v66;
    LOBYTE(v153) = 8;
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v63);
    v70 = v69;
    v71 = (uint64_t *)v137;
    swift_bridgeObjectRelease();
    *v71 = v68;
    v71[1] = v70;
    LOBYTE(v153) = 9;
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v63);
    v74 = v73;
    v75 = (uint64_t *)v136;
    swift_bridgeObjectRelease();
    *v75 = v72;
    v75[1] = v74;
    LOBYTE(v153) = 10;
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v78 = v77;
    v79 = (uint64_t *)v133;
    swift_bridgeObjectRelease();
    *v79 = v76;
    v79[1] = v78;
    LOBYTE(v153) = 11;
    v80 = sub_10009FC50(&qword_1008403E0, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate, (uint64_t)&unk_1006AE94C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v135, v134, &v153, v148, v134, v80);
    sub_1000BABD0((uint64_t)v135, v131, &qword_1008401F0);
    LOBYTE(v153) = 12;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v132, v41, &v153, v148, v41, v147);
    sub_1000BABD0((uint64_t)v132, (uint64_t)v130, (uint64_t *)&unk_1008380D0);
    v81 = sub_10001A630(&qword_1008403E8);
    v156 = 13;
    v82 = sub_1001FC024(&qword_1008403F0, &qword_1008403E0, (uint64_t)&unk_1006AE94C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v153, v81, &v156, v148, v81, v82);
    v83 = v153;
    v84 = (uint64_t)v151;
    v85 = v129;
    v86 = swift_bridgeObjectRelease();
    *(_QWORD *)(v84 + v85) = v83;
    LOBYTE(v153) = 14;
    v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148, v86);
    v151[v128] = v87;
    LOBYTE(v153) = 15;
    v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v89 = v150;
    *v150 = v88;
    *((_BYTE *)v89 + 8) = v90 & 1;
    LOBYTE(v153) = 16;
    v91 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v93 = v92;
    v94 = (uint64_t *)v122;
    swift_bridgeObjectRelease();
    *v94 = v91;
    v94[1] = v93;
    LOBYTE(v153) = 17;
    v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v97 = v96;
    v98 = (uint64_t *)v119;
    swift_bridgeObjectRelease();
    *v98 = v95;
    v98[1] = v97;
    LOBYTE(v153) = 18;
    v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148);
    v101 = v100;
    v102 = (uint64_t *)v120;
    swift_bridgeObjectRelease();
    *v102 = v99;
    v102[1] = v101;
    v103 = sub_10001A630((uint64_t *)&unk_10083AE10);
    v156 = 19;
    v104 = sub_1001FDC94(&qword_10083F6A8, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v153, v103, &v156, v148, v103, v104);
    v105 = v153;
    v106 = v123;
    v107 = (uint64_t)v151;
    v108 = swift_bridgeObjectRelease();
    *(_QWORD *)(v107 + v106) = v105;
    LOBYTE(v153) = 20;
    v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148, v108);
    v151[v124] = v109;
    LOBYTE(v153) = 21;
    v111 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148, v110);
    v151[v125] = v111;
    LOBYTE(v153) = 22;
    v113 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148, v112);
    v114 = (uint64_t)v151;
    v151[v126] = v113;
    LOBYTE(v153) = 23;
    v115 = v148;
    v116 = v149;
    LOBYTE(v106) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v153, v148, v117);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v116, v115);
    *(_BYTE *)(v114 + v121) = v106;
    sub_1000151E8(v114, v127, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v152);
  return sub_10001C744(v114, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
}

uint64_t sub_1001F5F78()
{
  unsigned __int8 *v0;

  return sub_1001F4B80(*v0);
}

uint64_t sub_1001F5F80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FCD4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001F5FA4(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_1001F5FB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBF58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F5FD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBF58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F6000@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F549C(a1, a2);
}

uint64_t sub_1001F6014(_QWORD *a1)
{
  return sub_1001F4E48(a1);
}

uint64_t sub_1001F602C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A630(&qword_1008403C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FBF14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_10009FC50(&qword_10083C3E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = (uint64_t *)(v3
                    + *(int *)(type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0)
                             + 20));
    v15 = *v14;
    v16 = v14[1];
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F6180@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v26 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v28 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_10001A630(&qword_1008403B0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v12 = 0;
  v12[1] = 0;
  v13 = a1[3];
  v14 = a1[4];
  sub_10000A388(a1, v13);
  v15 = sub_1001FBF14();
  v27 = v7;
  v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys, v15, v13, v14);
  if (!v16)
  {
    v17 = v26;
    v32 = 0;
    v18 = sub_10009FC50(&qword_10083C448, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v19 = v29;
    v20 = v27;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, v11, &v32, v29, v11, v18);
    sub_1000BABD0((uint64_t)v28, (uint64_t)v10, (uint64_t *)&unk_1008380D0);
    v31 = 1;
    v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v19);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v20, v29);
    swift_bridgeObjectRelease();
    *v12 = v22;
    v12[1] = v24;
    sub_1000151E8((uint64_t)v10, v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return sub_10001C744((uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
}

uint64_t sub_1001F6408()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E6F7A656D6974;
  else
    return 1702125924;
}

uint64_t sub_1001F643C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FD770(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001F6460(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBF14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F6488(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBF14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F64B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F6180(a1, a2);
}

uint64_t sub_1001F64C4(_QWORD *a1)
{
  return sub_1001F602C(a1);
}

uint64_t sub_1001F64DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  v22 = a5;
  v23 = a3;
  v9 = sub_10001A630(&qword_100840450);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000A388(a1, v14);
  v15 = sub_1001FDBC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys, v15, v14, v13);
  v27 = a2;
  v26 = 0;
  v16 = sub_10001A630(&qword_100840438);
  v17 = sub_1001FDC0C(&qword_100840458, &qword_100840460, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v9, v16, v17);
  if (!v5)
  {
    v18 = a4;
    v19 = v22;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v25, v9);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v24, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1001F6670()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697369766572;
  if (*v0 != 1)
    v1 = 0x65676175676E616CLL;
  if (*v0)
    return v1;
  else
    return 0x6E69646465626D65;
}

uint64_t sub_1001F66D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FD850(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001F66F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDBC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F671C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FDBC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F6744@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001FD9B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001F6770(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001F64DC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001F678C(uint64_t *a1, uint64_t *a2)
{
  return sub_1001F69CC(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1001F67A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000178E8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));
  v1 = v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_salt;
  v2 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
  v4 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  sub_10000882C(v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t *)&unk_100839C70);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F687C()
{
  return type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(0);
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(uint64_t a1)
{
  return sub_10001522C(a1, qword_100840118, (uint64_t)&nominal type descriptor for RDStoreControllerExporter.DistributedEvaluation);
}

void sub_1001F6898(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = ".";
  v2 = type metadata accessor for SymmetricKey(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for TimeZone(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      sub_1000BE2FC(319, (unint64_t *)&qword_10083D2D0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256, 7, v8, a1 + 80);
      }
    }
  }
}

unint64_t sub_1001F6970()
{
  unint64_t result;

  result = qword_1008401D0;
  if (!qword_1008401D0)
  {
    result = swift_getWitnessTable(&unk_1006AE974, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult);
    atomic_store(result, (unint64_t *)&qword_1008401D0);
  }
  return result;
}

void sub_1001F69B4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001F0E70(a1, v2, a2);
}

uint64_t sub_1001F69CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2 != a6)
    return 0;
  if (a3 == a7 && a4 == a8
    || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 && (v13 = *(_QWORD *)(a5 + 16)) != 0)
    {
      v14 = 0;
      v15 = 1;
      while (1)
      {
        v16 = 8 * v14;
        v17 = *(_QWORD *)(a1 + 32 + 8 * v14);
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          v19 = *(_QWORD *)(a5 + 32 + v16);
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            if (vabdd_f64(*(double *)(v17 + 32), *(double *)(v19 + 32)) >= 2.22044605e-16)
              return 0;
            v21 = v18 == 1 || v20 == 1;
            if (!v21)
              break;
          }
        }
LABEL_16:
        result = 1;
        if (v15 != v12)
        {
          v14 = v15;
          v21 = v15++ == v13;
          if (!v21)
            continue;
        }
        return result;
      }
      v22 = (double *)(v17 + 40);
      v23 = (double *)(v19 + 40);
      v24 = v20 - 2;
      v25 = v18 - 2;
      while (vabdd_f64(*v22, *v23) < 2.22044605e-16)
      {
        if (v25)
        {
          v26 = v24;
          ++v23;
          ++v22;
          --v24;
          --v25;
          if (v26)
            continue;
        }
        goto LABEL_16;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1001F6B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v31 - v17;
  v33 = a1;
  sub_100008868(a1, (uint64_t)&v31 - v17, (uint64_t *)&unk_1008380D0);
  v34 = a2;
  sub_100008868(a2, (uint64_t)v15, (uint64_t *)&unk_1008380D0);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100008868((uint64_t)v18, (uint64_t)v9, (uint64_t *)&unk_1008380D0);
  sub_100008868((uint64_t)v15, v19, (uint64_t *)&unk_1008380D0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) != 1)
  {
    sub_100008868((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_1008380D0);
    if (v20(v19, 1, v4) != 1)
    {
      v21 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v32, v19, v4);
      v22 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v21, v4, v22);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v21, v4);
      sub_10000882C((uint64_t)v15, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_1008380D0);
      v24(v12, v4);
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);
      if ((v23 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v18, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_6:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_10084C100);
    return 0;
  }
  sub_10000882C((uint64_t)v15, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v18, (uint64_t *)&unk_1008380D0);
  if (v20(v19, 1, v4) != 1)
    goto LABEL_6;
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);
LABEL_8:
  v25 = *(int *)(type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0) + 20);
  v26 = (_QWORD *)(v33 + v25);
  v27 = *(_QWORD *)(v33 + v25 + 8);
  v28 = (_QWORD *)(v34 + v25);
  v29 = v28[1];
  if (v27)
  {
    if (v29
      && (*v26 == *v28 && v27 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, *v28, v29, 0) & 1) != 0))
    {
      return 1;
    }
  }
  else if (!v29)
  {
    return 1;
  }
  return 0;
}

BOOL sub_1001F6E5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2)
      return 0;
  }
  else
  {
    v6 = (v4 & 1) == 0;
    if (v5 == 2 || ((v6 ^ v5) & 1) == 0)
      return 0;
  }
  v7 = a1[1];
  v8 = a2[1];
  if (v7 == 2)
  {
    if (v8 != 2)
      return 0;
  }
  else
  {
    v9 = (v7 & 1) == 0;
    if (v8 == 2 || ((v9 ^ v8) & 1) == 0)
      return 0;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *((_QWORD *)a2 + 2);
  if (v10)
  {
    if (!v11)
      return 0;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *((_QWORD *)a2 + 1);
    if ((v12 != v13 || v10 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0) & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v14 = *((_QWORD *)a1 + 3);
  v15 = *((_QWORD *)a1 + 4);
  v16 = *((_QWORD *)a1 + 5);
  v17 = *((_QWORD *)a1 + 6);
  v19 = *((_QWORD *)a2 + 3);
  v18 = *((_QWORD *)a2 + 4);
  v20 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)a2 + 6);
  if (v14)
  {
    if (v19)
    {
      if ((sub_1001F69CC(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6)) & 1) != 0)return sub_10030605C(*((_QWORD *)a1 + 7), *((_QWORD *)a2 + 7));
      return 0;
    }
LABEL_23:
    sub_1001FC0A8(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6));
    sub_1001FC0A8(v19, v18, v20, v21);
    sub_1001F92A0(v14, v15, v16, v17);
    sub_1001F92A0(v19, v18, v20, v21);
    return 0;
  }
  if (v19)
    goto LABEL_23;
  return sub_10030605C(*((_QWORD *)a1 + 7), *((_QWORD *)a2 + 7));
}

BOOL sub_1001F7000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _BOOL8 result;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  int *v49;
  int *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  int v137;
  int v138;
  _BOOL4 v139;
  uint64_t v140;
  _QWORD *v141;
  char v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  int v167;
  int v168;
  _BOOL4 v169;
  uint64_t v170;
  int v171;
  int v172;
  _BOOL4 v173;
  uint64_t v174;
  int v175;
  int v176;
  _BOOL4 v177;
  uint64_t v178;
  int v179;
  int v180;
  _BOOL4 v181;
  unsigned int (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v192 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v183 = (uint64_t)&v182 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_10001A630(&qword_100840420);
  __chkstk_darwin(v189);
  v193 = (uint64_t)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_1008401F0);
  __chkstk_darwin(v6);
  v191 = (uint64_t)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v194 = (uint64_t)&v182 - v9;
  __chkstk_darwin(v10);
  v195 = (uint64_t)&v182 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v196 = (char *)&v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v15);
  v186 = (uint64_t)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v182 - v18;
  v20 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v20);
  v185 = (uint64_t)&v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v187 = (uint64_t)&v182 - v23;
  __chkstk_darwin(v24);
  v188 = (uint64_t)&v182 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v182 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v182 - v30;
  __chkstk_darwin(v32);
  v34 = (char *)&v182 - v33;
  v197 = a1;
  sub_100008868(a1, (uint64_t)&v182 - v33, (uint64_t *)&unk_1008380D0);
  v198 = a2;
  sub_100008868(a2, (uint64_t)v31, (uint64_t *)&unk_1008380D0);
  v184 = v15;
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  sub_100008868((uint64_t)v34, (uint64_t)v19, (uint64_t *)&unk_1008380D0);
  sub_100008868((uint64_t)v31, v35, (uint64_t *)&unk_1008380D0);
  v199 = v13;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v36((uint64_t)v19, 1, v12) == 1)
  {
    sub_10000882C((uint64_t)v31, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v34, (uint64_t *)&unk_1008380D0);
    if (v36(v35, 1, v12) == 1)
    {
      v182 = v36;
      v37 = v12;
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
      v39 = v197;
      v38 = v198;
      goto LABEL_11;
    }
LABEL_6:
    v41 = (uint64_t *)&unk_10084C100;
    v42 = (uint64_t)v19;
    goto LABEL_7;
  }
  sub_100008868((uint64_t)v19, (uint64_t)v28, (uint64_t *)&unk_1008380D0);
  v40 = v12;
  if (v36(v35, 1, v12) == 1)
  {
    sub_10000882C((uint64_t)v31, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v34, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v28, v12);
    goto LABEL_6;
  }
  v182 = v36;
  v44 = v199;
  v45 = v196;
  (*(void (**)(char *, uint64_t, uint64_t))(v199 + 32))(v196, v35, v40);
  v46 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v45, v40, v46);
  v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  v48(v45, v40);
  sub_10000882C((uint64_t)v31, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v34, (uint64_t *)&unk_1008380D0);
  v37 = v40;
  v48(v28, v40);
  v39 = v197;
  v38 = v198;
  sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
  if ((v47 & 1) == 0)
    return 0;
LABEL_11:
  v49 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  v50 = v49;
  v51 = v49[5];
  v52 = (_QWORD *)(v39 + v51);
  v53 = *(_BYTE *)(v39 + v51 + 8);
  v54 = (_QWORD *)(v38 + v51);
  v55 = *(unsigned __int8 *)(v38 + v51 + 8);
  if ((v53 & 1) != 0)
  {
    if (!v55)
      return 0;
  }
  else
  {
    if (*v52 != *v54)
      LOBYTE(v55) = 1;
    if ((v55 & 1) != 0)
      return 0;
  }
  v56 = v49[6];
  v57 = (_QWORD *)(v39 + v56);
  v58 = *(_BYTE *)(v39 + v56 + 8);
  v59 = (_QWORD *)(v38 + v56);
  v60 = *(unsigned __int8 *)(v38 + v56 + 8);
  if ((v58 & 1) != 0)
  {
    if (!v60)
      return 0;
  }
  else
  {
    if (*v57 != *v59)
      LOBYTE(v60) = 1;
    if ((v60 & 1) != 0)
      return 0;
  }
  v61 = v49[7];
  v62 = (_QWORD *)(v39 + v61);
  v63 = *(_BYTE *)(v39 + v61 + 8);
  v64 = (_QWORD *)(v38 + v61);
  v65 = *(unsigned __int8 *)(v38 + v61 + 8);
  if ((v63 & 1) != 0)
  {
    if (!v65)
      return 0;
  }
  else
  {
    if (*v62 != *v64)
      LOBYTE(v65) = 1;
    if ((v65 & 1) != 0)
      return 0;
  }
  v66 = v49[8];
  v67 = (_QWORD *)(v39 + v66);
  v68 = *(_BYTE *)(v39 + v66 + 8);
  v69 = (_QWORD *)(v38 + v66);
  v70 = *(unsigned __int8 *)(v38 + v66 + 8);
  if ((v68 & 1) != 0)
  {
    if (!v70)
      return 0;
  }
  else
  {
    if (*v67 != *v69)
      LOBYTE(v70) = 1;
    if ((v70 & 1) != 0)
      return 0;
  }
  v71 = v49[9];
  v72 = (_QWORD *)(v39 + v71);
  v73 = *(_QWORD *)(v39 + v71 + 8);
  v74 = (_QWORD *)(v38 + v71);
  v75 = v74[1];
  if (!v73)
  {
    if (v75)
      return 0;
    goto LABEL_42;
  }
  if (!v75)
    return 0;
  if (*v72 == *v74 && v73 == v75
    || (v76 = _stringCompareWithSmolCheck(_:_:expecting:)(*v72, v73, *v74, v75, 0), result = 0, (v76 & 1) != 0))
  {
LABEL_42:
    v77 = v50[10];
    v78 = *(_QWORD *)(v39 + v77);
    v79 = *(_QWORD *)(v39 + v77 + 8);
    v80 = *(_QWORD *)(v39 + v77 + 16);
    v81 = *(_QWORD *)(v39 + v77 + 24);
    v82 = (uint64_t *)(v38 + v77);
    v83 = *v82;
    v84 = v82[3];
    if (v78)
    {
      if (v83)
      {
        if ((sub_1001F69CC(v78, v79, v80, v81, *v82, v82[1], v82[2], v82[3]) & 1) == 0)
          return 0;
LABEL_48:
        v87 = v50[11];
        v88 = (_QWORD *)(v39 + v87);
        v89 = *(_QWORD *)(v39 + v87 + 8);
        v90 = (_QWORD *)(v38 + v87);
        v91 = v90[1];
        if (v89)
        {
          if (!v91)
            return 0;
          if (*v88 != *v90 || v89 != v91)
          {
            v92 = _stringCompareWithSmolCheck(_:_:expecting:)(*v88, v89, *v90, v91, 0);
            result = 0;
            if ((v92 & 1) == 0)
              return result;
          }
        }
        else if (v91)
        {
          return 0;
        }
        v93 = v50[12];
        v94 = (_QWORD *)(v39 + v93);
        v95 = *(_QWORD *)(v39 + v93 + 8);
        v96 = (_QWORD *)(v38 + v93);
        v97 = v96[1];
        if (v95)
        {
          if (!v97)
            return 0;
          v98 = v39;
          v99 = v38;
          if (*v94 != *v96 || v95 != v97)
          {
            v100 = _stringCompareWithSmolCheck(_:_:expecting:)(*v94, v95, *v96, v97, 0);
            result = 0;
            if ((v100 & 1) == 0)
              return result;
          }
        }
        else
        {
          v98 = v39;
          v99 = v38;
          if (v97)
            return 0;
        }
        v101 = v50[13];
        v102 = (_QWORD *)(v98 + v101);
        v103 = *(_QWORD *)(v98 + v101 + 8);
        v104 = (_QWORD *)(v99 + v101);
        v105 = v104[1];
        if (v103)
        {
          if (!v105)
            return 0;
          if (*v102 != *v104 || v103 != v105)
          {
            v106 = _stringCompareWithSmolCheck(_:_:expecting:)(*v102, v103, *v104, v105, 0);
            result = 0;
            if ((v106 & 1) == 0)
              return result;
          }
        }
        else if (v105)
        {
          return 0;
        }
        v107 = v50[14];
        v108 = (_QWORD *)(v98 + v107);
        v109 = *(_QWORD *)(v98 + v107 + 8);
        v110 = (_QWORD *)(v99 + v107);
        v111 = v110[1];
        if (v109)
        {
          if (!v111)
            return 0;
          v112 = v98;
          v113 = v99;
          if (*v108 != *v110 || v109 != v111)
          {
            v114 = _stringCompareWithSmolCheck(_:_:expecting:)(*v108, v109, *v110, v111, 0);
            result = 0;
            if ((v114 & 1) == 0)
              return result;
          }
        }
        else
        {
          v112 = v98;
          v113 = v99;
          if (v111)
            return 0;
        }
        v115 = v195;
        sub_100008868(v112 + v50[15], v195, &qword_1008401F0);
        v116 = v194;
        sub_100008868(v113 + v50[15], v194, &qword_1008401F0);
        v117 = v193;
        v118 = v193 + *(int *)(v189 + 48);
        sub_100008868(v115, v193, &qword_1008401F0);
        sub_100008868(v116, v118, &qword_1008401F0);
        v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48);
        v120 = v192;
        if (v119(v117, 1, v192) == 1)
        {
          sub_10000882C(v194, &qword_1008401F0);
          sub_10000882C(v195, &qword_1008401F0);
          if (v119(v118, 1, v120) == 1)
          {
            sub_10000882C(v117, &qword_1008401F0);
LABEL_83:
            v124 = v188;
            sub_100008868(v112 + v50[16], v188, (uint64_t *)&unk_1008380D0);
            v125 = v187;
            sub_100008868(v113 + v50[16], v187, (uint64_t *)&unk_1008380D0);
            v126 = v186;
            v127 = v186 + *(int *)(v184 + 48);
            sub_100008868(v124, v186, (uint64_t *)&unk_1008380D0);
            sub_100008868(v125, v127, (uint64_t *)&unk_1008380D0);
            v128 = v126;
            if (v182(v126, 1, v37) == 1)
            {
              sub_10000882C(v187, (uint64_t *)&unk_1008380D0);
              sub_10000882C(v188, (uint64_t *)&unk_1008380D0);
              if (v182(v127, 1, v37) == 1)
              {
                sub_10000882C(v126, (uint64_t *)&unk_1008380D0);
LABEL_90:
                if ((sub_100305828(*(_QWORD *)(v112 + v50[17]), *(_QWORD *)(v113 + v50[17])) & 1) != 0)
                {
                  v136 = v50[18];
                  v137 = *(unsigned __int8 *)(v112 + v136);
                  v138 = *(unsigned __int8 *)(v113 + v136);
                  if (v137 == 2)
                  {
                    if (v138 != 2)
                      return 0;
                  }
                  else
                  {
                    result = 0;
                    v139 = (v137 & 1) == 0;
                    if (v138 == 2 || ((v139 ^ v138) & 1) == 0)
                      return result;
                  }
                  v140 = v50[19];
                  v141 = (_QWORD *)(v112 + v140);
                  v142 = *(_BYTE *)(v112 + v140 + 8);
                  v143 = (_QWORD *)(v113 + v140);
                  v144 = *(unsigned __int8 *)(v113 + v140 + 8);
                  if ((v142 & 1) != 0)
                  {
                    if (!v144)
                      return 0;
                  }
                  else
                  {
                    if (*v141 != *v143)
                      LOBYTE(v144) = 1;
                    if ((v144 & 1) != 0)
                      return 0;
                  }
                  v145 = v50[20];
                  v146 = (_QWORD *)(v112 + v145);
                  v147 = *(_QWORD *)(v112 + v145 + 8);
                  v148 = (_QWORD *)(v113 + v145);
                  v149 = v148[1];
                  if (v147)
                  {
                    if (!v149)
                      return 0;
                    if (*v146 != *v148 || v147 != v149)
                    {
                      v150 = _stringCompareWithSmolCheck(_:_:expecting:)(*v146, v147, *v148, v149, 0);
                      result = 0;
                      if ((v150 & 1) == 0)
                        return result;
                    }
                  }
                  else if (v149)
                  {
                    return 0;
                  }
                  v151 = v50[21];
                  v152 = (_QWORD *)(v112 + v151);
                  v153 = *(_QWORD *)(v112 + v151 + 8);
                  v154 = (_QWORD *)(v113 + v151);
                  v155 = v154[1];
                  if (v153)
                  {
                    if (!v155)
                      return 0;
                    if (*v152 != *v154 || v153 != v155)
                    {
                      v156 = _stringCompareWithSmolCheck(_:_:expecting:)(*v152, v153, *v154, v155, 0);
                      result = 0;
                      if ((v156 & 1) == 0)
                        return result;
                    }
                  }
                  else if (v155)
                  {
                    return 0;
                  }
                  v157 = v50[22];
                  v158 = (_QWORD *)(v112 + v157);
                  v159 = *(_QWORD *)(v112 + v157 + 8);
                  v160 = (_QWORD *)(v113 + v157);
                  v161 = v160[1];
                  if (v159)
                  {
                    if (!v161)
                      return 0;
                    if (*v158 != *v160 || v159 != v161)
                    {
                      v162 = _stringCompareWithSmolCheck(_:_:expecting:)(*v158, v159, *v160, v161, 0);
                      result = 0;
                      if ((v162 & 1) == 0)
                        return result;
                    }
                  }
                  else if (v161)
                  {
                    return 0;
                  }
                  v163 = v50[23];
                  v164 = *(_QWORD **)(v112 + v163);
                  v165 = *(_QWORD **)(v113 + v163);
                  if (v164)
                  {
                    if (!v165 || (sub_100305764(v164, v165) & 1) == 0)
                      return 0;
                  }
                  else if (v165)
                  {
                    return 0;
                  }
                  v166 = v50[24];
                  v167 = *(unsigned __int8 *)(v112 + v166);
                  v168 = *(unsigned __int8 *)(v113 + v166);
                  if (v167 == 2)
                  {
                    if (v168 != 2)
                      return 0;
                  }
                  else
                  {
                    result = 0;
                    v169 = (v167 & 1) == 0;
                    if (v168 == 2 || ((v169 ^ v168) & 1) == 0)
                      return result;
                  }
                  v170 = v50[25];
                  v171 = *(unsigned __int8 *)(v112 + v170);
                  v172 = *(unsigned __int8 *)(v113 + v170);
                  if (v171 == 2)
                  {
                    if (v172 != 2)
                      return 0;
                  }
                  else
                  {
                    result = 0;
                    v173 = (v171 & 1) == 0;
                    if (v172 == 2 || ((v173 ^ v172) & 1) == 0)
                      return result;
                  }
                  v174 = v50[26];
                  v175 = *(unsigned __int8 *)(v112 + v174);
                  v176 = *(unsigned __int8 *)(v113 + v174);
                  if (v175 == 2)
                  {
                    if (v176 != 2)
                      return 0;
                  }
                  else
                  {
                    result = 0;
                    v177 = (v175 & 1) == 0;
                    if (v176 == 2 || ((v177 ^ v176) & 1) == 0)
                      return result;
                  }
                  v178 = v50[27];
                  v179 = *(unsigned __int8 *)(v112 + v178);
                  v180 = *(unsigned __int8 *)(v113 + v178);
                  if (v179 != 2)
                  {
                    v181 = (v179 & 1) == 0;
                    return v180 != 2 && ((v181 ^ v180) & 1) != 0;
                  }
                  if (v180 == 2)
                    return 1;
                }
                return 0;
              }
            }
            else
            {
              sub_100008868(v126, v185, (uint64_t *)&unk_1008380D0);
              if (v182(v127, 1, v37) != 1)
              {
                v129 = v199;
                v130 = v196;
                v131 = v37;
                (*(void (**)(char *, uint64_t, uint64_t))(v199 + 32))(v196, v127, v37);
                v132 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v133 = v185;
                v134 = dispatch thunk of static Equatable.== infix(_:_:)(v185, v130, v131, v132);
                v135 = *(void (**)(char *, uint64_t))(v129 + 8);
                v135(v130, v131);
                sub_10000882C(v187, (uint64_t *)&unk_1008380D0);
                sub_10000882C(v188, (uint64_t *)&unk_1008380D0);
                v135((char *)v133, v131);
                sub_10000882C(v128, (uint64_t *)&unk_1008380D0);
                if ((v134 & 1) == 0)
                  return 0;
                goto LABEL_90;
              }
              sub_10000882C(v187, (uint64_t *)&unk_1008380D0);
              sub_10000882C(v188, (uint64_t *)&unk_1008380D0);
              (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v185, v37);
            }
            v41 = (uint64_t *)&unk_10084C100;
            v42 = v126;
LABEL_7:
            sub_10000882C(v42, v41);
            return 0;
          }
        }
        else
        {
          sub_100008868(v117, v191, &qword_1008401F0);
          if (v119(v118, 1, v120) != 1)
          {
            v121 = v183;
            sub_1000B8680(v118, v183, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            v122 = v191;
            v123 = sub_1001F6B0C(v191, v121);
            sub_10001C744(v121, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            sub_10000882C(v194, &qword_1008401F0);
            sub_10000882C(v195, &qword_1008401F0);
            sub_10001C744(v122, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            sub_10000882C(v193, &qword_1008401F0);
            if ((v123 & 1) == 0)
              return 0;
            goto LABEL_83;
          }
          sub_10000882C(v194, &qword_1008401F0);
          sub_10000882C(v195, &qword_1008401F0);
          sub_10001C744(v191, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
          v117 = v193;
        }
        v41 = &qword_100840420;
        v42 = v117;
        goto LABEL_7;
      }
    }
    else if (!v83)
    {
      goto LABEL_48;
    }
    v85 = v82[1];
    v86 = v82[2];
    sub_1001FC0A8(v78, v79, v80, v81);
    sub_1001FC0A8(v83, v85, v86, v84);
    sub_1001F92A0(v78, v79, v80, v81);
    sub_1001F92A0(v83, v85, v86, v84);
    return 0;
  }
  return result;
}

uint64_t sub_1001F7DFC(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  sub_100306198(*(_QWORD *)a1, *(_QWORD *)a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
    if (v6)
      return 0;
    goto LABEL_9;
  }
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 == v8 && v5 == v6
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v5, v8, v6, 0), result = 0, (v9 & 1) != 0))
  {
LABEL_9:
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a2 + 32);
    if (v11)
    {
      if (v12)
      {
        v13 = *(_QWORD *)(a1 + 24);
        v14 = *(_QWORD *)(a2 + 24);
        if (v13 != v14 || v11 != v12)
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0);
          result = 0;
          if ((v15 & 1) == 0)
            return result;
        }
LABEL_16:
        v16 = *(_BYTE *)(a2 + 48);
        if ((*(_BYTE *)(a1 + 48) & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 48) & 1) == 0)
            return 0;
        }
        else
        {
          if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
            v16 = 1;
          if ((v16 & 1) != 0)
            return 0;
        }
        return 1;
      }
    }
    else if (!v12)
    {
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_1001F7EE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a4;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v8 = (_QWORD *)(v7 + 48);
  v9 = _swiftEmptyArrayStorage;
  do
  {
    v11 = *v8;
    v21 = *((_OWORD *)v8 - 1);
    v22 = v11;
    v12 = (id)v21;
    sub_1001F3DB4((uint64_t)&v21, a2, a3, v23, &v19);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v9;
    }

    v13 = v20;
    if (v20)
    {
      v14 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
        v9 = sub_1002C8224((_QWORD *)(v15 > 1), v16 + 1, 1, v9);
      v9[2] = v16 + 1;
      v10 = &v9[2 * v16];
      v10[4] = v14;
      v10[5] = v13;
    }
    v8 += 3;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1001F8048(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  int64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v45;
  id v46;
  unint64_t v47;

  v7 = a1;
  v45 = (unint64_t)NLEmbedding.vector(for:)(*(Swift::String *)&a1);
  if (!v45)
    return 0;
  v8 = (_QWORD *)NLEmbedding.neighbors(for:maximumCount:distanceType:)(v7, a2, a4, 0);
  v9 = (_QWORD *)v8[2];
  if ((uint64_t)v9 < a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    goto LABEL_74;
  while (1)
  {
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
      v8 = sub_1002C9D10((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8[2] = v11 + 1;
    v12 = &v8[3 * v11 + 4];
    *v12 = v7;
    v12[1] = (uint64_t)a2;
    v12[2] = 0;
    a2 = sub_1001BC2E4((unint64_t)objc_msgSend(a3, "dimension"), 0.0);
    v7 = (uint64_t)sub_1001BC2E4((unint64_t)objc_msgSend(a3, "dimension"), 0.0);
    v13 = v8[2];
    v46 = a3;
    if (v13)
    {
      swift_bridgeObjectRetain(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0)
        a2 = sub_1001CEC68(a2);
      v14 = 0;
      v9 = a2 + 4;
      do
      {
        if (v14 >= v8[2])
          goto LABEL_73;
        v15 = &v8[3 * v14 + 4];
        v16 = *v15;
        v17 = (void *)v15[1];
        swift_bridgeObjectRetain(v17);
        v18._countAndFlagsBits = v16;
        v18._object = v17;
        a3 = (_QWORD *)NLEmbedding.vector(for:)(v18);
        swift_bridgeObjectRelease();
        if (a3)
        {
          v19 = a3[2];
          if (v19)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) != 0)
            {
              v20 = a3[2];
              if (v20)
              {
LABEL_19:
                v21 = 0;
                v22 = *(_QWORD *)(v45 + 16);
                v23 = 1;
                while (v22 != v21)
                {
                  if (v21 >= a2[2])
                    goto LABEL_66;
                  v24 = *(double *)&a3[v21 + 4];
                  v25 = *(double *)(v45 + 32 + 8 * v21) - v24;
                  if (*(double *)&v9[v21] < fabs(v25))
                    *(double *)&v9[v21] = v25;
                  if (v21 >= *(_QWORD *)(v7 + 16))
                    goto LABEL_67;
                  *(double *)(v7 + 8 * v21 + 32) = v24 + *(double *)(v7 + 8 * v21 + 32);
                  if (v23 == v19)
                    goto LABEL_12;
                  ++v21;
                  if (v23++ == v20)
                    goto LABEL_30;
                }
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
                goto LABEL_68;
              }
            }
            else
            {
              v7 = (uint64_t)sub_1001CEC68((_QWORD *)v7);
              v20 = a3[2];
              if (v20)
                goto LABEL_19;
            }
LABEL_30:
            __break(1u);
            goto LABEL_33;
          }
LABEL_12:
          swift_bridgeObjectRelease();
        }
        ++v14;
      }
      while (v14 != v13);
      swift_bridgeObjectRelease();
    }
LABEL_33:
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v7 + 16);
    if (v27)
    {
      v47 = (unint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v7);
      sub_1001C1EBC(0, v27, 0);
      v28 = 0;
      a3 = (_QWORD *)v47;
      do
      {
        v29 = *(double *)(v7 + 8 * v28 + 32);
        v30 = v8[2];
        v47 = (unint64_t)a3;
        v32 = a3[2];
        v31 = a3[3];
        if (v32 >= v31 >> 1)
        {
          sub_1001C1EBC(v31 > 1, v32 + 1, 1);
          a3 = (_QWORD *)v47;
        }
        ++v28;
        a3[2] = v32 + 1;
        *(double *)&a3[v32 + 4] = v29 / (double)v30;
      }
      while (v27 != v28);
      v33 = swift_bridgeObjectRelease_n(v7, 2).n128_u64[0];
    }
    else
    {
      v33 = swift_bridgeObjectRelease().n128_u64[0];
      a3 = _swiftEmptyArrayStorage;
    }
    v9 = sub_1001BC2E4((unint64_t)objc_msgSend(v46, "dimension", *(double *)&v33), 0.0);
    v34 = a2[2];
    if (!v34)
      break;
    v7 = 0x1FFFFFFFFFF801;
    swift_bridgeObjectRetain(a2);
    v36 = 0;
    v37 = 1;
    while (1)
    {
      v38 = v37;
      v35 = a2 + 4;
      v39 = *(double *)&a2[v36 + 4];
      v40 = v39 >= 0.0 ? -v39 : *(double *)&v35[v36];
      v41 = v39 < 0.0 ? -v39 : *(double *)&v35[v36];
      if (v36 >= a3[2])
        break;
      if (v40 > v41)
        goto LABEL_69;
      if ((~COERCE__INT64(v41 - v40) & 0x7FF0000000000000) == 0)
        goto LABEL_70;
      v42 = *(double *)&a3[v36 + 4];
      do
      {
        v47 = 0;
        swift_stdlib_random(&v47, 8);
      }
      while (0x20000000000001 * v47 < 0x1FFFFFFFFFF801);
      v43 = (v47 * (unsigned __int128)0x20000000000001uLL) >> 64;
      if (v43 != 0x20000000000000)
        v41 = v40 + (v41 - v40) * ((double)v43 * 1.11022302e-16);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1001CEC68(v9);
      if (v36 >= v9[2])
        goto LABEL_71;
      *(double *)&v9[v36 + 4] = v42 + v41;
      if (v38 == v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(a2, 2);
        goto LABEL_63;
      }
      v37 = v38 + 1;
      v36 = v38;
      if (v38 >= a2[2])
        goto LABEL_72;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    v8 = sub_1002C9D10(0, (int64_t)v9 + 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_63:
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *sub_1001F8544(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v5 = (_QWORD *)(v4 + 40);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v7 = *(v5 - 1);
    v8 = (_QWORD *)*v5;
    swift_bridgeObjectRetain(*v5);
    v9 = sub_1001F8048(v7, v8, a2, 15);
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_1002C9CD4(0, v6[2] + 1, 1, v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_1002C9CD4((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
    }
    v5 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1001F8664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;

  if (!a1)
    return 0;
  v1 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
  v2 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v3 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v4 = Sequence.elements<A>(ofType:)(v1, v2, v1, v3);
  v5 = v4;
  if (!((unint64_t)v4 >> 62))
  {
    result = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_4;
    goto LABEL_11;
  }
  if (v4 >= 0)
    v4 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v4);
  if (!result)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v5 + 32);
LABEL_7:
    v8 = v7;
    swift_bridgeObjectRelease();
    sub_100316FE4(v8);
    v10 = v9;
    v11 = objc_msgSend(v9, "iCalendarDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);

    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001F87E8(void *a1)
{
  void *v2;
  id v3;
  Swift::String v4;
  id v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = (void *)objc_opt_self(CNLabeledValue);
  v3 = objc_msgSend(v2, "localizedStringForLabel:", CNLabelHome);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v4 = String.lowercased()();
  v5 = objc_msgSend(v2, "localizedStringForLabel:", CNLabelWork, swift_bridgeObjectRelease().n128_f64[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = String.lowercased()();
  v7 = objc_msgSend(v2, "localizedStringForLabel:", CNLabelSchool, swift_bridgeObjectRelease().n128_f64[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  v8 = String.lowercased()();
  v9 = objc_msgSend(v2, "localizedStringForLabel:", CNLabelOther, swift_bridgeObjectRelease().n128_f64[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v10 = String.lowercased()();
  v11 = objc_msgSend(a1, "title", swift_bridgeObjectRelease().n128_f64[0]);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  sub_1001F3928(v13, v15, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
  v17 = v16;
  v19 = v18;
  *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
  if (v19)
    goto LABEL_9;
  v21 = objc_msgSend(a1, "address", v20);
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  sub_1001F3928(v23, v25, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
  v17 = v26;
  v28 = v27;
  *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
  if (v28)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = objc_msgSend(a1, "contactLabel", v29);
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v35 = v34;

    }
    else
    {
      v33 = 0;
      v35 = 0;
    }
    sub_1001F3928(v33, v35, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
    v37 = v36;
    v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39)
      return v37;
    else
      return 0x6E776F6E6B6E753CLL;
  }
  return v17;
}

_QWORD *sub_1001F8B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v3;
  v37 = a3;
  v34 = a2;
  v6 = sub_10001A630(&qword_1008401E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  v38 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v30 = (uint64_t)&v28 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v26))
  {
    v13 = _swiftEmptyArrayStorage;
    v32 = v12;
    v33 = a1 & 0xC000000000000001;
    v14 = 4;
    v29 = a1;
    v31 = v8;
    v15 = v38;
    while (1)
    {
      v16 = v33 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      v17 = v16;
      v18 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      v19 = v4;
      sub_1001F16EC(v16, (uint64_t)v8);
      if (v4)
      {
        v20 = a1;
        swift_errorRelease(v19);
        v21 = 1;
      }
      else
      {
        v20 = a1;
        v21 = 0;
      }
      v8 = v31;
      v22 = v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v31, v21, 1, v36);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v22) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_1008401E8);
        a1 = v20;
        v4 = 0;
      }
      else
      {
        v23 = v30;
        sub_1000B8680((uint64_t)v8, v30, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_1000B8680(v23, v35, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = (_QWORD *)sub_1002C9CE8(0, v13[2] + 1, 1, (unint64_t)v13);
        v4 = 0;
        v25 = v13[2];
        v24 = v13[3];
        if (v25 >= v24 >> 1)
          v13 = (_QWORD *)sub_1002C9CE8(v24 > 1, v25 + 1, 1, (unint64_t)v13);
        v13[2] = v25 + 1;
        sub_1000B8680(v35, (uint64_t)v13+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v25, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        a1 = v29;
      }
      ++v14;
      if (v18 == v32)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v26 = a1;
    else
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001F8E60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v21;
  _OWORD v22[4];
  unint64_t v23;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v23 = a1 & 0xC000000000000001;
    v8 = _swiftEmptyArrayStorage;
    v9 = 4;
    v21 = a3;
    while (1)
    {
      v10 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1) : *(id *)(a1 + 8 * v9);
      v11 = v10;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      sub_1001F0FD8(v10, a3, (uint64_t)v22);
      if (v4)
      {
        swift_errorRelease(v4);

        v4 = 0;
      }
      else
      {

        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = sub_1002C9BC8(0, v8[2] + 1, 1, v8);
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
          v8 = sub_1002C9BC8((_QWORD *)(v13 > 1), v14 + 1, 1, v8);
        v8[2] = v14 + 1;
        v15 = &v8[8 * v14];
        v16 = v22[0];
        v17 = v22[1];
        v18 = v22[3];
        v15[4] = v22[2];
        v15[5] = v18;
        v15[2] = v16;
        v15[3] = v17;
        a3 = v21;
      }
      ++v9;
      if (v12 == v7)
        goto LABEL_22;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v8 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_1001F9010(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  id v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v4 = v3;
  v6 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v29 = *(id *)(a2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
    v30 = v6 & 0xC000000000000001;
    v31 = _swiftEmptyArrayStorage;
    v8 = 4;
    v28 = a3;
    v25 = v7;
    v26 = v6;
    while (1)
    {
      v9 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6) : *(id *)(v6 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      if (objc_msgSend(v29, "includeAccountType"))
      {
        v12 = objc_msgSend(v10, "accountTypeHost");
        v13 = objc_msgSend(v12, "internalDescription");

        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v15 = v14;

        a3 = v28;
      }
      else
      {
        v32 = 0;
        v15 = 0;
      }
      v16 = sub_10034BA64(a3);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_errorRelease(v4);

        v4 = 0;
      }
      else
      {
        v17 = v16;
        swift_retain();
        v18 = a3;
        v19 = sub_1001F8E60(v17, a2, v18);

        swift_bridgeObjectRelease();
        swift_release(a2);

        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = sub_1002C9AA4(0, v31[2] + 1, 1, v31);
        v21 = v31[2];
        v20 = v31[3];
        v7 = v25;
        if (v21 >= v20 >> 1)
          v31 = sub_1002C9AA4((_QWORD *)(v20 > 1), v21 + 1, 1, v31);
        v31[2] = v21 + 1;
        v22 = &v31[3 * v21];
        v22[4] = v32;
        v22[5] = v15;
        v22[6] = v19;
        v6 = v26;
        a3 = v28;
      }
      ++v8;
      if (v11 == v7)
        goto LABEL_25;
    }
    __break(1u);
LABEL_20:
    if (v6 < 0)
      v23 = v6;
    else
      v23 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
  }
  v31 = _swiftEmptyArrayStorage;
LABEL_25:
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_1001F92A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008402F0, (uint64_t)&nominal type descriptor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(uint64_t a1)
{
  return sub_10001522C(a1, qword_100840260, (uint64_t)&nominal type descriptor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
}

uint64_t *sub_1001F92F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_1001F93E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

char *sub_1001F9454(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

char *sub_1001F951C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1001F9644(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1001F9700(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001F9818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F9824);
}

uint64_t sub_1001F9824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1001F98B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F98C0);
}

uint64_t sub_1001F98C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A630((uint64_t *)&unk_1008380D0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

void sub_1001F9940(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000BE2FC(319, (unint64_t *)&qword_100839D60, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1006AE618;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t *sub_1001F99C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *__dst;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    v92 = v8;
    if (v9((char *)a2, 1, v7))
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = a3[6];
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    v16 = (char *)a1 + v13;
    v17 = (char *)a2 + v13;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = a3[7];
    v19 = a3[8];
    v20 = (char *)a1 + v18;
    v21 = (char *)a2 + v18;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = (char *)a1 + v19;
    v23 = (char *)a2 + v19;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = a3[9];
    v25 = a3[10];
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (char *)a1 + v25;
    v30 = (char *)a2 + v25;
    v31 = *(uint64_t *)((char *)a2 + v25);
    swift_bridgeObjectRetain(v28);
    v95 = v9;
    v96 = v7;
    if (v31)
    {
      *(_QWORD *)v29 = v31;
      *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
      v32 = *((_QWORD *)v30 + 3);
      *((_QWORD *)v29 + 3) = v32;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v33 = *((_OWORD *)v30 + 1);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v33;
    }
    v34 = a3[11];
    v35 = a3[12];
    v36 = (uint64_t *)((char *)a1 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (uint64_t *)((char *)a1 + v35);
    v40 = (uint64_t *)((char *)a2 + v35);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = a3[13];
    v43 = a3[14];
    v44 = (uint64_t *)((char *)a1 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = (uint64_t *)((char *)a1 + v43);
    v48 = (uint64_t *)((char *)a2 + v43);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = a3[15];
    v93 = (char *)a2 + v50;
    __dst = (char *)a1 + v50;
    v51 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v52 + 48);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v46);
    v54 = swift_bridgeObjectRetain(v49);
    if (v53(v93, 1, v51, v54))
    {
      v55 = sub_10001A630(&qword_1008401F0);
      memcpy(__dst, v93, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      v57 = v95;
      v56 = v96;
    }
    else
    {
      v57 = v95;
      v56 = v96;
      if (v95(v93, 1, v96))
      {
        v58 = sub_10001A630((uint64_t *)&unk_1008380D0);
        memcpy(__dst, v93, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(__dst, v93, v96);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v96);
      }
      v59 = *(int *)(v51 + 20);
      v60 = &__dst[v59];
      v61 = &v93[v59];
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v62;
      v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v52 + 56);
      v64 = swift_bridgeObjectRetain(v62);
      v63(__dst, 0, 1, v51, v64);
    }
    v65 = a3[16];
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    if (v57((char *)a2 + v65, 1, v56))
    {
      v68 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v66, v67, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v66, 0, 1, v56);
    }
    v69 = a3[17];
    v70 = a3[18];
    v71 = *(uint64_t *)((char *)a2 + v69);
    *(uint64_t *)((char *)a1 + v69) = v71;
    *((_BYTE *)a1 + v70) = *((_BYTE *)a2 + v70);
    v72 = a3[19];
    v73 = a3[20];
    v74 = (char *)a1 + v72;
    v75 = (char *)a2 + v72;
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v74[8] = v75[8];
    v76 = (uint64_t *)((char *)a1 + v73);
    v77 = (uint64_t *)((char *)a2 + v73);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = a3[21];
    v80 = a3[22];
    v81 = (uint64_t *)((char *)a1 + v79);
    v82 = (uint64_t *)((char *)a2 + v79);
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = (uint64_t *)((char *)a1 + v80);
    v85 = (uint64_t *)((char *)a2 + v80);
    v86 = v85[1];
    *v84 = *v85;
    v84[1] = v86;
    v87 = a3[23];
    v88 = a3[24];
    v89 = *(uint64_t *)((char *)a2 + v87);
    *(uint64_t *)((char *)a1 + v87) = v89;
    *((_BYTE *)a1 + v88) = *((_BYTE *)a2 + v88);
    v90 = a3[26];
    *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    *((_BYTE *)a1 + v90) = *((_BYTE *)a2 + v90);
    *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v89);
  }
  return a1;
}

double sub_1001F9E24(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  double result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[10]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[15];
  v8 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    if (!v6(v7, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    v9 = swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[16];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v6)(v10, 1, v4, v9))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

char *sub_1001F9FD4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t, __n128);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  char *v91;
  char *__dst;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v90 = v7;
  if (v8(a2, 1, v6))
  {
    v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = a3[6];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = &a1[v11];
  v15 = &a2[v11];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[7];
  v17 = a3[8];
  v18 = &a1[v16];
  v19 = &a2[v16];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = &a1[v17];
  v21 = &a2[v17];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = a3[9];
  v23 = a3[10];
  v24 = &a1[v22];
  v25 = &a2[v22];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = &a1[v23];
  v28 = &a2[v23];
  v29 = *(_QWORD *)&a2[v23];
  swift_bridgeObjectRetain(v26);
  v93 = v8;
  v94 = v6;
  if (v29)
  {
    *(_QWORD *)v27 = v29;
    *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
    v30 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 3) = v30;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v31;
  }
  v32 = a3[11];
  v33 = a3[12];
  v34 = &a1[v32];
  v35 = &a2[v32];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  v37 = &a1[v33];
  v38 = &a2[v33];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = a3[13];
  v41 = a3[14];
  v42 = &a1[v40];
  v43 = &a2[v40];
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = &a1[v41];
  v46 = &a2[v41];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = a3[15];
  v91 = &a2[v48];
  __dst = &a1[v48];
  v49 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v50 + 48);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v44);
  v52 = swift_bridgeObjectRetain(v47);
  if (v51(v91, 1, v49, v52))
  {
    v53 = sub_10001A630(&qword_1008401F0);
    memcpy(__dst, v91, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    v55 = v93;
    v54 = v94;
  }
  else
  {
    v55 = v93;
    v54 = v94;
    if (v93(v91, 1, v94))
    {
      v56 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(__dst, v91, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(__dst, v91, v94);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v94);
    }
    v57 = *(int *)(v49 + 20);
    v58 = &__dst[v57];
    v59 = &v91[v57];
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v50 + 56);
    v62 = swift_bridgeObjectRetain(v60);
    v61(__dst, 0, 1, v49, v62);
  }
  v63 = a3[16];
  v64 = &a1[v63];
  v65 = &a2[v63];
  if (v55(&a2[v63], 1, v54))
  {
    v66 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v64, v65, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v64, 0, 1, v54);
  }
  v67 = a3[17];
  v68 = a3[18];
  v69 = *(_QWORD *)&a2[v67];
  *(_QWORD *)&a1[v67] = v69;
  a1[v68] = a2[v68];
  v70 = a3[19];
  v71 = a3[20];
  v72 = &a1[v70];
  v73 = &a2[v70];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
  v74 = &a1[v71];
  v75 = &a2[v71];
  v76 = *((_QWORD *)v75 + 1);
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = v76;
  v77 = a3[21];
  v78 = a3[22];
  v79 = &a1[v77];
  v80 = &a2[v77];
  v81 = *((_QWORD *)v80 + 1);
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *((_QWORD *)v79 + 1) = v81;
  v82 = &a1[v78];
  v83 = &a2[v78];
  v84 = *((_QWORD *)v83 + 1);
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *((_QWORD *)v82 + 1) = v84;
  v85 = a3[23];
  v86 = a3[24];
  v87 = *(_QWORD *)&a2[v85];
  *(_QWORD *)&a1[v85] = v87;
  a1[v86] = a2[v86];
  v88 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  a1[v88] = a2[v88];
  a1[a3[27]] = a2[a3[27]];
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v87);
  return a1;
}

char *sub_1001FA40C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t, __n128);
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v108 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)&a2[v32];
  v109 = v8;
  if (*(_QWORD *)&a1[v32])
  {
    if (v35)
    {
      *(_QWORD *)v33 = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRelease();
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
      v36 = *((_QWORD *)v34 + 3);
      *((_QWORD *)v33 + 3) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001FAAF8(&a1[v32]);
      v38 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v38;
    }
  }
  else if (v35)
  {
    *(_QWORD *)v33 = v35;
    *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
    *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
    v37 = *((_QWORD *)v34 + 3);
    *((_QWORD *)v33 + 3) = v37;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
  }
  else
  {
    v39 = *((_OWORD *)v34 + 1);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *((_OWORD *)v33 + 1) = v39;
  }
  v40 = a3[11];
  v41 = &a1[v40];
  v42 = &a2[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v43 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  v44 = a3[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease();
  v48 = a3[13];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease();
  v52 = a3[14];
  v53 = &a1[v52];
  v54 = &a2[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease();
  v56 = a3[15];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (v63)
    {
      sub_10001C744((uint64_t)v57, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
      goto LABEL_21;
    }
    v64 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v109;
    v68 = v109(v57, 1, v6);
    v69 = v109(v58, 1, v6);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v57, v58, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v57, 0, 1, v6);
LABEL_30:
        v77 = *(int *)(v59 + 20);
        v78 = &v57[v77];
        v79 = &v58[v77];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        *((_QWORD *)v78 + 1) = v80;
        swift_bridgeObjectRetain(v80);
        v67 = swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v108 + 24))(v57, v58, v6);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v108 + 8))(v57, v6);
    }
    v76 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_30;
  }
  if (v63)
  {
LABEL_21:
    v66 = sub_10001A630(&qword_1008401F0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    v64 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v109;
    goto LABEL_31;
  }
  v64 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v109;
  if (v109(v58, 1, v6))
  {
    v65 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v57, v58, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v57, 0, 1, v6);
  }
  v70 = *(int *)(v59 + 20);
  v71 = &v57[v70];
  v72 = &v58[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  *((_QWORD *)v71 + 1) = v73;
  v74 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v60 + 56);
  v75 = swift_bridgeObjectRetain(v73);
  v74(v57, 0, 1, v59, v75);
LABEL_31:
  v81 = a3[16];
  v82 = &a1[v81];
  v83 = &a2[v81];
  v84 = v64(&a1[v81], 1, v6, v67);
  v85 = ((uint64_t (*)(char *, uint64_t, uint64_t))v64)(v83, 1, v6);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 24))(v82, v83, v6);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v108 + 8))(v82, v6);
    goto LABEL_36;
  }
  if (v85)
  {
LABEL_36:
    v86 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v82, v83, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v82, 0, 1, v6);
LABEL_37:
  v87 = a3[17];
  v88 = *(_QWORD *)&a2[v87];
  *(_QWORD *)&a1[v87] = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease();
  a1[a3[18]] = a2[a3[18]];
  v89 = a3[19];
  v90 = &a1[v89];
  v91 = &a2[v89];
  v92 = v91[8];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v90[8] = v92;
  v93 = a3[20];
  v94 = &a1[v93];
  v95 = &a2[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v96 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v94 + 1) = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease();
  v97 = a3[21];
  v98 = &a1[v97];
  v99 = &a2[v97];
  *(_QWORD *)v98 = *(_QWORD *)v99;
  v100 = *((_QWORD *)v99 + 1);
  *((_QWORD *)v98 + 1) = v100;
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease();
  v101 = a3[22];
  v102 = &a1[v101];
  v103 = &a2[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  *((_QWORD *)v102 + 1) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease();
  v105 = a3[23];
  v106 = *(_QWORD *)&a2[v105];
  *(_QWORD *)&a1[v105] = v106;
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRelease();
  a1[a3[24]] = a2[a3[24]];
  a1[a3[25]] = a2[a3[25]];
  a1[a3[26]] = a2[a3[26]];
  a1[a3[27]] = a2[a3[27]];
  return a1;
}

_QWORD *sub_1001FAAF8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return a1;
}

char *sub_1001FAB28(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = a3[6];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = &a1[v11];
  v15 = &a2[v11];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[7];
  v17 = a3[8];
  v18 = &a1[v16];
  v19 = &a2[v16];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = &a1[v17];
  v21 = &a2[v17];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  v26 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  v27 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  v28 = a3[15];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  v31 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = sub_10001A630(&qword_1008401F0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    if (v8(v30, 1, v6))
    {
      v34 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v29, v30, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v29, 0, 1, v6);
    }
    *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v35 = a3[16];
  v36 = &a1[v35];
  v37 = &a2[v35];
  if (v8(&a2[v35], 1, v6))
  {
    v38 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v36, v37, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v36, 0, 1, v6);
  }
  v39 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  a1[v39] = a2[v39];
  v40 = a3[19];
  v41 = a3[20];
  v42 = &a1[v40];
  v43 = &a2[v40];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  *(_OWORD *)&a1[v41] = *(_OWORD *)&a2[v41];
  v44 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v44] = *(_OWORD *)&a2[v44];
  v45 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  a1[v45] = a2[v45];
  v46 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  a1[v46] = a2[v46];
  a1[a3[27]] = a2[a3[27]];
  return a1;
}

char *sub_1001FAE64(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t, __n128);
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v100 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = a3[6];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v101 = v8;
  if (*(_QWORD *)&a1[v29])
  {
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
      *((_QWORD *)v30 + 3) = *((_QWORD *)v31 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1001FAAF8(v30);
  }
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
LABEL_12:
  v33 = a3[11];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = a3[12];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = a3[13];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  v48 = a3[14];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = a3[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      sub_10001C744((uint64_t)v54, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
      goto LABEL_18;
    }
    v61 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v101;
    v65 = v101(v54, 1, v6);
    v66 = v101(v55, 1, v6);
    if (v65)
    {
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v54, v55, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v54, 0, 1, v6);
LABEL_28:
        v68 = *(int *)(v56 + 20);
        v69 = &v54[v68];
        v70 = &v55[v68];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        *(_QWORD *)v69 = v72;
        *((_QWORD *)v69 + 1) = v71;
        v64 = swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v54, v55, v6);
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v100 + 8))(v54, v6);
    }
    v67 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_28;
  }
  if (v60)
  {
LABEL_18:
    v63 = sub_10001A630(&qword_1008401F0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    v61 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v101;
    goto LABEL_29;
  }
  v61 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v101;
  if (v101(v55, 1, v6))
  {
    v62 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v54, v55, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v54, 0, 1, v6);
  }
  *(_OWORD *)&v54[*(int *)(v56 + 20)] = *(_OWORD *)&v55[*(int *)(v56 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_29:
  v73 = a3[16];
  v74 = &a1[v73];
  v75 = &a2[v73];
  v76 = v61(&a1[v73], 1, v6, v64);
  v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v75, 1, v6);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v74, v75, v6);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))(v74, v6);
    goto LABEL_34;
  }
  if (v77)
  {
LABEL_34:
    v78 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v74, v75, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v74, 0, 1, v6);
LABEL_35:
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  swift_bridgeObjectRelease();
  v79 = a3[19];
  a1[a3[18]] = a2[a3[18]];
  v80 = &a1[v79];
  v81 = &a2[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v80[8] = v81[8];
  v82 = a3[20];
  v83 = &a1[v82];
  v84 = &a2[v82];
  v86 = *(_QWORD *)v84;
  v85 = *((_QWORD *)v84 + 1);
  *(_QWORD *)v83 = v86;
  *((_QWORD *)v83 + 1) = v85;
  swift_bridgeObjectRelease();
  v87 = a3[21];
  v88 = &a1[v87];
  v89 = &a2[v87];
  v91 = *(_QWORD *)v89;
  v90 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = v91;
  *((_QWORD *)v88 + 1) = v90;
  swift_bridgeObjectRelease();
  v92 = a3[22];
  v93 = &a1[v92];
  v94 = &a2[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  swift_bridgeObjectRelease();
  v97 = a3[25];
  a1[a3[24]] = a2[a3[24]];
  a1[v97] = a2[v97];
  v98 = a3[27];
  a1[a3[26]] = a2[a3[26]];
  a1[v98] = a2[v98];
  return a1;
}

uint64_t sub_1001FB434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FB440);
}

uint64_t sub_1001FB440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001A630(&qword_1008401F0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 60);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 68));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1001FB4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FB4FC);
}

uint64_t sub_1001FB4FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10001A630(&qword_1008401F0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 60);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 68)) = (a2 - 1);
  return result;
}

void sub_1001FB5A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[24];

  sub_1000BE2FC(319, (unint64_t *)&qword_100839D60, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[0] = v4;
    v7[1] = "\t";
    v7[2] = "\t";
    v7[3] = "\t";
    v7[4] = "\t";
    v7[5] = &unk_1006AE618;
    v7[6] = &unk_1006AE658;
    v7[7] = &unk_1006AE618;
    v7[8] = &unk_1006AE618;
    v7[9] = &unk_1006AE618;
    v7[10] = &unk_1006AE618;
    sub_1000BE2FC(319, (unint64_t *)&unk_100840300, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    if (v6 <= 0x3F)
    {
      v7[11] = *(_QWORD *)(v5 - 8) + 64;
      v7[12] = v4;
      v7[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[14] = &unk_1006AE670;
      v7[15] = "\t";
      v7[16] = &unk_1006AE618;
      v7[17] = &unk_1006AE618;
      v7[18] = &unk_1006AE618;
      v7[19] = &unk_1006AE688;
      v7[20] = &unk_1006AE670;
      v7[21] = &unk_1006AE670;
      v7[22] = &unk_1006AE670;
      v7[23] = &unk_1006AE670;
      swift_initStructMetadata(a1, 256, 24, v7, a1 + 16);
    }
  }
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.List(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(a1[2]);
  v2 = a1[3];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[6]);
  }
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = (_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v7;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v8 = v6[1];
    *(_OWORD *)(a1 + 24) = *v6;
    *(_OWORD *)(a1 + 40) = v8;
  }
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 24);
  v7 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1001FAAF8((_QWORD *)(a1 + 24));
      v10 = *(_OWORD *)(a2 + 40);
      *v5 = *v7;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 40);
    *v5 = *v7;
    *(_OWORD *)(a1 + 40) = v11;
  }
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  if (!v5)
  {
    sub_1001FAAF8((_QWORD *)(a1 + 24));
LABEL_5:
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.List()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.List;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter()
{
  return &type metadata for RDStoreControllerExporter;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s7remindd25RDStoreControllerExporterO21DistributedEvaluationC7AccountVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.Account(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for RDStoreControllerExporter.DistributedEvaluation.Account(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Account()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.ExportResult(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[5] = v10;
  return a1;
}

__n128 initializeWithTake for RDDARequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.ExportResult()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult;
}

unint64_t sub_1001FBE8C()
{
  unint64_t result;

  result = qword_100840390;
  if (!qword_100840390)
  {
    result = swift_getWitnessTable(&unk_1006AEF88, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840390);
  }
  return result;
}

unint64_t sub_1001FBED0()
{
  unint64_t result;

  result = qword_1008403A8;
  if (!qword_1008403A8)
  {
    result = swift_getWitnessTable(&unk_1006AE744, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account);
    atomic_store(result, (unint64_t *)&qword_1008403A8);
  }
  return result;
}

unint64_t sub_1001FBF14()
{
  unint64_t result;

  result = qword_1008403B8;
  if (!qword_1008403B8)
  {
    result = swift_getWitnessTable(&unk_1006AEF38, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008403B8);
  }
  return result;
}

unint64_t sub_1001FBF58()
{
  unint64_t result;

  result = qword_1008403D0;
  if (!qword_1008403D0)
  {
    result = swift_getWitnessTable(&unk_1006AEEE8, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008403D0);
  }
  return result;
}

unint64_t sub_1001FBF9C()
{
  unint64_t result;

  result = qword_1008403D8;
  if (!qword_1008403D8)
  {
    result = swift_getWitnessTable(&unk_1006AE85C, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings);
    atomic_store(result, (unint64_t *)&qword_1008403D8);
  }
  return result;
}

unint64_t sub_1001FBFE0()
{
  unint64_t result;

  result = qword_100840400;
  if (!qword_100840400)
  {
    result = swift_getWitnessTable(&unk_1006AE834, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings);
    atomic_store(result, (unint64_t *)&qword_100840400);
  }
  return result;
}

uint64_t sub_1001FC024(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_1008403E8);
    sub_10009FC50(a2, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FC0A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1001FC0D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x73746E756F636361 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746E756F636361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x614C6D6574737973 && a2 == 0xEE0065676175676ELL)
  {
    v7 = 0xEE0065676175676ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614C6D6574737973, 0xEE0065676175676ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000012)
  {
    v8 = 0x80000001006FC960;
    if (a2 == 0x80000001006FC960)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001006FC960, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001006FC980)
  {
    swift_bridgeObjectRelease(0x80000001006FC980);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001006FC980, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_1001FC2A4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  v5 = sub_10001A630(&qword_1008404F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FBE8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = sub_10001A630(&qword_100840398);
    v34 = 0;
    v13 = sub_1000EAEE8(&qword_1008404F8, &qword_100840398, (void (*)(void))sub_1001FDE84, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v35, v12, &v34, v5, v12, v13);
    v14 = v35;
    v33 = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    v17 = v16;
    v29 = v15;
    v30 = a2;
    v32 = 2;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v20 = v19;
    v28 = v18;
    v31 = 3;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24 = v23;
    v22(v8, v5);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    v25 = v29;
    v26 = v30;
    *v30 = v14;
    v26[1] = v25;
    v27 = v28;
    v26[2] = v17;
    v26[3] = v27;
    v26[4] = v20;
    v26[5] = v21;
    *((_BYTE *)v26 + 48) = v24 & 1;
  }
}

uint64_t sub_1001FC520(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737473696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737473696CLL, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001FC5F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v3 = sub_10001A630(&qword_1008404B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_1001FDDB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
    v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    v11 = sub_10001A630(&qword_1008404C0);
    v15 = 1;
    v12 = sub_1000EAEE8(&qword_1008404C8, &qword_1008404C0, (void (*)(void))sub_1001FDDFC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  return v8;
}

uint64_t sub_1001FC7A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6465726168537369 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465726168537369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x70756F72477369 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70756F72477369, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x80000001006FCA00;
    if (a2 == 0x80000001006FCA00)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001006FCA00, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x7265646E696D6572 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_1001FC9BC(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  int v13;
  __n128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  int v36;
  char v37;

  v5 = sub_10001A630(&qword_100840468);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1001FDCF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_1001F92A0(0, 0, 0, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v35[0]) = 0;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v35, v5, v12);
    LOBYTE(v35[0]) = 1;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v35, v5, v14);
    LOBYTE(v35[0]) = 2;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v35, v5);
    v18 = v17;
    v33 = v16;
    v37 = 3;
    v19 = sub_1001FBF9C();
    swift_bridgeObjectRetain(v18);
    v34 = v18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, &v37, v5, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings, v19);
    HIDWORD(v29) = v15;
    v36 = v13;
    v30 = a2;
    v21 = v35[0];
    v20 = v35[1];
    v23 = v35[2];
    v22 = v35[3];
    v31 = sub_10001A630(&qword_100840478);
    v32 = v22;
    v37 = 4;
    sub_1001FC0A8(v21, v20, v23, v22);
    v24 = sub_1001FDD34(&qword_100840480, &qword_100840488, (uint64_t)&unk_1006AE8D4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v31, &v37, v5, v31, v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = v35[0];
    swift_bridgeObjectRetain(v35[0]);
    swift_bridgeObjectRelease();
    v26 = v34;
    swift_bridgeObjectRetain(v34);
    v27 = v32;
    sub_1001FC0A8(v21, v20, v23, v32);
    sub_1001F92A0(v21, v20, v23, v27);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_1001F92A0(v21, v20, v23, v27);
    swift_bridgeObjectRelease();
    v28 = v30;
    *v30 = v36;
    v28[1] = BYTE4(v29);
    *((_QWORD *)v28 + 1) = v33;
    *((_QWORD *)v28 + 2) = v26;
    *((_QWORD *)v28 + 3) = v21;
    *((_QWORD *)v28 + 4) = v20;
    *((_QWORD *)v28 + 5) = v23;
    *((_QWORD *)v28 + 6) = v27;
    *((_QWORD *)v28 + 7) = v25;
  }
}

uint64_t sub_1001FCD4C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;

  if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    v5 = 0xEC00000065746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001006FC9A0;
    if (a2 == 0x80000001006FC9A0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006FC9A0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001006FC9C0)
  {
    v8 = 0x80000001006FC9C0;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001006FC9C0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x664F796144657564 && a2 == 0xEC0000006B656557)
  {
    v9 = 0xEC0000006B656557;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x664F796144657564, 0xEC0000006B656557, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x80000001006FC9E0;
    if (a2 == 0x80000001006FC9E0)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006FC9E0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6C6153656C746974 && a2 == 0xEF68736148646574)
  {
    v11 = 0xEF68736148646574;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6153656C746974, 0xEF68736148646574, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000015)
  {
    v12 = 0x80000001006FCA00;
    if (a2 == 0x80000001006FCA00)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001006FCA00, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x65636E65746E6573 && a2 == 0xEC00000063655632)
  {
    v13 = 0xEC00000063655632;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E65746E6573, 0xEC00000063655632, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0xD000000000000010)
  {
    v14 = 0x80000001006FCA20;
    if (a2 == 0x80000001006FCA20)
      goto LABEL_52;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006FCA20, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_52:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000011)
  {
    v15 = 0x80000001006FCA40;
    if (a2 == 0x80000001006FCA40)
      goto LABEL_57;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006FCA40, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_63;
  }
  if (a1 == 0x4479616C70736964 && a2 == 0xEB00000000657461)
  {
    v17 = 0xEB00000000657461;
LABEL_69:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4479616C70736964, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_69;
  }
  if (a1 == 0x6974656C706D6F63 && a2 == 0xEE00657461446E6FLL)
  {
    v18 = 0xEE00657461446E6FLL;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974656C706D6F63, 0xEE00657461446E6FLL, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_75;
  }
  if (a1 == 0x7461446D72616C61 && a2 == 0xEA00000000007365)
  {
    v19 = 0xEA00000000007365;
LABEL_81:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446D72616C61, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_81;
  }
  if (a1 == 0x656767616C467369 && a2 == 0xE900000000000064)
  {
    v20 = 0xE900000000000064;
LABEL_87:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656767616C467369, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_87;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v21 = 0xE800000000000000;
LABEL_93:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_93;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001006FCA60)
  {
    v22 = 0x80000001006FCA60;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001006FCA60, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_99;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001006FCA80)
  {
    v23 = 0x80000001006FCA80;
LABEL_105:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006FCA80, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_105;
  }
  if (a1 == 0xD000000000000015)
  {
    v24 = 0x80000001006FCAA0;
    if (a2 == 0x80000001006FCAA0)
      goto LABEL_110;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001006FCAA0, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_110:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if (a1 == 0x656D686361747461 && a2 == 0xEE0073495455746ELL)
  {
    v25 = 0xEE0073495455746ELL;
LABEL_116:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEE0073495455746ELL, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_116;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001006FCAC0)
  {
    v26 = 0x80000001006FCAC0;
LABEL_122:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006FCAC0, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_122;
  }
  if (a1 == 0x746E657261507369 && a2 == 0xEC0000006B736154)
  {
    v27 = 0xEC0000006B736154;
LABEL_128:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E657261507369, 0xEC0000006B736154, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_128;
  }
  if (a1 == 0x7361746275537369 && a2 == 0xE90000000000006BLL)
  {
    v28 = 0xE90000000000006BLL;
LABEL_134:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7361746275537369, 0xE90000000000006BLL, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_134;
  }
  if (a1 == 0x4172657355736168 && a2 == 0xEF79746976697463)
  {
    swift_bridgeObjectRelease(0xEF79746976697463);
    return 23;
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4172657355736168, 0xEF79746976697463, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v29 & 1) != 0)
      return 23;
    else
      return 24;
  }
}

uint64_t sub_1001FD770(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F7A656D6974, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001FD850(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6E69646465626D65 && a2 == 0xEA00000000007367)
  {
    v5 = 0xEA00000000007367;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69646465626D65, 0xEA00000000007367, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65676175676E616CLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001FD9B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v3 = sub_10001A630(&qword_100840428);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_1001FDBC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A630(&qword_100840438);
    v18 = 0;
    v11 = sub_1001FDC0C(&qword_100840440, &qword_100840448, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v10, &v18, v3, v10, v11);
    v7 = v19;
    v17 = 1;
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v16 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1001FDBC8()
{
  unint64_t result;

  result = qword_100840430;
  if (!qword_100840430)
  {
    result = swift_getWitnessTable(&unk_1006AEE98, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840430);
  }
  return result;
}

uint64_t sub_1001FDC0C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_100840438);
    sub_1001FDC94(a2, (uint64_t *)&unk_100844080, a3, a4);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FDC94(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001FDCF0()
{
  unint64_t result;

  result = qword_100840470;
  if (!qword_100840470)
  {
    result = swift_getWitnessTable(&unk_1006AEE48, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840470);
  }
  return result;
}

uint64_t sub_1001FDD34(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_100840478);
    sub_10009FC50(a2, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001FDDB8()
{
  unint64_t result;

  result = qword_1008404B8;
  if (!qword_1008404B8)
  {
    result = swift_getWitnessTable(&unk_1006AEDF8, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008404B8);
  }
  return result;
}

unint64_t sub_1001FDDFC()
{
  unint64_t result;

  result = qword_1008404D0;
  if (!qword_1008404D0)
  {
    result = swift_getWitnessTable(&unk_1006AE7E4, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List);
    atomic_store(result, (unint64_t *)&qword_1008404D0);
  }
  return result;
}

unint64_t sub_1001FDE40()
{
  unint64_t result;

  result = qword_1008404E8;
  if (!qword_1008404E8)
  {
    result = swift_getWitnessTable(&unk_1006AE7BC, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List);
    atomic_store(result, (unint64_t *)&qword_1008404E8);
  }
  return result;
}

unint64_t sub_1001FDE84()
{
  unint64_t result;

  result = qword_100840500;
  if (!qword_100840500)
  {
    result = swift_getWitnessTable(&unk_1006AE76C, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account);
    atomic_store(result, (unint64_t *)&qword_100840500);
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001FDF28 + 4 * byte_1006AE576[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001FDF5C + 4 * byte_1006AE571[v4]))();
}

uint64_t sub_1001FDF5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FDF64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FDF6CLL);
  return result;
}

uint64_t sub_1001FDF78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FDF80);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001FDF84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FDF8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001FDFF4 + 4 * byte_1006AE580[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001FE028 + 4 * byte_1006AE57B[v4]))();
}

uint64_t sub_1001FE028(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE030(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FE038);
  return result;
}

uint64_t sub_1001FE044(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FE04CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001FE050(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE058(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1001FE150 + 4 * byte_1006AE58A[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1001FE184 + 4 * byte_1006AE585[v4]))();
}

uint64_t sub_1001FE184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE18C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FE194);
  return result;
}

uint64_t sub_1001FE1A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FE1A8);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1001FE1AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE1B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys;
}

uint64_t _s7remindd25RDStoreControllerExporterO21DistributedEvaluationC7AccountV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001FE21C + 4 * byte_1006AE594[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001FE250 + 4 * byte_1006AE58F[v4]))();
}

uint64_t sub_1001FE250(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FE260);
  return result;
}

uint64_t sub_1001FE26C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FE274);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001FE278(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE280(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001FE2E8 + 4 * byte_1006AE59E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001FE31C + 4 * byte_1006AE599[v4]))();
}

uint64_t sub_1001FE31C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FE32CLL);
  return result;
}

uint64_t sub_1001FE338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FE340);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001FE344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FE34C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys;
}

unint64_t sub_1001FE36C()
{
  unint64_t result;

  result = qword_100840508;
  if (!qword_100840508)
  {
    result = swift_getWitnessTable(&unk_1006AEA38, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840508);
  }
  return result;
}

unint64_t sub_1001FE3B4()
{
  unint64_t result;

  result = qword_100840510;
  if (!qword_100840510)
  {
    result = swift_getWitnessTable(&unk_1006AEAF0, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840510);
  }
  return result;
}

unint64_t sub_1001FE3FC()
{
  unint64_t result;

  result = qword_100840518;
  if (!qword_100840518)
  {
    result = swift_getWitnessTable(&unk_1006AEBA8, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840518);
  }
  return result;
}

unint64_t sub_1001FE444()
{
  unint64_t result;

  result = qword_100840520;
  if (!qword_100840520)
  {
    result = swift_getWitnessTable(&unk_1006AEC60, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840520);
  }
  return result;
}

unint64_t sub_1001FE48C()
{
  unint64_t result;

  result = qword_100840528;
  if (!qword_100840528)
  {
    result = swift_getWitnessTable(&unk_1006AED18, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840528);
  }
  return result;
}

unint64_t sub_1001FE4D4()
{
  unint64_t result;

  result = qword_100840530;
  if (!qword_100840530)
  {
    result = swift_getWitnessTable(&unk_1006AEDD0, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840530);
  }
  return result;
}

unint64_t sub_1001FE51C()
{
  unint64_t result;

  result = qword_100840538;
  if (!qword_100840538)
  {
    result = swift_getWitnessTable(&unk_1006AED40, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840538);
  }
  return result;
}

unint64_t sub_1001FE564()
{
  unint64_t result;

  result = qword_100840540;
  if (!qword_100840540)
  {
    result = swift_getWitnessTable(&unk_1006AED68, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840540);
  }
  return result;
}

unint64_t sub_1001FE5AC()
{
  unint64_t result;

  result = qword_100840548;
  if (!qword_100840548)
  {
    result = swift_getWitnessTable(&unk_1006AEC88, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840548);
  }
  return result;
}

unint64_t sub_1001FE5F4()
{
  unint64_t result;

  result = qword_100840550;
  if (!qword_100840550)
  {
    result = swift_getWitnessTable(&unk_1006AECB0, &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840550);
  }
  return result;
}

unint64_t sub_1001FE63C()
{
  unint64_t result;

  result = qword_100840558;
  if (!qword_100840558)
  {
    result = swift_getWitnessTable(&unk_1006AEBD0, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840558);
  }
  return result;
}

unint64_t sub_1001FE684()
{
  unint64_t result;

  result = qword_100840560;
  if (!qword_100840560)
  {
    result = swift_getWitnessTable(&unk_1006AEBF8, &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840560);
  }
  return result;
}

unint64_t sub_1001FE6CC()
{
  unint64_t result;

  result = qword_100840568;
  if (!qword_100840568)
  {
    result = swift_getWitnessTable(&unk_1006AEB18, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840568);
  }
  return result;
}

unint64_t sub_1001FE714()
{
  unint64_t result;

  result = qword_100840570;
  if (!qword_100840570)
  {
    result = swift_getWitnessTable(&unk_1006AEB40, &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840570);
  }
  return result;
}

unint64_t sub_1001FE75C()
{
  unint64_t result;

  result = qword_100840578;
  if (!qword_100840578)
  {
    result = swift_getWitnessTable(&unk_1006AEA60, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840578);
  }
  return result;
}

unint64_t sub_1001FE7A4()
{
  unint64_t result;

  result = qword_100840580;
  if (!qword_100840580)
  {
    result = swift_getWitnessTable(&unk_1006AEA88, &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840580);
  }
  return result;
}

unint64_t sub_1001FE7EC()
{
  unint64_t result;

  result = qword_100840588;
  if (!qword_100840588)
  {
    result = swift_getWitnessTable(&unk_1006AE9A8, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840588);
  }
  return result;
}

unint64_t sub_1001FE834()
{
  unint64_t result;

  result = qword_100840590;
  if (!qword_100840590)
  {
    result = swift_getWitnessTable(&unk_1006AE9D0, &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100840590);
  }
  return result;
}

uint64_t sub_1001FE87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100840598);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100840598);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t NSURL.rd_isExcludedFromBackup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  _QWORD v17[4];
  _BYTE v18[40];

  v17[3] = swift_getObjectType();
  v1 = type metadata accessor for URLResourceValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - v8;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v0);
  v10 = sub_10001A630(&qword_1008405B0);
  inited = swift_initStackObject(v10, v18);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = NSURLIsExcludedFromBackupKey;
  v12 = NSURLIsExcludedFromBackupKey;
  v13 = sub_10011F728(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v14);
  URL.resourceValues(forKeys:)(v13);
  v15 = swift_bridgeObjectRelease();
  LOBYTE(inited) = URLResourceValues.isExcludedFromBackup.getter(v15);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return inited & 1;
}

id NSURL.rd_isExcludedFromBackup.setter(char a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  id result;
  _BYTE v14[4];

  v2 = v1;
  v3 = a1 & 1;
  swift_getObjectType();
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for URLResourceValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = objc_msgSend(v2, "rd_isExcludedFromBackup", v10);
  if ((_DWORD)result != (_DWORD)v3)
  {
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter(v3);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);
    URL.setResourceValues(_:)(v12);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_1001FF128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008405B8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008405B8);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001FF1B8(char *a1, char *a2)
{
  return sub_1002B5014(*a1, *a2);
}

Swift::Int sub_1001FF1C4()
{
  char *v0;

  return sub_1004F4AA4(*v0);
}

uint64_t sub_1001FF1CC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000032;
  else
    v2 = 0xD000000000000021;
  if (*v1)
    v3 = 0x80000001006F4E60;
  else
    v3 = 0x80000001006F4E30;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001FF22C(uint64_t a1)
{
  char *v1;

  return sub_1002B20D8(a1, *v1);
}

uint64_t sub_1001FF234@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DFF48, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001FF290(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000032;
  else
    v2 = 0xD000000000000021;
  v3 = 0x80000001006F4E30;
  if (*v1)
    v3 = 0x80000001006F4E60;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001FF2D4(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint32_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE v29[4];
  int out_token;
  uint64_t aBlock[5];
  uint64_t v32;

  v3 = v2;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 36) = -1;
  v5 = a2 & 1;
  *(_BYTE *)(v3 + 32) = a2 & 1;
  out_token = -1;
  if ((a2 & 1) != 0)
    v6 = 0xD000000000000032;
  else
    v6 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v7 = 0x80000001006F4E60;
  else
    v7 = 0x80000001006F4E30;
  v8 = swift_allocObject(&unk_1007E9D98, 24, 7);
  swift_weakInit(v8 + 16, v3);
  v9 = swift_allocObject(&unk_1007E9DC0, 25, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 24) = v5;
  aBlock[4] = (uint64_t)sub_1002001D0;
  v32 = v9;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100435F5C;
  aBlock[3] = (uint64_t)&unk_1007E9DD8;
  v10 = _Block_copy(aBlock);
  v11 = v32;
  v12 = a1;
  swift_release(v11);
  v13 = String.utf8CString.getter(v6, v7);
  swift_bridgeObjectRelease(v7);
  v14 = notify_register_dispatch((const char *)(v13 + 32), &out_token, v12, v10);
  swift_release(v13);
  _Block_release(v10);

  if (v14 || out_token == -1)
  {
    if (qword_100836FA8 != -1)
      swift_once(&qword_100836FA8, sub_1001FF128);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001AAA8(v21, (uint64_t)qword_1008405B8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(18, -1);
      v26 = swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      *(_DWORD *)v25 = 136315394;
      v28 = sub_10001A820(v6, v7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
      swift_bridgeObjectRelease(v7);
      *(_WORD *)(v25 + 12) = 1024;
      LODWORD(v28) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 4);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to register for notifyd notification {notificationName: %s, status: %u}", (uint8_t *)v25, 0x12u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  else
  {
    if (qword_100836FA8 != -1)
      swift_once(&qword_100836FA8, sub_1001FF128);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_1008405B8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      aBlock[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v28 = sub_10001A820(v6, v7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Registered notifyd notification {notificationName: %s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    *(_DWORD *)(v3 + 36) = out_token;
  }
  return v3;
}

void sub_1001FF708(uint64_t a1, uint64_t a2, char a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t aBlock[5];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v4 = a3 & 1;
  v5 = type metadata accessor for REM_os_activity.Options(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v32, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    v11 = swift_allocObject(&unk_1007E9E10, 32, 7);
    *(_BYTE *)(v11 + 16) = v4;
    *(_QWORD *)(v11 + 24) = v10;
    v12 = swift_allocObject(&unk_1007E9E38, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_100200200;
    *(_QWORD *)(v12 + 24) = v11;
    aBlock[4] = (uint64_t)sub_1000098E4;
    v30 = v12;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000098C4;
    aBlock[3] = (uint64_t)&unk_1007E9E50;
    v13 = _Block_copy(aBlock);
    v14 = sub_10001A630((uint64_t *)&unk_10084DB90);
    v15 = swift_allocObject(v14, ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72), *(unsigned __int8 *)(v6 + 80) | 7);
    *(_OWORD *)(v15 + 16) = xmmword_1006A3C00;
    v16 = swift_retain(v10);
    static REM_os_activity.Options.ifNonePresent.getter(v16);
    v31 = v15;
    v17 = sub_10020021C();
    v18 = sub_10001A630((uint64_t *)&unk_10084DBA0);
    v19 = sub_100200264();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v18, v19, v5, v17);
    static REM_os_activity.initiate(_:dso:options:execute:)("notifydEventStream", 18, 2, &_mh_execute_header, v8, v13);
    _Block_release(v13);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v30;
    swift_release(v11);
    swift_release(v20);
  }
  else
  {
    if (qword_100836FA8 != -1)
      swift_once(&qword_100836FA8, sub_1001FF128);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001AAA8(v21, (uint64_t)qword_1008405B8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      *(_DWORD *)v25 = 136315138;
      if (v4)
        v27 = 0xD000000000000032;
      else
        v27 = 0xD000000000000021;
      if (v4)
        v28 = 0x80000001006F4E60;
      else
        v28 = 0x80000001006F4E30;
      v31 = sub_10001A820(v27, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received notifyd notification after event stream was deallocated {name: %s}", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

void sub_1001FFA74(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100836FA8 != -1)
    swift_once(&qword_100836FA8, sub_1001FF128);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_1008405B8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    if ((a1 & 1) != 0)
      v8 = 0xD000000000000032;
    else
      v8 = 0xD000000000000021;
    if ((a1 & 1) != 0)
      v9 = 0x80000001006F4E60;
    else
      v9 = 0x80000001006F4E30;
    v10 = sub_10001A820(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received notifyd notification {name: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_1001FFE54();
}

uint64_t sub_1001FFC20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_100836FA8 != -1)
    swift_once(&qword_100836FA8, sub_1001FF128);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_1008405B8);
  v3 = swift_retain_n(v0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    if (*(_BYTE *)(v1 + 32))
      v8 = 0xD000000000000032;
    else
      v8 = 0xD000000000000021;
    if (*(_BYTE *)(v1 + 32))
      v9 = 0x80000001006F4E60;
    else
      v9 = 0x80000001006F4E30;
    v12 = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_release_n(v1);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deallocating notifyd stream {notificationName: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v10 = *(_DWORD *)(v1 + 36);
  if (v10 != -1)
  {
    notify_cancel(v10);
    *(_DWORD *)(v1 + 36) = -1;
  }
  sub_1000A5C24(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  return v1;
}

uint64_t sub_1001FFE14()
{
  uint64_t v0;

  sub_1001FFC20();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RDNotifydEventStream()
{
  return objc_opt_self(_TtC7remindd20RDNotifydEventStream);
}

void sub_1001FFE54()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *(void (**)(uint64_t))(v0 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = swift_retain(*(_QWORD *)(v1 + 24));
    v2(v4);
    sub_1000A5C24((uint64_t)v2, v3);
  }
  else
  {
    if (qword_100836FA8 != -1)
      swift_once(&qword_100836FA8, sub_1001FF128);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_1008405B8);
    v6 = swift_retain_n(v0, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v14 = v10;
      *(_DWORD *)v9 = 136315138;
      if (*(_BYTE *)(v1 + 32))
        v11 = 0xD000000000000032;
      else
        v11 = 0xD000000000000021;
      if (*(_BYTE *)(v1 + 32))
        v12 = 0x80000001006F4E60;
      else
        v12 = 0x80000001006F4E30;
      v13 = sub_10001A820(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Dropped notification because we don't have an event handler {notificationName: %s}", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for RDNotifydEventStream.NotificationName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002000AC + 4 * byte_1006AF025[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002000E0 + 4 * byte_1006AF020[v4]))();
}

uint64_t sub_1002000E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002000E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002000F0);
  return result;
}

uint64_t sub_1002000FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100200104);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100200108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDNotifydEventStream.NotificationName()
{
  return &type metadata for RDNotifydEventStream.NotificationName;
}

unint64_t sub_100200130()
{
  unint64_t result;

  result = qword_1008406B8;
  if (!qword_1008406B8)
  {
    result = swift_getWitnessTable(&unk_1006AF0FC, &type metadata for RDNotifydEventStream.NotificationName);
    atomic_store(result, (unint64_t *)&qword_1008406B8);
  }
  return result;
}

uint64_t sub_100200174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_1000A5C24(v3, v4);
}

uint64_t sub_100200188()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002001AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1002001D0(uint64_t a1)
{
  uint64_t v1;

  sub_1001FF708(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1002001DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100200200()
{
  uint64_t v0;

  sub_1001FFA74(*(_BYTE *)(v0 + 16));
}

uint64_t sub_10020020C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10020021C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008406C0;
  if (!qword_1008406C0)
  {
    v1 = type metadata accessor for REM_os_activity.Options(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REM_os_activity.Options, v1);
    atomic_store(result, (unint64_t *)&qword_1008406C0);
  }
  return result;
}

unint64_t sub_100200264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008406C8;
  if (!qword_1008406C8)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10084DBA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008406C8);
  }
  return result;
}

uint64_t sub_1002002B8(void (*a1)(id *, uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_1002004E4(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, (unint64_t)sub_1001C1D6C);
}

uint64_t sub_1002002DC(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(id *);
  uint64_t v20;
  char *v21;
  id v22;
  _QWORD *v23;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v18 = sub_10001A630(&qword_100844170);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v23 = _swiftEmptyArrayStorage;
    result = sub_1001C1D98(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v23;
    v17 = a3 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v17)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a3);
      else
        v12 = *(id *)(a3 + 8 * v11 + 32);
      v13 = v12;
      v22 = v12;
      v19(&v22);
      if (v4)
      {
        swift_release(v9);

        return (uint64_t)v9;
      }
      v4 = 0;

      v23 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001C1D98(v14 > 1, v15 + 1, 1);
        v9 = v23;
      }
      ++v11;
      v9[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15, v21, v18);
      if (v8 == v11)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002004C0(void (*a1)(id *, uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_1002004E4(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, (unint64_t)sub_1001C1DC4);
}

uint64_t sub_1002004E4(void (*a1)(id *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), unint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(BOOL, unint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(id *, uint64_t *);
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;

  v7 = v5;
  v24 = a1;
  v25 = a2;
  v23 = a4(0);
  v9 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v11 = (char *)&v20 - v10;
  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v13 = _swiftEmptyArrayStorage;
    if (!v12)
      return (uint64_t)v13;
    v28 = _swiftEmptyArrayStorage;
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a5)(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
      break;
    v20 = (void (*)(BOOL, unint64_t, uint64_t))a5;
    v21 = a3;
    v15 = 0;
    v13 = v28;
    v22 = a3 & 0xC000000000000001;
    while (v12 != v15)
    {
      if (v22)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a3);
      else
        v16 = *(id *)(a3 + 8 * v15 + 32);
      v17 = v16;
      v27 = v16;
      v24(&v27, &v26);
      if (v7)
      {
        swift_release(v13);

        return (uint64_t)v13;
      }
      v7 = 0;

      v28 = v13;
      a5 = v13[2];
      v18 = v13[3];
      if (a5 >= v18 >> 1)
      {
        v20(v18 > 1, a5 + 1, 1);
        v13 = v28;
      }
      ++v15;
      v13[2] = a5 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * a5, v11, v23);
      a3 = v21;
      if (v12 == v15)
        return (uint64_t)v13;
    }
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v19 = a3;
    else
      v19 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a3);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002006D0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  _QWORD *v20;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v6 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v20 = _swiftEmptyArrayStorage;
    sub_1001C1E1C(0, v9, 0);
    v10 = v20;
    v11 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v18(v12);
      if (v4)
        break;
      v4 = 0;
      v20 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001C1E1C(v13 > 1, v14 + 1, 1);
        v10 = v20;
      }
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      v12 += v16;
      if (!--v9)
        return v10;
    }
    swift_release(v10);
  }
  return v10;
}

_QWORD *sub_100200848(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v17 = v9;
      a1(v18, &v17);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v10 = v18[1];
      v19 = v6;
      v13 = v6[2];
      v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_1001C1B0C(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      v6[2] = v13 + 1;
      v14 = &v6[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

_QWORD *sub_10020094C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for RDTimelineEngineDueReminder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_1001C2198(0, v10, 0);
    v11 = v21;
    v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v12 = a3 + v18;
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001C2198(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_100204274((uint64_t)v9, (uint64_t)v11 + v18 + v15 * v13);
      v12 += v13;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

uint64_t sub_100200A9C(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;
  _BYTE v19[8];
  _QWORD *v20;

  v2 = v1;
  v3 = sub_10001A630((uint64_t *)&unk_100840780);
  v4 = sub_1000A5F84(&qword_100846C50, (uint64_t *)&unk_100840780, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  v5 = dispatch thunk of Collection.count.getter(v3, v4);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v7 = v5;
  v20 = _swiftEmptyArrayStorage;
  sub_1001C21F0(0, v5 & ~(v5 >> 63), 0);
  v6 = _swiftEmptyArrayStorage;
  result = dispatch thunk of Collection.startIndex.getter(v3);
  if ((v7 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      v9 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v17, v19, v3, v4);
      v16 = *v10;
      v9(v17, 0);
      a1(&v18, &v16);
      if (v2)
        break;
      v11 = v4;
      v12 = v18;
      v20 = v6;
      v14 = v6[2];
      v13 = v6[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001C21F0(v13 > 1, v14 + 1, 1);
        v6 = v20;
      }
      v6[2] = v14 + 1;
      v6[v14 + 4] = v12;
      v4 = v11;
      dispatch thunk of Collection.formIndex(after:)(v19, v3, v11);
      --v7;
      v2 = 0;
      if (!v7)
        return (uint64_t)v6;
    }
    swift_release(v6);
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100200C48(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  _QWORD *v32;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v32 = _swiftEmptyArrayStorage;
    sub_1001C2124(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(sub_10001A630((uint64_t *)&unk_100843790) - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v24 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(&v26, v9);
      if (v4)
        break;
      v4 = 0;
      v10 = v26;
      v11 = v27;
      v12 = v28;
      v13 = v29;
      v14 = v30;
      v15 = v31;
      v32 = v6;
      v17 = v6[2];
      v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        v23 = v27;
        v22 = v26;
        v19 = v30;
        v21 = v31;
        sub_1001C2124(v16 > 1, v17 + 1, 1);
        v15 = v21;
        v14 = v19;
        v10 = v22;
        v11 = v23;
        v6 = v32;
      }
      v6[2] = v17 + 1;
      v18 = &v6[5 * v17];
      v18[4] = v10;
      *(_OWORD *)(v18 + 5) = v11;
      v18[7] = v12;
      *((_BYTE *)v18 + 64) = v13;
      *((_BYTE *)v18 + 65) = v14;
      *((_BYTE *)v18 + 66) = v15;
      v9 += v24;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

_QWORD *sub_100200DBC(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_100200DD0(a1, a2, a3);
}

_QWORD *sub_100200DD0(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  char v25;
  __int128 v26;
  id v28[3];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  _QWORD *v35;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v35 = _swiftEmptyArrayStorage;
    sub_1001C2124(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = (void **)(a3 + 48);
    while (1)
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      v28[0] = *(v8 - 2);
      v28[1] = v9;
      v28[2] = v10;
      v11 = v28[0];
      v12 = v9;
      v13 = v10;
      a1(&v29, v28);
      if (v4)
        break;

      v14 = v29;
      v15 = v30;
      v16 = v31;
      v17 = v32;
      v18 = v33;
      v19 = v34;
      v35 = v6;
      v21 = v6[2];
      v20 = v6[3];
      if (v21 >= v20 >> 1)
      {
        v26 = v30;
        v25 = v33;
        v23 = v34;
        sub_1001C2124(v20 > 1, v21 + 1, 1);
        v19 = v23;
        v18 = v25;
        v15 = v26;
        v6 = v35;
      }
      v6[2] = v21 + 1;
      v22 = &v6[5 * v21];
      v22[4] = v14;
      *(_OWORD *)(v22 + 5) = v15;
      v22[7] = v16;
      *((_BYTE *)v22 + 64) = v17;
      *((_BYTE *)v22 + 65) = v18;
      *((_BYTE *)v22 + 66) = v19;
      v8 += 3;
      --v5;
      v4 = 0;
      if (!v5)
        return v6;
    }
    swift_release(v6);

  }
  return v6;
}

uint64_t sub_100200F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008406D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008406D0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100200FE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;

  v2 = *a2;
  if (qword_100836FB0 != -1)
    swift_once(&qword_100836FB0, sub_100200F58);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_1008406D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = os_transaction_create("com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent");
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDContactInteractionAlarmProducer received contact event", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_1002011DC(v2);
  oslog = Logger.logObject.getter(v12);
  v13 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v13, "os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }
  swift_unknownObjectRelease(v8);

}

void sub_1002011DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  NSObject *v113;
  uint64_t v114;
  char v115[8];
  _QWORD *v116;
  uint64_t v117;

  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v109 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = __chkstk_darwin(v14);
  v18 = (char *)v103 - v16;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v87 = a1;
    else
      v87 = a1 & 0xFFFFFFFFFFFFFF8;
    v112 = (char *)v103 - v16;
    v108 = (_QWORD *)v2;
    v88 = v17;
    swift_bridgeObjectRetain(a1);
    v89 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease(a1);
    v17 = v88;
    v2 = (uint64_t)v108;
    v18 = v112;
    if (v89)
    {
LABEL_3:
      v107 = v17;
      v108 = (_QWORD *)v2;
      v110 = v12;
      v111 = v11;
      v19 = v18;
      v20 = Date.init()(v15);
      __chkstk_darwin(v20);
      v103[-2] = v113;
      v103[-1] = v19;
      v112 = v19;
      swift_bridgeObjectRetain(a1);
      v21 = (uint64_t)sub_1005CA170((uint64_t (*)(id *))sub_1002040E0, &v103[-4], a1);
      v22 = v21;
      if ((unint64_t)v21 >> 62)
      {
        if (v21 < 0)
          v94 = v21;
        else
          v94 = v21 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v21);
        v95 = _CocoaArrayWrapper.endIndex.getter(v94);
        swift_bridgeObjectRelease(v22);
        if (v95)
        {
LABEL_5:
          sub_10000A388((Class *)((char *)&v113->isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource), *(uint64_t *)((char *)&v113[3].isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource));
          sub_100365D78(a1);
          v24 = v23;
          if (*(_QWORD *)(v23 + 16))
          {
            v103[1] = 0;
            if (qword_100836FB0 != -1)
              swift_once(&qword_100836FB0, sub_100200F58);
            v25 = type metadata accessor for Logger(0);
            v26 = sub_10001AAA8(v25, (uint64_t)qword_1008406D0);
            v27 = swift_bridgeObjectRetain(v24);
            v106 = v26;
            v28 = Logger.logObject.getter(v27);
            v29 = static os_log_type_t.default.getter(v28);
            v30 = os_log_type_enabled(v28, v29);
            v105 = v24;
            if (v30)
            {
              v31 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v31 = 134217984;
              v32 = v105;
              v116 = *(_QWORD **)(v105 + 16);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
              swift_bridgeObjectRelease(v32);
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "DataSource returned alarms for contact interaction. {count: %ld}", v31, 0xCu);
              swift_slowDealloc(v31, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease(v24);
            }
            v46 = Logger.logObject.getter(v33);
            v47 = static os_log_type_t.default.getter(v46);
            if (os_log_type_enabled(v46, v47))
            {
              v48 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v48 = 0;
              _os_log_impl((void *)&_mh_execute_header, v46, v47, "os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}", v48, 2u);
              swift_slowDealloc(v48, -1, -1);
            }

            v104 = os_transaction_create("com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery");
            v49 = *(Class *)((char *)&v113->isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue);
            sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
            v103[0] = v49;
            static DispatchQoS.unspecified.getter(v103[0]);
            v116 = _swiftEmptyArrayStorage;
            v50 = sub_1002040FC((unint64_t *)&qword_10083A990, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
            v51 = sub_10001A630((uint64_t *)&unk_10083DBD0);
            v52 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
            dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v51, v52, v5, v50);
            (*(void (**)(char *, _QWORD, _QWORD *))(v109 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v108);
            v53 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000035, 0x80000001006FCD30, v10, v7, v4, 0);
            v54 = type metadata accessor for REMContactsProvider(0);
            swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
            v109 = REMContactsProvider.init(contactStoreCreator:queue:backgroundQueue:)(sub_100202030, 0, v103[0], v53);
            v55 = sub_100203F74(v22);
            v56 = swift_bridgeObjectRetain_n(v22, 2);
            v57 = Logger.logObject.getter(v56);
            v58 = static os_log_type_t.default.getter(v57);
            if (os_log_type_enabled(v57, v58))
            {
              v59 = swift_slowAlloc(12, -1);
              v108 = v55;
              v60 = (uint8_t *)v59;
              v61 = (_QWORD *)swift_slowAlloc(32, -1);
              v116 = v61;
              *(_DWORD *)v60 = 136315138;
              v62 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
              v63 = swift_bridgeObjectRetain(v22);
              v64 = Array.description.getter(v63, v62);
              v66 = v65;
              swift_bridgeObjectRelease(v22);
              v114 = sub_10001A820(v64, v66, (uint64_t *)&v116);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
              swift_bridgeObjectRelease_n(v22, 2);
              swift_bridgeObjectRelease(v66);
              _os_log_impl((void *)&_mh_execute_header, v57, v58, "Resolving contact names for newlySeenContactReps {newlySeenContactReps: %s}", v60, 0xCu);
              swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v61, -1, -1);
              v67 = v60;
              v55 = v108;
              swift_slowDealloc(v67, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v22, 2);
            }
            sub_10001A630(&qword_100840790);
            v116 = v55;
            v68 = sub_10001A630(&qword_100840798);
            v69 = sub_1000A5F84(&qword_1008407A0, &qword_100840798, (uint64_t)&protocol conformance descriptor for [A]);
            v70 = static Promise.all<A>(_:)(&v116, v68, v69);
            v71 = swift_bridgeObjectRelease(v55);
            v73 = v110;
            v72 = v111;
            v74 = v107;
            v75 = v112;
            (*(void (**)(uint64_t, char *, uint64_t, __n128))(v110 + 16))(v107, v112, v111, v71);
            v76 = *(unsigned __int8 *)(v73 + 80);
            v77 = (v76 + 40) & ~v76;
            v78 = (v13 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
            v79 = (char *)swift_allocObject(&unk_1007E9F28, v78 + 8, v76 | 7);
            v80 = v105;
            *((_QWORD *)v79 + 2) = v22;
            *((_QWORD *)v79 + 3) = v80;
            v81 = v113;
            *((_QWORD *)v79 + 4) = v113;
            (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(&v79[v77], v74, v72);
            v82 = v104;
            *(_QWORD *)&v79[v78] = v104;
            v83 = v81;
            v84 = swift_unknownObjectRetain(v82);
            v85 = (void *)zalgo.getter(v84);
            v86 = dispatch thunk of Promise.then<A>(on:closure:)(v85, sub_1002041DC, v79, &type metadata for () + 1);
            swift_release(v86);
            swift_release(v70);
            swift_release(v79);

            swift_unknownObjectRelease(v82);
            swift_release(v109);
            (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
            return;
          }
          swift_bridgeObjectRelease(v23);
          swift_bridgeObjectRelease(v22);
          if (qword_100836FB0 != -1)
            swift_once(&qword_100836FB0, sub_100200F58);
          v34 = type metadata accessor for Logger(0);
          sub_10001AAA8(v34, (uint64_t)qword_1008406D0);
          v35 = swift_bridgeObjectRetain_n(a1, 2);
          v36 = Logger.logObject.getter(v35);
          v37 = static os_log_type_t.default.getter(v36);
          if (os_log_type_enabled(v36, v37))
          {
            v38 = (uint8_t *)swift_slowAlloc(12, -1);
            v39 = (_QWORD *)swift_slowAlloc(32, -1);
            v116 = v39;
            *(_DWORD *)v38 = 136315138;
            v40 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
            v41 = swift_bridgeObjectRetain(a1);
            v42 = Array.description.getter(v41, v40);
            v44 = v43;
            swift_bridgeObjectRelease(a1);
            v114 = sub_10001A820(v42, v44, (uint64_t *)&v116);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
            swift_bridgeObjectRelease_n(a1, 2);
            swift_bridgeObjectRelease(v44);
            v45 = "DataSource returned no alarms for contact interaction. Done {contacts: %s}";
LABEL_38:
            _os_log_impl((void *)&_mh_execute_header, v36, v37, v45, v38, 0xCu);
            swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v39, -1, -1);
            swift_slowDealloc(v38, -1, -1);

LABEL_40:
            (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v111);
            return;
          }
          goto LABEL_39;
        }
      }
      else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease(v22);
      if (qword_100836FB0 != -1)
        swift_once(&qword_100836FB0, sub_100200F58);
      v96 = type metadata accessor for Logger(0);
      sub_10001AAA8(v96, (uint64_t)qword_1008406D0);
      v97 = swift_bridgeObjectRetain_n(a1, 2);
      v36 = Logger.logObject.getter(v97);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = (_QWORD *)swift_slowAlloc(32, -1);
        v116 = v39;
        *(_DWORD *)v38 = 136315138;
        v98 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
        v99 = swift_bridgeObjectRetain(a1);
        v100 = Array.description.getter(v99, v98);
        v102 = v101;
        swift_bridgeObjectRelease(a1);
        v114 = sub_10001A820(v100, v102, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease(v102);
        v45 = "All contactReps interacted with are recently-checkedIn already. Not producing anything. {contactRepresentation: %s}";
        goto LABEL_38;
      }
LABEL_39:

      swift_bridgeObjectRelease_n(a1, 2);
      goto LABEL_40;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  if (qword_100836FB0 != -1)
    swift_once(&qword_100836FB0, sub_100200F58);
  v90 = type metadata accessor for Logger(0);
  v91 = sub_10001AAA8(v90, (uint64_t)qword_1008406D0);
  v113 = Logger.logObject.getter(v91);
  v92 = static os_log_type_t.default.getter(v113);
  if (os_log_type_enabled(v113, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v113, v92, "didInteract.contacts is empty. Skipping", v93, 2u);
    swift_slowDealloc(v93, -1, -1);
  }

}

id sub_100201D90()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v2]);
    *(_DWORD *)&v0[v2] = -1;
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

BOOL sub_100201ED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v13;
  _QWORD v14[2];

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  sub_10000A388((_QWORD *)(a2 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager), *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager + 24));
  sub_1003A8A50(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000EA320((uint64_t)v6);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v13 = Date.timeIntervalSince(_:)(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v13 >= 10800.0;
  }
}

id sub_100202030()
{
  return objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
}

void sub_100202054(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __n128 v19;
  uint64_t Strong;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD v26[8];
  uint64_t v27;
  char v28[8];

  v8 = *a1;
  v26[2] = a2;
  v26[3] = v8;
  v26[4] = a4;
  v26[5] = a5;
  v26[6] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v8);
  v9 = sub_100200DD0((void (*)(uint64_t *__return_ptr, id *))sub_100204250, (uint64_t)v26, a3);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a2);
  if (qword_100836FB0 != -1)
    swift_once(&qword_100836FB0, sub_100200F58);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_1008406D0);
  v11 = swift_bridgeObjectRetain(v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (!os_log_type_enabled(v12, v13))
  {
LABEL_11:

    v19 = swift_bridgeObjectRelease(v9);
    goto LABEL_14;
  }
  v14 = swift_slowAlloc(22, -1);
  *(_DWORD *)v14 = 134218240;
  v15 = v9[2];
  if (v15)
  {
    v16 = 0;
    v17 = (char *)v9 + 65;
    while ((*v17 & 1) != 0 || !__OFADD__(v16++, 1))
    {
      v17 += 40;
      if (!--v15)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_11;
  }
  v16 = 0;
LABEL_13:
  v27 = v16;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
  *(_WORD *)(v14 + 12) = 2048;
  v27 = v9[2];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
  swift_bridgeObjectRelease(v9);
  _os_log_impl((void *)&_mh_execute_header, v12, v13, "Producing alarms for contact interaction {activeCount: %ld, totalCount: %ld}", (uint8_t *)v14, 0x16u);
  swift_slowDealloc(v14, -1, -1);

LABEL_14:
  Strong = swift_unknownObjectUnownedLoadStrong(&a4[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_delegate], v19);
  v21 = a4;
  sub_100203158(v21, (uint64_t)v9, Strong);

  swift_bridgeObjectRelease(v9);
  v22 = swift_unknownObjectRelease(Strong);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

void sub_1002022E4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;

  v13 = *(void **)a1;
  v14 = *(id *)(a1 + 8);
  if ((unint64_t)a2 >> 62)
    goto LABEL_22;
  v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v16 = v14;
  v17 = v13;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v50 = v14;
  if (v15)
  {
    while (1)
    {
      v47 = a6;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v14 = a5;
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v14 = a5;
        v18 = *(id *)(a2 + 32);
      }
      a6 = v18;
      a5 = (void *)a3[2];
      if (!a5)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(a2);

        a6 = v47;
        v14 = v50;
        goto LABEL_27;
      }
      v44 = a4;
      v45 = (uint64_t)v14;
      v52 = v13;
      v48 = a7;
      a4 = 0;
      v46 = a3;
      a3 += 5;
      v51 = v15 - 1;
      while (1)
      {
        v13 = (void *)*(a3 - 1);
        v20 = *a3;
        swift_bridgeObjectRetain(*a3);
        v21 = objc_msgSend(v52, "contactHandles");
        if (v21)
        {
          a7 = v21;
          v14 = objc_msgSend(v21, "matchesContactRepresentation:", a6);

          if ((v14 & 1) != 0)
          {
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease(a2);
            sub_10000A388((_QWORD *)(v44 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager), *(_QWORD *)(v44+ OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager+ 24));
            v23 = v50;
            sub_1003A8444(a6, v45);

            v24 = 0;
            a7 = v48;
            *v48 = v52;
            v48[1] = v50;
            v48[2] = v13;
            v48[3] = v20;
            goto LABEL_33;
          }
        }
        swift_bridgeObjectRelease(v20);

        if (v51 == a4)
        {
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease(a2);
LABEL_19:
          a6 = v47;
          a7 = v48;
          v14 = v50;
          v13 = v52;
          goto LABEL_27;
        }
        v22 = a4 + 1;
        if ((a2 & 0xC000000000000001) == 0)
          break;
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a2);
LABEL_9:
        a6 = v19;
        a3 += 2;
        if (a5 == (void *)++a4)
        {
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease(a2);

          goto LABEL_19;
        }
      }
      if (v22 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_22:
      if (a2 < 0)
        v25 = a2;
      else
        v25 = a2 & 0xFFFFFFFFFFFFFF8;
      v26 = v14;
      v27 = v13;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a3);
      v15 = _CocoaArrayWrapper.endIndex.getter(v25);
      v50 = v14;
      if (!v15)
        goto LABEL_26;
    }
    v19 = *(id *)(a2 + 8 * a4 + 40);
    goto LABEL_9;
  }
LABEL_26:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
LABEL_27:
  if (qword_100836FB0 != -1)
    swift_once(&qword_100836FB0, sub_100200F58);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_1008406D0);
  v29 = v13;
  swift_bridgeObjectRetain_n(a6, 2);
  v30 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v49 = a7;
    v33 = swift_slowAlloc(22, -1);
    v34 = (_QWORD *)swift_slowAlloc(8, -1);
    v53 = (id)swift_slowAlloc(32, -1);
    v56 = v53;
    *(_DWORD *)v33 = 138412546;
    v35 = objc_msgSend(v30, "objectID");
    v54 = (uint64_t)v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    *v34 = v35;
    v36 = v34;

    *(_WORD *)(v33 + 12) = 2080;
    v37 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
    v38 = swift_bridgeObjectRetain(a6);
    v39 = Array.description.getter(v38, v37);
    v41 = v40;
    swift_bridgeObjectRelease(a6);
    v54 = sub_10001A820(v39, v41, (uint64_t *)&v56);
    v14 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "dataSource returned alarms that don't match any input contactReps {reminderID: %@, newlySeenContactReps: %s}", (uint8_t *)v33, 0x16u);
    v42 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v36, 1, v42);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    v43 = v33;
    a7 = v49;
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a6, 2);
  }
  *a7 = v30;
  a7[1] = v14;
  v24 = 1;
  a7[2] = 0;
  a7[3] = 0;
LABEL_33:
  *((_BYTE *)a7 + 32) = 3;
  *((_BYTE *)a7 + 33) = v24;
  *((_BYTE *)a7 + 34) = 0;
}

void sub_100202804(char a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32_t v11;
  uint32_t v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople;
  if (v1[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] != (a1 & 1))
  {
    v3 = v1;
    if (qword_100836FB0 != -1)
      swift_once(&qword_100836FB0, sub_100200F58);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_1008406D0);
    v6 = v1;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(14, -1);
      *(_DWORD *)v9 = 67109376;
      v22 = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *(_WORD *)(v9 + 8) = 1024;
      v22 = v1[v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "shouldNotifyOfInteractionWithPeople value changed. Updating state {previousValue: %{BOOL}d, value: %{BOOL}d}", (uint8_t *)v9, 0xEu);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

    }
    v10 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken;
    if (notify_is_valid_token(*(_DWORD *)&v6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken]))
    {
      v11 = notify_set_state(*(_DWORD *)&v6[v10], v1[v2]);
      v12 = notify_post(_REMStoreShouldNotifyOfInteractionWithPeopleNotificationName);
      if (!(v11 | v12))
        return;
      v13 = v12;
      v14 = v6;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v15, v16))
      {

        v15 = v14;
        goto LABEL_16;
      }
      v17 = swift_slowAlloc(20, -1);
      *(_DWORD *)v17 = 67109632;
      v22 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *(_WORD *)(v17 + 8) = 1024;
      v22 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *(_WORD *)(v17 + 14) = 1024;
      v22 = v3[v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to update or post update to _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {notifySetStateStatus: %u,  notifyPostStatus: %u, value: %{BOOL}d}", (uint8_t *)v17, 0x14u);
      v18 = v17;
    }
    else
    {
      v19 = v6;
      v15 = Logger.logObject.getter(v19);
      v20 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v20))
      {

        v15 = v19;
        goto LABEL_16;
      }
      v21 = swift_slowAlloc(14, -1);
      *(_DWORD *)v21 = 67109376;
      v22 = *(_DWORD *)&v6[v10];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *(_WORD *)(v21 + 8) = 1024;
      v22 = v3[v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);

      _os_log_impl((void *)&_mh_execute_header, v15, v20, "shouldNotifyOfInteractionWithPeopleNotifyToken is invalid. Failed to update state {token: %d, value: %{BOOL}d}", (uint8_t *)v21, 0xEu);
      v18 = v21;
    }
    swift_slowDealloc(v18, -1, -1);
LABEL_16:

  }
}

uint64_t type metadata accessor for RDContactInteractionAlarmProducer()
{
  return objc_opt_self(_TtC7remindd33RDContactInteractionAlarmProducer);
}

void sub_100202BB8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    if (qword_100836FB0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100836FB0, sub_100200F58);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008406D0);
  v9 = v0;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v24 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = objc_msgSend(v9, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v23 = sub_10001A820(v15, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting people interaction alarm producer {producer: %s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v18 = *sub_10000A388(&v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource], *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource + 24]);
  v19 = swift_retain();
  v20 = sub_100365CB0(v19);
  swift_release(v18);
  v21 = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRelease();
  v22 = v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople];
  v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] = v21 != 0;
  sub_100202804(v22);
}

uint64_t sub_100202E64()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  void **v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t Strong;
  _BYTE *v30;
  _QWORD v31[2];
  _BYTE *v32;
  _QWORD *v33;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (_QWORD *)((char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    v9 = &v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource];
    v10 = *sub_10000A388(&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource], *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource + 24]);
    v11 = swift_retain();
    v12 = sub_100365CB0(v11);
    swift_release(v10);
    v13 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease();
    v14 = v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople];
    v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] = v13 != 0;
    sub_100202804(v14);
    v15 = *sub_10000A388(v9, v9[3]);
    v16 = swift_retain();
    v17 = sub_100365CB0(v16);
    swift_release(v15);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v32 = v0;
      v33 = _swiftEmptyArrayStorage;
      sub_1001C2124(0, v18, 0);
      v19 = v33;
      v31[1] = v17;
      v20 = (void **)(v17 + 40);
      do
      {
        v21 = *(v20 - 1);
        v22 = *v20;
        v33 = v19;
        v24 = v19[2];
        v23 = v19[3];
        v25 = v21;
        v26 = v22;
        if (v24 >= v23 >> 1)
        {
          sub_1001C2124(v23 > 1, v24 + 1, 1);
          v19 = v33;
        }
        v19[2] = v24 + 1;
        v27 = &v19[5 * v24];
        v27[4] = v25;
        v27[5] = v22;
        v27[6] = 0;
        v27[7] = 0;
        *((_WORD *)v27 + 32) = 259;
        *((_BYTE *)v27 + 66) = 0;
        v20 += 3;
        --v18;
      }
      while (v18);
      v28 = swift_bridgeObjectRelease();
      v0 = v32;
    }
    else
    {
      v28 = swift_bridgeObjectRelease();
      v19 = _swiftEmptyArrayStorage;
    }
    Strong = swift_unknownObjectUnownedLoadStrong(&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_delegate], v28);
    v30 = v0;
    sub_100203158(v30, (uint64_t)v19, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002030C0()
{
  return 0xD000000000000021;
}

void sub_1002030DC()
{
  sub_100202BB8();
}

uint64_t sub_1002030FC()
{
  return sub_100202E64();
}

uint64_t sub_10020311C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002040FC(&qword_100840740, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100203158(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[3] = type metadata accessor for RDContactInteractionAlarmProducer();
  v31[4] = sub_1002040FC(&qword_100840748, v6, (uint64_t (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer, (uint64_t)&unk_1006AF1D4);
  v31[0] = a1;
  v7 = qword_1008379A8;
  v8 = a1;
  if (v7 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)qword_1008512D0);
  sub_100018618((uint64_t)v31, (uint64_t)v28);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v27 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = objc_msgSend((id)*sub_10000A388(v28, v29), "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v26 = sub_10001A820(v16, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease(v18);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
    *(_WORD *)(v13 + 12) = 2048;
    v19 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRelease(a2);
    v26 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(a2);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);

    swift_bridgeObjectRelease(a2);
  }
  v20 = *(_QWORD *)(a3 + 24);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = v20 + 32;
    swift_bridgeObjectRetain(v20);
    do
    {
      sub_100018618(v22, (uint64_t)v28);
      v23 = v29;
      v24 = v30;
      sub_10000A388(v28, v29);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v24 + 8))(a2, v31, v23, v24);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
      v22 += 40;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(v20);
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
}

uint64_t sub_100203424(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[3] = type metadata accessor for RDTimeAlarmProducer();
  v30[4] = sub_1002040FC((unint64_t *)&unk_100840750, 255, (uint64_t (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer, (uint64_t)&unk_1006B5454);
  v30[0] = a1;
  v6 = qword_1008379A8;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008512D0);
  sub_100018618((uint64_t)v30, (uint64_t)v27);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v26 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = objc_msgSend((id)*sub_10000A388(v27, v28), "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v25 = sub_10001A820(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    *(_WORD *)(v12 + 12) = 2048;
    v18 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRelease();
    v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);

    swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v19 + 32;
    swift_bridgeObjectRetain(v19);
    do
    {
      sub_100018618(v21, (uint64_t)v27);
      v22 = v28;
      v23 = v29;
      sub_10000A388(v27, v28);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v23 + 8))(a2, v30, v22, v23);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
}

uint64_t sub_1002036F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[3] = type metadata accessor for RDDueDateDeltaAlarmProducer();
  v30[4] = sub_1002040FC(&qword_100840760, 255, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer, (uint64_t)&unk_1006BAA5C);
  v30[0] = a1;
  v6 = qword_1008379A8;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008512D0);
  sub_100018618((uint64_t)v30, (uint64_t)v27);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v26 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = objc_msgSend((id)*sub_10000A388(v27, v28), "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v25 = sub_10001A820(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    *(_WORD *)(v12 + 12) = 2048;
    v18 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRelease();
    v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);

    swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v19 + 32;
    swift_bridgeObjectRetain(v19);
    do
    {
      sub_100018618(v21, (uint64_t)v27);
      v22 = v28;
      v23 = v29;
      sub_10000A388(v27, v28);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v23 + 8))(a2, v30, v22, v23);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
}

uint64_t sub_1002039CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[3] = type metadata accessor for RDVehicleAlarmProducer();
  v30[4] = sub_1002040FC(&qword_100840768, 255, (uint64_t (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer, (uint64_t)&unk_1006BC5D8);
  v30[0] = a1;
  v6 = qword_1008379A8;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008512D0);
  sub_100018618((uint64_t)v30, (uint64_t)v27);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v26 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = objc_msgSend((id)*sub_10000A388(v27, v28), "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v25 = sub_10001A820(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    *(_WORD *)(v12 + 12) = 2048;
    v18 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRelease();
    v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);

    swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v19 + 32;
    swift_bridgeObjectRetain(v19);
    do
    {
      sub_100018618(v21, (uint64_t)v27);
      v22 = v28;
      v23 = v29;
      sub_10000A388(v27, v28);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v23 + 8))(a2, v30, v22, v23);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
}

uint64_t sub_100203CA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[3] = type metadata accessor for RDLocationAlarmProducer();
  v30[4] = sub_1002040FC((unint64_t *)&unk_100840770, 255, (uint64_t (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer, (uint64_t)&unk_1006BFEC8);
  v30[0] = a1;
  v6 = qword_1008379A8;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008512D0);
  sub_100018618((uint64_t)v30, (uint64_t)v27);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v26 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = objc_msgSend((id)*sub_10000A388(v27, v28), "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v25 = sub_10001A820(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease(v17);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    *(_WORD *)(v12 + 12) = 2048;
    v18 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRelease(a2);
    v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(a2);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);

    swift_bridgeObjectRelease(a2);
  }
  v19 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v19 + 32;
    swift_bridgeObjectRetain(v19);
    do
    {
      sub_100018618(v21, (uint64_t)v27);
      v22 = v28;
      v23 = v29;
      sub_10000A388(v27, v28);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v23 + 8))(a2, v30, v22, v23);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease(v19);
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
}

_QWORD *sub_100203F74(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = REMContactsProvider.name(for:)();
      v8 = Promise.errorAsNil()();

      v9 = swift_release(v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1002040BC(uint64_t a1)
{
  swift_unknownObjectUnownedDestroy();
  return a1;
}

BOOL sub_1002040E0(uint64_t *a1)
{
  uint64_t v1;

  return sub_100201ED4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1002040FC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10020413C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002041DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_100202054(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

void sub_100204250(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1002022E4(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(void **)(v2 + 48), a2);
}

uint64_t sub_100204274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDTimelineEngineDueReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002042B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006AF248);
  *(_QWORD *)(v1 + 32) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_100871D30 = v1;
  return result;
}

void sub_100204328(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006AF200);
  v9 = a1;
  v10 = objc_msgSend(v9, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  v12 = sub_1002E746C(KeyPath, (uint64_t)v7);
  v13 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v15 = v38[2];
  v14 = v38[3];
  if (v15 >= v14 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
  v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
  specialized Array._endMutation()(v16);

  v17 = (void *)sub_10000D2BC(v38);
  v18 = objc_msgSend(a2, "persistentStoreOfAccountWithAccountID:", v9);
  if (v18)
  {
    v19 = v18;
    v20 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v21 = swift_allocObject(v20, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v21 + 32) = v19;
    v38 = (_QWORD *)v21;
    specialized Array._endMutation()(v21);
    v22 = (uint64_t)v38;
  }
  else
  {
    v22 = 0;
  }
  if (qword_100836FB8 != -1)
    swift_once(&qword_100836FB8, sub_1002042B8);
  v23 = qword_100871D30;
  if ((unint64_t)qword_100871D30 >> 62)
  {
    if (qword_100871D30 < 0)
      v32 = qword_100871D30;
    else
      v32 = qword_100871D30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(qword_100871D30);
    v33 = sub_10001A630(&qword_100846BC0);
    v25 = _bridgeCocoaArray<A>(_:)(v32, v33);
    swift_bridgeObjectRelease(v23);
    v23 = v25;
  }
  else
  {
    swift_bridgeObjectRetain(qword_100871D30);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v24);
    v25 = v23;
  }
  v26 = (void *)sub_100358FD4(v25, 0, v22, (uint64_t)v17);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  v27 = type metadata accessor for REMCDAccountListData();
  v28 = NSManagedObjectContext.fetch<A>(_:)(v26, v27);
  if (v2)
    goto LABEL_11;
  v29 = v28;
  if (!((unint64_t)v28 >> 62))
  {
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
LABEL_26:
    swift_bridgeObjectRelease(v29);
    v36 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v9);
    swift_willThrow(v36);
LABEL_11:

    return;
  }
  if (v28 < 0)
    v34 = v28;
  else
    v34 = v28 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v28);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v29);
  if (!v35)
    goto LABEL_26;
LABEL_14:
  if ((v29 & 0xC000000000000001) != 0)
  {
    v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v30 = *(id *)(v29 + 32);
LABEL_17:
    v31 = v30;
    objc_msgSend(v30, "orderedIdentifierMap", swift_bridgeObjectRelease(v29).n128_f64[0]);

    return;
  }
  __break(1u);
}

const char *sub_1002046AC()
{
  return "accountID";
}

const char *sub_1002046C0()
{
  return "orderedIdentifierMap";
}

id sub_1002046CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "orderedIdentifierMap");
  *a2 = result;
  return result;
}

id sub_100204704(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setOrderedIdentifierMap:", *a1);
}

uint64_t sub_100204718(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_1008407C8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100204754(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v40 = a2;
  v43 = a3;
  v38 = a4;
  v5 = sub_10001A630(&qword_100839AA0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - v14;
  v16 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v41 = a1;
  v42 = (uint64_t)&v34 - v21;
  v22 = v44;
  v23 = sub_1002049FC(a1);
  if (!v22)
  {
    v44 = v23;
    v34 = v19;
    v35 = v17;
    v36 = v12;
    v37 = v15;
    v43 = v10;
    v24 = objc_msgSend(v39, "fetchResultTokenToDiffAgainst");
    sub_100493C24(v24, v41, v42);

    v25 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 1, 1, v25);
    v26 = v37;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v44, v8, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v27 = v36;
    v28 = v9;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v36, v26, v9);
    v30 = v34;
    v29 = v35;
    v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v42, v16);
    v32 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    v33 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v27, v30, v28, v32, v33);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v16);
  }
}

_QWORD *sub_1002049FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t Subtasks;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v25 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v1 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v3 = (char *)&Subtasks - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v5 = *(_QWORD **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&Subtasks - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&Subtasks - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s10PredicatesOMa(0);
  __chkstk_darwin(v11);
  v13 = (char *)&Subtasks - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v13, v14, 64);
  sub_10000D2C0();
  v16 = v15;
  sub_10001C744((uint64_t)v13, _s10PredicatesOMa);
  v17 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v18 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v19 = v17;
  v20 = Subtasks;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v10, v19, v18);
  swift_storeEnumTagMultiPayload(v10, v8, 2);
  v27 = v5;
  ((void (*)(char *, _QWORD, uint64_t))v5[13])(v7, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v4);
  v28 = v1;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), v20);
  v21 = v26;
  v22 = sub_100496780(v25, (uint64_t)v16, (uint64_t)v10, 0, 0, (uint64_t)v7, (uint64_t)v3, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v21)
  {
    v5 = v22;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v20);
  ((void (*)(char *, uint64_t))v27[1])(v7, v4);
  sub_10001C744((uint64_t)v10, _s9UtilitiesO12SortingStyleOMa);
  return v5;
}

uint64_t sub_100204C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008407D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008407D0);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100204D28(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, void (*a5)(uint64_t))
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v8 = *a2;
  if (qword_100836FC0 != -1)
    swift_once(&qword_100836FC0, sub_100204C98);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_1008407D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    LODWORD(v30) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDFirstUnlockManager: Received hasUnlockedSinceBoot published value {hasUnlockedSinceBoot: %{BOOL}d}", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(id *)(*sub_10000A388(a3, a3[3]) + 56);
  OS_dispatch_queue.sync<A>(execute:)(&v30, sub_100205CAC);

  v16 = v30;
  if (v8 != v30)
  {
    v17 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(14, -1);
      *(_DWORD *)v19 = 67109376;
      LODWORD(v30) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
      *(_WORD *)(v19 + 8) = 1024;
      LODWORD(v30) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  if (v16)
  {
    v20 = *(_QWORD *)(a1 + 24);
    if (v20)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release(v20);
      v21 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v21 = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
    v25 = swift_release(v21);
    if (!*(_QWORD *)(a4 + 24))
    {
      if (qword_1008371A8 != -1)
        swift_once(&qword_1008371A8, sub_1003201E8);
      v30 = xmmword_1006AF2A0;
      v32 = 0;
      v33[0] = 0;
      v31 = 0;
      *(_QWORD *)((char *)v33 + 6) = 0;
      sub_10001B228((uint64_t)&v30, 0x6E755F7473726966, 0xEC0000006B636F6CLL);
    }
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDFirstUnlockManager: Received first unlock event. Executing unlockHandler.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    a5(1);
  }
  else
  {
    v22 = Logger.logObject.getter(v15);
    v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

