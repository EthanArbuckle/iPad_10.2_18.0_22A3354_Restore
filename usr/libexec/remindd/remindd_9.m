uint64_t sub_100568420()
{
  uint64_t v0;

  return sub_10054E7D8(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

uint64_t sub_100568448()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_10056848C(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100559920(a1, a2, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(NSObject **)(v4 + 48));
}

uint64_t sub_1005684A4()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

void sub_1005684E8()
{
  uint64_t v0;

  sub_10054E6B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(NSObject **)(v0 + 64));
}

uint64_t sub_100568504()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100568550(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10054E094(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_100568588()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1005685CC()
{
  uint64_t v0;

  return sub_10054E2E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 64));
}

uint64_t sub_1005685E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100568614()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100568644()
{
  return sub_100568AEC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100568650()
{
  uint64_t v0;

  return sub_10054FB90(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10056865C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100568688(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10054F95C(a1, a2, *(_QWORD *)(v2 + 16), *(dispatch_group_t *)(v2 + 24));
}

uint64_t sub_100568694(uint64_t a1)
{
  uint64_t *v1;

  return sub_10055199C(a1, v1[2], v1[3], v1[4], (uint64_t)&unk_1007FB1B0, (uint64_t)sub_10056591C, (uint64_t)&unk_1007FB1C8);
}

uint64_t sub_1005686C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1005686FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10054F25C(a1, a2, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(id))(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_100568714()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100568750(uint64_t a1, char a2)
{
  return sub_100568764(a1, a2, (uint64_t)&unk_1007FAF30, (uint64_t)sub_1005687DC);
}

uint64_t sub_100568764(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10054F5EC(a1, a2 & 1, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), a3, a4);
}

uint64_t sub_1005687A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1005687DC()
{
  return sub_1005687EC(0, (void (*)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))sub_100560898);
}

uint64_t sub_1005687EC(uint64_t a1, void (*a2)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, char, uint64_t, uint64_t))
{
  uint64_t v2;

  return sub_10054F698(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a1, a2);
}

uint64_t sub_100568824()
{
  return sub_10056896C(64);
}

uint64_t sub_10056882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005689AC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10054F74C);
}

uint64_t sub_100568844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100568880(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10054BAE0(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_BYTE *)(v2 + 40), *(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100568898()
{
  return sub_10056896C(64);
}

uint64_t sub_1005688A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1005688E8(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10054B6C8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_100568920()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_100568954(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1005482C8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD, _QWORD))(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100568964()
{
  return sub_10056896C(64);
}

uint64_t sub_10056896C(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  swift_release(*(_QWORD *)(v1 + 56));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1005689AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;

  return a5(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(unsigned __int8 *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
}

uint64_t sub_1005689E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

double sub_100568A20(char a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10054BDAC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v3 + 48));
}

uint64_t sub_100568A54()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[6]);
  swift_errorRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100568A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_BYTE *)(v2 + 32);
  v5 = *(uint64_t (**)(uint64_t))(v2 + 40);
  v6 = *(_QWORD *)(v2 + 56);
  sub_10054CCA8(a1, a2);
  if ((v4 & 1) == 0)
    sub_100567DA0(v3);
  return v5(v6);
}

uint64_t sub_100568AE0()
{
  return sub_100568AEC((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100568AEC(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t initializeWithCopy for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t assignWithTake for RDAccountUtils.AccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDAccountUtils.AccountInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 45))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDAccountUtils.AccountInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 45) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAccountUtils.AccountInfo()
{
  return &type metadata for RDAccountUtils.AccountInfo;
}

uint64_t storeEnumTagSinglePayload for RDAccountUtils.ACAccountProperty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100568D74 + 4 * byte_1006C2545[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100568DA8 + 4 * byte_1006C2540[v4]))();
}

uint64_t sub_100568DA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100568DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100568DB8);
  return result;
}

uint64_t sub_100568DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100568DCCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100568DD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100568DD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDAccountUtils.ACAccountProperty()
{
  return &type metadata for RDAccountUtils.ACAccountProperty;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoInactivatedICloudCalDavREMAccountError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.DidNotChooseToMigrationCloudKitError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError()
{
  return &type metadata for RDAccountUtils.InactivatedICloudCalDavDataMover.NoCloudKitREMAccountError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.LocalAccountIsEmptyError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.TargetAccountIsNonEmptyError;
}

ValueMetadata *type metadata accessor for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError()
{
  return &type metadata for RDAccountUtils.LocalDataToICloudMover.NoICloudREMAccountError;
}

unint64_t sub_100568E58()
{
  unint64_t result;

  result = qword_10084F9E8;
  if (!qword_10084F9E8)
  {
    result = swift_getWitnessTable(&unk_1006C2760, &type metadata for RDAccountUtils.ACAccountProperty);
    atomic_store(result, (unint64_t *)&qword_10084F9E8);
  }
  return result;
}

uint64_t sub_100568FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t KeyPath;
  void *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  Class isa;
  void *v59;
  id v60;
  uint64_t v61;
  NSString v62;
  Class v63;
  double v64;
  id v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  Class v81;
  id v82;
  id v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSString v99;
  Class v100;
  id v101;
  id v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSString v116;
  Class v117;
  id v118;
  id v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t inited;
  uint64_t v127;
  NSString v128;
  Class v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  id v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  __n128 v148;
  _QWORD *v149;
  uint64_t v150;
  NSString v151;
  Class v152;
  id v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char v167;
  unsigned __int8 v168;
  void *v169;
  void *v170;
  id v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t *, _QWORD);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  NSString v183;
  Class v184;
  double v185;
  id v186;
  id v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSString v193;
  Class v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t result;
  uint64_t v199;
  void (*v200)(char *, uint64_t, uint64_t, uint64_t);
  char *v201;
  char *v202;
  int v203;
  char *v204;
  char *v205;
  int v206;
  uint64_t v207;
  id v208;
  char *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  Swift::Int v214;
  __int128 v215;
  char v216[48];
  char v217[48];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 v221;
  _QWORD *v222;
  _QWORD *v223;

  v1 = v0;
  v212 = type metadata accessor for UUID(0);
  v213 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  *(_QWORD *)&v215 = (char *)&v199 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v202 = (char *)&v199 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v205 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v14 = (char *)&v199 - v13;
  v15 = _s10PredicatesOMa_2(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v18);
  v201 = (char *)&v199 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v199 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v199 - v24;
  v223 = _swiftEmptyArrayStorage;
  sub_10056A8A4(v1, (uint64_t)v17);
  v26 = sub_10001A630(&qword_10084F9F0);
  v206 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v17, 1, v26);
  v209 = v25;
  v207 = v3;
  if (v206 == 1)
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28 = v25;
    v29 = 1;
    v30 = v3;
LABEL_5:
    v200 = v27;
    v27(v28, v29, 1, v30);
    v214 = 0;
LABEL_6:
    v33 = 0;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v17, v8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  v31 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v31 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v32 = v207;
    (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v25, v11, v207);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28 = v25;
    v29 = 0;
    v30 = v32;
    goto LABEL_5;
  }
  if (v31 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v147 = *v11;
    v200 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v200(v25, 1, 1, v207);
    v214 = sub_1002EBC10(v147);
    v148 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v14, v8, v148);
    goto LABEL_6;
  }
  if (v31 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v33 = 1;
    v200 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v200(v25, 1, 1, v207);
    v214 = 0;
LABEL_7:
    KeyPath = swift_getKeyPath(&unk_1006C2928);
    v35 = (void *)sub_1002E7EF4(KeyPath, 1);
    swift_release(KeyPath);
    v36 = v35;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
    v38 = v223[2];
    v37 = v223[3];
    if (v38 >= v37 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1);
    v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
    specialized Array._endMutation()(v39);

    v40 = (id)sub_1000153F4(0);
    v41 = sub_10020A800(0x7265646E696D6572, 0xE800000000000000, 0);
    v43 = v223;
    v44 = v223[2];
    v45 = v44 + 2;
    if (__OFADD__(v44, 2))
    {
      __break(1u);
    }
    else
    {
      v36 = (id)v41;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v223);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v45 > v43[3] >> 1)
      {
        if (v44 <= v45)
          v47 = v44 + 2;
        else
          v47 = v44;
        isUniquelyReferenced_nonNull_native = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v47, 1, v43);
        v223 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v204 = v22;
      specialized Array._endMutation()(isUniquelyReferenced_nonNull_native);
      v40 = v40;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      v45 = v223[2];
      v42 = v223[3];
      if (v45 < v42 >> 1)
      {
LABEL_17:
        v203 = v33;
        v48 = v4;
        v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v40);
        specialized Array._endMutation()(v49);
        v50 = v36;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
        v52 = v223[2];
        v51 = v223[3];
        if (v52 >= v51 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1);
        v53 = 0xD000000000000012;
        v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
        specialized Array._endMutation()(v54);

        v55 = sub_10001A630((uint64_t *)&unk_100839E80);
        v56 = swift_allocObject(v55, 64, 7);
        v211 = xmmword_1006A3C00;
        *(_OWORD *)(v56 + 16) = xmmword_1006A3C00;
        *(_QWORD *)(v56 + 56) = &type metadata for String;
        *(_QWORD *)(v56 + 32) = 0xD000000000000024;
        *(_QWORD *)(v56 + 40) = 0x8000000100708050;
        v57 = String._bridgeToObjectiveC()();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v59 = (void *)objc_opt_self(NSPredicate);
        v60 = objc_msgSend(v59, "predicateWithFormat:argumentArray:", v57, isa);

        v210 = v55;
        v61 = swift_allocObject(v55, 64, 7);
        *(_OWORD *)(v61 + 16) = v211;
        *(_QWORD *)(v61 + 56) = &type metadata for String;
        *(_QWORD *)(v61 + 32) = 0xD000000000000029;
        *(_QWORD *)(v61 + 40) = 0x8000000100708080;
        v62 = String._bridgeToObjectiveC()();
        v63 = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
        v208 = v59;
        v65 = objc_msgSend(v59, "predicateWithFormat:argumentArray:", v62, v63, v64);

        v67 = v223;
        v68 = v223[2];
        v69 = v68 + 2;
        if (__OFADD__(v68, 2))
        {
          __break(1u);
        }
        else
        {
          v70 = swift_isUniquelyReferenced_nonNull_native(v223);
          if (!(_DWORD)v70 || v69 > v67[3] >> 1)
          {
            if (v68 <= v69)
              v71 = v68 + 2;
            else
              v71 = v68;
            v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70, v71, 1, v67);
            v223 = (_QWORD *)v70;
          }
          specialized Array._endMutation()(v70);
          v60 = v60;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
          v69 = v223[2];
          v66 = v223[3];
          v53 = v48;
          LODWORD(v55) = v203;
          if (v69 < v66 >> 1)
          {
LABEL_27:
            v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v60);
            specialized Array._endMutation()(v72);
            v73 = v65;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v73);
            v75 = v223[2];
            v74 = v223[3];
            v76 = v208;
            v77 = (uint64_t)v204;
            if (v75 >= v74 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1);
            v78 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v73);
            specialized Array._endMutation()(v78);

            v79 = swift_allocObject(v210, 64, 7);
            *(_OWORD *)(v79 + 16) = v211;
            *(_QWORD *)(v79 + 56) = &type metadata for String;
            *(_QWORD *)(v79 + 32) = 0xD000000000000010;
            *(_QWORD *)(v79 + 40) = 0x80000001007080B0;
            v80 = String._bridgeToObjectiveC()();
            v81 = Array._bridgeToObjectiveC()().super.isa;
            v82 = objc_msgSend(v76, "predicateWithFormat:argumentArray:", v80, v81, swift_bridgeObjectRelease().n128_f64[0]);

            v83 = v82;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v83);
            v85 = v223[2];
            v84 = v223[3];
            if (v85 >= v84 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1);
            v86 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, v83);
            specialized Array._endMutation()(v86);

            v87 = swift_getKeyPath(&unk_1006C2968);
            v88 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
            v89 = objc_msgSend(v88, "uuid");

            v90 = (uint64_t)v205;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v89);

            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v213 + 56))(v90, 0, 1, v212);
            v91 = sub_10034179C(v87, v90);
            swift_release(v87);
            v92 = v91;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v92);
            v94 = v223[2];
            v93 = v223[3];
            if (v94 >= v93 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1);
            v95 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v94, v92);
            specialized Array._endMutation()(v95);

            v96 = v214;
            v97 = v207;
            if ((_DWORD)v55)
            {
              v98 = swift_allocObject(v210, 64, 7);
              *(_OWORD *)(v98 + 16) = v211;
              *(_QWORD *)(v98 + 56) = &type metadata for String;
              *(_QWORD *)(v98 + 32) = 0xD000000000000012;
              *(_QWORD *)(v98 + 40) = 0x80000001006C2990;
              v99 = String._bridgeToObjectiveC()();
              v100 = Array._bridgeToObjectiveC()().super.isa;
              v101 = objc_msgSend(v76, "predicateWithFormat:argumentArray:", v99, v100, swift_bridgeObjectRelease().n128_f64[0]);

              v102 = v101;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v102);
              v104 = v223[2];
              v103 = v223[3];
              if (v104 >= v103 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1);
              v105 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v104, v102);
              specialized Array._endMutation()(v105);

            }
            if (v206 == 1)
            {
              v106 = swift_getKeyPath(&unk_1006C2A90);
              v107 = swift_allocObject(v210, 96, 7);
              *(_OWORD *)(v107 + 16) = xmmword_1006A3C40;
              v108 = swift_retain();
              v109 = sub_10026BE00(v108);
              v111 = v110;
              swift_release(v106);
              *(_QWORD *)(v107 + 56) = &type metadata for String;
              *(_QWORD *)(v107 + 32) = v109;
              *(_QWORD *)(v107 + 40) = v111;
              v112 = swift_retain();
              v113 = sub_10026BE00(v112);
              v115 = v114;
              swift_release(v106);
              *(_QWORD *)(v107 + 88) = &type metadata for String;
              *(_QWORD *)(v107 + 64) = v113;
              *(_QWORD *)(v107 + 72) = v115;
              v116 = String._bridgeToObjectiveC()();
              v117 = Array._bridgeToObjectiveC()().super.isa;
              v118 = objc_msgSend(v76, "predicateWithFormat:argumentArray:", v116, v117, swift_bridgeObjectRelease().n128_f64[0]);
              swift_release(v106);

              v119 = v118;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v119);
              v121 = v223[2];
              v120 = v223[3];
              if (v121 >= v120 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v120 > 1);
              v122 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v121, v119);
              specialized Array._endMutation()(v122);

            }
            v123 = (uint64_t)v209;
            sub_1000CDA2C((uint64_t)v209, v77);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v77, 1, v97) == 1)
            {
              sub_10000882C(v77, (uint64_t *)&unk_1008380D0);
            }
            else
            {
              v124 = v202;
              (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v202, v77, v97);
              v125 = sub_10001A630(&qword_10084F9F8);
              inited = swift_initStackObject(v125, v216);
              *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
              v127 = swift_allocObject(v210, 64, 7);
              *(_OWORD *)(v127 + 16) = v211;
              *(_QWORD *)(v127 + 56) = &type metadata for String;
              *(_QWORD *)(v127 + 32) = 0xD000000000000012;
              *(_QWORD *)(v127 + 40) = 0x80000001006C2990;
              v128 = String._bridgeToObjectiveC()();
              v129 = Array._bridgeToObjectiveC()().super.isa;
              v130 = objc_msgSend(v76, "predicateWithFormat:argumentArray:", v128, v129, swift_bridgeObjectRelease().n128_f64[0]);

              *(_QWORD *)(inited + 32) = v130;
              v131 = swift_getKeyPath(&unk_1006C2A48);
              v132 = (uint64_t)v201;
              (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v201, v124, v97);
              v200((char *)v132, 0, 1, v97);
              v133 = sub_1003417BC(v131, v132);
              v134 = swift_release(v131);
              *(_QWORD *)(inited + 40) = v133;
              v218 = inited;
              specialized Array._endMutation()(v134);
              v135 = (id)sub_10001CC54(v218);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v135);
              v137 = v223[2];
              v136 = v223[3];
              if (v137 >= v136 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v136 > 1);
              v138 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v137, v135);
              specialized Array._endMutation()(v138);

              (*(void (**)(char *, uint64_t))(v53 + 8))(v124, v97);
              v123 = (uint64_t)v209;
            }
            v139 = v213;
            if (!v96)
              goto LABEL_85;
            v140 = v96 & 0xC000000000000001;
            if ((v96 & 0xC000000000000001) != 0)
            {
              if (v96 >= 0)
                v141 = v96 & 0xFFFFFFFFFFFFFF8;
              else
                v141 = v96;
              v142 = __CocoaSet.count.getter(v141);
              if (v142)
              {
LABEL_52:
                v222 = _swiftEmptyArrayStorage;
                sub_1001C1BE4(0, v142 & ~(v142 >> 63), 0);
                if (v140)
                {
                  if (v96 >= 0)
                    v143 = v96 & 0xFFFFFFFFFFFFFF8;
                  else
                    v143 = v96;
                  v144 = __CocoaSet.startIndex.getter(v143);
                  v146 = 1;
                }
                else
                {
                  v144 = sub_100364E8C(v96);
                  v146 = v157 & 1;
                }
                v158 = v212;
                v219 = v144;
                v220 = v145;
                v221 = v146;
                if (v142 < 0)
                {
                  __break(1u);
                  goto LABEL_95;
                }
                if (v96 >= 0)
                  v159 = v96 & 0xFFFFFFFFFFFFFF8;
                else
                  v159 = v96;
                do
                {
                  sub_100364660(v219, v220, v221, v96);
                  v170 = v169;
                  v171 = objc_msgSend(v169, "uuid");
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v171);

                  v8 = (uint64_t)v222;
                  if ((swift_isUniquelyReferenced_nonNull_native(v222) & 1) == 0)
                  {
                    sub_1001C1BE4(0, *(_QWORD *)(v8 + 16) + 1, 1);
                    v8 = (uint64_t)v222;
                  }
                  v173 = *(_QWORD *)(v8 + 16);
                  v172 = *(_QWORD *)(v8 + 24);
                  if (v173 >= v172 >> 1)
                  {
                    sub_1001C1BE4(v172 > 1, v173 + 1, 1);
                    v8 = (uint64_t)v222;
                  }
                  *(_QWORD *)(v8 + 16) = v173 + 1;
                  (*(void (**)(unint64_t, _QWORD, uint64_t))(v139 + 32))(v8+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(_QWORD *)(v139 + 72) * v173, v215, v158);
                  v222 = (_QWORD *)v8;
                  if (v140)
                  {
                    if ((v221 & 1) == 0)
                    {
                      __break(1u);
                      goto LABEL_97;
                    }
                    v174 = __CocoaSet.Index.handleBitPattern.getter(v219, v220);
                    if (v174)
                      v175 = swift_isUniquelyReferenced_nonNull_native(v174);
                    else
                      v175 = 1;
                    v176 = sub_10001A630(&qword_1008466D8);
                    v177 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v218, v176);
                    __CocoaSet.formIndex(after:isUnique:)(v178, v175, v159);
                    v177(&v218, 0);
                  }
                  else
                  {
                    v160 = v219;
                    v161 = v220;
                    v162 = v221;
                    v163 = sub_10036456C(v219, v220, v221, v214);
                    v165 = v164;
                    v167 = v166;
                    sub_1000E515C(v160, v161, v162);
                    v219 = v163;
                    v220 = v165;
                    v139 = v213;
                    v168 = v167 & 1;
                    v158 = v212;
                    v221 = v168;
                  }
                  --v142;
                  v96 = v214;
                }
                while (v142);
                sub_1000E515C(v219, v220, v221);
                swift_bridgeObjectRelease();
                v149 = v222;
                v123 = (uint64_t)v209;
                if (!v222[2])
                  goto LABEL_61;
LABEL_82:
                v179 = sub_10001A630(&qword_10084F9F8);
                v180 = swift_initStackObject(v179, v217);
                v215 = xmmword_1006A3C40;
                *(_OWORD *)(v180 + 16) = xmmword_1006A3C40;
                v181 = v210;
                v182 = swift_allocObject(v210, 64, 7);
                *(_OWORD *)(v182 + 16) = v211;
                *(_QWORD *)(v182 + 56) = &type metadata for String;
                *(_QWORD *)(v182 + 32) = 0xD000000000000012;
                *(_QWORD *)(v182 + 40) = 0x80000001006C2990;
                v183 = String._bridgeToObjectiveC()();
                v184 = Array._bridgeToObjectiveC()().super.isa;
                *(_QWORD *)&v185 = swift_bridgeObjectRelease().n128_u64[0];
                v186 = v208;
                v187 = objc_msgSend(v208, "predicateWithFormat:argumentArray:", v183, v184, v185);

                *(_QWORD *)(v180 + 32) = v187;
                v188 = swift_getKeyPath(&unk_1006C29E8);
                v189 = sub_1001DF8D0((uint64_t)v149);
                swift_bridgeObjectRelease();
                v190 = swift_allocObject(v181, 96, 7);
                *(_OWORD *)(v190 + 16) = v215;
                v191 = sub_10026BE00(v190);
                *(_QWORD *)(v190 + 56) = &type metadata for String;
                *(_QWORD *)(v190 + 32) = v191;
                *(_QWORD *)(v190 + 40) = v192;
                *(_QWORD *)(v190 + 88) = sub_10001A630(&qword_1008466F8);
                *(_QWORD *)(v190 + 64) = v189;
                v193 = String._bridgeToObjectiveC()();
                v194 = Array._bridgeToObjectiveC()().super.isa;
                v195 = objc_msgSend(v186, "predicateWithFormat:argumentArray:", v193, v194, swift_bridgeObjectRelease().n128_f64[0]);
                swift_release(v188);

                *(_QWORD *)(v180 + 40) = v195;
                v218 = v180;
                specialized Array._endMutation()(v196);
                v142 = (uint64_t)(id)sub_10001CC54(v218);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v142);
                v53 = v223[2];
                v146 = v223[3];
                if (v53 < v146 >> 1)
                {
LABEL_83:
                  v156 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v142);
                  v123 = (uint64_t)v209;
LABEL_84:
                  specialized Array._endMutation()(v156);

LABEL_85:
                  v197 = sub_10000D2BC(v223);
                  sub_10000882C(v123, (uint64_t *)&unk_1008380D0);
                  return v197;
                }
LABEL_95:
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v146 > 1);
                goto LABEL_83;
              }
            }
            else
            {
              v142 = *(_QWORD *)(v96 + 16);
              if (v142)
                goto LABEL_52;
            }
            swift_bridgeObjectRelease();
            v149 = _swiftEmptyArrayStorage;
            if (!_swiftEmptyArrayStorage[2])
            {
LABEL_61:
              swift_bridgeObjectRelease();
              v150 = swift_allocObject(v210, 64, 7);
              *(_OWORD *)(v150 + 16) = v211;
              *(_QWORD *)(v150 + 56) = &type metadata for String;
              *(_QWORD *)(v150 + 32) = 0xD000000000000012;
              *(_QWORD *)(v150 + 40) = 0x80000001006C2990;
              v151 = String._bridgeToObjectiveC()();
              v152 = Array._bridgeToObjectiveC()().super.isa;
              v153 = objc_msgSend(v208, "predicateWithFormat:argumentArray:", v151, v152, swift_bridgeObjectRelease().n128_f64[0]);

              v142 = (uint64_t)v153;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v142);
              v155 = v223[2];
              v154 = v223[3];
              if (v155 >= v154 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v154 > 1);
              v156 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v155, v142);
              goto LABEL_84;
            }
            goto LABEL_82;
          }
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1);
        goto LABEL_27;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1);
    goto LABEL_17;
  }
  if (v31 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v28 = v25;
    v29 = 1;
    v30 = v207;
    goto LABEL_5;
  }
LABEL_97:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v8, v8);
  __break(1u);
  return result;
}

void sub_10056A46C()
{
  sub_1001C1B0C(0, 4, 0);
  __asm { BR              X10; loc_10056A534 }
}

_QWORD *sub_10056A7CC()
{
  _QWORD *result;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  sub_1001C1B0C(0, 1, 0);
  result = _swiftEmptyArrayStorage;
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  if (v2 >= v1 >> 1)
  {
    sub_1001C1B0C(v1 > 1, v2 + 1, 1);
    result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v2 + 1;
  v3 = &_swiftEmptyArrayStorage[2 * v2];
  v3[4] = 0x7265646E696D6572;
  v3[5] = 0xE800000000000000;
  return result;
}

uint64_t _s10PredicatesOMa_2(uint64_t a1)
{
  uint64_t result;

  result = qword_10084FA70;
  if (!qword_10084FA70)
    return swift_getSingletonMetadata(a1, &_s10PredicatesOMn_2);
  return result;
}

uint64_t sub_10056A8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesOMa_2(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *sub_10056A8E8()
{
  return "status";
}

id sub_10056A8F4@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "status");
  *a2 = (_WORD)result;
  return result;
}

id sub_10056A924(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setStatus:", *a1);
}

id sub_10056A938@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10056A970(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

id sub_10056A98C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_10056A9C4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

uint64_t *sub_10056A9F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_10001A630(&qword_10084F9F0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10056AAC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_10001A630(&qword_10084F9F0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_10056AB30(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10001A630(&qword_10084F9F0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10056ABE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10001A630(&qword_10084F9F0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_10000882C((uint64_t)a1, &qword_10084F9F0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_10056ACF0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10001A630(&qword_10084F9F0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10056ADA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10001A630(&qword_10084F9F0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_10000882C((uint64_t)a1, &qword_10084F9F0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10056AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10056AEBC);
}

uint64_t sub_10056AEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10001A630(&qword_10084F9F0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_10056AF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10056AF18);
}

uint64_t sub_10056AF18(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_10001A630(&qword_10084F9F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10056AF6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10084F9F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_10056AFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10084F9F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_10056AFEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for REMRemindersListDataView.ShowCompleted(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_10056B040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FA80);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FA80);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10056B110(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v3 = objc_msgSend(v1, "rawValue");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  REMFeatureFlags.init(rawValue:)(v4, v6, v7);
  v8 = type metadata accessor for REMFeatureFlags(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1, 1, v8) == 1)
  {
    if (qword_100837890 != -1)
      swift_once(&qword_100837890, sub_10056B040);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084FA80);
    v18 = v1;
    v10 = Logger.logObject.getter(v18);
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v20 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = objc_msgSend(v18, "rawValue");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v19 = sub_10001A820(v15, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDFeatureFlagsObjCWrapper: Attempt to unwrap to a feature flag with unknown rawValue: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10056B360(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = objc_msgSend(v2, "rawValue");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  REMFeatureFlags.init(rawValue:)(v5, v7, v8);
  v9 = type metadata accessor for REMFeatureFlags(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, 1, v9) == 1)
  {
    if (qword_100837890 != -1)
      swift_once(&qword_100837890, sub_10056B040);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_10084FA80);
    v11 = swift_unknownObjectRetain_n(v2, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v21 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = objc_msgSend(v2, "rawValue");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20 = sub_10001A820(v17, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_unknownObjectRelease_n(v2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDFeatureFlagsObjCWrapper: Attempt to unwrap to a feature flag with unknown rawValue: %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(v2, 2);
    }
  }
}

Swift::Bool __swiftcall RDFeatureFlagsObjCWrapper.isEnabled()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v0 = sub_10001A630(&qword_10084FA98);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10056B110((uint64_t)v2);
  v3 = type metadata accessor for REMFeatureFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)v5 == 1)
  {
    sub_10056C050((uint64_t)v2);
    v6 = 0;
  }
  else
  {
    v6 = REMFeatureFlags.isEnabled.getter(v5);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v6 & 1;
}

id sub_10056B844()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id _sSo25RDFeatureFlagsObjCWrapperC7reminddE014wrappedFeatureB04withSo010REMFeaturebC9CWrapping_pSgSS_tFZ_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  id v21;
  NSString v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = sub_10001A630(&qword_10084FA98);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)v24 - v8;
  v10 = swift_bridgeObjectRetain(a2);
  REMFeatureFlags.init(rawValue:)(a1, a2, v10);
  v11 = type metadata accessor for REMFeatureFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v9, 1, v11) == 1)
  {
    if (qword_100837890 != -1)
      swift_once(&qword_100837890, sub_10056B040);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_10084FA80);
    swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v28 = v25;
      v26 = v12;
      *(_DWORD *)v18 = 136315138;
      v24[1] = v18 + 4;
      swift_bridgeObjectRetain(a2);
      v27 = sub_10001A820(a1, a2, &v28);
      v12 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDFeatureFlagsObjCWrapper: Attempt to wrap a feature flag with unknown rawValue: %s", v18, 0xCu);
      v19 = v25;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  sub_10056C0B0((uint64_t)v9, (uint64_t)v6);
  if (v13(v6, 1, v11) == 1)
  {
    sub_10056C050((uint64_t)v9);
    sub_10056C050((uint64_t)v6);
    return 0;
  }
  else
  {
    REMFeatureFlags.rawValue.getter();
    v21 = objc_allocWithZone((Class)RDFeatureFlagsObjCWrapper);
    v22 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v21, "initWithRawValue:", v22, swift_bridgeObjectRelease().n128_f64[0]);

    sub_10056C050((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
  }
  return v20;
}

void _sSo25RDFeatureFlagsObjCWrapperC7reminddE17temporaryOverride018withEnabledFeatureB008disabledjB0So010REMFeatureb9TemporaryG12ObjcWrapping_pSaySo0lbC9CWrapping_pG_AItFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  objc_super v57;

  v4 = sub_10001A630(&qword_10084FA98);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - v8;
  v10 = type metadata accessor for REMFeatureFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v56 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v52 = (char *)&v49 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v49 - v16;
  __chkstk_darwin(v18);
  v53 = (char *)&v49 - v19;
  v54 = a2;
  if (!((unint64_t)a1 >> 62))
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v20)
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRelease();
    v22 = _swiftEmptyArrayStorage;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_17;
    goto LABEL_36;
  }
  if (a1 < 0)
    v38 = a1;
  else
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v39 = v38;
  a2 = v54;
  v20 = _CocoaArrayWrapper.endIndex.getter(v39);
  if (!v20)
    goto LABEL_35;
LABEL_3:
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_43;
  }
  v21 = 0;
  v55 = a1 & 0xC000000000000001;
  v22 = _swiftEmptyArrayStorage;
  v50 = v17;
  v51 = a1;
  do
  {
    if (v55)
    {
      v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 8 * v21 + 32);
      swift_unknownObjectRetain(v23);
    }
    sub_10056B360((uint64_t)v9);
    swift_unknownObjectRelease(v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_10056C050((uint64_t)v9);
    }
    else
    {
      v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v25 = v53;
      v24(v53, v9, v10);
      v24(v17, v25, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        v22 = (_QWORD *)sub_1002CAC58(0, v22[2] + 1, 1, (unint64_t)v22);
      v27 = v22[2];
      v26 = v22[3];
      if (v27 >= v26 >> 1)
        v22 = (_QWORD *)sub_1002CAC58(v26 > 1, v27 + 1, 1, (unint64_t)v22);
      v22[2] = v27 + 1;
      v28 = (unint64_t)v22
          + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(_QWORD *)(v11 + 72) * v27;
      v17 = v50;
      v24((char *)v28, v50, v10);
      a1 = v51;
    }
    ++v21;
  }
  while (v20 != v21);
  swift_bridgeObjectRelease();
  a2 = v54;
  if (!(v54 >> 62))
  {
LABEL_17:
    v29 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v29)
      goto LABEL_18;
LABEL_40:
    v32 = (char *)_swiftEmptyArrayStorage;
LABEL_41:
    v42 = swift_bridgeObjectRelease();
    v43 = static REMFeatureFlags.override(enabled:disabled:)(v22, v32, v42);
    v45 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = (objc_class *)type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper();
    v47 = (char *)objc_allocWithZone(v46);
    v48 = (uint64_t *)&v47[OBJC_IVAR____TtC7remindd42RDFeatureFlagsTemporaryOverrideObjcWrapper_backing];
    *v48 = v43;
    v48[1] = v45;
    v57.receiver = v47;
    v57.super_class = v46;
    objc_msgSendSuper2(&v57, "init");
    return;
  }
LABEL_36:
  if (a2 < 0)
    v40 = v54;
  else
    v40 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v54);
  v41 = v40;
  a2 = v54;
  v29 = _CocoaArrayWrapper.endIndex.getter(v41);
  if (!v29)
    goto LABEL_40;
LABEL_18:
  if (v29 >= 1)
  {
    v30 = 0;
    v31 = a2 & 0xC000000000000001;
    v32 = (char *)_swiftEmptyArrayStorage;
    v55 = v29;
    do
    {
      if (v31)
      {
        v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30, a2);
      }
      else
      {
        v33 = *(_QWORD *)(a2 + 8 * v30 + 32);
        swift_unknownObjectRetain(v33);
      }
      sub_10056B360((uint64_t)v6);
      swift_unknownObjectRelease(v33);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
      {
        sub_10056C050((uint64_t)v6);
      }
      else
      {
        v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v35 = v52;
        v34(v52, v6, v10);
        v34(v56, v35, v10);
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          v32 = (char *)sub_1002CAC58(0, *((_QWORD *)v32 + 2) + 1, 1, (unint64_t)v32);
        v37 = *((_QWORD *)v32 + 2);
        v36 = *((_QWORD *)v32 + 3);
        if (v37 >= v36 >> 1)
          v32 = (char *)sub_1002CAC58(v36 > 1, v37 + 1, 1, (unint64_t)v32);
        *((_QWORD *)v32 + 2) = v37 + 1;
        v34(&v32[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v37], v56, v10);
        a2 = v54;
        v29 = v55;
      }
      ++v30;
    }
    while (v29 != v30);
    goto LABEL_41;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_10056C050(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_10084FA98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RDFeatureFlagsTemporaryOverrideObjcWrapper()
{
  return objc_opt_self(_TtC7remindd42RDFeatureFlagsTemporaryOverrideObjcWrapper);
}

uint64_t sub_10056C0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10084FA98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056C0F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  void *v37;
  Class isa;
  Class v39;
  NSString v40;
  NSString v41;
  NSURL *v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  id v46;
  id v47;
  NSString v48;
  void (*v49)(char *, uint64_t);
  void *v51;
  uint64_t v52;
  NSString v53;
  uint64_t v54;
  void *v55;
  uint64_t ObjCClassFromMetadata;
  NSString v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  double v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  NSString v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSString v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  void *v79;
  Swift::String v80;
  NSString v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  id ObjectType;
  id v96;
  unint64_t v97;

  v5 = v4;
  v89 = a4;
  v90 = a2;
  v91 = a3;
  v92 = a1;
  ObjectType = (id)swift_getObjectType();
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v86 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v93 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v86 - v16;
  *(_QWORD *)&v19 = __chkstk_darwin(v18).n128_u64[0];
  v21 = (char *)&v86 - v20;
  v22 = objc_msgSend(v5, "identifier", v19);
  if (v22)
  {
    v23 = v22;
    v94 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v24 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v24(v11, v17, v12);
    v25 = v12;
    v26 = v13;
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v27(v11, 0, 1, v25);
    v88 = v26;
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v28(v11, 1, v25) != 1)
    {
      v24(v94, v11, v25);
      v29 = objc_msgSend(v5, "account");
      if (!v29)
      {
        v55 = (void *)objc_opt_self(REMError);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
        v57 = String._bridgeToObjectiveC()();
        objc_msgSend(v55, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v57);

        swift_willThrow(v58);
        return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v94, v25);
      }
      v30 = v25;
      v87 = v29;
      v31 = objc_msgSend(v29, "identifier");
      if (v31)
      {
        v32 = v31;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

        v24(v8, v17, v30);
        v27(v8, 0, 1, v30);
        v33 = v30;
        if (v28(v8, 1, v30) != 1)
        {
          v34 = v93;
          v24(v93, v8, v30);
          static REMFileDigester.sha512Sum(url:)(v92);
          if (v35)
          {
            v36 = objc_msgSend(v5, "storeControllerManagedObjectContext");
            if (v36)
            {
              v37 = v36;
              v86 = objc_msgSend(v36, "storeController");
              if (v86)
              {
                ObjectType = v37;
                isa = UUID._bridgeToObjectiveC()().super.isa;
                v39 = UUID._bridgeToObjectiveC()().super.isa;
                v40 = String._bridgeToObjectiveC()();
                v41 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                URL._bridgeToObjectiveC()(v42);
                v44 = v43;
                v96 = 0;
                v45 = objc_msgSend(v86, "updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:", isa, v39, v40, v41, v43, v89 & 1, &v96);

                v46 = v96;
                if ((v45 & 1) != 0)
                {
                  v47 = v96;
                  v48 = String._bridgeToObjectiveC()();
                  objc_msgSend(v5, "setFileName:", v48);

                  v49 = *(void (**)(char *, uint64_t))(v88 + 8);
                  v49(v93, v33);
                  return ((uint64_t (*)(char *, uint64_t))v49)(v94, v33);
                }
                v84 = v96;
                _convertNSErrorToError(_:)(v46);

                swift_willThrow(v85);
                v83 = v86;
                goto LABEL_25;
              }
              swift_bridgeObjectRelease();
              v74 = (void *)objc_opt_self(REMError);
              v75 = swift_getObjCClassFromMetadata(ObjectType);
              v76 = String._bridgeToObjectiveC()();
              objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", v75, v76);

              swift_willThrow(v77);
            }
            else
            {
              swift_bridgeObjectRelease();
              v70 = (void *)objc_opt_self(REMError);
              v71 = swift_getObjCClassFromMetadata(ObjectType);
              v72 = String._bridgeToObjectiveC()();
              objc_msgSend(v70, "unexpectedNilPropertyWithClass:property:", v71, v72);

              swift_willThrow(v73);
            }
            v78 = *(void (**)(char *, uint64_t))(v88 + 8);
            v78(v34, v33);
            return ((uint64_t (*)(char *, uint64_t))v78)(v94, v33);
          }
          v96 = 0;
          v97 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          *(_QWORD *)&v63 = swift_bridgeObjectRelease().n128_u64[0];
          v96 = (id)0xD000000000000020;
          v97 = 0x8000000100708160;
          v64 = objc_msgSend(v5, "remObjectID", v63);
          if (v64)
          {
            v65 = v64;
            v66 = objc_msgSend(v64, "stringRepresentation");

            v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
            v69 = v68;

          }
          else
          {
            v69 = (void *)0xE300000000000000;
            v67 = 4079420;
          }
          v79 = (void *)objc_opt_self(REMError);
          v80._countAndFlagsBits = v67;
          v80._object = v69;
          String.append(_:)(v80);
          swift_bridgeObjectRelease();
          v81 = String._bridgeToObjectiveC()();
          objc_msgSend(v79, "internalErrorWithDebugDescription:", v81, swift_bridgeObjectRelease().n128_f64[0]);

          swift_willThrow(v82);
          v83 = v87;
LABEL_25:

          v78 = *(void (**)(char *, uint64_t))(v88 + 8);
          v78(v93, v33);
          return ((uint64_t (*)(char *, uint64_t))v78)(v94, v33);
        }
      }
      else
      {
        v27(v8, 1, 1, v25);
        v33 = v25;
      }
      sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
      v59 = (void *)objc_opt_self(REMError);
      v60 = swift_getObjCClassFromMetadata(ObjectType);
      v61 = String._bridgeToObjectiveC()();
      objc_msgSend(v59, "unexpectedNilPropertyWithClass:property:", v60, v61);

      swift_willThrow(v62);
      return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v94, v33);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
  v51 = (void *)objc_opt_self(REMError);
  v52 = swift_getObjCClassFromMetadata(ObjectType);
  v53 = String._bridgeToObjectiveC()();
  objc_msgSend(v51, "unexpectedNilPropertyWithClass:property:", v52, v53);

  return swift_willThrow(v54);
}

uint64_t sub_10056C940@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::Int v30;
  double v31;
  id v32;
  void *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  unsigned int v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  Class isa;
  NSUUID v61;
  Class v62;
  id v63;
  Class v64;
  void (*v65)(char *, char *, uint64_t);
  id v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  NSString v72;
  uint64_t v73;
  void *v74;
  uint64_t ObjCClassFromMetadata;
  NSString v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  id ObjectType;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v3 = v1;
  ObjectType = (id)swift_getObjectType();
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v80 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v84 = v14;
  v85 = v15;
  __chkstk_darwin(v14);
  v82 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v80 - v18;
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v83 = (char *)&v80 - v22;
  v23 = objc_msgSend(v3, "attachmentTypeRawValue", v21);
  if (!v23)
    goto LABEL_12;
  v24 = v23;
  v25 = a1;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v86 = v2;
  v28 = v27;

  v29._countAndFlagsBits = v26;
  a1 = v25;
  v29._object = v28;
  v30 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCC70, v29);
  *(_QWORD *)&v31 = swift_bridgeObjectRelease().n128_u64[0];
  if ((unint64_t)(v30 - 1) > 1)
    goto LABEL_12;
  v32 = objc_msgSend(v3, "identifier", v31);
  if (!v32)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v13, 1, 1, v84);
    goto LABEL_10;
  }
  v33 = v32;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

  v34 = v85;
  v35 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
  v36 = v19;
  v37 = v84;
  v35(v13, v36, v84);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v38(v13, 0, 1, v37);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v39(v13, 1, v37) == 1)
  {
LABEL_10:
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
LABEL_11:
    a1 = v25;
LABEL_12:
    v49 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(a1, 1, 1, v49);
  }
  v40 = v35;
  v41 = v83;
  v80 = v40;
  v40(v83, v13, v37);
  v42 = objc_msgSend(v3, "fileName");
  if (!v42)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v41, v37);
    goto LABEL_11;
  }
  v43 = v42;
  v44 = objc_msgSend(v3, "account");
  if (!v44)
  {
    v51 = v84;
    v38(v10, 1, 1, v84);
    a1 = v25;
    v52 = v85;
    v53 = v83;
LABEL_17:

    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
    goto LABEL_12;
  }
  v45 = v44;
  v46 = v43;
  v47 = objc_msgSend(v44, "identifier");

  if (v47)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

    v48 = 0;
  }
  else
  {
    v48 = 1;
  }
  v51 = v84;
  v43 = v46;
  v54 = v80;
  v38(v7, v48, 1, v84);
  sub_1000A5CA8((uint64_t)v7, (uint64_t)v10, (uint64_t *)&unk_100839C80);
  v55 = v39(v10, 1, v51);
  a1 = v25;
  v52 = v85;
  v53 = v83;
  if (v55 == 1)
    goto LABEL_17;
  v54(v82, v10, v51);
  v56 = objc_msgSend(v3, "storeControllerManagedObjectContext");
  if (v56)
  {
    v57 = v56;
    v58 = objc_msgSend(v56, "storeController");
    if (v58)
    {
      v59 = v58;
      v80 = (void (*)(char *, char *, uint64_t))v43;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v61.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      ObjectType = v57;
      v62 = v61.super.isa;
      v63 = objc_msgSend(v3, "sha512Sum");
      v64 = isa;
      v65 = v80;
      v66 = objc_msgSend(v59, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v62, v80, v63);

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v67 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68 = v84;
      v67(v82, v84);
      v67(v53, v68);
      v69 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(a1, 0, 1, v69);
    }

    v74 = (void *)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
    v76 = String._bridgeToObjectiveC()();
    objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v76);

    swift_willThrow(v77);
  }
  else
  {

    v70 = (void *)objc_opt_self(REMError);
    v71 = swift_getObjCClassFromMetadata(ObjectType);
    v72 = String._bridgeToObjectiveC()();
    objc_msgSend(v70, "unexpectedNilPropertyWithClass:property:", v71, v72);

    swift_willThrow(v73);
  }
  v78 = *(void (**)(char *, uint64_t))(v52 + 8);
  v79 = v84;
  v78(v82, v84);
  return ((uint64_t (*)(char *, uint64_t))v78)(v53, v79);
}

uint64_t sub_10056CF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FB38);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FB38);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t static REMCDSavedAttachment.cdEntityName.getter()
{
  return 0xD000000000000014;
}

Swift::Void __swiftcall REMCDSavedAttachment.prepareForDeletion()()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t MetatypeMetadata;
  uint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  char *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  char *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  NSString v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  double v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  objc_class **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  objc_class *v89;
  uint64_t v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  id v119;
  uint64_t v120;
  void (*v121)(uint64_t, char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  id v124;
  char *v125;
  uint64_t v126;
  char *v127;
  Class isa;
  char *v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  objc_class *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  char *v136;
  id v137;
  Class v138;
  __n128 v139;
  uint64_t v140;
  id v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  objc_class *v149;
  objc_class *v150;
  _OWORD v151[2];
  objc_class *v152;
  _QWORD v153[3];
  objc_super v154;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v141 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v147 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v141 - v13;
  __chkstk_darwin(v15);
  v148 = (uint64_t)&v141 - v16;
  *(_QWORD *)&v18 = __chkstk_darwin(v17).n128_u64[0];
  v20 = (char *)&v141 - v19;
  v154.receiver = v1;
  v154.super_class = ObjectType;
  v149 = ObjectType;
  objc_msgSendSuper2(&v154, "prepareForDeletion", v18);
  v21 = objc_msgSend(v1, "attachmentTypeRawValue");
  if (!v21)
    return;
  v22 = v21;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCC70, v26);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v27 - 1) > 1)
    return;
  v142 = v14;
  v145 = v10;
  if (qword_100837898 != -1)
    swift_once(&qword_100837898, sub_10056CF5C);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10001AAA8(v28, (uint64_t)qword_10084FB38);
  v30 = v1;
  v146 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v143 = v9;
    v144 = v20;
    v33 = swift_slowAlloc(22, -1);
    v141 = (id)swift_slowAlloc(64, -1);
    *(_QWORD *)&v151[0] = v141;
    *(_DWORD *)v33 = 136446466;
    v152 = v149;
    MetatypeMetadata = swift_getMetatypeMetadata(v149);
    v35 = String.init<A>(describing:)(&v152, MetatypeMetadata);
    v152 = (objc_class *)sub_10001A820(v35, v36, (uint64_t *)v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
    *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v33 + 12) = 2082;
    v38 = objc_msgSend(v30, "remObjectID", v37);
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "description");

      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

    }
    else
    {
      v41 = 7104878;
      v43 = 0xE300000000000000;
    }
    v152 = (objc_class *)sub_10001A820(v41, v43, (uint64_t *)v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s:prepareForDeletion() {savedAttachmentID: %{public}s}", (uint8_t *)v33, 0x16u);
    v44 = v141;
    swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v9 = v143;
    v20 = v144;
  }
  else
  {

  }
  v45 = (char *)objc_msgSend(v30, "storeControllerManagedObjectContext");
  if (v45)
  {
    v144 = v45;
    v46 = objc_msgSend(v30, "identifier");
    if (v46)
    {
      v47 = v46;
      v48 = v148;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v49 = v145;
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 32);
      v50(v8, v48, v9);
      v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
      v51(v8, 0, 1, v9);
      v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
      if (v52(v8, 1, v9) != 1)
      {
        v50(v20, (uint64_t)v8, v9);
        v53 = objc_msgSend(v30, "account");
        if (v53)
        {
          v141 = v53;
          v54 = objc_msgSend(v53, "identifier");
          if (v54)
          {
            v55 = v54;
            v56 = v148;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

            v50(v5, v56, v9);
            v51(v5, 0, 1, v9);
            if (v52(v5, 1, v9) != 1)
            {
              v57 = v142;
              v50(v142, (uint64_t)v5, v9);
              v58 = objc_msgSend(v30, "sha512Sum");
              if (v58)
              {
                v59 = v58;
                v60 = objc_msgSend(v30, "fileName");
                if (v60)
                {
                  v61 = v60;
                  v62 = objc_msgSend(v60, "pathExtension");

                  static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                  v63 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v63 = 0;
                }
                v126 = v145;
                v127 = v142;
                isa = UUID._bridgeToObjectiveC()().super.isa;
                v129 = v144;
                objc_msgSend(v144, "proposePurgingFileAttachmentWithSha512Sum:fileExtension:account:", v59, v63, isa);

                v130 = *(void (**)(char *, uint64_t))(v126 + 8);
                v130(v127, v9);
                v130(v20, v9);
                return;
              }
              v119 = objc_msgSend(v144, "fileAttachmentIdentifiersToPurgeByAccountIdentifier");
              v120 = v145;
              v121 = *(void (**)(uint64_t, char *, uint64_t))(v145 + 16);
              v122 = v148;
              v121(v148, v57, v9);
              v123 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v122, v9);
              v124 = objc_msgSend(v119, "__swift_objectForKeyedSubscript:", v123);
              swift_unknownObjectRelease(v123);

              v125 = v57;
              if (v124)
              {
                _bridgeAnyObjectToAny(_:)(v151, v124);
                swift_unknownObjectRelease(v124);
              }
              else
              {
                memset(v151, 0, sizeof(v151));
              }
              sub_1000A5CA8((uint64_t)v151, (uint64_t)&v152, (uint64_t *)&unk_10083D5B0);
              if (v153[2])
              {
                v131 = sub_10001A630(&qword_10084FB50);
                if ((swift_dynamicCast(&v150, &v152, (char *)&type metadata for Any + 8, v131, 6) & 1) != 0)
                {
                  v132 = v150;
LABEL_56:
                  v152 = v132;
                  v133 = (uint64_t)v147;
                  v121((uint64_t)v147, v20, v9);
                  v134 = v148;
                  sub_1002DB318(v148, v133);
                  v135 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
                  v135(v134, v9);
                  v136 = v144;
                  v137 = objc_msgSend(v144, "fileAttachmentIdentifiersToPurgeByAccountIdentifier");
                  sub_100133108();
                  v138 = Set._bridgeToObjectiveC()().super.isa;
                  v139 = swift_bridgeObjectRelease();
                  ((void (*)(uint64_t, char *, uint64_t, __n128))v121)(v134, v125, v9, v139);
                  v140 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v134, v9);
                  objc_msgSend(v137, "__swift_setObject:forKeyedSubscript:", v138, v140);

                  swift_unknownObjectRelease(v140);
                  v135((uint64_t)v125, v9);
                  v135((uint64_t)v20, v9);
                  return;
                }
              }
              else
              {
                sub_10000882C((uint64_t)&v152, (uint64_t *)&unk_10083D5B0);
              }
              v132 = (objc_class *)&_swiftEmptySetSingleton;
              goto LABEL_56;
            }
          }
          else
          {
            v51(v5, 1, 1, v9);
          }
          sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
          v106 = v30;
          v92 = Logger.logObject.getter(v106);
          v107 = static os_log_type_t.error.getter(v92);
          if (os_log_type_enabled(v92, v107))
          {
            v94 = v20;
            v143 = v9;
            v108 = swift_slowAlloc(22, -1);
            v109 = swift_slowAlloc(64, -1);
            v152 = (objc_class *)v109;
            *(_DWORD *)v108 = 136446466;
            v110 = sub_1000D92EC((uint64_t)v149);
            *(_QWORD *)&v151[0] = sub_10001A820(v110, v111, (uint64_t *)&v152);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, (char *)v151 + 8);
            *(_QWORD *)&v112 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v108 + 12) = 2082;
            v113 = objc_msgSend(v106, "remObjectID", v112);
            if (v113)
            {
              v114 = v113;
              v115 = objc_msgSend(v113, "description");

              v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
              v118 = v117;

            }
            else
            {
              v116 = 7104878;
              v118 = 0xE300000000000000;
            }
            *(_QWORD *)&v151[0] = sub_10001A820(v116, v118, (uint64_t *)&v152);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, (char *)v151 + 8);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v92, v107, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.account.identifier' should not be nil {moid: %{public}s}", (uint8_t *)v108, 0x16u);
            swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v109, -1, -1);
            swift_slowDealloc(v108, -1, -1);

LABEL_47:
            (*(void (**)(char *, uint64_t))(v145 + 8))(v94, v143);
            return;
          }

        }
        else
        {
          v91 = v30;
          v92 = Logger.logObject.getter(v91);
          v93 = static os_log_type_t.error.getter(v92);
          if (os_log_type_enabled(v92, v93))
          {
            v94 = v20;
            v143 = v9;
            v95 = swift_slowAlloc(22, -1);
            v96 = swift_slowAlloc(64, -1);
            v152 = (objc_class *)v96;
            *(_DWORD *)v95 = 136446466;
            v97 = sub_1000D92EC((uint64_t)v149);
            *(_QWORD *)&v151[0] = sub_10001A820(v97, v98, (uint64_t *)&v152);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, (char *)v151 + 8);
            *(_QWORD *)&v99 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v95 + 12) = 2082;
            v100 = objc_msgSend(v91, "remObjectID", v99);
            if (v100)
            {
              v101 = v100;
              v102 = objc_msgSend(v100, "description");

              v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
              v105 = v104;

            }
            else
            {
              v103 = 7104878;
              v105 = 0xE300000000000000;
            }
            *(_QWORD *)&v151[0] = sub_10001A820(v103, v105, (uint64_t *)&v152);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, (char *)v151 + 8);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.account' should not be nil {moid: %{public}s}", (uint8_t *)v95, 0x16u);
            swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v96, -1, -1);
            swift_slowDealloc(v95, -1, -1);
            goto LABEL_47;
          }

        }
        (*(void (**)(char *, uint64_t))(v145 + 8))(v20, v9);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v145 + 56))(v8, 1, 1, v9);
    }
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
    v79 = v30;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.error.getter(v80);
    if (os_log_type_enabled(v80, v81))
    {
      v82 = swift_slowAlloc(22, -1);
      v83 = (objc_class **)swift_slowAlloc(8, -1);
      v84 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v151[0] = v84;
      *(_DWORD *)v82 = 136446466;
      v152 = v149;
      v85 = swift_getMetatypeMetadata(v149);
      v86 = String.init<A>(describing:)(&v152, v85);
      v152 = (objc_class *)sub_10001A820(v86, v87, (uint64_t *)v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
      *(_QWORD *)&v88 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v82 + 12) = 2114;
      v89 = (objc_class *)objc_msgSend(v79, "objectID", v88);
      v152 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
      *v83 = v89;

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.identifier' should not be nil {moid: %{public}@}", (uint8_t *)v82, 0x16u);
      v90 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v83, 1, v90);
      swift_slowDealloc(v83, -1, -1);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v82, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v64 = v30;
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(22, -1);
      v68 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v151[0] = v68;
      *(_DWORD *)v67 = 136446466;
      v152 = v149;
      v69 = swift_getMetatypeMetadata(v149);
      v70 = String.init<A>(describing:)(&v152, v69);
      v152 = (objc_class *)sub_10001A820(v70, v71, (uint64_t *)v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
      *(_QWORD *)&v72 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v67 + 12) = 2082;
      v73 = objc_msgSend(v64, "remObjectID", v72);
      if (v73)
      {
        v74 = v73;
        v75 = objc_msgSend(v73, "description");

        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

      }
      else
      {
        v76 = 7104878;
        v78 = 0xE300000000000000;
      }
      v152 = (objc_class *)sub_10001A820(v76, v78, (uint64_t *)v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "%{public}s:prepareForDeletion() '\\REMCDSavedAttachment.storeControllerManagedObjectContext' should not be nil {savedAttachmentID: %{public}s}", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Int __swiftcall REMCDSavedAttachment.parentEffectiveMinimumSupportedVersion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "reminder");
  if (!v1)
    return kREMSupportedVersionUnset;
  v2 = v1;
  v3 = objc_msgSend(v1, "effectiveMinimumSupportedVersion");

  return (Swift::Int)v3;
}

uint64_t static REMCDSavedAttachment.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007E15D8);
  swift_arrayDestroy(&unk_1007E15F8, 1, &type metadata for String);
  return v0;
}

Swift::Bool __swiftcall REMCDSavedAttachment.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  Class isa;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  _OWORD v18[2];
  _QWORD v19[4];

  v3 = objc_msgSend(v1, "remObjectID");
  if (!v3)
    goto LABEL_12;
  v4 = v3;
  v5 = -[objc_class objectForKeyedSubscript:](toAccountObject.super.super.isa, "objectForKeyedSubscript:", v3);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v18, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_1000A5CA8((uint64_t)v18, (uint64_t)v19, (uint64_t *)&unk_10083D5B0);
  if (!v19[3])
  {
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_10083D5B0);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_9:
    v8 = v4;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", isa, v8);

    v10 = objc_msgSend(v1, "reminder");
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, "isConnectedToAccountObject:", toAccountObject.super.super.isa);

      v19[0] = v7;
      type metadata accessor for REMObjectIsConnectedState(0);
      v13 = v12;
      v14 = v8;
      v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, v13);
      -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", v15, v14);

      swift_unknownObjectRelease(v15);
      return v7;
    }

LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }

  LOBYTE(v7) = v17 == 1;
  return v7;
}

uint64_t type metadata accessor for REMCDSavedAttachment()
{
  return objc_opt_self(REMCDSavedAttachment);
}

uint64_t sub_10056E3FC(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084FB80, &qword_1008375E8, (uint64_t)qword_100871F98, (uint64_t)sub_1004A1758);
}

uint64_t sub_10056E420(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084FB98, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10056E444(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD, _QWORD);
  _QWORD *v33;
  void (*v34)(_QWORD, _QWORD);
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  double v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  NSString v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  _QWORD *v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t result;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  void *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  Class isa;
  Class v122;
  Class v123;
  Class v124;
  uint64_t v125;
  _QWORD v126[2];
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(char *, uint64_t, uint64_t, __n128);
  void (*v133)(_QWORD, _QWORD);
  char *v134;
  char *v135;
  id v136;
  _QWORD *v137;
  id v138;
  _QWORD *v139;
  _QWORD *v140;
  char *v141;
  id v142;
  _QWORD *v143;
  id v144;
  unint64_t v145;
  _QWORD *v146;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v126 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)v126 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)v126 - v15;
  v17 = sub_10056F254(a1);
  if (v2)
    return (uint64_t)a1;
  v18 = v17;
  v134 = v10;
  v135 = v7;
  v138 = v1;
  v139 = v16;
  v137 = v5;
  v140 = (_QWORD *)v4;
  v141 = v13;
  objc_msgSend(v17, "setFetchBatchSize:", 100);
  v19 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v18, v19);
  v21 = objc_msgSend(v138, "options");
  v133 = 0;
  if ((v21 & 1) != 0)
  {
    v22 = sub_10056F5D0();
    swift_bridgeObjectRelease();
    v20 = v22;
  }
  v23 = v137;
  v136 = v18;
  v137 = a1;
  v24 = qword_1008378A8;
  swift_bridgeObjectRetain(v20);
  if (v24 != -1)
    goto LABEL_25;
  while (1)
  {
    v25 = sub_10001AAA8((uint64_t)v140, (uint64_t)qword_10084FB98);
    v26 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v23[2];
    v27 = v139;
    v131 = v25;
    v132 = v26;
    v28 = ((uint64_t (*)(_QWORD *))v26)(v139);
    v144 = (id)v20;
    __chkstk_darwin(v28);
    v126[-2] = v27;
    v29 = sub_10001A630(&qword_10083D590);
    v30 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    v31 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
    v129 = v29;
    v130 = v30;
    v128 = v31;
    v32 = v133;
    v33 = (_QWORD *)Sequence.map<A>(skippingError:_:)(sub_100347E34, &v126[-4], sub_100571550, 0, v29, v30, v31);
    v34 = v32;
    if (v32)
    {
      swift_errorRelease(v32);
      v34 = 0;
      v33 = _swiftEmptyArrayStorage;
    }
    v35 = v141;
    v138 = v33;
    v133 = (void (*)(_QWORD, _QWORD))v23[1];
    v133(v27, v140);
    swift_bridgeObjectRelease();
    v36 = (_QWORD *)((unint64_t)v20 >> 62);
    if ((unint64_t)v20 >> 62)
      break;
    v37 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v20);
    v38 = v136;
    if (!v37)
      goto LABEL_30;
LABEL_9:
    v139 = (_QWORD *)((unint64_t)v20 >> 62);
    v146 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v37);
    if (v37 < 0)
      goto LABEL_71;
    v39 = 0;
    while (v37 != v39)
    {
      if ((v20 & 0xC000000000000001) != 0)
        v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v20);
      else
        v40 = *(id *)(v20 + 8 * v39 + 32);
      v41 = v40;
      v42 = objc_msgSend(v40, "account");
      if (!v42)
      {
        v52 = (void *)objc_opt_self(REMError);
        v144 = 0;
        v145 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
        v144 = (id)0xD000000000000021;
        v145 = 0x8000000100701610;
        v54 = objc_msgSend(v41, "description", v53);
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

        v58._countAndFlagsBits = v55;
        v58._object = v57;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._countAndFlagsBits = 125;
        v59._object = (void *)0xE100000000000000;
        String.append(_:)(v59);
        v60 = String._bridgeToObjectiveC()();
        objc_msgSend(v52, "internalErrorWithDebugDescription:", v60, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v61);
        goto LABEL_23;
      }
      v144 = 0;
      v43 = v42;
      v44 = objc_msgSend(v43, "remObjectIDWithError:", &v144);
      v45 = v144;
      if (!v44)
      {
        v62 = v144;
        _convertNSErrorToError(_:)(v45);

        swift_willThrow(v63);
LABEL_22:

LABEL_23:
        a1 = v146;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v20, 2);
        swift_release(a1);
        return (uint64_t)a1;
      }
      v46 = v44;
      v47 = v144;
      v48 = sub_1005CCB88(v46);
      if (v34)
        goto LABEL_22;
      v23 = v48;
      ++v39;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v50 = v146[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
      v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v23);
      specialized ContiguousArray._endMutation()(v51);
      v35 = v141;
      if (v37 == v39)
      {
        v23 = v146;
        swift_bridgeObjectRelease();
        v38 = v136;
        v36 = v139;
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_1008378A8, sub_10056E420);
  }
  if (v20 < 0)
    v64 = v20;
  else
    v64 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v20);
  v37 = _CocoaArrayWrapper.endIndex.getter(v64);
  v38 = v136;
  if (v37)
    goto LABEL_9;
LABEL_30:
  swift_bridgeObjectRelease();
  v23 = _swiftEmptyArrayStorage;
LABEL_31:
  v144 = &_swiftEmptySetSingleton;
  v146 = &_swiftEmptySetSingleton;
  if (v36)
  {
    if (v20 < 0)
      v81 = v20;
    else
      v81 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v65 = _CocoaArrayWrapper.endIndex.getter(v81);
    swift_bridgeObjectRelease();
    if (!v65)
      goto LABEL_52;
LABEL_33:
    v127 = v23;
    v139 = (_QWORD *)(v20 & 0xC000000000000001);
    v66 = 4;
    v67 = (id)v65;
    while (1)
    {
      v68 = v139
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66 - 4, v20)
          : *(id *)(v20 + 8 * v66);
      v37 = (uint64_t)v68;
      a1 = (id)(v66 - 3);
      if (__OFADD__(v66 - 4, 1))
        break;
      v69 = objc_msgSend(v68, "list");
      if (v69)
      {
        v142 = 0;
        v70 = v69;
        v71 = objc_msgSend(v70, "remObjectIDWithError:", &v142);
        v72 = v142;
        if (!v71)
          goto LABEL_53;
        v73 = v71;
        v74 = v142;
        v75 = sub_1005CCB64(v73);
        if (v34)
          goto LABEL_54;
        v23 = v75;

        sub_1002DB59C(&v143, v23);
      }
      v76 = objc_msgSend((id)v37, "parentReminder");
      if (v76)
      {
        v142 = 0;
        v70 = v76;
        v77 = objc_msgSend(v70, "remObjectIDWithError:", &v142);
        v72 = v142;
        if (!v77)
        {
LABEL_53:
          a1 = v72;
          _convertNSErrorToError(_:)(v72);

          swift_willThrow(v83);
LABEL_54:
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_58;
        }
        v78 = v77;
        v79 = v142;
        v80 = sub_1005CBC20(v78);
        if (v34)
          goto LABEL_54;
        v23 = v80;

        sub_1002DB588(&v143, v23);
      }
      else
      {

      }
      ++v66;
      if (a1 == v67)
      {
        swift_bridgeObjectRelease();
        a1 = v144;
        v82 = v146;
        v35 = v141;
        v23 = v127;
        v38 = v136;
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v65 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v65)
    goto LABEL_33;
LABEL_52:
  swift_bridgeObjectRelease();
  v82 = &_swiftEmptySetSingleton;
  a1 = &_swiftEmptySetSingleton;
LABEL_56:
  swift_bridgeObjectRetain(a1);
  v85 = sub_1001E8898(v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v82);
  v87 = sub_1001E888C(v86);
  swift_bridgeObjectRelease();
  v88 = sub_1005CEFB8((uint64_t)v23, 100, 0, 0, 0);
  if (!v34)
  {
    v139 = v88;
    swift_bridgeObjectRelease();
    v90 = sub_1005CEADC((uint64_t)v85, 100, 0, 0, 0);
    swift_release(v85);
    v91 = sub_1005CEA9C((uint64_t)v87, 100, 0, 0, 0);
    swift_release(v87);
    v92 = ((uint64_t (*)(char *, uint64_t, _QWORD *))v132)(v35, v131, v140);
    v143 = v139;
    __chkstk_darwin(v92);
    v126[-2] = v93;
    v94 = sub_10001A630(&qword_10083FE60);
    v95 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v96 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
    v137 = (_QWORD *)v95;
    v97 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v126[-4], sub_1002A6DFC, 0, v94, v95, v96);
    v37 = (uint64_t)v138;
    v127 = v91;
    v126[1] = v97;
    v98 = v134;
    v99 = (uint64_t)v140;
    v133(v141, v140);
    v100 = swift_bridgeObjectRelease();
    v101 = v132(v98, v131, v99, v100);
    v143 = v90;
    __chkstk_darwin(v101);
    v126[-2] = v98;
    v102 = sub_10001A630(&qword_10083FF50);
    v103 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v104 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v141 = (char *)v103;
    v23 = (_QWORD *)Sequence.map<A>(skippingError:_:)(sub_1000F5264, &v126[-4], sub_1000F4B44, 0, v102, v103, v104);
    v105 = (uint64_t)v140;
    v133(v98, v140);
    v106 = swift_bridgeObjectRelease();
    v107 = v135;
    v108 = v132(v135, v131, v105, v106);
    v143 = v127;
    __chkstk_darwin(v108);
    v126[-2] = v107;
    v109 = (_QWORD *)Sequence.map<A>(skippingError:_:)(sub_100347E34, &v126[-4], sub_100571550, 0, v129, v130, v128);
    v133(v107, v140);
    swift_bridgeObjectRelease();
    v143 = v109;
    swift_bridgeObjectRetain(v37);
    sub_1001E2B34(v110);
    if (!((unint64_t)v37 >> 62))
    {
      v111 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_62;
    }
LABEL_72:
    if (v37 < 0)
      v125 = v37;
    else
      v125 = v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v111 = _CocoaArrayWrapper.endIndex.getter(v125);
    swift_bridgeObjectRelease();
LABEL_62:
    if (v111)
    {
      v140 = v23;
      v143 = _swiftEmptyArrayStorage;
      result = specialized ContiguousArray.reserveCapacity(_:)(v111);
      if (v111 < 0)
      {
        __break(1u);
        return result;
      }
      v112 = 0;
      v113 = v37 & 0xC000000000000001;
      do
      {
        if (v113)
          v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v112, v37);
        else
          v114 = *(id *)(v37 + 8 * v112 + 32);
        v115 = v114;
        ++v112;
        v116 = objc_msgSend(v114, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v117);
        v118 = v143[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v118);
        v119 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, v116);
        specialized ContiguousArray._endMutation()(v119);
        v37 = (uint64_t)v138;
      }
      while (v111 != v112);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = objc_allocWithZone((Class)REMFetchResult);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v122 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v123 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v124 = Array._bridgeToObjectiveC()().super.isa;
    a1 = objc_msgSend(v120, "initWithAccountStorages:listStorages:reminderStorages:requestedObjectIDs:metadata:", isa, v122, v123, v124, 0, swift_bridgeObjectRelease().n128_f64[0]);

    return (uint64_t)a1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release(v87);
  swift_release(v85);
LABEL_58:
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

id sub_10056F254(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v1;
  v5 = objc_msgSend(v3, "predicateDescriptor");
  v6 = (void *)sub_100144708(a1, (uint64_t)objc_msgSend(v3, "options"));

  if (!v2)
  {
    v7 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
    objc_msgSend(v8, "setEntity:", v9);

    objc_msgSend(v8, "setAffectedStores:", 0);
    objc_msgSend(v8, "setPredicate:", v6);
    if ((objc_msgSend(v3, "options") & 1) != 0)
    {
      v10 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v11 = swift_allocObject(v10, 40, 7);
      *(_OWORD *)(v11 + 16) = xmmword_1006A7330;
      v12 = objc_msgSend((id)objc_opt_self(REMReminderSortDescriptor), "sortDescriptorSortingByOrderingInListAscending:", 1);
      sub_1003C97F8();
      v14 = v13;

      *(_QWORD *)(v11 + 32) = v14;
      v26 = v11;
      specialized Array._endMutation()(v15);
    }
    else
    {
      sub_100570B54();
    }
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    if (qword_1008378A0 != -1)
      swift_once(&qword_1008378A0, sub_10056E3FC);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084FB80);
    v5 = v8;
    v18 = Logger.logObject.getter(v5);
    v19 = static os_log_type_t.info.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = v6;
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v26 = (uint64_t)v5;
      v22 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      *v21 = v5;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Created reminder fetchRequest {fetchRequest: %@}", v20, 0xCu);
      v23 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      return v22;
    }
    else
    {

    }
  }
  return v5;
}

uint64_t sub_10056F5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  sub_100570B54();
  v1 = v0;
  v2 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = swift_allocObject(&unk_1007FB4D0, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  v5 = swift_allocObject(&unk_1007FB4F8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100571538;
  *(_QWORD *)(v5 + 24) = v4;
  v14[4] = sub_1000A90F4;
  v15 = v5;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100256CD4;
  v14[3] = &unk_1007FB510;
  v6 = _Block_copy(v14);
  v7 = v15;
  swift_retain();
  swift_release(v7);
  v8 = -[objc_class sortedArrayWithOptions:usingComparator:](isa, "sortedArrayWithOptions:usingComparator:", 16, v6);

  _Block_release(v6);
  LOBYTE(isa) = swift_isEscapingClosureAtFileLocation(v5, "", 148, 255, 90, 1);
  result = swift_release(v5);
  if ((isa & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, (char *)&type metadata for Any + 8);

    v14[0] = v10;
    v11 = sub_10001A630(&qword_1008442B0);
    v12 = sub_1000C4C0C(&qword_100842038, &qword_1008442B0);
    v13 = Sequence.elements<A>(ofType:)(v2, v11, v2, v12);
    swift_release(v4);
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

id sub_10056F7A8(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  _QWORD v20[4];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10056F254(a1);
  if (!v2)
  {
    v9 = v8;
    v10 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v10);
    if ((objc_msgSend(v1, "options") & 1) != 0)
    {
      v13 = sub_10056F5D0();
      swift_bridgeObjectRelease();
      v12 = v13;
    }
    if (qword_1008378A8 != -1)
      swift_once(&qword_1008378A8, sub_10056E420);
    v14 = sub_10001AAA8(v4, (uint64_t)qword_10084FB98);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
    v20[1] = v20;
    v20[3] = v12;
    __chkstk_darwin(v15);
    v20[-2] = v7;
    v20[0] = sub_10001A630(&qword_10083D590);
    v16 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    v17 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
    Sequence.map<A>(skippingError:_:)(sub_100343838, &v20[-4], sub_10033D070, 0, v20[0], v16, v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    v18 = objc_allocWithZone((Class)REMFetchResult);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v1 = objc_msgSend(v18, "initWithReminderStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  return v1;
}

id sub_10056FA30(void *a1)
{
  uint64_t v1;
  id result;
  void *v3;
  id v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  result = sub_10056F254(a1);
  if (!v1)
  {
    v3 = result;
    v6 = sub_10001A630(&qword_10084B310);
    v5[0] = v3;
    v4 = v3;
    throwingCast<A>(_:as:failureMessage:)(&v7, v5, v6, 0, 0, v6);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v5);
    return (id)v7;
  }
  return result;
}

id sub_10056FAC8(void *a1)
{
  void *v1;
  uint64_t v2;
  id result;
  id v5;
  NSDictionary v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  if ((objc_msgSend(v1, "options") & 2) != 0)
  {
    result = (id)sub_10056FC8C(a1);
    if (v2)
      return result;
    v5 = objc_allocWithZone((Class)REMReminderFetchMetadata);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, "initWithSubtaskCounts:", v6.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
    goto LABEL_8;
  }
  if ((objc_msgSend(v1, "options") & 4) == 0)
    return objc_msgSend(objc_allocWithZone((Class)REMFetchResult), "initWithMetadata:", 0);
  result = sub_1005701DC(a1);
  if (!v2)
  {
    v8 = objc_allocWithZone((Class)REMReminderFetchMetadata);
    sub_1000151B0(0, &qword_10084FBB0, REMReminderFetchMetadataDueDateCount_ptr);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v8, "initWithDueDateCounts:", v6.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
LABEL_8:
    v9 = v7;

    v10 = objc_msgSend(objc_allocWithZone((Class)REMFetchResult), "initWithMetadata:", v9);
    return v10;
  }
  return result;
}

uint64_t sub_10056FC8C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  unint64_t v38;
  char v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  char v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v3 = sub_10056F254(a1);
  if (v1)
    return v2;
  v4 = (unint64_t)v3;
  v5 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v7 = NSManagedObjectContext.fetch<A>(_:)(v4, v5);
  v2 = sub_1002B14D0((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)v7 >> 62)
  {
LABEL_61:
    if (v7 < 0)
      v51 = v7;
    else
      v51 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_6;
    goto LABEL_65;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
  {
LABEL_65:

    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_6:
  v53 = (void *)v4;
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 & 0xC000000000000001;
    v54 = v7;
    v55 = v5;
    v56 = v8;
    v57 = v7 & 0xC000000000000001;
    while (1)
    {
      if (v10)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      else
        v11 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "remObjectID", v53);
      if (!v13)
        goto LABEL_9;
      v14 = v13;
      v15 = objc_msgSend(v12, "children");
      if (!v15)
        break;
      v16 = v15;
      v17 = sub_1000EC524((unint64_t *)&qword_1008448D0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v5, v17);

      if ((v18 & 0xC000000000000001) != 0)
      {
        if (v18 < 0)
          v19 = v18;
        else
          v19 = v18 & 0xFFFFFFFFFFFFFF8;
        if (!__CocoaSet.count.getter(v19))
        {
LABEL_35:

          swift_bridgeObjectRelease();
LABEL_36:
          v8 = v56;
          v10 = v57;
          goto LABEL_10;
        }
        v20 = v14;
        v4 = __CocoaSet.count.getter(v19);
      }
      else
      {
        v4 = *(_QWORD *)(v18 + 16);
        if (!v4)
          goto LABEL_35;
        v21 = v14;
      }
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v4);
      v23 = v2 & 0xC000000000000001;
      if (!v22)
      {
        v10 = v57;
        if (v23)
        {
          if (v2 < 0)
            v33 = v2;
          else
            v33 = v2 & 0xFFFFFFFFFFFFFF8;
          v34 = v14;
          swift_bridgeObjectRetain(v2);
          v35 = __CocoaDictionary.lookup(_:)(v34, v33);

          v5 = v55;
          if (!v35)
          {

            swift_bridgeObjectRelease();
            v8 = v56;
            goto LABEL_10;
          }
          swift_unknownObjectRelease(v35);
          v36 = __CocoaDictionary.count.getter(v33);
          v37 = sub_1001930B0(v33, v36);
          swift_retain();
          v38 = sub_1002C66DC((uint64_t)v34);
          v40 = v39;
          swift_release(v37);
          if ((v40 & 1) == 0)
          {
            __break(1u);
            goto LABEL_67;
          }

          v41 = *(void **)(*(_QWORD *)(v37 + 56) + 8 * v38);
          sub_100289D74(v38, v37);

          swift_bridgeObjectRelease();
          v2 = v37;
        }
        else
        {
          swift_bridgeObjectRetain(v2);
          v47 = sub_1002C66DC((uint64_t)v14);
          v49 = v48;
          swift_bridgeObjectRelease();
          v5 = v55;
          if ((v49 & 1) != 0)
          {
            v8 = v56;
            if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
            {
              sub_1002D9858();
              v8 = v56;
            }

            v50 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v47);
            sub_100289D74(v47, v2);

            swift_bridgeObjectRelease();
            v10 = v57;
            goto LABEL_10;
          }

        }
        goto LABEL_36;
      }
      v5 = (uint64_t)v22;
      if (v23)
      {
        if (v2 < 0)
          v24 = v2;
        else
          v24 = v2 & 0xFFFFFFFFFFFFFF8;
        v25 = __CocoaDictionary.count.getter(v24);
        if (__OFADD__(v25, 1))
          goto LABEL_59;
        v2 = sub_1001930B0(v24, v25 + 1);
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      v4 = sub_1002C66DC((uint64_t)v14);
      v28 = *(_QWORD *)(v2 + 16);
      v29 = (v27 & 1) == 0;
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v7 = v27;
      if (*(_QWORD *)(v2 + 24) >= v30)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D9858();
      }
      else
      {
        sub_1002D3054(v30, isUniquelyReferenced_nonNull_native);
        v31 = sub_1002C66DC((uint64_t)v14);
        if ((v7 & 1) != (v32 & 1))
          goto LABEL_68;
        v4 = v31;
      }
      if ((v7 & 1) != 0)
      {
        v42 = *(_QWORD *)(v2 + 56);

        *(_QWORD *)(v42 + 8 * v4) = v5;
      }
      else
      {
        *(_QWORD *)(v2 + 8 * (v4 >> 6) + 64) |= 1 << v4;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v4) = v14;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4) = v5;
        v43 = *(_QWORD *)(v2 + 16);
        v44 = __OFADD__(v43, 1);
        v45 = v43 + 1;
        if (v44)
          goto LABEL_60;
        *(_QWORD *)(v2 + 16) = v45;
        v46 = v14;
      }
      v7 = v54;
      v5 = v55;
      v8 = v56;
      v10 = v57;

      swift_bridgeObjectRelease();
LABEL_10:
      if (v8 == ++v9)
      {

        swift_bridgeObjectRelease();
        return v2;
      }
    }

LABEL_9:
    goto LABEL_10;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  v52 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v52);
  __break(1u);
  return result;
}

char *sub_1005701DC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  _QWORD *v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  unsigned int (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  void *v50;
  NSString v51;
  uint64_t v52;
  void (*v53)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t);
  void (*v54)(char *, uint64_t);
  unint64_t v55;
  id v56;
  char *v57;
  id v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v66;
  char *v67;
  id v68;
  Class isa;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint8_t *v83;
  void *v84;
  NSString v85;
  uint64_t v86;
  id v88;
  char *v89;
  Class v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t *v109;
  char *v110;
  id v111;
  char *v112;
  char *v113;
  _QWORD *v114;
  unint64_t v115;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v112 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v110 = (char *)&v97 - v5;
  __chkstk_darwin(v6);
  v109 = (uint64_t *)((char *)&v97 - v7);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v97 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v97 - v16;
  v18 = type metadata accessor for Calendar(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = a1;
  v22 = v114;
  v23 = sub_10056F254(a1);
  if (v22)
    return v17;
  v24 = v23;
  v113 = v11;
  v114 = v9;
  v106 = v17;
  v107 = v14;
  v108 = v21;
  v101 = v19;
  v102 = v18;
  v25 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v26 = NSManagedObjectContext.fetch<A>(_:)(v24, v25);
  v105 = 0;
  v27 = v26;
  v98 = v24;
  v28 = (uint64_t)v108;
  static Calendar.current.getter(v26);
  v115 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v27 >> 62)
    goto LABEL_47;
  v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v30 = v8;
    v8 = (uint64_t)v107;
    if (!v29)
    {

      swift_bridgeObjectRelease();
      v17 = (char *)_swiftEmptyArrayStorage;
      v38 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, __n128))(v101 + 8))(v28, v102, v38);
      return v17;
    }
    v104 = v27 & 0xC000000000000001;
    if ((v27 & 0xC000000000000001) == 0)
      break;
    swift_bridgeObjectRetain(v27);
    v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    swift_bridgeObjectRelease();
    v31 = v110;
LABEL_8:
    v33 = objc_msgSend(v32, "dueDate", v97);

    if (v33)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v34 = v114;
      v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v114[7];
      v36 = v31;
      v37 = 0;
    }
    else
    {
      v34 = v114;
      v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v114[7];
      v36 = v31;
      v37 = 1;
    }
    v103 = v35;
    v35(v36, v37, 1, v30);
    v39 = (uint64_t)v31;
    v40 = v106;
    v41 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v109;
    sub_1000CDA74(v39, (uint64_t)v109);
    v109 = (uint64_t *)v34[6];
    if (((unsigned int (*)(_QWORD, uint64_t, uint64_t))v109)(v41, 1, v30) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000EA320((uint64_t)v41);
      if (qword_1008378A0 == -1)
        goto LABEL_14;
      goto LABEL_53;
    }
    v53 = (void (*)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))v34[4];
    v53(v40, v41, v30);
    Calendar.startOfDay(for:)(v40);
    v54 = (void (*)(char *, uint64_t))v34[1];
    v54(v40, v30);
    v53(v40, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v8, v30);
    v55 = 0;
    v28 = 0;
    v97 = v27 & 0xFFFFFFFFFFFFFF8;
    v99 = (char *)v29;
    v100 = v27;
    v114 = (_QWORD *)v30;
    if (v104)
    {
LABEL_18:
      v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v27);
      v57 = (char *)(v55 + 1);
      if (!__OFADD__(v55, 1))
        goto LABEL_23;
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    while (v55 < *(_QWORD *)(v97 + 16))
    {
      v56 = *(id *)(v27 + 8 * v55 + 32);
      v57 = (char *)(v55 + 1);
      if (__OFADD__(v55, 1))
        goto LABEL_44;
LABEL_23:
      v111 = v56;
      v58 = objc_msgSend(v56, "dueDate", v97);
      if (!v58)
      {
        v61 = (uint64_t)v112;
        v103(v112, 1, 1, v30);
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000EA320(v61);
        if (qword_1008378A0 != -1)
          swift_once(&qword_1008378A0, sub_10056E3FC);
        v77 = type metadata accessor for Logger(0);
        v78 = sub_10001AAA8(v77, (uint64_t)qword_10084FB80);
        v79 = Logger.logObject.getter(v78);
        v80 = static os_log_type_t.error.getter(v79);
        v81 = os_log_type_enabled(v79, v80);
        v82 = v102;
        if (v81)
        {
          v83 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "Due date sorting missing due date", v83, 2u);
          swift_slowDealloc(v83, -1, -1);
        }

        v84 = (void *)objc_opt_self(REMError);
        v85 = String._bridgeToObjectiveC()();
        v17 = (char *)objc_msgSend(v84, "internalErrorWithDebugDescription:", v85);

        swift_willThrow(v86);
        v54(v106, (uint64_t)v114);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v108, v82);
        return v17;
      }
      v59 = v58;
      v110 = v57;
      v60 = v55;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

      v61 = (uint64_t)v112;
      v53(v112, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v8, v30);
      v103((char *)v61, 0, 1, v30);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v109)(v61, 1, v30) == 1)
        goto LABEL_35;
      v27 = (uint64_t)v54;
      v62 = v8;
      v8 = (uint64_t)v113;
      v53(v113, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v61, v30);
      Calendar.startOfDay(for:)(v8);
      ((void (*)(uint64_t, _QWORD *))v27)(v8, v114);
      v53((char *)v8, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v62, (uint64_t)v114);
      v30 = (uint64_t)v114;
      v63 = sub_10023F5B0();
      v64 = v106;
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v8, v106, v30, v63) & 1) != 0)
      {
        ((void (*)(uint64_t, uint64_t))v27)(v8, v30);

        if (__OFADD__(v28++, 1))
          goto LABEL_45;
        v54 = (void (*)(char *, uint64_t))v27;
        v66 = v60;
      }
      else
      {
        v67 = v64;
        v68 = objc_allocWithZone((Class)REMReminderFetchMetadataDueDateCount);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v70 = objc_msgSend(v68, "initWithDueDate:count:", isa, v28);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        v73 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v72 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v66 = v60;
        if (v73 >= v72 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1);
        v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v70);
        specialized Array._endMutation()(v74);

        v75 = v114;
        v54 = (void (*)(char *, uint64_t))v27;
        ((void (*)(char *, _QWORD *))v27)(v67, v114);
        v76 = v67;
        v30 = (uint64_t)v75;
        v53(v76, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v113, (uint64_t)v75);
        v28 = 1;
      }
      v27 = v100;
      v8 = (uint64_t)v107;
      if (v110 == v99)
      {
        swift_bridgeObjectRelease();
        v88 = objc_allocWithZone((Class)REMReminderFetchMetadataDueDateCount);
        v89 = v106;
        v90 = Date._bridgeToObjectiveC()().super.isa;
        v91 = objc_msgSend(v88, "initWithDueDate:count:", v90, v28);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v92);
        v94 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v93 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v94 >= v93 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1);
        v95 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v94, v91);
        specialized Array._endMutation()(v95);

        v54(v89, (uint64_t)v114);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v108, v102);
        return (char *)v115;
      }
      v55 = v66 + 1;
      if (v104)
        goto LABEL_18;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    if (v27 < 0)
      v96 = v27;
    else
      v96 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v29 = _CocoaArrayWrapper.endIndex.getter(v96);
    swift_bridgeObjectRelease();
  }
  v31 = v110;
  if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v27 + 32);
    goto LABEL_8;
  }
  __break(1u);
LABEL_53:
  swift_once(&qword_1008378A0, sub_10056E3FC);
LABEL_14:
  v42 = type metadata accessor for Logger(0);
  v43 = sub_10001AAA8(v42, (uint64_t)qword_10084FB80);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter(v44);
  v46 = os_log_type_enabled(v44, v45);
  v48 = v101;
  v47 = v102;
  if (v46)
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Due date sorting missing due date", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  v50 = (void *)objc_opt_self(REMError);
  v51 = String._bridgeToObjectiveC()();
  v17 = (char *)objc_msgSend(v50, "internalErrorWithDebugDescription:", v51);

  swift_willThrow(v52);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v108, v47);
  return v17;
}

void sub_100570B54()
{
  char **v0;
  char **v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char **v33;
  unint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v0, "sortDescriptors", v4);
  v8 = sub_1000151B0(0, (unint64_t *)&unk_100848C10, REMReminderSortDescriptor_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_3;
LABEL_17:
    *(_QWORD *)&v21 = swift_bridgeObjectRelease().n128_u64[0];
    v20 = _swiftEmptyArrayStorage;
LABEL_18:
    v34 = (unint64_t)v20;
    if ((objc_msgSend(v1, "options", v21) & 1) != 0)
      return;
    v6 = (char *)objc_msgSend((id)objc_opt_self(REMReminderSortDescriptor), "sortDescriptorSortingByOrderingInListAscending:", 1);
    sub_1003C97F8();
    v1 = v23;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
    v2 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v2 < v11 >> 1)
    {
LABEL_20:
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v1);
      specialized Array._endMutation()(v24);

      return;
    }
LABEL_23:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1);
    goto LABEL_20;
  }
LABEL_13:
  if (v9 < 0)
    v22 = v9;
  else
    v22 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_17;
LABEL_3:
  v34 = (unint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v10);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v30 = v3;
  v31 = v2;
  v32 = v6;
  v33 = v1;
  v3 = 0;
  v2 = v9 & 0xC000000000000001;
  v1 = &selRef_rd_isExcludedFromBackup;
  while (1)
  {
    if (v10 == v3)
    {
      __break(1u);
      goto LABEL_13;
    }
    v12 = v2 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v9) : *(id *)(v9 + 8 * v3 + 32);
    v13 = v12;
    v14 = objc_msgSend(v12, "type");
    if ((unint64_t)v14 >= 5)
      break;
    ++v3;
    v15 = (uint64_t)*(&off_1007FB538 + (_QWORD)v14);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    KeyPath = swift_getKeyPath(v15);
    v6 = (char *)NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, objc_msgSend(v13, "ascending"));

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
    v18 = *(_QWORD *)(v34 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
    v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v6);
    specialized ContiguousArray._endMutation()(v19);
    if (v10 == v3)
    {
      v20 = (_QWORD *)v34;
      *(_QWORD *)&v21 = swift_bridgeObjectRelease().n128_u64[0];
      v1 = v33;
      goto LABEL_18;
    }
  }
  if (qword_1008373D8 != -1)
    swift_once(&qword_1008373D8, sub_1003C9768);
  v25 = v31;
  v26 = sub_10001AAA8(v31, (uint64_t)qword_100848618);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v26, v25);
  v27 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v28 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v27, v28);
  __break(1u);
}

uint64_t sub_100570EB8(void *a1, void *a2, uint64_t a3)
{
  id v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  void *i;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  id v38;

  v4 = objc_msgSend(a1, "parentReminder");

  v5 = (unint64_t)a3 >> 62;
  if (!v4)
  {
    v6 = objc_msgSend(a2, "parentReminder");

    if (!v6)
      goto LABEL_28;
  }
  v38 = objc_msgSend(a1, "parentReminder");
  if (!v38)
    v38 = a1;
  v7 = objc_msgSend(a2, "parentReminder");
  if (!v7)
    v7 = a2;
  sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  if ((static NSObject.== infix(_:_:)(v38) & 1) != 0)
  {
    v8 = objc_msgSend(a1, "parentReminder");
    if (v8)
    {
      v9 = v8;
      v10 = a2;
      v11 = v9;
      v12 = static NSObject.== infix(_:_:)(v11);

      if ((v12 & 1) != 0)
      {

        return 1;
      }
    }
    v21 = objc_msgSend(a2, "parentReminder");
    if (v21)
    {
      v22 = v21;
      v23 = a1;
      v24 = v22;
      v25 = static NSObject.== infix(_:_:)(v24);

      if ((v25 & 1) != 0)
        return -1;
      goto LABEL_28;
    }

    v7 = v38;
    goto LABEL_27;
  }
  if (!v5)
  {
    v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v14)
      goto LABEL_13;
LABEL_20:

    swift_bridgeObjectRelease();
    v5 = (unint64_t)a3 >> 62;
LABEL_27:

LABEL_28:
    if (v5)
      goto LABEL_41;
    v26 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    v28 = a1;
    for (i = a2; v26; i = a2)
    {
      v29 = 4;
      while (1)
      {
        v30 = (a3 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, a3)
            : *(id *)(a3 + 8 * v29);
        v31 = v30;
        v32 = v29 - 3;
        if (__OFADD__(v29 - 4, 1))
          break;
        v13 = objc_msgSend(v30, "compareObject:toObject:", v28, i);

        if (v13)
          goto LABEL_25;
        ++v29;
        if (v32 == v26)
          goto LABEL_37;
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      if (a3 < 0)
        v34 = a3;
      else
        v34 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v26 = _CocoaArrayWrapper.endIndex.getter(v34);
      v28 = a1;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a3 < 0)
    v35 = a3;
  else
    v35 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v14 = _CocoaArrayWrapper.endIndex.getter(v35);
  if (!v14)
    goto LABEL_20;
LABEL_13:
  v15 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a3);
    else
      v16 = *(id *)(a3 + 8 * v15);
    v17 = v16;
    v18 = v15 - 3;
    if (__OFADD__(v15 - 4, 1))
      goto LABEL_40;
    v19 = v38;
    v20 = v7;
    v13 = objc_msgSend(v17, "compareObject:toObject:", v19, v20);

    if (v13)
      break;
    ++v15;
    if (v18 == v14)
      goto LABEL_20;
  }

LABEL_25:
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_100571240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v14;
  _BYTE v15[32];

  sub_10001A670(a1, (uint64_t)v15);
  v5 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  if ((swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v14;
    sub_10001A670(a2, (uint64_t)v15);
    if ((swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v7 = v14;
      v8 = sub_100570EB8(v6, v14, a3);

      goto LABEL_10;
    }

  }
  if (qword_1008378A0 != -1)
    swift_once(&qword_1008378A0, sub_10056E3FC);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10084FB80);
  v7 = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "Given cdReminders should not contain any element that is not a REMCDReminder.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v8 = 0;
LABEL_10:

  return v8;
}

uint64_t sub_1005713C8(void *a1)
{
  return sub_10056E444(a1);
}

id sub_1005713E8(void *a1)
{
  return sub_10056F7A8(a1);
}

id sub_100571408(void *a1)
{
  return sub_10056FA30(a1);
}

void sub_100571428(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;

  v2 = sub_10056F254(a1);
  if (!v1)
  {
    v3 = v2;
    v4 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    objc_msgSend(objc_allocWithZone((Class)REMFetchResult), "initWithCount:", NSManagedObjectContext.count<A>(for:)(v3, v4));

  }
}

id sub_1005714CC(void *a1)
{
  return sub_10056FAC8(a1);
}

uint64_t sub_100571514()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100571538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100571240(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100571540()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

char *sub_100571550@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  return sub_10033D070(a1, a2);
}

uint64_t sub_100571564(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  void *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  int v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  void *v63;
  unsigned __int8 v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  void *v69;
  unsigned __int8 v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  id v88;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;

  v97 = a1;
  v2 = type metadata accessor for Date(0);
  v94 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v93 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v91 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v90 = (char *)&v90 - v7;
  __chkstk_darwin(v8);
  v92 = (char *)&v90 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v90 - v11;
  v13 = type metadata accessor for REMSearchCriterion(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v95 = (uint64_t *)((char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v99 = (unsigned __int8 *)&v90 - v17;
  __chkstk_darwin(v18);
  v98 = (unsigned __int8 *)&v90 - v19;
  __chkstk_darwin(v20);
  v100 = (uint64_t)&v90 - v21;
  *(_QWORD *)&v23 = __chkstk_darwin(v22).n128_u64[0];
  v25 = (uint64_t *)((char *)&v90 - v24);
  v102 = v1;
  v26 = objc_msgSend(v1, "title", v23);
  v101 = v13;
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    v31 = (char *)v25 + *(int *)(sub_10001A630((uint64_t *)&unk_100845750) + 48);
    *v25 = v28;
    v25[1] = v30;
    v32 = enum case for REMStringMatchingStyle.prefix(_:);
    v33 = type metadata accessor for REMStringMatchingStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v14 + 104))(v25, enum case for REMSearchCriterion.textualField(_:), v13);
    v34 = (_QWORD *)sub_1002C84DC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v36 = v34[2];
    v35 = v34[3];
    if (v36 >= v35 >> 1)
      v34 = (_QWORD *)sub_1002C84DC(v35 > 1, v36 + 1, 1, (unint64_t)v34);
    v38 = v93;
    v37 = v94;
    v34[2] = v36 + 1;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v14 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v36, v25, v101);
  }
  else
  {
    v34 = _swiftEmptyArrayStorage;
    v38 = v93;
    v37 = v94;
  }
  v39 = objc_msgSend(v102, "dueAfter");
  if (!v39)
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v41(v12, 1, 1, v2);
LABEL_10:
    sub_1000EA320((uint64_t)v12);
    v43 = v102;
    v44 = objc_msgSend(v102, "dueBefore");
    if (v44)
    {
      v45 = v44;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

      v46 = (uint64_t)v92;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v92, v38, v2);
      v41((char *)v46, 0, 1, v2);
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v46, 1, v2);
      v42 = v95;
      if (v47 != 1)
      {
        v12 = (char *)v46;
        goto LABEL_13;
      }
    }
    else
    {
      v46 = (uint64_t)v92;
      v41(v92, 1, 1, v2);
      v42 = v95;
    }
    sub_1000EA320(v46);
    v52 = v101;
    goto LABEL_26;
  }
  v40 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v12, v38, v2);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
  v41(v12, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v12, 1, v2) == 1)
    goto LABEL_10;
  v42 = v95;
LABEL_13:
  sub_1000EA320((uint64_t)v12);
  v43 = v102;
  v48 = objc_msgSend(v102, "dueAfter");
  v49 = (uint64_t)v90;
  if (v48)
  {
    v50 = v48;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v51 = 0;
  }
  else
  {
    v51 = 1;
  }
  v52 = v101;
  v53 = 1;
  v41((char *)v49, v51, 1, v2);
  sub_1000CDA74(v49, v100);
  v54 = objc_msgSend(v43, "dueBefore");
  if (v54)
  {
    v55 = v54;
    v56 = v91;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

    v57 = (uint64_t)v56;
    v53 = 0;
  }
  else
  {
    v57 = (uint64_t)v91;
  }
  v41((char *)v57, v53, 1, v2);
  v58 = sub_10001A630((uint64_t *)&unk_10084C100);
  v59 = v100;
  sub_1000CDA74(v57, v100 + *(int *)(v58 + 48));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v59, enum case for REMSearchCriterion.dueDate(_:), v52);
  if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
    v34 = (_QWORD *)sub_1002C84DC(0, v34[2] + 1, 1, (unint64_t)v34);
  v61 = v34[2];
  v60 = v34[3];
  if (v61 >= v60 >> 1)
    v34 = (_QWORD *)sub_1002C84DC(v60 > 1, v61 + 1, 1, (unint64_t)v34);
  v34[2] = v61 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v61, v100, v52);
LABEL_26:
  v62 = objc_msgSend(v43, "completed");
  if (v62)
  {
    v63 = v62;
    v64 = objc_msgSend(v62, "BOOLValue");
    v65 = v98;
    *v98 = v64;
    (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v14 + 104))(v65, enum case for REMSearchCriterion.isCompleted(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = (_QWORD *)sub_1002C84DC(0, v34[2] + 1, 1, (unint64_t)v34);
    v67 = v34[2];
    v66 = v34[3];
    if (v67 >= v66 >> 1)
      v34 = (_QWORD *)sub_1002C84DC(v66 > 1, v67 + 1, 1, (unint64_t)v34);
    v34[2] = v67 + 1;
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v14 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v67, v98, v52);

    v43 = v102;
  }
  v68 = objc_msgSend(v43, "hasLocation");
  if (v68)
  {
    v69 = v68;
    v70 = objc_msgSend(v68, "BOOLValue");
    v71 = v99;
    *v99 = v70;
    (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v14 + 104))(v71, enum case for REMSearchCriterion.hasLocation(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = (_QWORD *)sub_1002C84DC(0, v34[2] + 1, 1, (unint64_t)v34);
    v73 = v34[2];
    v72 = v34[3];
    if (v73 >= v72 >> 1)
      v34 = (_QWORD *)sub_1002C84DC(v72 > 1, v73 + 1, 1, (unint64_t)v34);
    v34[2] = v73 + 1;
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v14 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v73, v99, v52);

  }
  v74 = objc_msgSend(v43, "location");
  if (v74)
  {
    v75 = v74;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v78 = v77;

    v79 = (char *)v42 + *(int *)(sub_10001A630((uint64_t *)&unk_100845750) + 48);
    *v42 = v76;
    v42[1] = v78;
    v80 = enum case for REMStringMatchingStyle.prefix(_:);
    v81 = type metadata accessor for REMStringMatchingStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v79, v80, v81);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v14 + 104))(v42, enum case for REMSearchCriterion.location(_:), v52);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = (_QWORD *)sub_1002C84DC(0, v34[2] + 1, 1, (unint64_t)v34);
    v83 = v34[2];
    v82 = v34[3];
    if (v83 >= v82 >> 1)
      v34 = (_QWORD *)sub_1002C84DC(v82 > 1, v83 + 1, 1, (unint64_t)v34);
    v34[2] = v83 + 1;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v14 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v83, v42, v52);
  }
  v84 = v96;
  v85 = (uint64_t)v97;
  v86 = sub_100321D9C((uint64_t)v34, 0, 51, v97);
  if (!v84)
  {
    v87 = (uint64_t)v86;
    swift_bridgeObjectRelease();
    v88 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    v85 = sub_1003D5F00(v87, v88, v85);

  }
  swift_bridgeObjectRelease();
  return v85;
}

uint64_t sub_100571E9C(void *a1)
{
  return sub_100571564(a1);
}

uint64_t sub_100571EBC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084FBD8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.PublicTemplateInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.PublicTemplateInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100571EF8(void *a1@<X1>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void (**v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  void (**v37)(char *, uint64_t);
  __n128 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  id v52;
  void *v53;

  v53 = a2;
  v52 = a1;
  v50 = a3;
  v4 = sub_10001A630(&qword_100839AA0);
  v5 = __chkstk_darwin(v4);
  v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v5);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ListSectionsModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v45 - v19;
  v21 = (void *)REMRemindersListDataView.PublicTemplateInvocation.Parameters.publicTemplateObjectID.getter(v18);
  v22 = sub_1005722A4(v21, (uint64_t)v52, v53);
  if (v3)
  {

    return;
  }
  v48 = v23;
  v49 = v22;
  v52 = v21;
  v45 = v9;
  v46 = v14;
  v53 = v16;
  v47 = v10;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
    v24 = &_swiftEmptySetSingleton;
    v25 = v12;
    v26 = v20;
    goto LABEL_5;
  }
  v25 = v12;
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
    v24 = v43;
    v26 = v20;
  }
  else
  {
    v24 = &_swiftEmptySetSingleton;
    v26 = v20;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      goto LABEL_5;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
LABEL_5:
    v27 = &_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      goto LABEL_8;
    goto LABEL_6;
  }
  sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
  v27 = v44;
LABEL_6:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
    v29 = v28;
    v30 = v13;
    v32 = v45;
    v31 = v46;
    goto LABEL_9;
  }
LABEL_8:
  v29 = &_swiftEmptySetSingleton;
  v33 = &_swiftEmptySetSingleton;
  v30 = v13;
  v32 = v45;
  v31 = v46;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
LABEL_9:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
      v33 = v34;
    }
    else
    {
      v33 = &_swiftEmptySetSingleton;
    }
  }
  REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v24, v27, v29, v33, &_swiftEmptySetSingleton);
  v35 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v36 = v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v51, 1, 1, v35);
  REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v48, v36, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  v37 = v49;
  v39 = REMList.codable.getter(v38);
  REMRemindersListDataView.ListSectionsModel.init(sectionsModel:list:)(v32, v39);
  v40 = v53;
  (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v53, v26, v30);
  v41 = sub_10009FC50(&qword_10084DDD0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsModel);
  v42 = sub_10009FC50(&qword_10084DDD8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v25, v40, v47, v41, v42);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v30);
}

void (**sub_1005722A4(void *a1, uint64_t a2, void *a3))(char *, uint64_t)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (**v11)(char *, uint64_t);
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  objc_class *v19;
  objc_class *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;

  v7 = type metadata accessor for RDPublicTemplate(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (***)(char *, uint64_t))(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a3;
  v34 = 0;
  v15 = objc_msgSend(a3, "fetchPrimaryActiveCloudKitAccountWithError:", &v34, v12);
  v16 = v34;
  if (v15)
  {
    v17 = v15;
    v18 = v34;
    sub_1003692F8();
    v20 = v19;
    v21 = objc_msgSend(a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    sub_100369478((uint64_t)v14, a2, v20);
    if (v3)
    {
      v11[1](v14, v10);

      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = v22;
      v11[1](v14, v10);
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(v17, "objectID", sub_10057B4DC(v9));
      v28 = sub_1000D31C8(v27);

      v29 = objc_allocWithZone((Class)REMList);
      v30 = v33;
      v31 = v17;
      v11 = (void (**)(char *, uint64_t))objc_msgSend(v29, "initWithStore:account:storage:", v30, v31, v28);

      sub_1000D3CC4();
      sub_10030DBA4((uint64_t)v9);
    }
  }
  else
  {
    v23 = v34;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v24);
  }
  return v11;
}

uint64_t sub_100572530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FBE0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FBE0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDAlarmTrigger.recordTypes()()
{
  return &off_1007E16E8;
}

uint64_t static REMCDAlarmTrigger.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDAlarmTrigger), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

uint64_t static REMCDAlarmTrigger.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t MetatypeMetadata;
  uint64_t v33;
  unint64_t v34;
  double v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;

  v4 = v3;
  v8 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  v9 = CKRecord.subscript.getter(1701869908, 0xE400000000000000);
  if (v9)
  {
    v46 = v9;
    v10 = sub_10001A630(&qword_1008398E0);
    if ((swift_dynamicCast(&v44, &v46, v10, &type metadata for String, 6) & 1) != 0)
    {
      v12 = v44;
      v11 = v45;
      swift_bridgeObjectRetain(v45);
      v48._countAndFlagsBits = v12;
      v48._object = v11;
      v13 = sub_1005755B0(v48);
      if (v13 != 4)
      {
        v19 = v13;
        swift_bridgeObjectRelease();
        __asm { BR              X10 }
      }
      if (qword_1008378B0 != -1)
        swift_once(&qword_1008378B0, sub_100572530);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_10084FBE0);
      swift_bridgeObjectRetain(v11);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v44 = v43;
        *(_DWORD *)v18 = 136446210;
        v42 = v18 + 4;
        swift_bridgeObjectRetain(v11);
        v46 = sub_10001A820(v12, (unint64_t)v11, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
        swift_bridgeObjectRelease_n(v11, 3);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "newCloudObject: Unknown alarm trigger type {type: %{public}s}", v18, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v11, 2);
      }
    }
  }
  v20 = objc_msgSend(a1, "recordID", v42);
  v21 = objc_msgSend(v20, "recordName");

  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "newObjectWithCKRecordName:context:account:", v21, a3, a2);

  if (!v22)
    return 0;
  v23 = objc_msgSend(a2, "ckIdentifier");
  if (v23)
  {
    v24 = v23;
    objc_msgSend(v22, "mergeDataFromRecord:accountID:", a1, v23);

    objc_msgSend(v22, "setCkServerRecord:", a1);
    objc_msgSend(v22, "setInCloud:", 1);
    objc_msgSend(v22, "updateParentReferenceIfNecessary");
    result = swift_dynamicCastUnknownClass(v22, v4);
    if (result)
      return result;
  }
  else
  {
    if (qword_1008378B0 != -1)
      swift_once(&qword_1008378B0, sub_100572530);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_10084FBE0);
    v27 = a2;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(64, -1);
      v46 = v31;
      *(_DWORD *)v30 = 136446466;
      v44 = v4;
      MetatypeMetadata = swift_getMetatypeMetadata(v4);
      v33 = String.init<A>(describing:)(&v44, MetatypeMetadata);
      v44 = sub_10001A820(v33, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *(_QWORD *)&v35 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v30 + 12) = 2082;
      v36 = objc_msgSend(v27, "remObjectID", v35);
      if (v36)
      {
        v37 = v36;
        v38 = objc_msgSend(v36, "description");

        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

      }
      else
      {
        v41 = 0xE300000000000000;
        v39 = 7104878;
      }
      v44 = sub_10001A820(v39, v41, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      return 0;
    }

  }
  return 0;
}

Swift::String __swiftcall REMCDAlarmTrigger.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6972546D72616C41;
  v1 = (void *)0xEC00000072656767;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

void sub_100572E7C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;

  v1 = objc_opt_self(REMCDAlarmDateTrigger);
  v2 = swift_dynamicCastObjCClass(v0, v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v0;
    v5 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0xD000000000000012, 0x80000001007081E0, v5, &type metadata for Data, &protocol witness table for Data);
    isa = 0;
    if (v16 >> 60 != 15)
    {
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71B4(v15, v16);
    }
    objc_msgSend(v3, "setDateComponentsData:", isa);

    goto LABEL_9;
  }
  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10084FBE0);
  v14 = v0;
  v4 = Logger.logObject.getter(v14);
  v8 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    ObjectType = swift_getObjectType();
    v11 = sub_10001A630((uint64_t *)&unk_10084FC00);
    v12 = String.init<A>(describing:)(&ObjectType, v11);
    ObjectType = sub_10001A820(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v18);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Record.type is date but this is not a date trigger {type: %s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_9:

    return;
  }

}

void sub_10057311C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;

  v1 = objc_opt_self(REMCDAlarmLocationTrigger);
  if (swift_dynamicCastObjCClass(v0, v1))
  {
    v0;
    JUMPOUT(0x100573214);
  }
  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084FBE0);
  v10 = v0;
  v3 = Logger.logObject.getter(v10);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10084FC00);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Record.type is location but this is not a location trigger {type: %s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

void sub_100573960()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  double v16;
  char v17;
  uint64_t ObjectType;
  uint64_t v19;

  v1 = objc_opt_self(REMCDAlarmTimeIntervalTrigger);
  v2 = swift_dynamicCastObjCClass(v0, v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v0;
    v5 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0x65746E49656D6954, 0xEC0000006C617672, v5, &type metadata for Double, &protocol witness table for Double);
    v6 = v16;
    if (v17)
      v6 = 0.0;
    objc_msgSend(v3, "setTimeInterval:", v6);

  }
  else
  {
    if (qword_1008378B0 != -1)
      swift_once(&qword_1008378B0, sub_100572530);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_10084FBE0);
    v15 = v0;
    v8 = Logger.logObject.getter(v15);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v16 = *(double *)&v11;
      *(_DWORD *)v10 = 136315138;
      ObjectType = swift_getObjectType();
      v12 = sub_10001A630((uint64_t *)&unk_10084FC00);
      v13 = String.init<A>(describing:)(&ObjectType, v12);
      ObjectType = sub_10001A820(v13, v14, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v19);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Record.type is time interval but this is not a time interval trigger {type: %s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100573BE0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t ObjectType;
  uint64_t v17;

  v1 = objc_opt_self(REMCDAlarmVehicleTrigger);
  v2 = swift_dynamicCastObjCClass(v0, v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v0;
    v5 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(0x746E657645, 0xE500000000000000, v5, &type metadata for Int16, &protocol witness table for Int16);
    if (BYTE2(v17))
      v6 = 0;
    else
      v6 = v17;
    objc_msgSend(v3, "setEvent:", v6);

  }
  else
  {
    if (qword_1008378B0 != -1)
      swift_once(&qword_1008378B0, sub_100572530);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_10084FBE0);
    v15 = v0;
    v8 = Logger.logObject.getter(v15);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v17 = v11;
      *(_DWORD *)v10 = 136315138;
      ObjectType = swift_getObjectType();
      v12 = sub_10001A630((uint64_t *)&unk_10084FC00);
      v13 = String.init<A>(describing:)(&ObjectType, v12);
      ObjectType = sub_10001A820(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v17);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Record.type is vehicle but this is not a vehicle trigger {type: %s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Void __swiftcall REMCDAlarmTrigger.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  NSString v5;
  id v6;
  NSString v7;
  double v8;
  NSString v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  objc_super v27;
  Swift::String v28;

  v3 = v2;
  v5 = String._bridgeToObjectiveC()();
  v27.receiver = v3;
  v27.super_class = (Class)REMCDAlarmTrigger;
  objc_msgSendSuper2(&v27, "mergeDataFromRecord:accountID:", from.super.isa, v5);

  v6 = -[objc_class recordID](from.super.isa, "recordID");
  v7 = objc_msgSend(v6, "recordName");

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v9 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v7, v8);

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v9, v10);

  v11 = CKRecord.subscript.getter(1701869908, 0xE400000000000000);
  if (v11
    && (v26 = v11,
        v12 = sub_10001A630(&qword_1008398E0),
        (swift_dynamicCast(&v24, &v26, v12, &type metadata for String, 6) & 1) != 0))
  {
    v14 = v24;
    v13 = v25;
    swift_bridgeObjectRetain(v25);
    v28._countAndFlagsBits = v14;
    v28._object = v13;
    v15 = sub_1005755B0(v28);
    if (v15 != 4)
    {
      v16 = v15;
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084FBE0);
  swift_bridgeObjectRetain(v13);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v21 = 136315138;
    if (v13)
    {
      v23 = (unint64_t)v13;
    }
    else
    {
      v14 = 7104878;
      v23 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain(v13);
    v26 = sub_10001A820(v14, v23, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "mergeData: Unknown trigger type {type: %s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
}

CKRecord_optional __swiftcall REMCDAlarmTrigger.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  Swift::Bool v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t ObjectType;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  objc_class *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unsigned __int16 v89;
  id v90;
  __int128 v91;
  __int128 v92;
  void *v93;
  objc_super v94;
  CKRecord_optional result;

  v1 = v0;
  v94.super_class = (Class)REMCDAlarmTrigger;
  v3 = objc_msgSendSuper2(&v94, "newlyCreatedRecord");
  if (v3)
  {
    v4 = objc_msgSend(v0, "alarm");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "recordID");

    }
    else
    {
      v6 = 0;
    }
    v7 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v6);

    CKRecord.subscript.setter(v7, 0x6D72616C41, 0xE500000000000000);
    v8 = objc_opt_self(REMCDAlarmDateTrigger);
    v9 = swift_dynamicCastObjCClass(v1, v8);
    if (v9)
    {
      v10 = (void *)v9;
      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = 1702125892;
      *((_QWORD *)&v91 + 1) = 0xE400000000000000;
      v11 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
      v12 = v1;
      CKRecordKeyValueSetting.subscript.setter(&v91, 1701869908, 0xE400000000000000, v11);
      v13 = objc_msgSend(v10, "dateComponentsData");
      if (v13)
      {
        v14 = v13;
        v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v17 = v16;

        *((_QWORD *)&v92 + 1) = &type metadata for Data;
        v93 = &protocol witness table for Data;
        *(_QWORD *)&v91 = v15;
        *((_QWORD *)&v91 + 1) = v17;
      }
      else
      {
        v93 = 0;
        v91 = 0u;
        v92 = 0u;
      }
      v36 = 0x80000001007081E0;
      v37 = 0xD000000000000012;
      v38 = v11;
LABEL_13:
      CKRecordKeyValueSetting.subscript.setter(&v91, v37, v36, v38);

      goto LABEL_36;
    }
    v18 = objc_opt_self(REMCDAlarmLocationTrigger);
    v19 = swift_dynamicCastObjCClass(v1, v18);
    if (!v19)
    {
      v39 = objc_opt_self(REMCDAlarmTimeIntervalTrigger);
      v40 = swift_dynamicCastObjCClass(v1, v39);
      if (v40)
      {
        v41 = (void *)v40;
        *((_QWORD *)&v92 + 1) = &type metadata for String;
        v93 = &protocol witness table for String;
        strcpy((char *)&v91, "TimeInterval");
        BYTE13(v91) = 0;
        HIWORD(v91) = -5120;
        v42 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
        v12 = v1;
        CKRecordKeyValueSetting.subscript.setter(&v91, 1701869908, 0xE400000000000000, v42);
        objc_msgSend(v41, "timeInterval");
        *((_QWORD *)&v92 + 1) = &type metadata for Double;
        v93 = &protocol witness table for Double;
        *(_QWORD *)&v91 = v43;
        v37 = 0x65746E49656D6954;
        v36 = 0xEC0000006C617672;
      }
      else
      {
        v86 = objc_opt_self(REMCDAlarmVehicleTrigger);
        v87 = swift_dynamicCastObjCClass(v1, v86);
        if (!v87)
          goto LABEL_36;
        v88 = (void *)v87;
        *((_QWORD *)&v92 + 1) = &type metadata for String;
        v93 = &protocol witness table for String;
        *(_QWORD *)&v91 = 0x656C6369686556;
        *((_QWORD *)&v91 + 1) = 0xE700000000000000;
        v42 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
        v12 = v1;
        CKRecordKeyValueSetting.subscript.setter(&v91, 1701869908, 0xE400000000000000, v42);
        v89 = (unsigned __int16)objc_msgSend(v88, "event");
        *((_QWORD *)&v92 + 1) = &type metadata for Int16;
        v93 = &protocol witness table for Int16;
        LOWORD(v91) = v89;
        v37 = 0x746E657645;
        v36 = 0xE500000000000000;
      }
      v38 = v42;
      goto LABEL_13;
    }
    v20 = (void *)v19;
    *((_QWORD *)&v92 + 1) = &type metadata for String;
    v93 = &protocol witness table for String;
    *(_QWORD *)&v91 = 0x6E6F697461636F4CLL;
    *((_QWORD *)&v91 + 1) = 0xE800000000000000;
    v21 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    v90 = v1;
    CKRecordKeyValueSetting.subscript.setter(&v91, 1701869908, 0xE400000000000000, v21);
    v22 = objc_msgSend(v3, "encryptedValues");
    ObjectType = swift_getObjectType();
    objc_msgSend(v20, "latitude");
    *((_QWORD *)&v92 + 1) = &type metadata for Double;
    v93 = &protocol witness table for Double;
    *(_QWORD *)&v91 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x656475746974614CLL, 0xE800000000000000, ObjectType);
    swift_unknownObjectRelease(v22);
    v25 = objc_msgSend(v3, "encryptedValues");
    v26 = swift_getObjectType();
    objc_msgSend(v20, "longitude");
    *((_QWORD *)&v92 + 1) = &type metadata for Double;
    v93 = &protocol witness table for Double;
    *(_QWORD *)&v91 = v27;
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x64757469676E6F4CLL, 0xE900000000000065, v26);
    swift_unknownObjectRelease(v25);
    v28 = (unsigned __int16)objc_msgSend(v20, "proximity");
    *((_QWORD *)&v92 + 1) = &type metadata for Int16;
    v93 = &protocol witness table for Int16;
    LOWORD(v91) = v28;
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x74696D69786F7250, 0xE900000000000079, v21);
    objc_msgSend(v20, "radius");
    *((_QWORD *)&v92 + 1) = &type metadata for Double;
    v93 = &protocol witness table for Double;
    *(_QWORD *)&v91 = v29;
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x737569646152, 0xE600000000000000, v21);
    v30 = objc_msgSend(v3, "encryptedValues");
    v31 = objc_msgSend(v20, "title");
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v35 = v34;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v33;
      *((_QWORD *)&v91 + 1) = v35;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v44 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x656C746954, 0xE500000000000000, v44);
    swift_unknownObjectRelease(v30);
    v45 = objc_msgSend(v20, "locationUID");
    if (v45)
    {
      v46 = v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v47;
      *((_QWORD *)&v91 + 1) = v49;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x6E6F697461636F4CLL, 0xEB00000000444955, v21);
    v50 = objc_msgSend(v3, "encryptedValues");
    v51 = objc_msgSend(v20, "address");
    if (v51)
    {
      v52 = v51;
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v55 = v54;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v53;
      *((_QWORD *)&v91 + 1) = v55;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v56 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x73736572646441, 0xE700000000000000, v56);
    swift_unknownObjectRelease(v50);
    v57 = objc_msgSend(v3, "encryptedValues");
    v58 = objc_msgSend(v20, "routing");
    if (v58)
    {
      v59 = v58;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v62 = v61;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v60;
      *((_QWORD *)&v91 + 1) = v62;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v63 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x676E6974756F52, 0xE700000000000000, v63);
    swift_unknownObjectRelease(v57);
    v64 = objc_msgSend(v3, "encryptedValues");
    v65 = objc_msgSend(v20, "referenceFrameString");
    if (v65)
    {
      v66 = v65;
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v69 = v68;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v67;
      *((_QWORD *)&v91 + 1) = v69;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v70 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0xD000000000000014, 0x80000001007081C0, v70);
    swift_unknownObjectRelease(v64);
    v71 = objc_msgSend(v3, "encryptedValues");
    v72 = objc_msgSend(v20, "contactLabel");
    if (v72)
    {
      v73 = v72;
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      v76 = v75;

      *((_QWORD *)&v92 + 1) = &type metadata for String;
      v93 = &protocol witness table for String;
      *(_QWORD *)&v91 = v74;
      *((_QWORD *)&v91 + 1) = v76;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v77 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x4C746361746E6F43, 0xEC0000006C656261, v77);
    swift_unknownObjectRelease(v71);
    v78 = objc_msgSend(v3, "encryptedValues");
    v79 = objc_msgSend(v20, "mapKitHandle");
    if (v79)
    {
      v80 = v79;
      v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v83 = v82;

      *((_QWORD *)&v92 + 1) = &type metadata for Data;
      v93 = &protocol witness table for Data;
      *(_QWORD *)&v91 = v81;
      *((_QWORD *)&v91 + 1) = v83;
    }
    else
    {
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
    }
    v84 = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v91, 0x614874694B70614DLL, 0xEC000000656C646ELL, v84);

    swift_unknownObjectRelease(v78);
  }
LABEL_36:
  v85 = (objc_class *)v3;
  result.value.super.isa = v85;
  result.is_nil = v2;
  return result;
}

void __swiftcall REMCDAlarmTrigger.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(v1, "alarm");
}

Swift::Void __swiftcall REMCDAlarmTrigger.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084FBE0);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630((uint64_t *)&unk_10084FC00);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDAlarmTrigger.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint32_t *p_ivar_base_size;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084FBE0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "alarm", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for alarmTrigger {alarmTriggerID: %{public}s, alarmID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, *((SEL *)p_ivar_base_size + 384));
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Alarm is marked for deletion but alarm trigger is not {alarmTriggerID: %{public}s, alarmID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

unint64_t sub_1005755B0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1638, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t _sSo17REMCDAlarmTriggerC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084FBE0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10084FC00);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo17REMCDAlarmTriggerC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008378B0 != -1)
    swift_once(&qword_1008378B0, sub_100572530);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084FBE0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10084FC00);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_100575974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FC10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FC10);
  if (qword_100837648 != -1)
    swift_once(&qword_100837648, sub_1004A18A8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100575A20()
{
  void *v0;
  objc_class *v1;
  char *v2;
  id v3;
  char *v4;
  id v5;
  id v6;
  objc_super v7;

  if (qword_100836F30 != -1)
    swift_once(&qword_100836F30, sub_1001BA924);
  v0 = (void *)qword_100871CF0;
  v1 = (objc_class *)type metadata accessor for RDAsyncAnalytics();
  v2 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem] = 0;
  v3 = v0;
  v4 = v2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts] = sub_1002B0848((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts] = sub_1002B0848((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_queue] = v3;
  v4[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_enabled] = 1;
  v5 = v3;

  v7.receiver = v4;
  v7.super_class = v1;
  v6 = objc_msgSendSuper2(&v7, "init");

  qword_10084FC28 = (uint64_t)v6;
}

uint64_t sub_100575B20()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  char *v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem])
  {
    v14 = swift_allocObject(&unk_1007FB650, 24, 7);
    *(_QWORD *)(v14 + 16) = v1;
    aBlock[4] = sub_100576EFC;
    v28 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007FB668;
    v24 = _Block_copy(aBlock);
    v26 = _swiftEmptyArrayStorage;
    v15 = sub_1000D3124();
    v25 = v1;
    v16 = sub_10001A630((uint64_t *)&unk_100838000);
    v17 = sub_1000D316C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v16, v17, v9, v15);
    v18 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = DispatchWorkItem.init(flags:block:)(v12, v24);
    swift_release(v28);
    v20 = *(_QWORD *)&v1[v13];
    *(_QWORD *)&v1[v13] = v19;
    swift_retain(v19);
    v21 = swift_release(v20);
    static DispatchTime.now()(v21);
    + infix(_:_:)(v6, 60.0);
    v22 = *(void (**)(char *, uint64_t))(v3 + 8);
    v22(v6, v2);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v8, v19);
    swift_release(v19);
    return ((uint64_t (*)(char *, uint64_t))v22)(v8, v2);
  }
  return result;
}

uint64_t sub_100575D4C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _BYTE v45[24];

  if ((a3 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a3) & 0xF;
  else
    v8 = a2 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(a3);
  if (v8)
  {
    v9 = 4 * v8;
    v10 = 15;
    while (1)
    {
      swift_bridgeObjectRetain(a3);
      v11 = String.subscript.getter(v10, a2, a3);
      v13 = v12;
      swift_bridgeObjectRelease(a3);
      if (v11 == 58 && v13 == 0xE100000000000000)
        break;
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 58, 0xE100000000000000, 0);
      v15 = swift_bridgeObjectRelease(v13);
      if ((v14 & 1) == 0)
      {
        v10 = String.index(after:)(v10, a2, a3, v15);
        if (v9 != v10 >> 14)
          continue;
      }
      goto LABEL_13;
    }
    swift_bridgeObjectRelease(0xE100000000000000);
  }
  else
  {
    v10 = 15;
  }
LABEL_13:
  v16 = String.subscript.getter(15, v10, a2, a3);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = swift_bridgeObjectRelease(a3);
  v24 = static String._fromSubstring(_:)(v16, v18, v20, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease(v22);
  v27 = (_QWORD *)(a1 + *a4);
  swift_beginAccess(v27, v45, 33, 0);
  swift_bridgeObjectRetain(v26);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
  v29 = *v27;
  v44 = *v27;
  *v27 = 0x8000000000000000;
  v31 = sub_10001A6DC(v24, v26);
  v32 = *(_QWORD *)(v29 + 16);
  v33 = (v30 & 1) == 0;
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v22) = v30;
  if (*(_QWORD *)(v29 + 24) >= v34)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    sub_1002D4EF8(v34, isUniquelyReferenced_nonNull_native);
    v35 = sub_10001A6DC(v24, v26);
    if ((v22 & 1) != (v36 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    v31 = v35;
  }
  while (1)
  {
    v37 = *v27;
    *v27 = v44;
    swift_bridgeObjectRelease(v37);
    v38 = *v27;
    if ((v22 & 1) == 0)
    {
      sub_10028F778(v31, v24, v26, 0, (_QWORD *)*v27);
      swift_bridgeObjectRetain(v26);
    }
    v39 = *(_QWORD *)(v38 + 56);
    v40 = *(_QWORD *)(v39 + 8 * v31);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (!v41)
      break;
LABEL_23:
    __break(1u);
LABEL_24:
    sub_1002DAAC8();
  }
  *(_QWORD *)(v39 + 8 * v31) = v42;
  swift_endAccess(v45);
  swift_bridgeObjectRelease_n(v26, 2);
  return sub_100575B20();
}

uint64_t sub_100575FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  void (*v10)(uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v65[2];
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t *, uint64_t);
  void (*v70)(uint64_t *, _QWORD, uint64_t);
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[4];

  v68 = a1;
  v1 = type metadata accessor for REMAnalyticsEvent(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  v4[2] = 0;
  v4[3] = 0;
  v5 = *(uint64_t (**)(_QWORD))(v2 + 104);
  v71 = enum case for REMAnalyticsEvent.storeControllerReadWrite(_:);
  v70 = (void (*)(uint64_t *, _QWORD, uint64_t))v5;
  v6 = v5(v4);
  v7 = REMAnalyticsEvent.id.getter(v6);
  v9 = v8;
  v10 = *(void (**)(uint64_t *, uint64_t))(v2 + 8);
  v72 = v4;
  v73 = v1;
  v69 = v10;
  v10(v4, v1);
  v11 = String.utf8CString.getter(v7, v9);
  v67 = os_transaction_create(v11 + 32);
  swift_release(v11);
  if (qword_1008378B8 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1008378B8, sub_100575974);
LABEL_2:
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10084FC10);
    v14 = swift_bridgeObjectRetain_n(v9, 2);
    v65[1] = v13;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    v66 = v9;
    v65[0] = v7;
    if (v17)
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v81[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(v9);
      v79 = sub_10001A820(v7, v9, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease_n(v9, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "os_transaction INIT {name: %s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v9, 2);
    }
    v20 = v68;
    v21 = (uint64_t *)(v68 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts);
    swift_beginAccess(v68 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts, v81, 1, 0);
    v75 = v21;
    v22 = swift_bridgeObjectRetain(*v21);
    v23 = sub_10011E910(v22);
    v24 = (_QWORD *)(v20 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts);
    swift_beginAccess(v24, &v79, 1, 0);
    v25 = swift_bridgeObjectRetain(*v24);
    sub_10059E294(v25, v23);
    v9 = 0;
    v27 = *(_QWORD *)(v26 + 56);
    v76 = v26;
    v28 = 1 << *(_BYTE *)(v26 + 32);
    v29 = v26 + 56;
    v30 = -1;
    if (v28 < 64)
      v30 = ~(-1 << v28);
    v7 = v30 & v27;
    v31 = (unint64_t)(v28 + 63) >> 6;
    if ((v30 & v27) != 0)
    {
      while (1)
      {
        v32 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v33 = v32 | (v9 << 6);
LABEL_26:
        v37 = (uint64_t *)(*(_QWORD *)(v76 + 48) + 16 * v33);
        v38 = *v37;
        v39 = v37[1];
        swift_beginAccess(v24, v78, 32, 0);
        v40 = *v24;
        v41 = *(_QWORD *)(*v24 + 16);
        swift_bridgeObjectRetain(v39);
        if (!v41)
          goto LABEL_10;
        v42 = sub_10001A6DC(v38, v39);
        if ((v43 & 1) == 0)
          goto LABEL_10;
        v44 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v42);
        swift_endAccess(v78);
        v45 = v75;
        swift_beginAccess(v75, v78, 32, 0);
        v46 = *v45;
        if (!*(_QWORD *)(v46 + 16))
          goto LABEL_10;
        swift_bridgeObjectRetain(v39);
        v47 = sub_10001A6DC(v38, v39);
        if ((v48 & 1) != 0)
        {
          v74 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v47);
          swift_endAccess(v78);
          v49 = swift_bridgeObjectRelease(v39);
          type metadata accessor for Analytics(0, v49);
          v50 = v29;
          v51 = v72;
          *v72 = v38;
          v51[1] = v39;
          v53 = v73;
          v52 = v74;
          v51[2] = v44;
          v51[3] = v52;
          v70(v51, v71, v53);
          static Analytics.postEvent(_:)(v51);
          v54 = v51;
          v29 = v50;
          v69(v54, v53);
          if (!v7)
            break;
        }
        else
        {
          swift_bridgeObjectRelease(v39);
LABEL_10:
          swift_endAccess(v78);
          swift_bridgeObjectRelease(v39);
          if (!v7)
            break;
        }
      }
    }
    v34 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v34 >= v31)
      break;
    v35 = *(_QWORD *)(v29 + 8 * v34);
    ++v9;
    if (v35)
      goto LABEL_25;
    v9 = v34 + 1;
    if (v34 + 1 >= v31)
      break;
    v35 = *(_QWORD *)(v29 + 8 * v9);
    if (v35)
      goto LABEL_25;
    v9 = v34 + 2;
    if (v34 + 2 >= v31)
      break;
    v35 = *(_QWORD *)(v29 + 8 * v9);
    if (v35)
      goto LABEL_25;
    v36 = v34 + 3;
    if (v36 >= v31)
      break;
    v35 = *(_QWORD *)(v29 + 8 * v36);
    if (v35)
    {
      v9 = v36;
LABEL_25:
      v7 = (v35 - 1) & v35;
      v33 = __clz(__rbit64(v35)) + (v9 << 6);
      goto LABEL_26;
    }
    while (1)
    {
      v9 = v36 + 1;
      if (__OFADD__(v36, 1))
        break;
      if (v9 >= v31)
        goto LABEL_32;
      v35 = *(_QWORD *)(v29 + 8 * v9);
      ++v36;
      if (v35)
        goto LABEL_25;
    }
LABEL_36:
    __break(1u);
  }
LABEL_32:
  swift_release(v76);
  v55 = *v24;
  *v24 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v55);
  v56 = *v75;
  *v75 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v56);
  v57 = *(_QWORD *)(v68 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem);
  *(_QWORD *)(v68 + OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_postEventWorkItem) = 0;
  swift_release(v57);
  v58 = v66;
  v59 = swift_bridgeObjectRetain(v66);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v78[0] = v63;
    *(_DWORD *)v62 = 136315138;
    swift_bridgeObjectRetain(v58);
    v77 = sub_10001A820(v65[0], v58, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78);
    swift_bridgeObjectRelease_n(v58, 3);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "os_transaction RELEASE {name: %s}", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);

    return swift_unknownObjectRelease(v67);
  }
  else
  {

    swift_unknownObjectRelease(v67);
    return swift_bridgeObjectRelease_n(v58, 2);
  }
}

uint64_t sub_10057663C(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  _OWORD *v23;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_OWORD *)swift_allocObject(&unk_1007FB5B0, 112, 7);
  v11 = a1[3];
  v10[3] = a1[2];
  v10[4] = v11;
  v12 = a1[5];
  v10[5] = a1[4];
  v10[6] = v12;
  v13 = a1[1];
  v10[1] = *a1;
  v10[2] = v13;
  aBlock[4] = sub_100576E70;
  v23 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007FB5C8;
  v14 = _Block_copy(aBlock);
  v15 = sub_100576E78((uint64_t)a1);
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_1000D3124();
  v17 = sub_10001A630((uint64_t *)&unk_100838000);
  v18 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v23);
}

void sub_10057680C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  sub_100576850(a1);
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100576850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString *v10;
  Class isa;
  id v12;
  NSString v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  _QWORD v35[9];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35[0] = type metadata accessor for REMAnalyticsEvent(0);
  v2 = *(_QWORD *)(v35[0] - 8);
  __chkstk_darwin(v35[0]);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = sub_10001A630(&qword_1008447C0);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v8 + 32) = NLTagSchemeLexicalClass;
  v9 = objc_allocWithZone((Class)NLTagger);
  type metadata accessor for NLTagScheme(0);
  v10 = NLTagSchemeLexicalClass;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v9, "initWithTagSchemes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setString:", v13);

  v41 = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v14 = String.count.getter(v5, v6);
  v16 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v16 = v5;
  v17 = 11;
  if (((v6 >> 60) & ((v5 & 0x800000000000000) == 0)) == 0)
    v17 = 7;
  v35[4] = &v41;
  v35[5] = &v40;
  v35[6] = &v39;
  v35[7] = &v38;
  v35[8] = &v37;
  NLTagger.enumerateTags(in:unit:scheme:options:using:)(15, v17 | (v16 << 16), 0, v10, 22, sub_100576EA0, v15);
  v18 = v39;
  v19 = v41;
  v21 = v37;
  v20 = v38;
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(_BYTE *)(a1 + 56);
  v24 = *(_QWORD *)(a1 + 64);
  v26 = *(_BYTE *)(a1 + 16);
  v27 = *(_BYTE *)(a1 + 40);
  v28 = *(_BYTE *)(a1 + 73);
  v36 = *(_BYTE *)(a1 + 72);
  v25 = v36;
  *(_QWORD *)v4 = v40;
  *((_QWORD *)v4 + 1) = v19;
  *((_QWORD *)v4 + 2) = v18;
  *((_QWORD *)v4 + 3) = v20;
  *((_QWORD *)v4 + 4) = v21;
  *((_QWORD *)v4 + 5) = v22;
  v4[48] = v23;
  *((_QWORD *)v4 + 7) = v24;
  v4[64] = v25;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 80);
  v4[88] = v26;
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a1 + 24);
  v4[112] = v27;
  v4[113] = v28;
  *((_QWORD *)v4 + 15) = v14;
  v29 = v35[0];
  v30.n128_f64[0] = (*(double (**)(char *, _QWORD, _QWORD))(v2 + 104))(v4, enum case for REMAnalyticsEvent.reminderIngestorMerged(_:), v35[0]);
  type metadata accessor for REMAnalyticsManager(0, v30);
  v32 = static REMAnalyticsManager.shared.getter(v31);
  REMAnalyticsManager.post(event:)(v4, v33);

  swift_release(v32);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v29);
}

void sub_100576AE0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char v47;
  id v48;

  if (a1)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLTagNoun);
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v14 == v17 && v16 == v18)
    {
      v37 = a1;
      swift_bridgeObjectRelease_n(v16, 2);
    }
    else
    {
      v20 = v18;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
      v22 = a1;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v20);
      if ((v21 & 1) == 0)
      {
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLTagVerb);
        v25 = v24;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        if (v23 == v26 && v25 == v27)
        {
          swift_bridgeObjectRelease_n(v25, 2);
        }
        else
        {
          v29 = v27;
          v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0);
          swift_bridgeObjectRelease(v25);
          swift_bridgeObjectRelease(v29);
          if ((v30 & 1) == 0)
          {
            v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLTagAdjective);
            v33 = v32;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
            v36 = v34;
            if (v31 == v35 && v33 == v34)
            {
              swift_bridgeObjectRelease_n(v33, 2);
            }
            else
            {
              v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
              swift_bridgeObjectRelease(v33);
              swift_bridgeObjectRelease(v36);
              if ((v39 & 1) == 0)
              {
                v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(NLTagAdverb);
                v42 = v41;
                v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                v45 = v43;
                if (v40 == v44 && v42 == v43)
                {
                  v46 = v22;

                  swift_bridgeObjectRelease_n(v42, 2);
                }
                else
                {
                  v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v44, v43, 0);
                  v48 = v22;

                  swift_bridgeObjectRelease(v42);
                  swift_bridgeObjectRelease(v45);
                  if ((v47 & 1) == 0)
                  {
                    v38 = *a8 + 1;
                    if (!__OFADD__(*a8, 1))
                    {
                      a4 = a8;
                      goto LABEL_17;
                    }
LABEL_37:
                    __break(1u);
                    return;
                  }
                }
                v38 = *a7 + 1;
                if (!__OFADD__(*a7, 1))
                {
                  a4 = a7;
                  goto LABEL_17;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
            }

            v38 = *a6 + 1;
            if (!__OFADD__(*a6, 1))
            {
              a4 = a6;
              goto LABEL_17;
            }
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }

        v38 = *a5 + 1;
        if (!__OFADD__(*a5, 1))
        {
          a4 = a5;
          goto LABEL_17;
        }
        goto LABEL_34;
      }
    }

    v38 = *a4 + 1;
    if (!__OFADD__(*a4, 1))
    {
LABEL_17:
      *a4 = v38;
      return;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t type metadata accessor for RDAsyncAnalytics()
{
  return objc_opt_self(_TtC7remindd16RDAsyncAnalytics);
}

uint64_t sub_100576E4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 112, 7);
}

void sub_100576E70()
{
  uint64_t v0;

  sub_10057680C(v0 + 16);
}

uint64_t sub_100576E78(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_100576EA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;

  sub_100576AE0(a1, a2, a3, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_100576EB4()
{
  uint64_t v0;

  return sub_100575D4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_saveCounts);
}

uint64_t sub_100576ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100576EFC()
{
  uint64_t v0;

  return sub_100575FDC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100576F08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100576F34()
{
  uint64_t v0;

  return sub_100575D4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &OBJC_IVAR____TtC7remindd16RDAsyncAnalytics_q_fetchCounts);
}

void sub_100576F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[24];
  _BYTE v41[48];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v40[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v1 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started) & 1) != 0)
  {
    if (qword_1008378C8 == -1)
    {
LABEL_4:
      v13 = type metadata accessor for Logger(0);
      v14 = sub_10001AAA8(v13, (uint64_t)qword_10084FC80);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Started RDSuggestedAttributesAutoTrainer more than once", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      return;
    }
LABEL_13:
    swift_once(&qword_1008378C8, sub_1005773CC);
    goto LABEL_4;
  }
  if (qword_1008378C8 != -1)
    swift_once(&qword_1008378C8, sub_1005773CC);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10084FC80);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting RDSuggestedAttributesAutoTrainer", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  *(_BYTE *)(v1 + v12) = 1;
  v23 = swift_allocObject(&unk_1007FB7E8, 24, 7);
  swift_weakInit(v23 + 16, v1);
  v24 = (_QWORD *)swift_allocObject(&unk_1007FB810, 40, 7);
  v24[2] = v10;
  v24[3] = sub_100579F74;
  v24[4] = v23;
  v25 = type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject(v25, 128, 7);
  v26 = v10;
  sub_1004F69CC(0, (uint64_t)sub_1000A5B1C, (uint64_t)v24);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity) = v28;
  swift_release(v27);
  v29 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v29, v41);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v31 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  *(_QWORD *)(inited + 32) = v32;
  *(_QWORD *)(inited + 40) = v34;
  v35 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v36 = swift_allocObject(&unk_1007FB7E8, 24, 7);
  swift_weakInit(v36 + 16, v1);
  swift_retain();
  sub_100395434(v35, v26, (uint64_t)sub_100579FB8, v36, (uint64_t)v4);
  swift_bridgeObjectRelease(v35);
  swift_release_n(v36, 2);
  v37 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v4, 0, 1, v37);
  v38 = v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken, v40, 33, 0);
  sub_1000BABD0((uint64_t)v4, v38, (uint64_t *)&unk_10083A360);
  swift_endAccess(v40);
  sub_1005792FC(0);
}

uint64_t sub_1005773CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FC80);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FC80);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10057745C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "suggestedAttributes");
  qword_10084FC98 = (uint64_t)result;
  return result;
}

uint64_t sub_100577494@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double (*v7)(uint64_t, uint64_t);
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[40];
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18[24];

  ObjectType = swift_getObjectType();
  v4 = (uint64_t)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity____lazy_storage___throttlingPolicy];
  swift_beginAccess(&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity____lazy_storage___throttlingPolicy], v18, 0, 0);
  sub_100008868(v4, (uint64_t)&v15, (uint64_t *)&unk_100840BC0);
  if (!v16)
  {
    sub_10000882C((uint64_t)&v15, (uint64_t *)&unk_100840BC0);
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs + 24];
    v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs + 32];
    sub_10000A388(&v1[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs], v5);
    v7 = *(double (**)(uint64_t, uint64_t))(v6 + 8);
    v8 = v1;
    v9 = v7(v5, v6);
    v16 = ObjectType;
    v17 = &off_1007FB780;
    *(_QWORD *)&v15 = v8;
    v10 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
    v11 = swift_allocObject(v10, 64, 7);
    sub_10001BCA8(&v15, v11 + 16);
    *(double *)(v11 + 56) = v9;
    v16 = v10;
    v17 = &off_1007F54C8;
    *(_QWORD *)&v15 = v11;
    sub_100018618((uint64_t)&v15, (uint64_t)v14);
    swift_beginAccess(v4, v13, 33, 0);
    sub_1000BABD0((uint64_t)v14, v4, (uint64_t *)&unk_100840BC0);
    swift_endAccess(v13);
  }
  return sub_10001BCA8(&v15, a1);
}

unint64_t sub_100577608()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

uint64_t sub_100577718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25[5];
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
  if (swift_dynamicCast(v25, v26, v5, v6, 0))
  {

    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType();
    v10 = *(void (**)(uint64_t, uint64_t, __n128))(v8 + 32);
    v11 = swift_unknownObjectRetain(v7);
    v10(ObjectType, v8, v11);
    swift_unknownObjectRelease(v7);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_1008378C8 != -1)
      swift_once(&qword_1008378C8, sub_1005773CC);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_10084FC80);
    v14 = sub_100018618(a1, (uint64_t)v25);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v24 = v18;
      *(_DWORD *)v17 = 136446210;
      sub_100018618((uint64_t)v25, (uint64_t)&v22);
      v19 = String.init<A>(describing:)(&v22, v5);
      v22 = sub_10001A820(v19, v20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDSuggestedAttributesAutoTrainingExecutionDateStorage.lastExecutedDate(for:) must work with RDSuggestedAttributesAutoTrainingActivity only {executable: %{public}s}", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v21 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 1, 1, v21);
  }
}

uint64_t sub_100577974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29[5];
  _QWORD v30[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v30);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
  if (swift_dynamicCast(v29, v30, v8, v9, 0))
  {

    v10 = *(_QWORD *)(v2 + 16);
    v11 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType();
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v7, a2, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 40);
    v16 = swift_unknownObjectRetain(v10);
    v15(v7, ObjectType, v11, v16);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    if (qword_1008378C8 != -1)
      swift_once(&qword_1008378C8, sub_1005773CC);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084FC80);
    v18 = sub_100018618(a1, (uint64_t)v29);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v28 = v22;
      *(_DWORD *)v21 = 136446210;
      sub_100018618((uint64_t)v29, (uint64_t)&v26);
      v23 = String.init<A>(describing:)(&v26, v8);
      v26 = sub_10001A820(v23, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v29);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDSuggestedAttributesAutoTrainingExecutionDateStorage.updateLastExecutedDate(for:) must work with RDSuggestedAttributesAutoTrainingActivity only {executable: %{public}s}", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v29);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v30);
}

uint64_t sub_100577C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100577718(a1, a2);
}

uint64_t sub_100577C34(uint64_t a1, uint64_t a2)
{
  return sub_100577974(a1, a2);
}

uint64_t sub_100577D1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter, a1, (uint64_t *)&unk_10083E300);
}

uint64_t sub_100577D48@<X0>(uint64_t a1@<X8>)
{
  return sub_100577494(a1);
}

uint64_t sub_100577D68()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100577DA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executionDateStorage, a1);
}

uint64_t sub_100577DCC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[6];

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executable);
  v3[4] = &off_1007FB728;
  v3[5] = &off_1007FB738;
  v3[3] = type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_1003B4A2C(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

void sub_100577E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[24];
  _BYTE v20[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)v18 - v6;
  v8 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken, v20, 0, 0);
  sub_100008868(v12, (uint64_t)v7, (uint64_t *)&unk_10083A360);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_10083A360);
LABEL_5:

    swift_release(*(_QWORD *)(v1 + 24));
    swift_unknownObjectRelease(*(_QWORD *)(v1 + 40));
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v1 + 56));
    sub_10000882C(v12, (uint64_t *)&unk_10083A360);
    swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity));
    return;
  }
  sub_1000E54B4((uint64_t)v7, (uint64_t)v11);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = *(os_unfair_lock_s **)(v13 + 40);
  os_unfair_lock_lock(v14);
  v18[0] = v18;
  __chkstk_darwin(v15);
  v18[-2] = v11;
  swift_beginAccess(v13 + 48, v19, 33, 0);
  sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v18[-4]);
  v17 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16);
  if (v17 >= v16)
  {
    sub_1001CED20(v16, v17);
    swift_endAccess(v19);
    os_unfair_lock_unlock(v14);
    sub_1000A3F78((uint64_t)v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
    swift_beginAccess(v12, v19, 33, 0);
    sub_1000BABD0((uint64_t)v4, v12, (uint64_t *)&unk_10083A360);
    swift_endAccess(v19);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1005780BC()
{
  uint64_t v0;

  sub_100577E4C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005780E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1008378D0 != -1)
    swift_once(&qword_1008378D0, sub_10057745C);
  v8 = qword_10084FC98;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v7, &_mh_execute_header, v8, "RDSuggestedAttributesAutoTrainingActivity.execute", 49, 2, v5);
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  if (qword_1008378C8 != -1)
    swift_once(&qword_1008378C8, sub_1005773CC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001AAA8(v10, (uint64_t)qword_10084FC80);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDSuggestedAttributesAutoTrainingActivityExecutable: execute now", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15.n128_f64[0] = (*(double (**)(void))(v1 + 32))();
  v16 = static os_signpost_type_t.end.getter(v15);
  v17 = qword_10084FC98;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v16, &_mh_execute_header, v17, "RDSuggestedAttributesAutoTrainingActivity.execute", 49, 2, v5);
  return ((uint64_t (*)(char *, uint64_t))v9)(v5, v2);
}

uint64_t sub_1005782DC()
{
  return sub_1005780E0();
}

void sub_1005782FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  objc_class *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  void (*v32)(uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint8_t *v56;
  _QWORD v57[3];
  _BYTE v58[8];
  _QWORD v59[3];
  __int128 v60;
  __int128 v61;
  _UNKNOWN **v62;
  uint64_t v63[5];
  _BYTE v64[32];
  _BYTE v65[8];

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (uint8_t *)&v52 - v8;
  a1 += 16;
  swift_beginAccess(a1, v64, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v11 = Strong;
    v56 = v9;
    if (qword_1008378C8 != -1)
      swift_once(&qword_1008378C8, sub_1005773CC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10084FC80);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDSuggestedAttributesAutoTrainer XPC activity called back to run", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = swift_allocObject(&unk_1007FB7E8, 24, 7);
    swift_weakInit(v17 + 16, v11);
    v18 = type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable();
    v19 = (_QWORD *)swift_allocObject(v18, 48, 7);
    v19[2] = 0xD000000000000027;
    v19[3] = 0x8000000100708500;
    v19[4] = sub_10057A09C;
    v19[5] = v17;
    v21 = *(_QWORD *)(v11 + 40);
    v20 = *(_QWORD *)(v11 + 48);
    sub_100018618(v11 + 56, (uint64_t)v63);
    v22 = (void *)objc_opt_self(DABabysitter);
    swift_retain();
    v23 = objc_msgSend(v22, "sharedBabysitter", swift_unknownObjectRetain(v21).n128_f64[0]);
    if (v23)
    {
      v24 = v23;
      *((_QWORD *)&v61 + 1) = sub_1000151B0(0, (unint64_t *)&qword_10083EFE8, DABabysitter_ptr);
      v62 = &off_1007F4EC0;
      *(_QWORD *)&v60 = v24;
    }
    else
    {
      v62 = 0;
      v60 = 0u;
      v61 = 0u;
    }
    v25 = (objc_class *)type metadata accessor for RDSuggestedAttributesAutoTrainingActivity();
    v26 = objc_allocWithZone(v25);
    v27 = sub_10057A0B4((uint64_t)v19, v21, v20, v63, (uint64_t)&v60);
    swift_release(v19);
    swift_unknownObjectRelease(v21);
    v63[3] = (uint64_t)v25;
    v63[4] = (uint64_t)&off_1007FB7A0;
    v63[0] = (uint64_t)v27;
    v28 = v27;
    sub_1003CCDFC(v63);
    if (v2)
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v63);
      swift_getErrorValue(v2, v65, v59);
      if ((Error.isREMError(withErrorCode:)(-1002, v59[1], v59[2]) & 1) != 0)
      {
        v54 = v4;
        v55 = v28;
        v29 = *(_QWORD *)(v11 + 40);
        v30 = *(_QWORD *)(v11 + 48);
        ObjectType = swift_getObjectType(v29);
        v32 = *(void (**)(uint64_t, uint64_t, __n128))(v30 + 32);
        v33 = swift_unknownObjectRetain(v29);
        v34 = (uint64_t)v56;
        v32(ObjectType, v30, v33);
        swift_unknownObjectRelease(v29);
        v35 = sub_100008868(v34, (uint64_t)v7, (uint64_t *)&unk_1008380D0);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v53 = swift_slowAlloc(32, -1);
          v63[0] = v53;
          *(_DWORD *)v38 = 136446210;
          v52 = v38 + 4;
          v39 = Optional.descriptionOrNil.getter(v54);
          v41 = v40;
          *(_QWORD *)&v60 = sub_10001A820(v39, v40, v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8);
          swift_bridgeObjectRelease(v41);
          sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDSuggestedAttributesAutoTrainer TRAIN THROTTLED, skipping {lastExecuted: %{public}s}", v38, 0xCu);
          v42 = v53;
          swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

          sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
        }
        swift_errorRelease(v2);
        swift_release(v11);
        swift_release(v19);

        sub_10000882C((uint64_t)v56, (uint64_t *)&unk_1008380D0);
      }
      else
      {
        swift_errorRetain(v2);
        v43 = swift_errorRetain(v2);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc(12, -1);
          v47 = swift_slowAlloc(32, -1);
          v63[0] = v47;
          v55 = v28;
          *(_DWORD *)v46 = 136315138;
          v56 = v46 + 4;
          swift_getErrorValue(v2, v58, v57);
          v48 = Error.rem_errorDescription.getter(v57[1], v57[2]);
          v50 = v49;
          *(_QWORD *)&v60 = sub_10001A820(v48, v49, v63);
          v28 = v55;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8);
          swift_bridgeObjectRelease(v50);
          swift_errorRelease(v2);
          swift_errorRelease(v2);
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDSuggestedAttributesAutoTrainer TRAIN ERROR: (%s", v46, 0xCu);
          swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v46, -1, -1);
        }
        else
        {
          swift_errorRelease(v2);
          swift_errorRelease(v2);
        }

        swift_willThrow(v51);
        swift_release(v11);
        swift_release(v19);

      }
    }
    else
    {

      swift_release(v19);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v63);
      swift_release(v11);
    }
  }
}

uint64_t sub_10057896C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1005789D0();
    return swift_release(v3);
  }
  return result;
}

void sub_1005789D0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t ObjectType;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  id v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  void (*v70)(char *, uint64_t, __n128);
  void (*v71)(char *, uint64_t);
  int v72;
  int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  _QWORD v104[6];

  v2 = v0;
  v3 = type metadata accessor for REMSuggestedAttributesTrainer.Result(0);
  v83 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v82 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v89 = (char *)&v76 - v6;
  v7 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters(0);
  v88 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v92 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.AnchoredBubble(0);
  v90 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v87 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v76 - v12;
  v93 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.IntentionalWord(0);
  v14 = *(_QWORD *)(v93 - 8);
  v15 = __chkstk_darwin(v93);
  v86 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v97 = (char *)&v76 - v17;
  v101 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.Embedding(0);
  v18 = *(_QWORD *)(v101 - 8);
  v19 = __chkstk_darwin(v101);
  v85 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v95 = (char *)&v76 - v21;
  v22 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters.CoreBehavior(0);
  v96 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v84 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v94 = (char *)&v76 - v25;
  if (qword_1008378C8 != -1)
    swift_once(&qword_1008378C8, sub_1005773CC);
  v98 = v18;
  v99 = v22;
  v91 = v13;
  v100 = v14;
  v26 = type metadata accessor for Logger(0);
  v81 = sub_10001AAA8(v26, (uint64_t)qword_10084FC80);
  v27 = Logger.logObject.getter(v81);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDSuggestedAttributesAutoTrainer TRAIN START", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = v2[5];
  v31 = v2[6];
  v32 = *(void **)(v2[3] + 16);
  v104[0] = 0xD000000000000020;
  v104[1] = 0x80000001006C2EE0;
  memset(&v104[2], 0, 30);
  v33 = v32;
  sub_100357B60((uint64_t)v104);
  v35 = v34;

  if (!v1)
  {
    v103 = 0;
    v36 = objc_msgSend(v35, "dataRepresentationWithError:", &v103);

    v37 = v103;
    if (v36)
    {
      v78 = v7;
      v77 = v3;
      ObjectType = swift_getObjectType(v30);
      v80 = v9;
      v39 = ObjectType;
      v40 = v37;
      v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v43 = v42;

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 16))(v41, v43, v39, v31);
      v79 = objc_msgSend(objc_allocWithZone((Class)REMSuggestedAttributesPerformer), "initWithQueue:store:", v2[2], v2[4]);
      v44 = v94;
      REMSuggestedAttributesTrainer.Parameters.CoreBehavior.init(isEnabled:support:adjustment:confidence:validationRelativeSupport:validationConfidence:feedbackResetVersion:feedbackExpirationWindow:)(2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
      v45 = v95;
      REMSuggestedAttributesTrainer.Parameters.Embedding.init(isEnabled:neighborsToConsider:)(2, 0, 1);
      v46 = v97;
      REMSuggestedAttributesTrainer.Parameters.IntentionalWord.init(isEnabled:k:)(2, 0, 1);
      v47 = v91;
      REMSuggestedAttributesTrainer.Parameters.AnchoredBubble.init(enabledOniOS:enabledOnmacOS:defaultWordDistanceScale:overrideLocalWordDistanceScale:)(2, 2, 0, 1, 2);
      v48 = v84;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v84, v44, v99);
      v49 = v85;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v85, v45, v101);
      v50 = v90;
      v51 = v87;
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v47, v80);
      v52 = v86;
      (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v86, v46, v93);
      v75 = v51;
      v74 = v49;
      v53 = v79;
      LOBYTE(v73) = 1;
      BYTE2(v72) = 1;
      LOWORD(v72) = 513;
      v54 = v92;
      REMSuggestedAttributesTrainer.Parameters.init(enabledOnmacOS:enabledOniOS:maxSampleCount:minimumSampleCount:validationSetProportion:shouldSaveModel:allowLocalOverrides:allowCloudOverrides:randomSeed:coreBehavior:embedding:anchoredBubble:intentionalWord:)(2, 2, 0, 1, 0, 1, 0, 1, v72, 0, v73, v48, v74, v75, v52);
      type metadata accessor for REMSuggestedAttributesTrainer(0);
      v55 = v89;
      static REMSuggestedAttributesTrainer.train(in:parameters:)(v53, v54);
      v58 = v83;
      v59 = v82;
      v60 = v77;
      v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 16))(v82, v55, v77);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = (void *)swift_slowAlloc(32, -1);
        v103 = v65;
        *(_DWORD *)v64 = 136446210;
        v87 = (char *)(v64 + 4);
        v66 = REMSuggestedAttributesTrainer.Result.shortDescription.getter();
        v68 = v67;
        v102 = sub_10001A820(v66, v67, (uint64_t *)&v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
        v69 = swift_bridgeObjectRelease(v68);
        v70 = *(void (**)(char *, uint64_t, __n128))(v83 + 8);
        v70(v59, v60, v69);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "RDSuggestedAttributesAutoTrainer TRAIN END {results: %{public}s}", v64, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        ((void (*)(char *, uint64_t))v70)(v89, v60);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v92, v78);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v80);
      }
      else
      {

        v71 = *(void (**)(char *, uint64_t))(v58 + 8);
        v71(v59, v60);
        v71(v55, v60);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v92, v78);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v91, v80);
      }
      (*(void (**)(char *, uint64_t))(v100 + 8))(v97, v93);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v95, v101);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v99);
    }
    else
    {
      v56 = v103;
      _convertNSErrorToError(_:)(v37);

      swift_willThrow(v57);
    }
  }
}

uint64_t sub_1005792A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1005792FC(1);
    return swift_release(v4);
  }
  return result;
}

void sub_1005792FC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  double v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *oslog;
  double v26;
  _QWORD v27[5];
  BOOL v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  Swift::Int v34;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity);
  if (v2)
  {
    v27[0] = *(_QWORD *)(v2 + 120);
    v4 = type metadata accessor for UnfairLock(0);
    swift_retain();
    swift_retain();
    Lock.sync<A>(_:)(sub_1000A5F08, v2, v4, &type metadata for Bool, &protocol witness table for UnfairLock);
    swift_release(v27[0]);
    if ((LOBYTE(v26) & 1) != 0)
    {
LABEL_26:
      swift_release(v2);
      return;
    }
    if ((a1 & 1) != 0 || (sub_1005796E0() & 1) != 0)
    {
      v5 = sub_1005799DC();
      v6 = v5 + 60.0;
      v7 = v5 + 60.0 > 0.0;
      if (v5 + 60.0 > 0.0)
        v8 = 1;
      else
        v8 = 512;
      if (v5 + 60.0 <= 0.0)
        v9 = 0.0;
      else
        v9 = v5 + 60.0;
      v10 = sub_1002EAFA4((uint64_t)&off_1007E1450);
      v27[0] = 0;
      v27[1] = v8;
      v27[3] = 0;
      v27[4] = 0;
      *(double *)&v27[2] = v9;
      v28 = v7;
      v29 = 33685504;
      v30 = 0x404E000000000000;
      v31 = 0;
      v32 = 0x102020200010101;
      v33 = 1792;
      v34 = v10;
      sub_1004F53D0((uint64_t)v27);
      swift_bridgeObjectRelease(v10);
      if (qword_1008378C8 != -1)
        swift_once(&qword_1008378C8, sub_1005773CC);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_10001AAA8(v11, (uint64_t)qword_10084FC80);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter(v13);
      if (!os_log_type_enabled(v13, v14))
        goto LABEL_25;
      v15 = swift_slowAlloc(18, -1);
      *(_DWORD *)v15 = 67109376;
      LODWORD(v26) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4);
      *(_WORD *)(v15 + 8) = 2048;
      v26 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDSuggestedAttributesAutoTrainer scheduled {isDatabaseDirty: true, assumeDatabaseDirty: %{BOOL}d, delay: %f}", (uint8_t *)v15, 0x12u);
      v16 = v15;
    }
    else
    {
      if (qword_1008378C8 != -1)
        swift_once(&qword_1008378C8, sub_1005773CC);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10001AAA8(v21, (uint64_t)qword_10084FC80);
      v13 = Logger.logObject.getter(v22);
      v23 = static os_log_type_t.default.getter(v13);
      if (!os_log_type_enabled(v13, v23))
        goto LABEL_25;
      v24 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 67109120;
      LODWORD(v27[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, (char *)v27 + 4);
      _os_log_impl((void *)&_mh_execute_header, v13, v23, "RDSuggestedAttributesAutoTrainer schedule skipped {isDatabaseDirty: false, assumeDatabaseDirty: %{BOOL}d}", v24, 8u);
      v16 = (uint64_t)v24;
    }
    swift_slowDealloc(v16, -1, -1);
LABEL_25:

    goto LABEL_26;
  }
  if (qword_1008378C8 != -1)
    swift_once(&qword_1008378C8, sub_1005773CC);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_10084FC80);
  oslog = Logger.logObject.getter(v18);
  v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(oslog, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v19, "Scheduling XPCActivity before start()", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

}

uint64_t sub_1005796E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  _QWORD v15[2];

  v1 = v0[6];
  ObjectType = swift_getObjectType(v0[5]);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  if (v4 >> 60 == 15)
  {
    v5 = 1;
  }
  else
  {
    v6 = v3;
    v7 = v4;
    sub_1000151B0(0, &qword_1008491C0, REMFetchResultToken_ptr);
    v8 = sub_100579FD4();
    v9 = *(void **)(v0[3] + 16);
    v14[0] = 0xD000000000000020;
    v14[1] = 0x80000001006C2EE0;
    v14[3] = 0;
    v15[0] = 0;
    v14[2] = 0;
    *(_QWORD *)((char *)v15 + 6) = 0;
    v10 = v9;
    sub_100357B60((uint64_t)v14);
    v12 = v11;

    LOBYTE(v10) = static NSObject.== infix(_:_:)(v12);
    sub_1000A71B4(v6, v7);

    v5 = v10 ^ 1;
  }
  return v5 & 1;
}

double sub_1005799DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v22 - v9;
  v11 = v0[10];
  v12 = v0[11];
  sub_10000A388(v0 + 7, v11);
  v13 = (*(double (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = v0[6];
  ObjectType = swift_getObjectType(v0[5]);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);
  Optional<A>.orDistantPast.getter(v16);
  v17 = sub_10000882C((uint64_t)v3, (uint64_t *)&unk_1008380D0);
  v18 = Date.addingTimeInterval(_:)(v17, v13);
  v19 = Date.timeIntervalSinceNow.getter(v18);
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19;
}

id sub_100579B4C@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;

  v8 = 0;
  v3 = objc_msgSend(a1, "latestFetchResultTokenWithError:", &v8);
  v4 = v8;
  if (v3)
  {
    *a2 = v3;
    return v4;
  }
  else
  {
    v6 = v8;
    _convertNSErrorToError(_:)(v4);

    return (id)swift_willThrow(v7);
  }
}

uint64_t sub_100579BFC()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "lastSuggestedAttributesAutoTrainingToken");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100579C60(uint64_t a1, unint64_t a2)
{
  void *v2;
  Class isa;

  if (a2 >> 60 == 15)
  {
    isa = 0;
    objc_msgSend(v2, "setLastSuggestedAttributesAutoTrainingToken:", 0);
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(a1, a2);
    objc_msgSend(v2, "setLastSuggestedAttributesAutoTrainingToken:", isa);
  }

}

uint64_t sub_100579CD0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(v1, "lastSuggestedAttributesAutoTrainingExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_100579D54(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v2, "setLastSuggestedAttributesAutoTrainingExecutionDate:");

}

id sub_100579DE8()
{
  id *v0;

  return objc_msgSend(*v0, "suggestedAttributesAutoTrainingThrottleInterval");
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainingActivity()
{
  return objc_opt_self(_TtC7remindd41RDSuggestedAttributesAutoTrainingActivity);
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainingActivity.RDSuggestedAttributesAutoTrainingExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd41RDSuggestedAttributesAutoTrainingActivityP33_BD194B2A3529AB1176C5517912CDB1A053RDSuggestedAttributesAutoTrainingExecutionDateStorage);
}

uint64_t sub_100579E38()
{
  return type metadata accessor for RDSuggestedAttributesAutoTrainer(0);
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainer(uint64_t a1)
{
  uint64_t result;

  result = qword_10084FE08;
  if (!qword_10084FE08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSuggestedAttributesAutoTrainer);
  return result;
}

void sub_100579E7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1006C2F28;
  v4[4] = &unk_1006C2F40;
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = &unk_1006C2F58;
    v4[7] = &unk_1006C2F70;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for RDSuggestedAttributesAutoTrainer.RDSuggestedAttributesAutoTrainingActivityExecutable()
{
  return objc_opt_self(_TtCC7remindd32RDSuggestedAttributesAutoTrainer51RDSuggestedAttributesAutoTrainingActivityExecutable);
}

uint64_t sub_100579F50()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100579F74()
{
  uint64_t v0;

  sub_1005782FC(v0);
}

uint64_t sub_100579F8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100579FB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1005792A4(a1, v1);
}

uint64_t sub_100579FC0(_QWORD *a1)
{
  return sub_1003CCDFC(a1);
}

id sub_100579FD4()
{
  uint64_t v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = 0;
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "fetchResultTokenFromDataRepresentation:error:", isa, &v8);

  v3 = v8;
  if (v2)
  {
    v4 = v8;
  }
  else
  {
    v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }
  return v2;
}

uint64_t sub_10057A09C()
{
  uint64_t v0;

  return sub_10057896C(v0);
}

id sub_10057A0B4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  char *v5;
  char *v6;
  objc_class *ObjectType;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  objc_super v24;
  objc_class *v25;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v6);
  v13 = &v6[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_identifier];
  v25 = ObjectType;
  v14 = v6;
  v15 = sub_10001A630((uint64_t *)&unk_10084FFA0);
  *(_QWORD *)v13 = String.init<A>(reflecting:)(&v25, v15);
  *((_QWORD *)v13 + 1) = v16;
  v17 = &v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity____lazy_storage___throttlingPolicy];
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_QWORD *)v17 + 4) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executable] = a1;
  v18 = &v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_states];
  *(_QWORD *)v18 = a2;
  *((_QWORD *)v18 + 1) = a3;
  sub_100018618((uint64_t)a4, (uint64_t)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_configs]);
  sub_100008868(a5, (uint64_t)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter], (uint64_t *)&unk_10083E300);
  v19 = type metadata accessor for RDSuggestedAttributesAutoTrainingActivity.RDSuggestedAttributesAutoTrainingExecutionDateStorage();
  v20 = swift_allocObject(v19, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  v21 = (uint64_t *)&v14[OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_executionDateStorage];
  v21[3] = v19;
  v21[4] = (uint64_t)&off_1007FB758;
  *v21 = v20;
  swift_unknownObjectRetain_n(a2, 2);
  swift_retain();

  v24.receiver = v14;
  v24.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v24, "init");
  sub_10000882C(a5, (uint64_t *)&unk_10083E300);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a4);
  return v22;
}

uint64_t sub_10057A234@<X0>(uint64_t a1@<X8>)
{
  return sub_10057A25C((SEL *)&selRef_recencyDate, (void (*)(uint64_t))&static Date.distantPast.getter, a1);
}

uint64_t sub_10057A248@<X0>(uint64_t a1@<X8>)
{
  return sub_10057A25C((SEL *)&selRef_firstOccurrenceCreationDate, (void (*)(uint64_t))&static Date.distantFuture.getter, a1);
}

uint64_t sub_10057A25C@<X0>(SEL *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v20;

  v6 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(v6, *a1);
  if (v15)
  {
    v16 = v15;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8);
    if ((_DWORD)v18 != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a3, v14, v8);
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
  }
  a2(v18);
  return sub_10000882C((uint64_t)v14, (uint64_t *)&unk_1008380D0);
}

uint64_t sub_10057A3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FFB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FFB0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10057A454(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t ObjCClassFromMetadata;
  NSString v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  id v39;
  id v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  double v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  Class isa;
  id v67;
  void (*v68)(char *, id);
  Class v69;
  NSString v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  NSString v98;
  unint64_t v99;
  void *v100;
  NSString v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v104 = a2;
  v3 = type metadata accessor for Date(0);
  v105 = *(_QWORD *)(v3 - 8);
  v106 = (id)v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for UUID(0);
  v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  v12 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v103 - v17;
  v19 = objc_msgSend(a1, "account");
  if (v19)
  {
    v107 = a1;
    v108 = v19;
    v20 = objc_msgSend(v19, "identifier");
    if (v20)
    {
      v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v10 + 56))(v16, v22, 1, v9);
    sub_1000F2CE4((uint64_t)v16, (uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v10 + 48))(v18, 1, v9))
    {
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      v28 = (void *)objc_opt_self(REMError);
      v29 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v29);
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v31);

LABEL_8:
      swift_willThrow(v32);
      v33 = v108;
LABEL_9:

      return v9;
    }
    (*(void (**)(char *, char *, _QWORD *))(v10 + 16))(v12, v18, v9);
    v35 = sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    (*(void (**)(char *, _QWORD *))(v10 + 8))(v12, v9);
    v39 = objc_msgSend(v107, "objectID");
    v40 = objc_msgSend(v39, "persistentStore");

    if (!v40)
    {
      if (qword_1008378D8 != -1)
        swift_once(&qword_1008378D8, sub_10057A3C4);
      v71 = type metadata accessor for Logger(0);
      sub_10001AAA8(v71, (uint64_t)qword_10084FFB0);
      v72 = v107;
      swift_bridgeObjectRetain(v38);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v74, v75))
      {
        v103 = v36;
        v9 = v38;
        v76 = swift_slowAlloc(22, -1);
        v77 = swift_slowAlloc(64, -1);
        v109 = v77;
        *(_DWORD *)v76 = 136446466;
        v78 = objc_msgSend(v72, "remObjectID");
        if (v78)
        {
          v79 = v78;
          v80 = objc_msgSend(v78, "description");

          v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
          v83 = v82;

        }
        else
        {
          v81 = 7104878;
          v83 = 0xE300000000000000;
        }
        v111 = sub_10001A820(v81, v83, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);

        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v76 + 12) = 2082;
        swift_bridgeObjectRetain(v9);
        v111 = sub_10001A820(v103, (unint64_t)v9, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
        swift_bridgeObjectRelease_n(v9, 3);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "REMCDHashtagLabel.createHashtagLabel: Cannot obtain the associated persistent store of the given hashtag {hashtagID: %{public}s, hashtagAccountID: %{public}s}", (uint8_t *)v76, 0x16u);
        swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v76, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v38, 2);
      }
      v97 = (void *)objc_opt_self(REMError);
      v98 = String._bridgeToObjectiveC()();
      objc_msgSend(v97, "internalErrorWithDebugDescription:", v98);

      goto LABEL_8;
    }
    v41 = sub_1002A8478();
    v103 = v36;
    if (v42)
    {
      v43 = (uint64_t)v41;
      v9 = v42;
      if ((v41 != (id)v36 || v42 != v38)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v36, v38, 0) & 1) == 0)
      {
        v106 = v40;
        if (qword_1008378D8 != -1)
          swift_once(&qword_1008378D8, sub_10057A3C4);
        v84 = type metadata accessor for Logger(0);
        sub_10001AAA8(v84, (uint64_t)qword_10084FFB0);
        v85 = v107;
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v9);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v87, v88))
        {
          v105 = v43;
          v107 = v38;
          v89 = swift_slowAlloc(32, -1);
          v90 = swift_slowAlloc(96, -1);
          v109 = v90;
          *(_DWORD *)v89 = 136446722;
          v91 = objc_msgSend(v85, "remObjectID");
          if (v91)
          {
            v92 = v91;
            v93 = objc_msgSend(v91, "description", v103);

            v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
            v96 = v95;

          }
          else
          {
            v94 = 7104878;
            v96 = 0xE300000000000000;
          }
          v111 = sub_10001A820(v94, v96, &v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);

          swift_bridgeObjectRelease(v96);
          *(_WORD *)(v89 + 12) = 2082;
          v99 = (unint64_t)v107;
          swift_bridgeObjectRetain(v107);
          v111 = sub_10001A820(v103, v99, &v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
          swift_bridgeObjectRelease_n(v99, 3);
          *(_WORD *)(v89 + 22) = 2082;
          swift_bridgeObjectRetain(v9);
          v111 = sub_10001A820(v105, (unint64_t)v9, &v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
          swift_bridgeObjectRelease_n(v9, 3);
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "REMCDHashtagLabel.createHashtagLabel: Hashtag does not have matching account identifier with its persistent store {hashtagID: %{public}s, hashtagAccountID: %{public}s, pStoreAccountID: %{public}s}", (uint8_t *)v89, 0x20u);
          swift_arrayDestroy(v90, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v89, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v9, 2);
          swift_bridgeObjectRelease_n(v38, 2);

        }
        v100 = (void *)objc_opt_self(REMError);
        v101 = String._bridgeToObjectiveC()();
        objc_msgSend(v100, "internalErrorWithDebugDescription:", v101);

        swift_willThrow(v102);
        v33 = v106;
        goto LABEL_9;
      }
      swift_bridgeObjectRelease(v9);
    }
    v44 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
    v45 = (void *)swift_getObjCClassFromMetadata(v44);
    v46 = v40;
    v47 = objc_msgSend(v45, "entity", v103);
    v48 = objc_allocWithZone((Class)v45);
    v49 = v104;
    v50 = objc_msgSend(v48, "initWithEntity:insertIntoManagedObjectContext:", v47, v104);
    v51 = v46;
    v9 = v50;
    objc_msgSend(v49, "assignObject:toPersistentStore:", v9, v51);

    v104 = v51;
    v52 = v107;
    v53 = objc_msgSend(v107, "name");
    objc_msgSend(v9, "setName:", v53);

    v54 = objc_msgSend(v52, "name");
    v56 = v54;
    if (v54)
    {
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v59 = v58;

      v109 = v57;
      v110 = v59;
      static Locale.current.getter(v60);
      v61 = type metadata accessor for Locale(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v8, 0, 1, v61);
      v62 = sub_1000E525C();
      StringProtocol.foldedStringForWriting(locale:)(v8, &type metadata for String, v62);
      v64 = v63;
      sub_10000882C((uint64_t)v8, (uint64_t *)&unk_10083FBE0);
      swift_bridgeObjectRelease(v110);
      v56 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v55 = swift_bridgeObjectRelease(v64).n128_u64[0];
    }
    objc_msgSend(v9, "setCanonicalName:", v56, v55);

    v65 = v107;
    sub_1005C1D8C((uint64_t)v5);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v67 = v106;
    v68 = *(void (**)(char *, id))(v105 + 8);
    v68(v5, v106);
    objc_msgSend(v9, "setFirstOccurrenceCreationDate:", isa);

    sub_1005C1B88((uint64_t)v5);
    v69 = Date._bridgeToObjectiveC()().super.isa;
    v68(v5, v67);
    objc_msgSend(v9, "setRecencyDate:", v69);

    v70 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setAccountIdentifier:", v70, swift_bridgeObjectRelease(v38).n128_f64[0]);

    objc_msgSend(v9, "addHashtagsObject:", v65);
  }
  else
  {
    v23 = (void *)objc_opt_self(REMError);
    v24 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v25 = swift_getObjCClassFromMetadata(v24);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "unexpectedNilPropertyWithClass:property:", v25, v26);

    swift_willThrow(v27);
  }
  return v9;
}

void sub_10057AFEC(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString v7;
  NSString v8;
  NSString v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  unint64_t v33;
  id v34;
  _QWORD v35[8];
  uint64_t v36;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setName:", v7);

  objc_msgSend(v1, "setColor:", a1[2]);
  if (a1[4])
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  objc_msgSend(v1, "setBadgeEmblem:", v8);

  if (a1[6])
    v9 = String._bridgeToObjectiveC()();
  else
    v9 = 0;
  objc_msgSend(v1, "setSortingStyle:", v9);

  v10 = type metadata accessor for RDPublicTemplate(0);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setPublicLinkURLUUID:", isa);

  sub_1000CDA2C((uint64_t)a1 + *(int *)(v10 + 36), (uint64_t)v6);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) != 1)
  {
    v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  objc_msgSend(v2, "setPublicLinkExpirationDate:", v14);

  v15 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONEncoder.init()();
  v17 = (_QWORD *)((char *)a1 + *(int *)(v10 + 40));
  v18 = *v17;
  v19 = v17[1];
  v34 = v2;
  v35[0] = v18;
  v20 = v17[2];
  v21 = v17[3];
  v22 = v17[4];
  v23 = v17[5];
  v24 = v17[6];
  v25 = v17[7];
  v35[1] = v19;
  v35[2] = v20;
  v35[3] = v21;
  v35[4] = v22;
  v35[5] = v23;
  v35[6] = v24;
  v35[7] = v25;
  v26 = sub_1000D6DD8();
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  v27 = v26;
  v28 = v36;
  v36 = dispatch thunk of JSONEncoder.encode<A>(_:)(v35, &type metadata for RDSavedReminders, v27);
  v33 = v29;
  swift_release(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v28)
  {
    v30 = v36;
    v31 = v33;
    v32 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v30, v31);
    objc_msgSend(v34, "setEncodedSavedReminders:", v32);

  }
}

id sub_10057B2FC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  Class isa;
  NSString v18;
  id v19;
  uint64_t v21;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v21 - v11;
  v13 = objc_msgSend(v1, "publicLinkURLUUID", v10);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v15(v12, v4, v5);
  v16 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v16, "initWithUUID:entityName:", isa, v18);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v19;
}

double sub_10057B4DC@<D0>(uint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  void *v47;
  uint64_t ObjCClassFromMetadata;
  NSString v49;
  uint64_t v50;
  double result;
  void *v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  uint64_t v60;
  __n128 v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSString v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t *v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ObjectType;

  v100 = a1;
  v2 = v1;
  ObjectType = swift_getObjectType();
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v102 = (char *)&v87 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v19 = __chkstk_darwin(v18).n128_u64[0];
  v104 = (char *)&v87 - v20;
  v21 = objc_msgSend(v2, "publicLinkURLUUID", v19);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_10;
  }
  v22 = v21;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v23 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v23(v13, v17, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_10:
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    v47 = (void *)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v49);

    swift_willThrow(v50);
    return result;
  }
  v24 = v14;
  v99 = v23;
  v23(v104, v13, v14);
  v25 = objc_msgSend(v2, "publicLinkExpirationDate");
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, 1, 1, v103);
    goto LABEL_12;
  }
  v26 = v25;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

  v27 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v28 = v103;
  v27(v5, v8, v103);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56);
  v29(v5, 0, 1, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v28) == 1)
  {
LABEL_12:
    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_1008380D0);
    v52 = (void *)objc_opt_self(REMError);
    v53 = swift_getObjCClassFromMetadata(ObjectType);
    v54 = String._bridgeToObjectiveC()();
    objc_msgSend(v52, "unexpectedNilPropertyWithClass:property:", v53, v54);

    swift_willThrow(v55);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v104, v24);
    return result;
  }
  v97 = v29;
  v98 = v24;
  v30 = v102;
  v27(v102, v5, v28);
  v31 = objc_msgSend(v2, "name");
  if (!v31)
  {
    v56 = (void *)objc_opt_self(REMError);
    v57 = v28;
    v58 = swift_getObjCClassFromMetadata(ObjectType);
    v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v56, "unexpectedNilPropertyWithClass:property:", v58, v59);

    swift_willThrow(v60);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v30, v57, v61);
    goto LABEL_15;
  }
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  v36 = objc_msgSend(v2, "encodedSavedReminders");
  if (!v36)
  {
    swift_bridgeObjectRelease();
    v62 = (void *)objc_opt_self(REMError);
    v63 = v28;
    v64 = swift_getObjCClassFromMetadata(ObjectType);
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v62, "unexpectedNilPropertyWithClass:property:", v64, v65);

    swift_willThrow(v66);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v102, v63, v67);
    goto LABEL_15;
  }
  v37 = v36;
  ObjectType = v33;
  v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v40 = v39;

  v41 = type metadata accessor for JSONDecoder(0);
  v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v43 = JSONDecoder.init()(v42);
  v44 = sub_1000D638C();
  v45 = v101;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDSavedReminders, v38, v40, &type metadata for RDSavedReminders, v44);
  if (v45)
  {
    swift_release(v43);
    sub_1000A71C8(v38, v40);
    v46 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v102, v103, v46);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v104, v98);
    return result;
  }
  v68 = v40;
  swift_release(v43);
  v101 = v105;
  v95 = v106;
  v94 = v107;
  v93 = v108;
  v92 = v109;
  v91 = v110;
  v90 = v111;
  v89 = objc_msgSend(v2, "color");
  v69 = objc_msgSend(v2, "badgeEmblem");
  if (v69)
  {
    v70 = v69;
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v87 = v71;

  }
  else
  {
    v88 = 0;
    v87 = 0;
  }
  v72 = objc_msgSend(v2, "sortingStyle", v87, v88);
  v96 = v35;
  if (v72)
  {
    v73 = v72;
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v76 = v75;
    sub_1000A71C8(v38, v68);

  }
  else
  {
    sub_1000A71C8(v38, v68);
    v74 = 0;
    v76 = 0;
  }
  v77 = (int *)type metadata accessor for RDPublicTemplate(0);
  v78 = v100;
  v99((char *)v100 + v77[8], v104, v98);
  v79 = (char *)v78 + v77[9];
  v80 = v103;
  v27(v79, v102, v103);
  v97(v79, 0, 1, v80);
  v81 = v96;
  *v78 = ObjectType;
  v78[1] = v81;
  v82 = v88;
  v78[2] = (uint64_t)v89;
  v78[3] = v82;
  v78[4] = v87;
  v78[5] = v74;
  v78[6] = v76;
  v83 = (char *)v78 + v77[10];
  result = *(double *)&v101;
  *(_OWORD *)v83 = v101;
  v84 = v94;
  *((_QWORD *)v83 + 2) = v95;
  *((_QWORD *)v83 + 3) = v84;
  v85 = v92;
  *((_QWORD *)v83 + 4) = v93;
  *((_QWORD *)v83 + 5) = v85;
  v86 = v90;
  *((_QWORD *)v83 + 6) = v91;
  *((_QWORD *)v83 + 7) = v86;
  return result;
}

uint64_t type metadata accessor for REMCDPublicTemplate()
{
  return objc_opt_self(REMCDPublicTemplate);
}

uint64_t sub_10057BF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084FFF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084FFF0);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_AccountIdentifierHashtagLabels.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD000000000000038;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006C3060;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000F4294((uint64_t)v13);
LABEL_9:
    sub_10057C1AC(_.super.isa, metadata.super.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD000000000000038;
    v13[1] = 0x80000001006C3060;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

void sub_10057C1AC(void *a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  unint64_t v38;
  void *v39;
  uint64_t aBlock[3];
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  _QWORD v44[2];
  _OWORD v45[2];

  v3 = v2;
  ObjectType = swift_getObjectType();
  if (qword_1008378E0 != -1)
    swift_once(&qword_1008378E0, sub_10057BF20);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10084FFF0);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v39 = a2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = ObjectType;
    v13 = swift_slowAlloc(32, -1);
    aBlock[0] = v13;
    *(_DWORD *)v11 = 136446210;
    v14 = sub_1002AEF14();
    *(_QWORD *)&v45[0] = sub_10001A820((uint64_t)v14, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccountIdentifierHashtagLabelsMigrator BEGIN {store: %{public}s}", v11, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v16 = v13;
    ObjectType = v12;
    swift_slowDealloc(v16, -1, -1);
    v17 = v11;
    a2 = v39;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)&v45[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerAccountIdentifier"));
  *((_QWORD *)&v45[0] + 1) = v18;
  swift_bridgeObjectRetain(v18);
  v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v45, &type metadata for String);
  v20 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v19);
  swift_unknownObjectRelease(v19);
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(v45, v20);
    swift_unknownObjectRelease(v20);
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_10001A5E8((uint64_t)v45, (uint64_t)aBlock);
  if (!v41)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1000F4294((uint64_t)aBlock);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(v44, aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v21 = v44[0];
    v22 = v44[1];
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
    v24 = objc_msgSend(v8, "persistentStoreCoordinator");
    objc_msgSend(v23, "setPersistentStoreCoordinator:", v24);

    objc_msgSend(v23, "setTransactionAuthor:", RDStoreControllerAccountIdentifierHashtagLabelsMigrationAuthor);
    v25 = (_QWORD *)swift_allocObject(&unk_1007FB870, 64, 7);
    v25[2] = v3;
    v25[3] = v23;
    v25[4] = v8;
    v25[5] = v21;
    v25[6] = v22;
    v25[7] = ObjectType;
    v26 = swift_allocObject(&unk_1007FB898, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_10057CD80;
    *(_QWORD *)(v26 + 24) = v25;
    v42 = sub_1000098E4;
    v43 = v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000098C4;
    v41 = &unk_1007FB8B0;
    v27 = _Block_copy(aBlock);
    v28 = v43;
    v29 = v8;
    v30 = v3;
    v31 = v23;
    swift_retain();
    swift_release(v28);
    objc_msgSend(v31, "performBlockAndWait:", v27);

    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(v26, "", 128, 41, 28, 1);
    swift_release(v25);
    swift_release(v26);
    if ((v27 & 1) == 0)
      return;
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  v32 = v8;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    aBlock[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v37 = sub_1002AEF14();
    *(_QWORD *)&v45[0] = sub_10001A820((uint64_t)v37, v38, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "AccountIdentifierHashtagLabelsMigrator {store: %{public}s} accountIdentifier is nil, skip migration", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

  }
}

void sub_10057C6E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  NSString v20;
  unsigned int v21;
  id v22;
  id v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD v43[3];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  id v47;

  v3 = (uint64_t)a3;
  v4 = (void *)a2;
  v5 = sub_10057CDA0(a2, a3, 50);
  v6 = &qword_100837000;
  v15 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v27 = v5;
    else
      v27 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v16 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_7:
      v41 = v3;
      v42 = v4;
      v17 = v15 & 0xC000000000000001;
      v3 = 4;
      v18 = v16;
      while (1)
      {
        v19 = v17
            ? (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v15)
            : (uint64_t *)*(id *)(v15 + 8 * v3);
        v6 = v19;
        v16 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
          break;
        v20 = String._bridgeToObjectiveC()();
        objc_msgSend(v6, "setAccountIdentifier:", v20);

        if (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v16, 1) <= 0x51EB851EB851EB8uLL
          && (objc_msgSend(v42, "hasChanges") & 1) != 0)
        {
          v47 = 0;
          v21 = objc_msgSend(v42, "save:", &v47);
          v22 = v47;
          if (!v21)
          {
            v25 = v47;
            swift_bridgeObjectRelease();
            v17 = _convertNSErrorToError(_:)(v22);

            swift_willThrow(v26);
            v3 = v41;
            v6 = &qword_100837000;
            goto LABEL_2;
          }
          v23 = v47;
        }

        ++v3;
        if (v16 == v18)
        {
          v16 = v18;
          *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
          v3 = v41;
          v4 = v42;
          v6 = &qword_100837000;
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_21:
      swift_once(&qword_1008378E0, sub_10057BF20);
LABEL_3:
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10084FFF0);
      swift_errorRetain(v17);
      v8 = swift_errorRetain(v17);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.error.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(12, -1);
        v12 = (void *)swift_slowAlloc(32, -1);
        v47 = v12;
        *(_DWORD *)v11 = 136315138;
        swift_getErrorValue(v17, v44, v43);
        v13 = Error.rem_errorDescription.getter(v43[1], v43[2]);
        v45 = sub_10001A820(v13, v14, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
        swift_bridgeObjectRelease();
        swift_errorRelease(v17);
        swift_errorRelease(v17);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccountIdentifierHashtagLabelsMigrator with error: %s", v11, 0xCu);
        swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v12, -1, -1);
        swift_slowDealloc(v11, -1, -1);

        swift_errorRelease(v17);
      }
      else
      {
        swift_errorRelease(v17);
        swift_errorRelease(v17);
        swift_errorRelease(v17);

      }
      goto LABEL_30;
    }
  }
  else
  {
    v16 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_7;
  }
  *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_27:
  if ((objc_msgSend(v4, "hasChanges", v24, v41) & 1) != 0)
  {
    v47 = 0;
    v28 = objc_msgSend(v4, "save:", &v47);
    v29 = v47;
    if (v28)
    {
      v30 = v47;
      goto LABEL_30;
    }
    v39 = v47;
    v17 = _convertNSErrorToError(_:)(v29);

    swift_willThrow(v40);
LABEL_2:
    if (v6[284] == -1)
      goto LABEL_3;
    goto LABEL_21;
  }
LABEL_30:
  if (v6[284] != -1)
    swift_once(&qword_1008378E0, sub_10057BF20);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_10084FFF0);
  v32 = (id)v3;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = (void *)swift_slowAlloc(32, -1);
    v47 = v36;
    *(_DWORD *)v35 = 136446466;
    v37 = sub_1002AEF14();
    v45 = sub_10001A820((uint64_t)v37, v38, (uint64_t *)&v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2048;
    v45 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "AccountIdentifierHashtagLabelsMigrator END {store: %{public}s, migrated hashtag labels count = %ld}", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

  }
}

id RDStoreControllerMigrator_AccountIdentifierHashtagLabels.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels()
{
  return objc_opt_self(_TtC7remindd56RDStoreControllerMigrator_AccountIdentifierHashtagLabels);
}

id RDStoreControllerMigrator_AccountIdentifierHashtagLabels.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AccountIdentifierHashtagLabels();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10057CD44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10057CD80()
{
  uint64_t v0;

  sub_10057C6E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10057CD90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10057CDA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  uint64_t v12;

  v5 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", 0);
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v9 + 32) = a2;
  specialized Array._endMutation()(v9);
  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v10 = a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v6, "setFetchBatchSize:", a3);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v6, v5);

  return v12;
}

uint64_t sub_10057CF40@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  char isUniquelyReferenced_nonNull_native;
  __n128 v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  unint64_t *v26;
  _OWORD v27[2];
  __int128 v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;

  v26 = a1;
  v2 = v1;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v25 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v9, &v30);
  *(_OWORD *)(inited + 16) = xmmword_1006A5140;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  *(_QWORD *)(inited + 48) = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001006FFA30;
  v12 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta);
  *(_QWORD *)(inited + 96) = objc_msgSend(v12, "unit");
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x80000001006FFA50;
  v13 = objc_msgSend(v12, "count");
  *(_QWORD *)(inited + 144) = v13;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  strcpy((char *)(inited + 176), "creationDate");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  *(double *)(inited + 192) = Date.timeIntervalSinceReferenceDate.getter(v13);
  *(_QWORD *)(inited + 216) = &type metadata for Double;
  *(_QWORD *)(inited + 224) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 232) = 0x80000001006F47E0;
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion);
  *(_QWORD *)(inited + 264) = &type metadata for Int;
  *(_QWORD *)(inited + 240) = v14;
  v15 = sub_10016E7E4(inited);
  sub_1000CDA2C(v2 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000EA320((uint64_t)v5);
  }
  else
  {
    v16 = v25;
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v25, v5, v6);
    v18 = Date.timeIntervalSinceReferenceDate.getter(v17);
    v29 = &type metadata for Double;
    *(double *)&v28 = v18;
    sub_10001A6CC(&v28, v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    v31 = v15;
    sub_10028CB74(v27, 0xD000000000000010, 0x80000001006F47C0, isUniquelyReferenced_nonNull_native);
    v15 = v31;
    v20 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v16, v6, v20);
  }
  v21 = v26;
  *v26 = v15;
  v22 = enum case for REMJSONType.jsonObject(_:);
  v23 = type metadata accessor for REMJSONType(0);
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v21, v22, v23);
}

uint64_t sub_10057D250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate;
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1000EA320(v0 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10057D2E8@<X0>(unint64_t *a1@<X8>)
{
  return sub_10057CF40(a1);
}

uint64_t sub_10057D308@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10057D828(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t REMDueDateDeltaInterval.toJSON()@<X0>(unint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v4, &v10);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  *(_QWORD *)(inited + 32) = 1953066613;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = objc_msgSend(v2, "unit");
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 80) = 0x746E756F63;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v6 = objc_msgSend(v2, "count");
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 96) = v6;
  *a1 = sub_10016E7E4(inited);
  v7 = enum case for REMJSONType.jsonObject(_:);
  v8 = type metadata accessor for REMJSONType(0);
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(a1, v7, v8);
}

void static REMDueDateDeltaInterval.fromJSON(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  unint64_t v28;

  v3 = sub_10001A630(&qword_100839B00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)v27 - v8;
  v10 = type metadata accessor for REMJSONType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (_QWORD *)((char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v14, v10);
    v16 = *v14;
    v17 = enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v18(v9, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v3);
    v19 = v27[1];
    Dictionary<>.deserializeRequired<A>(key:valueType:)(1953066613, 0xE400000000000000, v9, v16, &type metadata for Int);
    v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v9, v3);
    if (v19)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v25 = v28;
    v18(v6, v17, v3);
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0x746E756F63, 0xE500000000000000, v6, v16, &type metadata for Int);
    v20(v6, v3);
    swift_bridgeObjectRelease();
    v26 = v28;
    if (sub_10057D6D8(v25))
    {
      objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "initWithUnit:count:", v25, v26);
      return;
    }
  }
  else
  {
    if (v15 != enum case for REMJSONType.jsonArray(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v14, v10);
    swift_bridgeObjectRelease();
  }
  v21 = type metadata accessor for REMJSONDeserializationError(0);
  v22 = sub_1002A222C();
  swift_allocError(v21, v22, 0, 0);
  v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for REMJSONDeserializationError.invalidData(_:), v21);
  swift_willThrow(v24);
}

BOOL sub_10057D6D8(unint64_t a1)
{
  return a1 < 5;
}

uint64_t sub_10057D6E4@<X0>(unint64_t *a1@<X8>)
{
  return REMDueDateDeltaInterval.toJSON()(a1);
}

void sub_10057D704(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static REMDueDateDeltaInterval.fromJSON(_:)(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_10057D72C()
{
  return type metadata accessor for RDDueDateDeltaAlert(0);
}

uint64_t type metadata accessor for RDDueDateDeltaAlert(uint64_t a1)
{
  uint64_t result;

  result = qword_100850058;
  if (!qword_100850058)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDDueDateDeltaAlert);
  return result;
}

void sub_10057D770(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000D7B50(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_updateClassMetadata2(a1, 256, 5, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_10057D828(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t result;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  id v60;
  id v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(_QWORD, _QWORD);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(void);
  char *v95;
  uint64_t v96;

  v95 = a1;
  v84 = sub_10001A630(&qword_100850100);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v81 = (char *)&v73 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v79);
  v76 = (uint64_t)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v80 = (char *)&v73 - v4;
  __chkstk_darwin(v5);
  v83 = (uint64_t *)((char *)&v73 - v6);
  v7 = sub_10001A630(&qword_100839B00);
  v86 = *(_QWORD *)(v7 - 8);
  v87 = v7;
  __chkstk_darwin(v7);
  v77 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v78 = (char *)&v73 - v10;
  __chkstk_darwin(v11);
  v85 = (char *)&v73 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_100842E10);
  v89 = *(_QWORD *)(v13 - 8);
  v90 = (void (*)(_QWORD, _QWORD))v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Date(0);
  v88 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v75 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v93 = (char *)&v73 - v18;
  v19 = sub_10001A630(&qword_100839B10);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v91 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v74 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v73 - v26;
  v28 = type metadata accessor for REMJSONType(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (uint64_t *)((char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, char *, uint64_t, __n128))(v29 + 16))(v32, v95, v28, v30);
  v33 = (*(uint64_t (**)(uint64_t *, uint64_t))(v29 + 88))(v32, v28);
  if (v33 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v32, v28);
    v34 = *v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v19);
    v35 = v94;
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0x696669746E656469, 0xEA00000000007265, v22, v34, v23);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    if (v35)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:);
      v41 = v89;
      v40 = v90;
      (*(void (**)(char *, _QWORD, void (*)(_QWORD, _QWORD)))(v89 + 104))(v15, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v90);
      v42 = v92;
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0x6E6F697461657263, 0xEC00000065746144, v15, v34, v92);
      v95 = v27;
      v73 = v23;
      (*(void (**)(char *, _QWORD))(v41 + 8))(v15, v40);
      v43 = enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:);
      v45 = v85;
      v44 = v86;
      v46 = *(void (**)(void))(v86 + 104);
      v47 = v87;
      ((void (*)(char *, _QWORD, uint64_t))v46)(v85, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v87);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD00000000000001ALL, 0x80000001006F47E0, v45, v34, &type metadata for Int);
      v94 = v46;
      v90 = *(void (**)(_QWORD, _QWORD))(v44 + 8);
      v90(v45, v47);
      v89 = v96;
      v49 = v81;
      v48 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 104))(v81, v39, v84);
      v50 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v80, 1, 1, v42);
      v51 = v83;
      Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)(v83, 0xD000000000000010, 0x80000001006F47C0, v49, v50, v34, v79);
      v52 = (void (*)(char *, uint64_t))v90;
      sub_1000EA320(v50);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v84);
      v53 = v78;
      v54 = v87;
      v55 = v94;
      ((void (*)(char *, uint64_t, uint64_t))v94)(v78, v43, v87);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000011, 0x80000001006FFA50, v53, v34, &type metadata for Int);
      v52(v53, v54);
      v57 = v96;
      v58 = v77;
      v55();
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000010, 0x80000001006FFA30, v58, v34, &type metadata for Int);
      v59 = v73;
      v52(v58, v54);
      swift_bridgeObjectRelease();
      v60 = objc_msgSend(objc_allocWithZone((Class)REMDueDateDeltaInterval), "initWithUnitInteger:count:", v96, v57);
      if (v60)
      {
        v61 = v60;
        v62 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
        v63 = v74;
        v62(v74, v95, v59);
        v64 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
        v65 = v75;
        v66 = (uint64_t)v51;
        v67 = v92;
        v64(v75, v93, v92);
        v68 = v76;
        sub_1000CDA74(v66, v76);
        v69 = type metadata accessor for RDDueDateDeltaAlert(0);
        v15 = (char *)swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
        v62(&v15[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier], v63, v73);
        *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta] = v61;
        v64(&v15[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate], v65, v67);
        sub_1000CDA74(v68, (uint64_t)&v15[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate]);
        *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion] = v89;
      }
      else
      {
        v15 = (char *)type metadata accessor for REMJSONDeserializationError(0);
        v70 = sub_1002A222C();
        swift_allocError(v15, v70, 0, 0);
        v72 = (*(uint64_t (**)(uint64_t, _QWORD, char *))(*((_QWORD *)v15 - 1) + 104))(v71, enum case for REMJSONDeserializationError.invalidData(_:), v15);
        swift_willThrow(v72);
        sub_1000EA320((uint64_t)v51);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v93, v92);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v95, v59);
      }
    }
    return (uint64_t)v15;
  }
  if (v33 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v29 + 96))(v32, v28);
    swift_bridgeObjectRelease();
    v15 = (char *)type metadata accessor for REMJSONDeserializationError(0);
    v36 = sub_1002A222C();
    swift_allocError(v15, v36, 0, 0);
    v38 = (*(uint64_t (**)(uint64_t, _QWORD, char *))(*((_QWORD *)v15 - 1) + 104))(v37, enum case for REMJSONDeserializationError.invalidData(_:), v15);
    swift_willThrow(v38);
    return (uint64_t)v15;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v28, v28);
  __break(1u);
  return result;
}

uint64_t sub_10057E148(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850628, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters, &qword_100850630, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1000CB13C, &qword_100850640, &qword_100850638);
  if (v7)
    return v9;
  return result;
}

NSObject *sub_10057E1C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t *, _QWORD);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  _QWORD v89[3];
  uint64_t ObjectType;
  _BYTE v91[24];
  uint64_t v92[3];
  uint64_t v93;
  char v94[8];

  v77 = a3;
  v78 = a2;
  v80 = a1;
  v74 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v73 = *(_QWORD *)(v74 - 8);
  v11 = __chkstk_darwin(v74);
  v79 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Result(0, v11);
  v72 = *(_QWORD *)(v75 - 8);
  v13 = __chkstk_darwin(v75);
  v76 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Parameters(0, v13);
  v81 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v82 = (char *)&v71 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v87 = PropertyListDecoder.init()();
  if (a7)
    v25 = a7;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a7);
  v27 = a4;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v93 = v26;
  v92[0] = v28;
  v84 = v28;
  swift_retain();
  v29 = v87;
  v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v92, (uint64_t)v22);
  v30(&ObjectType, 0);
  v31 = sub_10009FC50(&qword_100850610, (uint64_t (*)(uint64_t))&type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMReminderDetailDataView.CheckUpdateInvocation.Parameters);
  v32 = v85;
  v33 = a6;
  v34 = v86;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v86, a5, v33, v86, v31);
  if (v32)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100850108);
    swift_errorRetain(v32);
    v36 = v83;
    swift_errorRetain(v32);
    v37 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v92[0] = v41;
      *(_DWORD *)v40 = 136315394;
      swift_getErrorValue(v32, v94, v89);
      v42 = Error.rem_errorDescription.getter(v89[1], v89[2]);
      ObjectType = sub_10001A820(v42, v43, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v91);
      swift_bridgeObjectRelease();
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      *(_WORD *)(v40 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v44 = sub_10001A630(&qword_100850618);
      v45 = String.init<A>(describing:)(&ObjectType, v44);
      ObjectType = sub_10001A820(v45, v46, v92);
      v29 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v91);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
    v49 = v84;
    swift_willThrow(v47);
    swift_release(v29);
    swift_release(v49);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v82, v16, v34);
    v48 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v88, v80, v48, 0, 0, v48);
    v51 = objc_msgSend(v83, "fetchResultTokenToDiffAgainst");
    v52 = v79;
    sub_100493C24(v51, v78, v79);

    v54 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v53);
    v55 = (void *)REMReminderDetailDataView.CheckUpdateInvocation.Parameters.reminderID.getter();
    v56 = sub_1001B2838(v55, v54);

    v57 = swift_bridgeObjectRelease();
    REMReminderDetailDataView.CheckUpdateInvocation.Result.init(hasUpdates:)(v56 & 1, v57);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v52, v74);
    v58 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
    v59 = PropertyListEncoder.init()();
    v60 = v27;
    v61 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v62 = REMStoreObjectsContainer.init(store:storages:)(v60, v61);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v93 = v26;
    v92[0] = v62;
    swift_retain();
    v63 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    v64 = (uint64_t)v22;
    v65 = v76;
    sub_100311F10((uint64_t)v92, v64);
    v63(&ObjectType, 0);
    v66 = sub_10009FC50(&qword_100850620, (uint64_t (*)(uint64_t))&type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation.Result, (uint64_t)&protocol conformance descriptor for REMReminderDetailDataView.CheckUpdateInvocation.Result);
    v67 = v75;
    v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v65, v75, v66);
    v69 = v68;
    v70 = sub_1000A70E4((uint64_t)v38, v68);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v70);
    swift_release(v84);
    swift_release(v62);
    swift_release(v29);
    swift_release(v59);
    sub_1000A71C8((uint64_t)v38, v69);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v67);

    (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v86);
  }
  return v38;
}

uint64_t sub_10057EBF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8, uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11, void (*a12)(id, uint64_t, uint64_t, id, char *), unint64_t *a13, uint64_t *a14)
{
  void *v14;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, _QWORD);
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t *v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t *, _QWORD);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  _QWORD v87[3];
  uint64_t ObjectType;
  _BYTE v89[24];
  uint64_t v90[2];
  uint64_t v91;
  char v92[8];

  v82 = a6;
  v81 = a5;
  v72 = a3;
  v71 = a2;
  v75 = a1;
  v74 = a14;
  v80 = a11;
  v69 = a8;
  v70 = sub_10001A630(a8);
  v68 = *(_QWORD *)(v70 - 8);
  v17 = __chkstk_darwin(v70);
  v73 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = ((uint64_t (*)(_QWORD, __n128))a9)(0, v17);
  v77 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v76 = (char *)&v67 - v22;
  v23 = type metadata accessor for CodingUserInfoKey(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PropertyListDecoder(0, v24);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v85 = PropertyListDecoder.init()();
  v78 = v14;
  if (a7)
    v29 = a7;
  else
    v29 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v30 = type metadata accessor for REMStoreObjectsContainer(0, v28);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  swift_bridgeObjectRetain(a7);
  v31 = a4;
  v32 = REMStoreObjectsContainer.init(store:storages:)(v31, v29);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v91 = v30;
  v90[0] = v32;
  v79 = v32;
  swift_retain();
  v33 = v85;
  v34 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v90, (uint64_t)v26);
  v34(&ObjectType, 0);
  v35 = sub_10009FC50(a10, a9, v80);
  v36 = v83;
  v37 = v84;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v84, v81, v82, v84, v35);
  if (v36)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_100850108);
    swift_errorRetain(v36);
    v39 = v78;
    swift_errorRetain(v36);
    v40 = v39;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v90[0] = v44;
      *(_DWORD *)v43 = 136315394;
      swift_getErrorValue(v36, v92, v87);
      v45 = Error.rem_errorDescription.getter(v87[1], v87[2]);
      ObjectType = sub_10001A820(v45, v46, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v89);
      swift_bridgeObjectRelease();
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      *(_WORD *)(v43 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v47 = sub_10001A630(v74);
      v48 = String.init<A>(describing:)(&ObjectType, v47);
      ObjectType = sub_10001A820(v48, v49, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v89);

      v33 = v85;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {
      swift_errorRelease(v36);
      swift_errorRelease(v36);

    }
    v63 = v79;
    swift_willThrow(v50);
    swift_release(v33);
    swift_release(v63);
  }
  else
  {
    v51 = v76;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v20, v37);
    v52 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v86, v75, v52, 0, 0, v52);
    a12(v86, v71, v72, v31, v51);
    v83 = a13;
    v54 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
    v55 = (unint64_t *)PropertyListEncoder.init()();
    v56 = v31;
    v57 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v58 = REMStoreObjectsContainer.init(store:storages:)(v56, v57);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v91 = v30;
    v90[0] = v58;
    swift_retain();
    v59 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v90, (uint64_t)v26);
    v59(&ObjectType, 0);
    v60 = sub_1000A5F84(v83, v69, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DefaultInvocationResult<A>);
    v61 = v73;
    v62 = v70;
    v83 = v55;
    v63 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v73, v70, v60);
    v65 = v64;
    v66 = sub_1000A70E4(v63, v64);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v66);
    swift_release(v79);
    swift_release(v58);
    swift_release(v33);
    swift_release(v83);
    sub_1000A71C8(v63, v65);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v61, v62);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v37);
  }
  return v63;
}

uint64_t sub_10057F5D0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v7;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD v78[3];
  uint64_t ObjectType;
  _BYTE v80[24];
  uint64_t v81[3];
  uint64_t v82;
  char v83[8];

  v67 = a3;
  v66 = a2;
  v69 = a1;
  v65 = type metadata accessor for REMSuggestedAttributesTrainer.Result(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMSuggestedAttributesTrainer.Parameters(0);
  v71 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v70 = (char *)&v64 - v17;
  v18 = type metadata accessor for CodingUserInfoKey(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PropertyListDecoder(0, v19);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v76 = PropertyListDecoder.init()();
  v68 = v13;
  v72 = v7;
  if (a7)
    v24 = a7;
  else
    v24 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v25 = type metadata accessor for REMStoreObjectsContainer(0, v23);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  swift_bridgeObjectRetain(a7);
  v26 = a4;
  v27 = REMStoreObjectsContainer.init(store:storages:)(v26, v24);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v82 = v25;
  v81[0] = v27;
  v73 = v27;
  swift_retain();
  v28 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v81, (uint64_t)v21);
  v28(&ObjectType, 0);
  v29 = sub_10009FC50(&qword_100850510, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Parameters, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesTrainer.Parameters);
  v30 = v74;
  v31 = a6;
  v32 = v75;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v75, a5, v31, v75, v29);
  if (v30)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_100850108);
    swift_errorRetain(v30);
    v34 = v72;
    swift_errorRetain(v30);
    v35 = v34;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v81[0] = v39;
      *(_DWORD *)v38 = 136315394;
      swift_getErrorValue(v30, v83, v78);
      v40 = Error.rem_errorDescription.getter(v78[1], v78[2]);
      ObjectType = sub_10001A820(v40, v41, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);
      swift_bridgeObjectRelease();
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      *(_WORD *)(v38 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v42 = sub_10001A630(&qword_100850518);
      v43 = String.init<A>(describing:)(&ObjectType, v42);
      ObjectType = sub_10001A820(v43, v44, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);

    }
    v60 = v73;
    swift_willThrow(v45);
    swift_release(v76);
    swift_release(v60);
  }
  else
  {
    v46 = v70;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v15, v32);
    v47 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v77, v69, v47, 0, 0, v47);
    v49 = v77;
    v50 = objc_autoreleasePoolPush();
    sub_100247CEC(v49, v66, v26, (void (*)(_QWORD, _QWORD))v46, (uint64_t)v68);
    objc_autoreleasePoolPop(v50);
    v51 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v52 = PropertyListEncoder.init()();
    v53 = v26;
    v54 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v55 = REMStoreObjectsContainer.init(store:storages:)(v53, v54);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v82 = v25;
    v81[0] = v55;
    swift_retain();
    v56 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v81, (uint64_t)v21);
    v56(&ObjectType, 0);
    v57 = sub_10009FC50(&qword_100850520, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesTrainer.Result, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesTrainer.Result);
    v58 = (uint64_t)v68;
    v59 = v65;
    v60 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v68, v65, v57);
    v62 = v61;
    v63 = sub_1000A70E4(v60, v61);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v63);
    swift_release(v73);
    swift_release(v55);
    swift_release(v76);
    swift_release(v52);
    sub_1000A71C8(v60, v62);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v59);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v32);
  }
  return v60;
}

uint64_t sub_10057FF80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7, uint64_t (*a8)(uint64_t), uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11, void (*a12)(id, uint64_t, uint64_t, id, char *), unint64_t *a13, uint64_t a14, uint64_t *a15)
{
  void *v15;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  _QWORD v88[3];
  uint64_t ObjectType;
  _BYTE v90[24];
  uint64_t v91[2];
  uint64_t v92;
  char v93[8];

  v83 = a6;
  v82 = a5;
  v73 = a3;
  v72 = a2;
  v76 = a1;
  v75 = a15;
  v81 = a11;
  v70 = a8;
  v71 = a8(0);
  v69 = *(_QWORD *)(v71 - 8);
  v18 = __chkstk_darwin(v71);
  v74 = (char *)&v68 - v19;
  v85 = ((uint64_t (*)(_QWORD, __n128))a9)(0, v18);
  v77 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v78 = (char *)&v68 - v23;
  v24 = type metadata accessor for CodingUserInfoKey(0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PropertyListDecoder(0, v25);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v86 = PropertyListDecoder.init()();
  v79 = v15;
  if (a7)
    v30 = a7;
  else
    v30 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v31 = type metadata accessor for REMStoreObjectsContainer(0, v29);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  swift_bridgeObjectRetain(a7);
  v32 = a4;
  v33 = REMStoreObjectsContainer.init(store:storages:)(v32, v30);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v92 = v31;
  v91[0] = v33;
  v80 = v33;
  swift_retain();
  v34 = v86;
  v35 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v91, (uint64_t)v27);
  v35(&ObjectType, 0);
  v36 = sub_10009FC50(a10, a9, v81);
  v37 = v84;
  v38 = v85;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v85, v82, v83, v85, v36);
  if (v37)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v39 = type metadata accessor for Logger(0);
    sub_10001AAA8(v39, (uint64_t)qword_100850108);
    swift_errorRetain(v37);
    v40 = v79;
    swift_errorRetain(v37);
    v41 = v40;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v91[0] = v45;
      *(_DWORD *)v44 = 136315394;
      swift_getErrorValue(v37, v93, v88);
      v46 = Error.rem_errorDescription.getter(v88[1], v88[2]);
      ObjectType = sub_10001A820(v46, v47, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v90);
      swift_bridgeObjectRelease();
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      *(_WORD *)(v44 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v48 = sub_10001A630(v75);
      v49 = String.init<A>(describing:)(&ObjectType, v48);
      ObjectType = sub_10001A820(v49, v50, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v90);

      v34 = v86;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {
      swift_errorRelease(v37);
      swift_errorRelease(v37);

    }
    v64 = v80;
    swift_willThrow(v51);
    swift_release(v34);
    swift_release(v64);
  }
  else
  {
    v52 = v78;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v78, v21, v38);
    v53 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v87, v76, v53, 0, 0, v53);
    a12(v87, v72, v73, v32, v52);
    v83 = a13;
    v84 = a14;
    v55 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v56 = PropertyListEncoder.init()();
    v57 = v32;
    v58 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v59 = REMStoreObjectsContainer.init(store:storages:)(v57, v58);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v92 = v31;
    v60 = v56;
    v91[0] = v59;
    swift_retain();
    v61 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v91, (uint64_t)v27);
    v61(&ObjectType, 0);
    v62 = sub_10009FC50(v83, v70, v84);
    v63 = v74;
    v64 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v74, v71, v62);
    v66 = v65;
    v67 = sub_1000A70E4(v64, v65);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v67);
    swift_release(v80);
    swift_release(v59);
    swift_release(v34);
    swift_release(v60);
    sub_1000A71C8(v64, v66);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v63, v71);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v38);
  }
  return v64;
}

uint64_t sub_10058093C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v7;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  _QWORD v78[3];
  uint64_t ObjectType;
  _BYTE v80[24];
  uint64_t v81[3];
  uint64_t v82;
  char v83[8];

  v67 = a3;
  v66 = a2;
  v69 = a1;
  v12 = type metadata accessor for REMSuggestedAttributesHarvester.Response(0);
  v64 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v68 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMSuggestedAttributesHarvester.Request(0, v13);
  v70 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v71 = (char *)&v64 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v76 = PropertyListDecoder.init()();
  v65 = v12;
  v72 = v7;
  if (a7)
    v25 = a7;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a7);
  v27 = a4;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v82 = v26;
  v81[0] = v28;
  v73 = v28;
  swift_retain();
  v29 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v81, (uint64_t)v22);
  v29(&ObjectType, 0);
  v30 = sub_10009FC50(&qword_100850460, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Request, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.Request);
  v31 = v74;
  v32 = a6;
  v33 = v75;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v75, a5, v32, v75, v30);
  if (v31)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100850108);
    swift_errorRetain(v31);
    v35 = v72;
    swift_errorRetain(v31);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v81[0] = v40;
      *(_DWORD *)v39 = 136315394;
      swift_getErrorValue(v31, v83, v78);
      v41 = Error.rem_errorDescription.getter(v78[1], v78[2]);
      ObjectType = sub_10001A820(v41, v42, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);
      swift_bridgeObjectRelease();
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      *(_WORD *)(v39 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v43 = sub_10001A630(&qword_100850468);
      v44 = String.init<A>(describing:)(&ObjectType, v43);
      ObjectType = sub_10001A820(v44, v45, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);

    }
    v60 = v73;
    swift_willThrow(v46);
    swift_release(v76);
    swift_release(v60);
  }
  else
  {
    v47 = v70;
    v48 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v71, v16, v33);
    v49 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v77, v69, v49, 0, 0, v49);
    sub_10036C068((uint64_t)v77, v48, v68);
    v51 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v52 = PropertyListEncoder.init()();
    v53 = v27;
    v54 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v55 = REMStoreObjectsContainer.init(store:storages:)(v53, v54);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v82 = v26;
    v81[0] = v55;
    swift_retain();
    v56 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v81, (uint64_t)v22);
    v56(&ObjectType, 0);
    v57 = sub_10009FC50(&qword_100850470, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.Response, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.Response);
    v58 = v68;
    v59 = v65;
    v74 = v52;
    v60 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v68, v65, v57);
    v62 = v61;
    v63 = sub_1000A70E4(v60, v61);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v63);
    swift_release(v73);
    swift_release(v55);
    swift_release(v76);
    swift_release(v74);
    sub_1000A71C8(v60, v62);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v59);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v71, v33);
  }
  return v60;
}

uint64_t sub_100581298(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v7;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  _QWORD v78[3];
  uint64_t ObjectType;
  _BYTE v80[24];
  uint64_t v81[3];
  uint64_t v82;
  char v83[8];

  v67 = a3;
  v66 = a2;
  v69 = a1;
  v12 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse(0);
  v64 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v68 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMSuggestedAttributesHarvester.FeedbackRequest(0, v13);
  v70 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v71 = (char *)&v64 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v76 = PropertyListDecoder.init()();
  v65 = v12;
  v72 = v7;
  if (a7)
    v25 = a7;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a7);
  v27 = a4;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v82 = v26;
  v81[0] = v28;
  v73 = v28;
  swift_retain();
  v29 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v81, (uint64_t)v22);
  v29(&ObjectType, 0);
  v30 = sub_10009FC50(&qword_100850438, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.FeedbackRequest, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.FeedbackRequest);
  v31 = v74;
  v32 = a6;
  v33 = v75;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v75, a5, v32, v75, v30);
  if (v31)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100850108);
    swift_errorRetain(v31);
    v35 = v72;
    swift_errorRetain(v31);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v81[0] = v40;
      *(_DWORD *)v39 = 136315394;
      swift_getErrorValue(v31, v83, v78);
      v41 = Error.rem_errorDescription.getter(v78[1], v78[2]);
      ObjectType = sub_10001A820(v41, v42, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);
      swift_bridgeObjectRelease();
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      *(_WORD *)(v39 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v43 = sub_10001A630(&qword_100850440);
      v44 = String.init<A>(describing:)(&ObjectType, v43);
      ObjectType = sub_10001A820(v44, v45, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v80);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);

    }
    v60 = v73;
    swift_willThrow(v46);
    swift_release(v76);
    swift_release(v60);
  }
  else
  {
    v47 = v70;
    v48 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v71, v16, v33);
    v49 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v77, v69, v49, 0, 0, v49);
    sub_10036E3F8(v48, v68);
    v51 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v52 = PropertyListEncoder.init()();
    v53 = v27;
    v54 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v55 = REMStoreObjectsContainer.init(store:storages:)(v53, v54);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v82 = v26;
    v81[0] = v55;
    swift_retain();
    v56 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v81, (uint64_t)v22);
    v56(&ObjectType, 0);
    v57 = sub_10009FC50(&qword_100850420, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.BooleanResponse);
    v58 = v68;
    v59 = v65;
    v74 = v52;
    v60 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v68, v65, v57);
    v62 = v61;
    v63 = sub_1000A70E4(v60, v61);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v63);
    swift_release(v73);
    swift_release(v55);
    swift_release(v76);
    swift_release(v74);
    sub_1000A71C8(v60, v62);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v59);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v71, v33);
  }
  return v60;
}

uint64_t sub_100581BF4(uint64_t a1, NSObject *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t *, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  _QWORD v91[3];
  uint64_t ObjectType;
  _BYTE v93[24];
  uint64_t v94[3];
  uint64_t v95;
  char v96[8];

  v81 = a3;
  v80 = a2;
  v82 = a1;
  v76 = type metadata accessor for REMListPickerDataView.Model(0);
  v79 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v74 = (char *)&v73 - v14;
  v78 = type metadata accessor for REMListPickerDataView.Invocation.Result(0, v13);
  v73 = *(_QWORD *)(v78 - 8);
  v15 = __chkstk_darwin(v78);
  v77 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for REMListPickerDataView.Invocation.Parameters(0, v15);
  v84 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v83 = (char *)&v73 - v20;
  v21 = type metadata accessor for CodingUserInfoKey(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PropertyListDecoder(0, v22);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v89 = PropertyListDecoder.init()();
  if (a7)
    v27 = a7;
  else
    v27 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v28 = type metadata accessor for REMStoreObjectsContainer(0, v26);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  swift_bridgeObjectRetain(a7);
  v29 = a4;
  v30 = REMStoreObjectsContainer.init(store:storages:)(v29, v27);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v95 = v28;
  v94[0] = v30;
  v86 = v30;
  swift_retain();
  v31 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v94, (uint64_t)v24);
  v31(&ObjectType, 0);
  v32 = sub_10009FC50(&qword_100850160, (uint64_t (*)(uint64_t))&type metadata accessor for REMListPickerDataView.Invocation.Parameters, (uint64_t)&protocol conformance descriptor for REMListPickerDataView.Invocation.Parameters);
  v33 = v87;
  v34 = a5;
  v35 = v88;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v88, v34, a6, v88, v32);
  if (v33)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_100850108);
    swift_errorRetain(v33);
    v37 = v85;
    swift_errorRetain(v33);
    v38 = v37;
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v94[0] = v42;
      *(_DWORD *)v41 = 136315394;
      swift_getErrorValue(v33, v96, v91);
      v43 = Error.rem_errorDescription.getter(v91[1], v91[2]);
      ObjectType = sub_10001A820(v43, v44, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v93);
      swift_bridgeObjectRelease();
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      *(_WORD *)(v41 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v45 = sub_10001A630(&qword_100850168);
      v46 = String.init<A>(describing:)(&ObjectType, v45);
      ObjectType = sub_10001A820(v46, v47, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v93);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);

    }
    v69 = v86;
    swift_willThrow(v48);
    swift_release(v89);
    swift_release(v69);
  }
  else
  {
    v49 = (uint64_t)v83;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v18, v35);
    v50 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v90, v82, v50, 0, 0, v50);
    v53 = sub_1005B8134(v80, v29, v49, (uint64_t)v90, v81, v52);
    v54 = v74;
    REMListPickerDataView.Model.init(accounts:)(v53);
    v55 = v75;
    v56 = v76;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v75, v54, v76);
    v57 = v77;
    REMListPickerDataView.Invocation.Result.init(model:)(v55);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v54, v56);
    v58 = type metadata accessor for PropertyListEncoder(0);
    v59 = swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
    v60 = PropertyListEncoder.init()(v59);
    v61 = v29;
    v62 = v60;
    v63 = v61;
    v64 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    v65 = REMStoreObjectsContainer.init(store:storages:)(v63, v64);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v95 = v28;
    v94[0] = v65;
    swift_retain();
    v66 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v94, (uint64_t)v24);
    v66(&ObjectType, 0);
    v67 = sub_10009FC50(&qword_100850170, (uint64_t (*)(uint64_t))&type metadata accessor for REMListPickerDataView.Invocation.Result, (uint64_t)&protocol conformance descriptor for REMListPickerDataView.Invocation.Result);
    v68 = v78;
    v69 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v57, v78, v67);
    v71 = v70;
    v72 = sub_1000A70E4(v69, v70);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v72);
    swift_release(v86);
    swift_release(v65);
    swift_release(v89);
    swift_release(v62);
    sub_1000A71C8(v69, v71);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v68);

    (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v35);
  }
  return v69;
}

id sub_100582618(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7, __n128 a8)
{
  void *v8;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t Style;
  uint64_t v78;
  id v79;
  _QWORD v80[3];
  uint64_t ObjectType;
  _BYTE v82[24];
  uint64_t v83[3];
  uint64_t v84;
  char v85[8];

  v69 = a3;
  v68 = a2;
  v71 = a1;
  v67 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result(0, a8);
  v66 = *(_QWORD *)(v67 - 8);
  v13 = __chkstk_darwin(v67);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle(0, v13);
  v72 = *(_QWORD *)(Style - 8);
  __chkstk_darwin(Style);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v73 = (char *)&v66 - v19;
  v20 = type metadata accessor for CodingUserInfoKey(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PropertyListDecoder(0, v21);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v78 = PropertyListDecoder.init()();
  v70 = v15;
  v74 = v8;
  if (a7)
    v26 = a7;
  else
    v26 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v27 = type metadata accessor for REMStoreObjectsContainer(0, v25);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  swift_bridgeObjectRetain(a7);
  v28 = a4;
  v29 = REMStoreObjectsContainer.init(store:storages:)(v28, v26);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v84 = v27;
  v83[0] = v29;
  v75 = v29;
  swift_retain();
  v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v83, (uint64_t)v23);
  v30(&ObjectType, 0);
  v31 = sub_10009FC50(&qword_100850270, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle);
  v32 = v76;
  v33 = a6;
  v34 = Style;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(Style, a5, v33, Style, v31);
  if (v32)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100850108);
    swift_errorRetain(v32);
    v36 = v74;
    swift_errorRetain(v32);
    v37 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v83[0] = v41;
      *(_DWORD *)v40 = 136315394;
      swift_getErrorValue(v32, v85, v80);
      v42 = Error.rem_errorDescription.getter(v80[1], v80[2]);
      ObjectType = sub_10001A820(v42, v43, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v82);
      swift_bridgeObjectRelease();
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      *(_WORD *)(v40 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v44 = sub_10001A630(&qword_100850278);
      v45 = String.init<A>(describing:)(&ObjectType, v44);
      ObjectType = sub_10001A820(v45, v46, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v82);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
    v51 = v75;
    swift_willThrow(v47);
    swift_release(v78);
    swift_release(v51);
  }
  else
  {
    v48 = v72;
    v49 = (uint64_t)v73;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v73, v17, v34);
    v50 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v79, v71, v50, 0, 0, v50);
    v53 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    sub_1004D4F20((uint64_t)v53, &off_1007F7278, v69, v49, (uint64_t)v70);

    v54 = type metadata accessor for PropertyListEncoder(0);
    v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
    v76 = PropertyListEncoder.init()(v55);
    v56 = v28;
    v57 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v58 = REMStoreObjectsContainer.init(store:storages:)(v56, v57);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v84 = v27;
    v83[0] = v58;
    swift_retain();
    v59 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v83, (uint64_t)v23);
    v59(&ObjectType, 0);
    v60 = sub_10009FC50(&qword_100850280, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result);
    v61 = (uint64_t)v70;
    v62 = v67;
    v37 = (id)dispatch thunk of PropertyListEncoder.encode<A>(_:)(v70, v67, v60);
    v64 = v63;
    v65 = sub_1000A70E4((uint64_t)v37, v63);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v65);
    swift_release(v75);
    swift_release(v58);
    swift_release(v78);
    swift_release(v76);
    sub_1000A71C8((uint64_t)v37, v64);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v61, v62);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v73, v34);
  }
  return v37;
}

uint64_t sub_100582FA0(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v7;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  _QWORD v79[3];
  uint64_t ObjectType;
  _BYTE v81[24];
  uint64_t v82[3];
  uint64_t v83;
  char v84[8];

  v68 = a3;
  v67 = a2;
  v70 = a1;
  v12 = type metadata accessor for REMSuggestedAttributesFeatureExtractor.Result(0);
  v65 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v69 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for REMSuggestedAttributesFeatureExtractor.Parameters(0, v13);
  v71 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v72 = (char *)&v65 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v77 = PropertyListDecoder.init()();
  v66 = v12;
  v73 = v7;
  if (a7)
    v25 = a7;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a7);
  v27 = a4;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v83 = v26;
  v82[0] = v28;
  v74 = v28;
  swift_retain();
  v29 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v82, (uint64_t)v22);
  v29(&ObjectType, 0);
  v30 = sub_10009FC50(&qword_100850238, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesFeatureExtractor.Parameters, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesFeatureExtractor.Parameters);
  v31 = v75;
  v32 = a6;
  v33 = v76;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v76, a5, v32, v76, v30);
  if (v31)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100850108);
    swift_errorRetain(v31);
    v35 = v73;
    swift_errorRetain(v31);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v82[0] = v40;
      *(_DWORD *)v39 = 136315394;
      swift_getErrorValue(v31, v84, v79);
      v41 = Error.rem_errorDescription.getter(v79[1], v79[2]);
      ObjectType = sub_10001A820(v41, v42, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v81);
      swift_bridgeObjectRelease();
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      *(_WORD *)(v39 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v43 = sub_10001A630(&qword_100850240);
      v44 = String.init<A>(describing:)(&ObjectType, v43);
      ObjectType = sub_10001A820(v44, v45, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v81);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);

    }
    v61 = v74;
    swift_willThrow(v46);
    swift_release(v77);
    swift_release(v61);
  }
  else
  {
    v47 = v71;
    v48 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v72, v16, v33);
    v49 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v78, v70, v49, 0, 0, v49);
    sub_1004D84A8(v67, v48, v69);
    v51 = type metadata accessor for PropertyListEncoder(0);
    v52 = swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v53 = PropertyListEncoder.init()(v52);
    v54 = v27;
    v55 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v56 = REMStoreObjectsContainer.init(store:storages:)(v54, v55);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v83 = v26;
    v82[0] = v56;
    swift_retain();
    v57 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v82, (uint64_t)v22);
    v57(&ObjectType, 0);
    v58 = sub_10009FC50(&qword_100850248, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesFeatureExtractor.Result, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesFeatureExtractor.Result);
    v59 = v69;
    v60 = v66;
    v75 = v53;
    v61 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v69, v66, v58);
    v63 = v62;
    v64 = sub_1000A70E4(v61, v62);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v64);
    swift_release(v74);
    swift_release(v56);
    swift_release(v77);
    swift_release(v75);
    sub_1000A71C8(v61, v63);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v59, v60);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v72, v33);
  }
  return v61;
}

uint64_t sub_1005838FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10057E1C4);
}

uint64_t sub_100583928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_1008505F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedInvocation.Parameters, &qword_1008505F8, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlaggedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001281E4, &qword_100850608, &qword_100850600);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005839A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayNotificationInvocation.Parameters, &qword_1008505E0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayNotificationInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100129B80, &qword_100850338, &qword_1008505E8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583A20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_1008505C0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters, &qword_1008505C8, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100168CFC, &qword_1008505D8, &qword_1008505D0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583A9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchFlatInvocation.Parameters, &qword_1008505B0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchFlatInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10019B6A0, &qword_100850338, &qword_1008505B8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583B18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850598, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, &qword_100850390, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1001D017C, &qword_1008505A8, &qword_1008505A0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10058507C);
}

uint64_t sub_100583BC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation.Parameters, &qword_100850570, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100204754, &qword_100850338, &qword_100850578);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583C3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters, &qword_100850560, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SiriFoundInAppsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10021AC10, &qword_100850338, &qword_100850568);
  if (v7)
    return v9;
  return result;
}

void sub_100583CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = _swiftEmptyArrayStorage;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = v14[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v18[0] = *v14;
    v18[1] = v15;
    v18[2] = v16;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    sub_1004D5F38((uint64_t)v18, (uint64_t)&v17);
    if (v1)
    {
      swift_release(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001E1C20(v17);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v8 >= v7)
      goto LABEL_26;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    if (!v12)
      break;
LABEL_17:
    v6 = (v12 - 1) & v12;
  }
  v13 = v8 + 1;
  if (v8 + 1 >= v7)
    goto LABEL_26;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 2;
  if (v8 + 2 >= v7)
    goto LABEL_26;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 3;
  if (v8 + 3 >= v7)
    goto LABEL_26;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 4;
  if (v8 + 4 >= v7)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v8 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_26;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100583E98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850540, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters, &qword_100850548, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDayInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10021C0B0, &qword_100850558, &qword_100850550);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583F14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters, &qword_100850528, (uint64_t)&protocol conformance descriptor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100245DB8, &qword_100850538, (uint64_t)&protocol conformance descriptor for REMPermanentlyHiddenDataView.PermanentlyHiddenInvocation.Result, &qword_100850530);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100583F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10057F5D0);
}

uint64_t sub_100583FC8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_1008504F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TaggedInvocation.Parameters, &qword_1008504F8, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TaggedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100269110, &qword_100850508, &qword_100850500);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584044(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850350, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters, &qword_1008504E0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1002ACA24, &qword_100850368, &qword_1008504E8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005840C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersInCalendarDataView.Invocation.Parameters, &qword_1008504C8, (uint64_t)&protocol conformance descriptor for REMRemindersInCalendarDataView.Invocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10031F5A8, &qword_1008504D8, (uint64_t)&protocol conformance descriptor for REMRemindersInCalendarDataView.Invocation.Result, &qword_1008504D0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10058588C);
}

uint64_t sub_100584174(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsResult_Codable, (uint64_t (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters, &qword_100850488, (uint64_t)&protocol conformance descriptor for REMSiriSearchDataView.ListsByCriteriaInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10032199C, &qword_100850498, (uint64_t)&protocol conformance descriptor for REMSiriSearchDataView.ListsResult_Codable, &qword_100850490);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005841FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledFlatInvocation.Parameters, &qword_100850478, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledFlatInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10034A2F4, &qword_100850338, &qword_100850480);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_10058093C);
}

uint64_t sub_1005842A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584354(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100586144);
}

uint64_t sub_1005842D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100581298);
}

uint64_t sub_1005842FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584354(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100586AE4);
}

uint64_t sub_100584328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584354(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100587500);
}

uint64_t sub_100584354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  result = a10(a1, a4, a5, a6, a7);
  if (v10)
    return v12;
  return result;
}

uint64_t sub_100584398(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters, &qword_1008503F8, (uint64_t)&protocol conformance descriptor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10039EDFC, &qword_100850408, (uint64_t)&protocol conformance descriptor for REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result, &qword_100850400);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584420(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListInvocation.Parameters, &qword_1008503E0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1003A2ACC, &qword_1008503F0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListInvocation.Result, &qword_1008503E8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005844A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_1008503C0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupInvocation.Parameters, &qword_1008503C8, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayGroupInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1003B9324, &qword_1008503D8, &qword_1008503D0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584524(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.Invocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.FetchOptions, &qword_1008503A8, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.FetchOptions, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1003E658C, &qword_1008503B8, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.Invocation.Result, &qword_1008503B0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005845AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850388, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, &qword_100850390, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100465BD0, &qword_1008503A0, &qword_100850398);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584628(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodaySectionOrderingModel, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodaySectionOrderingInvocation.Parameters, &qword_100850370, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodaySectionOrderingInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10048D380, &qword_100850380, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodaySectionOrderingModel, &qword_100850378);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005846B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850350, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllSectionsInvocation.Parameters, &qword_100850358, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_10049FF94, &qword_100850368, &qword_100850360);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_10058472C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850218, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllInvocation.Parameters, &qword_100850340, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004A4D24, &qword_100850230, &qword_100850348);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005847A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850320, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.RecentlyDeletedInvocation.Parameters, &qword_100850328, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.RecentlyDeletedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004A5A20, &qword_100850338, &qword_100850330);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584824(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation.Parameters, &qword_100850308, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004AA8AC, &qword_100850318, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupInvocation.Result, &qword_100850310);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005848AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_1008502E8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters, &qword_1008502F0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004B4BBC, &qword_100850300, &qword_1008502F8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_1005893C0(a1, a2, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters, &qword_1008502C0, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters, (uint64_t (*)(uint64_t, char *))sub_1004D6808, &qword_1008502D0, (uint64_t (*)(void))sub_10058B250, &qword_1008502C8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_1005849B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_1005893C0(a1, a2, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters, &qword_100850298, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters, (uint64_t (*)(uint64_t, char *))sub_1004D7A50, &qword_1008502A8, (uint64_t (*)(void))sub_10058B1D4, &qword_1008502A0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100588A1C);
}

uint64_t sub_100584A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100582618);
}

uint64_t sub_100584AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100588014);
}

uint64_t sub_100584ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100582FA0);
}

uint64_t sub_100584AF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850218, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchInvocation.Parameters, &qword_100850220, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SearchInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1004F2444, &qword_100850230, &qword_100850228);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584B74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850178, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsInvocation.Parameters, &qword_100850208, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100504130, &qword_100850190, &qword_100850210);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584BF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Parameters, &qword_1008501F0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005095D0, &qword_100850200, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CustomSmartListInvocation.Result, &qword_1008501F8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100589CB4);
}

uint64_t sub_100584CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584CD0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10058A75C);
}

uint64_t sub_100584CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  result = a10(a1, a2, a4, a5, a6, a7);
  if (v10)
    return v12;
  return result;
}

uint64_t sub_100584D14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057FF80(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType, &qword_1008501B8, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.ListType, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005102B8, &qword_1008501C8, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result, &qword_1008501C0);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584D9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850198, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters, &qword_1008501A0, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100514C3C, &qword_1008501B0, &qword_1008501A8);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584E18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850178, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.PublicTemplateInvocation.Parameters, &qword_100850180, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.PublicTemplateInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_100571EF8, &qword_100850190, &qword_100850188);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100584E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850108);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850108);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100584F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100584F50(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_100581BF4);
}

uint64_t sub_100584F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  result = a10();
  if (v10)
    return v12;
  return result;
}

uint64_t sub_100584F84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850140, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsInvocation.Parameters, &qword_100850148, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupSectionsInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005BE8B8, &qword_100850158, &qword_100850150);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_100585000(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  result = sub_10057EBF8(a1, a2, a3, a4, a5, a6, a7, &qword_100850120, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters, &qword_100850128, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AssignedInvocation.Parameters, (void (*)(id, uint64_t, uint64_t, id, char *))sub_1005C2AC8, &qword_100850138, &qword_100850130);
  if (v7)
    return v9;
  return result;
}

uint64_t sub_10058507C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *, _QWORD);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[3];
  uint64_t ObjectType;
  _BYTE v67[24];
  uint64_t v68[3];
  uint64_t v69;
  char v70[8];

  v58 = a2;
  v59 = a1;
  v11 = type metadata accessor for CodingUserInfoKey(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PropertyListDecoder(0, v12);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v62 = PropertyListDecoder.init()();
  if (a6)
    v17 = a6;
  else
    v17 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for REMStoreObjectsContainer(0, v16);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  swift_bridgeObjectRetain(a6);
  v19 = a3;
  v20 = REMStoreObjectsContainer.init(store:storages:)(v19, v17);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v69 = v18;
  v68[0] = v20;
  v61 = v20;
  swift_retain();
  v21 = v62;
  v22 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v68, (uint64_t)v14);
  v22(&ObjectType, 0);
  v23 = sub_10001A630(&qword_10084C260);
  v24 = sub_10058B388(&qword_100850580, &qword_1008429B0, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v23, a4, a5, v23, v24);
  if (v6)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100850108);
    swift_errorRetain(v6);
    v26 = v60;
    swift_errorRetain(v6);
    v27 = v26;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(64, -1);
      v68[0] = v31;
      *(_DWORD *)v30 = 136315394;
      swift_getErrorValue(v6, v70, v65);
      v32 = Error.rem_errorDescription.getter(v65[1], v65[2]);
      ObjectType = sub_10001A820(v32, v33, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v67);
      swift_bridgeObjectRelease();
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      *(_WORD *)(v30 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v34 = sub_10001A630(&qword_100850588);
      v35 = String.init<A>(describing:)(&ObjectType, v34);
      ObjectType = sub_10001A820(v35, v36, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v67);

      v21 = v62;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
    v53 = v61;
    swift_willThrow(v37);
    swift_release(v21);
    swift_release(v53);
  }
  else
  {
    v38 = v68[0];
    v39 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v64, v59, v39, 0, 0, v39);
    v41 = v64;
    sub_1001DDFA4(v58, v19, v38);
    v59 = v38;
    v63 = v42;
    v43 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v44 = PropertyListEncoder.init()();
    v45 = v19;
    v46 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v47 = REMStoreObjectsContainer.init(store:storages:)(v45, v46);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v69 = v18;
    v48 = v44;
    v49 = v47;
    v68[0] = v47;
    swift_retain();
    v50 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v68, (uint64_t)v14);
    v50(&ObjectType, 0);
    v51 = sub_10001A630(&qword_10083FC40);
    v52 = sub_10058B40C();
    v53 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v63, v51, v52);
    v55 = v54;
    v56 = sub_1000A70E4(v53, v54);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v56);
    swift_release(v61);
    swift_release(v49);
    swift_release(v62);
    swift_release(v48);
    sub_1000A71C8(v53, v55);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return v53;
}

uint64_t sub_10058588C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void (*v24)(uint64_t *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD v71[3];
  uint64_t ObjectType;
  _BYTE v73[24];
  uint64_t v74[3];
  uint64_t v75;
  char v76[8];

  v60 = a2;
  v61 = a1;
  v67 = type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters(0);
  v63 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v62 = (char *)&v59 - v13;
  v14 = type metadata accessor for CodingUserInfoKey(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PropertyListDecoder(0, v15);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v68 = PropertyListDecoder.init()();
  if (a6)
    v20 = a6;
  else
    v20 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for REMStoreObjectsContainer(0, v19);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_bridgeObjectRetain(a6);
  v22 = a3;
  v23 = REMStoreObjectsContainer.init(store:storages:)(v22, v20);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v75 = v21;
  v74[0] = v23;
  v65 = v23;
  swift_retain();
  v24 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v74, (uint64_t)v17);
  v24(&ObjectType, 0);
  v25 = sub_10009FC50(&qword_1008504A0, (uint64_t (*)(uint64_t))&type metadata accessor for REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMSiriSearchDataView.RemindersByCriteriaInvocation.Parameters);
  v26 = v66;
  v27 = a4;
  v28 = v67;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v67, v27, a5, v67, v25);
  if (v26)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_100850108);
    swift_errorRetain(v26);
    v30 = v64;
    swift_errorRetain(v26);
    v31 = v30;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v28 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v74[0] = v34;
      *(_DWORD *)v28 = 136315394;
      swift_getErrorValue(v26, v76, v71);
      v35 = Error.rem_errorDescription.getter(v71[1], v71[2]);
      ObjectType = sub_10001A820(v35, v36, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v73);
      swift_bridgeObjectRelease();
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      *(_WORD *)(v28 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v37 = sub_10001A630(&qword_1008504A8);
      v38 = String.init<A>(describing:)(&ObjectType, v37);
      ObjectType = sub_10001A820(v38, v39, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v73);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {
      swift_errorRelease(v26);
      swift_errorRelease(v26);

    }
    v42 = v65;
    swift_willThrow(v40);
    swift_release(v68);
    swift_release(v42);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v11, v28);
    v41 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v70, v61, v41, 0, 0, v41);
    v44 = v70;
    v69 = sub_1003228E4(v60, v22);
    v45 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
    v46 = PropertyListEncoder.init()();
    v47 = v22;
    v48 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v49 = REMStoreObjectsContainer.init(store:storages:)(v47, v48);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v75 = v21;
    v74[0] = v49;
    swift_retain();
    v50 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    v51 = (uint64_t)v17;
    v52 = v46;
    sub_100311F10((uint64_t)v74, v51);
    v50(&ObjectType, 0);
    v53 = sub_10001A630(&qword_1008504B0);
    v54 = sub_10058B30C();
    v28 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v69, v53, v54);
    v56 = v55;
    v57 = sub_1000A70E4(v28, v55);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v57);
    swift_release(v65);
    swift_release(v49);
    swift_release(v68);
    swift_release(v52);
    sub_1000A71C8(v28, v56);

    v58 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v62, v67, v58);
  }
  return v28;
}

uint64_t sub_100586144(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *, _QWORD);
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  char v102[8];
  char *v103;
  _QWORD v104[3];
  uint64_t ObjectType;
  _BYTE v106[24];
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110[8];

  v93 = a1;
  v9 = sub_10001A630(&qword_100846F28);
  v10 = __chkstk_darwin(v9);
  v89 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionResponse(0, v10);
  v90 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v91 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest(0, v13);
  v95 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v94 = (char *)&v88 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v100 = PropertyListDecoder.init()();
  v92 = v12;
  if (a5)
    v25 = a5;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a5);
  v27 = a2;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v109 = v26;
  v107 = v28;
  v97 = v28;
  swift_retain();
  v29 = v100;
  v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)&v107, (uint64_t)v22);
  v30(&ObjectType, 0);
  v31 = sub_10009FC50(&qword_100850448, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionRequest, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.MentionsExtractionRequest);
  v32 = v98;
  v33 = a4;
  v34 = v99;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v99, a3, v33, v99, v31);
  if (v32)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100850108);
    swift_errorRetain(v32);
    v36 = v96;
    swift_errorRetain(v32);
    v37 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled((os_log_t)v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v107 = v41;
      *(_DWORD *)v40 = 136315394;
      swift_getErrorValue(v32, v110, v104);
      v42 = Error.rem_errorDescription.getter(v104[1], v104[2]);
      ObjectType = sub_10001A820(v42, v43, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v106);
      swift_bridgeObjectRelease();
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      *(_WORD *)(v40 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v44 = sub_10001A630(&qword_100850450);
      v45 = String.init<A>(describing:)(&ObjectType, v44);
      ObjectType = sub_10001A820(v45, v46, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v106);

      v29 = v100;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v38, v39, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
    swift_willThrow(v47);
    swift_release(v29);
    swift_release(v97);
  }
  else
  {
    v48 = (uint64_t)v94;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v16, v34);
    v49 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v103, v93, v49, 0, 0, v49);
    v51 = sub_100370CE4(v103, v27, v48);
    v98 = 0;
    v107 = (uint64_t)v51;
    v108 = 0;
    v52 = sub_10001A630(&qword_100846F48);
    v53 = v89;
    Result.eraseToCodableError()(v52);
    v54 = v91;
    REMSuggestedAttributesHarvester.MentionsExtractionResponse.init(result:)(v53);
    sub_10058B300((uint64_t)v51, 0);
    v55 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v56 = (void *)PropertyListEncoder.init()();
    v57 = v27;
    v58 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v59 = REMStoreObjectsContainer.init(store:storages:)(v57, v58);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v109 = v26;
    v107 = v59;
    swift_retain();
    v60 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)&v107, (uint64_t)v22);
    v60(&ObjectType, 0);
    v61 = sub_10009FC50(&qword_100850458, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.MentionsExtractionResponse, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.MentionsExtractionResponse);
    v62 = v92;
    v63 = v56;
    v64 = v98;
    v65 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v54, v92, v61);
    if (v64)
    {
      v98 = v59;
      if (qword_1008378E8 != -1)
        swift_once(&qword_1008378E8, sub_100584E94);
      v67 = type metadata accessor for Logger(0);
      sub_10001AAA8(v67, (uint64_t)qword_100850108);
      v68 = v96;
      swift_errorRetain(v64);
      v69 = v68;
      v70 = swift_errorRetain(v64);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter(v71);
      v73 = v72;
      if (os_log_type_enabled(v71, v72))
      {
        v74 = swift_slowAlloc(22, -1);
        v96 = v56;
        v75 = v74;
        v76 = swift_slowAlloc(64, -1);
        v107 = v76;
        *(_DWORD *)v75 = 136315394;
        swift_getErrorValue(v64, v102, v101);
        LODWORD(v93) = v73;
        v77 = Error.rem_errorDescription.getter(v101[1], v101[2]);
        ObjectType = sub_10001A820(v77, v78, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v106);
        swift_bridgeObjectRelease();
        swift_errorRelease(v64);
        swift_errorRelease(v64);
        *(_WORD *)(v75 + 12) = 2080;
        ObjectType = swift_getObjectType();
        v79 = sub_10001A630(&qword_100850450);
        v80 = String.init<A>(describing:)(&ObjectType, v79);
        ObjectType = sub_10001A820(v80, v81, &v107);
        v82 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v106);

        v29 = v100;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v93, "Failed to encode the result of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v75, 0x16u);
        swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
        v83 = v76;
        v62 = v92;
        swift_slowDealloc(v83, -1, -1);
        v63 = v96;
        swift_slowDealloc(v75, -1, -1);

      }
      else
      {
        v82 = v54;
        swift_errorRelease(v64);
        swift_errorRelease(v64);

      }
      v38 = v95;
      v87 = v98;
      swift_willThrow(v84);
      swift_release(v97);
      swift_release(v87);
      swift_release(v29);
      swift_release(v63);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v82, v62);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v94, v99);
    }
    else
    {
      v38 = v65;
      v85 = v66;
      v86 = sub_1000A70E4(v65, v66);
      dispatch thunk of REMStoreObjectsContainer.storages.getter(v86);
      swift_release(v97);
      swift_release(v59);
      swift_release(v29);
      swift_release(v56);
      sub_1000A71C8(v38, v85);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v54, v62);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v99);
    }
  }
  return v38;
}

NSObject *sub_100586AE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, _QWORD);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  _QWORD v80[3];
  uint64_t ObjectType;
  _BYTE v82[24];
  uint64_t v83[3];
  uint64_t v84;
  char v85[8];

  v71 = a1;
  v70 = sub_10001A630(&qword_100846F78);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v65 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse(0);
  v66 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v67 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest(0, v11);
  v73 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v72 = (char *)&v64 - v16;
  v17 = type metadata accessor for CodingUserInfoKey(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PropertyListDecoder(0, v18);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v78 = PropertyListDecoder.init()();
  v68 = v10;
  if (a5)
    v23 = a5;
  else
    v23 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v24 = type metadata accessor for REMStoreObjectsContainer(0, v22);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  swift_bridgeObjectRetain(a5);
  v25 = a2;
  v26 = REMStoreObjectsContainer.init(store:storages:)(v25, v23);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v84 = v24;
  v83[0] = v26;
  v75 = v26;
  swift_retain();
  v27 = v78;
  v28 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v83, (uint64_t)v20);
  v28(&ObjectType, 0);
  v29 = sub_10009FC50(&qword_100850428, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest);
  v30 = v76;
  v31 = a4;
  v32 = v77;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v77, a3, v31, v77, v29);
  if (v30)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_100850108);
    swift_errorRetain(v30);
    v34 = v74;
    swift_errorRetain(v30);
    v35 = v34;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v83[0] = v39;
      *(_DWORD *)v38 = 136315394;
      swift_getErrorValue(v30, v85, v80);
      v40 = Error.rem_errorDescription.getter(v80[1], v80[2]);
      ObjectType = sub_10001A820(v40, v41, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v82);
      swift_bridgeObjectRelease();
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      *(_WORD *)(v38 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v42 = sub_10001A630(&qword_100850430);
      v43 = String.init<A>(describing:)(&ObjectType, v42);
      ObjectType = sub_10001A820(v43, v44, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v82);

      v27 = v78;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);

    }
    swift_willThrow(v45);
    swift_release(v27);
    swift_release(v75);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v14, v32);
    v46 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v79, v71, v46, 0, 0, v46);
    if (qword_1008372A8 != -1)
      swift_once(&qword_1008372A8, sub_100369C3C);
    v48 = qword_100871E58;
    v49 = REMSuggestedAttributesHarvester.PostSuggestionAnalyticsRequest.reminder.getter();
    v50 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v65, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v70);
    v51 = swift_allocObject(&unk_1007FB900, 32, 7);
    *(_QWORD *)(v51 + 16) = v49;
    *(_QWORD *)(v51 + 24) = v48;
    swift_retain();
    swift_retain();
    dispatch thunk of REMCache.performReadOnly(_:operations:)(v50, sub_10058B2F8, v51);
    swift_release(v51);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v70);
    swift_release(v49);
    v52 = v67;
    REMSuggestedAttributesHarvester.BooleanResponse.init(result:)(1);
    v53 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v54 = PropertyListEncoder.init()();
    v55 = v25;
    v56 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v57 = REMStoreObjectsContainer.init(store:storages:)(v55, v56);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v84 = v24;
    v83[0] = v57;
    swift_retain();
    v58 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v83, (uint64_t)v20);
    v58(&ObjectType, 0);
    v59 = sub_10009FC50(&qword_100850420, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.BooleanResponse);
    v60 = v68;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v52, v68, v59);
    v62 = v61;
    v63 = sub_1000A70E4((uint64_t)v36, v61);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v63);
    swift_release(v75);
    swift_release(v57);
    swift_release(v78);
    swift_release(v54);
    sub_1000A71C8((uint64_t)v36, v62);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v60);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v77);
  }
  return v36;
}

id sub_100587500(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t *, _QWORD);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD v92[3];
  uint64_t ObjectType;
  _BYTE v94[16];
  uint64_t v95;
  uint64_t v96;
  char v97[8];

  v82 = a1;
  v76 = sub_10001A630(&qword_100846F78);
  v81 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v80 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v83 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse(0);
  v12 = *(_QWORD *)(v79 - 8);
  v13 = __chkstk_darwin(v79);
  v78 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionRequest(0, v13);
  v85 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v84 = (char *)&v70 - v18;
  v19 = type metadata accessor for CodingUserInfoKey(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PropertyListDecoder(0, v20);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v90 = PropertyListDecoder.init()();
  v77 = v12;
  if (a5)
    v25 = a5;
  else
    v25 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for REMStoreObjectsContainer(0, v24);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_bridgeObjectRetain(a5);
  v27 = a2;
  v28 = REMStoreObjectsContainer.init(store:storages:)(v27, v25);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v96 = v26;
  v95 = v28;
  v87 = v28;
  swift_retain();
  v29 = v90;
  v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)&v95, (uint64_t)v22);
  v30(&ObjectType, 0);
  v31 = sub_10009FC50(&qword_100850410, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.RecordSuggestionRequest, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.RecordSuggestionRequest);
  v32 = v88;
  v33 = a3;
  v34 = v89;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v89, v33, a4, v89, v31);
  if (v32)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100850108);
    swift_errorRetain(v32);
    v36 = v86;
    swift_errorRetain(v32);
    v37 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v95 = v41;
      *(_DWORD *)v40 = 136315394;
      swift_getErrorValue(v32, v97, v92);
      v42 = Error.rem_errorDescription.getter(v92[1], v92[2]);
      ObjectType = sub_10001A820(v42, v43, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v94);
      swift_bridgeObjectRelease();
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      *(_WORD *)(v40 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v44 = sub_10001A630(&qword_100850418);
      v45 = String.init<A>(describing:)(&ObjectType, v44);
      ObjectType = sub_10001A820(v45, v46, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v94);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      v47 = v41;
      v29 = v90;
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
    swift_willThrow(v48);
    swift_release(v29);
    swift_release(v87);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v84, v16, v34);
    v49 = type metadata accessor for RDXPCSuggestedAttributesPerformer(0);
    throwingCast<A>(_:as:failureMessage:)(&v91, v82, v49, 0, 0, v49);
    if (qword_1008372A8 != -1)
      swift_once(&qword_1008372A8, sub_100369C3C);
    v88 = qword_100871E58;
    v82 = REMSuggestedAttributesHarvester.RecordSuggestionRequest.suggestionValue.getter();
    v70 = v51;
    v52 = REMSuggestedAttributesHarvester.RecordSuggestionRequest.suggestionType.getter();
    v53 = (uint64_t)v80;
    v54 = REMSuggestedAttributesHarvester.RecordSuggestionRequest.pipeline.getter(v52);
    v55 = (void *)REMSuggestedAttributesHarvester.RecordSuggestionRequest.reminderID.getter(v54);
    v56 = (uint64_t)v75;
    v57 = v76;
    (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v75, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v76);
    sub_100369EE8(v82, v70, v83, v53, v55, v56, (uint64_t)REMCDList.cleanUpAfterLocalObjectMerge(), 0);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v80, v74);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v83, v72);
    v58 = v78;
    REMSuggestedAttributesHarvester.BooleanResponse.init(result:)(1);
    v59 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    v60 = PropertyListEncoder.init()();
    v61 = v27;
    v62 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v63 = REMStoreObjectsContainer.init(store:storages:)(v61, v62);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v96 = v26;
    v95 = v63;
    swift_retain();
    v64 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)&v95, (uint64_t)v22);
    v64(&ObjectType, 0);
    v65 = sub_10009FC50(&qword_100850420, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.BooleanResponse, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.BooleanResponse);
    v66 = v79;
    v37 = (id)dispatch thunk of PropertyListEncoder.encode<A>(_:)(v58, v79, v65);
    v68 = v67;
    v69 = sub_1000A70E4((uint64_t)v37, v67);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v69);
    swift_release(v87);
    swift_release(v63);
    swift_release(v90);
    swift_release(v60);
    sub_1000A71C8((uint64_t)v37, v68);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v58, v66);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v89);
  }
  return v37;
}

char *sub_100588014(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t *, _QWORD);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  _QWORD v82[3];
  uint64_t ObjectType;
  _BYTE v84[24];
  uint64_t v85[3];
  uint64_t v86;
  char v87[8];

  v71 = a2;
  v72 = a1;
  v78 = type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters(0);
  v74 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v73 = (char *)&v70 - v13;
  v14 = type metadata accessor for CodingUserInfoKey(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PropertyListDecoder(0, v15);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v79 = PropertyListDecoder.init()();
  if (a6)
    v20 = a6;
  else
    v20 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for REMStoreObjectsContainer(0, v19);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_bridgeObjectRetain(a6);
  v22 = a3;
  v23 = REMStoreObjectsContainer.init(store:storages:)(v22, v20);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v86 = v21;
  v85[0] = v23;
  v76 = v23;
  swift_retain();
  v24 = v79;
  v25 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v85, (uint64_t)v17);
  v25(&ObjectType, 0);
  v26 = sub_10009FC50(&qword_100850250, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters);
  v27 = v77;
  v28 = a5;
  v29 = v78;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v78, a4, v28, v78, v26);
  if (v27)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_100850108);
    swift_errorRetain(v27);
    v31 = v75;
    swift_errorRetain(v27);
    v32 = v31;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v11 = (char *)swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v85[0] = v35;
      *(_DWORD *)v11 = 136315394;
      swift_getErrorValue(v27, v87, v82);
      v36 = Error.rem_errorDescription.getter(v82[1], v82[2]);
      ObjectType = sub_10001A820(v36, v37, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v84);
      swift_bridgeObjectRelease();
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      *((_WORD *)v11 + 6) = 2080;
      ObjectType = swift_getObjectType();
      v38 = sub_10001A630(&qword_100850258);
      v39 = String.init<A>(describing:)(&ObjectType, v38);
      ObjectType = sub_10001A820(v39, v40, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v84);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      v41 = v35;
      v24 = v79;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);

    }
    v45 = v76;
    swift_willThrow(v42);
    swift_release(v24);
    swift_release(v45);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v11, v29);
    v43 = type metadata accessor for RDXPCStorePerformer();
    v44 = throwingCast<A>(_:as:failureMessage:)(&v81, v72, v43, 0, 0, v43);
    v85[0] = REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation.Parameters.hashtagLabelNamesToSearch.getter(v44);
    v47 = sub_10001A630(&qword_100841A60);
    v48 = sub_1000A5F84((unint64_t *)&qword_100841A68, &qword_100841A60, (uint64_t)&protocol conformance descriptor for Set<A>);
    v49 = Sequence.compactMapToSet<A>(_:)(sub_1004D4E98, 0, v47, &type metadata for String, v48, &protocol witness table for String);
    swift_bridgeObjectRelease();
    v50 = sub_10037E310(v49, 0, v71);
    swift_bridgeObjectRelease();
    sub_100583CB8(v50);
    v52 = v51;
    swift_bridgeObjectRelease();
    v85[0] = v52;
    v53 = sub_10001A630(&qword_10083FE20);
    v54 = type metadata accessor for REMObjectID_Codable(0);
    v55 = sub_1000A5F84(&qword_100850260, &qword_10083FE20, (uint64_t)&protocol conformance descriptor for [A]);
    v56 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v57 = Sequence.mapToSet<A>(_:)(sub_1004D6148, 0, v53, v54, v55, v56);
    swift_bridgeObjectRelease();
    v80 = v57;
    v58 = type metadata accessor for PropertyListEncoder(0);
    v59 = swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
    v60 = PropertyListEncoder.init()(v59);
    v61 = v22;
    v62 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v63 = REMStoreObjectsContainer.init(store:storages:)(v61, v62);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v86 = v21;
    v85[0] = v63;
    swift_retain();
    v64 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v85, (uint64_t)v17);
    v64(&ObjectType, 0);
    v65 = sub_10001A630(&qword_10084C260);
    v66 = sub_10058B388(&qword_100850268, &qword_100842998, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    v11 = (char *)dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v80, v65, v66);
    v68 = v67;
    v69 = sub_1000A70E4((uint64_t)v11, v67);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v69);
    swift_release(v76);
    swift_release(v63);
    swift_release(v79);
    swift_release(v60);
    sub_1000A71C8((uint64_t)v11, v68);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v78);
  }
  return v11;
}

id sub_100588A1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  id v78;
  _QWORD v79[3];
  uint64_t ObjectType;
  _BYTE v81[24];
  uint64_t v82[3];
  uint64_t v83;
  char v84[8];

  v65 = a2;
  v69 = a1;
  v68 = type metadata accessor for REMHashtagLabelDataView.Operation(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters(0);
  v71 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v70 = (char *)&v65 - v14;
  v15 = type metadata accessor for CodingUserInfoKey(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PropertyListDecoder(0, v16);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v76 = PropertyListDecoder.init()();
  if (a6)
    v21 = a6;
  else
    v21 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v22 = type metadata accessor for REMStoreObjectsContainer(0, v20);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  swift_bridgeObjectRetain(a6);
  v23 = a3;
  v24 = REMStoreObjectsContainer.init(store:storages:)(v23, v21);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v83 = v22;
  v82[0] = v24;
  v73 = v24;
  swift_retain();
  v25 = v76;
  v26 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v82, (uint64_t)v18);
  v26(&ObjectType, 0);
  v27 = sub_10009FC50(&qword_100850288, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters);
  v28 = v74;
  v29 = a4;
  v30 = v75;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v75, v29, a5, v75, v27);
  if (v28)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100850108);
    swift_errorRetain(v28);
    v32 = v72;
    swift_errorRetain(v28);
    v33 = v32;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(64, -1);
      v82[0] = v37;
      *(_DWORD *)v36 = 136315394;
      swift_getErrorValue(v28, v84, v79);
      v38 = Error.rem_errorDescription.getter(v79[1], v79[2]);
      ObjectType = sub_10001A820(v38, v39, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v81);
      swift_bridgeObjectRelease();
      swift_errorRelease(v28);
      swift_errorRelease(v28);
      *(_WORD *)(v36 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v40 = sub_10001A630(&qword_100850290);
      v41 = String.init<A>(describing:)(&ObjectType, v40);
      ObjectType = sub_10001A820(v41, v42, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v81);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      v43 = v37;
      v25 = v76;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {
      swift_errorRelease(v28);
      swift_errorRelease(v28);

    }
    v47 = v73;
    swift_willThrow(v44);
    swift_release(v25);
    swift_release(v47);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v12, v30);
    v45 = type metadata accessor for RDXPCStorePerformer();
    v46 = throwingCast<A>(_:as:failureMessage:)(&v78, v69, v45, 0, 0, v45);
    v49 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.include.getter(v46);
    v50 = REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.exclude.getter();
    v51 = (uint64_t)v66;
    REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation.Parameters.operation.getter();
    v52 = sub_1004D6EB4(v49, v50, v51, v65);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v51, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v77 = v52;
    v53 = type metadata accessor for PropertyListEncoder(0);
    v54 = swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v55 = PropertyListEncoder.init()(v54);
    v56 = v23;
    v57 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v58 = REMStoreObjectsContainer.init(store:storages:)(v56, v57);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v83 = v22;
    v82[0] = v58;
    swift_retain();
    v59 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v82, (uint64_t)v18);
    v59(&ObjectType, 0);
    v60 = sub_10001A630(&qword_10084C260);
    v61 = sub_10058B388(&qword_100850268, &qword_100842998, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    v33 = (id)dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v77, v60, v61);
    v63 = v62;
    v64 = sub_1000A70E4((uint64_t)v33, v62);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v64);
    swift_release(v73);
    swift_release(v58);
    swift_release(v76);
    swift_release(v55);
    sub_1000A71C8((uint64_t)v33, v63);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v75);
  }
  return v33;
}

uint64_t sub_1005893C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t (*a7)(uint64_t), unint64_t *a8, uint64_t a9, uint64_t (*a10)(uint64_t, char *), uint64_t *a11, uint64_t (*a12)(void), uint64_t *a13)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _QWORD v84[3];
  uint64_t ObjectType;
  _BYTE v86[24];
  uint64_t v87[3];
  uint64_t v88;
  char v89[8];

  v76 = a8;
  v78 = a5;
  v77 = a4;
  v69 = a2;
  v71 = a1;
  v70 = a13;
  v80 = a7(0);
  v73 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v72 = (char *)&v68 - v19;
  v20 = type metadata accessor for CodingUserInfoKey(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PropertyListDecoder(0, v21);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v81 = PropertyListDecoder.init()();
  if (a6)
    v26 = a6;
  else
    v26 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v27 = type metadata accessor for REMStoreObjectsContainer(0, v25);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  swift_bridgeObjectRetain(a6);
  v28 = a3;
  v29 = REMStoreObjectsContainer.init(store:storages:)(v28, v26);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v88 = v27;
  v87[0] = v29;
  v75 = v29;
  swift_retain();
  v30 = v81;
  v31 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v87, (uint64_t)v23);
  v31(&ObjectType, 0);
  v32 = sub_10009FC50(v76, a7, a9);
  v33 = v79;
  v34 = v80;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v80, v77, v78, v80, v32);
  if (v33)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_100850108);
    swift_errorRetain(v33);
    v36 = v74;
    swift_errorRetain(v33);
    v37 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v87[0] = v41;
      *(_DWORD *)v40 = 136315394;
      swift_getErrorValue(v33, v89, v84);
      v42 = Error.rem_errorDescription.getter(v84[1], v84[2]);
      ObjectType = sub_10001A820(v42, v43, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v86);
      swift_bridgeObjectRelease();
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      *(_WORD *)(v40 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v44 = sub_10001A630(v70);
      v45 = String.init<A>(describing:)(&ObjectType, v44);
      ObjectType = sub_10001A820(v45, v46, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v86);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      v47 = v41;
      v30 = v81;
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);

    }
    v63 = v75;
    swift_willThrow(v48);
    swift_release(v30);
    swift_release(v63);
  }
  else
  {
    v49 = v72;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v17, v34);
    v50 = type metadata accessor for RDXPCStorePerformer();
    throwingCast<A>(_:as:failureMessage:)(&v83, v71, v50, 0, 0, v50);
    v52 = v83;
    v79 = a10(v69, v49);
    v82 = v79;
    v53 = type metadata accessor for PropertyListEncoder(0);
    v54 = swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v55 = PropertyListEncoder.init()(v54);
    v56 = v28;
    v57 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v58 = REMStoreObjectsContainer.init(store:storages:)(v56, v57);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v88 = v27;
    v59 = v58;
    v87[0] = v58;
    swift_retain();
    v60 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v87, (uint64_t)v23);
    v60(&ObjectType, 0);
    v61 = sub_10001A630(a11);
    v62 = a12();
    v63 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v82, v61, v62);
    v65 = v64;
    v66 = sub_1000A70E4(v63, v64);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v66);
    swift_release(v75);
    swift_release(v59);
    swift_release(v81);
    swift_release(v55);
    sub_1000A71C8(v63, v65);

    v67 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v72, v80, v67);
  }
  return v63;
}

NSObject *sub_100589CB4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void (*v32)(uint64_t *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t *, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  _QWORD v96[3];
  uint64_t ObjectType;
  _BYTE v98[24];
  uint64_t v99[3];
  uint64_t v100;
  char v101[8];

  v85 = a2;
  v87 = a1;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v10);
  v86 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType(0, v11);
  v82 = *(_QWORD *)(v83 - 8);
  v13 = __chkstk_darwin(v83);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result(0, v13);
  v79 = *(_QWORD *)(v81 - 8);
  v16 = __chkstk_darwin(v81);
  v80 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters(0, v16);
  v89 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v88 = (char *)&v78 - v21;
  v22 = type metadata accessor for CodingUserInfoKey(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for PropertyListDecoder(0, v23);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v94 = PropertyListDecoder.init()();
  v84 = v15;
  if (a6)
    v28 = a6;
  else
    v28 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v29 = type metadata accessor for REMStoreObjectsContainer(0, v27);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  swift_bridgeObjectRetain(a6);
  v30 = a3;
  v31 = REMStoreObjectsContainer.init(store:storages:)(v30, v28);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v100 = v29;
  v99[0] = v31;
  v91 = v31;
  swift_retain();
  v32 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v99, (uint64_t)v25);
  v32(&ObjectType, 0);
  v33 = sub_10009FC50(&qword_1008501D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters);
  v34 = v92;
  v35 = a5;
  v36 = v93;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v93, a4, v35, v93, v33);
  if (v34)
  {
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v37 = type metadata accessor for Logger(0);
    sub_10001AAA8(v37, (uint64_t)qword_100850108);
    swift_errorRetain(v34);
    v38 = v90;
    swift_errorRetain(v34);
    v39 = v38;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v99[0] = v43;
      *(_DWORD *)v42 = 136315394;
      swift_getErrorValue(v34, v101, v96);
      v44 = Error.rem_errorDescription.getter(v96[1], v96[2]);
      ObjectType = sub_10001A820(v44, v45, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v98);
      swift_bridgeObjectRelease();
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      *(_WORD *)(v42 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v46 = sub_10001A630(&qword_1008501E8);
      v47 = String.init<A>(describing:)(&ObjectType, v46);
      ObjectType = sub_10001A820(v47, v48, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v98);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {
      swift_errorRelease(v34);
      swift_errorRelease(v34);

    }
    v52 = v91;
    swift_willThrow(v49);
    swift_release(v94);
    swift_release(v52);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v19, v36);
    v50 = type metadata accessor for RDXPCStorePerformer();
    v51 = throwingCast<A>(_:as:failureMessage:)(&v95, v87, v50, 0, 0, v50);
    v54 = v84;
    v55 = REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.list.getter(v51);
    v56 = (uint64_t)v86;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.completedBeforeDate.getter(v55);
    v57 = sub_10050F098(v85, v56);
    sub_1000EA320(v56);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v54, v83);
    sub_100512700((uint64_t)v57, v30);
    v59 = v58;
    v61 = v60;
    v62 = swift_bridgeObjectRelease();
    v63 = v80;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result.init(deletedReminderIDs:accounts:)(v59, v61, v62);
    v64 = type metadata accessor for PropertyListEncoder(0);
    v65 = swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
    v66 = PropertyListEncoder.init()(v65);
    v67 = v30;
    v68 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v69 = REMStoreObjectsContainer.init(store:storages:)(v67, v68);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v100 = v29;
    v99[0] = v69;
    swift_retain();
    v70 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    v71 = (uint64_t)v25;
    v72 = v66;
    sub_100311F10((uint64_t)v99, v71);
    v70(&ObjectType, 0);
    v73 = sub_10009FC50(&qword_1008501E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result);
    v74 = v81;
    v40 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v63, v81, v73);
    v76 = v75;
    v77 = sub_1000A70E4((uint64_t)v40, v75);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v77);
    swift_release(v91);
    swift_release(v69);
    swift_release(v94);
    swift_release(v72);
    sub_1000A71C8((uint64_t)v40, v76);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v63, v74);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v93);
  }
  return v40;
}

NSObject *sub_10058A75C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void (*v33)(uint64_t *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t *, _QWORD);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD v92[3];
  uint64_t ObjectType;
  _BYTE v94[24];
  uint64_t v95[3];
  uint64_t v96;
  char v97[8];

  v82 = a2;
  v83 = a1;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType(0, v11);
  v78 = *(_QWORD *)(v79 - 8);
  v14 = __chkstk_darwin(v79);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result(0, v14);
  v75 = *(_QWORD *)(v76 - 8);
  v17 = __chkstk_darwin(v76);
  v77 = (uint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters(0, v17);
  v85 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v84 = (char *)&v74 - v22;
  v23 = type metadata accessor for CodingUserInfoKey(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PropertyListDecoder(0, v24);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v90 = PropertyListDecoder.init()();
  v81 = v13;
  v80 = v16;
  if (a6)
    v29 = a6;
  else
    v29 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
  v30 = type metadata accessor for REMStoreObjectsContainer(0, v28);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  swift_bridgeObjectRetain(a6);
  v31 = a3;
  v32 = REMStoreObjectsContainer.init(store:storages:)(v31, v29);
  static CodingUserInfoKey.remStoragesContainer.getter();
  v96 = v30;
  v95[0] = v32;
  v87 = v32;
  swift_retain();
  v33 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify(&ObjectType);
  sub_100311F10((uint64_t)v95, (uint64_t)v26);
  v33(&ObjectType, 0);
  v34 = sub_10009FC50(&qword_1008501D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters);
  v35 = v88;
  v36 = a4;
  v37 = v89;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v89, v36, a5, v89, v34);
  if (v35)
  {
    v38 = v86;
    if (qword_1008378E8 != -1)
      swift_once(&qword_1008378E8, sub_100584E94);
    v39 = type metadata accessor for Logger(0);
    sub_10001AAA8(v39, (uint64_t)qword_100850108);
    swift_errorRetain(v35);
    v40 = v38;
    swift_errorRetain(v35);
    v41 = v40;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v95[0] = v45;
      *(_DWORD *)v44 = 136315394;
      swift_getErrorValue(v35, v97, v92);
      v46 = Error.rem_errorDescription.getter(v92[1], v92[2]);
      ObjectType = sub_10001A820(v46, v47, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v94);
      swift_bridgeObjectRelease();
      swift_errorRelease(v35);
      swift_errorRelease(v35);
      *(_WORD *)(v44 + 12) = 2080;
      ObjectType = swift_getObjectType();
      v48 = sub_10001A630(&qword_1008501D8);
      v49 = String.init<A>(describing:)(&ObjectType, v48);
      ObjectType = sub_10001A820(v49, v50, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, v94);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {
      swift_errorRelease(v35);
      swift_errorRelease(v35);

    }
    v54 = v87;
    swift_willThrow(v51);
    swift_release(v90);
    swift_release(v54);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v84, v20, v37);
    v52 = type metadata accessor for RDXPCStorePerformer();
    v53 = throwingCast<A>(_:as:failureMessage:)(&v91, v83, v52, 0, 0, v52);
    v56 = v80;
    v57 = REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.list.getter(v53);
    v58 = (uint64_t)v81;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Parameters.completedBeforeDate.getter(v57);
    v59 = v82;
    v60 = sub_10050F098(v82, v58);
    sub_1000EA320(v58);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v79);
    v61 = v77;
    sub_10050F204((uint64_t)v60, v59, v31, v77);
    swift_bridgeObjectRelease();
    v62 = type metadata accessor for PropertyListEncoder(0);
    v63 = swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    v64 = PropertyListEncoder.init()(v63);
    v65 = v31;
    v66 = sub_1002AFB88((uint64_t)_swiftEmptyArrayStorage);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v67 = REMStoreObjectsContainer.init(store:storages:)(v65, v66);
    static CodingUserInfoKey.remStoragesContainer.getter();
    v96 = v30;
    v95[0] = v67;
    swift_retain();
    v68 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(&ObjectType);
    sub_100311F10((uint64_t)v95, (uint64_t)v26);
    v68(&ObjectType, 0);
    v69 = sub_10009FC50(&qword_1008501E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result, (uint64_t)&protocol conformance descriptor for REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result);
    v70 = v76;
    v88 = v64;
    v42 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v61, v76, v69);
    v72 = v71;
    v73 = sub_1000A70E4((uint64_t)v42, v71);
    dispatch thunk of REMStoreObjectsContainer.storages.getter(v73);
    swift_release(v87);
    swift_release(v67);
    swift_release(v90);
    swift_release(v88);
    sub_1000A71C8((uint64_t)v42, v72);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v61, v70);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v37);
  }
  return v42;
}

unint64_t sub_10058B1D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008502B0;
  if (!qword_1008502B0)
  {
    v1 = sub_1000A5A94(&qword_1008502A8);
    sub_10009FC50(&qword_1008502B8, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabelDetailed_Codable, (uint64_t)&protocol conformance descriptor for REMHashtagLabelDetailed_Codable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008502B0);
  }
  return result;
}

unint64_t sub_10058B250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008502D8;
  if (!qword_1008502D8)
  {
    v1 = sub_1000A5A94(&qword_1008502D0);
    sub_10009FC50(&qword_1008502E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMHashtagLabel_Codable, (uint64_t)&protocol conformance descriptor for REMHashtagLabel_Codable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008502D8);
  }
  return result;
}

uint64_t sub_10058B2CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10058B2F8(uint64_t a1)
{
  uint64_t v1;

  sub_10036A9B0(a1, *(_QWORD *)(v1 + 16));
}

double sub_10058B300(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

unint64_t sub_10058B30C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008504B8;
  if (!qword_1008504B8)
  {
    v1 = sub_1000A5A94(&qword_1008504B0);
    sub_10009FC50(&qword_1008504C0, (uint64_t (*)(uint64_t))&type metadata accessor for REMReminder_Codable, (uint64_t)&protocol conformance descriptor for REMReminder_Codable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008504B8);
  }
  return result;
}

uint64_t sub_10058B388(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_10084C260);
    sub_10009FC50(a2, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10058B40C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100850590;
  if (!qword_100850590)
  {
    v1 = sub_1000A5A94(&qword_10083FC40);
    sub_10009FC50(&qword_100842998, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for REMObjectID_Codable);
    sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100850590);
  }
  return result;
}

uint64_t sub_10058B4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850648);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850648);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10058B568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006AAD80;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006C34F0);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006C34C0);
  KeyPath = swift_getKeyPath(&unk_1006C33B8);
  *(_QWORD *)(v1 + 48) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_100872278 = v1;
  return result;
}

uint64_t sub_10058B5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006C34C0);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_100872280 = v1;
  return result;
}

void sub_10058B68C(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  id v38;
  id v39;

  v6 = *a1;
  v7 = objc_msgSend(*a1, "remObjectID");
  v8 = objc_msgSend(v6, "smartListType");
  v9 = REMSmartListTypeCustom;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  if (v10 == v13 && v12 == v14)
  {

    v17 = swift_bridgeObjectRelease_n(v12, 2).n128_u64[0];
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);

    swift_bridgeObjectRelease();
    v17 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v16 & 1) == 0 || !a2)
      goto LABEL_13;
  }
  v18 = v7;
  v19 = sub_1002B1D90(v18, a2);

  if (!v19)
  {
LABEL_13:
    v24 = objc_msgSend(v6, "smartListType", *(double *)&v17);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    if (v25 == v28 && v27 == v29)
    {

      swift_bridgeObjectRelease_n(v27, 2);
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v31 & 1) == 0)
      {
LABEL_25:
        v37 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0)), "initWithStore:storage:", a4, v6);
        v22 = a5;
        goto LABEL_29;
      }
    }
    if (qword_1008378F0 != -1)
      swift_once(&qword_1008378F0, sub_10058B4D8);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10001AAA8(v32, (uint64_t)qword_100850648);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "expecting a valid REMAccount for a custom smart list", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    goto LABEL_25;
  }
  v20 = objc_msgSend(v6, "parentListID");
  if (v20)
  {
    v21 = a4;
    v22 = a5;
    v7 = (id)a3;
    if (a3)
    {
      v23 = v20;
      v7 = sub_1002B1C48(v23, a3);

    }
    else
    {

    }
  }
  else
  {
    v7 = 0;
    v21 = a4;
    v22 = a5;
  }
  v38 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0));
  v39 = v21;
  v37 = objc_msgSend(v38, "initWithStore:account:parentList:storage:", v39, v19, v7, v6);

LABEL_29:
  *v22 = v37;
}

void sub_10058B9C4(uint64_t a1, id *a2)
{
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  uint8_t *v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  os_log_t v63;
  int v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v65 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (char *)&v60 - v12;
  v14 = *a2;
  v15 = objc_msgSend(*a2, "smartListType", v11);
  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
    v22 = v26;
    goto LABEL_10;
  }
  v16 = v15;
  v66 = v2;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
  v22 = v21;
  if (!v19)
  {
LABEL_10:
    swift_bridgeObjectRelease(v22);
    return;
  }
  if (v17 == v20 && v19 == v21)
  {
    v25 = swift_bridgeObjectRelease_n(v19, 2).n128_u64[0];
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);
    swift_bridgeObjectRelease(v19);
    v25 = swift_bridgeObjectRelease(v22).n128_u64[0];
    if ((v24 & 1) == 0)
      return;
  }
  v27 = objc_msgSend(v14, "remObjectID", *(double *)&v25);
  if (!v27)
    return;
  v28 = v27;
  v29 = objc_msgSend(v14, "parentList");
  v30 = (uint64_t)v66;
  if (!v29)
    goto LABEL_27;
  v31 = v29;
  if ((objc_msgSend(v29, "isDeleted") & 1) != 0)
  {
    if (qword_1008378F0 != -1)
      swift_once(&qword_1008378F0, sub_10058B4D8);
    v32 = type metadata accessor for Logger(0);
    sub_10001AAA8(v32, (uint64_t)qword_100850648);
    v33 = v14;
    v34 = Logger.logObject.getter(v33);
    v64 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, (os_log_type_t)v64))
    {
      v63 = v34;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v69 = v61;
      v62 = v35;
      *(_DWORD *)v35 = 136446210;
      v36 = objc_msgSend(v33, "identifier");
      if (v36)
      {
        v37 = v36;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

        v38 = 0;
      }
      else
      {
        v38 = 1;
      }
      v51 = v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v38, 1, v65);
      sub_1000F2CE4((uint64_t)v9, (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v51))
      {
        sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
        v52 = 0xE300000000000000;
        v53 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v51);
        v54 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
        v55 = v51;
        v53 = UUID.uuidString.getter(v54);
        v52 = v56;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v55);
      }
      v57 = v62;
      v67 = sub_10001A820(v53, v52, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

      swift_bridgeObjectRelease(v52);
      v58 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v64, "REMSmartCDList's parentList is unexpectedly deleted {identifier: %{public}s}", v57, 0xCu);
      v59 = v61;
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      return;
    }

LABEL_27:
    return;
  }
  v39 = sub_100534CF0(v31);
  if (!v30)
  {
    v50 = v39;
    v28 = v28;
    sub_100191408((uint64_t)v50, (uint64_t)v28);

    goto LABEL_27;
  }
  if (qword_1008378F0 != -1)
    swift_once(&qword_1008378F0, sub_10058B4D8);
  v40 = type metadata accessor for Logger(0);
  sub_10001AAA8(v40, (uint64_t)qword_100850648);
  swift_errorRetain(v30);
  v41 = swift_errorRetain(v30);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v69 = v45;
    *(_DWORD *)v44 = 136315138;
    v66 = v44 + 4;
    v67 = v30;
    swift_errorRetain(v30);
    v46 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v47 = String.init<A>(describing:)(&v67, v46);
    v49 = v48;
    v67 = sub_10001A820(v47, v48, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    swift_bridgeObjectRelease(v49);
    swift_errorRelease(v30);
    swift_errorRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error ingesting cdSmartList.parentList into list storage {error: %s}", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    swift_errorRelease(v30);
  }
  else
  {

    swift_errorRelease(v30);
    swift_errorRelease(v30);
    swift_errorRelease(v30);

  }
}

_QWORD *sub_10058C004(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v20;
  uint64_t v21;
  _QWORD *v22;

  v5 = v4;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v8)
      break;
    v22 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v8);
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
    v10 = 0;
    while (v8 != v10)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v20 = v11;
      sub_10058B68C(&v20, a2, a3, a4, &v21);

      if (v5)
        return (_QWORD *)swift_release(v22);
      ++v10;
      v14 = v21;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v15 = v22[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      if (v8 == v10)
        return v22;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10058C170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesOMa_3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *sub_10058C1B4()
{
  return "smartListType";
}

void sub_10058C1C0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_smartListType, a2);
}

void sub_10058C1DC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setSmartListType_);
}

id sub_10058C1F8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentAccount");
  *a2 = result;
  return result;
}

id sub_10058C230(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentAccount:", *a1);
}

uint64_t sub_10058C24C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10058C278(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setMostRecentTargetTemplateIdentifier_);
}

uint64_t sub_10058C2AC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_pinnedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_10058C2D8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPinnedDate_);
}

id sub_10058C30C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentList");
  *a2 = result;
  return result;
}

id sub_10058C344(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentList:", *a1);
}

void sub_10058C360(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_name, a2);
}

void sub_10058C37C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setName_);
}

uint64_t sub_10058C398@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10058C3C4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

id sub_10058C3F8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_10058C430(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_10058C44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSArray v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Class isa;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  Swift::String v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;

  v4 = v3;
  sub_1000069D8();
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  if (a3)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v12.super.isa = 0;
  }
  objc_msgSend(v10, "setAffectedStores:", v12.super.isa);

  objc_msgSend(v10, "setPredicate:", v8);
  if (qword_1008378F8 != -1)
    goto LABEL_19;
  while (1)
  {
    v13 = qword_100872278;
    if ((unint64_t)qword_100872278 >> 62)
      break;
    v14 = *(_QWORD *)((qword_100872278 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(qword_100872278);
    v35 = a2;
    v36 = v4;
    if (!v14)
      goto LABEL_24;
LABEL_7:
    v41 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
LABEL_31:
      v39 = 0;
      v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v31._object = (void *)0x80000001006F8C10;
      v31._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v31);
      v38 = v4;
      v32 = sub_10001A630(&qword_10083FD40);
      _print_unlocked<A, B>(_:_:)(&v38, &v39, v32, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v39, v40, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
      __break(1u);
      return result;
    }
    v33 = v10;
    v34 = v9;
    v10 = 0;
    v15 = v41;
    v37 = v13 & 0xC000000000000001;
    while ((id)v14 != v10)
    {
      if (v37)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v13);
        v4 = v16;
      }
      else
      {
        v4 = *(_QWORD *)(v13 + 8 * (_QWORD)v10 + 32);
        v16 = swift_retain();
      }
      v9 = v13;
      v17 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v16);
      if (!v18)
        goto LABEL_31;
      a2 = v17;
      v19 = v18;
      swift_release(v4);
      v41 = v15;
      v21 = v15[2];
      v20 = v15[3];
      v4 = v21 + 1;
      if (v21 >= v20 >> 1)
      {
        sub_1001C1B0C(v20 > 1, v21 + 1, 1);
        v15 = v41;
      }
      v10 = (char *)v10 + 1;
      v15[2] = v4;
      v22 = &v15[2 * v21];
      v22[4] = a2;
      v22[5] = v19;
      v13 = v9;
      if ((id)v14 == v10)
      {
        swift_bridgeObjectRelease();
        v10 = v33;
        v9 = v34;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_19:
    swift_once(&qword_1008378F8, sub_10058B568);
  }
  if (qword_100872278 < 0)
    v23 = qword_100872278;
  else
    v23 = qword_100872278 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(qword_100872278, 2);
  v14 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease();
  v35 = a2;
  v36 = v4;
  if (v14)
    goto LABEL_7;
LABEL_24:
  swift_bridgeObjectRelease();
LABEL_25:
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setRelationshipKeyPathsForPrefetching:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  if (qword_100837900 != -1)
    swift_once(&qword_100837900, sub_10058B5F8);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v25 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setSortDescriptors:", v25);

  v26 = v35;
  v27 = NSManagedObjectContext.fetch<A>(_:)(v10, v9);
  if (!v36)
  {
    v39 = v27;
    v28 = sub_10001A630((uint64_t *)&unk_100851970);
    v29 = sub_10058ED68();
    v26 = Sequence.elements<A>(ofType:)(v9, v28, v9, v29);
    swift_bridgeObjectRelease();
  }

  return v26;
}

void sub_10058C8B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;

  v2 = v1;
  v12 = &_swiftEmptyDictionarySingleton;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_12:
  if (a1 < 0)
    v9 = a1;
  else
    v9 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v9);
  if (!v4)
    goto LABEL_10;
LABEL_3:
  v5 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
    else
      v6 = *(id *)(a1 + 8 * v5);
    v7 = v6;
    v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_12;
    }
    v11 = v6;
    sub_10058B9C4((uint64_t)&v12, &v11);
    if (v2)
      break;
    v2 = 0;

    ++v5;
    if (v8 == v4)
      goto LABEL_10;
  }
  v10 = v12;
  swift_bridgeObjectRelease(a1);

  swift_bridgeObjectRelease(v10);
  __break(1u);
}

_QWORD *sub_10058C9E8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;

  sub_10001A630(&qword_100844400);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v4 = result;
  v5 = 0;
  v25 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v24 = (unint64_t)(v7 + 63) >> 6;
  v10 = (char *)(result + 8);
  if ((v8 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(void **)(*(_QWORD *)(v25 + 48) + 8 * i);
    v17 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    v18 = objc_allocWithZone((Class)REMAccount);
    v19 = v16;
    result = objc_msgSend(v18, "initWithStore:storage:", a2, v17);
    *(_QWORD *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(_QWORD *)(v4[6] + 8 * i) = v19;
    *(_QWORD *)(v4[7] + 8 * i) = result;
    v20 = v4[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v22;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v13 >= v24)
      return v4;
    v14 = *(_QWORD *)(v23 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v24)
        return v4;
      v14 = *(_QWORD *)(v23 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v24)
          return v4;
        v14 = *(_QWORD *)(v23 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v24)
    return v4;
  v14 = *(_QWORD *)(v23 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v24)
      return v4;
    v14 = *(_QWORD *)(v23 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int sub_10058CBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;

  v4 = __CocoaDictionary.count.getter(a1);
  if (v4)
  {
    v5 = v4;
    sub_10001A630(&qword_100844400);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = _swiftEmptyDictionarySingleton;
  }
  v33 = v6;
  v7 = __CocoaDictionary.makeIterator()(a1);
  swift_unknownObjectRetain(a1);
  v9 = __CocoaDictionary.Iterator.next()(v8);
  if (v9)
  {
    v11 = (void *)v9;
    v12 = v10;
    v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    do
    {
      v31 = v11;
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
      v30 = v12;
      v22 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
      v23 = v32;
      v24 = objc_msgSend(objc_allocWithZone((Class)REMAccount), "initWithStore:storage:", a2, v31);

      v6 = v33;
      v25 = v33[2];
      if (v33[3] <= v25)
      {
        sub_1002CC548(v25 + 1, 1);
        v6 = v33;
      }
      result = NSObject._rawHashValue(seed:)(v6[5]);
      v15 = v6 + 8;
      v16 = -1 << *((_BYTE *)v6 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~v6[(v17 >> 6) + 8]) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~v6[(v17 >> 6) + 8])) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = v15[v18];
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(v6[6] + v20) = v23;
      *(_QWORD *)(v6[7] + v20) = v24;
      ++v6[2];
      v11 = (void *)__CocoaDictionary.Iterator.next()(result);
      v12 = v21;
    }
    while (v11);
  }
  swift_release(v7);
  return (Swift::Int)v6;
}

_QWORD *sub_10058CE80(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  Class isa;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  Class v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v45;
  id v46;
  id v47;
  id v48;
  unint64_t v49;

  v3 = v2;
  v5 = a1;
  if (a1 >> 62)
    goto LABEL_30;
  v6 = *(_QWORD **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    v7 = (void *)sub_10047A570((_QWORD *)v5);
    if (v3)
      return v6;
    v46 = v7;
    v8 = objc_msgSend(v7, "smartListStorages");
    v9 = sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v42 = v10;
      else
        v42 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (!v11)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        v22 = 0;
LABEL_40:
        swift_bridgeObjectRetain(v22);
        v43 = a2;
        swift_bridgeObjectRetain(v11);
        v6 = sub_10058C004(v10, v11, v22, v43);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n(v11, 2);
        swift_bridgeObjectRelease_n(v22, 2);

        return v6;
      }
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (!v11)
        goto LABEL_39;
    }
    v45 = a2;
    v47 = (id)REMSmartListTypeCustom;
    v3 = 4;
    while (1)
    {
      v5 = v3 - 4;
      v12 = (v10 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v10)
          : *(id *)(v10 + 8 * v3);
      v13 = v12;
      a2 = (void *)(v3 - 3);
      if (__OFADD__(v5, 1))
        break;
      v14 = objc_msgSend(v12, "smartListType");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      if (v15 == v18 && v17 == v19)
      {

        swift_bridgeObjectRelease_n(v17, 2);
LABEL_19:
        v23 = objc_msgSend(v46, "accountStorages", swift_bridgeObjectRelease().n128_f64[0]);
        v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v25 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        v26 = sub_10011A5DC();
        v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, v25, v26);

        v49 = v26;
        if ((v27 & 0xC000000000000001) != 0)
        {
          if (v27 < 0)
            v28 = v27;
          else
            v28 = v27 & 0xFFFFFFFFFFFFFF8;
          v29 = sub_10058CBFC(v28, (uint64_t)v45);
        }
        else
        {
          v29 = (Swift::Int)sub_10058C9E8(v27, (uint64_t)v45);
        }
        v11 = v29;

        swift_bridgeObjectRelease();
        v48 = (id)objc_opt_self(REMListsDataView);
        v30 = objc_msgSend(v46, "accountStorages");
        v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v30, v24, v25, v49);

        v32 = sub_1001E8628(v31);
        swift_bridgeObjectRelease();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release(v32);
        v34 = objc_msgSend(v46, "parentListStorages");
        v35 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
        v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, v24, v35, v49);

        v37 = sub_1001E8614(v36);
        swift_bridgeObjectRelease();
        v38 = Array._bridgeToObjectiveC()().super.isa;
        swift_release(v37);
        v39 = objc_msgSend(v48, "listsFromAccountStorages:listStorages:store:", isa, v38, v45);

        if (v39)
        {
          v40 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
          v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v39, v24, v40, v49);

        }
        else
        {
          v22 = 0;
        }
LABEL_28:
        a2 = v45;
        goto LABEL_40;
      }
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_19;
      ++v3;
      if (a2 == (void *)v11)
      {
        swift_bridgeObjectRelease();
        v22 = 0;
        v11 = 0;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_30:
    if (v5 < 0)
      v41 = v5;
    else
      v41 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (!v6)
      return _swiftEmptyArrayStorage;
  }
}

void *sub_10058D3BC(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  objc_class *v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  _BYTE v26[24];
  objc_super v27;

  v4 = sub_10001A630(&qword_100839C20);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_10001A630(&qword_10083E870);
  __chkstk_darwin(v8);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  REMSmartList.NonCustom.init(smartListType:)(a1);
  v11 = type metadata accessor for REMSmartList.NonCustom(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000882C((uint64_t)v10, &qword_10083E870);
    return 0;
  }
  else
  {
    v14 = (void *)REMSmartList.NonCustom.remObjectID.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    v15 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
    v16 = (char *)objc_allocWithZone(v15);
    *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = a2;
    *(_QWORD *)&v16[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v14;
    v27.receiver = v16;
    v27.super_class = v15;
    v17 = a2;
    v18 = v14;
    v19 = objc_msgSendSuper2(&v27, "init");
    v20 = swift_allocObject(&unk_1007FB958, 24, 7);
    *(_QWORD *)(v20 + 16) = 0;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v4);
    v21 = swift_allocObject(&unk_1007FB980, 32, 7);
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = v19;
    swift_retain();
    v22 = v19;
    dispatch thunk of REMCache.performReadOnly(_:operations:)(v7, sub_1000D21DC, v21);

    swift_release(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(v20 + 16, v26, 0, 0);
    v13 = *(void **)(v20 + 16);
    v23 = v13;
    swift_release(v20);
  }
  return v13;
}

id sub_10058D604(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  void *v24;
  int64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  NSString v49;
  uint64_t v50;
  id result;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  NSArray v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  Class isa;
  double v83;
  Class v84;
  unint64_t v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  objc_class *v91;
  char *v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  id v115;
  id v116;
  objc_super v117;
  uint64_t v118;
  _QWORD *v119;
  id v120;
  unint64_t v121;

  v4 = v3;
  v116 = a2;
  v7 = sub_10001A630(&qword_100839C20);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s10PredicatesOMa_3(0);
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((REMSmartListType.hasPredefinedObjectID.getter(a1, v12) & 1) == 0)
    goto LABEL_13;
  v113 = v10;
  v114 = v8;
  v15 = REMSmartListTypeCustom;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
    goto LABEL_13;
  }
  v22 = v20;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
  {
LABEL_13:
    if (qword_1008378F0 != -1)
LABEL_44:
      swift_once(&qword_1008378F0, sub_10058B4D8);
    v39 = type metadata accessor for Logger(0);
    sub_10001AAA8(v39, (uint64_t)qword_100850648);
    v40 = a1;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.fault.getter();
    v25 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (void *)swift_slowAlloc(32, -1);
      v120 = v44;
      *(_DWORD *)v43 = 136446210;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v47 = v46;
      v119 = (_QWORD *)sub_10001A820(v45, v46, (uint64_t *)&v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);

      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v25, "Unexpected smart list type to fetch by predefined objectIDs {smartListType: %{public}s}", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

    }
    v48 = (void *)objc_opt_self(REMError);
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v48, "internalErrorWithDebugDescription:", v49);

    swift_willThrow(v50);
    return (id)v25;
  }
  v112 = v7;
  v24 = (void *)sub_100300818();
  v25 = (int64_t)_swiftEmptyArrayStorage;
  if (!v24)
    return (id)v25;
  v26 = v24;
  v27 = sub_10058D3BC(a1, v24);
  if (v27)
  {
    v28 = v27;
    v29 = a3;
    v120 = 0;
    v30 = objc_msgSend(v116, "existingObjectWithID:error:", v27, &v120);
    v31 = v120;
    if (v30)
    {
      v32 = v30;
      v115 = v28;
      v33 = objc_opt_self(REMCDSmartList);
      v34 = swift_dynamicCastObjCClass(v32, v33);
      if (v34)
      {
        v35 = v34;
        v36 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v37 = swift_allocObject(v36, 40, 7);
        *(_OWORD *)(v37 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v37 + 32) = v35;
        v120 = (id)v37;
        specialized Array._endMutation()(v37);
        v25 = (int64_t)v120;
        v38 = v31;

        return (id)v25;
      }
      v55 = v31;

    }
    else
    {
      v52 = v120;
      v53 = _convertNSErrorToError(_:)(v31);

      swift_willThrow(v54);
      swift_errorRelease(v53);
      v4 = 0;
    }
    a3 = v29;
    v25 = (int64_t)_swiftEmptyArrayStorage;
  }
  *v14 = a1;
  v14[1] = v26;
  swift_storeEnumTagMultiPayload(v14, v11, 0);
  v56 = a1;
  v109 = v26;
  v57 = objc_msgSend(v116, "persistentStoreOfAccountWithAccountID:");
  if (v57)
  {
    v58 = v57;
    v59 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v60 = swift_allocObject(v59, 40, 7);
    *(_OWORD *)(v60 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v60 + 32) = v58;
    v120 = (id)v60;
    specialized Array._endMutation()(v60);
    v61 = v120;
  }
  else
  {
    v61 = 0;
  }
  sub_1000069D8();
  v63 = v62;
  v64 = (void *)sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v65 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v110 = v64;
  v66 = objc_msgSend((id)swift_getObjCClassFromMetadata(v64), "entity");
  objc_msgSend(v65, "setEntity:", v66);

  if (v61)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v67.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v67.super.isa = 0;
  }
  objc_msgSend(v65, "setAffectedStores:", v67.super.isa);

  objc_msgSend(v65, "setPredicate:", v63);
  swift_bridgeObjectRelease(v61);
  if (qword_1008378F8 != -1)
    swift_once(&qword_1008378F8, sub_10058B568);
  v68 = qword_100872278;
  if (!((unint64_t)qword_100872278 >> 62))
  {
    v69 = *(_QWORD *)((qword_100872278 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(qword_100872278);
    v111 = v65;
    if (v69)
      goto LABEL_32;
LABEL_49:
    swift_bridgeObjectRelease(v68);
    a1 = _swiftEmptyArrayStorage;
LABEL_50:
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v83 = swift_bridgeObjectRelease(a1).n128_u64[0];
    v65 = v111;
    objc_msgSend(v111, "setRelationshipKeyPathsForPrefetching:", isa, v83);

    if (qword_100837900 != -1)
      swift_once(&qword_100837900, sub_10058B5F8);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v84 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v65, "setSortDescriptors:", v84);

    v85 = NSManagedObjectContext.fetch<A>(_:)(v65, v110);
    if (v4)
      goto LABEL_53;
    v25 = v85;
    if (!(v85 >> 62))
    {
      if (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
      {
LABEL_53:
        sub_10047ADB0((uint64_t)v14);

        return (id)v25;
      }
      swift_bridgeObjectRetain(v85);
LABEL_57:
      if ((v25 & 0xC000000000000001) != 0)
      {
        v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
      }
      else
      {
        if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
          __break(1u);
        v86 = *(id *)(v25 + 32);
      }
      v87 = v86;
      v116 = (id)v25;
      v88 = objc_msgSend(v86, "remObjectID", swift_bridgeObjectRelease(v25).n128_f64[0]);
      if (v88)
      {
        v89 = v88;
        v90 = objc_msgSend(v87, "objectID");
        v91 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
        v92 = (char *)objc_allocWithZone(v91);
        v93 = v109;
        *(_QWORD *)&v92[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID] = v109;
        *(_QWORD *)&v92[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID] = v89;
        v117.receiver = v92;
        v117.super_class = v91;
        v94 = v93;
        v107 = a3;
        v108 = v14;
        v110 = v94;
        v115 = v89;
        v95 = objc_msgSendSuper2(&v117, "init");
        v97 = v113;
        v96 = v114;
        v98 = v112;
        (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v112);
        v99 = swift_allocObject(&unk_1007FB930, 32, 7);
        *(_QWORD *)(v99 + 16) = v90;
        *(_QWORD *)(v99 + 24) = v95;
        v100 = v90;
        v101 = v95;
        dispatch thunk of REMCache.performReadAndWrite(_:operations:)(v97, sub_1000D2164, v99);

        swift_release(v99);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);

        sub_10047ADB0((uint64_t)v108);
      }
      else
      {
        sub_10047ADB0((uint64_t)v14);

      }
      return v116;
    }
LABEL_65:
    if (v25 < 0)
      v102 = v25;
    else
      v102 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v103 = _CocoaArrayWrapper.endIndex.getter(v102);
    swift_bridgeObjectRelease(v25);
    if (v103 != 1)
      goto LABEL_53;
    swift_bridgeObjectRetain(v25);
    if (!_CocoaArrayWrapper.endIndex.getter(v102))
    {
      swift_bridgeObjectRelease(v25);
      goto LABEL_53;
    }
    goto LABEL_57;
  }
  if (qword_100872278 < 0)
    v81 = qword_100872278;
  else
    v81 = qword_100872278 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(qword_100872278, 2);
  v69 = _CocoaArrayWrapper.endIndex.getter(v81);
  swift_bridgeObjectRelease(v68);
  v111 = v65;
  if (!v69)
    goto LABEL_49;
LABEL_32:
  v107 = a3;
  v108 = v14;
  v106 = v4;
  v119 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v69 & ~(v69 >> 63), 0);
  if (v69 < 0)
  {
    __break(1u);
    goto LABEL_65;
  }
  v70 = 0;
  a1 = v119;
  v115 = (id)(v68 & 0xC000000000000001);
  v71 = v68;
  while (1)
  {
    if (v69 == v70)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v115)
    {
      v72 = specialized _ArrayBuffer._getElementSlowPath(_:)(v70, v68);
      v73 = v72;
    }
    else
    {
      v73 = *(_QWORD *)(v68 + 8 * v70 + 32);
      v72 = swift_retain();
    }
    v74 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v72);
    if (!v75)
      break;
    v76 = v74;
    v77 = v75;
    swift_release(v73);
    v119 = a1;
    v79 = a1[2];
    v78 = a1[3];
    v25 = v79 + 1;
    if (v79 >= v78 >> 1)
    {
      sub_1001C1B0C(v78 > 1, v79 + 1, 1);
      a1 = v119;
    }
    ++v70;
    a1[2] = v25;
    v80 = &a1[2 * v79];
    v80[4] = v76;
    v80[5] = v77;
    v68 = v71;
    if (v69 == v70)
    {
      swift_bridgeObjectRelease(v71);
      v4 = v106;
      a3 = v107;
      v14 = v108;
      goto LABEL_50;
    }
  }
  v120 = 0;
  v121 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v104._object = (void *)0x80000001006F8C10;
  v104._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v104);
  v118 = v73;
  v105 = sub_10001A630(&qword_10083FD40);
  _print_unlocked<A, B>(_:_:)(&v118, &v120, v105, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v120, v121, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

NSString sub_10058E118(void *a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  id v41;
  id v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSString v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t *v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v7 = _s10PredicatesOMa_3(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t **)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((REMSmartListType.hasPredefinedObjectID.getter(a1, v8) & 1) != 0)
  {
    if (qword_1008378F0 != -1)
      swift_once(&qword_1008378F0, sub_10058B4D8);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100850648);
    v12 = a1;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v68 = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v19 = v18;
      v66 = sub_10001A820(v17, v18, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID() {smartListType: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    v47 = (void *)objc_opt_self(REMError);
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "internalErrorWithDebugDescription:", v48);

    swift_willThrow(v49);
  }
  else
  {
    v65 = a3;
    v20 = REMSmartListTypeCustom;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    if (v21 == v24 && v23 == v25)
    {
      swift_bridgeObjectRelease_n(v23, 2);
    }
    else
    {
      v27 = v25;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v27);
      if ((v28 & 1) == 0)
      {
        if (qword_1008378F0 != -1)
          swift_once(&qword_1008378F0, sub_10058B4D8);
        v29 = type metadata accessor for Logger(0);
        sub_10001AAA8(v29, (uint64_t)qword_100850648);
        v30 = a1;
        v31 = a2;
        v64 = v30;
        v32 = v31;
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.error.getter();
        v35 = v34;
        v63 = v33;
        if (os_log_type_enabled(v33, v34))
        {
          v36 = swift_slowAlloc(22, -1);
          v61 = (_QWORD *)swift_slowAlloc(8, -1);
          v62 = swift_slowAlloc(32, -1);
          v68 = v62;
          *(_DWORD *)v36 = 136446466;
          v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          v60 = v35;
          v39 = v38;
          v66 = sub_10001A820(v37, v38, &v68);
          v59 = &v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
          v40 = v64;

          swift_bridgeObjectRelease(v39);
          *(_WORD *)(v36 + 12) = 2114;
          v66 = (uint64_t)v32;
          v41 = v32;
          v64 = v3;
          v42 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v59);
          v43 = v61;
          *v61 = v32;

          v44 = v63;
          _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v60, "BOGUS! Practically cdSmartListsHavingCustomObjectID(...) is meant to be used for fetching CSLs only {smartListType: %{public}s, objectID: %{public}@}", (uint8_t *)v36, 0x16u);
          v45 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v43, 1, v45);
          swift_slowDealloc(v43, -1, -1);
          v46 = v62;
          swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          v50 = v64;
        }
      }
    }
    *v10 = a1;
    v10[1] = a2;
    swift_storeEnumTagMultiPayload(v10, v7, 1);
    v51 = a1;
    v52 = a2;
    sub_1000069D8();
    v54 = v53;
    v55 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v56 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v57 = objc_msgSend((id)swift_getObjCClassFromMetadata(v55), "entity");
    objc_msgSend(v56, "setEntity:", v57);

    objc_msgSend(v56, "setAffectedStores:", 0);
    objc_msgSend(v56, "setPredicate:", v54);

    v48 = (NSString)NSManagedObjectContext.fetch<A>(_:)(v56, v55);
    sub_10047ADB0((uint64_t)v10);

  }
  return v48;
}

NSObject *sub_10058E6E0(NSObject *a1, void *a2, void *a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  id v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  os_log_type_t type;
  NSObject *log;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = a1;
  if ((REMSmartListType.hasPredefinedObjectID.getter(a1, a5) & 1) != 0)
  {
    v10 = sub_10058D604(v9, a3, a4);
    if (v5)
      return v9;
    v11 = (uint64_t)v10;
  }
  else
  {
    if (!a2)
    {
      if (qword_1008378F0 != -1)
        swift_once(&qword_1008378F0, sub_10058B4D8);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_100850648);
      v36 = v9;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v56 = v40;
        *(_DWORD *)v39 = 136446210;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v43 = v42;
        v54 = sub_10001A820(v41, v42, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unexpected usage of cdSmartList(smartListType:objectID:in:...) - you must either fetch smart list of a type which hasPredefinedObjectID, or specify an objectID to match {smartListType: %{public}s}", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

      }
      v44 = (void *)objc_opt_self(REMError);
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v44, "invalidParameterErrorWithDescription:", v9);

LABEL_18:
      swift_willThrow(v45);
      return v9;
    }
    v12 = a2;
    v11 = (uint64_t)sub_10058E118(v9, v12, (uint64_t)a3);

    if (v5)
      return v9;
  }
  if (!((unint64_t)v11 >> 62))
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
      if (v13 < 2)
        goto LABEL_20;
      goto LABEL_9;
    }
    goto LABEL_30;
  }
  if (v11 < 0)
    v47 = v11;
  else
    v47 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease(v11);
  if (!v48)
  {
LABEL_30:
    swift_bridgeObjectRelease(v11);
    if (a2)
    {
      v49 = (void *)objc_opt_self(REMError);
      v9 = a2;
      swift_willThrow(objc_msgSend(v49, "noSuchObjectErrorWithObjectID:", v9));

      return v9;
    }
    v45 = objc_msgSend((id)objc_opt_self(REMError), "noSuchSmartListErrorWithSmartListType:", v9);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain(v11);
  v13 = _CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease(v11);
  if (v13 < 2)
    goto LABEL_20;
LABEL_9:
  if (qword_1008378F0 != -1)
    goto LABEL_36;
  while (1)
  {
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_100850648);
    v15 = a2;
    v16 = v9;
    swift_bridgeObjectRetain_n(v11, 2);
    v17 = v15;
    v18 = v16;
    v9 = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v19))
    {
      v20 = swift_slowAlloc(32, -1);
      v53 = swift_slowAlloc(96, -1);
      v54 = (uint64_t)v18;
      v56 = v53;
      *(_DWORD *)v20 = 136315650;
      log = v9;
      type metadata accessor for REMSmartListType(0);
      type = v19;
      v22 = v21;
      v23 = v18;
      v24 = String.init<A>(describing:)(&v54, v22);
      v26 = v25;
      v54 = sub_10001A820(v24, v25, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v20 + 12) = 2080;
      v54 = (uint64_t)a2;
      v27 = sub_10001A630((uint64_t *)&unk_100844910);
      v28 = Optional.descriptionOrNil.getter(v27);
      v30 = v29;
      v54 = sub_10001A820(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v20 + 22) = 2080;
      v54 = v13;
      v31 = sub_1000D2474();
      v32 = BinaryInteger.description.getter(&type metadata for Int, v31);
      v34 = v33;
      v54 = sub_10001A820(v32, v33, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease(v34);
      v9 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "fetching smart list returned more than one result {type: %s objectID: %s, count: %s}", (uint8_t *)v20, 0x20u);
      a2 = (void *)v53;
      swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
LABEL_20:
    if ((v11 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v46 = *(id *)(v11 + 32);
      goto LABEL_23;
    }
    __break(1u);
LABEL_36:
    swift_once(&qword_1008378F0, sub_10058B4D8);
  }
  v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
LABEL_23:
  v9 = v46;
  swift_bridgeObjectRelease(v11);
  return v9;
}

uint64_t sub_10058ECEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10058ED18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058ED3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10058ED68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840F90;
  if (!qword_100840F90)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_100851970);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100840F90);
  }
  return result;
}

uint64_t sub_10058EDB4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t KeyPath;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  unint64_t v45;
  id v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  char v79[48];
  uint64_t v80;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v74 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s10PredicatesOMa_3(0);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = objc_msgSend(a1, "persistentStoreOfAccountWithAccountID:", a2, v8);
  if (v11)
  {
    v12 = v11;
    v13 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v14 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v14 + 32) = v12;
    v80 = v14;
    specialized Array._endMutation()(v14);
    v15 = v80;
  }
  else
  {
    v15 = 0;
  }
  *v10 = a2;
  swift_storeEnumTagMultiPayload(v10, v7, 5);
  v16 = a2;
  sub_1000069D8();
  v18 = v17;
  sub_10047ADB0((uint64_t)v10);
  v19 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v19, v79);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006C3220);
  KeyPath = swift_getKeyPath(&unk_1006C3320);
  *(_QWORD *)(inited + 40) = KeyPath;
  v80 = inited;
  specialized Array._endMutation()(KeyPath);
  v22 = (void *)sub_100357F78(v80, 0, v15, (uint64_t)v18);
  swift_bridgeObjectRelease();
  v23 = (uint64_t)v22;
  swift_bridgeObjectRelease();
  v24 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v25 = NSManagedObjectContext.fetch<A>(_:)(v22, v24);
  v73 = v2;
  if (v2)
  {

    return v7;
  }
  v26 = v25;
  v7 = sub_1002AF704((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)v26 >> 62)
  {
LABEL_41:
    if (v26 < 0)
      v68 = v26;
    else
      v68 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v26, 2);
    v27 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease();
    v72 = (id)v23;
    if (v27)
      goto LABEL_8;
LABEL_45:
    swift_bridgeObjectRelease_n(v26, 2);

    return v7;
  }
  v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v26);
  v72 = (id)v23;
  if (!v27)
    goto LABEL_45;
LABEL_8:
  v77 = v27;
  v78 = v26 & 0xC000000000000001;
  v23 = 4;
  v75 = v26;
  v76 = v18;
  while (1)
  {
    if (v78)
      v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v26);
    else
      v28 = *(id *)(v26 + 8 * v23);
    v29 = v28;
    v30 = v23 - 3;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v31 = objc_msgSend(v28, "smartListType");
    if (v31)
      break;

LABEL_10:
    ++v23;
    if (v30 == v27)
      goto LABEL_45;
  }
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  v36._countAndFlagsBits = v33;
  v36._object = v35;
  v37 = (void *)REMSmartListType.init(stringValue:)(v36);
  if (!v37)
  {

LABEL_35:
    v27 = v77;
    goto LABEL_10;
  }
  v38 = v37;
  v39 = objc_msgSend(v29, "smartListType");
  if (v39
    && (v40 = v39,
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39),
        v43 = v42,
        v40,
        v44._countAndFlagsBits = v41,
        v44._object = v43,
        (v45 = (unint64_t)REMSmartListType.init(stringValue:)(v44)) != 0))
  {
    v26 = v45;
    v46 = objc_msgSend(v29, "pinnedDate");
    if (v46)
    {
      v47 = v46;
      v48 = v74;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v49 = (uint64_t)v48;
      v50 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v48, 0, 1, v50);
    }
    else
    {
      v51 = type metadata accessor for Date(0);
      v49 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v74, 1, 1, v51);
    }
    sub_1000151B0(0, &qword_10083B1E0, REMSmartList_ptr);
    v18 = (void *)static REMSmartList.userDefinedVisibilityOfSmartList(with:pinnedDate:)(v26, v49);

    sub_10000882C(v49, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v18 = 0;
  }
  v52 = swift_isUniquelyReferenced_nonNull_native(v7);
  v53 = v7;
  v7 = v54;
  v80 = v53;
  v56 = sub_1002C6728(v38, v52);
  v57 = *(_QWORD *)(v53 + 16);
  v58 = (v55 & 1) == 0;
  v59 = v57 + v58;
  if (__OFADD__(v57, v58))
    goto LABEL_39;
  v26 = v55;
  if (*(_QWORD *)(v53 + 24) >= v59)
  {
    if ((v7 & 1) != 0)
    {
      v7 = v80;
      if ((v55 & 1) == 0)
        goto LABEL_29;
    }
    else
    {
      sub_1002D672C();
      v7 = v80;
      if ((v26 & 1) == 0)
        goto LABEL_29;
    }
    goto LABEL_33;
  }
  sub_1002CD238(v59, v7);
  v61 = sub_1002C6728(v38, v60);
  if ((v26 & 1) == (v62 & 1))
  {
    v56 = v61;
    v7 = v80;
    if ((v26 & 1) == 0)
    {
LABEL_29:
      *(_QWORD *)(v7 + 8 * (v56 >> 6) + 64) |= 1 << v56;
      v63 = 8 * v56;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v63) = v38;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v63) = v18;
      v64 = *(_QWORD *)(v7 + 16);
      v65 = __OFADD__(v64, 1);
      v66 = v64 + 1;
      if (v65)
        goto LABEL_40;
      *(_QWORD *)(v7 + 16) = v66;
      v67 = v38;
      goto LABEL_34;
    }
LABEL_33:
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v56) = v18;
LABEL_34:

    swift_bridgeObjectRelease();
    v26 = v75;
    v18 = v76;
    goto LABEL_35;
  }
  type metadata accessor for REMSmartListType(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v70);
  __break(1u);
  return result;
}

char *sub_10058F318(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v12[(v6 + 16) & ~(unint64_t)v6];
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *a2;
        v9 = a2[1];
        *(_QWORD *)a1 = v8;
        *((_QWORD *)a1 + 1) = v9;
        v10 = v8;
        v11 = v9;
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v14 = *a2;
        v15 = a2[1];
        *(_QWORD *)a1 = v14;
        *((_QWORD *)a1 + 1) = v15;
        v16 = v14;
        v17 = v15;
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v18 = *a2;
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain(v18);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v19 = *a2;
        *(_QWORD *)a1 = *a2;
        v20 = v19;
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v21 = *a2;
        *(_QWORD *)a1 = *a2;
        a1[8] = *((_BYTE *)a2 + 8);
        v22 = v21;
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v23 = *a2;
        *(_QWORD *)a1 = *a2;
        v24 = v23;
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v25 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v26 = *a2;
        *(_QWORD *)a1 = *a2;
        v27 = v26;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

_QWORD *sub_10058F4D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;

  if (a1 != a2)
  {
    sub_10047ADB0((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = (void *)*a2;
        *a1 = *a2;
        v7 = (void *)a2[1];
        a1[1] = v7;
        v8 = v6;
        v9 = v7;
        v10 = a1;
        v11 = a3;
        v12 = 0;
        goto LABEL_12;
      case 1u:
        v13 = (void *)*a2;
        *a1 = *a2;
        v14 = (void *)a2[1];
        a1[1] = v14;
        v15 = v13;
        v16 = v14;
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_12;
      case 2u:
        v17 = (void *)*a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v17);
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_12;
      case 3u:
        v18 = (void *)*a2;
        *a1 = *a2;
        v19 = v18;
        v10 = a1;
        v11 = a3;
        v12 = 3;
        goto LABEL_12;
      case 4u:
        v20 = (void *)*a2;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        v21 = v20;
        v10 = a1;
        v11 = a3;
        v12 = 4;
        goto LABEL_12;
      case 5u:
        v22 = (void *)*a2;
        *a1 = *a2;
        v23 = v22;
        v10 = a1;
        v11 = a3;
        v12 = 5;
        goto LABEL_12;
      case 6u:
        v24 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v10 = a1;
        v11 = a3;
        v12 = 6;
        goto LABEL_12;
      case 7u:
        v25 = (void *)*a2;
        *a1 = *a2;
        v26 = v25;
        v10 = a1;
        v11 = a3;
        v12 = 7;
LABEL_12:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10058F674(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 6)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 6);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10058F700(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10047ADB0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 6)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 6);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10058F79C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1006C3530;
  v4[1] = &unk_1006C3530;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_1006C3548;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10058F834(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  char v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = objc_msgSend(v1, "secondaryGroceryLocalesInfoAsData");
  if (!v4)
  {
LABEL_11:
    swift_retain();
    v19 = 0;
    goto LABEL_12;
  }
  v5 = v4;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
  sub_10009FC50((unint64_t *)&unk_100850770, type metadata accessor for RDSecondaryGroceryLocalesInfo, (uint64_t)&unk_1006BEC18);
  static REMJSONRepresentable.fromJSONData(_:)(&v29, v6, v8);
  if (v2)
  {
    sub_1000A71C8(v6, v8);
    if (qword_100836DA0 != -1)
      swift_once(&qword_100836DA0, sub_10014B308);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10083CEE8);
    swift_errorRetain(v2);
    v10 = swift_errorRetain(v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v29 = v24;
      *(_DWORD *)v13 = 136446466;
      v27 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
      v14 = sub_10001A630(&qword_100847150);
      v15 = String.init<A>(describing:)(&v27, v14);
      v27 = sub_10001A820(v15, v16, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      swift_getErrorValue(v2, v26, v25);
      v17 = Error.rem_errorDescription.getter(v25[1], v25[2]);
      v27 = sub_10001A820(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s#mergeSecondaryGroceryLocalesInfo(_:): Failed to deserialize 'secondaryGroceryLocalesInfoAsData' due to unexpected error. It will be overwritten. { error: %{public}s}", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
    goto LABEL_11;
  }
  sub_1000A71C8(v6, v8);
  v19 = v29;
  v20 = a1 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate;
  v21 = v29 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate;
  swift_retain();
  if ((static Date.> infix(_:_:)(v20, v21) & 1) == 0)
    a1 = v19;
  swift_retain();
  swift_release(v19);
LABEL_12:
  v22 = swift_retain();
  sub_1004BBC40(v22);
  swift_release(v19);
  return swift_release_n(a1);
}

void sub_10058FB90()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v1 = objc_msgSend(v0, "smartLists");
  if (v1)
  {
    v2 = v1;
    v3 = (uint64_t)objc_msgSend(v1, "count");

    if (v3 >= 1)
    {
      v4 = sub_10059237C();
      if (v4)
      {
        v5 = (void *)v4;
        v10 = objc_msgSend(v0, "lists");
        sub_100599678(v5);
        v7 = v6;
        if (v10)
        {
          if (v6)
          {
            v10 = v10;
            v8 = (void *)sub_10059D3EC();
            sub_10059A414(v10, v8, v5);

          }
          else
          {

          }
          v9 = v10;
        }
        else
        {

          v9 = v7;
        }

      }
    }
  }
}

void sub_10058FC98(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  Class isa;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  _BYTE v68[32];
  _OWORD v69[2];
  char v70[24];
  __int128 aBlock;
  void (*v72)(uint64_t, void *);
  void *v73;
  uint64_t (*v74)(uint64_t, int, uint64_t);
  uint64_t v75;
  id v76;

  v59 = a4;
  v7 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v62 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (char *)&v56 - v13;
  v14 = type metadata accessor for NSFastEnumerationIterator(0);
  v57 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v64 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "count", v15);
  v18 = objc_msgSend(a2, "count");
  v19 = objc_msgSend(objc_allocWithZone((Class)NSMutableOrderedSet), "initWithOrderedSet:", a1);
  isa = (Class)objc_msgSend(a2, "array");
  if (!isa)
  {
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, (char *)&type metadata for Any + 8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v21 = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  objc_msgSend(v19, "addObjectsFromArray:", isa, v21);

  if (v17 && v18)
  {
    v23 = swift_allocObject(&unk_1007FB9A8, 24, 7);
    *(_QWORD *)(v23 + 16) = &_swiftEmptyDictionarySingleton;
    v74 = sub_10025F8B8;
    v75 = v23;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v72 = sub_100256CB0;
    v73 = &unk_1007FB9C0;
    v24 = _Block_copy(&aBlock);
    v25 = v75;
    swift_retain();
    swift_release(v25);
    objc_msgSend(a3, "enumerateObjectsUsingBlock:", v24);
    _Block_release(v24);
    swift_beginAccess(v23 + 16, v70, 0, 0);
    v26 = *(_QWORD *)(v23 + 16);
    swift_bridgeObjectRetain(v26);
    sub_1000A774C((void **)v19, v26, 0);
    swift_release(v23);
    swift_bridgeObjectRelease(v26);
  }
  v27 = v19;
  v28 = v64;
  NSOrderedSet.makeIterator()();
  v56 = v27;

  v29 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&aBlock, v14, v29);
  if (v73)
  {
    v66 = _swiftEmptyArrayStorage;
    v67 = (char *)&type metadata for Any + 8;
    v61 = v7;
    v30 = (uint64_t)v63;
    do
    {
      sub_10001A6CC(&aBlock, v69);
      sub_10001A670((uint64_t)v69, (uint64_t)v68);
      v31 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
      if (swift_dynamicCast(&v76, v68, v67, v31, 6))
      {
        v32 = v29;
        v33 = v76;
        v34 = objc_msgSend(v76, "identifier");
        v35 = v65;
        if (v34)
        {
          v36 = v34;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

          v37 = 0;
        }
        else
        {
          v37 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v11, v37, 1, v7);
        sub_1000F2CE4((uint64_t)v11, v30);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v30, 1, v7))
        {

          sub_10000882C(v30, (uint64_t *)&unk_100839C80);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v69);
        }
        else
        {
          v38 = v30;
          v39 = v14;
          v40 = v11;
          v41 = v62;
          (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v62, v38, v7);
          v42 = sub_10000882C(v38, (uint64_t *)&unk_100839C80);
          v43 = v35;
          v44 = UUID.uuidString.getter(v42);
          v46 = v45;

          (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v7);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v69);
          v47 = v66;
          if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
            v47 = sub_1002C8224(0, v47[2] + 1, 1, v47);
          v49 = v47[2];
          v48 = v47[3];
          v66 = v47;
          v11 = v40;
          v14 = v39;
          if (v49 >= v48 >> 1)
            v66 = sub_1002C8224((_QWORD *)(v48 > 1), v49 + 1, 1, v66);
          v30 = (uint64_t)v63;
          v28 = v64;
          v50 = v66;
          v66[2] = v49 + 1;
          v51 = &v50[2 * v49];
          v51[4] = v44;
          v51[5] = v46;
          v7 = v61;
        }
        v29 = v32;
      }
      else
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v69);
      }
      dispatch thunk of IteratorProtocol.next()(&aBlock, v14, v29);
    }
    while (v73);
  }
  else
  {
    v66 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v14);
  v52 = v66;
  v53 = v60;
  sub_1003C9ABC((uint64_t)v66, v58, v59);
  if (v53)
  {

    swift_bridgeObjectRelease(v52);
  }
  else
  {
    v55 = v54;

    swift_bridgeObjectRelease(v52);
  }
}

void sub_1005902A4()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  v1 = objc_msgSend(v0, "lists");
  if (v1)
  {
    v2 = v1;
    v3 = (uint64_t)objc_msgSend(v1, "count");

    if (v3 >= 1)
    {
      v4 = (void *)sub_10059237C();
      if (v4)
      {
        v5 = v4;
        sub_100598AD8(v4);
        v7 = v6;
        v8 = objc_msgSend(v0, "smartLists");
        if (v7)
        {
          if (v8)
          {
            v11 = v8;
            v7 = v7;
            v9 = v11;
            v10 = (void *)sub_10059D3EC();
            sub_10059A414(v7, v10, v5);

            v5 = v7;
          }
          v12 = v7;
        }
        else
        {
          v12 = v8;
        }

      }
    }
  }
}

double sub_1005903B4(uint64_t a1, int a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  double result;
  double v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Class isa;
  id v77;
  id v78;
  NSString v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[4];
  int v83;
  id v84;
  __n128 v85;
  _BYTE *v86;
  _BYTE *v87;
  id v88;
  uint64_t v89;
  NSObject *v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;

  LODWORD(v3) = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v87 = &v82[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (unint64_t)&v82[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v82[-v12];
  v84 = v2;
  v88 = sub_1005920F8();
  if (!v88)
  {
    if (qword_100837908 == -1)
    {
LABEL_43:
      v54 = type metadata accessor for Logger(0);
      v55 = sub_10001AAA8(v54, (uint64_t)qword_100850710);
      v90 = Logger.logObject.getter(v55);
      v56 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v90, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v56, "Failed to create a new listIDsMergeableOrdering when trying to update listIDsMergableOrdering for missing list(s)", v57, 2u);
        swift_slowDealloc(v57, -1, -1);
      }

      return result;
    }
LABEL_76:
    swift_once(&qword_100837908, sub_100591118);
    goto LABEL_43;
  }
  v14 = _swiftEmptyArrayStorage;
  v93 = (unint64_t)_swiftEmptyArrayStorage;
  v92 = &_swiftEmptySetSingleton;
  if ((unint64_t)a1 >> 62)
    goto LABEL_58;
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v16 = swift_bridgeObjectRetain(a1);
  if (v15)
    goto LABEL_4;
  while (2)
  {
    *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
    v91 = v14;
    if ((v3 & 1) == 0)
      goto LABEL_63;
LABEL_27:
    v45 = objc_msgSend(v88, "count", v44);
    v46 = v92;
    if (v45)
    {
      v3 = v45;
      v47 = 0;
      v5 = (uint64_t)(v92 + 7);
      v6 = -1;
      while (1)
      {
        if (!v46[2])
          goto LABEL_38;
        v48 = static Hasher._hash(seed:_:)(v46[5], v47);
        v49 = -1 << *((_BYTE *)v46 + 32);
        v50 = v48 & ~v49;
        if (((*(_QWORD *)(v5 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
          goto LABEL_38;
        v51 = v46[6];
        if (*(_QWORD *)(v51 + 8 * v50) != v47)
          break;
LABEL_30:
        if ((id)++v47 == v3)
          goto LABEL_46;
      }
      v52 = ~v49;
      while (1)
      {
        v50 = (v50 + 1) & v52;
        if (((*(_QWORD *)(v5 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
          break;
        if (*(_QWORD *)(v51 + 8 * v50) == v47)
          goto LABEL_30;
      }
LABEL_38:
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = sub_1002CA590(0, v14[2] + 1, 1, v14);
      v10 = v14[2];
      v53 = v14[3];
      if (v10 >= v53 >> 1)
        v14 = sub_1002CA590((_QWORD *)(v53 > 1), v10 + 1, 1, v14);
      v14[2] = v10 + 1;
      v14[v10 + 4] = v47;
      v91 = v14;
      goto LABEL_30;
    }
LABEL_46:
    *(_QWORD *)&v59 = swift_bridgeObjectRelease().n128_u64[0];
    v60 = v14[2];
    if (v60 < 2)
      goto LABEL_64;
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_1001CEC90(v14);
    v61 = 0;
    v62 = v60 + 3;
    while (1)
    {
      if (v61 == v62 - 4)
        goto LABEL_50;
      v64 = v14[2];
      if (v61 >= v64)
        break;
      if (v62 - 4 >= v64)
        goto LABEL_57;
      v65 = &v14[v61];
      v66 = v65[4];
      v65[4] = v14[v62];
      v14[v62] = v66;
LABEL_50:
      ++v61;
      v63 = v62 - 5;
      --v62;
      if ((uint64_t)v61 >= v63)
      {
        v91 = v14;
        goto LABEL_64;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v67);
    if (!v15)
      continue;
    break;
  }
LABEL_4:
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_76;
  }
  v83 = (int)v3;
  v17 = 0;
  v90 = (a1 & 0xC000000000000001);
  v16.n128_u64[0] = 138412290;
  v85 = v16;
  v89 = v15;
  v86 = v13;
  do
  {
    if (v90)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, a1);
    else
      v18 = *(id *)(a1 + 8 * v17 + 32);
    v19 = v18;
    v20 = objc_msgSend(v18, "identifier");
    if (v20)
    {
      v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v10, v22, 1, v5);
    sub_1000F2CE4(v10, (uint64_t)v13);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5))
    {
      sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
      if (qword_100837908 != -1)
        swift_once(&qword_100837908, sub_100591118);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_100850710);
      v24 = v19;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(12, -1);
        v28 = v10;
        v29 = v5;
        v30 = v6;
        v31 = a1;
        v32 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v27 = v85.n128_u32[0];
        *(_QWORD *)(v27 + 4) = v24;
        *v32 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Tried to update listIDsMergableOrdering for missing list but list has no identifier {list: %@}", (uint8_t *)v27, 0xCu);
        v33 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v32, 1, v33);
        v34 = v32;
        a1 = v31;
        v6 = v30;
        v5 = v29;
        v10 = v28;
        v13 = v86;
        swift_slowDealloc(v34, -1, -1);
        v35 = v27;
        v15 = v89;
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v36 = v87;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v87, v13, v5);
      v37 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
      UUID.uuidString.getter(v37);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v36, v5);
      v38 = String._bridgeToObjectiveC()();
      v39 = objc_msgSend(v88, "indexOfEqualObject:", v38, swift_bridgeObjectRelease().n128_f64[0]);
      v40 = NSNotFound.getter();
      if (v40 < 0 || v39 != (id)v40)
      {
        sub_1002DC410((uint64_t *)&v91, (uint64_t)v39);
      }
      else
      {
        v38 = v38;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v42 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v41 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v42 >= v41 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1);
        v43 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v38);
        specialized Array._endMutation()(v43);
      }

      v15 = v89;
    }
    ++v17;
  }
  while (v15 != v17);
  *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
  LODWORD(v3) = v83;
  v14 = _swiftEmptyArrayStorage;
  v91 = _swiftEmptyArrayStorage;
  if ((v83 & 1) != 0)
    goto LABEL_27;
LABEL_63:
  *(_QWORD *)&v59 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_64:
  if (v93 >> 62)
  {
    if ((v93 & 0x8000000000000000) != 0)
      v80 = v93;
    else
      v80 = v93 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v93);
    v81 = _CocoaArrayWrapper.endIndex.getter(v80);
    *(_QWORD *)&v59 = swift_bridgeObjectRelease().n128_u64[0];
    if (v81)
      goto LABEL_67;
LABEL_66:
    if (v14[2])
      goto LABEL_67;
    swift_bridgeObjectRelease();

  }
  else
  {
    if (!*(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_66;
LABEL_67:
    v68 = v88;
    v69 = objc_msgSend(v88, "mutableOrderedSet", v59);
    v70 = objc_msgSend(objc_allocWithZone((Class)_REMDefaultReplicaManagerProvider), "initWithStore:", 0);
    objc_msgSend(v69, "setReplicaManagerProvider:", v70);

    sub_100595FD0(v69, &v91, (uint64_t *)&v93);
    v71 = objc_msgSend(v69, "immutableOrderedSet");

    v72 = objc_msgSend(v71, "serializedData");
    v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v75 = v74;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v73, v75);
    v77 = v84;
    objc_msgSend(v84, "setListIDsMergeableOrdering:", isa);

    v78 = objc_msgSend(v77, "createResolutionTokenMapIfNecessary");
    v79 = String._bridgeToObjectiveC()();
    objc_msgSend(v78, "updateForKey:", v79);

    objc_msgSend(v77, "updateChangeCount");
    swift_bridgeObjectRelease();

  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100590C94(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = objc_msgSend(v1, "recentlyDeletedInfoAsData");
  if (!v4)
  {
LABEL_9:
    swift_retain();
    v19 = 0;
    goto LABEL_10;
  }
  v5 = v4;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  type metadata accessor for RDRecentlyDeletedInfo(0);
  sub_10009FC50(&qword_100841B08, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006C45CC);
  static REMJSONRepresentable.fromJSONData(_:)(&v28, v6, v8);
  if (v2)
  {
    sub_1000A71C8(v6, v8);
    if (qword_100837370 != -1)
      swift_once(&qword_100837370, sub_1003A2460);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_100847D40);
    swift_errorRetain(v2);
    v10 = swift_errorRetain(v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v28 = v23;
      *(_DWORD *)v13 = 136446466;
      v26 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
      v14 = sub_10001A630(&qword_100847150);
      v15 = String.init<A>(describing:)(&v26, v14);
      v26 = sub_10001A820(v15, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      swift_getErrorValue(v2, v25, v24);
      v17 = Error.rem_errorDescription.getter(v24[1], v24[2]);
      v26 = sub_10001A820(v17, v18, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s#mergeRecentlyDeletedInfo(_:): Failed to deserialize 'recentlyDeletedInfoAsData' due to unexpected error. It will be overwritten. { error: %{public}s}", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
    goto LABEL_9;
  }
  sub_1000A71C8(v6, v8);
  v19 = v28;
  swift_retain();
  sub_1004ECD80(a1);
  a1 = v20;
  swift_release(v19);
LABEL_10:
  v21 = swift_retain();
  sub_1004BBE70(v21, 1);
  swift_release(v19);
  return swift_release_n(a1);
}

uint64_t sub_100590FD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10059100C + 4 * byte_1006C3560[a1]))(0xD000000000000012, 0x80000001006F4360);
}

void sub_1005910B0(uint64_t *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *a1;
  swift_isUniquelyReferenced_nonNull_native(*a1);
  if ((v3 & 1) == 0)
    v2 = sub_1001D6188(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10059AC78(v5);
  *a1 = v2;
}

uint64_t sub_100591118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850710);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850710);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1005911B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100590FD4(*a1);
  v5 = v4;
  v6 = sub_100590FD4(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100591238()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_100590FD4(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100591298(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_100590FD4(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1005912D8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_100590FD4(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100591334@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10059D694(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100591360@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100590FD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100591388(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DDF68;
}

_UNKNOWN **static REMCDAccount.recordTypes()()
{
  return &off_1007E1748;
}

Swift::String __swiftcall REMCDAccount.recordName()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = objc_msgSend(v0, "ckUserRecordName");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6 = objc_msgSend(v0, "recordType");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10._countAndFlagsBits = 47;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = v3;
    v11._object = v5;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12 = v7;
    v13 = v9;
  }
  else
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_100850710);
    v15 = v0;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v27 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = objc_msgSend(v15, "remObjectID");
      if (v20)
      {
        v21 = v20;
        v22 = objc_msgSend(v20, "description");

        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

      }
      else
      {
        v25 = 0xE300000000000000;
        v23 = 7104878;
      }
      v28 = sub_10001A820(v23, v25, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMCDAccount.recordName() cannot be determined because it is called before .ckUserRecordName is initialized {account: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
    v12 = 0;
    v13 = (void *)0xE000000000000000;
  }
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall REMCDAccount.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x746E756F636341;
  v1 = (void *)0xE700000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static REMCDAccount.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  double v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  NSString v17;
  id v18;
  NSString v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t result;

  v7 = objc_msgSend(a1, "recordName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10._countAndFlagsBits = 0x2F746E756F636341;
  v10._object = (void *)0xE800000000000000;
  LOBYTE(v7) = String.hasPrefix(_:)(v10);
  *(_QWORD *)&v11 = swift_bridgeObjectRelease(v9).n128_u64[0];
  if ((v7 & 1) == 0)
  {
    v12 = objc_msgSend(a1, "recordName", v11);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15._countAndFlagsBits = 95;
    v15._object = (void *)0xE100000000000000;
    LOBYTE(v12) = String.hasPrefix(_:)(v15);
    swift_bridgeObjectRelease(v14);
    if ((v12 & 1) == 0)
      return 0;
  }
  v16 = (void *)objc_opt_self(REMCDAccount);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "cloudKitAccountWithCKIdentifier:context:", v17, a4);

  if (!v18)
    return 0;
  v19 = objc_msgSend(a1, "recordName");
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  v23 = objc_msgSend(v18, "ckIdentifierFromRecordName:", v19, v20);

  v24 = v23;
  if (!v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v26 = v25;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
  }
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v29 = v28;
  v30 = objc_msgSend(v18, "ckUserRecordName");
  if (v30)
  {
    v31 = v30;

    v24 = v31;
  }
  else
  {
    objc_msgSend(v18, "setCkUserRecordName:", v24);
  }

  v32 = objc_msgSend(v18, "ckUserRecordName");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

    if (v34 == v27 && v36 == v29)
    {
      swift_bridgeObjectRelease_n(v29, 2);
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v27, v29, 0);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v29);
      if ((v37 & 1) == 0)
      {
LABEL_18:

        return 0;
      }
    }
    result = swift_dynamicCastUnknownClass(v18, v4);
    if (result)
      return result;
    goto LABEL_18;
  }

  swift_bridgeObjectRelease(v29);
  return 0;
}

uint64_t static REMCDAccount.allCloudObjects(in:)(uint64_t a1)
{
  uint64_t v1;
  void *ObjCClassFromMetadata;
  id v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v4 = objc_msgSend(ObjCClassFromMetadata, "predicateForCloudKitAccountsWithKeyPathPrefix:", 0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(ObjCClassFromMetadata, "ic_objectsMatchingPredicate:sortDescriptors:propertiesToFetch:relationshipKeyPathsForPrefetching:context:", v4, 0, 0, isa, a1);

  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  v9 = sub_1001E081C(v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t static REMCDAccount.allCloudObjectIDs(in:)(uint64_t a1)
{
  uint64_t v1;
  void *ObjCClassFromMetadata;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v4 = objc_msgSend(ObjCClassFromMetadata, "predicateForCloudKitAccountsWithKeyPathPrefix:", 0);
  v5 = objc_msgSend(ObjCClassFromMetadata, "ic_objectIDsMatchingPredicate:context:", v4, a1);
  v6 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  return v7;
}

void static REMCDAccount.newCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  double v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  id v28;
  NSString v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v14 = sub_10001AAA8(v10, (uint64_t)qword_100850710);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n(a3, 2);
  v15 = a1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v35 = v17;
    v36 = v11;
    v37 = v5;
    v38 = a4;
    v18 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v40 = v34;
    *(_DWORD *)v18 = 136446466;
    swift_bridgeObjectRetain(a3);
    v39 = sub_10001A820(a2, a3, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    *(_QWORD *)&v19 = swift_bridgeObjectRelease_n(a3, 3).n128_u64[0];
    *(_WORD *)(v18 + 12) = 2082;
    v20 = objc_msgSend(v15, "ic_loggingDescription", v19);
    v21 = v15;
    if (!v20)
    {

      __break(1u);
      return;
    }
    v22 = v20;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v25 = v24;

    v39 = sub_10001A820(v23, v25, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v35, "We aren't supposed to call REMCDAccount.newCloudObject(for:accountID:context:) on sync down, as CloudKit accounts creation is always managed internally by RDAccountUtils {accountID: %{public}s, recordID: %{public}s}", (uint8_t *)v18, 0x16u);
    v26 = v34;
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v10);
    v5 = v37;
    a4 = v38;
    v15 = v21;
  }
  else
  {

    v27 = swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v27);
  }
  v28 = objc_msgSend(v15, "recordID");
  v29 = objc_msgSend(v28, "recordName");

  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "newObjectWithCKRecordName:context:account:", v29, a4, 0);

  if (v30)
  {
    v31 = objc_msgSend(v30, "ckIdentifier");
    if (v31)
    {
      v32 = v31;
      objc_msgSend(v30, "mergeDataFromRecord:accountID:", v15, v31);

      objc_msgSend(v30, "setCkServerRecord:", v15);
      objc_msgSend(v30, "setInCloud:", 1);
    }
    else
    {

    }
  }
}

id sub_1005920F8()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = (id)sub_10059237C();
  if (!v1)
  {
    v2 = sub_100437E08(0xD000000000000018, 0x80000001006F4290);
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(objc_allocWithZone((Class)NSOrderedSet), "init");
      v1 = objc_msgSend(objc_allocWithZone((Class)REMCRMergeableOrderedSet), "initWithReplicaIDSource:orderedSet:", v3, v4);

    }
    else
    {
      if (qword_100837908 != -1)
        swift_once(&qword_100837908, sub_100591118);
      v5 = type metadata accessor for Logger(0);
      sub_10001AAA8(v5, (uint64_t)qword_100850710);
      v6 = v0;
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = swift_slowAlloc(22, -1);
        v10 = (_QWORD *)swift_slowAlloc(8, -1);
        v11 = swift_slowAlloc(32, -1);
        v16 = v11;
        *(_DWORD *)v9 = 136446466;
        v15 = sub_10001A820(0xD000000000000018, 0x80000001006F4290, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
        *(_WORD *)(v9 + 12) = 2112;
        v15 = (uint64_t)v6;
        v12 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
        *v10 = v6;

        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to create new listIDsMergeableOrdering because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v9, 0x16u);
        v13 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v10, 1, v13);
        swift_slowDealloc(v10, -1, -1);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v9, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v1;
}

uint64_t sub_10059237C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100850710);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(v2, "remObjectID");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "description");

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

    }
    else
    {
      v12 = 0xE300000000000000;
      v10 = 7104878;
    }
    v20 = sub_10001A820(v10, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);

    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deserializing listIDsMergeableOrdering from cdAccount listIDsMergeableOrdering data {recordID: %s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v13 = objc_msgSend(v2, "listIDsMergeableOrdering");
  if (v13)
  {
    v14 = v13;
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xF000000000000000;
  }
  v18 = sub_1002FB01C(v15, v17, 0xD000000000000018, 0x80000001006F4290);
  sub_1000A71B4(v15, v17);
  return v18;
}

Swift::Void __swiftcall REMCDAccount.sortChildrenObjects()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100850710);
  v12 = v0;
  v2 = Logger.logObject.getter(v12);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v14 = v5;
    *(_DWORD *)v4 = 136446210;
    v6 = objc_msgSend(v12, "remObjectID");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "description");

      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

    }
    else
    {
      v11 = 0xE300000000000000;
      v9 = 7104878;
    }
    v13 = sub_10001A820(v9, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "REMCDAccount.sortChildrenObjects() Not expected to be called practically {account: %{public}s}", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Bool __swiftcall REMCDAccount.mergeMigrationState(fromRecord:)(CKRecord fromRecord)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  unsigned int v49;
  id v50;
  id v51;
  NSString v52;
  id v53;
  id v54;
  NSString v55;
  id v56;
  id v57;
  NSString v58;
  NSObject *v59;
  NSString v60;
  NSObject *v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  id v65;
  NSObject *v66;
  id v67;
  NSObject *v68;
  id v69;
  id v70;
  id v71;
  NSObject *v72;
  NSObject *v73;
  int v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  unsigned int v87;
  os_log_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  NSObject *v92;
  double v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  os_log_t v98;
  __n128 v99;
  uint64_t v100;
  unint64_t v101;
  NSObject *v102;
  os_log_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  NSObject *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  uint64_t v119;
  os_log_t v120;
  os_log_t v121;
  double v122;
  unsigned int v123;
  unsigned int v124;
  os_log_t v125;
  id v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  id v132;
  char v133;
  char v134;
  char v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  os_log_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  os_log_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  os_log_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  int v154;
  os_log_t v155;
  NSObject *v156;
  NSObject *v157;
  NSObject *v158;
  os_log_t v159;
  uint64_t v160;
  id v161;
  id v162;
  void (*v163)(char *, _QWORD, uint64_t, uint64_t);
  char *v164;
  char *v165;
  int v166;
  uint64_t v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  char *v169;
  uint64_t v170;
  os_log_t v171;
  uint64_t v172[3];
  _BYTE v173[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v151 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v151 - v15;
  *(_QWORD *)&v18 = __chkstk_darwin(v17).n128_u64[0];
  v20 = (char *)&v151 - v19;
  v21 = objc_msgSend(v2, "identifier", v18);
  if (v21)
  {
    v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v23(v16, 0, 1, v4);
  }
  else
  {
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v23(v16, 1, 1, v4);
  }
  v169 = v10;
  sub_1000F2CE4((uint64_t)v16, (uint64_t)v20);
  v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v168(v20, 1, v4))
  {
    v167 = 7104878;
    v24 = sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C80);
    v25 = 0xE300000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v20, v4);
    v26 = sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C80);
    v167 = UUID.uuidString.getter(v26);
    v25 = v27;
    v24 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v28 = CKRecord.recordType.getter(v24);
  if (v28 == 0x746E756F636341 && v29 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v30 = 1;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 0x746E756F636341, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
  }
  v173[0] = 0;
  v31 = CKRecord.subscript.getter(0xD000000000000012, 0x80000001007043B0);
  if (v31
    && (v172[0] = v31,
        v32 = sub_10001A630(&qword_1008398E0),
        (swift_dynamicCast(&v171, v172, v32, &type metadata for Bool, 6) & 1) != 0))
  {
    v33 = v171;
  }
  else
  {
    if ((v30 & 1) != 0)
      goto LABEL_18;
    v33 = 0;
  }
  v34 = objc_msgSend(v2, "didChooseToMigrate");
  v173[0] = v33 ^ v34;
  if ((v33 ^ v34) == 1)
    objc_msgSend(v2, "setDidChooseToMigrate:", v33);
LABEL_18:
  v35 = CKRecord.subscript.getter(0xD000000000000012, 0x8000000100704390);
  if (!v35
    || (v172[0] = v35,
        v36 = sub_10001A630(&qword_1008398E0),
        (swift_dynamicCast(&v171, v172, v36, &type metadata for Bool, 6) & 1) == 0))
  {
    if ((v30 & 1) == 0 && (objc_msgSend(v2, "didFinishMigration") & 1) != 0)
      goto LABEL_25;
LABEL_31:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = swift_beginAccess(v173, v172, 0, 0).n128_u64[0];
    v49 = 0;
    v40 = (uint64_t)v169;
    if (v173[0] != 1)
      return v49;
    goto LABEL_58;
  }
  v37 = v171;
  if (v37 == objc_msgSend(v2, "didFinishMigration"))
    goto LABEL_31;
  if ((v37 & 1) != 0)
  {
    v166 = v30;
    *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
    v39 = 1;
    v40 = (uint64_t)v169;
    goto LABEL_55;
  }
LABEL_25:
  v164 = v13;
  v165 = v7;
  v163 = v23;
  v166 = v30;
  if (v173[0] == 1 && (objc_msgSend(v2, "didChooseToMigrate") & 1) == 0)
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v81 = type metadata accessor for Logger(0);
    sub_10001AAA8(v81, (uint64_t)qword_100850710);
    LODWORD(v161) = v173[0];
    v82 = v2;
    swift_bridgeObjectRetain(v25);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.default.getter(v84);
    LODWORD(v162) = v85;
    if (os_log_type_enabled(v84, v85))
    {
      v86 = swift_slowAlloc(30, -1);
      v160 = swift_slowAlloc(32, -1);
      v172[0] = v160;
      *(_DWORD *)v86 = 67109890;
      LODWORD(v171) = v166 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4);
      *(_WORD *)(v86 + 8) = 2082;
      v159 = v84;
      swift_bridgeObjectRetain(v25);
      v171 = (os_log_t)sub_10001A820(v167, v25, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
      swift_bridgeObjectRelease_n(v25, 3);
      *(_WORD *)(v86 + 18) = 1024;
      LODWORD(v171) = (_DWORD)v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4);
      *(_WORD *)(v86 + 24) = 1024;
      v87 = objc_msgSend(v82, "didChooseToMigrate");

      LODWORD(v171) = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4);

      v88 = v159;
      _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v162, "mergeMigrationState(fromRecord:) - Toggling didFinishMigration->FALSE {isAccountRecord: %{BOOL}d, accountID: %{public}s, didChooseToMigrateChanged: %{BOOL}d, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v86, 0x1Eu);
      v167 = 1;
      v89 = v160;
      swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
      v167 = 1;
    }
  }
  else
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v41 = type metadata accessor for Logger(0);
    sub_10001AAA8(v41, (uint64_t)qword_100850710);
    swift_bridgeObjectRetain(v25);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(18, -1);
      v46 = swift_slowAlloc(32, -1);
      v172[0] = v46;
      *(_DWORD *)v45 = 67109378;
      LODWORD(v171) = v166 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4);
      *(_WORD *)(v45 + 8) = 2082;
      swift_bridgeObjectRetain(v25);
      v171 = (os_log_t)sub_10001A820(v167, v25, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "ERROR mergeMigrationState(fromRecord:) - Trying to merge account record that toggles didFinishMigration->FALSE after finishing migration {isAccountRecord: %{BOOL}d, accountID: %{public}s}", (uint8_t *)v45, 0x12u);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

      *(_QWORD *)&v47 = swift_bridgeObjectRelease_n(v25, 2).n128_u64[0];
    }
    v167 = 0;
  }
  v50 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", fromRecord.super.isa, v47);
  v162 = v50;
  if (v50)
  {
    v51 = v50;
    v52 = String._bridgeToObjectiveC()();
    v53 = objc_msgSend(v51, "getTokenForKey:", v52);

    v54 = v51;
    v55 = String._bridgeToObjectiveC()();
    v56 = objc_msgSend(v54, "getTokenForKey:", v55);

  }
  else
  {
    v56 = 0;
    v53 = 0;
  }
  v57 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
  v58 = String._bridgeToObjectiveC()();
  v59 = objc_msgSend(v57, "getTokenForKey:", v58);

  v60 = String._bridgeToObjectiveC()();
  v161 = v57;
  v61 = objc_msgSend(v57, "getTokenForKey:", v60);

  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v62 = type metadata accessor for Logger(0);
  sub_10001AAA8(v62, (uint64_t)qword_100850710);
  v160 = (uint64_t)v56;
  v63 = v56;
  v157 = v61;
  v64 = v61;
  v65 = v53;
  v159 = v59;
  v66 = v59;
  v67 = v63;
  v68 = v64;
  v69 = v65;
  v70 = v53;
  v71 = v69;
  v72 = v66;
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  if (os_log_type_enabled(v73, (os_log_type_t)v74))
  {
    v154 = v74;
    v155 = v73;
    v158 = v72;
    v75 = swift_slowAlloc(42, -1);
    v153 = swift_slowAlloc(128, -1);
    v172[0] = v153;
    *(_DWORD *)v75 = 136315906;
    v156 = v68;
    if (v70)
    {
      v76 = objc_msgSend(v71, "debugDescription");
      v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      v79 = v78;

    }
    else
    {
      v79 = 0xE300000000000000;
      v77 = 7104878;
    }
    v171 = (os_log_t)sub_10001A820(v77, v79, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);

    v152 = v71;
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    v171 = v159;
    v159 = (os_log_t)sub_10001A630((uint64_t *)&unk_100850730);
    v90 = ((uint64_t (*)(void))Optional.debugDescription.getter)();
    v171 = (os_log_t)sub_10001A820(v90, v91, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
    v92 = v158;

    *(_QWORD *)&v93 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v75 + 22) = 2080;
    if (v160)
    {
      v94 = objc_msgSend(v67, "debugDescription", v93);
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      v97 = v96;

      v98 = v157;
    }
    else
    {
      v97 = 0xE300000000000000;
      v98 = v157;
      v95 = 7104878;
    }
    v171 = (os_log_t)sub_10001A820(v95, v97, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);

    v99 = swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 32) = 2080;
    v171 = v98;
    v100 = Optional.debugDescription.getter(v159, v99);
    v171 = (os_log_t)sub_10001A820(v100, v101, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
    v102 = v156;

    swift_bridgeObjectRelease();
    v103 = v155;
    _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v154, "mergeMigrationState(fromRecord:) - Printing resolution tokens for debugging upon toggling didFinishMigration->FALSE - {didChooseToMigrate: (record=%s, CD=%s), didFinishMigration: (record=%s, CD=%s)}", (uint8_t *)v75, 0x2Au);
    v104 = v153;
    swift_arrayDestroy(v153, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    v80 = v161;
  }
  else
  {

    v80 = v162;
  }

  v23 = v163;
  v13 = v164;
  v40 = (uint64_t)v169;
  v7 = v165;
  if ((v167 & 1) == 0)
    goto LABEL_57;
  v39 = 0;
LABEL_55:
  objc_msgSend(v2, "setDidFinishMigration:", v39, v38);
  if (!(v166 & 1 | ((v39 & 1) == 0)))
    objc_msgSend(v2, "setCkNeedsInitialFetchFromCloud:", 1);
LABEL_57:
  v49 = objc_msgSend(v2, "didFinishMigration");
  *(_QWORD *)&v48 = swift_beginAccess(v173, v172, 0, 0).n128_u64[0];
LABEL_58:
  v105 = objc_msgSend(v2, "identifier", v48);
  if (v105)
  {
    v106 = v105;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

    v107 = 0;
  }
  else
  {
    v107 = 1;
  }
  v23((char *)v40, v107, 1, v4);
  sub_1000F2CE4(v40, (uint64_t)v13);
  if (v168(v13, 1, v4))
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
    v109 = sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    v110 = UUID.uuidString.getter(v109);
    v112 = v111;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v113 = type metadata accessor for Logger(0);
    sub_10001AAA8(v113, (uint64_t)qword_100850710);
    v114 = v2;
    swift_bridgeObjectRetain_n(v112, 2);
    v115 = v114;
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.default.getter(v116);
    v118 = os_log_type_enabled(v116, v117);
    v169 = (char *)v110;
    if (v118)
    {
      v119 = swift_slowAlloc(24, -1);
      v120 = (os_log_t)swift_slowAlloc(32, -1);
      LODWORD(v168) = v49;
      v121 = v120;
      v171 = v120;
      *(_DWORD *)v119 = 136446722;
      swift_bridgeObjectRetain(v112);
      v170 = sub_10001A820(v110, v112, (uint64_t *)&v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
      *(_QWORD *)&v122 = swift_bridgeObjectRelease_n(v112, 3).n128_u64[0];
      *(_WORD *)(v119 + 12) = 1024;
      v123 = objc_msgSend(v115, "didChooseToMigrate", v122);

      LODWORD(v170) = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, (char *)&v170 + 4);

      *(_WORD *)(v119 + 18) = 1024;
      v124 = objc_msgSend(v115, "didFinishMigration");

      LODWORD(v170) = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, (char *)&v170 + 4);

      _os_log_impl((void *)&_mh_execute_header, v116, v117, "Migration state did change {accountID: %{public}s, didChooseMigration: %{BOOL}d, didFinishMigration: %{BOOL}d}", (uint8_t *)v119, 0x18u);
      swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
      v125 = v121;
      v49 = v168;
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v119, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v112, 2);
    }
    v126 = objc_msgSend(v115, "storeControllerManagedObjectContext");
    if (v126
      && (v127 = v126,
          v128 = objc_msgSend(v126, "storeController"),
          v127,
          v128))
    {
      v129 = objc_msgSend(v128, "cloudContext");
      if (v129)
      {
        v130 = v129;
        LODWORD(v168) = v49;
        objc_msgSend(v129, "migrationStateDidChange:didFinishMigration:", objc_msgSend(v115, "didChooseToMigrate"), objc_msgSend(v115, "didFinishMigration"));
        v131 = objc_msgSend(v128, "accountUtils");
        if (v131)
        {
          v132 = v131;
          v133 = objc_msgSend(v115, "didChooseToMigrate");
          v134 = objc_msgSend(v115, "didFinishMigration");
          v135 = v173[0];
          if (qword_100836F28 != -1)
            swift_once(&qword_100836F28, sub_1001BA8F8);
          sub_100546138((uint64_t)v169, v112, v133, v134, v135, (void *)qword_100871CE8, (uint64_t)sub_100593CC0, 0);
          swift_bridgeObjectRelease();

          swift_release(v132);
          LOBYTE(v49) = (_BYTE)v168;
        }
        else
        {
          swift_bridgeObjectRetain(v112);
          v147 = Logger.logObject.getter(v146);
          v148 = static os_log_type_t.error.getter(v147);
          if (os_log_type_enabled(v147, v148))
          {
            v149 = (uint8_t *)swift_slowAlloc(12, -1);
            v150 = (os_log_t)swift_slowAlloc(32, -1);
            v171 = v150;
            *(_DWORD *)v149 = 136446210;
            swift_bridgeObjectRetain(v112);
            v170 = sub_10001A820((uint64_t)v169, v112, (uint64_t *)&v171);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
            swift_bridgeObjectRelease_n(v112, 3);
            _os_log_impl((void *)&_mh_execute_header, v147, v148, "Missing account utils for processing migration state change {accountID: %{public}s}", v149, 0xCu);
            swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v150, -1, -1);
            swift_slowDealloc(v149, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v112, 2);
          }

          LOBYTE(v49) = (_BYTE)v168;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v112);
        v142 = Logger.logObject.getter(v141);
        v143 = static os_log_type_t.error.getter(v142);
        if (os_log_type_enabled(v142, v143))
        {
          v144 = (uint8_t *)swift_slowAlloc(12, -1);
          v145 = (os_log_t)swift_slowAlloc(32, -1);
          v171 = v145;
          *(_DWORD *)v144 = 136446210;
          swift_bridgeObjectRetain(v112);
          v170 = sub_10001A820((uint64_t)v169, v112, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
          swift_bridgeObjectRelease_n(v112, 3);
          _os_log_impl((void *)&_mh_execute_header, v142, v143, "Missing cloud context for processing migration state change {accountID: %{public}s}", v144, 0xCu);
          swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v145, -1, -1);
          swift_slowDealloc(v144, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v112, 2);
        }

      }
    }
    else
    {
      swift_bridgeObjectRetain(v112);
      v137 = Logger.logObject.getter(v136);
      v138 = static os_log_type_t.error.getter(v137);
      if (os_log_type_enabled(v137, v138))
      {
        v139 = (uint8_t *)swift_slowAlloc(12, -1);
        v140 = (os_log_t)swift_slowAlloc(32, -1);
        v171 = v140;
        *(_DWORD *)v139 = 136446210;
        swift_bridgeObjectRetain(v112);
        v170 = sub_10001A820((uint64_t)v169, v112, (uint64_t *)&v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
        swift_bridgeObjectRelease_n(v112, 3);
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "Missing store controller for processing migration state change {accountID: %{public}s}", v139, 0xCu);
        swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v139, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v112, 2);
      }
    }
  }
  return v49;
}

void sub_100593CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;

  if (a1)
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_100850710);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v17 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v16, v15);
      v7 = Error.localizedDescription.getter(v15[1], v15[2]);
      v14 = sub_10001A820(v7, v8, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to process migration state change after merging CK user record {error: %s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_100850710);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.info.getter(oslog);
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Succesfully processed migration state change after merging CK user record", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

Swift::Void __swiftcall REMCDAccount.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  NSString v5;
  id v6;
  NSString v7;
  double v8;
  NSString v9;
  double v10;
  id v11;
  objc_class *v12;
  objc_super v13;

  v3 = v2;
  swift_getObjectType();
  v5 = String._bridgeToObjectiveC()();
  v13.receiver = v3;
  v13.super_class = (Class)REMCDAccount;
  objc_msgSendSuper2(&v13, "mergeDataFromRecord:accountID:", from.super.isa, v5);

  v6 = -[objc_class recordID](from.super.isa, "recordID");
  v7 = objc_msgSend(v6, "recordName");

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v9 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v7, v8);

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v3, "setCkUserRecordName:", v9, v10);

  v11 = v3;
  v12 = from.super.isa;
  sub_100437CA0(v12, 0, 0, v11, v11, v12);
  if ((objc_msgSend(v11, "mergeMigrationStateFromRecord:", v12) & 1) != 0
    || objc_msgSend(v11, "ckNeedsInitialFetchFromCloud"))
  {
    sub_100595D88(0);
  }
}

void sub_100594128(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for REMFeatureFlags(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

void sub_1005941D4()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  double v24;
  Class isa;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;

  v2 = *(void **)(v1 - 304);
  sub_10043F934(v0, 0xD000000000000018, 0x8000000100702110, 0xD00000000000001DLL, 0x80000001007020F0, 0, (_OWORD *)(v1 - 224));
  *(_QWORD *)(v1 - 320) = *(_QWORD *)(v1 - 224);
  *(_QWORD *)(v1 - 312) = *(_QWORD *)(v1 - 216);
  if (objc_msgSend(v2, "didChooseToMigrate")
    && objc_msgSend(v2, "didFinishMigration")
    && (objc_msgSend(v2, "ckNeedsInitialFetchFromCloud") & 1) == 0
    && (v3 = objc_msgSend(v2, "listIDsMergeableOrdering")) != 0)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_100850710);
  v9 = v0;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    *(_QWORD *)(v1 - 328) = v5;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 - 224) = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v1 - 336) = v12 + 4;
    v14 = objc_msgSend(v9, "recordID");
    v15 = objc_msgSend(v14, "ckShortDescription");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v2 = *(void **)(v1 - 304);
    *(_QWORD *)(v1 - 256) = sub_10001A820(v16, v18, (uint64_t *)(v1 - 224));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 256, v1 - 248);

    v5 = *(_QWORD *)(v1 - 328);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Deserializing listIDsMergeableOrdering from account record listIDsMergeableOrdering data {recordID: %s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v19 = sub_10043F114((_QWORD *)(v1 - 224), v5, v7, *(_QWORD *)(v1 - 320), *(_QWORD *)(v1 - 312), 0xD000000000000018, 0x80000001006F4290, v2);
  v21 = v19;
  v22 = v20;
  v23 = *(void **)(v1 - 224);
  if (!v23)
    v23 = (void *)sub_1002FB01C(v19, v20, 0xD000000000000018, 0x80000001006F4290);
  *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
  if (v22 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    sub_1000A70E4(v21, v22);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(v21, v22);
  }
  objc_msgSend(v2, "setListIDsMergeableOrdering:", isa, v24);

  if (v23)
  {
    v26 = v23;
    sub_100598AD8(v26);
    v28 = v27;
    sub_100599678(v26);
    v30 = v29;
    if (v28)
    {
      if (v29)
      {
        v28 = v28;
        v31 = v5;
        v32 = (void *)sub_10059D3EC();
        sub_10059A414(v28, v32, v26);

        v5 = v31;
      }
    }
    else
    {
      v28 = v29;
    }

    sub_1000A71B4(v21, v22);
    sub_1000A71B4(v5, v7);
    sub_1000A71B4(*(_QWORD *)(v1 - 320), *(_QWORD *)(v1 - 312));

  }
  else
  {
    sub_1000A71B4(v21, v22);
    sub_1000A71B4(v5, v7);
    sub_1000A71B4(*(_QWORD *)(v1 - 320), *(_QWORD *)(v1 - 312));
  }
  sub_1005941B4();
}

void sub_100595D88(int a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  __n128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  id v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = type metadata accessor for NSFastEnumerationIterator(0);
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v5 = __chkstk_darwin(v3).n128_u64[0];
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, "lists", v5);
  if (v8)
  {
    v10 = v8;
    v20 = v3;
    v21 = a1;
    v22 = v1;
    v27 = (uint64_t)_swiftEmptyArrayStorage;
    v11 = NSOrderedSet.makeIterator()(v9);
    NSFastEnumerationIterator.next()(v11);
    while (v26)
    {
      sub_10001A6CC(&v25, v24);
      v13 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v12 = swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v13, 6);
      if ((v12 & 1) != 0)
      {
        v14 = v23;
        if ((objc_msgSend(v23, "markedForDeletion") & 1) != 0)
        {

        }
        else
        {
          v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v16 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v17 >= v16 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
          specialized Array._endMutation()(v18);

        }
      }
      NSFastEnumerationIterator.next()(v12);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v20);
    sub_1005903B4(v27, v21 & 1);
    swift_bridgeObjectRelease();

  }
}

void sub_100595FD0(void *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(*a2);
    for (i = 0; i != v6; ++i)
    {
      v8 = *(_QWORD *)(v5 + 8 * i + 32);

    }
    swift_bridgeObjectRelease(v5);
  }
  v9 = *a3;
  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_7;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    return;
  }
  if (v9 < 0)
    v15 = v9;
  else
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!v10)
    goto LABEL_17;
LABEL_7:
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
      else
        v12 = *(id *)(v9 + 8 * v11 + 32);
      v13 = v12;
      ++v11;
      v14 = objc_msgSend(a1, "addObject:", v12);

    }
    while (v10 != v11);
    goto LABEL_17;
  }
  __break(1u);
}

void sub_100596110(void *a1)
{
  void *v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t *v43;
  uint64_t v44;
  char **v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  void *v78;
  Class isa;
  double v80;
  id v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t ObjectType;
  uint64_t v102;
  char *v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  void *v121;
  _QWORD v122[5];

  v3 = type metadata accessor for String.Encoding(0);
  *(_QWORD *)&v4 = __chkstk_darwin(v3).n128_u64[0];
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "ckSharedObjectOwnerNames", v4);
  if (!v7)
  {
    v19 = objc_msgSend(a1, "encryptedValues");
    v116 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", 0);
    swift_unknownObjectRelease(v19);

    return;
  }
  v8 = v7;
  v103 = v6;
  v104 = a1;
  v9 = sub_1000151B0(0, &qword_100850760, &off_1007D6738);
  v10 = sub_1000E51DC(&qword_100850768, &qword_100850760, &off_1007D6738, (uint64_t)&protocol conformance descriptor for NSObject);
  v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);

  v108 = v9;
  if ((v11 & 0xC000000000000001) != 0)
  {
    if (v11 < 0)
      v14 = v11;
    else
      v14 = v11 & 0xFFFFFFFFFFFFFF8;
    v15 = __CocoaSet.makeIterator()(v14);
    v12 = Set.Iterator.init(_cocoa:)(v122, v15, v9, v10);
    v11 = v122[0];
    v114 = v122[1];
    v16 = v122[2];
    v17 = v122[3];
    v18 = v122[4];
  }
  else
  {
    v17 = 0;
    v20 = -1 << *(_BYTE *)(v11 + 32);
    v21 = *(_QWORD *)(v11 + 56);
    v114 = v11 + 56;
    v16 = ~v20;
    v22 = -v20;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    else
      v23 = -1;
    v18 = v23 & v21;
  }
  v109 = v11 & 0x7FFFFFFFFFFFFFFFLL;
  v105 = v16;
  v106 = _swiftEmptyDictionarySingleton;
  v110 = (unint64_t)(v16 + 64) >> 6;
  v24 = &selRef_isConcealed;
  v25 = &qword_100837000;
  *(_QWORD *)&v13 = 136315394;
  v112 = v13;
  v111 = (char *)&type metadata for Any + 8;
  v107 = (char *)&type metadata for Swift.AnyObject + 8;
  v113 = v11;
  while (2)
  {
    v26 = v17;
    if (v11 < 0)
    {
LABEL_16:
      v27 = __CocoaSet.Iterator.next()(v12);
      if (v27)
      {
        v8 = (_QWORD *)v27;
        v117 = v27;
        swift_unknownObjectRetain(v27);
        swift_dynamicCast(&v119, &v117, v107, v108, 7);
        v28 = (id)v119;
        swift_unknownObjectRelease(v8);
        v29 = v26;
        v116 = (id)v18;
        if (v28)
          goto LABEL_36;
      }
LABEL_61:
      sub_1000C6560(v11);
      v78 = (void *)objc_opt_self(NSJSONSerialization);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v80 = swift_bridgeObjectRelease().n128_u64[0];
      *(_QWORD *)&v119 = 0;
      v81 = objc_msgSend(v78, "dataWithJSONObject:options:error:", isa, 0, &v119, v80);

      v82 = (id)v119;
      if (v81)
      {
        v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
        v85 = v84;

        v86 = objc_msgSend(v104, "encryptedValues");
        v87 = v103;
        static String.Encoding.utf8.getter();
        v88 = String.init(data:encoding:)(v83, v85, v87);
        if (v89)
        {
          *((_QWORD *)&v120 + 1) = &type metadata for String;
          v121 = &protocol witness table for String;
          *(_QWORD *)&v119 = v88;
          *((_QWORD *)&v119 + 1) = v89;
        }
        else
        {
          v121 = 0;
          v119 = 0u;
          v120 = 0u;
        }
        ObjectType = swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter(&v119, 0xD000000000000019, 0x8000000100708800, ObjectType);
        swift_unknownObjectRelease(v86);
        sub_1000A71C8(v83, v85);
        return;
      }
      v90 = v82;
      v8 = (_QWORD *)_convertNSErrorToError(_:)(v82);

      swift_willThrow(v91);
      if (v25[289] == -1)
      {
LABEL_65:
        v92 = type metadata accessor for Logger(0);
        sub_10001AAA8(v92, (uint64_t)qword_100850710);
        swift_errorRetain(v8);
        v93 = swift_errorRetain(v8);
        v94 = Logger.logObject.getter(v93);
        v95 = static os_log_type_t.error.getter(v94);
        if (os_log_type_enabled(v94, v95))
        {
          v96 = (uint8_t *)swift_slowAlloc(12, -1);
          v97 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v119 = v97;
          *(_DWORD *)v96 = 136315138;
          v117 = (uint64_t)v8;
          swift_errorRetain(v8);
          v98 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v99 = String.init<A>(describing:)(&v117, v98);
          v117 = sub_10001A820(v99, v100, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118);
          swift_bridgeObjectRelease();
          swift_errorRelease(v8);
          swift_errorRelease(v8);
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed to encode ckSharedObjectOwnerNames in JSON {error: %s}", v96, 0xCu);
          swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v97, -1, -1);
          swift_slowDealloc(v96, -1, -1);

          swift_errorRelease(v8);
        }
        else
        {
          swift_errorRelease(v8);
          swift_errorRelease(v8);
          swift_errorRelease(v8);

        }
        return;
      }
LABEL_71:
      swift_once(&qword_100837908, sub_100591118);
      goto LABEL_65;
    }
    while (1)
    {
      if (v18)
      {
        v116 = (id)((v18 - 1) & v18);
        v30 = __clz(__rbit64(v18)) | (v26 << 6);
        v29 = v26;
      }
      else
      {
        v31 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_71;
        }
        if (v31 >= v110)
          goto LABEL_61;
        v32 = *(_QWORD *)(v114 + 8 * v31);
        v29 = v26 + 1;
        if (!v32)
        {
          v29 = v26 + 2;
          if (v26 + 2 >= v110)
            goto LABEL_61;
          v32 = *(_QWORD *)(v114 + 8 * v29);
          if (!v32)
          {
            v29 = v26 + 3;
            if (v26 + 3 >= v110)
              goto LABEL_61;
            v32 = *(_QWORD *)(v114 + 8 * v29);
            if (!v32)
            {
              v29 = v26 + 4;
              if (v26 + 4 >= v110)
                goto LABEL_61;
              v32 = *(_QWORD *)(v114 + 8 * v29);
              if (!v32)
              {
                v33 = v26 + 5;
                do
                {
                  if (v110 == v33)
                    goto LABEL_61;
                  v32 = *(_QWORD *)(v114 + 8 * v33++);
                }
                while (!v32);
                v29 = v33 - 1;
              }
            }
          }
        }
        v116 = (id)((v32 - 1) & v32);
        v30 = __clz(__rbit64(v32)) + (v29 << 6);
      }
      v28 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v30);
      if (!v28)
        goto LABEL_61;
LABEL_36:
      v34 = objc_msgSend(v28, v24[254]);
      if (v34)
        break;
LABEL_39:
      if (v25[289] != -1)
        swift_once(&qword_100837908, sub_100591118);
      v39 = type metadata accessor for Logger(0);
      sub_10001AAA8(v39, (uint64_t)qword_100850710);
      v40 = v28;
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v115 = v29;
        v43 = v25;
        v44 = swift_slowAlloc(22, -1);
        v8 = (_QWORD *)swift_slowAlloc(64, -1);
        *(_QWORD *)&v119 = v8;
        *(_DWORD *)v44 = v112;
        v45 = v24;
        v46 = objc_msgSend(v40, v24[254]);
        if (v46)
        {
          v47 = v46;
          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          v50 = v49;

        }
        else
        {
          v50 = 0xE300000000000000;
          v48 = 7104878;
        }
        *(_QWORD *)(v44 + 4) = sub_10001A820(v48, v50, (uint64_t *)&v119);

        *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v44 + 12) = 2080;
        v52 = objc_msgSend(v40, "ownerName", v51);
        if (v52)
        {
          v53 = v52;
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v56 = v55;

        }
        else
        {
          v56 = 0xE300000000000000;
          v54 = 7104878;
        }
        v25 = v43;
        *(_QWORD *)(v44 + 14) = sub_10001A820(v54, v56, (uint64_t *)&v119);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid ckSharedObjectOwnerName entry {objectIdentifier: %s, ownerName: %s}", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy(v8, 2, v111);
        swift_slowDealloc(v8, -1, -1);
        swift_slowDealloc(v44, -1, -1);

        v26 = v115;
        v18 = (unint64_t)v116;
        v11 = v113;
        v24 = v45;
        if (v113 < 0)
          goto LABEL_16;
      }
      else
      {

        v26 = v29;
        v18 = (unint64_t)v116;
        if (v11 < 0)
          goto LABEL_16;
      }
    }
    v35 = v34;
    v8 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    v38 = objc_msgSend(v28, "ownerName");
    if (!v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    v57 = v38;
    v115 = v29;
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v59 = v58;

    v60 = v106;
    swift_isUniquelyReferenced_nonNull_native(v106);
    v62 = v61;
    *(_QWORD *)&v119 = v60;
    v64 = sub_10001A6DC((uint64_t)v8, v37);
    v65 = v60[2];
    v66 = (v63 & 1) == 0;
    v67 = v65 + v66;
    if (__OFADD__(v65, v66))
    {
      __break(1u);
LABEL_73:
      __break(1u);
    }
    v68 = v63;
    if (v60[3] >= v67)
    {
      if ((v62 & 1) == 0)
        sub_1002D6574();
LABEL_56:
      v17 = v115;
      v71 = v102;
      v72 = (_QWORD *)v119;
      v106 = (_QWORD *)v119;
      if ((v68 & 1) != 0)
      {
        v8 = (_QWORD *)(*(_QWORD *)(v119 + 56) + 16 * v64);
        swift_bridgeObjectRelease();
        *v8 = v71;
        v8[1] = v59;
      }
      else
      {
        *(_QWORD *)(v119 + 8 * (v64 >> 6) + 64) |= 1 << v64;
        v73 = (_QWORD *)(v72[6] + 16 * v64);
        *v73 = v8;
        v73[1] = v37;
        v74 = (uint64_t *)(v72[7] + 16 * v64);
        *v74 = v71;
        v74[1] = v59;
        v75 = v72[2];
        v76 = __OFADD__(v75, 1);
        v77 = v75 + 1;
        if (v76)
          goto LABEL_73;
        v72[2] = v77;
        swift_bridgeObjectRetain(v37);
      }
      v24 = &selRef_isConcealed;
      v18 = (unint64_t)v116;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  sub_1002CCF14(v67, v62);
  v69 = sub_10001A6DC((uint64_t)v8, v37);
  if ((v68 & 1) == (v70 & 1))
  {
    v64 = v69;
    goto LABEL_56;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

CKRecord_optional __swiftcall REMCDAccount.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  Swift::Bool v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t (*v25)(char *, _QWORD, uint64_t);
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  Class isa;
  id v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_class *v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  objc_super v71;
  CKRecord_optional result;

  v1 = v0;
  v2 = type metadata accessor for REMFeatureFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (char *)&v66 - v8;
  v71.receiver = v0;
  v71.super_class = (Class)REMCDAccount;
  v11 = objc_msgSendSuper2(&v71, "newlyCreatedRecord", v7);
  if (v11)
  {
    v12 = objc_msgSend(v0, "listIDsMergeableOrdering");
    if (v12)
    {
      v13 = v12;
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      if (v16 >> 60 != 15)
        __asm { BR              X10 }
    }
    else
    {
      v14 = 0;
      v16 = 0xF000000000000000;
    }
    v67 = v5;
    sub_10044E6BC(v14, v16, 0, v11, 0xD000000000000018, 0x8000000100702110, 0xD00000000000001DLL, 0x80000001007020F0, 0, 1uLL);
    sub_1000A71B4(v14, v16);
    v17 = objc_msgSend(v11, "encryptedValues");
    v18 = objc_msgSend(v1, "personIDSalt");
    if (v18)
    {
      v19 = v18;
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v1;
      v23 = v22;

      *((_QWORD *)&v69 + 1) = &type metadata for Data;
      v70 = &protocol witness table for Data;
      *(_QWORD *)&v68 = v20;
      *((_QWORD *)&v68 + 1) = v23;
      v1 = v21;
    }
    else
    {
      v70 = 0;
      v68 = 0u;
      v69 = 0u;
    }
    ObjectType = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter(&v68, 0x44496E6F73726550, 0xEC000000746C6153, ObjectType);
    swift_unknownObjectRelease(v17);
    v25 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v26 = v25(v9, enum case for REMFeatureFlags.recentlyDeletedList(_:), v2);
    v27 = REMFeatureFlags.isEnabled.getter(v26);
    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v9, v2);
    if ((v27 & 1) != 0)
    {
      v29 = objc_msgSend(v1, "recentlyDeletedInfoAsData");
      if (v29)
      {
        v30 = v29;
        v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

        v34 = (void *)objc_opt_self(REMCDObject);
        sub_1000A70E4(v31, v33);
        v35 = v1;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v37 = objc_msgSend(v34, "assetForData:", isa);

        v1 = v35;
        CKRecord.subscript.setter(v37, 0xD000000000000019, 0x80000001007087C0);
        sub_1000A71C8(v31, v33);
        sub_1000A71C8(v31, v33);
      }
      else
      {
        CKRecord.subscript.setter(0, 0xD000000000000019, 0x80000001007087C0);
      }
      v38 = objc_msgSend(v11, "encryptedValues");
      v39 = objc_msgSend(v1, "recentlyDeletedInfoChecksum");
      if (v39)
      {
        v40 = v39;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v1;
        v44 = v43;

        *((_QWORD *)&v69 + 1) = &type metadata for String;
        v70 = &protocol witness table for String;
        *(_QWORD *)&v68 = v41;
        *((_QWORD *)&v68 + 1) = v44;
        v1 = v42;
      }
      else
      {
        v70 = 0;
        v68 = 0u;
        v69 = 0u;
      }
      v45 = swift_getObjectType();
      CKRecordKeyValueSetting.subscript.setter(&v68, 0xD00000000000001BLL, 0x8000000100704370, v45);
      swift_unknownObjectRelease(v38);
    }
    v46 = v67;
    v47 = v25(v67, enum case for REMFeatureFlags.groceryMultilingual(_:), v2);
    v48 = REMFeatureFlags.isEnabled.getter(v47);
    v28(v46, v2);
    if ((v48 & 1) != 0)
    {
      v49 = v25(v9, enum case for REMFeatureFlags.groceryMultilingualCloudKit(_:), v2);
      v50 = REMFeatureFlags.isEnabled.getter(v49);
      v28(v9, v2);
      if ((v50 & 1) != 0)
      {
        v51 = objc_msgSend(v11, "encryptedValues");
        v52 = objc_msgSend(v1, "secondaryGroceryLocalesInfoAsData");
        if (v52)
        {
          v53 = v52;
          v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v56 = v55;

          *((_QWORD *)&v69 + 1) = &type metadata for Data;
          v70 = &protocol witness table for Data;
          *(_QWORD *)&v68 = v54;
          *((_QWORD *)&v68 + 1) = v56;
        }
        else
        {
          v70 = 0;
          v68 = 0u;
          v69 = 0u;
        }
        v57 = swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter(&v68, 0xD000000000000021, 0x8000000100708790, v57);
        swift_unknownObjectRelease(v51);
        v58 = objc_msgSend(v11, "encryptedValues");
        v59 = objc_msgSend(v1, "secondaryGroceryLocalesInfoChecksum");
        if (v59)
        {
          v60 = v59;
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v63 = v62;

          *((_QWORD *)&v69 + 1) = &type metadata for String;
          v70 = &protocol witness table for String;
          *(_QWORD *)&v68 = v61;
          *((_QWORD *)&v68 + 1) = v63;
        }
        else
        {
          v70 = 0;
          v68 = 0u;
          v69 = 0u;
        }
        v64 = swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter(&v68, 0xD000000000000023, 0x8000000100704340, v64);
        swift_unknownObjectRelease(v58);
      }
    }
    sub_100596110(v11);
  }
  v65 = (objc_class *)v11;
  result.value.super.isa = v65;
  result.is_nil = v10;
  return result;
}

Swift::Bool __swiftcall REMCDAccount.needsToBePushedToCloud()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  objc_super v9;

  v1 = objc_msgSend(v0, "ckUserRecordName");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    *(_QWORD *)&v6 = swift_bridgeObjectRelease(v5).n128_u64[0];
    v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v7 = v3 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      LODWORD(v1) = objc_msgSend(v0, "didChooseToMigrate", v6);
      if ((_DWORD)v1)
      {
        LODWORD(v1) = objc_msgSend(v0, "didFinishMigration");
        if ((_DWORD)v1)
        {
          v9.receiver = v0;
          v9.super_class = (Class)REMCDAccount;
          LOBYTE(v1) = objc_msgSendSuper2(&v9, "needsToBePushedToCloud");
        }
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return (char)v1;
}

Swift::Void __swiftcall REMCDAccount.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  void *v84;
  uint8_t *v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  id v92;
  os_log_type_t v93;
  uint8_t *v94;
  _QWORD *v95;
  id v96;
  uint64_t v97;
  double v98;
  id v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  NSString v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t j;
  id v127;
  void *v128;
  id v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  NSString v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t i;
  id v144;
  void *v145;
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  NSString v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  id v181;
  void *v182;
  void *v183;
  void *v184;
  id v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  Class isa;
  id v193;
  id v194;
  id v195;
  NSString v196;
  id v197;
  id v198;
  void *v199;
  void *v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  unint64_t v206;
  uint64_t v207;
  id v208;
  id v209;
  uint64_t v210;
  id v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  id v220;
  uint64_t v221;
  _BYTE v222[16];
  uint64_t v223;
  char v224[16];
  uint64_t v225;
  _BYTE v226[16];
  _QWORD v227[2];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v219 = (char *)&v202 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v215 = (char *)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v202 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v202 - v11;
  __chkstk_darwin(v13);
  v217 = (uint64_t)&v202 - v14;
  __chkstk_darwin(v15);
  v213 = (char *)&v202 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v202 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v202 - v21;
  *(_QWORD *)&v24 = __chkstk_darwin(v23).n128_u64[0];
  v26 = (char *)&v202 - v25;
  v27 = objc_msgSend(v1, "remObjectID", v24);
  if (!v27)
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v71 = type metadata accessor for Logger(0);
    sub_10001AAA8(v71, (uint64_t)qword_100850710);
    v220 = v1;
    v72 = Logger.logObject.getter(v220);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = 7104878;
      v75 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(64, -1);
      v225 = v76;
      *(_DWORD *)v75 = 136446466;
      v77 = objc_msgSend(v220, "ckIdentifier");
      if (v77)
      {
        v78 = v77;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v81 = v80;

      }
      else
      {
        v81 = 0xE300000000000000;
        v79 = 7104878;
      }
      v221 = sub_10001A820(v79, v81, &v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v221, v222);

      *(_QWORD *)&v98 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v75 + 12) = 2082;
      v99 = objc_msgSend(v220, "externalIdentifier", v98);
      if (v99)
      {
        v100 = v99;
        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
        v102 = v101;

      }
      else
      {
        v102 = 0xE300000000000000;
      }
      v221 = sub_10001A820(v74, v102, &v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v221, v222);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no remObjectID (ckIdentifier: %{public}s, externalIdentifier: %{public}s).", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
      goto LABEL_132;
    }

    goto LABEL_36;
  }
  v28 = v27;
  v216 = v12;
  v29 = objc_msgSend(v1, "lists");
  if (!v29)
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v82 = type metadata accessor for Logger(0);
    sub_10001AAA8(v82, (uint64_t)qword_100850710);
    v220 = v28;
    v72 = Logger.logObject.getter(v220);
    v83 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v83))
    {
      v84 = v28;
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v85 = 138543362;
      v225 = (uint64_t)v220;
      v87 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226);
      *v86 = v84;

      _os_log_impl((void *)&_mh_execute_header, v72, v83, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has nil lists (accountID: %{public}@).", v85, 0xCu);
      v88 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v86, 1, v88);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);

LABEL_132:
      return;
    }

LABEL_36:
    return;
  }
  v30 = v29;
  v214 = v9;
  v209 = v28;
  v225 = (uint64_t)v29;
  v31 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v32 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v211 = v1;
  v33 = v32;
  v34 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v210 = v33;
  v35 = v33;
  v36 = v211;
  v37 = Sequence.elements<A>(ofType:)(v31, v35, v31, v34);

  v38 = objc_msgSend(v36, "listIDsMergeableOrdering");
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v90 = v209;
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v91 = type metadata accessor for Logger(0);
    sub_10001AAA8(v91, (uint64_t)qword_100850710);
    v92 = v90;
    v72 = Logger.logObject.getter(v92);
    v93 = static os_log_type_t.error.getter(v72);
    if (!os_log_type_enabled(v72, v93))
    {

      return;
    }
    v94 = (uint8_t *)swift_slowAlloc(12, -1);
    v95 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v94 = 138543362;
    v225 = (uint64_t)v92;
    v96 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226);
    *v95 = v90;

    _os_log_impl((void *)&_mh_execute_header, v72, v93, "MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no listIDsMergeableOrdering (accountID: %{public}@).", v94, 0xCu);
    v97 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v95, 1, v97);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v94, -1, -1);

    goto LABEL_132;
  }
  v39 = v38;
  v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v218 = v37;
  v41 = v40;
  v43 = v42;

  v44 = (void *)objc_opt_self(REMAccountStorage);
  v45 = v209;
  v46 = objc_msgSend(v44, "listIDsMergeableOrderingReplicaIDSourceWithAccountID:", v209);
  sub_1000A70E4(v41, v43);
  v202 = "smartListIDsToUndelete";
  v205 = v46;
  v47 = sub_10025F938(v41, v43, v46, 0xD000000000000018, 0x80000001006F4290, v45);
  v207 = v41;
  v206 = v43;
  sub_1000A71C8(v41, v43);
  v208 = v47;
  v48 = objc_msgSend(v47, "orderedSet");
  v225 = (uint64_t)v48;
  v203 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v204 = v34;
  v49 = Sequence.elements<A>(ofType:)(v203, v210, v203, v34);

  sub_10011FF90(v49);
  v51 = v50;
  swift_bridgeObjectRelease();
  v227[0] = v51;
  v52 = v218;
  v53 = _swiftEmptyArrayStorage;
  v225 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v218 >> 62)
  {
    if (v218 < 0)
      v103 = v218;
    else
      v103 = v218 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v218);
    v54 = _CocoaArrayWrapper.endIndex.getter(v103);
    v220 = (id)v54;
    if (v54)
      goto LABEL_6;
LABEL_47:
    swift_bridgeObjectRelease();
    v89 = _swiftEmptyArrayStorage;
    goto LABEL_48;
  }
  v54 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v218);
  v220 = (id)v54;
  if (!v54)
    goto LABEL_47;
LABEL_6:
  if (v54 < 1)
  {
    __break(1u);
    goto LABEL_84;
  }
  v55 = 0;
  v56 = v52 & 0xC000000000000001;
  v212 = v22;
  do
  {
    if (v56)
      v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v52);
    else
      v57 = *(id *)(v52 + 8 * (_QWORD)v55 + 32);
    v58 = v57;
    v59 = objc_msgSend(v57, "identifier");
    if (v59)
    {
      v60 = v59;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

      v61 = 0;
    }
    else
    {
      v61 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v22, v61, 1, v2);
    sub_1000F2CE4((uint64_t)v22, (uint64_t)v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v26, 1, v2))
    {
      sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);

    }
    else
    {
      v62 = v19;
      v63 = v56;
      v64 = v219;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v219, v26, v2);
      v65 = sub_10000882C((uint64_t)v26, (uint64_t *)&unk_100839C80);
      UUID.uuidString.getter(v65);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v64, v2);
      String.uppercased()();
      swift_bridgeObjectRelease();
      v66 = String._bridgeToObjectiveC()();

      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
      v69 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v68 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v69 >= v68 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1);
      v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v66);
      specialized Array._endMutation()(v70);
      v52 = v218;
      v56 = v63;
      v19 = v62;
      v22 = v212;
    }
    v55 = (char *)v55 + 1;
    v54 = (uint64_t)v220;
  }
  while (v220 != v55);
  swift_bridgeObjectRelease();
  v89 = (_QWORD *)v225;
  v53 = _swiftEmptyArrayStorage;
LABEL_48:
  sub_10059BCC8((uint64_t)v89);
  swift_bridgeObjectRelease();
  v225 = (uint64_t)_swiftEmptyArrayStorage;
  v104 = v210;
  if (!v54)
  {
    v121 = _swiftEmptyArrayStorage;
    goto LABEL_65;
  }
  v105 = v218;
  if (v54 < 1)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v106 = v218 & 0xC000000000000001;
  swift_bridgeObjectRetain(v218);
  v107 = 0;
  v108 = (uint64_t)v213;
  do
  {
    if (v106)
      v109 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v107, v105);
    else
      v109 = *(id *)(v105 + 8 * v107 + 32);
    v110 = v109;
    v111 = objc_msgSend(v109, "identifier");
    if (v111)
    {
      v112 = v111;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v111);

      v113 = 0;
    }
    else
    {
      v113 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v108, v113, 1, v2);
    sub_1000F2CE4(v108, (uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v19, 1, v2))
    {
      sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);

    }
    else
    {
      v114 = v219;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v219, v19, v2);
      v115 = sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
      UUID.uuidString.getter(v115);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v114, v2);
      String.lowercased()();
      swift_bridgeObjectRelease();
      v116 = String._bridgeToObjectiveC()();

      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v117);
      v119 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v118 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v119 >= v118 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1);
      v120 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v119, v116);
      specialized Array._endMutation()(v120);
      v108 = (uint64_t)v213;
      v105 = v218;
      v54 = (uint64_t)v220;
    }
    ++v107;
  }
  while (v54 != v107);
  swift_bridgeObjectRelease();
  v121 = (_QWORD *)v225;
  v53 = _swiftEmptyArrayStorage;
  v104 = v210;
LABEL_65:
  swift_bridgeObjectRelease();
  sub_10059BCC8((uint64_t)v121);
  v122 = objc_msgSend(v211, "smartLists", swift_bridgeObjectRelease().n128_f64[0]);
  v19 = v215;
  if (!v122)
    goto LABEL_106;
  v123 = v122;
  v225 = (uint64_t)v122;
  v124 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v52 = Sequence.elements<A>(ofType:)(v124, v104, v124, v204);

  v225 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v52 >> 62))
  {
    v125 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v125)
      goto LABEL_68;
LABEL_89:
    swift_bridgeObjectRelease();
    v141 = _swiftEmptyArrayStorage;
LABEL_90:
    sub_10059BCC8((uint64_t)v141);
    swift_bridgeObjectRelease();
    v225 = (uint64_t)_swiftEmptyArrayStorage;
    if (v125)
    {
      swift_bridgeObjectRetain(v52);
      for (i = 0; i != v125; ++i)
      {
        if ((v52 & 0xC000000000000001) != 0)
          v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v52);
        else
          v144 = *(id *)(v52 + 8 * i + 32);
        v145 = v144;
        v146 = objc_msgSend(v144, "identifier");
        if (v146)
        {
          v147 = v146;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v146);

          v148 = 0;
        }
        else
        {
          v148 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v19, v148, 1, v2);
        v149 = (uint64_t)v214;
        sub_1000F2CE4((uint64_t)v19, (uint64_t)v214);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v149, 1, v2))
        {
          sub_10000882C(v149, (uint64_t *)&unk_100839C80);

        }
        else
        {
          v150 = v219;
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v219, v149, v2);
          v151 = sub_10000882C(v149, (uint64_t *)&unk_100839C80);
          UUID.uuidString.getter(v151);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v150, v2);
          String.lowercased()();
          swift_bridgeObjectRelease();
          v152 = String._bridgeToObjectiveC()();

          swift_bridgeObjectRelease();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v153);
          v155 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v154 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v155 >= v154 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v154 > 1);
          v156 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v155, v152);
          specialized Array._endMutation()(v156);
          v19 = v215;
        }
      }
      swift_bridgeObjectRelease();
      v53 = (_QWORD *)v225;
    }
    swift_bridgeObjectRelease();
    sub_10059BCC8((uint64_t)v53);
    swift_bridgeObjectRelease();
LABEL_106:
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v157 = type metadata accessor for Logger(0);
    v158 = sub_10001AAA8(v157, (uint64_t)qword_100850710);
    v159 = Logger.logObject.getter(v158);
    v160 = static os_log_type_t.info.getter(v159);
    if (os_log_type_enabled(v159, v160))
    {
      v161 = (uint8_t *)swift_slowAlloc(12, -1);
      v162 = swift_slowAlloc(32, -1);
      v225 = v162;
      *(_DWORD *)v161 = 136315138;
      swift_beginAccess(v227, &v221, 0, 0);
      v163 = v227[0];
      v164 = sub_1000E51DC((unint64_t *)&unk_100850740, (unint64_t *)&unk_10083FE30, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      swift_bridgeObjectRetain(v163);
      v166 = Set.description.getter(v165, v203, v164);
      v168 = v167;
      swift_bridgeObjectRelease();
      v223 = sub_10001A820(v166, v168, &v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "MERGE.LOCAL: Clean up account.listIDsOrdering {listIDs.to.remove: %s}", v161, 0xCu);
      swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v162, -1, -1);
      swift_slowDealloc(v161, -1, -1);
    }

    v169 = v208;
    swift_beginAccess(v227, &v225, 0, 0);
    v170 = v227[0];
    v72 = v169;
    swift_bridgeObjectRetain(v170);
    sub_10059D18C(v171, v72);
    v173 = v172;
    swift_bridgeObjectRelease();

    v223 = v173;
    swift_bridgeObjectRetain(v173);
    sub_1005910B0(&v223);
    *(_QWORD *)&v174 = swift_bridgeObjectRelease().n128_u64[0];
    v175 = v223;
    v176 = *(_QWORD *)(v223 + 16);
    if (v176)
    {
      v177 = -[NSObject mutableOrderedSet](v72, "mutableOrderedSet", v174);
      while (v176 <= *(_QWORD *)(v175 + 16))
      {
        v178 = *(_QWORD *)(v175 + 8 * v176 + 24);
        v179 = NSNotFound.getter();
        if (v179 < 0 || v178 != v179)

        if (!--v176)
          goto LABEL_122;
      }
      __break(1u);
LABEL_122:
      swift_release(v175);
      v187 = objc_msgSend(v177, "immutableOrderedSet");
      v188 = objc_msgSend(v187, "serializedData");
      v189 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v188);
      v191 = v190;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v189, v191);
      v193 = v211;
      objc_msgSend(v211, "setListIDsMergeableOrdering:", isa);

      v194 = v187;
      v195 = objc_msgSend(v193, "createResolutionTokenMapIfNecessary");
      v196 = String._bridgeToObjectiveC()();
      v197 = objc_msgSend(v195, "getTokenForKey:", v196);

      v198 = v197;
      objc_msgSend(v198, "update");

      v186 = v194;
      sub_100598AD8(v186);
      v181 = v199;
      sub_100599678(v186);
      v183 = v200;
      if (v181)
      {
        if (v200)
        {
          v181 = v181;
          v201 = (void *)sub_10059D3EC();
          v185 = v211;
          sub_10059A414(v181, v201, v186);

          goto LABEL_131;
        }

        goto LABEL_130;
      }

    }
    else
    {
      swift_release(v223);
      sub_100598AD8(v72);
      v181 = v180;
      sub_100599678(v72);
      v183 = v182;
      if (v181)
      {
        if (v182)
        {
          v181 = v181;
          v184 = (void *)sub_10059D3EC();
          v185 = v211;
          sub_10059A414(v181, v184, v72);

          v186 = 0;
LABEL_131:

          objc_msgSend(v185, "updateChangeCount");
          sub_1000A71C8(v207, v206);
          swift_bridgeObjectRelease();

          goto LABEL_132;
        }
        v186 = 0;
LABEL_130:
        v185 = v211;
        goto LABEL_131;
      }
      v186 = 0;
    }
    v181 = v183;
    goto LABEL_130;
  }
LABEL_85:
  if (v52 < 0)
    v142 = v52;
  else
    v142 = v52 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v52);
  v125 = _CocoaArrayWrapper.endIndex.getter(v142);
  if (!v125)
    goto LABEL_89;
LABEL_68:
  if (v125 >= 1)
  {
    for (j = 0; j != v125; ++j)
    {
      if ((v52 & 0xC000000000000001) != 0)
        v127 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v52);
      else
        v127 = *(id *)(v52 + 8 * j + 32);
      v128 = v127;
      v129 = objc_msgSend(v127, "identifier");
      if (v129)
      {
        v130 = v129;
        v131 = (uint64_t)v216;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v129);

        v132 = 0;
      }
      else
      {
        v132 = 1;
        v131 = (uint64_t)v216;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v131, v132, 1, v2);
      v133 = v217;
      sub_1000F2CE4(v131, v217);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v133, 1, v2))
      {
        sub_10000882C(v133, (uint64_t *)&unk_100839C80);

      }
      else
      {
        v134 = v219;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v219, v133, v2);
        v135 = sub_10000882C(v133, (uint64_t *)&unk_100839C80);
        UUID.uuidString.getter(v135);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v134, v2);
        String.uppercased()();
        swift_bridgeObjectRelease();
        v136 = String._bridgeToObjectiveC()();

        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v137);
        v139 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v138 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v139 >= v138 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v138 > 1);
        v140 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v139, v136);
        specialized Array._endMutation()(v140);
        v19 = v215;
      }
    }
    swift_bridgeObjectRelease();
    v141 = (_QWORD *)v225;
    v53 = _swiftEmptyArrayStorage;
    goto LABEL_90;
  }
  __break(1u);
  __break(1u);
  swift_release(v223);
  __break(1u);
}

void sub_100598AD8(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  int v28;
  _BOOL4 v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  objc_class *v39;
  objc_class *v40;
  id v41;
  void *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t);
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  _QWORD *v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  NSObject *v80;
  int v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  os_log_t v111;
  id v112;
  _BYTE v113[12];
  int v114;
  _QWORD *v115;
  uint64_t v116;
  _DWORD *v117;
  os_log_t v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  _BYTE *v123;
  os_log_t v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  id v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t aBlock[5];
  uint64_t v133;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v127 = &v113[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v125 = &v113[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v11 = &v113[-v10];
  __chkstk_darwin(v12);
  v14 = &v113[-v13];
  __chkstk_darwin(v15);
  v129 = &v113[-v16];
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v2, "mutableOrderedSetValueForKey:", v17);

  v19 = qword_100837908;
  if (v18)
  {
    v20 = v18;
    if (v19 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001AAA8(v21, (uint64_t)qword_100850710);
    v23 = v20;
    v24 = a1;
    v25 = v23;
    v26 = v24;
    v122 = v22;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
    v126 = v11;
    v121 = v18;
    if (!v29)
    {

      goto LABEL_35;
    }
    v114 = v28;
    v118 = v27;
    v119 = v26;
    v30 = (_DWORD *)swift_slowAlloc(22, -1);
    v115 = (_QWORD *)swift_slowAlloc(8, -1);
    v116 = swift_slowAlloc(32, -1);
    v131 = (uint64_t)v25;
    aBlock[0] = v116;
    v117 = v30;
    *v30 = 136315394;
    v120 = v25;
    v31 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v32 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
    v33 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v34 = Sequence.elements<A>(ofType:)(v31, v32, v31, v33);
    v35 = v34;
    if ((unint64_t)v34 >> 62)
    {
      if (v34 < 0)
        v63 = v34;
      else
        v63 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v34);
      v36 = _CocoaArrayWrapper.endIndex.getter(v63);
      v11 = v126;
      if (v36)
        goto LABEL_7;
    }
    else
    {
      v36 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v34);
      v11 = v126;
      if (v36)
      {
LABEL_7:
        if (v36 < 1)
        {
          __break(1u);
LABEL_62:
          __break(1u);
          return;
        }
        v37 = 0;
        v128 = (id)(v35 & 0xC000000000000001);
        v38 = _swiftEmptyArrayStorage;
        v123 = v14;
        v124 = (os_log_t)v35;
        do
        {
          if (v128)
            v39 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v35);
          else
            v39 = (objc_class *)*(id *)(v35 + 8 * v37 + 32);
          v40 = v39;
          v41 = -[objc_class identifier](v39, "identifier");
          if (v41)
          {
            v42 = v41;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

            v43 = 0;
          }
          else
          {
            v43 = 1;
          }
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, v43, 1, v4);
          v44 = v129;
          sub_1000F2CE4((uint64_t)v14, (uint64_t)v129);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v44, 1, v4))
          {
            sub_10000882C((uint64_t)v44, (uint64_t *)&unk_100839C80);

          }
          else
          {
            v45 = v4;
            v46 = v5;
            v47 = v45;
            v48 = v127;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v127, v44, v45);
            v49 = sub_10000882C((uint64_t)v44, (uint64_t *)&unk_100839C80);
            v50 = UUID.uuidString.getter(v49);
            v52 = v51;
            v53 = v46;
            v54 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
            v4 = v47;
            v54(v48, v47);

            if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
              v38 = sub_1002C8224(0, v38[2] + 1, 1, v38);
            v56 = v38[2];
            v55 = v38[3];
            if (v56 >= v55 >> 1)
              v38 = sub_1002C8224((_QWORD *)(v55 > 1), v56 + 1, 1, v38);
            v38[2] = v56 + 1;
            v57 = &v38[2 * v56];
            v57[4] = v50;
            v57[5] = v52;
            v11 = v126;
            v5 = v53;
            v14 = v123;
            v35 = (uint64_t)v124;
          }
          ++v37;
        }
        while (v36 != v37);
        goto LABEL_34;
      }
    }
    v38 = _swiftEmptyArrayStorage;
LABEL_34:
    swift_bridgeObjectRelease_n(v35, 2);
    v64 = v117;
    v65 = Array.description.getter(v38, &type metadata for String);
    v67 = v66;
    swift_bridgeObjectRelease();
    v131 = sub_10001A820(v65, v67, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock);
    v68 = v120;

    swift_bridgeObjectRelease();
    *((_WORD *)v64 + 6) = 2112;
    v26 = v119;
    v131 = (uint64_t)v119;
    v69 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock);
    v70 = v115;
    *v115 = v26;

    v71 = v118;
    _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v114, "Sort ordered set account.lists - before - {lists: %s, ordering: %@}", (uint8_t *)v64, 0x16u);
    v72 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v70, 1, v72);
    swift_slowDealloc(v70, -1, -1);
    v73 = v116;
    swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    v74 = v64;
    v25 = v68;
    swift_slowDealloc(v74, -1, -1);

LABEL_35:
    v75 = swift_allocObject(&unk_1007FB9A8, 24, 7);
    *(_QWORD *)(v75 + 16) = &_swiftEmptyDictionarySingleton;
    aBlock[4] = (uint64_t)sub_10025F8B8;
    v133 = v75;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100256CB0;
    aBlock[3] = (uint64_t)&unk_1007FBA10;
    v76 = _Block_copy(aBlock);
    v77 = v133;
    swift_retain();
    swift_release(v77);
    objc_msgSend(v26, "enumerateObjectsUsingBlock:", v76);
    _Block_release(v76);
    swift_beginAccess(v75 + 16, aBlock, 0, 0);
    v78 = *(_QWORD *)(v75 + 16);
    swift_bridgeObjectRetain(v78);
    sub_1000A774C((void **)v25, v78, 0);
    swift_release(v75);
    swift_bridgeObjectRelease();
    v79 = v25;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v80, (os_log_type_t)v81))
    {

      return;
    }
    LODWORD(v122) = v81;
    v124 = v80;
    v82 = (_DWORD *)swift_slowAlloc(12, -1);
    v120 = (id)swift_slowAlloc(32, -1);
    v130 = (uint64_t)v79;
    v131 = (uint64_t)v120;
    v123 = v82;
    *v82 = 136315138;
    v128 = v79;
    v83 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v84 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
    v85 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v86 = Sequence.elements<A>(ofType:)(v83, v84, v83, v85);
    v87 = v86;
    if ((unint64_t)v86 >> 62)
    {
      if (v86 < 0)
        v105 = v86;
      else
        v105 = v86 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v86);
      v88 = _CocoaArrayWrapper.endIndex.getter(v105);
      v89 = (uint64_t)v125;
      if (v88)
      {
LABEL_38:
        if (v88 >= 1)
        {
          v90 = 0;
          v129 = (_BYTE *)(v87 & 0xC000000000000001);
          v91 = _swiftEmptyArrayStorage;
          do
          {
            if (v129)
              v92 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v87);
            else
              v92 = *(id *)(v87 + 8 * v90 + 32);
            v93 = v92;
            v94 = objc_msgSend(v92, "identifier");
            if (v94)
            {
              v95 = v94;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

              v96 = 0;
            }
            else
            {
              v96 = 1;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v89, v96, 1, v4);
            sub_1000F2CE4(v89, (uint64_t)v11);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
            {
              sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);

            }
            else
            {
              v97 = v127;
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v127, v11, v4);
              v98 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
              v99 = UUID.uuidString.getter(v98);
              v101 = v100;
              (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v97, v4);

              if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
                v91 = sub_1002C8224(0, v91[2] + 1, 1, v91);
              v103 = v91[2];
              v102 = v91[3];
              if (v103 >= v102 >> 1)
                v91 = sub_1002C8224((_QWORD *)(v102 > 1), v103 + 1, 1, v91);
              v91[2] = v103 + 1;
              v104 = &v91[2 * v103];
              v104[4] = v99;
              v104[5] = v101;
              v89 = (uint64_t)v125;
              v11 = v126;
            }
            ++v90;
          }
          while (v88 != v90);
          goto LABEL_60;
        }
        goto LABEL_62;
      }
    }
    else
    {
      v88 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v86);
      v89 = (uint64_t)v125;
      if (v88)
        goto LABEL_38;
    }
    v91 = _swiftEmptyArrayStorage;
LABEL_60:
    swift_bridgeObjectRelease_n(v87, 2);
    v106 = v123;
    v107 = Array.description.getter(v91, &type metadata for String);
    v109 = v108;
    swift_bridgeObjectRelease();
    v130 = sub_10001A820(v107, v109, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131);
    v110 = v128;

    swift_bridgeObjectRelease();
    v111 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v122, "Sort ordered set account.lists - after - {lists: %s}", v106, 0xCu);
    v112 = v120;
    swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v106, -1, -1);

    return;
  }
  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v58 = type metadata accessor for Logger(0);
  v59 = sub_10001AAA8(v58, (uint64_t)qword_100850710);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Not sorting child lists because REMCDAccount.mutableOrderedSetValue(forKey: lists) is nil", v62, 2u);
    swift_slowDealloc(v62, -1, -1);
  }

}

void sub_100599678(void *a1)
{
  void *v1;
  void *v2;
  NSObject *v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  NSString v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  int v30;
  _BOOL4 v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void (**v49)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  _QWORD *v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  int v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  os_log_t v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  double v126;
  id v127;
  _BYTE v128[12];
  int v129;
  _QWORD *v130;
  uint64_t v131;
  _DWORD *v132;
  os_log_t v133;
  id v134;
  id v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  unint64_t v143;
  os_log_t v144;
  void (**v145)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t aBlock[5];
  uint64_t v150;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  isa = v4[-1].isa;
  __chkstk_darwin(v4);
  v142 = &v128[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v140 = &v128[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v11 = &v128[-v10];
  __chkstk_darwin(v12);
  v14 = &v128[-v13];
  __chkstk_darwin(v15);
  v17 = &v128[-v16];
  v18 = String._bridgeToObjectiveC()();
  v138 = v2;
  v19 = objc_msgSend(v2, "mutableOrderedSetValueForKey:", v18);

  v20 = v19;
  v21 = qword_100837908;
  if (v20)
  {
    v146 = (unint64_t)v17;
    v136 = v20;
    v22 = v20;
    if (v21 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_100850710);
    v25 = v22;
    v26 = a1;
    v27 = v25;
    v28 = v26;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
    v141 = v11;
    v137 = v24;
    if (v31)
    {
      v129 = v30;
      v133 = v29;
      v134 = v28;
      v32 = (_DWORD *)swift_slowAlloc(22, -1);
      v130 = (_QWORD *)swift_slowAlloc(8, -1);
      v33 = swift_slowAlloc(32, -1);
      v148 = (uint64_t)v27;
      aBlock[0] = v33;
      v132 = v32;
      *v32 = 136315394;
      v135 = v27;
      v34 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
      v35 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
      v36 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
      v37 = Sequence.elements<A>(ofType:)(v34, v35, v34, v36);
      v139 = v37;
      if ((unint64_t)v37 >> 62)
      {
        if (v37 < 0)
          v103 = v37;
        else
          v103 = v37 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v37);
        v38 = _CocoaArrayWrapper.endIndex.getter(v103);
      }
      else
      {
        v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v37);
      }
      v145 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))isa;
      v131 = v33;
      if (v38)
      {
        if (v38 < 1)
        {
          __break(1u);
          goto LABEL_69;
        }
        v39 = 0;
        v40 = v139;
        v143 = v139 & 0xC000000000000001;
        v41 = _swiftEmptyArrayStorage;
        v144 = v4;
        v42 = v4;
        do
        {
          v43 = v38;
          if (v143)
            v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v40);
          else
            v44 = *(id *)(v40 + 8 * v39 + 32);
          v45 = v44;
          v46 = objc_msgSend(v44, "identifier");
          if (v46)
          {
            v47 = v46;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

            v48 = 0;
          }
          else
          {
            v48 = 1;
          }
          v49 = v145;
          ((void (**)(_BYTE *, uint64_t, uint64_t, NSObject *))v145)[7](v14, v48, 1, v42);
          v50 = v146;
          sub_1000F2CE4((uint64_t)v14, v146);
          if (((unsigned int (*)(uint64_t, uint64_t, NSObject *))v49[6])(v50, 1, v42))
          {
            sub_10000882C(v50, (uint64_t *)&unk_100839C80);

            v4 = v42;
          }
          else
          {
            v51 = v142;
            ((void (*)(_BYTE *, uint64_t, NSObject *))v49[2])(v142, v50, v42);
            v52 = sub_10000882C(v50, (uint64_t *)&unk_100839C80);
            v53 = UUID.uuidString.getter(v52);
            v55 = v54;
            ((void (*)(_BYTE *, NSObject *))v49[1])(v51, v42);

            v4 = v42;
            if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
              v41 = sub_1002C8224(0, v41[2] + 1, 1, v41);
            v57 = v41[2];
            v56 = v41[3];
            if (v57 >= v56 >> 1)
              v41 = sub_1002C8224((_QWORD *)(v56 > 1), v57 + 1, 1, v41);
            v41[2] = v57 + 1;
            v58 = &v41[2 * v57];
            v58[4] = v53;
            v58[5] = v55;
            v11 = v141;
            v40 = v139;
          }
          ++v39;
          v38 = v43;
        }
        while (v43 != v39);
      }
      else
      {
        v41 = _swiftEmptyArrayStorage;
        v40 = v139;
      }
      swift_bridgeObjectRelease_n(v40, 2);
      v64 = v132;
      v65 = Array.description.getter(v41, &type metadata for String);
      v67 = v66;
      swift_bridgeObjectRelease(v41);
      v148 = sub_10001A820(v65, v67, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, aBlock);
      v27 = v135;

      swift_bridgeObjectRelease(v67);
      *((_WORD *)v64 + 6) = 2112;
      v28 = v134;
      v148 = (uint64_t)v134;
      v68 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, aBlock);
      v69 = v130;
      *v130 = v28;

      v70 = v133;
      _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v129, "REMCDAccount+CloudKit: Sort ordered set account.smartLists - before - {smartLists: %s, ordering: %@}", (uint8_t *)v64, 0x16u);
      v71 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v69, 1, v71);
      swift_slowDealloc(v69, -1, -1);
      v72 = v131;
      swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v64, -1, -1);

      isa = (Class)v145;
    }
    else
    {

    }
    v73 = swift_allocObject(&unk_1007FB9A8, 24, 7);
    *(_QWORD *)(v73 + 16) = &_swiftEmptyDictionarySingleton;
    aBlock[4] = (uint64_t)sub_10025F8B8;
    v150 = v73;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100256CB0;
    aBlock[3] = (uint64_t)&unk_1007FB9E8;
    v74 = _Block_copy(aBlock);
    v75 = v150;
    swift_retain();
    swift_release(v75);
    objc_msgSend(v28, "enumerateObjectsUsingBlock:", v74);
    _Block_release(v74);
    swift_beginAccess(v73 + 16, aBlock, 0, 0);
    v76 = *(_QWORD *)(v73 + 16);
    swift_bridgeObjectRetain(v76);
    sub_1000A774C((void **)v27, v76, 0);
    swift_release(v73);
    swift_bridgeObjectRelease(v76);
    v77 = v27;
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v78, (os_log_type_t)v79))
    {

      goto LABEL_62;
    }
    LODWORD(v139) = v79;
    v144 = v78;
    v80 = (_DWORD *)swift_slowAlloc(12, -1);
    v135 = (id)swift_slowAlloc(32, -1);
    v147 = (uint64_t)v77;
    v148 = (uint64_t)v135;
    v143 = (unint64_t)v80;
    *v80 = 136315138;
    v145 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v77;
    v81 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v82 = sub_1000151B0(0, &qword_100838568, NSMutableOrderedSet_ptr);
    v83 = sub_1000E51DC(&qword_100850750, &qword_100838568, NSMutableOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
    v84 = Sequence.elements<A>(ofType:)(v81, v82, v81, v83);
    v85 = v84;
    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v104 = v84;
      else
        v104 = v84 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v84);
      v86 = _CocoaArrayWrapper.endIndex.getter(v104);
      v87 = (uint64_t)v140;
      if (v86)
      {
LABEL_35:
        if (v86 >= 1)
        {
          v88 = 0;
          v146 = v85 & 0xC000000000000001;
          v89 = _swiftEmptyArrayStorage;
          do
          {
            if (v146)
              v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v85);
            else
              v90 = *(id *)(v85 + 8 * v88 + 32);
            v91 = v90;
            v92 = objc_msgSend(v90, "identifier");
            if (v92)
            {
              v93 = v92;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

              v94 = 0;
            }
            else
            {
              v94 = 1;
            }
            (*((void (**)(uint64_t, uint64_t, uint64_t, NSObject *))isa + 7))(v87, v94, 1, v4);
            sub_1000F2CE4(v87, (uint64_t)v11);
            if ((*((unsigned int (**)(_BYTE *, uint64_t, NSObject *))isa + 6))(v11, 1, v4))
            {
              sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);

            }
            else
            {
              v95 = v142;
              (*((void (**)(_BYTE *, _BYTE *, NSObject *))isa + 2))(v142, v11, v4);
              v96 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
              v97 = UUID.uuidString.getter(v96);
              v99 = v98;
              (*((void (**)(_BYTE *, NSObject *))isa + 1))(v95, v4);

              if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
                v89 = sub_1002C8224(0, v89[2] + 1, 1, v89);
              v101 = v89[2];
              v100 = v89[3];
              if (v101 >= v100 >> 1)
                v89 = sub_1002C8224((_QWORD *)(v100 > 1), v101 + 1, 1, v89);
              v89[2] = v101 + 1;
              v102 = &v89[2 * v101];
              v102[4] = v97;
              v102[5] = v99;
              v87 = (uint64_t)v140;
              v11 = v141;
            }
            ++v88;
          }
          while (v86 != v88);
          goto LABEL_61;
        }
LABEL_69:
        __break(1u);
        return;
      }
    }
    else
    {
      v86 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v84);
      v87 = (uint64_t)v140;
      if (v86)
        goto LABEL_35;
    }
    v89 = _swiftEmptyArrayStorage;
LABEL_61:
    swift_bridgeObjectRelease_n(v85, 2);
    v105 = (uint8_t *)v143;
    v106 = Array.description.getter(v89, &type metadata for String);
    v108 = v107;
    swift_bridgeObjectRelease(v89);
    v147 = sub_10001A820(v106, v108, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
    v77 = v145;

    swift_bridgeObjectRelease(v108);
    v109 = v144;
    _os_log_impl((void *)&_mh_execute_header, v144, (os_log_type_t)v139, "REMCDAccount+CloudKit: Sort ordered set account.smartLists - after - {smartLists: %s}", v105, 0xCu);
    v110 = v135;
    swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v105, -1, -1);

LABEL_62:
    v111 = v138;
    v112 = v77;
    v113 = v111;
    v114 = v112;
    v115 = v113;
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.info.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      v118 = swift_slowAlloc(22, -1);
      v119 = swift_slowAlloc(32, -1);
      v148 = v119;
      *(_DWORD *)v118 = 136446466;
      v120 = objc_msgSend(v115, "remObjectID");
      if (v120)
      {
        v121 = v120;
        v122 = objc_msgSend(v120, "description");

        v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
        v125 = v124;

      }
      else
      {
        v125 = 0xE300000000000000;
        v123 = 7104878;
      }
      v147 = sub_10001A820(v123, v125, &v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);

      *(_QWORD *)&v126 = swift_bridgeObjectRelease(v125).n128_u64[0];
      *(_WORD *)(v118 + 12) = 2048;
      v127 = objc_msgSend(v114, "count", v126);

      v147 = (uint64_t)v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);

      _os_log_impl((void *)&_mh_execute_header, v116, v117, "REMCDAccount+CloudKit: Sorted CSLs into account.smartLists {account: %{public}s, #csls: %ld}", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v118, -1, -1);

    }
    else
    {

    }
    return;
  }
  if (qword_100837908 != -1)
    swift_once(&qword_100837908, sub_100591118);
  v59 = type metadata accessor for Logger(0);
  v60 = sub_10001AAA8(v59, (uint64_t)qword_100850710);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "REMCDAccount+CloudKit: Not sorting child smartLists because REMCDAccount.mutableOrderedSetValue(forKey: smartLists) is nil", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

}

void sub_10059A414(void *a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  double v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;

  v4 = v3;
  v78 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v76 - v16;
  v18 = objc_msgSend(v4, "storeControllerManagedObjectContext", v15);
  if (v18
    && (v19 = v18,
        v20 = objc_msgSend(v18, "storeController"),
        v19,
        (v77 = v20) != 0))
  {
    v21 = objc_msgSend(v4, "identifier");
    if (v21)
    {
      v22 = v21;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v23 = 0;
    }
    else
    {
      v23 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, v23, 1, v7);
    sub_1000F2CE4((uint64_t)v13, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
    {
      sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
      v35 = v77;
LABEL_14:
      if (qword_100837908 != -1)
        swift_once(&qword_100837908, sub_100591118);
      v36 = type metadata accessor for Logger(0);
      sub_10001AAA8(v36, (uint64_t)qword_100850710);
      v37 = v4;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        v80 = v41;
        *(_DWORD *)v40 = 136446210;
        v42 = objc_msgSend(v37, "remObjectID");
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v45 = 7104878;
          v47 = 0xE300000000000000;
        }
        v79 = sub_10001A820(v45, v47, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

      }
      else
      {

      }
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
    v48 = sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C80);
    UUID.uuidString.getter(v48);
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v51 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v52 = swift_bridgeObjectRelease(v50).n128_u64[0];
    v35 = v77;
    v53 = objc_msgSend(v77, "storeForAccountIdentifier:", v51, v52);

    if (!v53)
      goto LABEL_14;
    v54 = a2;
    sub_10058FC98(a1, a2, v78, v53);
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v55 = type metadata accessor for Logger(0);
    sub_10001AAA8(v55, (uint64_t)qword_100850710);
    v56 = v4;
    v57 = v54;
    v58 = a1;
    v59 = v56;
    v60 = v57;
    v61 = v58;
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.info.getter(v62);
    if (os_log_type_enabled(v62, (os_log_type_t)v63))
    {
      LODWORD(v78) = v63;
      v64 = swift_slowAlloc(32, -1);
      v65 = swift_slowAlloc(32, -1);
      v80 = v65;
      *(_DWORD *)v64 = 136446722;
      v66 = objc_msgSend(v59, "remObjectID");
      v76 = v65;
      if (v66)
      {
        v67 = v66;
        v68 = objc_msgSend(v66, "description");

        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

      }
      else
      {
        v69 = 7104878;
        v71 = 0xE300000000000000;
      }
      v79 = sub_10001A820(v69, v71, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

      *(_QWORD *)&v72 = swift_bridgeObjectRelease(v71).n128_u64[0];
      *(_WORD *)(v64 + 12) = 2048;
      v73 = objc_msgSend(v60, "count", v72);

      v79 = (uint64_t)v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

      *(_WORD *)(v64 + 22) = 2048;
      v74 = objc_msgSend(v61, "count");

      v79 = (uint64_t)v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v78, "REMCDAccount+CloudKit: Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}", (uint8_t *)v64, 0x20u);
      v75 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_100837908 != -1)
      swift_once(&qword_100837908, sub_100591118);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_100850710);
    v78 = v4;
    v25 = Logger.logObject.getter(v78);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v80 = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = objc_msgSend(v78, "remObjectID");
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v29, "description");

        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

      }
      else
      {
        v32 = 7104878;
        v34 = 0xE300000000000000;
      }
      v79 = sub_10001A820(v32, v34, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because storeController isn't available {account: %{public}s}", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10059AC78(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v79 = 0;
      v80 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v82 = *(_QWORD *)(v80 + 8 * i);
        v83 = v79;
        do
        {
          v84 = *(_QWORD *)(v80 + v83);
          if (v82 >= v84)
            break;
          if (!v80)
            goto LABEL_141;
          *(_QWORD *)(v80 + v83 + 8) = v84;
          *(_QWORD *)(v80 + v83) = v82;
          v83 -= 8;
        }
        while (v83 != -8);
        v79 += 8;
      }
    }
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v97 = v4;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v96 = v8;
      if (v12 >= 2)
      {
        v85 = *v2;
        do
        {
          v86 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v85)
            goto LABEL_145;
          v87 = v11;
          v88 = v11 + 32;
          v89 = *(_QWORD *)&v11[16 * v86 + 32];
          v90 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_10059B300((char *)(v85 + 8 * v89), (char *)(v85 + 8 * *(_QWORD *)&v88[16 * v12 - 16]), v85 + 8 * v90, __dst);
          if (v1)
            break;
          if (v90 < v89)
            goto LABEL_133;
          swift_isUniquelyReferenced_nonNull_native(v87);
          if ((v91 & 1) == 0)
            v87 = sub_1001D52E4((uint64_t)v87);
          if (v86 >= *((_QWORD *)v87 + 2))
            goto LABEL_134;
          v92 = &v87[16 * v86 + 32];
          *(_QWORD *)v92 = v89;
          *((_QWORD *)v92 + 1) = v90;
          v93 = *((_QWORD *)v87 + 2);
          if (v12 > v93)
            goto LABEL_135;
          memmove(&v87[16 * v12 + 16], &v87[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v87;
          *((_QWORD *)v87 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v96[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v60 = ++v19 < v18--;
          }
          while (v60);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v97)
      goto LABEL_47;
    v21 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (unint64_t *)(v95 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    swift_isUniquelyReferenced_nonNull_native(v11);
    if ((v27 & 1) == 0)
      v11 = sub_1001D4DF0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v29 = *((_QWORD *)v11 + 2);
    v28 = *((_QWORD *)v11 + 3);
    v12 = v29 + 1;
    v10 = v99;
    if (v29 >= v28 >> 1)
    {
      v78 = sub_1001D4DF0((char *)(v28 > 1), v29 + 1, 1, v11);
      v10 = v99;
      v11 = v78;
    }
    *((_QWORD *)v11 + 2) = v12;
    v30 = v11 + 32;
    v31 = &v11[16 * v29 + 32];
    *(_QWORD *)v31 = v13;
    *((_QWORD *)v31 + 1) = v9;
    if (v29)
    {
      while (1)
      {
        v32 = v12 - 1;
        if (v12 >= 4)
        {
          v37 = &v30[16 * v12];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_120;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_121;
          v44 = v12 - 2;
          v45 = &v30[16 * v12 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_123;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_126;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_130;
            v60 = v35 < v70;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v61 = *((_QWORD *)v11 + 4);
            v62 = *((_QWORD *)v11 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_78;
          }
          v34 = *((_QWORD *)v11 + 4);
          v33 = *((_QWORD *)v11 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_122;
        v44 = v12 - 2;
        v50 = &v30[16 * v12 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_125;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_128;
        if (__OFADD__(v54, v59))
          goto LABEL_129;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_84:
          if (v60)
            v32 = v44;
          goto LABEL_86;
        }
LABEL_78:
        if ((v55 & 1) != 0)
          goto LABEL_124;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_127;
        if (v66 < v54)
          goto LABEL_15;
LABEL_86:
        v71 = v32 - 1;
        if (v32 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v72 = &v30[16 * v71];
        v73 = *(_QWORD *)v72;
        v74 = v30;
        v75 = &v30[16 * v32];
        v76 = *((_QWORD *)v75 + 1);
        sub_10059B300((char *)(v10 + 8 * *(_QWORD *)v72), (char *)(v10 + 8 * *(_QWORD *)v75), v10 + 8 * v76, __dst);
        if (v1)
          goto LABEL_114;
        if (v76 < v73)
          goto LABEL_117;
        if (v32 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v72 = v73;
        *(_QWORD *)&v74[16 * v71 + 8] = v76;
        v77 = *((_QWORD *)v11 + 2);
        if (v32 >= v77)
          goto LABEL_119;
        v12 = v77 - 1;
        memmove(v75, v75 + 16, 16 * (v77 - 1 - v32));
        v30 = v74;
        *((_QWORD *)v11 + 2) = v77 - 1;
        v10 = v99;
        if (v77 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10059B300(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16)
              *v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6)
              *v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1001D4FA4(&v24, &v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10059B56C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = type metadata accessor for REMObjectID_Codable(0);
      v8 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
      v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      v28 = v31[1];
      v10 = v31[2];
      v11 = v31[3];
      v12 = v31[4];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v28 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v27 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v16 = (v12 - 1) & v12;
        v17 = __clz(__rbit64(v12)) | (v11 << 6);
        v18 = v11;
      }
      else
      {
        v23 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v23 >= v27)
          goto LABEL_42;
        v24 = *(_QWORD *)(v28 + 8 * v23);
        v18 = v11 + 1;
        if (!v24)
        {
          v18 = v11 + 2;
          if (v11 + 2 >= v27)
            goto LABEL_42;
          v24 = *(_QWORD *)(v28 + 8 * v18);
          if (!v24)
          {
            v18 = v11 + 3;
            if (v11 + 3 >= v27)
              goto LABEL_42;
            v24 = *(_QWORD *)(v28 + 8 * v18);
            if (!v24)
            {
              v18 = v11 + 4;
              if (v11 + 4 >= v27)
                goto LABEL_42;
              v24 = *(_QWORD *)(v28 + 8 * v18);
              if (!v24)
              {
                v18 = v11 + 5;
                if (v11 + 5 >= v27)
                  goto LABEL_42;
                v24 = *(_QWORD *)(v28 + 8 * v18);
                if (!v24)
                {
                  v25 = v11 + 6;
                  while (v27 != v25)
                  {
                    v24 = *(_QWORD *)(v28 + 8 * v25++);
                    if (v24)
                    {
                      v18 = v25 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_1000C6560(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v16 = (v24 - 1) & v24;
        v17 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
      if (!v22)
        goto LABEL_42;
      while (1)
      {
        v26 = (void *)sub_100009CA8(v22, (void (*)(_QWORD))&type metadata accessor for REMObjectID_Codable, (void (*)(void))sub_1002E35F0, sub_1002DE3BC);

        v11 = v18;
        v12 = v16;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v19 = __CocoaSet.Iterator.next()(v9);
        if (v19)
        {
          v20 = v19;
          v29 = v19;
          v21 = type metadata accessor for REMObjectID_Codable(0);
          swift_unknownObjectRetain(v20);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
          v22 = v30;
          swift_unknownObjectRelease(v20);
          v18 = v11;
          v16 = v12;
          if (v22)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

void sub_10059B880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        goto LABEL_24;
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          goto LABEL_24;
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            goto LABEL_24;
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_10059BE6C(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10059BA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_5:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * i, v3, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_10059BFF8((uint64_t)v6, (uint64_t)v9);
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16)
      goto LABEL_5;
LABEL_6:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v13 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v13 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v25)
            goto LABEL_25;
          v22 = *(_QWORD *)(v13 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v16 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1, 1, v3, v17);
LABEL_26:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

void sub_10059BCC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v1;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    if (!__CocoaSet.count.getter(v4))
      return;
  }
  else if (!*(_QWORD *)(v3 + 16))
  {
    return;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v5)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (v5 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = 0;
      do
      {
        v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6++, a1);
        v8 = (void *)sub_10059C258(v7, (unint64_t *)&unk_10083FE30, NSString_ptr, (void (*)(void))sub_1002E4478, (uint64_t (*)(__n128))sub_1002DE7BC);
        swift_unknownObjectRelease(v7);

      }
      while (v5 != v6);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(void **)(a1 + 8 * v9++ + 32);
        v11 = v10;
        v12 = (void *)sub_10059C258(v11, (unint64_t *)&unk_10083FE30, NSString_ptr, (void (*)(void))sub_1002E4478, (uint64_t (*)(__n128))sub_1002DE7BC);

      }
      while (v5 != v9);
    }
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10059BE6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002E3434();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_10059CA64(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_10059BFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10009FC50((unint64_t *)&qword_100843670, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        v23 = swift_bridgeObjectRelease();
        v24 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(a2, v24, 1, v6, v23);
      }
    }
    swift_bridgeObjectRelease();
    v25 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v27 = *v25;
    v35 = *v25;
    *v25 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002E35FC();
      v27 = v35;
    }
    v28 = *(_QWORD *)(v27 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v28, v6);
    sub_10059CC28(v16);
    *v25 = v35;
    v23 = swift_bridgeObjectRelease();
    v24 = 0;
  }
  else
  {
    v23 = swift_bridgeObjectRelease();
    v24 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(a2, v24, 1, v6, v23);
}

uint64_t sub_10059C234(void *a1)
{
  return sub_10059C258(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (void (*)(void))sub_1002E35E4, (uint64_t (*)(__n128))sub_1002DE1A0);
}

uint64_t sub_10059C258(void *a1, unint64_t *a2, _QWORD *a3, void (*a4)(void), uint64_t (*a5)(__n128))
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  id v24;
  char v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v29;

  v8 = v5;
  v10 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v12 = *v5;
    else
      v12 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v13 = a1;
    v14 = __CocoaSet.contains(_:)(v13, v12);

    if ((v14 & 1) != 0)
    {
      v15 = sub_10059C8C8(v12, (uint64_t)v13, a5, a2, a3);
      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  v18 = NSObject._rawHashValue(seed:)(v17);
  v19 = -1 << *(_BYTE *)(v10 + 32);
  v20 = v18 & ~v19;
  if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
    goto LABEL_15;
  sub_1000151B0(0, a2, a3);
  v21 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
  v22 = static NSObject.== infix(_:_:)(v21);

  if ((v22 & 1) == 0)
  {
    v23 = ~v19;
    do
    {
      v20 = (v20 + 1) & v23;
      if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_15;
      v24 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
      v25 = static NSObject.== infix(_:_:)(v24);

    }
    while ((v25 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v27 = *v8;
  v29 = *v8;
  *v8 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    v27 = v29;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v20);
  sub_100009E80(v20);
  *v8 = v29;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10059C440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[9];

  v38 = a2;
  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - v12;
  v36 = v2;
  v14 = *v2;
  Hasher.init(_seed:)(v41, *(_QWORD *)(*v2 + 40));
  v15 = type metadata accessor for UUID(0);
  v16 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v14);
  dispatch thunk of Hashable.hash(into:)(v41, v15, v16);
  v39 = v4;
  v17 = type metadata accessor for Date(0);
  v18 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v41, v17, v18);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v14 + 32);
  v21 = v19 & ~v20;
  v22 = v14;
  v40 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
  {
    v23 = ~v20;
    v37 = v5;
    v24 = *(_QWORD *)(v5 + 72);
    while (1)
    {
      v25 = v22;
      sub_10011FECC(*(_QWORD *)(v22 + 48) + v24 * v21, (uint64_t)v13);
      v26 = static UUID.== infix(_:_:)(v13, a1);
      sub_10011FECC((uint64_t)v13, (uint64_t)v10);
      sub_10011FECC(a1, (uint64_t)v7);
      if ((v26 & 1) != 0)
      {
        v27 = static Date.== infix(_:_:)(&v10[*(int *)(v39 + 20)], &v7[*(int *)(v39 + 20)]);
        sub_10011FF54((uint64_t)v7);
        sub_10011FF54((uint64_t)v10);
        sub_10011FF54((uint64_t)v13);
        if ((v27 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v28 = v36;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
          v30 = *v28;
          v41[0] = *v28;
          *v28 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002E40C8();
            v30 = v41[0];
          }
          v31 = v38;
          sub_10011FF10(*(_QWORD *)(v30 + 48) + v24 * v21, v38);
          sub_10059CEA4(v21);
          *v28 = v41[0];
          v32 = swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v37 + 56))(v31, 0, 1, v39, v32);
        }
      }
      else
      {
        sub_10011FF54((uint64_t)v7);
        sub_10011FF54((uint64_t)v10);
        sub_10011FF54((uint64_t)v13);
      }
      v21 = (v21 + 1) & v23;
      v22 = v25;
      if (((*(_QWORD *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      {
        v34 = swift_bridgeObjectRelease();
        v5 = v37;
        v35 = v38;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v35, 1, 1, v39, v34);
      }
    }
  }
  v34 = swift_bridgeObjectRelease();
  v35 = v38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v35, 1, 1, v39, v34);
}

uint64_t sub_10059C738(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t result;
  uint64_t v23;

  v7 = v4;
  swift_bridgeObjectRelease(*v7);
  v10 = __CocoaSet.count.getter(a1);
  v11 = swift_unknownObjectRetain(a1);
  v12 = a3(v11, v10);
  v23 = v12;
  v13 = *(_QWORD *)(v12 + 40);
  swift_retain(v12);
  v14 = NSObject._rawHashValue(seed:)(v13);
  v15 = -1 << *(_BYTE *)(v12 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    a4(0);
    v17 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v16);
    v18 = static NSObject.== infix(_:_:)(v17);

    if ((v18 & 1) != 0)
    {
LABEL_6:
      swift_release(v12);
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v16);
      sub_100009E80(v16);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v7 = v23;
        return v12;
      }
      __break(1u);
    }
    else
    {
      v19 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v19;
        if (((*(_QWORD *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v16);
        v21 = static NSObject.== infix(_:_:)(v20);

        if ((v21 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v12);
    __break(1u);
  }
  result = swift_release(v12);
  __break(1u);
  return result;
}

uint64_t sub_10059C8C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(__n128), unint64_t *a4, _QWORD *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  __n128 v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t result;
  uint64_t v24;

  v9 = v5;
  swift_bridgeObjectRelease();
  __CocoaSet.count.getter(a1);
  v12 = swift_unknownObjectRetain(a1);
  v13 = a3(v12);
  v24 = v13;
  v14 = *(_QWORD *)(v13 + 40);
  swift_retain();
  v15 = NSObject._rawHashValue(seed:)(v14);
  v16 = -1 << *(_BYTE *)(v13 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    sub_1000151B0(0, a4, a5);
    v18 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v17);
    v19 = static NSObject.== infix(_:_:)(v18);

    if ((v19 & 1) != 0)
    {
LABEL_6:
      swift_release(v13);
      v13 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v17);
      sub_100009E80(v17);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v9 = v24;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v20 = ~v16;
      while (1)
      {
        v17 = (v17 + 1) & v20;
        if (((*(_QWORD *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          break;
        v21 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v17);
        v22 = static NSObject.== infix(_:_:)(v21);

        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v13);
    __break(1u);
  }
  result = swift_release(v13);
  __break(1u);
  return result;
}

unint64_t sub_10059CA64(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_10059CC28(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v28 = v1;
    v10 = ~v8;
    swift_retain();
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    v30 = v7;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11 + 1) & v10;
      v13 = *(_QWORD *)(v31 + 72);
      v29 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v14 = v13 * v9;
        v29(v5, *(_QWORD *)(v6 + 48) + v13 * v9, v3);
        v15 = *(_QWORD *)(v6 + 40);
        v16 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v3, v16);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 < v12 || a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_6;
        }
        v21 = *(_QWORD *)(v6 + 48);
        v22 = v13 * a1;
        v23 = v21 + v13 * a1;
        if (v13 * a1 < v14 || v23 >= v21 + v14 + v13)
        {
          swift_arrayInitWithTakeFrontToBack(v23);
        }
        else
        {
          a1 = v9;
          if (v22 == v14)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23);
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v30 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v30 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v6);
    v1 = v28;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v24 = *v1;
  v25 = *(_QWORD *)(*v1 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
}

void sub_10059CEA4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v33 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v3 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v31 = v1;
    v10 = ~v8;
    swift_retain();
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v32 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v3 + 72);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        sub_10011FECC(*(_QWORD *)(v6 + 48) + v12 * v9, (uint64_t)v5);
        Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
        v18 = type metadata accessor for UUID(0);
        v19 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v34, v18, v19);
        v20 = type metadata accessor for Date(0);
        v21 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        dispatch thunk of Hashable.hash(into:)(v34, v20, v21);
        v22 = Hasher._finalize()();
        sub_10011FF54((uint64_t)v5);
        v13 = v17;
        v23 = v22 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v23 < v32)
          {
            v7 = v14;
            v12 = v15;
            goto LABEL_5;
          }
          v7 = v14;
          v12 = v15;
          if (a1 < v23)
            goto LABEL_5;
        }
        else
        {
          v7 = v14;
          v12 = v15;
          if (v23 < v32 && a1 < v23)
            goto LABEL_5;
        }
        v24 = *(_QWORD *)(v6 + 48);
        v25 = v12 * a1;
        v26 = v24 + v12 * a1;
        if (v12 * a1 < v16 || v26 >= v24 + v16 + v12)
        {
          swift_arrayInitWithTakeFrontToBack(v26);
          goto LABEL_17;
        }
        a1 = v9;
        if (v25 != v16)
        {
          swift_arrayInitWithTakeBackToFront(v26);
LABEL_17:
          v13 = v17;
          a1 = v9;
        }
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v6);
    v1 = v31;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
}

void sub_10059D18C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  _BYTE v34[32];
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;

  v2 = a1;
  v33 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
  }
  if (v3)
  {
    v38 = _swiftEmptyArrayStorage;
    sub_1001C2454(0, v3 & ~(v3 >> 63), 0);
    if (v33)
    {
      if (v2 < 0)
        v4 = v2;
      else
        v4 = v2 & 0xFFFFFFFFFFFFFF8;
      v5 = __CocoaSet.startIndex.getter(v4);
      v7 = 1;
    }
    else
    {
      v5 = sub_100364E8C(v2);
      v7 = v8 & 1;
    }
    v35 = v5;
    v36 = v6;
    v37 = v7;
    if (v3 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }
    else
    {
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
      if (v2 < 0)
        v9 = v2;
      v31 = v9;
      do
      {
        while (1)
        {
          v16 = v35;
          v15 = v36;
          v17 = v37;
          sub_100364E78(v35, v36, v37, v2);
          v19 = v18;
          v20 = objc_msgSend(a2, "indexOfEqualObject:", v18);

          v21 = v38;
          swift_isUniquelyReferenced_nonNull_native(v38);
          if ((v22 & 1) == 0)
          {
            sub_1001C2454(0, v21[2] + 1, 1);
            v21 = v38;
          }
          v24 = v21[2];
          v23 = v21[3];
          if (v24 >= v23 >> 1)
          {
            sub_1001C2454(v23 > 1, v24 + 1, 1);
            v21 = v38;
          }
          v21[2] = v24 + 1;
          v21[v24 + 4] = v20;
          if (v33)
            break;
          v10 = sub_10036456C(v16, v15, v17, v2);
          v12 = v11;
          v14 = v13;
          sub_1000E515C(v16, v15, v17);
          v35 = v10;
          v36 = v12;
          v37 = v14 & 1;
          if (!--v3)
            goto LABEL_28;
        }
        if ((v17 & 1) == 0)
          goto LABEL_31;
        v25 = __CocoaSet.Index.handleBitPattern.getter(v16, v15);
        if (v25)
        {
          swift_isUniquelyReferenced_nonNull_native(v25);
          v27 = v26;
        }
        else
        {
          v27 = 1;
        }
        v28 = sub_10001A630(&qword_100850758);
        v29 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v34, v28);
        __CocoaSet.formIndex(after:isUnique:)(v30, v27, v31);
        v29(v34, 0);
        --v3;
      }
      while (v3);
LABEL_28:
      sub_1000E515C(v35, v36, v37);
    }
  }
}

uint64_t sub_10059D3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class isa;
  id v27;

  v0 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v1 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v2 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  result = Sequence.elements<A>(ofType:)(v0, v1, v0, v2);
  v4 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v5 = result;
    if (result)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease(v4);
    v24 = sub_1001E03A8((uint64_t)_swiftEmptyArrayStorage);
    swift_release(_swiftEmptyArrayStorage);
    v25 = objc_allocWithZone((Class)NSOrderedSet);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v27 = objc_msgSend(v25, "initWithArray:", isa, swift_bridgeObjectRelease(v24).n128_f64[0]);

    return (uint64_t)v27;
  }
  v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_25;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = REMSmartListTypeCustom;
    while (1)
    {
      v10 = (v4 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4)
          : *(id *)(v4 + 8 * v6 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, "smartListType");
      if (!v12)
        break;
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v9 = v18;
      if (!v16)
        goto LABEL_6;
      if (v14 == v17 && v16 == v18)
      {
        swift_bridgeObjectRelease_n(v16, 2);
LABEL_20:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v22 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v11);
        specialized ContiguousArray._endMutation()(v23);
        goto LABEL_7;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v9);
      if ((v20 & 1) != 0)
        goto LABEL_20;

LABEL_7:
      if (v5 == ++v6)
        goto LABEL_25;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v9 = v8;
LABEL_6:

    swift_bridgeObjectRelease(v9);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10059D694(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDF98, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_10059D6DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10059D700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];
  void *v7;
  void *v8;

  v7 = &type metadata for Bool;
  v8 = &protocol witness table for Bool;
  v6[0] = 0;
  v0 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.setter(v6, 0xD000000000000012, 0x80000001007043B0, v0);
  v7 = &type metadata for Bool;
  v8 = &protocol witness table for Bool;
  v6[0] = 0;
  CKRecordKeyValueSetting.subscript.setter(v6, 0xD000000000000012, 0x8000000100704390, v0);
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("ResolutionTokenMap"));
  CKRecord.subscript.setter(0, v1, v2);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  CKRecord.subscript.setter(0, v3, v4);
  return CKRecord.subscript.setter(0, 0xD000000000000018, 0x8000000100702110);
}

uint64_t _s6FieldsOwst_6(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10059D878 + 4 * byte_1006C356F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10059D8AC + 4 * byte_1006C356A[v4]))();
}

uint64_t sub_10059D8AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059D8B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059D8BCLL);
  return result;
}

uint64_t sub_10059D8C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059D8D0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10059D8D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059D8DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_6()
{
  return &_s6FieldsON_6;
}

unint64_t sub_10059D8F8(uint64_t a1)
{
  unint64_t result;

  result = sub_10059D91C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10059D91C()
{
  unint64_t result;

  result = qword_100850780;
  if (!qword_100850780)
  {
    result = swift_getWitnessTable(&unk_1006C35C0, &_s6FieldsON_6);
    atomic_store(result, (unint64_t *)&qword_100850780);
  }
  return result;
}

unint64_t sub_10059D960(uint64_t a1)
{
  unint64_t result;

  result = sub_10059D984();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10059D984()
{
  unint64_t result;

  result = qword_100850788;
  if (!qword_100850788)
  {
    result = swift_getWitnessTable(&unk_1006C3588, &_s6FieldsON_6);
    atomic_store(result, (unint64_t *)&qword_100850788);
  }
  return result;
}

unint64_t sub_10059D9CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100850790;
  if (!qword_100850790)
  {
    v1 = sub_1000A5A94(&qword_100850798);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100850790);
  }
  return result;
}

unint64_t sub_10059DA1C()
{
  unint64_t result;

  result = qword_1008507A0;
  if (!qword_1008507A0)
  {
    result = swift_getWitnessTable(&unk_1006C3670, &_s6FieldsON_6);
    atomic_store(result, (unint64_t *)&qword_1008507A0);
  }
  return result;
}

void sub_10059DA70(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25[2];
  _QWORD v26[5];

  v2 = a1;
  v25[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaSet.makeIterator()(a1);
    v4 = type metadata accessor for REMObjectID_Codable(0);
    v5 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v2 = v26[0];
    v23 = v26[1];
    v6 = v26[2];
    v7 = v26[3];
    v8 = v26[4];
  }
  else
  {
    v7 = 0;
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v8)
    {
      v13 = (v8 - 1) & v8;
      v14 = __clz(__rbit64(v8)) | (v7 << 6);
      v15 = v7;
      goto LABEL_31;
    }
    v20 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v20 >= v12)
      goto LABEL_34;
    v21 = *(_QWORD *)(v23 + 8 * v20);
    v15 = v7 + 1;
    if (!v21)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v12)
        goto LABEL_34;
      v21 = *(_QWORD *)(v23 + 8 * v15);
      if (!v21)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v12)
          goto LABEL_34;
        v21 = *(_QWORD *)(v23 + 8 * v15);
        if (!v21)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v12)
            goto LABEL_34;
          v21 = *(_QWORD *)(v23 + 8 * v15);
          if (!v21)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v12)
              goto LABEL_34;
            v21 = *(_QWORD *)(v23 + 8 * v15);
            if (!v21)
            {
              v22 = v7 + 6;
              while (v12 != v22)
              {
                v21 = *(_QWORD *)(v23 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1000C6560(v2);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_31:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    if (!v19)
      goto LABEL_34;
    while (1)
    {
      sub_1002DB304((Swift::Int *)v25, v19);

      v7 = v15;
      v8 = v13;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v16 = __CocoaSet.Iterator.next()(a1);
      if (v16)
      {
        v17 = v16;
        v24 = v16;
        v18 = type metadata accessor for REMObjectID_Codable(0);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v25[0];
        swift_unknownObjectRelease(v17);
        v15 = v7;
        v13 = v8;
        if (v19)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_10059DD04(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25[2];
  _QWORD v26[5];

  v2 = a1;
  v25[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaSet.makeIterator()(a1);
    v4 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
    v5 = sub_100332AC0();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v2 = v26[0];
    v23 = v26[1];
    v6 = v26[2];
    v7 = v26[3];
    v8 = v26[4];
  }
  else
  {
    v7 = 0;
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v8)
    {
      v13 = (v8 - 1) & v8;
      v14 = __clz(__rbit64(v8)) | (v7 << 6);
      v15 = v7;
      goto LABEL_31;
    }
    v20 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v20 >= v12)
      goto LABEL_34;
    v21 = *(_QWORD *)(v23 + 8 * v20);
    v15 = v7 + 1;
    if (!v21)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v12)
        goto LABEL_34;
      v21 = *(_QWORD *)(v23 + 8 * v15);
      if (!v21)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v12)
          goto LABEL_34;
        v21 = *(_QWORD *)(v23 + 8 * v15);
        if (!v21)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v12)
            goto LABEL_34;
          v21 = *(_QWORD *)(v23 + 8 * v15);
          if (!v21)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v12)
              goto LABEL_34;
            v21 = *(_QWORD *)(v23 + 8 * v15);
            if (!v21)
            {
              v22 = v7 + 6;
              while (v12 != v22)
              {
                v21 = *(_QWORD *)(v23 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1000C6560(v2);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_31:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    if (!v19)
      goto LABEL_34;
    while (1)
    {
      sub_1002DBDA4((Swift::Int *)v25, v19);

      v7 = v15;
      v8 = v13;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v16 = __CocoaSet.Iterator.next()(a1);
      if (v16)
      {
        v17 = v16;
        v24 = v16;
        v18 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v25[0];
        swift_unknownObjectRelease(v17);
        v15 = v7;
        v13 = v8;
        if (v19)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_10059DFA0(uint64_t a1, void *a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14[3];

  v3 = 0;
  v14[2] = a2;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    sub_1002DCD00(v14, *(id *)(*(_QWORD *)(a1 + 48) + 16 * v10), *(_QWORD *)(v10 + 8));

  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10059E118(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[3];

  v3 = 0;
  v17[2] = a2;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1002DB0E4(v17, v12, v13);
    swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10059E294(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[3];

  v3 = 0;
  v17[2] = a2;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1002DB0E4(v17, v12, v13);
    swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10059E410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008507B0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008507B0);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10059E4A0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "intelligentGrocery");
  qword_1008507C8 = (uint64_t)result;
  return result;
}

uint64_t sub_10059E4D8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v2[17] = a1;
  v2[18] = v3;
  v4 = type metadata accessor for Locale(0);
  v2[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[20] = v5;
  v2[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v2[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[23] = v7;
  v2[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v2[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[26] = v9;
  v2[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10059E58C, 0, 0);
}

uint64_t sub_10059E58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *log;
  uint64_t v82;
  os_log_type_t type;
  uint64_t v84;
  uint64_t v85[2];

  v2 = static os_signpost_type_t.begin.getter(a1);
  if (qword_100837918 != -1)
    swift_once(&qword_100837918, sub_10059E4A0);
  v3 = v1 + 128;
  v5 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 200);
  v7 = qword_1008507C8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v2, &_mh_execute_header, v7, "RDGroceryOperationDownloadGroceryModelAssetsFromTrial", 53, 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (qword_100837910 != -1)
    swift_once(&qword_100837910, sub_10059E410);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_1008507B0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v1 + 144);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v85[0] = v14;
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v1 + 64) = v12;
    v15 = v12;
    v3 = v1 + 128;
    MetatypeMetadata = swift_getMetatypeMetadata(v15);
    v17 = String.init<A>(describing:)(v1 + 64, MetatypeMetadata);
    *(_QWORD *)(v1 + 128) = sub_10001A820(v17, v18, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Start execution", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  Date.init()(v19);
  v21 = type metadata accessor for REMTrialClient(0, v20);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = REMTrialClient.init()();
  v23 = sub_10059F0C8();
  v24 = sub_10059FEDC(*(void **)(v1 + 136));
  v25 = v1 + 16;
  swift_bridgeObjectRetain_n(v24, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v84 = (uint64_t)v24;
  if (os_log_type_enabled(v27, v28))
  {
    v78 = *(_QWORD *)(v1 + 168);
    v79 = *(_QWORD *)(v1 + 160);
    v80 = *(_QWORD *)(v1 + 152);
    type = v28;
    v29 = *(_QWORD *)(v1 + 144);
    v30 = swift_slowAlloc(32, -1);
    v82 = swift_slowAlloc(96, -1);
    v85[0] = v82;
    *(_DWORD *)v30 = 136446722;
    log = v27;
    *(_QWORD *)(v1 + 72) = v29;
    v31 = swift_getMetatypeMetadata(v29);
    v32 = String.init<A>(describing:)(v1 + 72, v31);
    *(_QWORD *)(v1 + 104) = sub_10001A820(v32, v33, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2082;
    swift_bridgeObjectRetain(v24);
    v35 = Set.description.getter(v34, &type metadata for String, &protocol witness table for String);
    v37 = v36;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 112) = sub_10001A820(v35, v37, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v24, 2);
    *(_WORD *)(v30 + 22) = 2080;
    v39 = static Locale.current.getter(v38);
    v40 = Locale.identifier.getter(v39);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    *(_QWORD *)(v1 + 120) = sub_10001A820(v40, v42, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v3);
    v25 = v1 + 16;
    swift_bridgeObjectRelease();
    v27 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: {distinctGroceryLocaleIDsOfExistingGroceryLists: %{public}s}, {current locale: %s}", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v24, 2);
  }

  v44 = *(_QWORD *)(v1 + 160);
  v43 = *(_QWORD *)(v1 + 168);
  v45 = *(_QWORD *)(v1 + 152);
  v46 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v46, v25);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v48 = static Locale.current.getter(inited);
  v49 = Locale.identifier.getter(v48);
  v51 = v50;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  *(_QWORD *)(inited + 32) = v49;
  *(_QWORD *)(inited + 40) = v51;
  v52 = sub_10059FE60(inited, v84);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  sub_10059E118(v23, v52);
  *(_QWORD *)(v1 + 80) = v53;
  v54 = sub_10001A630(&qword_100841A60);
  v55 = sub_1005A02E0();
  v56 = Sequence<>.filterToSet(_:)(sub_10059F37C, 0, v54, v55, &protocol witness table for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n(v56, 2);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter(v59);
  if (os_log_type_enabled(v59, (os_log_type_t)v60))
  {
    v61 = *(_QWORD *)(v1 + 144);
    v62 = swift_slowAlloc(22, -1);
    v63 = swift_slowAlloc(64, -1);
    v85[0] = v63;
    *(_DWORD *)v62 = 136446466;
    v64 = sub_1000D92EC(v61);
    *(_QWORD *)(v1 + 88) = sub_10001A820(v64, v65, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96);
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2082;
    swift_bridgeObjectRetain(v56);
    v67 = Set.description.getter(v66, &type metadata for String, &protocol witness table for String);
    v69 = v68;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 96) = sub_10001A820(v67, v69, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v56, 2);
    _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v60, "%{public}s: Requesting grocery model assets from Trial {localeIDsOfGroceryModelAssetsToRequest: %{public}s}", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v56, 2);
  }

  v70 = *(_QWORD *)(v1 + 144);
  v71 = swift_allocObject(&unk_1007FBBD0, 24, 7);
  *(_QWORD *)(v71 + 16) = v70;
  dispatch thunk of REMTrialClient.requestGroceryModelAssetsForLocales(withLocaleIdentifiers:completion:)(v56, sub_1005A033C, v71);
  v72 = *(_QWORD *)(v1 + 216);
  v74 = *(_QWORD *)(v1 + 184);
  v73 = *(_QWORD *)(v1 + 192);
  v76 = *(_QWORD *)(v1 + 168);
  v75 = *(_QWORD *)(v1 + 176);
  v77 = *(_QWORD *)(v1 + 144);
  swift_release(v71);
  swift_bridgeObjectRelease();
  swift_release(v22);
  sub_10059EDE0(v73, v77);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10059EDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MetatypeMetadata;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for OSSignpostID(0);
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837910 != -1)
    swift_once(&qword_100837910, sub_10059E410);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_1008507B0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v29 = v4;
    v16 = v15;
    v28 = swift_slowAlloc(32, -1);
    v31 = v28;
    v32 = a2;
    *(_DWORD *)v16 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(a2);
    v18 = String.init<A>(describing:)(&v32, MetatypeMetadata);
    v32 = sub_10001A820(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2048;
    v32 = Date.rem_elapsedInMilliseconds.getter(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: Finished execution {elapsedSeconds: %f}", (uint8_t *)v16, 0x16u);
    v21 = v28;
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v16;
    v4 = v29;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v24 = static os_signpost_type_t.end.getter(v23);
  if (qword_100837918 != -1)
    swift_once(&qword_100837918, sub_10059E4A0);
  v25 = qword_1008507C8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v24, &_mh_execute_header, v25, "RDGroceryOperationDownloadGroceryModelAssetsFromTrial", 53, 2, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v6, v4);
}

uint64_t sub_10059F0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  _BYTE v24[48];
  uint64_t v25;

  v1 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v1);
  v3 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v8 = qword_100872288;
  v9 = (void *)swift_retain();
  v10 = sub_1003011F8(v9);
  swift_release(v8);
  if (!v10)
    goto LABEL_8;
  v11 = objc_msgSend(v10, "secondaryGroceryLocalesInfoAsData");
  if (!v11)
  {

LABEL_8:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    goto LABEL_9;
  }
  v12 = v11;
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  v16 = type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
  sub_10009FC50((unint64_t *)&unk_100850770, type metadata accessor for RDSecondaryGroceryLocalesInfo, (uint64_t)&unk_1006BEC18);
  static REMJSONRepresentable.fromJSONData(_:)(&v25, v13, v15);
  sub_1000A71C8(v13, v15);

  if (v0)
    return v16;
  v18 = v25;
  v19 = *(_QWORD *)(v25 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  swift_bridgeObjectRetain(v19);
  swift_release(v18);
  sub_10039F460(v19, (uint64_t)v3);
  v20 = swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v20) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v3, v4);
    v21 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v21, v24);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = Locale.identifier.getter(inited);
    *(_QWORD *)(inited + 40) = v23;
    v16 = sub_10011EE40(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
LABEL_9:
  sub_10000882C((uint64_t)v3, (uint64_t *)&unk_10083FBE0);
  return sub_10011EE40((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10059F37C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for REMGroceryDummyModel(0);
  return static REMGroceryDummyModel.isSupported(localeIdentifier:)(v1, v2) & 1;
}

uint64_t sub_10059F3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return swift_task_switch(sub_10059F3E4, 0, 0);
}

uint64_t sub_10059F3E4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = v0 + 2;
  v3 = (void *)v1[21];
  v4 = objc_msgSend((id)objc_opt_self(UAFAssetSetManager), "sharedManager");
  v1[22] = v4;
  v5 = String._bridgeToObjectiveC()();
  v1[23] = v5;
  v6 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v7 + 32) = v3;
  specialized Array._endMutation()(v7);
  sub_1000151B0(0, &qword_1008508B8, UAFAssetSetSubscription_ptr);
  v8 = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v1[24] = isa;
  v10 = swift_bridgeObjectRelease();
  type metadata accessor for RDIDispatchQueue(0, v10);
  v11 = static RDIDispatchQueue.utilityQueue.getter();
  v1[25] = v11;
  v1[2] = v1;
  v1[3] = sub_10059F564;
  v12 = swift_continuation_init(v2, 1);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_100348E30;
  v1[3] = &unk_1007FBCA0;
  v1[4] = v12;
  objc_msgSend(v4, "subscribe:subscriptions:queue:completion:", v5, isa, v11, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_10059F564()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_10059F60C;
  else
    v2 = sub_10059F5C4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10059F5C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 200);
  v3 = *(void **)(v0 + 184);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10059F60C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21[2];

  v2 = *(void **)(v1 + 200);
  v4 = *(void **)(v1 + 184);
  v3 = *(void **)(v1 + 192);
  v5 = *(void **)(v1 + 176);
  swift_willThrow(a1);

  if (qword_100837910 != -1)
    swift_once(&qword_100837910, sub_10059E410);
  v6 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v1 + 160);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008507B0);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v6);
  swift_bridgeObjectRetain(v7);
  v9 = swift_errorRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v1 + 208);
  v14 = *(_QWORD *)(v1 + 160);
  if (v12)
  {
    v15 = *(_QWORD *)(v1 + 152);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v21[0] = v17;
    *(_DWORD *)v16 = 136446466;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v1 + 80) = sub_10001A820(v15, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v16 + 12) = 2080;
    swift_getErrorValue(v13, v1 + 144, v1 + 120);
    v18 = Error.rem_errorDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
    *(_QWORD *)(v1 + 80) = sub_10001A820(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    swift_bridgeObjectRelease();
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "requestNLAndSiriBertAssets: Failed to UAFAssetSetManager.subscribe %{public}s with error: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v13);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v1 + 208));
    swift_bridgeObjectRelease_n(v14, 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10059F884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return swift_task_switch(sub_10059F8A0, 0, 0);
}

uint64_t sub_10059F8A0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  _QWORD *v7;
  Class isa;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = v0 + 2;
  v3 = v1[21];
  v4 = objc_msgSend((id)objc_opt_self(UAFAssetSetManager), "sharedManager");
  v1[22] = v4;
  v5 = String._bridgeToObjectiveC()();
  v1[23] = v5;
  swift_bridgeObjectRetain(v3);
  v7 = sub_1001E8BAC(v6);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v1[24] = isa;
  swift_release(v7);
  type metadata accessor for RDIDispatchQueue(0, v9);
  v10 = static RDIDispatchQueue.utilityQueue.getter();
  v1[25] = v10;
  v1[2] = v1;
  v1[3] = sub_10059F9DC;
  v11 = swift_continuation_init(v2, 1);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_100348E30;
  v1[3] = &unk_1007FBC88;
  v1[4] = v11;
  objc_msgSend(v4, "unsubscribe:subscriptionNames:queue:completion:", v5, isa, v10, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_10059F9DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_10059FA3C;
  else
    v2 = sub_10059F5C4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10059FA3C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24[2];

  v2 = *(void **)(v1 + 200);
  v4 = *(void **)(v1 + 184);
  v3 = *(void **)(v1 + 192);
  v5 = *(void **)(v1 + 176);
  swift_willThrow(a1);

  if (qword_100837910 != -1)
    swift_once(&qword_100837910, sub_10059E410);
  v6 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v1 + 168);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_1008507B0);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v6);
  swift_bridgeObjectRetain(v7);
  v9 = swift_errorRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v1 + 208);
  v14 = *(_QWORD *)(v1 + 168);
  if (v12)
  {
    v15 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v24[0] = v23;
    *(_DWORD *)v15 = 136446466;
    swift_bridgeObjectRetain(v14);
    v17 = Set.description.getter(v16, &type metadata for String, &protocol witness table for String);
    v19 = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 80) = sub_10001A820(v17, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v14, 2);
    *(_WORD *)(v15 + 12) = 2080;
    swift_getErrorValue(v13, v1 + 144, v1 + 120);
    v20 = Error.rem_errorDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
    *(_QWORD *)(v1 + 80) = sub_10001A820(v20, v21, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
    swift_bridgeObjectRelease();
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "unsubscribeUAFAsset: Failed to UAFAssetSetManager.unsubscribe %{public}s with error: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v13);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v1 + 208));
    swift_bridgeObjectRelease_n(v14, 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10059FCDC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t type metadata accessor for RDGroceryOperationDownloadGroceryModelAssetsFromTrial()
{
  return objc_opt_self(_TtC7remindd53RDGroceryOperationDownloadGroceryModelAssetsFromTrial);
}

uint64_t sub_10059FD0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10085087C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000CAD70;
  return sub_10059E4D8(a1);
}

uint64_t sub_10059FD5C(uint64_t a1, uint64_t a2)
{
  uint64_t PredicateType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;

  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v5 = *(_QWORD *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v17 - v10;
  v18 = a2;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v14 = *(_QWORD *)(v5 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    do
    {
      v15(v7, v13, PredicateType, v9);
      sub_1002DB5B0((uint64_t)v11, (uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, PredicateType);
      v13 += v14;
      --v12;
    }
    while (v12);
    return v18;
  }
  return a2;
}

uint64_t sub_10059FE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      sub_1002DB0E4(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

void *sub_10059FEDC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Class isa;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  id v29;
  char *v30;
  char *v31;
  uint64_t v32[2];
  _OWORD v33[2];
  uint64_t v34[4];
  void *v35;

  v2 = v1;
  v4 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v6, v7, 27);
  v8 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v9 = objc_allocWithZone((Class)NSFetchRequest);
  v10 = String._bridgeToObjectiveC()();
  v11 = (uint64_t)objc_msgSend(v9, "initWithEntityName:", v10, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend((id)v11, "setResultType:", 2);
  objc_msgSend((id)v11, "setReturnsDistinctResults:", 1);
  sub_10000A3AC();
  v13 = v12;
  objc_msgSend((id)v11, "setPredicate:", v12);

  v14 = sub_10001A630((uint64_t *)&unk_100839E80);
  v15 = swift_allocObject(v14, 64, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 32) = 0x4C797265636F7267;
  *(_QWORD *)(v15 + 40) = 0xEF4449656C61636FLL;
  v16 = (char *)&type metadata for Any;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend((id)v11, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v18 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v19 = a1;
  v20 = NSManagedObjectContext.fetch<A>(_:)(v11, v18);
  if (v1)
  {
    sub_1000EC49C((uint64_t)v6);

    return v19;
  }
  v21 = v20;
  v35 = &_swiftEmptySetSingleton;
  if (v20 >> 62)
    goto LABEL_21;
  v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v20);
  if (v22)
  {
LABEL_5:
    v28 = v2;
    v29 = (id)v11;
    v30 = v6;
    v6 = (char *)(v21 & 0xC000000000000001);
    v11 = 4;
    v31 = v16 + 8;
    while (1)
    {
      if (v6)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v21);
      else
        v23 = *(id *)(v21 + 8 * v11);
      v24 = v23;
      v16 = (char *)(v11 - 3);
      if (__OFADD__(v11 - 4, 1))
      {
        __break(1u);
LABEL_21:
        if (v21 < 0)
          v26 = v21;
        else
          v26 = v21 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v21);
        v22 = _CocoaArrayWrapper.endIndex.getter(v26);
        if (!v22)
          break;
        goto LABEL_5;
      }
      *(_QWORD *)&v33[0] = 0x4C797265636F7267;
      *((_QWORD *)&v33[0] + 1) = 0xEF4449656C61636FLL;
      v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v33, &type metadata for String);
      v25 = objc_msgSend(v24, "__swift_objectForKeyedSubscript:", v2);
      swift_unknownObjectRelease(v2);
      if (v25)
      {
        _bridgeAnyObjectToAny(_:)(v33, v25);
        swift_unknownObjectRelease(v25);
      }
      else
      {
        memset(v33, 0, sizeof(v33));
      }
      sub_10001A5E8((uint64_t)v33, (uint64_t)v34);
      if (v34[3])
      {
        if ((swift_dynamicCast(v32, v34, v31, &type metadata for String, 6) & 1) != 0)
        {
          sub_1002DB0E4(v34, v32[0], v32[1]);

          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      else
      {
        sub_10000882C((uint64_t)v34, (uint64_t *)&unk_10083D5B0);
      }

LABEL_8:
      ++v11;
      if (v16 == (char *)v22)
      {

        swift_bridgeObjectRelease();
        v19 = v35;
        v6 = v30;
        goto LABEL_26;
      }
    }
  }

  swift_bridgeObjectRelease();
  v19 = &_swiftEmptySetSingleton;
LABEL_26:
  sub_1000EC49C((uint64_t)v6);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_1005A02E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100841A68;
  if (!qword_100841A68)
  {
    v1 = sub_1000A5A94(&qword_100841A60);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100841A68);
  }
  return result;
}

uint64_t sub_1005A032C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1005A0340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  id v44;
  uint64_t v45;
  __n128 v46;
  unint64_t i;
  BOOL v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t inited;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSString v131;
  NSDictionary v132;
  __n128 v133;
  Class isa;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  int v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t ObjectType;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t v157;
  int64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  unint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  __n128 v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  int64_t v196;
  unint64_t v197;
  uint64_t v198;
  id v199;
  __int128 v200;
  uint64_t v201;
  _QWORD v202[4];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205[15];
  _QWORD v206[3];
  char v207[16];
  _QWORD *v208;
  _BYTE *v209;

  v2 = sub_10001A630(&qword_100839A10);
  __chkstk_darwin(v2);
  v181 = (char *)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v172 - v5;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v194 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v179 = *(_QWORD *)(v9 - 8);
  v180 = v9;
  __chkstk_darwin(v9);
  v182 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v192 = (char *)&v172 - v13;
  v14 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting(0, v12);
  v185 = *(_QWORD *)(v14 - 8);
  v186 = v14;
  v15 = __chkstk_darwin(v14);
  v189 = (char *)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for REMGroceryLocaleMapping(0, v15);
  v187 = *(_QWORD *)(v17 - 8);
  v188 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend((id)objc_opt_self(UAFAssetSetManager), "sharedManager");
  v184 = (unint64_t)"odelAssetsFromTrial";
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "subscriptionsForSubscriber:", v21);

  if (!v22)
  {
    v24 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_3;
LABEL_15:
    if (v24 < 0)
      v37 = v24;
    else
      v37 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v23 = sub_1000151B0(0, &qword_1008508B8, UAFAssetSetSubscription_ptr);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  if ((unint64_t)v24 >> 62)
    goto LABEL_15;
LABEL_3:
  v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  v193 = v6;
  v197 = (unint64_t)v19;
  v190 = a1;
  if (v25)
  {
    v205[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
      goto LABEL_155;
    v26 = 0;
    v27 = (_QWORD *)v205[0];
    do
    {
      if ((v24 & 0xC000000000000001) != 0)
        v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
      else
        v28 = *(id *)(v24 + 8 * v26 + 32);
      v29 = v28;
      v30 = objc_msgSend(v28, "name");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v205[0] = (uint64_t)v27;
      v35 = v27[2];
      v34 = v27[3];
      if (v35 >= v34 >> 1)
      {
        sub_1001C1B0C(v34 > 1, v35 + 1, 1);
        v27 = (_QWORD *)v205[0];
      }
      ++v26;
      v27[2] = v35 + 1;
      v36 = &v27[2 * v35];
      v36[4] = v31;
      v36[5] = v33;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
    a1 = v190;
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = _swiftEmptyArrayStorage;
  }
  v38 = sub_10011EE40((uint64_t)v27);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)(v38 + 16))
    {
      v105 = type metadata accessor for TaskPriority(0);
      v106 = (uint64_t)v181;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v181, 1, 1, v105);
      v107 = (_QWORD *)swift_allocObject(&unk_1007FBC70, 56, 7);
      v107[2] = 0;
      v107[3] = 0;
      v108 = v184 | 0x8000000000000000;
      v107[4] = 0xD00000000000001BLL;
      v107[5] = v108;
      v107[6] = v38;
      swift_bridgeObjectRetain(v38);
      v109 = sub_1000CAAE0(v106, (uint64_t)&unk_1008508B0, (uint64_t)v107);
      swift_bridgeObjectRelease();
LABEL_88:
      swift_release(v109);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return;
  }
  v183 = v38;
  v208 = &_swiftEmptySetSingleton;
  v209 = &_swiftEmptySetSingleton;
  v39 = *(_QWORD *)(a1 + 56);
  v195 = a1 + 56;
  v40 = 1 << *(_BYTE *)(a1 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & v39;
  v196 = (unint64_t)(v40 + 63) >> 6;
  v43 = swift_bridgeObjectRetain(a1);
  v44 = 0;
  v45 = 0;
  v43.n128_u64[0] = 136446210;
  v178 = v43;
  v177 = (char *)&type metadata for Any + 8;
  v46.n128_u64[1] = 2;
  v200 = xmmword_1006A3C00;
  v46.n128_u64[0] = 136446466;
  v191 = v46;
  if (!v42)
    goto LABEL_25;
LABEL_24:
  v198 = (v42 - 1) & v42;
  v199 = v44;
  for (i = __clz(__rbit64(v42)) | ((_QWORD)v44 << 6); ; i = __clz(__rbit64(v50)) + (v49 << 6))
  {
    v52 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v54 = *v52;
    v53 = v52[1];
    v55 = type metadata accessor for REMTrialClient(0, v46);
    swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v56 = swift_bridgeObjectRetain(v53);
    v57 = REMTrialClient.init()(v56);
    if (!v45)
    {
      v59 = v57;
      dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()(v57);
      v60 = REMGroceryLocaleMapping.localeSetting(for:)(v54, v53);
      v61 = REMGroceryLocaleMapping.LocaleSetting.base.getter(v60);
      dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)(v61);
      swift_bridgeObjectRelease();
      v73 = v182;
      URL.appendingPathComponent(_:)(0x74736566696E616DLL, 0xED00006E6F736A2ELL);
      v74 = Data.init(contentsOf:options:)(v73, 0);
      v76 = v75;
      v176 = v54;
      v77 = type metadata accessor for JSONDecoder(0);
      v78 = swift_allocObject(v77, *(unsigned int *)(v77 + 48), *(unsigned __int16 *)(v77 + 52));
      v79 = JSONDecoder.init()(v78);
      v80 = sub_1001CACF4();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for REMGroceryClassifier.ModelInfo, v74, v76, &type metadata for REMGroceryClassifier.ModelInfo, v80);
      v201 = 0;
      v81 = v180;
      v82 = *(void (**)(char *, uint64_t))(v179 + 8);
      v82(v182, v180);
      swift_release(v79);
      sub_1000A71C8(v74, v76);
      swift_release(v59);
      v83 = (_QWORD *)v205[2];
      v174 = v205[8];
      v175 = v205[6];
      v173 = v205[12];
      v84 = v205[13];
      v82(v192, v81);
      (*(void (**)(char *, uint64_t))(v185 + 8))(v189, v186);
      (*(void (**)(unint64_t, uint64_t))(v187 + 8))(v197, v188);
      v85 = v83[2];
      if (!v85)
      {
        swift_bridgeObjectRetain(v53);
        sub_1002DB0E4(v205, v176, v53);
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      v86 = v83[4];
      if (!v86)
      {
LABEL_62:
        if (v85 != 1)
        {
          if (v83[5] == 4)
            goto LABEL_64;
          if (v85 != 2)
          {
            v100 = 6;
            while (1)
            {
              v101 = v100 - 3;
              if (__OFADD__(v100 - 4, 1))
                goto LABEL_157;
              if (v83[v100] == 4)
                break;
              ++v100;
              if (v101 == v85)
                goto LABEL_67;
            }
LABEL_64:
            if (v84)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1002DB0E4(v205, v173, v84);
              v46 = swift_bridgeObjectRelease();
LABEL_77:
              v45 = v201;
              a1 = v190;
              goto LABEL_49;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (qword_100837910 != -1)
              swift_once(&qword_100837910, sub_10059E410);
            v97 = type metadata accessor for Logger(0);
            sub_10001AAA8(v97, (uint64_t)qword_1008507B0);
            swift_bridgeObjectRetain(v53);
            v91 = Logger.logObject.getter(v98);
            v99 = static os_log_type_t.default.getter(v91);
            if (os_log_type_enabled(v91, v99))
            {
              v93 = swift_slowAlloc(12, -1);
              v94 = swift_slowAlloc(32, -1);
              v205[0] = v94;
              *(_DWORD *)v93 = v178.n128_u32[0];
              swift_bridgeObjectRetain(v53);
              *(_QWORD *)(v93 + 4) = sub_10001A820(v176, v53, v205);
              swift_bridgeObjectRelease_n(v53, 3);
              _os_log_impl((void *)&_mh_execute_header, v91, v99, "requestNLAndSiriBertAssets: siriEmeddngLocale is nil: %{public}s", (uint8_t *)v93, 0xCu);
              v96 = (char *)&type metadata for Any + 8;
              v95 = v94;
              goto LABEL_71;
            }
            goto LABEL_76;
          }
        }
LABEL_67:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_100837910 != -1)
          swift_once(&qword_100837910, sub_10059E410);
        v89 = type metadata accessor for Logger(0);
        sub_10001AAA8(v89, (uint64_t)qword_1008507B0);
        swift_bridgeObjectRetain(v53);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.info.getter(v91);
        if (os_log_type_enabled(v91, v92))
        {
          v93 = swift_slowAlloc(12, -1);
          v94 = swift_slowAlloc(32, -1);
          v205[0] = v94;
          *(_DWORD *)v93 = v178.n128_u32[0];
          swift_bridgeObjectRetain(v53);
          *(_QWORD *)(v93 + 4) = sub_10001A820(v176, v53, v205);
          swift_bridgeObjectRelease_n(v53, 3);
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "requestNLAndSiriBertAssets: skip download for siriEmeddngLocale: %{public}s", (uint8_t *)v93, 0xCu);
          v95 = v94;
          v96 = v177;
LABEL_71:
          swift_arrayDestroy(v95, 1, v96);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);

          goto LABEL_77;
        }
LABEL_76:

        v46 = swift_bridgeObjectRelease_n(v53, 2);
        goto LABEL_77;
      }
      if (v85 == 1)
        goto LABEL_60;
      if (!v83[5])
        goto LABEL_61;
      if (v85 == 2)
      {
LABEL_60:
        swift_bridgeObjectRetain(v53);
        sub_1002DB0E4(v205, v176, v53);
        swift_bridgeObjectRelease();
        v86 = v83[4];
      }
      else
      {
        v87 = 6;
        while (1)
        {
          v88 = v87 - 3;
          if (__OFADD__(v87 - 4, 1))
            goto LABEL_156;
          if (!v83[v87])
            break;
          ++v87;
          if (v88 == v85)
            goto LABEL_60;
        }
      }
LABEL_61:
      if (v86 == 4)
        goto LABEL_64;
      goto LABEL_62;
    }
    v58 = v53;
    v201 = 0;
    v62 = v54;
    if (qword_100837910 != -1)
      swift_once(&qword_100837910, sub_10059E410);
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_1008507B0);
    swift_errorRetain(v45);
    swift_bridgeObjectRetain(v58);
    v64 = swift_errorRetain(v45);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(22, -1);
      v68 = a1;
      v69 = swift_slowAlloc(64, -1);
      v205[0] = v69;
      *(_DWORD *)v67 = v191.n128_u32[0];
      swift_bridgeObjectRetain(v58);
      *(_QWORD *)(v67 + 4) = sub_10001A820(v62, v58, v205);
      swift_bridgeObjectRelease_n(v58, 3);
      *(_WORD *)(v67 + 12) = 2080;
      swift_getErrorValue(v45, v207, v206);
      v70 = Error.rem_errorDescription.getter(v206[1], v206[2]);
      *(_QWORD *)(v67 + 14) = sub_10001A820(v70, v71, v205);
      swift_bridgeObjectRelease();
      swift_errorRelease(v45);
      swift_errorRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "requestNLAndSiriBertAssets: Cannot load modelInfo for %{public}s: %s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
      v72 = v69;
      a1 = v68;
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      swift_errorRelease(v45);
    }
    else
    {
      swift_errorRelease(v45);
      swift_bridgeObjectRelease_n(v58, 2);
      swift_errorRelease(v45);
      swift_errorRelease(v45);

    }
    v45 = v201;
LABEL_49:
    v42 = v198;
    v44 = v199;
    if (v198)
      goto LABEL_24;
LABEL_25:
    v48 = __OFADD__(v44, 1);
    v49 = (int64_t)v44 + 1;
    if (v48)
    {
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (v49 >= v196)
      goto LABEL_84;
    v50 = *(_QWORD *)(v195 + 8 * v49);
    if (!v50)
      break;
LABEL_35:
    v198 = (v50 - 1) & v50;
    v199 = (id)v49;
  }
  v51 = v49 + 1;
  if (v49 + 1 >= v196)
    goto LABEL_84;
  v50 = *(_QWORD *)(v195 + 8 * v51);
  if (v50)
    goto LABEL_34;
  v51 = v49 + 2;
  if (v49 + 2 >= v196)
    goto LABEL_84;
  v50 = *(_QWORD *)(v195 + 8 * v51);
  if (v50)
  {
LABEL_34:
    v49 = v51;
    goto LABEL_35;
  }
  v51 = v49 + 3;
  if (v49 + 3 < v196)
  {
    v50 = *(_QWORD *)(v195 + 8 * v51);
    if (!v50)
    {
      while (1)
      {
        v49 = v51 + 1;
        if (__OFADD__(v51, 1))
          break;
        if (v49 >= v196)
          goto LABEL_84;
        v50 = *(_QWORD *)(v195 + 8 * v49);
        ++v51;
        if (v50)
          goto LABEL_35;
      }
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    goto LABEL_34;
  }
LABEL_84:
  v201 = v45;
  swift_release(a1);
  v102 = v194;
  v103 = (uint64_t)v208;
  v104 = v183;
  if (*(_QWORD *)(v183 + 16) <= v208[2] >> 3)
  {
    v205[0] = (uint64_t)v208;
    swift_bridgeObjectRetain(v208);
    sub_10059B880(v104);
    v198 = v205[0];
  }
  else
  {
    swift_bridgeObjectRetain(v208);
    v198 = (uint64_t)sub_100215890(v104, v103);
  }
  v110 = 0;
  v111 = *(_QWORD *)(v198 + 56);
  v195 = v198 + 56;
  v112 = 1 << *(_BYTE *)(v198 + 32);
  v113 = -1;
  if (v112 < 64)
    v113 = ~(-1 << v112);
  v114 = v113 & v111;
  v196 = (unint64_t)(v112 + 63) >> 6;
  v197 = 0x8000000100708890;
  v192 = (char *)(v184 | 0x8000000000000000);
  v191.n128_u64[0] = (unint64_t)(&type metadata for () + 1);
  while (2)
  {
    if (v114)
    {
      v117 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      v118 = v117 | (v110 << 6);
      goto LABEL_108;
    }
    v48 = __OFADD__(v110++, 1);
    if (v48)
      goto LABEL_150;
    if (v110 < v196)
    {
      v119 = *(_QWORD *)(v195 + 8 * v110);
      if (!v119)
      {
        v120 = v110 + 1;
        if (v110 + 1 >= v196)
          break;
        v119 = *(_QWORD *)(v195 + 8 * v120);
        if (!v119)
        {
          v120 = v110 + 2;
          if (v110 + 2 >= v196)
            break;
          v119 = *(_QWORD *)(v195 + 8 * v120);
          if (!v119)
          {
            v120 = v110 + 3;
            if (v110 + 3 >= v196)
              break;
            v119 = *(_QWORD *)(v195 + 8 * v120);
            if (!v119)
            {
              while (1)
              {
                v110 = v120 + 1;
                if (__OFADD__(v120, 1))
                  break;
                if (v110 >= v196)
                  goto LABEL_122;
                v119 = *(_QWORD *)(v195 + 8 * v110);
                ++v120;
                if (v119)
                  goto LABEL_107;
              }
LABEL_153:
              __break(1u);
              goto LABEL_154;
            }
          }
        }
        v110 = v120;
      }
LABEL_107:
      v114 = (v119 - 1) & v119;
      v118 = __clz(__rbit64(v119)) + (v110 << 6);
LABEL_108:
      v121 = (uint64_t *)(*(_QWORD *)(v198 + 48) + 16 * v118);
      v123 = *v121;
      v122 = v121[1];
      v124 = sub_10001A630(&qword_100850880);
      inited = swift_initStackObject(v124, &v204);
      *(_OWORD *)(inited + 16) = v200;
      v126 = v197;
      *(_QWORD *)(inited + 32) = 0xD00000000000001CLL;
      *(_QWORD *)(inited + 40) = v126;
      v127 = sub_10001A630(&qword_100850888);
      v128 = swift_initStackObject(v127, &v203);
      *(_OWORD *)(v128 + 16) = v200;
      *(_QWORD *)(v128 + 32) = 0x75676E616C2E6C6ELL;
      *(_QWORD *)(v128 + 40) = 0xEB00000000656761;
      *(_QWORD *)(v128 + 48) = v123;
      *(_QWORD *)(v128 + 56) = v122;
      swift_bridgeObjectRetain_n(v122, 2);
      *(_QWORD *)(inited + 48) = sub_1002AF320(v128);
      sub_1002B1738(inited);
      v129 = type metadata accessor for Date(0);
      v130 = *(_QWORD *)(v129 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v102, 1, 1, v129);
      v131 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10001A630(&qword_10083AEB8);
      v132.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v133 = swift_bridgeObjectRelease();
      isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v130 + 48))(v102, 1, v129, v133) != 1)
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v130 + 8))(v102, v129);
      }
      v135 = objc_msgSend(objc_allocWithZone((Class)UAFAssetSetSubscription), "initWithName:assetSets:usageAliases:expires:", v131, v132.super.isa, 0, isa);

      if (!v135)
        continue;
      v136 = type metadata accessor for TaskPriority(0);
      v137 = *(_QWORD *)(v136 - 8);
      v138 = (uint64_t)v193;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v193, 1, 1, v136);
      v139 = (_QWORD *)swift_allocObject(&unk_1007FBBF8, 56, 7);
      v139[2] = 0;
      v140 = v139 + 2;
      v139[3] = 0;
      v139[4] = 0xD00000000000001BLL;
      v139[5] = v192;
      v139[6] = v135;
      v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v138, 1, v136);
      v142 = v135;
      v199 = v142;
      if (v141 == 1)
      {
        sub_10000882C(v138, &qword_100839A10);
        v143 = 0;
        v144 = *v140;
        if (*v140)
          goto LABEL_113;
LABEL_115:
        v147 = 0;
        v149 = 0;
      }
      else
      {
        v150 = TaskPriority.rawValue.getter(v142);
        (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v138, v136);
        v143 = v150;
        v144 = *v140;
        if (!*v140)
          goto LABEL_115;
LABEL_113:
        v145 = v139[3];
        ObjectType = swift_getObjectType();
        swift_unknownObjectRetain(v144);
        v147 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v145);
        v149 = v148;
        swift_unknownObjectRelease(v144);
      }
      v151 = swift_allocObject(&unk_1007FBC20, 32, 7);
      *(_QWORD *)(v151 + 16) = &unk_100850898;
      *(_QWORD *)(v151 + 24) = v139;
      if (v149 | v147)
      {
        v202[0] = 0;
        v202[1] = 0;
        v115 = v202;
        v202[2] = v147;
        v202[3] = v149;
      }
      else
      {
        v115 = 0;
      }
      v116 = swift_task_create(v143 | 0x1C00, v115, v191.n128_u64[0], &unk_100839A30, v151);

      swift_release(v116);
      v102 = v194;
      continue;
    }
    break;
  }
LABEL_122:
  swift_release(v198);
  if (v208[2] <= *(_QWORD *)(v183 + 16) >> 3)
  {
    v205[0] = v183;
    sub_10059B880((uint64_t)v208);
    swift_bridgeObjectRelease();
    v152 = (_QWORD *)v205[0];
    if (!*(_QWORD *)(v205[0] + 16))
      goto LABEL_126;
LABEL_124:
    v153 = type metadata accessor for TaskPriority(0);
    v154 = (uint64_t)v181;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v181, 1, 1, v153);
    v155 = (_QWORD *)swift_allocObject(&unk_1007FBC48, 56, 7);
    v155[2] = 0;
    v155[3] = 0;
    v156 = v184 | 0x8000000000000000;
    v155[4] = 0xD00000000000001BLL;
    v155[5] = v156;
    v155[6] = v152;
    swift_bridgeObjectRetain(v152);
    v157 = sub_1000CAAE0(v154, (uint64_t)&unk_1008508A8, (uint64_t)v155);
    swift_bridgeObjectRelease();
    swift_release(v157);
  }
  else
  {
    v152 = sub_100215890((uint64_t)v208, v183);
    swift_bridgeObjectRelease();
    if (v152[2])
      goto LABEL_124;
LABEL_126:
    swift_bridgeObjectRelease();
  }
  v158 = 0;
  v109 = (uint64_t)v209;
  v159 = v209 + 56;
  v160 = 1 << v209[32];
  v161 = -1;
  if (v160 < 64)
    v161 = ~(-1 << v160);
  v162 = v161 & *((_QWORD *)v209 + 7);
  v163 = (unint64_t)(v160 + 63) >> 6;
  while (2)
  {
    if (v162)
    {
      v164 = __clz(__rbit64(v162));
      v162 &= v162 - 1;
      v165 = v164 | (v158 << 6);
LABEL_131:
      v166 = (uint64_t *)(*(_QWORD *)(v109 + 48) + 16 * v165);
      v167 = *v166;
      v168 = v166[1];
      v169 = swift_bridgeObjectRetain(v168);
      _s7remindd20REMGroceryClassifierC26requestNLAssetsIfNecessary11modelLocaleySS_tFZ_0(v167, v168, v169);
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v48 = __OFADD__(v158++, 1);
  if (v48)
    goto LABEL_151;
  if (v158 >= v163)
    goto LABEL_88;
  v170 = *(_QWORD *)&v159[8 * v158];
  if (v170)
  {
LABEL_143:
    v162 = (v170 - 1) & v170;
    v165 = __clz(__rbit64(v170)) + (v158 << 6);
    goto LABEL_131;
  }
  v171 = v158 + 1;
  if (v158 + 1 >= v163)
    goto LABEL_88;
  v170 = *(_QWORD *)&v159[8 * v171];
  if (v170)
    goto LABEL_142;
  v171 = v158 + 2;
  if (v158 + 2 >= v163)
    goto LABEL_88;
  v170 = *(_QWORD *)&v159[8 * v171];
  if (v170)
    goto LABEL_142;
  v171 = v158 + 3;
  if (v158 + 3 >= v163)
    goto LABEL_88;
  v170 = *(_QWORD *)&v159[8 * v171];
  if (v170)
  {
LABEL_142:
    v158 = v171;
    goto LABEL_143;
  }
  while (1)
  {
    v158 = v171 + 1;
    if (__OFADD__(v171, 1))
      break;
    if (v158 >= v163)
      goto LABEL_88;
    v170 = *(_QWORD *)&v159[8 * v158];
    ++v171;
    if (v170)
      goto LABEL_143;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
}

uint64_t sub_1005A199C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005A19D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_100850894);
  v4 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000CAD70;
  *(_OWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 152) = v2;
  return swift_task_switch(sub_10059F3E4, 0, 0);
}

uint64_t sub_1005A1A38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005A1A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1008508A4);
  v4 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000CB064;
  *(_OWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 152) = v2;
  return swift_task_switch(sub_10059F8A0, 0, 0);
}

uint64_t sub_1005A1ACC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005A1B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008508C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008508C0);
  if (qword_100837680 != -1)
    swift_once(&qword_100837680, sub_1004A196C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872160);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1005A1B90(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  Class v43;
  Class v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  id v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  id v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  double v83;
  id v84;
  unsigned int v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v120 = a4;
  v121 = a3;
  v119 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(REMCDChangeTrackingState), "fetchRequest");
  v14 = sub_1000151B0(0, &qword_1008508D8, off_1007D66B8);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v13, v14);
  if (v4)
  {

    return;
  }
  v16 = v12;
  v103 = v13;
  v111 = v10;
  v112 = v9;
  v109 = v8;
  v110 = v6;
  v102 = a1;
  v17 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v96 = v15;
    else
      v96 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v18 = _CocoaArrayWrapper.endIndex.getter(v96);
    swift_bridgeObjectRelease();
    v19 = v119;
    if (!v18)
      goto LABEL_45;
  }
  else
  {
    v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v119;
    if (!v18)
    {
LABEL_45:
      swift_bridgeObjectRelease();
      v93 = &v127;
      goto LABEL_46;
    }
  }
  v20 = objc_msgSend(v102, "persistentStoreCoordinator");
  if (!v20)
    goto LABEL_45;
  v21 = v20;
  v22 = objc_msgSend(v20, "persistentStores");
  v23 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  sub_1001E0674(v24);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v21, "currentPersistentHistoryTokenFromStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v26)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v101 = v21;
  v27 = objc_msgSend(objc_allocWithZone((Class)REMNSPersistentHistoryToken), "initWithPersistentHistoryToken:", v26);
  v28 = (void *)objc_opt_self(NSKeyedArchiver);
  v123 = 0;
  v29 = objc_msgSend(v28, "archivedDataWithRootObject:requiringSecureCoding:error:", v27, 1, &v123);
  v30 = v123;
  if (!v29)
  {
    v91 = v30;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v91);

    swift_willThrow(v92);
    v93 = &v126;
LABEL_46:

    return;
  }
  v98 = v27;
  v99 = v26;
  v100 = 0;
  v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v117 = v31;

  static Date.now.getter(v32);
  if (v18 < 1)
    __break(1u);
  v34 = 0;
  v118 = v17 & 0xC000000000000001;
  v122 = &v124;
  *(_QWORD *)&v33 = 136316162;
  v107 = v33;
  v106 = 0x80000001007088B0;
  v105 = (char *)&type metadata for Any + 8;
  v115 = v16;
  v108 = v17;
  v104 = v18;
  do
  {
    if (v118)
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v17);
    else
      v35 = *(id *)(v17 + 8 * v34 + 32);
    v36 = v35;
    v37 = objc_msgSend(v35, "clientName");
    if (v37)
    {
      v38 = v37;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v41 = v40;

      if (v120)
      {
        v42 = sub_1001B2278(v39, v41, v120);
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
        {

          goto LABEL_11;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v43 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setLastConsumedChangeTokenData:", v43);

    v44 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setLastConsumedDate:", v44);

    if (qword_100837920 != -1)
      swift_once(&qword_100837920, sub_1005A1B00);
    v45 = type metadata accessor for Logger(0);
    sub_10001AAA8(v45, (uint64_t)qword_1008508C0);
    v46 = v36;
    v47 = v121;
    swift_bridgeObjectRetain_n(v121, 2);
    v48 = v46;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      v114 = v50;
      v51 = swift_slowAlloc(52, -1);
      v113 = swift_slowAlloc(160, -1);
      v125 = v113;
      *(_DWORD *)v51 = v107;
      swift_bridgeObjectRetain(v47);
      v123 = (id)sub_10001A820(v19, v47, &v125);
      v52 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v122);
      swift_bridgeObjectRelease_n(v47, 3);
      *(_WORD *)(v51 + 12) = 2080;
      v123 = (id)sub_10001A820(0xD000000000000087, v106, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v52);
      *(_WORD *)(v51 + 22) = 2082;
      v53 = objc_msgSend(v48, "accountIdentifier");
      if (v53)
      {
        v54 = v53;
        v55 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v57 = v56;

      }
      else
      {
        v55 = 0;
        v57 = 0;
      }
      v123 = v55;
      v124 = v57;
      v58 = sub_10001A630((uint64_t *)&unk_10083A370);
      v59 = Optional.descriptionOrNil.getter(v58);
      v61 = v60;
      swift_bridgeObjectRelease();
      v123 = (id)sub_10001A820(v59, v61, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v122);

      *(_QWORD *)&v62 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v51 + 32) = 2082;
      v63 = objc_msgSend(v48, "clientName", v62);
      if (v63)
      {
        v64 = v63;
        v65 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v67 = v66;

      }
      else
      {
        v65 = 0;
        v67 = 0;
      }
      v123 = v65;
      v124 = v67;
      v68 = Optional.descriptionOrNil.getter(v58);
      v70 = v69;
      swift_bridgeObjectRelease();
      v123 = (id)sub_10001A820(v68, v70, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v122);

      *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v51 + 42) = 2082;
      v72 = objc_msgSend(v48, "lastConsumedDate", v71);
      if (v72)
      {
        v73 = v72;
        v74 = (uint64_t)v109;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        v75 = 0;
        v77 = v111;
        v76 = v112;
      }
      else
      {
        v75 = 1;
        v77 = v111;
        v76 = v112;
        v74 = (uint64_t)v109;
      }
      v78 = v110;
      v18 = v104;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v74, v75, 1, v76);
      v79 = Optional.descriptionOrNil.getter(v78);
      v81 = v80;
      sub_1000EA320(v74);
      v123 = (id)sub_10001A820(v79, v81, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v122);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v114, "[%s|%s] Did reset change tracking state {accountIdentifier: %{public}s, clientName: %{public}s, lastConsumedDate: %{public}s}", (uint8_t *)v51, 0x34u);
      v82 = v113;
      swift_arrayDestroy(v113, 5, v105);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v16 = v115;
      v19 = v119;
      v17 = v108;
    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
      v16 = v115;
    }
LABEL_11:
    ++v34;
  }
  while (v18 != v34);
  *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
  v84 = v102;
  if (objc_msgSend(v102, "hasChanges", v83))
  {
    v123 = 0;
    v85 = objc_msgSend(v84, "save:", &v123);
    v86 = v123;
    v87 = v99;
    v88 = v98;
    v89 = v103;
    if (v85)
    {
      v90 = v123;
      objc_msgSend(v84, "refreshAllObjects");
    }
    else
    {
      v94 = v123;
      _convertNSErrorToError(_:)(v86);

      swift_willThrow(v95);
    }

    sub_1000A71C8(v116, v117);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v16, v112);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v111 + 8))(v16, v112);

    sub_1000A71C8(v116, v117);
  }
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v5()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v5;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v6()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v6;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2023_minorE_Migrating_to_ZREMCDBASELIST()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2023_minorE_Migrating_to_ZREMCDBASELIST;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler()
{
  return &type metadata for RDReminderDataPostMigrationHandler;
}

ValueMetadata *type metadata accessor for RDReminderDataPostMigrationHandler.v2023_minorE_Migrated_to_ZREMCDBASELIST()
{
  return &type metadata for RDReminderDataPostMigrationHandler.v2023_minorE_Migrated_to_ZREMCDBASELIST;
}

uint64_t sub_1005A2608@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for REMCDBaseSection();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005A2648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008508E0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008508E0);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1005A26D8(__int16 a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1002C8224(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000010;
  v5[5] = 0x8000000100708AC0;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1002C8224((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000017;
    v8[5] = 0x8000000100708AA0;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_1002C8224((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = (char *)&v2[2 * v10];
    strcpy(v11 + 32, ".writePrivate");
    *((_WORD *)v11 + 23) = -4864;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_33;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  v14[4] = 0x636E79732ELL;
  v14[5] = 0xE500000000000000;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_33:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v16 = v2[2];
  v15 = v2[3];
  if (v16 >= v15 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
  v2[2] = v16 + 1;
  v17 = &v2[2 * v16];
  v17[4] = 0x5465676E6168632ELL;
  v17[5] = 0xEF676E696B636172;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_38:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 0x67756265642ELL;
  v20[5] = 0xE600000000000000;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0x6E697865646E692ELL;
  v23[5] = 0xE900000000000067;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_48:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 0x696C417065656B2ELL;
  v26[5] = 0xEA00000000006576;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_53:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 0xD000000000000010;
  v29[5] = 0x8000000100708A80;
  if ((a1 & 0x200) == 0)
  {
LABEL_20:
    if ((a1 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_58:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v31 = v2[2];
  v30 = v2[3];
  if (v31 >= v30 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
  v2[2] = v31 + 1;
  v32 = &v2[2 * v31];
  v32[4] = 0x6163696C7065722ELL;
  v32[5] = 0xEF726567616E614DLL;
  if ((a1 & 0x400) == 0)
  {
LABEL_21:
    if ((a1 & 0x800) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
LABEL_63:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
  v34 = v2[2];
  v33 = v2[3];
  if (v34 >= v33 >> 1)
    v2 = sub_1002C8224((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
  v2[2] = v34 + 1;
  v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000012;
  v35[5] = 0x8000000100708A60;
  if ((a1 & 0x800) != 0)
  {
LABEL_68:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002C8224(0, v2[2] + 1, 1, v2);
    v37 = v2[2];
    v36 = v2[3];
    if (v37 >= v36 >> 1)
      v2 = sub_1002C8224((_QWORD *)(v36 > 1), v37 + 1, 1, v2);
    v2[2] = v37 + 1;
    v38 = &v2[2 * v37];
    v38[4] = 0xD000000000000011;
    v38[5] = 0x8000000100708A40;
  }
LABEL_73:
  v39 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v40 = sub_1001CC40C();
  v41 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v39, v40);
  v43 = v42;
  swift_bridgeObjectRelease(v2);
  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 93;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  return 91;
}

_DWORD *sub_1005A2DD0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1005A2DDC()
{
  _DWORD *v0;

  return sub_1005A26D8(*v0);
}

void sub_1005A2DE4(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1005A2DEC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1005A2E00@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1005A2E14@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1005A2E28(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1005A2E58@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1005A2E84@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1005A2EA8(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1005A2EBC(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1005A2ED0(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1005A2EE4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1005A2EF8(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1005A2F0C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1005A2F20(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1005A2F34()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1005A2F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_1005A2F5C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1005A2F70@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1005A2F80(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1005A2F8C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void sub_1005A2FA0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;

  v3 = sub_1005A310C(a1);
  swift_bridgeObjectRelease();
  *a2 = v3;
}

ValueMetadata *type metadata accessor for RDClientAccessLevel()
{
  return &type metadata for RDClientAccessLevel;
}

unint64_t sub_1005A2FF0()
{
  unint64_t result;

  result = qword_1008508F8;
  if (!qword_1008508F8)
  {
    result = swift_getWitnessTable(&unk_1006C3884, &type metadata for RDClientAccessLevel);
    atomic_store(result, (unint64_t *)&qword_1008508F8);
  }
  return result;
}

unint64_t sub_1005A3038()
{
  unint64_t result;

  result = qword_100850900;
  if (!qword_100850900)
  {
    result = swift_getWitnessTable(&unk_1006C3854, &type metadata for RDClientAccessLevel);
    atomic_store(result, (unint64_t *)&qword_100850900);
  }
  return result;
}

unint64_t sub_1005A3080()
{
  unint64_t result;

  result = qword_100850908;
  if (!qword_100850908)
  {
    result = swift_getWitnessTable(&unk_1006C38AC, &type metadata for RDClientAccessLevel);
    atomic_store(result, (unint64_t *)&qword_100850908);
  }
  return result;
}

unint64_t sub_1005A30C8()
{
  unint64_t result;

  result = qword_100850910;
  if (!qword_100850910)
  {
    result = swift_getWitnessTable(&unk_1006C38E4, &type metadata for RDClientAccessLevel);
    atomic_store(result, (unint64_t *)&qword_100850910);
  }
  return result;
}

uint64_t sub_1005A310C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1005A3148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850918);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850918);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1005A31D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  double v16;
  unint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  id v27;
  Class isa;
  _QWORD v29[2];
  _BYTE v30[32];

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = sub_10001A6DC(0x7265746E756F63, 0xE700000000000000);
    if ((v12 & 1) != 0)
    {
      sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v30);
      if ((swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16))
        {
          v13 = v29[0];
          v14 = sub_10001A6DC(0xD000000000000010, 0x8000000100708E00);
          if ((v15 & 1) != 0)
          {
            sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)v30);
            if ((swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
            {
              if (*(_QWORD *)(a1 + 16))
              {
                v16 = *(double *)v29;
                v17 = sub_10001A6DC(0x496163696C706572, 0xE900000000000044);
                if ((v18 & 1) != 0)
                {
                  sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)v30);
                  if ((swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                  {
                    UUID.init(uuidString:)(v29[0], v29[1]);
                    v19 = swift_bridgeObjectRelease();
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v19) != 1)
                    {
                      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
                      v27 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
                      isa = UUID._bridgeToObjectiveC()().super.isa;
                      v25 = objc_msgSend(v27, "initWithCounter:modificationTime:replicaID:", v13, isa, v16);

                      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
                      return v25;
                    }
                    sub_10011E85C((uint64_t)v6);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (qword_100837930 != -1)
    swift_once(&qword_100837930, sub_1005A3148);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001AAA8(v20, (uint64_t)qword_100850918);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Can't construct REMResolutionToken from invalid JSON", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  return 0;
}

id sub_1005A34FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_1005A31D8(a1);
  *a2 = result;
  return result;
}

id sub_1005A3520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  _BYTE v19[32];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = v1, v4 = sub_10001A6DC(7364973, 0xE300000000000000), (v5 & 1) != 0)
    && (sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v19),
        v6 = sub_10001A630(&qword_100850930),
        (swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0))
  {
    v7 = sub_1005A389C(v18);
    swift_bridgeObjectRelease();
    sub_1003B07CC(v7);
    swift_release(v7);
    v8 = objc_allocWithZone((Class)NSMutableDictionary);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v10 = objc_msgSend(v8, "initWithDictionary:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithMap:", v10);
  }
  else
  {
    if (qword_100837930 != -1)
      swift_once(&qword_100837930, sub_1005A3148);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_100850918);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Can't construct REMResolutionTokenMap from invalid JSON", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    return 0;
  }
  return v11;
}

uint64_t sub_1005A37E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  sub_100166B24(a1, a2, v2, (uint64_t)&off_1007FBF20, (uint64_t)&v4);
  return v4;
}

id sub_1005A3878@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_1005A3520(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005A389C(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  sub_10001A630(&qword_100850938);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v31 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v27 = v5;
  v28 = (unint64_t)(v7 + 63) >> 6;
  v29 = (_QWORD *)result;
  v30 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v11 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    sub_1005A3AC0();
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v22 = sub_1005A31D8(v21);
    swift_bridgeObjectRelease();
    result = (uint64_t)v29;
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v29[6] + 16 * i);
    *v23 = v18;
    v23[1] = v19;
    *(_QWORD *)(v29[7] + 8 * i) = v22;
    v24 = v29[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v29[2] = v26;
    v3 = v11;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v13 >= v28)
      return result;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v3 + 1;
    if (!v14)
    {
      v15 = v3 + 2;
      if (v3 + 2 >= v28)
        return result;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v3 + 3;
        if (v3 + 3 >= v28)
          return result;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
    v11 = v15;
  }
  v16 = v3 + 4;
  if (v3 + 4 >= v28)
    return result;
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v28)
      return result;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_1005A3AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100850940;
  if (!qword_100850940)
  {
    v1 = objc_opt_self(REMResolutionToken);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100850940);
  }
  return result;
}

void _sSo13REMCDReminderC7reminddE24prepareForDeletion_SwiftyyF_0()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  os_log_type_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32[2];

  v1 = v0;
  v2 = objc_msgSend(v0, "managedObjectContext");
  if (v2)
  {
    v30 = v2;
    v3 = objc_opt_self(RDStoreControllerManagedObjectContext);
    v4 = swift_dynamicCastObjCClass(v30, v3);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = (void *)sub_1005A612C(v0);
      v7 = type metadata accessor for REMCDDueDateDeltaAlert();
      v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
      objc_msgSend(v8, "setEntity:", v9);

      objc_msgSend(v8, "setAffectedStores:", 0);
      objc_msgSend(v8, "setPredicate:", v6);
      v10 = NSManagedObjectContext.fetch<A>(_:)(v8, v7);

      if (qword_100837938 != -1)
        swift_once(&qword_100837938, sub_1005A41BC);
      v11 = type metadata accessor for Logger(0);
      sub_10001AAA8(v11, (uint64_t)qword_100850950);
      v12 = v1;
      swift_bridgeObjectRetain_n(v10, 2);
      v13 = v12;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      v16 = (unint64_t)v10 >> 62;
      if (!os_log_type_enabled((os_log_t)v14, v15))
      {

        swift_bridgeObjectRelease_n(v10, 2);
        goto LABEL_15;
      }
      v12 = (_WORD *)swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      v32[0] = v29;
      *(_DWORD *)v12 = 136446466;
      v17 = objc_msgSend(v13, "remObjectID");
      if (v17)
      {
        v18 = v17;
        v19 = objc_msgSend(v17, "description");

        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

      }
      else
      {
        v20 = 7104878;
        v22 = 0xE300000000000000;
      }
      v31 = sub_10001A820(v20, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);

      swift_bridgeObjectRelease();
      v12[6] = 2048;
      v16 = (unint64_t)v10 >> 62;
      if ((unint64_t)v10 >> 62)
        goto LABEL_30;
      v23 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        swift_bridgeObjectRelease();
        v31 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v15, "cleanUpCachedDueDateDeltaAlertsOnPreparationToReminderDeletion: prepareForDeletion on reminder {reminderID: %{public}s, alerts.count: %ld}", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v12, -1, -1);

LABEL_15:
        if (v16)
        {
          if (v10 < 0)
            v27 = v10;
          else
            v27 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v10);
          v14 = _CocoaArrayWrapper.endIndex.getter(v27);
          if (!v14)
            goto LABEL_27;
        }
        else
        {
          v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v10);
          if (!v14)
            goto LABEL_27;
        }
        if (v14 >= 1)
          break;
        __break(1u);
LABEL_30:
        if (v10 < 0)
          v28 = v10;
        else
          v28 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v10);
        v23 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease();
      }
      for (i = 0; i != v14; ++i)
      {
        if ((v10 & 0xC000000000000001) != 0)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
        else
          v25 = *(id *)(v10 + 8 * i + 32);
        v26 = v25;
        objc_msgSend(v5, "deleteObject:", v25);

      }
LABEL_27:

      swift_bridgeObjectRelease_n(v10, 2);
    }
    else
    {

    }
  }
}

uint64_t sub_1005A41BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850950);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850950);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall REMCDReminder.processDueDateDeltaAlertsDataChanges()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = _s44DueDateDeltaAlertsDataCDIngestionCoordinatorCMa();
  v2 = swift_allocObject(v1, 48, 7);
  v3 = sub_1005A5064(v0);
  v4 = static os_log_type_t.info.getter(v3);
  measureTimeElapsed(_:level:block:)(0xD000000000000032, 0x8000000100708E20, v4, sub_1005A6118, v2);
  swift_release(v2);
}

uint64_t _s44DueDateDeltaAlertsDataCDIngestionCoordinatorCMa()
{
  return objc_opt_self(_TtCE7reminddCSo13REMCDReminder44DueDateDeltaAlertsDataCDIngestionCoordinator);
}

void sub_1005A44D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t KeyPath;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  BOOL v53;
  id v54;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char v63;
  id v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  char *v95;
  os_log_t v96;
  os_log_t v97;
  uint64_t v98;
  char *v99;
  _QWORD v100[3];
  char v101[8];
  uint64_t v102;
  _QWORD *v103;
  id v104[3];
  uint64_t v105;
  char v106[40];

  v2 = v0;
  v3 = type metadata accessor for UUID(0);
  v98 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v95 = (char *)v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)v84 - v6;
  __chkstk_darwin(v8);
  v99 = (char *)v84 - v9;
  v10 = *(void **)(v0 + 32);
  v11 = *(_QWORD **)(v0 + 16);
  v12 = sub_1005A612C(v11);
  if (v1)
    return;
  v13 = (void *)v12;
  v14 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v14, v106);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006C3AD8);
  *(_QWORD *)(inited + 32) = KeyPath;
  v104[0] = (id)inited;
  specialized Array._endMutation()(KeyPath);
  v94 = v10;
  v17 = (void *)sub_1003587E0((uint64_t)v104[0], 0, 0, (uint64_t)v13);
  v18 = type metadata accessor for REMCDDueDateDeltaAlert();
  v19 = NSManagedObjectContext.fetch<A>(_:)(v17, v18);
  swift_bridgeObjectRelease();

  v92 = v19;
  v88 = sub_100220394();
LABEL_10:
  v35 = *(void **)(v2 + 24);
  v104[0] = 0;
  v36 = objc_msgSend(v35, "remObjectIDWithError:", v104);
  v37 = v104[0];
  if (!v36)
  {
    v45 = v104[0];
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v37);

    swift_willThrow(v46);
    return;
  }
  v38 = v36;
  v104[0] = 0;
  v39 = v37;
  v40 = objc_msgSend(v11, "remObjectIDWithError:", v104);
  v37 = v104[0];
  if (!v40)
  {
    v45 = v104[0];
    swift_bridgeObjectRelease();

    goto LABEL_15;
  }
  v41 = v40;
  v42 = type metadata accessor for REMDueDateDeltaAlertCDIngestor();
  v43 = swift_allocObject(v42, 32, 7);
  *(_QWORD *)(v43 + 16) = v38;
  *(_QWORD *)(v43 + 24) = v41;
  v44 = v37;
  v11 = v88;
  sub_1005A5238((uint64_t)v88, v43);
  v85 = v43;
  v104[0] = v11;
  swift_bridgeObjectRetain(v11);
  v47 = sub_10001A630((uint64_t *)&unk_10083FDB0);
  v48 = sub_1005A6310();
  v87 = sub_100342670((unint64_t *)&qword_100843670, (uint64_t)&protocol conformance descriptor for UUID);
  v97 = (os_log_t)Sequence.mapToSet<A>(_:)(sub_1005A5958, 0, v47, v3, v48, v87);
  swift_bridgeObjectRelease();
  v103 = _swiftEmptyArrayStorage;
  v49 = v92;
  if ((unint64_t)v92 >> 62)
  {
    if (v92 < 0)
      v83 = v92;
    else
      v83 = v92 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v92);
    v50 = _CocoaArrayWrapper.endIndex.getter(v83);
  }
  else
  {
    v50 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v92);
  }
  v91 = v2;
  v84[1] = 0;
  if (v50)
  {
    v51 = 0;
    v90 = v49 & 0xC000000000000001;
    v86 = v49 + 32;
    v96 = v97 + 7;
    v89 = v50;
    while (1)
    {
      if (v90)
      {
        v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v92);
        v53 = __OFADD__(v51++, 1);
        if (v53)
          goto LABEL_47;
      }
      else
      {
        v52 = *(id *)(v86 + 8 * v51);
        v53 = __OFADD__(v51++, 1);
        if (v53)
        {
LABEL_47:
          __break(1u);
          swift_once(&qword_100837938, sub_1005A41BC);
          v20 = type metadata accessor for Logger(0);
          sub_10001AAA8(v20, (uint64_t)qword_100850950);
          swift_retain();
          swift_errorRetain(v51);
          swift_retain();
          v21 = swift_errorRetain(v51);
          v22 = Logger.logObject.getter(v21);
          v23 = static os_log_type_t.error.getter(v22);
          if (os_log_type_enabled(v22, (os_log_type_t)v23))
          {
            LODWORD(v96) = v23;
            v97 = v22;
            v24 = swift_slowAlloc(22, -1);
            v93 = (id)swift_slowAlloc(64, -1);
            v104[0] = v93;
            *(_DWORD *)v24 = 136315394;
            v25 = objc_msgSend(v11, "remObjectID");
            if (v25)
            {
              v26 = v25;
              v27 = objc_msgSend(v25, "description");

              v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
              v30 = v29;

            }
            else
            {
              v30 = 0xE300000000000000;
              v28 = 7104878;
            }
            v103 = (_QWORD *)sub_10001A820(v28, v30, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104);
            swift_release_n(v2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v24 + 12) = 2080;
            swift_getErrorValue(v51, v101, v100);
            v31 = Error.rem_errorDescription.getter(v100[1], v100[2]);
            v103 = (_QWORD *)sub_10001A820(v31, v32, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104);
            swift_bridgeObjectRelease();
            swift_errorRelease(v51);
            swift_errorRelease(v51);
            v33 = v97;
            _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v96, "DueDateDeltaAlertsDataCDIngestionCoordinator: Failed to deserialize 'dueDateDeltaAlertsData' so local REMCDDueDateDeltaAlert entries will be wiped for the reminder {reminder: %s, error: %s}", (uint8_t *)v24, 0x16u);
            v34 = v93;
            swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v34, -1, -1);
            swift_slowDealloc(v24, -1, -1);

            swift_errorRelease(v51);
          }
          else
          {
            swift_errorRelease(v51);
            swift_release_n(v2);
            swift_errorRelease(v51);
            swift_errorRelease(v51);

          }
          v88 = _swiftEmptyArrayStorage;
          goto LABEL_10;
        }
      }
      v93 = v52;
      v54 = objc_msgSend(v52, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

      if (v97[2].isa
        && (v55 = v97,
            v56 = dispatch thunk of Hashable._rawHashValue(seed:)(v97[5].isa, v3, v87),
            v57 = -1 << LOBYTE(v55[4].isa),
            v58 = v56 & ~v57,
            ((*(unint64_t *)((char *)&v96->isa + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) != 0))
      {
        v59 = ~v57;
        v60 = *(_QWORD *)(v98 + 72);
        v61 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
        while (1)
        {
          v61(v7, (char *)v97[6].isa + v60 * v58, v3);
          v62 = sub_100342670((unint64_t *)&qword_10083B380, (uint64_t)&protocol conformance descriptor for UUID);
          v63 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v99, v3, v62);
          v11 = *(_QWORD **)(v98 + 8);
          ((void (*)(char *, uint64_t))v11)(v7, v3);
          if ((v63 & 1) != 0)
            break;
          v58 = (v58 + 1) & v59;
          if (((*(unint64_t *)((char *)&v96->isa + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) == 0)
            goto LABEL_31;
        }
        ((void (*)(char *, uint64_t))v11)(v99, v3);

        v2 = v91;
        if (v51 == v89)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v65 = v103;
          goto LABEL_38;
        }
      }
      else
      {
LABEL_31:
        (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v3);
        v11 = v93;
        objc_msgSend(v94, "deleteObject:", v93);
        v64 = objc_msgSend(v11, "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

        v65 = v103;
        swift_isUniquelyReferenced_nonNull_native(v103);
        if ((v66 & 1) == 0)
          v65 = (_QWORD *)sub_1002C8EC4(0, v65[2] + 1, 1, (unint64_t)v65);
        v2 = v91;
        v67 = v89;
        v69 = v65[2];
        v68 = v65[3];
        if (v69 >= v68 >> 1)
          v65 = (_QWORD *)sub_1002C8EC4(v68 > 1, v69 + 1, 1, (unint64_t)v65);
        v65[2] = v69 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v98 + 32))((unint64_t)v65+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(_QWORD *)(v98 + 72) * v69, v95, v3);

        v103 = v65;
        if (v51 == v67)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease();
  v70 = v85;
  if (v65[2])
  {
    if (qword_100837938 != -1)
      swift_once(&qword_100837938, sub_1005A41BC);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_10001AAA8(v71, (uint64_t)qword_100850950);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(32, -1);
      v105 = v76;
      *(_DWORD *)v75 = 134218242;
      swift_beginAccess(&v103, v104, 0, 0);
      v77 = v103;
      v102 = v103[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      *(_WORD *)(v75 + 12) = 2080;
      swift_bridgeObjectRetain(v77);
      v79 = Array.description.getter(v78, v3);
      v81 = v80;
      swift_bridgeObjectRelease();
      v102 = sub_10001A820(v79, v81, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "DueDateDeltaAlertsDataCDIngestionCoordinator: %ld REMCDDueDateDeltaAlert entries deleted {identifiers: %s}", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      v82 = v76;
      v70 = v85;
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }

  }
  sub_1005A59AC((uint64_t)v88);
  swift_bridgeObjectRelease();
  swift_release(v70);
  swift_bridgeObjectRelease();
}

uint64_t *sub_1005A5064(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v3 = v1;
  v4 = *v1;
  v1[2] = (uint64_t)a1;
  v5 = a1;
  v11 = objc_msgSend(v5, "account");
  v6 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(&v13, 0xD000000000000021, 0x8000000100708FB0, 0xD00000000000007FLL, 0x8000000100708F30, 53, v6);

  if (v2)
  {

    swift_deallocPartialClassInstance(v1, v4, 48, 7, v8);
  }
  else
  {
    v1[3] = v13;
    v12 = objc_msgSend(v5, "storeControllerManagedObjectContext");
    v7 = sub_10001A630((uint64_t *)&unk_100850AB0);
    Optional.tryUnwrap(_:file:line:)(&v13, 0xD00000000000003DLL, 0x8000000100708FE0, 0xD00000000000007FLL, 0x8000000100708F30, 54, v7);

    v1[4] = v13;
    v10 = objc_msgSend(objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject), "init:", v5);

    v3[5] = (uint64_t)v10;
  }
  return v3;
}

void sub_1005A5238(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v36[2] = a2;
  v3 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = (uint64_t *)v3;
  __chkstk_darwin(v3);
  v40 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_32;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v46 = a1;
  if (!v5)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    v43 = xmmword_1006A3C40;
    v42 = &v44;
    v45 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, 6, 0);
    JUMPOUT(0x1005A567CLL);
  }
LABEL_3:
  v39 = a1 & 0xC000000000000001;
  v38 = type metadata accessor for REMCDDueDateDeltaAlert();
  v6 = (Swift::Int)_swiftEmptyDictionarySingleton;
  v7 = 4;
  v37 = v5;
  while (1)
  {
    if (v39)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
    else
      v9 = *(id *)(a1 + 8 * v7);
    v10 = v9;
    v11 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      if (a1 < 0)
        v34 = a1;
      else
        v34 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v34);
      v46 = a1;
      if (!v5)
        goto LABEL_36;
      goto LABEL_3;
    }
    v12 = objc_msgSend(v9, "identifier");
    v13 = v40;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v45 = (_QWORD *)v38;
    v14 = sub_10001A630((uint64_t *)&unk_100850A90);
    String.init<A>(describing:)(&v45, v14);
    v15 = objc_allocWithZone((Class)REMObjectID);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    a1 = (uint64_t)String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "initWithUUID:entityName:", isa, a1, swift_bridgeObjectRelease().n128_f64[0]);

    (*(void (**)(char *, uint64_t *))(v41 + 8))(v13, v42);
    if ((v6 & 0xC000000000000001) != 0)
    {
      if (v6 < 0)
        v18 = v6;
      else
        v18 = v6 & 0xFFFFFFFFFFFFFF8;
      v19 = __CocoaDictionary.count.getter(v18);
      if (__OFADD__(v19, 1))
        goto LABEL_30;
      v6 = sub_100193C48(v18, v19 + 1);
    }
    swift_isUniquelyReferenced_nonNull_native(v6);
    v21 = v20;
    v45 = (_QWORD *)v6;
    v23 = sub_1002C66DC((uint64_t)v17);
    v24 = *(_QWORD *)(v6 + 16);
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_29;
    a1 = v22;
    if (*(_QWORD *)(v6 + 24) >= v26)
    {
      if ((v21 & 1) != 0)
      {
        v6 = (Swift::Int)v45;
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1002DAC80();
        v6 = (Swift::Int)v45;
        if ((a1 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1002D520C(v26, v21);
      v27 = sub_1002C66DC((uint64_t)v17);
      if ((a1 & 1) != (v28 & 1))
      {
        v35 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
        __break(1u);
        JUMPOUT(0x1005A5928);
      }
      v23 = v27;
      v6 = (Swift::Int)v45;
      if ((a1 & 1) != 0)
      {
LABEL_4:
        v8 = *(_QWORD *)(v6 + 56);

        *(_QWORD *)(v8 + 8 * v23) = v10;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v6 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v29 = 8 * v23;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29) = v17;
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29) = v10;
    v30 = *(_QWORD *)(v6 + 16);
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_31;
    *(_QWORD *)(v6 + 16) = v32;
    v33 = v17;
LABEL_5:

    swift_bridgeObjectRelease();
    ++v7;
    a1 = v46;
    if (v11 == v37)
      goto LABEL_36;
  }
}

void sub_1005A5958(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

void sub_1005A59AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52[40];
  uint64_t v53;

  v4 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1005A612C(*(void **)(v1 + 16));
  v45 = v2;
  if (v2)
    return;
  v7 = (void *)v6;
  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v8, v52);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006C3AD8);
  *(_QWORD *)(inited + 32) = KeyPath;
  v53 = inited;
  specialized Array._endMutation()(KeyPath);
  v11 = sub_1003587E0(v53, 0, 0, (uint64_t)v7);
  v47 = a1;
  v12 = (void *)v11;
  v13 = type metadata accessor for REMCDDueDateDeltaAlert();
  v14 = v45;
  v15 = NSManagedObjectContext.fetch<A>(_:)(v12, v13);
  swift_bridgeObjectRelease();

  v16 = v47;
  v45 = v14;
  if (v14)
    return;
  if ((unint64_t)v15 >> 62)
    goto LABEL_27;
  v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v15);
  if (v17)
  {
LABEL_6:
    v46 = v15 & 0xC000000000000001;
    v18 = _swiftEmptyDictionarySingleton;
    v19 = 4;
    while (1)
    {
      if (v46)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v15);
      else
        v22 = *(id *)(v15 + 8 * v19);
      v16 = (uint64_t)v22;
      v23 = v19 - 3;
      if (__OFADD__(v19 - 4, 1))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        if (v15 < 0)
          v39 = v15;
        else
          v39 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v15, 2);
        v17 = _CocoaArrayWrapper.endIndex.getter(v39);
        swift_bridgeObjectRelease();
        if (!v17)
          break;
        goto LABEL_6;
      }
      v24 = objc_msgSend(v22, "identifier");
      v25 = v50;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

      swift_isUniquelyReferenced_nonNull_native(v18);
      v27 = v26;
      v53 = (uint64_t)v18;
      v29 = sub_1002C65F8(v25);
      v30 = v18[2];
      v31 = (v28 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
        goto LABEL_25;
      v33 = v28;
      if (v18[3] >= v32)
      {
        if ((v27 & 1) != 0)
        {
          v18 = (_QWORD *)v53;
          if ((v28 & 1) != 0)
            goto LABEL_7;
        }
        else
        {
          sub_1002DAC8C();
          v18 = (_QWORD *)v53;
          if ((v33 & 1) != 0)
            goto LABEL_7;
        }
      }
      else
      {
        sub_1002D5218(v32, v27);
        v34 = sub_1002C65F8(v50);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_46;
        v29 = v34;
        v18 = (_QWORD *)v53;
        if ((v33 & 1) != 0)
        {
LABEL_7:
          v20 = v18[7];

          *(_QWORD *)(v20 + 8 * v29) = v16;
          goto LABEL_8;
        }
      }
      v18[(v29 >> 6) + 8] |= 1 << v29;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 16))(v18[6] + *(_QWORD *)(v48 + 72) * v29, v50, v49);
      *(_QWORD *)(v18[7] + 8 * v29) = v16;
      v36 = v18[2];
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (v37)
        goto LABEL_26;
      v18[2] = v38;
LABEL_8:
      v21 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, __n128))(v48 + 8))(v50, v49, v21);
      ++v19;
      v16 = v47;
      if (v23 == v17)
        goto LABEL_32;
    }
  }
  v18 = _swiftEmptyDictionarySingleton;
LABEL_32:
  swift_bridgeObjectRelease_n(v15, 2);
  v53 = 1;
  if (!((unint64_t)v16 >> 62))
  {
    v40 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (v40)
      goto LABEL_34;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  if (v16 < 0)
    v44 = v16;
  else
    v44 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v40 = _CocoaArrayWrapper.endIndex.getter(v44);
  if (!v40)
    goto LABEL_44;
LABEL_34:
  if (v40 >= 1)
  {
    v41 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v16);
      else
        v42 = *(id *)(v16 + 8 * v41 + 32);
      v43 = v42;
      ++v41;
      v51 = v42;
      sub_1005A5DD4(&v51, (uint64_t)v18, &v53);

    }
    while (v40 != v41);
    goto LABEL_44;
  }
  __break(1u);
LABEL_46:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
}

void sub_1005A5DD4(void **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  unint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (char *)&v32 - v12;
  v14 = *a1;
  v15 = objc_msgSend(v14, "identifier", v11);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  if (*(_QWORD *)(a2 + 16) && (v16 = sub_1002C65F8((uint64_t)v13), (v17 & 1) != 0))
  {
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v16);
    v18(v13, v6);
    objc_msgSend(v19, "setSortOrder:", *a3);

    if (__OFADD__(*a3, 1))
      __break(1u);
    else
      ++*a3;
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v13, v6);
    if (qword_100837938 != -1)
      swift_once(&qword_100837938, sub_1005A41BC);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100850950);
    v22 = v14;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v38 = v35;
      v33 = v20;
      *(_DWORD *)v25 = 136315138;
      v34 = v25 + 4;
      v26 = objc_msgSend(v22, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v27 = sub_100342670((unint64_t *)&qword_10083FA40, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v27);
      v30 = v29;
      v33(v9, v6);
      v36 = sub_10001A820(v28, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "DueDateDeltaAlertsDataCDIngestionCoordinator.applySortOrder: No CD alert found for alert identifier %s", v25, 0xCu);
      v31 = v35;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1005A60DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_1005A6118()
{
  sub_1005A44D0();
}

uint64_t sub_1005A612C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  _QWORD v21[2];

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (_QWORD *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = objc_msgSend(a1, "identifier", v9);
  if (v12)
  {
    v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v14, 1, v7);
  Optional.tryUnwrap(_:file:line:)(v11, 0xD000000000000024, 0x8000000100708F00, 0xD00000000000007FLL, 0x8000000100708F30, 102, v4);
  sub_10011E85C((uint64_t)v6);
  if (!v1)
  {
    v15 = sub_10001A630(&qword_10083DA80);
    v16 = *(unsigned __int8 *)(v8 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(v15, v17 + *(_QWORD *)(v8 + 72), v16 | 7);
    *(_OWORD *)(v18 + 16) = xmmword_1006A3C00;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v8 + 16))(v18 + v17, v11, v7);
    v2 = sub_1001A3F28(v18, 129);
    v19 = swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *, uint64_t, __n128))(v8 + 8))(v11, v7, v19);
  }
  return v2;
}

unint64_t sub_1005A6310()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100850A80;
  if (!qword_100850A80)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083FDB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100850A80);
  }
  return result;
}

Swift::Int sub_1005A635C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;

  v4 = __CocoaDictionary.count.getter(a1);
  if (v4)
  {
    v5 = v4;
    sub_10001A630(&qword_10083BE68);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = _swiftEmptyDictionarySingleton;
  }
  v33 = v6;
  v7 = __CocoaDictionary.makeIterator()(a1);
  swift_unknownObjectRetain(a1);
  v9 = __CocoaDictionary.Iterator.next()(v8);
  if (v9)
  {
    v11 = v9;
    v12 = v10;
    v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    do
    {
      v31 = (void *)v11;
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
      v30 = v12;
      v22 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
      v24 = v31;
      v23 = v32;
      swift_bridgeObjectRetain(a2);

      v6 = v33;
      v25 = v33[2];
      if (v33[3] <= v25)
      {
        sub_1002CF660(v25 + 1, 1);
        v6 = v33;
      }
      result = NSObject._rawHashValue(seed:)(v6[5]);
      v15 = v6 + 8;
      v16 = -1 << *((_BYTE *)v6 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~v6[(v17 >> 6) + 8]) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~v6[(v17 >> 6) + 8])) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = v15[v18];
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(v6[6] + v20) = v23;
      *(_QWORD *)(v6[7] + v20) = a2;
      ++v6[2];
      v11 = __CocoaDictionary.Iterator.next()(result);
      v12 = v21;
    }
    while (v11);
  }
  swift_release(v7);
  return (Swift::Int)v6;
}

void sub_1005A65C0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;

  v1 = a1;
  v26 = _swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    a1 = __CocoaDictionary.makeIterator()(a1);
    v23 = 0;
    v2 = 0;
    v3 = 0;
    v1 = a1 | 0x8000000000000000;
  }
  else
  {
    v4 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 64;
    v2 = ~v4;
    v5 = -v4;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v3 = v6 & *(_QWORD *)(a1 + 64);
  }
  v7 = 0;
  v8 = (unint64_t)(v2 + 64) >> 6;
  while ((v1 & 0x8000000000000000) != 0)
  {
    v12 = __CocoaDictionary.Iterator.next()(a1);
    if (!v12)
      goto LABEL_37;
    v14 = v13;
    swift_unknownObjectRelease(v12);
    v24 = v14;
    v15 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    swift_unknownObjectRetain(v14);
    swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
    v16 = v25;
    swift_unknownObjectRelease(v14);
    v11 = v7;
    v9 = v3;
    if (!v16)
      goto LABEL_37;
LABEL_35:
    v20 = objc_msgSend(v16, "isOverdue");
    if ((v20 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = v26[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v16);
      a1 = specialized ContiguousArray._endMutation()(v22);
    }
    else
    {

    }
    v7 = v11;
    v3 = v9;
  }
  if (v3)
  {
    v9 = (v3 - 1) & v3;
    v10 = __clz(__rbit64(v3)) | (v7 << 6);
    v11 = v7;
LABEL_34:
    v16 = *(id *)(*(_QWORD *)(v1 + 56) + 8 * v10);
    if (!v16)
      goto LABEL_37;
    goto LABEL_35;
  }
  v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v17 >= v8)
      goto LABEL_37;
    v18 = *(_QWORD *)(v23 + 8 * v17);
    v11 = v7 + 1;
    if (!v18)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v8)
        goto LABEL_37;
      v18 = *(_QWORD *)(v23 + 8 * v11);
      if (!v18)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v8)
          goto LABEL_37;
        v18 = *(_QWORD *)(v23 + 8 * v11);
        if (!v18)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v8)
            goto LABEL_37;
          v18 = *(_QWORD *)(v23 + 8 * v11);
          if (!v18)
          {
            v11 = v7 + 5;
            if (v7 + 5 >= v8)
              goto LABEL_37;
            v18 = *(_QWORD *)(v23 + 8 * v11);
            if (!v18)
            {
              v19 = v7 + 6;
              while (v8 != v19)
              {
                v18 = *(_QWORD *)(v23 + 8 * v19++);
                if (v18)
                {
                  v11 = v19 - 1;
                  goto LABEL_33;
                }
              }
LABEL_37:
              sub_1000C6560(v1);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v18 - 1) & v18;
    v10 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_1005A6874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850AC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850AC0);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1005A6904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  _BYTE v19[24];
  _BYTE v20[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken, v20, 0, 0);
  sub_100008868(v9, (uint64_t)v4, (uint64_t *)&unk_10083A360);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_10083A360);
  }
  else
  {
    sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
    v10 = *(_QWORD *)(v1 + 72);
    v11 = *(os_unfair_lock_s **)(v10 + 40);
    os_unfair_lock_lock(v11);
    __chkstk_darwin(v12);
    *(_QWORD *)&v18[-16] = v8;
    swift_beginAccess(v10 + 48, v19, 33, 0);
    sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v18[-32]);
    v14 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16);
    if (v14 < v13)
    {
      __break(1u);
      return;
    }
    sub_1001CED20(v13, v14);
    swift_endAccess(v19);
    os_unfair_lock_unlock(v11);
    sub_1000A3F78((uint64_t)v8);
  }
  v15 = OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally);
  if (v16)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release(v16);
    v17 = *(_QWORD *)(v1 + v15);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v1 + v15) = 0;
  swift_release(v17);

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 56));
  swift_release(*(_QWORD *)(v1 + 72));
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v1 + 80));

  swift_release(*(_QWORD *)(v1 + 128));
  sub_10000882C(v9, (uint64_t *)&unk_10083A360);
  swift_unknownObjectRelease(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver));
  swift_unknownObjectRelease(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver));
  swift_release(*(_QWORD *)(v1 + v15));
  sub_10000882C(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, (uint64_t *)&unk_1008380D0);
}

uint64_t sub_1005A6B80()
{
  uint64_t v0;

  sub_1005A6904();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005A6BA4()
{
  return type metadata accessor for RDTodayNotificationEngine(0);
}

uint64_t type metadata accessor for RDTodayNotificationEngine(uint64_t a1)
{
  uint64_t result;

  result = qword_100850B30;
  if (!qword_100850B30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDTodayNotificationEngine);
  return result;
}

void sub_1005A6BE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = &unk_1006C3B60;
  v6[2] = &unk_1006C3B60;
  v6[3] = &unk_1006C3B60;
  v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[5] = &unk_1006C3B78;
  v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000BE2FC(319, (unint64_t *)&qword_100839FA0, type metadata accessor for RDStoreControllerNotificationCenter.Token);
  if (v3 <= 0x3F)
  {
    v6[8] = *(_QWORD *)(v2 - 8) + 64;
    v6[9] = &unk_1006C3B90;
    v6[10] = &unk_1006C3BA8;
    v6[11] = &unk_1006C3BA8;
    v6[12] = &unk_1006C3BA8;
    sub_1000BE2FC(319, (unint64_t *)&qword_100839D60, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[13] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 14, v6, a1 + 80);
    }
  }
}

void sub_1005A6CDC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void (*v21)(_QWORD);
  void (*v22)(_QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void (*)(), uint64_t, uint64_t, uint64_t);
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void (*)(), uint64_t, uint64_t, uint64_t);
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t inited;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(_QWORD *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  id v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  void (*v115)(_QWORD *, _QWORD, uint64_t);
  char v116[48];
  void **aBlock;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  void *v120;
  void *v121;
  uint64_t v122;
  id v123;
  _BYTE v124[24];
  _QWORD v125[2];
  uint64_t v126;
  uint64_t v127;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v102 - v6;
  v8 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v8);
  v110 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10001A630(&qword_100850D80);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v108);
  v13 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v102 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char **)((char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)v0[2];
  *v19 = v20;
  v21 = *(void (**)(_QWORD))(v17 + 104);
  v114 = enum case for DispatchPredicate.onQueue(_:);
  v115 = (void (*)(_QWORD *, _QWORD, uint64_t))v21;
  v21(v19);
  v109 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v22 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
  v22(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v23 = OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started;
  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started) & 1) != 0)
  {
    if (qword_100837940 == -1)
    {
LABEL_4:
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001AAA8(v24, (uint64_t)qword_100850AC0);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDTodayNotificationEngine.start() must be called exactly once", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      return;
    }
LABEL_19:
    swift_once(&qword_100837940, sub_1005A6874);
    goto LABEL_4;
  }
  v105 = v16;
  v106 = v7;
  v107 = v5;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10001AAA8(v29, (uint64_t)qword_100850AC0);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Starting RDTodayNotificationEngine", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "os_transaction INIT {name: com.apple.remindd.todayEngine.start}", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }
  v104 = v22;

  v103 = os_transaction_create("com.apple.remindd.todayEngine.start");
  *((_BYTE *)v1 + v23) = 1;
  swift_beginAccess(v1 + 10, v124, 0, 0);
  sub_100018618((uint64_t)(v1 + 10), (uint64_t)v125);
  v38 = v126;
  v39 = v127;
  sub_10000A388(v125, v126);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
  v40 = (uint64_t)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, &aBlock, 33, 0);
  sub_10032289C((uint64_t)v15, v40);
  swift_endAccess(&aBlock);
  v102 = v15;
  v41 = sub_100008868((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_1008380D0);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (void **)swift_slowAlloc(32, -1);
    aBlock = v45;
    *(_DWORD *)v44 = 136315138;
    v46 = Optional.descriptionOrNil.getter(v108);
    v48 = v47;
    v123 = (id)sub_10001A820(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
    swift_bridgeObjectRelease(v48);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDTodayNotificationEngine: bootstrapping cachedLastDismissedDate from RDSynchronizedDismissedTodayNotificationStates {value: %s}", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
  }

  sub_1005ADC80(0x61727473746F6F62, 0xE900000000000070);
  v49 = v126;
  v50 = v127;
  sub_10000A388(v125, v126);
  aBlock = (void **)(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 32))(v49, v50);
  v51 = v109;
  v123 = v109;
  v52 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v53 = (uint64_t)v110;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v110, 1, 1, v52);
  v109 = v51;
  v54 = sub_10001A630(&qword_10084DE18);
  v55 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v56 = sub_1000A5F84(&qword_10084DE20, &qword_10084DE18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v57 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v58 = v111;
  Publisher.receive<A>(on:options:)(&v123, v53, v54, v55, v56, v57);
  sub_10000882C(v53, &qword_10083A970);

  swift_release(aBlock);
  v59 = type metadata accessor for RDTodayNotificationEngine(0);
  sub_1000A5F84(&qword_100850D88, &qword_100850D80, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v60 = v113;
  v61 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v1, sub_1005A7964, 0, 0, 0, v113, v59);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v58, v60);
  v62 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally) = v61;
  swift_release(v62);
  v63 = v1[4];
  ObjectType = swift_getObjectType(v1[3]);
  v65 = swift_allocObject(&unk_1007FC1B8, 24, 7);
  swift_weakInit(v65 + 16, v1);
  v66 = *(_QWORD *)(v63 + 8);
  v67 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v66 + 16);
  swift_retain(v65);
  v67(sub_1005B4E24, v65, ObjectType, v66);
  swift_release(v65);
  v68 = (void *)objc_opt_self(REMUserDefaults);
  v69 = objc_msgSend(v68, "daemonUserDefaults");
  v70 = swift_allocObject(&unk_1007FC1B8, 24, 7);
  swift_weakInit(v70 + 16, v1);
  v121 = sub_1005B4E2C;
  v122 = v70;
  aBlock = _NSConcreteStackBlock;
  v118 = 1107296256;
  v119 = sub_1005A8374;
  v120 = &unk_1007FC1D0;
  v71 = _Block_copy(&aBlock);
  swift_release(v122);
  v72 = objc_msgSend(v69, "streamTodayNotificationFireTime:", v71);
  _Block_release(v71);

  v73 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver) = v72;
  swift_unknownObjectRelease(v73);
  v74 = v1[6];
  v75 = swift_getObjectType(v1[5]);
  v76 = swift_allocObject(&unk_1007FC1B8, 24, 7);
  swift_weakInit(v76 + 16, v1);
  v77 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v74 + 16);
  swift_retain(v76);
  v77(sub_1005B4E34, v76, v75, v74);
  swift_release(v76);
  v78 = objc_msgSend(v68, "daemonUserDefaults");
  v79 = swift_allocObject(&unk_1007FC1B8, 24, 7);
  swift_weakInit(v79 + 16, v1);
  v121 = sub_1005B4E3C;
  v122 = v79;
  aBlock = _NSConcreteStackBlock;
  v118 = 1107296256;
  v119 = sub_100435F5C;
  v120 = &unk_1007FC1F8;
  v80 = _Block_copy(&aBlock);
  swift_release(v122);
  v81 = objc_msgSend(v78, "streamShouldIncludeRemindersDueTodayInBadgeCount:", v80);
  _Block_release(v80);

  v82 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver) = v81;
  swift_unknownObjectRelease(v82);
  v83 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v83, v116);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v85 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
  v88 = v87;

  *(_QWORD *)(inited + 32) = v86;
  *(_QWORD *)(inited + 40) = v88;
  v89 = sub_1002E6C54(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v90 = swift_allocObject(&unk_1007FC1B8, 24, 7);
  swift_weakInit(v90 + 16, v1);
  swift_retain(v90);
  v91 = (uint64_t)v106;
  v92 = v109;
  sub_100395434(v89, v109, (uint64_t)sub_1005B4E44, v90, (uint64_t)v106);
  swift_bridgeObjectRelease(v89);
  swift_release_n(v90, 2);
  v93 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v91, 0, 1, v93);
  v94 = v91;
  v95 = (uint64_t)v107;
  sub_1000A5CA8(v94, (uint64_t)v107, (uint64_t *)&unk_10083A360);
  v96 = (uint64_t)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken, &aBlock, 33, 0);
  sub_1000BABD0(v95, v96, (uint64_t *)&unk_10083A360);
  swift_endAccess(&aBlock);
  v97 = swift_allocObject(&unk_1007FC230, 24, 7);
  v98 = v103;
  *(_QWORD *)(v97 + 16) = v103;
  *v19 = v92;
  v99 = v105;
  v115(v19, v114, v105);
  v100 = v92;
  swift_unknownObjectRetain(v98);
  LOBYTE(v78) = _dispatchPreconditionTest(_:)(v19);
  v104(v19, v99);
  if ((v78 & 1) != 0)
  {
    v101 = swift_allocObject(&unk_1007FC258, 32, 7);
    *(_QWORD *)(v101 + 16) = sub_1005B4E4C;
    *(_QWORD *)(v101 + 24) = v97;
    swift_retain(v97);
    sub_1005B0B1C((void (*)(_QWORD))sub_1005B4E70, v101);
    swift_unknownObjectRelease(v98);
    swift_release(v97);
    swift_release(v101);
    sub_10000882C((uint64_t)v102, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v125);
  }
  else
  {
    __break(1u);
  }
}

void sub_1005A7964()
{
  sub_1005A9384();
}

void sub_1005A7984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE v28[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v28, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v7 = Strong;
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100850AC0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "todayNotification XPC Event triggered", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: com.apple.remindd.todayEngine.bannerTimeEventStream}", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = os_transaction_create("com.apple.remindd.todayEngine.bannerTimeEventStream");
    v18 = swift_allocObject(&unk_1007FC4B0, 24, 7);
    *(_QWORD *)(v18 + 16) = v17;
    v19 = *(void **)(v7 + 16);
    *v5 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    swift_unknownObjectRetain(v17);
    v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    if ((v19 & 1) != 0)
    {
      v21 = (_QWORD *)swift_allocObject(&unk_1007FC4D8, 40, 7);
      v21[2] = v7;
      v21[3] = sub_1005B4F74;
      v21[4] = v18;
      swift_retain(v7);
      swift_retain(v18);
      sub_1005A9A64((uint64_t (*)(_QWORD))sub_1005B4F18, (uint64_t)v21);
      swift_release(v7);
      swift_unknownObjectRelease(v17);
      swift_release(v18);
      swift_release(v21);
      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (qword_100837940 != -1)
LABEL_15:
    swift_once(&qword_100837940, sub_1005A6874);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001AAA8(v22, (uint64_t)qword_100850AC0);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

}

void sub_1005A7CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t aBlock[5];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  __chkstk_darwin(v6);
  v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100841610);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  v14 = a2 + 16;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_100850AC0);
  v17 = sub_100008868(a1, (uint64_t)v13, (uint64_t *)&unk_100841610);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v43 = v16;
    v44 = v14;
    v45 = v4;
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136315138;
    sub_100008868((uint64_t)v13, (uint64_t)v11, (uint64_t *)&unk_100841610);
    v22 = type metadata accessor for DateComponents(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) == 1)
    {
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100841610);
      v24 = 0xE300000000000000;
      v25 = 7104878;
    }
    else
    {
      v25 = DateComponents.description.getter();
      v24 = v26;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
    }
    v54 = sub_10001A820(v25, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    swift_bridgeObjectRelease(v24);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100841610);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "streamTodayNotificationFireTime: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v14 = v44;
    v4 = v45;
  }
  else
  {
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100841610);

  }
  swift_beginAccess(v14, &v54, 0, 0);
  Strong = swift_weakLoadStrong(v14);
  v28 = Logger.logObject.getter(Strong);
  v29 = v28;
  if (Strong)
  {
    v30 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "os_transaction INIT {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = os_transaction_create("com.apple.remindd.todayEngine.todayNotificationTimeObserver");
    v33 = swift_allocObject(&unk_1007FC410, 32, 7);
    *(_QWORD *)(v33 + 16) = Strong;
    *(_QWORD *)(v33 + 24) = v32;
    aBlock[4] = (uint64_t)sub_1005B4F20;
    v53 = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000094C8;
    aBlock[3] = (uint64_t)&unk_1007FC428;
    v34 = _Block_copy(aBlock);
    swift_retain(Strong);
    v35 = swift_unknownObjectRetain(v32);
    v36 = v46;
    static DispatchQoS.unspecified.getter(v35);
    v51 = _swiftEmptyArrayStorage;
    v37 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = sub_10001A630((uint64_t *)&unk_100838000);
    v39 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v40 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v38, v39, v4, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v34);
    _Block_release(v34);
    swift_unknownObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v4);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
    swift_release(Strong);
    swift_release(v53);
  }
  else
  {
    v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v41, "Received streamTodayNotificationFireTime callback on deallocated RDTodayNotificationEngine", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

  }
}

uint64_t sub_1005A8238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = swift_allocObject(&unk_1007FC460, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  v9 = *(void **)(a1 + 16);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain(a2);
  v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((a2 & 1) != 0)
  {
    v12 = (_QWORD *)swift_allocObject(&unk_1007FC488, 40, 7);
    v12[2] = a1;
    v12[3] = sub_1005B4F4C;
    v12[4] = v8;
    swift_retain(a1);
    swift_retain(v8);
    sub_1005A9A64((uint64_t (*)(_QWORD))sub_1005B4F18, (uint64_t)v12);
    swift_release(v8);
    return swift_release(v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005A8374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v9 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  }
  else
  {
    v10 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
  }
  swift_retain(v7);
  v8(v6);
  swift_release(v7);
  return sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100841610);
}

void sub_1005A8458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE v28[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v28, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v7 = Strong;
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100850AC0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "todayNotificationBadge event triggered", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: com.apple.remindd.todayEngine.badgeEventStream}", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = os_transaction_create("com.apple.remindd.todayEngine.badgeEventStream");
    v18 = swift_allocObject(&unk_1007FC370, 32, 7);
    *(_QWORD *)(v18 + 16) = v7;
    *(_QWORD *)(v18 + 24) = v17;
    v19 = *(void **)(v7 + 16);
    *v5 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    swift_retain(v7);
    swift_unknownObjectRetain(v17);
    v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    if ((v19 & 1) != 0)
    {
      v21 = swift_allocObject(&unk_1007FC398, 32, 7);
      *(_QWORD *)(v21 + 16) = sub_1005B4EB8;
      *(_QWORD *)(v21 + 24) = v18;
      swift_retain(v18);
      sub_1005B0B1C((void (*)(_QWORD))sub_1005B4E70, v21);
      swift_release(v7);
      swift_unknownObjectRelease(v17);
      swift_release(v18);
      swift_release(v21);
      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (qword_100837940 != -1)
LABEL_15:
    swift_once(&qword_100837940, sub_1005A6874);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001AAA8(v22, (uint64_t)qword_100850AC0);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

}

uint64_t sub_1005A879C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = swift_allocObject(&unk_1007FC3C0, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  v9 = *(void **)(a1 + 16);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain(a2);
  v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((a2 & 1) != 0)
  {
    v12 = (_QWORD *)swift_allocObject(&unk_1007FC3E8, 40, 7);
    v12[2] = a1;
    v12[3] = sub_1005B4EF0;
    v12[4] = v8;
    swift_retain(a1);
    swift_retain(v8);
    sub_1005A9A64((uint64_t (*)(_QWORD))sub_1005B4F18, (uint64_t)v12);
    swift_release(v8);
    return swift_release(v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1005A88D8(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t aBlock[5];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001AAA8(v10, (uint64_t)qword_100850AC0);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = Bool.yesno.getter(a1 & 1);
    v18 = v17;
    v45 = sub_10001A820(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "includeToday: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  swift_beginAccess(v9, &v45, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  v20 = Logger.logObject.getter(Strong);
  v21 = v20;
  if (Strong)
  {
    v22 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction INIT {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = os_transaction_create("com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver");
    v25 = swift_allocObject(&unk_1007FC2D0, 32, 7);
    *(_QWORD *)(v25 + 16) = Strong;
    *(_QWORD *)(v25 + 24) = v24;
    aBlock[4] = (uint64_t)sub_1005B4E88;
    v44 = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000094C8;
    aBlock[3] = (uint64_t)&unk_1007FC2E8;
    v26 = _Block_copy(aBlock);
    swift_retain(Strong);
    v27 = swift_unknownObjectRetain(v24);
    static DispatchQoS.unspecified.getter(v27);
    v42 = _swiftEmptyArrayStorage;
    v28 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A630((uint64_t *)&unk_100838000);
    v30 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = v39;
    v32 = v29;
    v33 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v30, v41, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v31, v26);
    _Block_release(v26);
    swift_unknownObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
    swift_release(Strong);
    swift_release(v44);
  }
  else
  {
    v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v34, "Received streamBadgeCountCriteria callback on deallocated RDTodayNotificationEngine", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

  }
}

uint64_t sub_1005A8D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = swift_allocObject(&unk_1007FC320, 24, 7);
  *(_QWORD *)(v8 + 16) = a2;
  v9 = *(void **)(a1 + 16);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain(a2);
  v10 = v9;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((a2 & 1) != 0)
  {
    v12 = swift_allocObject(&unk_1007FC348, 32, 7);
    *(_QWORD *)(v12 + 16) = sub_1005B4E90;
    *(_QWORD *)(v12 + 24) = v8;
    swift_retain(v8);
    sub_1005B0B1C((void (*)(_QWORD))sub_1005B4E70, v12);
    swift_release(v8);
    return swift_release(v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1005A8E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE v25[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v25, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v8 = Strong;
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_100850AC0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction INIT {name: com.apple.remindd.todayEngine.storeControllerChange}", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = os_transaction_create("com.apple.remindd.todayEngine.storeControllerChange");
    v15 = swift_allocObject(&unk_1007FC280, 32, 7);
    *(_QWORD *)(v15 + 16) = v8;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = *(void **)(v8 + 16);
    *v6 = v16;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    swift_retain(v8);
    swift_unknownObjectRetain(v14);
    v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)(v6);
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    if ((v16 & 1) != 0)
    {
      v18 = swift_allocObject(&unk_1007FC2A8, 32, 7);
      *(_QWORD *)(v18 + 16) = sub_1005B4E78;
      *(_QWORD *)(v18 + 24) = v15;
      swift_retain(v15);
      sub_1005B0B1C((void (*)(_QWORD))sub_1005B4E70, v18);
      swift_release(v8);
      swift_unknownObjectRelease(v14);
      swift_release(v15);
      swift_release(v18);
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  if (qword_100837940 != -1)
LABEL_13:
    swift_once(&qword_100837940, sub_1005A6874);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001AAA8(v19, (uint64_t)qword_100850AC0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received storeController changed notification after RDTodayNotificationEngine was deallocated", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

uint64_t sub_1005A9130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(a1 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  swift_unknownObjectRetain_n(a2, 2);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    sub_1005AEFA4();
    if (qword_100837940 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837940, sub_1005A6874);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001AAA8(v10, (uint64_t)qword_100850AC0);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction RELEASE {name: com.apple.remindd.todayEngine.storeControllerChange}", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  return swift_unknownObjectRelease_n(a2, 2);
}

void sub_1005A92B0(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100850AC0);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

void sub_1005A9384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(_BYTE *, uint64_t, uint64_t);
  void (*v40)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_BYTE *, uint64_t);
  _BYTE v53[4];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  char v63[24];
  char v64[24];
  char v65[24];
  _BYTE v66[24];
  uint64_t v67[3];
  uint64_t v68;
  _BYTE v69[16];
  uint64_t v70;
  uint64_t v71;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v62 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v61 = &v53[-v6];
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v8 = __chkstk_darwin(v7);
  v58 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v60 = &v53[-v11];
  v12 = __chkstk_darwin(v10);
  v14 = &v53[-v13];
  __chkstk_darwin(v12);
  v16 = &v53[-v15];
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_100850AC0);
  v18 = swift_retain_n(v0, 4);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = v20;
  v22 = os_log_type_enabled(v19, v20);
  v59 = v5;
  if (v22)
  {
    v23 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(64, -1);
    v67[0] = v56;
    *(_DWORD *)v23 = 136315394;
    v55 = v23 + 4;
    v54 = v21;
    swift_beginAccess(v1 + 80, v64, 0, 0);
    sub_100018618(v1 + 80, (uint64_t)&v68);
    v57 = v2;
    v24 = v70;
    v25 = v71;
    sub_10000A388(&v68, v70);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v68);
    v26 = Optional.descriptionOrNil.getter(v7);
    v28 = v27;
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_1008380D0);
    v68 = sub_10001A820(v26, v28, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v23 + 12) = 2080;
    v29 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v63, 0, 0);
    sub_100008868(v29, (uint64_t)v16, (uint64_t *)&unk_1008380D0);
    v30 = Optional.descriptionOrNil.getter(v7);
    v32 = v31;
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_1008380D0);
    v68 = sub_10001A820(v30, v32, v67);
    v2 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v54, "RDTodayNotificationEngine: received RDSynchronizedDismissedTodayNotificationStates.lastDismissedDateDidChangeExternally {remoteValue: %s, localValue: %s}", (uint8_t *)v23, 0x16u);
    v33 = v56;
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release_n(v1, 4);
  }
  v34 = v61;
  v35 = v1 + 80;
  swift_beginAccess(v1 + 80, v67, 0, 0);
  sub_100018618(v1 + 80, (uint64_t)&v68);
  v36 = v70;
  v37 = v71;
  sub_10000A388(&v68, v70);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
  v38 = v62;
  v39 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v62 + 48);
  if (v39(v14, 1, v2) == 1)
  {
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_1008380D0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v68);
LABEL_10:
    sub_100018618(v1 + 80, (uint64_t)&v68);
    v43 = v70;
    v44 = v71;
    sub_10000A388(&v68, v70);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v68);
    v45 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v66, 33, 0);
    sub_1000BABD0((uint64_t)v16, v45, (uint64_t *)&unk_1008380D0);
    v46 = (uint64_t *)v66;
LABEL_11:
    swift_endAccess(v46);
    sub_1005ADC80(0xD000000000000024, 0x8000000100709120);
    return;
  }
  v40 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v38 + 32);
  v40(v34, v14, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v68);
  v41 = v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v65, 0, 0);
  v42 = v60;
  sub_100008868(v41, (uint64_t)v60, (uint64_t *)&unk_1008380D0);
  if (v39(v42, 1, v2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v34, v2);
    sub_10000882C((uint64_t)v42, (uint64_t *)&unk_1008380D0);
    goto LABEL_10;
  }
  v47 = v59;
  v40(v59, v42, v2);
  if ((static Date.< infix(_:_:)(v47, v34) & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v47, v2);
    v40(v16, v34, v2);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v16, 0, 1, v2);
    v48 = (uint64_t)v16;
    v49 = v58;
    sub_1000A5CA8(v48, (uint64_t)v58, (uint64_t *)&unk_1008380D0);
    swift_beginAccess(v41, &v68, 33, 0);
    sub_1000BABD0((uint64_t)v49, v41, (uint64_t *)&unk_1008380D0);
    v46 = &v68;
    goto LABEL_11;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v38 + 16))(v16, v47, v2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v16, 0, 1, v2);
  swift_beginAccess(v1 + 80, &v68, 33, 0);
  v51 = *(_QWORD *)(v1 + 104);
  v50 = *(_QWORD *)(v1 + 112);
  sub_10001BA38(v35, v51);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v50 + 16))(v16, v51, v50);
  swift_endAccess(&v68);
  v52 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v52(v47, v2);
  v52(v34, v2);
}

uint64_t sub_1005A9A64(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  char *v60;
  char *v61;
  uint8_t *v62;
  char *v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t result;
  void (*v71)(char *, char *, char *);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t (*v79)(char *, char *, char *);
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __n128 v89;
  void (*v90)(char *, char *, __n128);
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __n128 v95;
  void **v96;
  char *v97;
  double v98;
  double v99;
  char *v100;
  uint64_t v101;
  char *v102;
  id v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint8_t *v114;
  void **v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void (*v119)(char *, char *);
  double v120;
  char *v121;
  uint64_t (*v122)(char *, char *, char *);
  char *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  __n128 v133;
  uint64_t (*v134)(char *, char *, __n128);
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  __n128 v140;
  char *v141;
  uint64_t (*v142)(_QWORD);
  uint64_t (*v143)(_QWORD);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t (**v149)(char *, uint64_t);
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  __n128 v156;
  void **v157;
  unint64_t v158;
  unint64_t v159;
  void **v160;
  char *v161;
  char *v162;
  __n128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t (*v173)(char *, uint64_t);
  uint64_t v174;
  uint64_t (**v175)(char *, uint64_t);
  uint64_t (*v176)(char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  Class isa;
  double v188;
  id v189;
  id v190;
  void **v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void **v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint8_t *v203;
  char *v204;
  void **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  os_log_type_t v216;
  uint8_t *v217;
  const char *v218;
  uint64_t v219;
  unint64_t v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __n128 v225;
  uint64_t v226;
  os_log_type_t v227;
  void *v228;
  char *v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  id v233;
  NSString v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  __n128 v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  id v250;
  uint64_t v251;
  NSString v252;
  char *v253;
  id v254;
  char *v255;
  id v256;
  NSString v257;
  Class v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  char **v273;
  char *v274;
  id v275;
  uint64_t v276;
  id v277;
  char *v278;
  id v279;
  id v280;
  void *v281;
  uint64_t v282;
  _QWORD *v283;
  char *v284;
  void **v285;
  void *v286;
  id v287;
  Class v288;
  id v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  __n128 v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t (*v300)(_QWORD);
  void *v301;
  uint64_t v302;
  void **v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  void **v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  void **v330;
  char *v331;
  char *v332;
  char *v333;
  void (*v334)(char *, char *, uint64_t);
  void **v335;
  uint64_t (*v336)(char *, uint64_t, uint64_t);
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  char *v345;
  uint64_t (*v346)(_QWORD);
  char *v347;
  char *v348;
  char *v349;
  uint64_t (**v350)(char *, uint64_t);
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  void **v355;
  _QWORD v356[3];
  char v357[8];
  double v358;
  void **aBlock;
  _QWORD v360[4];
  uint64_t v361;
  char v362[8];

  v341 = a2;
  v346 = a1;
  v338 = sub_10001A630((uint64_t *)&unk_100850D60);
  v317 = *(_QWORD *)(v338 - 8);
  __chkstk_darwin(v338);
  v330 = (id *)((char *)&v305 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v314 = type metadata accessor for RDUserNotificationType(0);
  v313 = *(_QWORD *)(v314 - 8);
  __chkstk_darwin(v314);
  v312 = (char *)&v305 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = type metadata accessor for RDUserNotificationCategory(0);
  v311 = *(_QWORD *)(v316 - 8);
  v5 = __chkstk_darwin(v316);
  v307 = (char *)&v305 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = v6;
  __chkstk_darwin(v5);
  v310 = (char *)&v305 - v7;
  v8 = sub_10001A630((uint64_t *)&unk_100846BD0);
  __chkstk_darwin(v8);
  v315 = (id *)((char *)&v305 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v344 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v350 = *(uint64_t (***)(char *, uint64_t))(v344 - 8);
  __chkstk_darwin(v344);
  v11 = (char *)&v305 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = (void **)type metadata accessor for REMRemindersListDataView.DatesModel.Group(0);
  v352 = (uint64_t)*(v355 - 1);
  v12 = __chkstk_darwin(v355);
  v14 = (char *)&v305 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v351 = (char *)&v305 - v16;
  __chkstk_darwin(v15);
  v345 = (char *)&v305 - v17;
  v337 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v329 = *(_QWORD *)(v337 - 8);
  __chkstk_darwin(v337);
  v328 = (char *)&v305 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v349 = (char *)type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v335 = (void **)*((_QWORD *)v349 - 1);
  __chkstk_darwin(v349);
  v327 = (char *)&v305 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336 = (uint64_t (*)(char *, uint64_t, uint64_t))type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v348 = (char *)*((_QWORD *)v336 - 1);
  __chkstk_darwin(v336);
  v340 = (char *)&v305 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = sub_10001A630((uint64_t *)&unk_100850D40);
  v320 = *(_QWORD *)(v321 - 8);
  __chkstk_darwin(v321);
  v326 = (char *)&v305 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v319 = type metadata accessor for REMRemindersListDataView.DatesModel(0);
  v318 = *(_QWORD *)(v319 - 8);
  __chkstk_darwin(v319);
  v323 = (char *)&v305 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v24 = __chkstk_darwin(v23);
  v339 = (uint64_t)&v305 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v305 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v305 - v29;
  v31 = type metadata accessor for Date(0);
  v353 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v332 = (char *)&v305 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v325 = (char *)&v305 - v35;
  v36 = __chkstk_darwin(v34);
  v308 = (char *)&v305 - v37;
  v38 = __chkstk_darwin(v36);
  v331 = (char *)&v305 - v39;
  v40 = __chkstk_darwin(v38);
  v324 = (char *)&v305 - v41;
  v42 = __chkstk_darwin(v40);
  v322 = (char *)&v305 - v43;
  v44 = __chkstk_darwin(v42);
  v333 = (char *)&v305 - v45;
  v46 = __chkstk_darwin(v44);
  v343 = (char *)&v305 - v47;
  v309 = v48;
  __chkstk_darwin(v46);
  v354 = (char *)&v305 - v49;
  v50 = type metadata accessor for DispatchPredicate(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v53 = (id *)((char *)&v305 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  v342 = v2;
  v54 = *(void **)(v2 + 16);
  *v53 = v54;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v51 + 104))(v53, enum case for DispatchPredicate.onQueue(_:), v50);
  v55 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)(v53);
  (*(void (**)(_QWORD *, uint64_t))(v51 + 8))(v53, v50);
  if ((v54 & 1) == 0)
    goto LABEL_94;
  v305 = v55;
  if (qword_100837940 != -1)
    goto LABEL_95;
  while (1)
  {
    v56 = type metadata accessor for Logger(0);
    v347 = (char *)sub_10001AAA8(v56, (uint64_t)qword_100850AC0);
    v57 = Logger.logObject.getter(v347);
    v58 = static os_log_type_t.default.getter(v57);
    v59 = os_log_type_enabled(v57, v58);
    v60 = (char *)v31;
    v61 = v349;
    if (v59)
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDTodayNotificationEngine: started postTodayNotificationIfApplicable", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

    v63 = v354;
    static Date.now.getter();
    v64 = v353;
    v334 = *(void (**)(char *, char *, uint64_t))(v353 + 16);
    v334(v28, v63, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v28, 0, 1, v31);
    sub_1005ABDC4((uint64_t)v28, (uint64_t)v30);
    sub_10000882C((uint64_t)v28, (uint64_t *)&unk_1008380D0);
    v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
    if (v65(v30, 1, v31) == 1)
    {
      v66 = sub_10000882C((uint64_t)v30, (uint64_t *)&unk_1008380D0);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.info.getter(v67);
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v69 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Skipping postTodayNotificationIfApplicable because user has disabled today notification or there was error getting lastTodayNotificationFireDate", v69, 2u);
        swift_slowDealloc(v69, -1, -1);
      }

      result = (*(uint64_t (**)(char *, uint64_t))(v353 + 8))(v63, v31);
      if (v346)
        return v346(0);
      return result;
    }
    v71 = *(void (**)(char *, char *, char *))(v64 + 32);
    v72 = v343;
    v71(v343, v30, v60);
    v73 = v342 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
    swift_beginAccess(v342 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v362, 0, 0);
    v74 = v73;
    v75 = v339;
    sub_100008868(v74, v339, (uint64_t *)&unk_1008380D0);
    if (v65((char *)v75, 1, (uint64_t)v60) == 1)
    {
      v324 = (char *)v71;
      sub_10000882C(v75, (uint64_t *)&unk_1008380D0);
      v76 = v72;
    }
    else
    {
      v77 = v333;
      v71(v333, (char *)v75, v60);
      v76 = v72;
      if ((static Date.< infix(_:_:)(v72, v77) & 1) != 0)
      {
        v78 = v322;
        v79 = (uint64_t (*)(char *, char *, char *))v334;
        v334(v322, v72, (uint64_t)v60);
        v80 = v324;
        v81 = v79(v324, v77, v60);
        v82 = Logger.logObject.getter(v81);
        v83 = static os_log_type_t.default.getter(v82);
        if (os_log_type_enabled(v82, v83))
        {
          v84 = swift_slowAlloc(22, -1);
          v355 = (void **)swift_slowAlloc(64, -1);
          aBlock = v355;
          *(_DWORD *)v84 = 136446466;
          v85 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v86 = dispatch thunk of CustomStringConvertible.description.getter(v60, v85);
          v88 = v87;
          v358 = COERCE_DOUBLE(sub_10001A820(v86, v87, (uint64_t *)&aBlock));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
          v89 = swift_bridgeObjectRelease(v88);
          v90 = *(void (**)(char *, char *, __n128))(v353 + 8);
          v90(v78, v60, v89);
          *(_WORD *)(v84 + 12) = 2082;
          v91 = v324;
          v92 = dispatch thunk of CustomStringConvertible.description.getter(v60, v85);
          v94 = v93;
          v358 = COERCE_DOUBLE(sub_10001A820(v92, v93, (uint64_t *)&aBlock));
          v63 = v354;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
          v95 = swift_bridgeObjectRelease(v94);
          v90(v91, v60, v95);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Skipping postTodayNotificationIfApplicable because {lastTodayNotificationFireDate: %{public}s < lastDismissedDate: %{public}s}", (uint8_t *)v84, 0x16u);
          v96 = v355;
          swift_arrayDestroy(v355, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v84, -1, -1);

          ((void (*)(char *, char *))v90)(v333, v60);
          v97 = v343;
        }
        else
        {

          v90 = *(void (**)(char *, char *, __n128))(v353 + 8);
          ((void (*)(char *, char *))v90)(v80, v60);
          ((void (*)(char *, char *))v90)(v78, v60);
          ((void (*)(char *, char *))v90)(v77, v60);
          v97 = v76;
        }
        ((void (*)(char *, char *))v90)(v97, v60);
        v142 = v346;
        result = ((uint64_t (*)(char *, char *))v90)(v63, v60);
        if (!v142)
          return result;
        return v142(0);
      }
      v324 = (char *)v71;
      (*(void (**)(char *, char *))(v353 + 8))(v77, v60);
    }
    v98 = Date.timeIntervalSince(_:)(v76);
    sub_1000151B0(0, (unint64_t *)&qword_100850D70, NSDateInterval_ptr);
    v99 = static NSDateInterval.rem1Minute.getter();
    v31 = (uint64_t)v355;
    v100 = v348;
    v101 = (uint64_t)v340;
    if (v98 >= v99)
    {
      v120 = v99;
      v121 = v325;
      v122 = (uint64_t (*)(char *, char *, char *))v334;
      v334(v325, v76, (uint64_t)v60);
      v123 = v332;
      v124 = v122(v332, v63, v60);
      v125 = Logger.logObject.getter(v124);
      v126 = static os_log_type_t.info.getter(v125);
      if (os_log_type_enabled(v125, v126))
      {
        v127 = swift_slowAlloc(32, -1);
        v128 = (void **)swift_slowAlloc(64, -1);
        aBlock = v128;
        *(_DWORD *)v127 = 134349570;
        v358 = v120;
        v129 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
        *(_WORD *)(v127 + 12) = 2082;
        v130 = Date.description.getter(v129);
        v132 = v131;
        v358 = COERCE_DOUBLE(sub_10001A820(v130, v131, (uint64_t *)&aBlock));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
        v133 = swift_bridgeObjectRelease(v132);
        v134 = *(uint64_t (**)(char *, char *, __n128))(v353 + 8);
        v135 = v134(v121, v60, v133);
        *(_WORD *)(v127 + 22) = 2082;
        v136 = v332;
        v137 = Date.description.getter(v135);
        v139 = v138;
        v358 = COERCE_DOUBLE(sub_10001A820(v137, v138, (uint64_t *)&aBlock));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
        v140 = swift_bridgeObjectRelease(v139);
        v134(v136, v60, v140);
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "Current time is >%{public}fs after desired fire time. Not firing Today Notification {lastFireDate: %{public}s, now: %{public}s}", (uint8_t *)v127, 0x20u);
        swift_arrayDestroy(v128, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        swift_slowDealloc(v127, -1, -1);

        v141 = v343;
      }
      else
      {

        v134 = *(uint64_t (**)(char *, char *, __n128))(v353 + 8);
        ((void (*)(char *, char *))v134)(v123, v60);
        ((void (*)(char *, char *))v134)(v121, v60);
        v141 = v76;
      }
      ((void (*)(char *, char *))v134)(v141, v60);
      v142 = v346;
      result = ((uint64_t (*)(char *, char *))v134)(v354, v60);
      if (!v142)
        return result;
      return v142(0);
    }
    v102 = *(char **)(v342 + 120);
    v103 = objc_allocWithZone((Class)REMStore);
    v333 = v102;
    v104 = (char *)objc_msgSend(v103, "initWithDaemonController:", v102);
    (*((void (**)(uint64_t, _QWORD, uint64_t (*)(char *, uint64_t, uint64_t)))v100 + 13))(v101, enum case for REMRemindersListDataView.SortingStyle.default(_:), v336);
    v105 = v101;
    v106 = v327;
    ((void (*)(char *, _QWORD, char *))v335[13])(v327, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v61);
    v107 = v329;
    v108 = v328;
    (*(void (**)(char *, _QWORD, uint64_t))(v329 + 104))(v328, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v337);
    v109 = v326;
    static REMRemindersListDataView.fetchScheduled(store:sortingStyle:showCompleted:countCompleted:remindersPrefetch:alwaysIncludeTodayGroup:diffingAgainst:)(v104, v105, v106, 0, v108, 0, 0);
    v325 = 0;
    v332 = v104;
    (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v337);
    ((void (*)(char *, char *))v335[1])(v106, v349);
    (*((void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))v348 + 1))(v340, v336);
    v30 = (char *)v321;
    REMRemindersListDataView.Result.model.getter(v321);
    v144 = (*(uint64_t (**)(char *, char *))(v320 + 8))(v109, v30);
    v145 = REMRemindersListDataView.DatesModel.groups.getter(v144);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v146 = *(_QWORD *)(v145 + 16);
    v348 = v60;
    v349 = v14;
    v340 = (char *)v146;
    if (!v146)
      break;
    v147 = 0;
    v148 = v352;
    v28 = v345;
    v339 = v145;
    while (v147 < *(_QWORD *)(v145 + 16))
    {
      v30 = v60;
      v150 = (*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
      v151 = *(_QWORD *)(v148 + 72);
      v152 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v148 + 16))(v28, v145 + v150 + v151 * v147, v31);
      v153 = REMRemindersListDataView.DatesModel.Group.reminders.getter(v152);
      v154 = v28;
      v155 = *(_QWORD *)(v153 + 16);
      v156 = swift_bridgeObjectRelease(v153);
      if (v155)
      {
        v30 = *(char **)(v148 + 32);
        ((void (*)(char *, char *, uint64_t, __n128))v30)(v351, v154, v31, v156);
        v157 = aBlock;
        if ((swift_isUniquelyReferenced_nonNull_native(aBlock) & 1) == 0)
        {
          sub_1001C24A4(0, (int64_t)v157[2] + 1, 1);
          v148 = v352;
          v157 = aBlock;
        }
        v14 = v349;
        v159 = (unint64_t)v157[2];
        v158 = (unint64_t)v157[3];
        if (v159 >= v158 >> 1)
        {
          sub_1001C24A4(v158 > 1, v159 + 1, 1);
          v148 = v352;
          v157 = aBlock;
        }
        v157[2] = (void *)(v159 + 1);
        v31 = (uint64_t)v355;
        ((void (*)(char *, char *, void **))v30)((char *)v157 + v150 + v159 * v151, v351, v355);
        aBlock = v157;
        v60 = v348;
        v149 = v350;
        v28 = v345;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v148 + 8))(v154, v31);
        v14 = v349;
        v28 = v154;
        v60 = v30;
        v149 = v350;
      }
      ++v147;
      v145 = v339;
      if (v340 == (char *)v147)
      {
        v160 = aBlock;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    swift_once(&qword_100837940, sub_1005A6874);
  }
  v160 = (void **)_swiftEmptyArrayStorage;
  v149 = v350;
  v148 = v352;
LABEL_43:
  swift_bridgeObjectRelease(v145);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v340 = (char *)v160[2];
  if (v340)
  {
    v339 = (uint64_t)v160
         + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v337 = *(_QWORD *)(v148 + 72);
    v336 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v148 + 16);
    v335 = v160;
    swift_retain(v160);
    v161 = 0;
    v162 = v354;
    do
    {
      v167 = v336(v14, v339 + v337 * (_QWORD)v161, v31);
      v168 = REMRemindersListDataView.DatesModel.Group.reminders.getter(v167);
      v169 = (char *)v168;
      v170 = *(_QWORD *)(v168 + 16);
      if (v170)
      {
        v351 = v161;
        v358 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        specialized ContiguousArray.reserveCapacity(_:)(v170);
        v171 = (*((unsigned __int8 *)v149 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v149 + 80);
        v345 = v169;
        v172 = &v169[v171];
        v173 = v149[9];
        v174 = v344;
        v175 = v149;
        v176 = v149[2];
        do
        {
          v177 = ((uint64_t (*)(char *, char *, uint64_t))v176)(v11, v172, v174);
          v178 = REMRemindersListDataView.ReminderLite.objectID.getter(v177);
          v179 = v175[1](v11, v174);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v179);
          v180 = *(_QWORD *)(*(_QWORD *)&v358 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v180);
          v181 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v180, v178);
          specialized ContiguousArray._endMutation()(v181);
          v172 = (char *)v173 + (_QWORD)v172;
          --v170;
        }
        while (v170);
        v164 = *(_QWORD *)&v358;
        v163 = swift_bridgeObjectRelease(v345);
        v60 = v348;
        v162 = v354;
        v149 = v175;
        v14 = v349;
        v161 = v351;
      }
      else
      {
        v163 = swift_bridgeObjectRelease(v168);
        v164 = (uint64_t)_swiftEmptyArrayStorage;
      }
      ++v161;
      v165 = (uint64_t)v355;
      (*(void (**)(char *, void **, __n128))(v352 + 8))(v14, v355, v163);
      v166 = v164;
      v31 = v165;
      sub_1001E1C20(v166);
    }
    while (v161 != v340);
    swift_release_n(v335, 2);
    v182 = (uint64_t)aBlock;
  }
  else
  {
    swift_release(v160);
    v182 = (uint64_t)_swiftEmptyArrayStorage;
    v162 = v354;
  }
  v183 = v353;
  if ((unint64_t)v182 >> 62)
  {
    if (v182 < 0)
      v304 = v182;
    else
      v304 = v182 & 0xFFFFFFFFFFFFFF8;
    v185 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v182);
    v186 = _bridgeCocoaArray<A>(_:)(v304, v185);
    swift_bridgeObjectRelease(v182);
  }
  else
  {
    v184 = swift_bridgeObjectRetain(v182);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v184);
    v185 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v186 = v182;
  }
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v188 = swift_bridgeObjectRelease(v186).n128_u64[0];
  aBlock = 0;
  v189 = v332;
  v190 = objc_msgSend(v332, "fetchRemindersWithObjectIDs:error:", isa, &aBlock, v188);

  v191 = aBlock;
  if (v190)
  {
    v192 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    v193 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v194 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v190, v185, v192, v193);
    v195 = v191;

    __chkstk_darwin(v196);
    *(&v305 - 2) = (id)v194;
    *(&v305 - 1) = v162;
    v197 = sub_100351FC8((void (*)(id *))sub_1005B4BDC, (uint64_t)(&v305 - 4), v182);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v194);
    v198 = swift_bridgeObjectRetain(v197);
    v199 = (char *)sub_1005B39AC(v198);
    swift_bridgeObjectRelease(v197);
    v351 = v199;
    v200 = swift_bridgeObjectRetain(v199);
    v201 = Logger.logObject.getter(v200);
    v202 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v201, v202))
    {
      v203 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v203 = 134217984;
      v204 = v351;
      aBlock = (void **)*((_QWORD *)v351 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v360);
      swift_bridgeObjectRelease(v204);
      _os_log_impl((void *)&_mh_execute_header, v201, v202, "REMRemindersListDataView.fetchScheduled up to now fetched AllDay reminders. {count: %ld}", v203, 0xCu);
      swift_slowDealloc(v203, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v351);
    }
    v208 = *((_QWORD *)v351 + 2);
    if (v208)
    {
      v209 = (*(unsigned __int8 *)(v317 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v317 + 80);
      v210 = (uint64_t)&v351[v209];
      v211 = *(_QWORD *)(v317 + 72);
      swift_bridgeObjectRetain(v351);
      v212 = (void **)v210;
      v213 = v208;
      while ((sub_1005AC830(*v212, (char *)v212 + *(int *)(v338 + 48), v162) & 1) == 0)
      {
        v212 = (void **)((char *)v212 + v211);
        if (!--v213)
        {
          swift_bridgeObjectRelease(v197);
          v214 = swift_bridgeObjectRelease_n(v351, 2);
          v215 = Logger.logObject.getter(v214);
          v216 = static os_log_type_t.default.getter(v215);
          if (!os_log_type_enabled(v215, v216))
            goto LABEL_70;
          v217 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v217 = 0;
          v218 = "No all-day reminder whose lastBannerPresentationDate is before their own dueDate (at TodayNotificationF"
                 "ireTime). Not posting TodayNotification.";
          goto LABEL_68;
        }
      }
      swift_bridgeObjectRelease(v351);
      v220 = v197[2];
      if (v220)
      {
        v221 = v315;
        sub_100008868((uint64_t)v197 + v209 + (v220 - 1) * v211, (uint64_t)v315, (uint64_t *)&unk_100850D60);
        v222 = 0;
        v223 = v338;
      }
      else
      {
        v222 = 1;
        v223 = v338;
        v221 = v315;
      }
      v224 = v317;
      (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(v317 + 56))(v221, v222, 1, v223);
      v225 = swift_bridgeObjectRelease(v197);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t, __n128))(v224 + 48))(v221, 1, v223, v225) != 1)
      {
        v228 = *v221;
        v229 = (char *)v221 + *(int *)(v223 + 48);
        v355 = *(void ***)(v183 + 8);
        ((void (*)(char *, char *))v355)(v229, v348);
        v230 = objc_msgSend(v228, "titleAsString");
        if (!v230)
          v230 = (id)_REMGetLocalizedString(13);
        v345 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v230);
        v232 = v231;

        v233 = (id)_REMGetLocalizedString(14);
        v234 = v233;
        if (!v233)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v236 = v235;
          v234 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v236);
        }
        v349 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v233);
        v347 = v237;
        v350 = (uint64_t (**)(char *, uint64_t))v228;
        v352 = v211;
        if (v220 < 2)
        {
          v251 = v311;
          v252 = v234;
          v253 = v310;
          v249 = v316;
          (*(void (**)(char *, _QWORD, uint64_t))(v311 + 104))(v310, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v316);
          v254 = v228;
          v255 = v312;
          REMNotificationIdentifier.init(reminder:)();
          (*(void (**)(char *, _QWORD, uint64_t))(v313 + 104))(v255, enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:), v314);
          v256 = v254;
          v247 = v251;
          v250 = sub_10023F73C((void (**)(char *, uint64_t, __n128))v254, 0, 0);

          v248 = v253;
          v234 = v252;
        }
        else
        {
          v238 = (id)_REMGetLocalizedString(15);
          v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(v238);
          v241 = v240;

          v242 = sub_10001A630((uint64_t *)&unk_10083A270);
          v243 = swift_allocObject(v242, 112, 7);
          *(_OWORD *)(v243 + 16) = xmmword_1006A3C40;
          *(_QWORD *)(v243 + 56) = &type metadata for String;
          v244 = sub_1000184F8();
          *(_QWORD *)(v243 + 32) = v345;
          *(_QWORD *)(v243 + 40) = v232;
          *(_QWORD *)(v243 + 96) = &type metadata for Int;
          *(_QWORD *)(v243 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v243 + 64) = v244;
          *(_QWORD *)(v243 + 72) = v220 - 1;
          static String.localizedStringWithFormat(_:_:)(v239, v241, v243);
          v232 = v245;
          swift_bridgeObjectRelease(v243);
          v246 = swift_bridgeObjectRelease(v241);
          v247 = v311;
          v248 = v310;
          v249 = v316;
          (*(void (**)(char *, _QWORD, uint64_t, __n128))(v311 + 104))(v310, enum case for RDUserNotificationCategory.todayNotification(_:), v316, v246);
          (*(void (**)(char *, _QWORD, uint64_t))(v313 + 104))(v312, enum case for RDUserNotificationType.todayNotification(_:), v314);
          v250 = sub_10023F73C(0, 0, 0);
        }
        v257 = String._bridgeToObjectiveC()();
        objc_msgSend(v250, "setTitle:", v257, swift_bridgeObjectRelease(v232).n128_f64[0]);

        objc_msgSend(v250, "setBody:", v234);
        v258 = Date._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v250, "setDate:", v258);

        v259 = v250;
        v260 = v342;
        v345 = *(char **)(v342 + 56);
        v344 = RDUserNotificationCategory.rawValue.getter(v261);
        v340 = (char *)v262;
        v263 = v307;
        (*(void (**)(char *, char *, uint64_t))(v247 + 16))(v307, v248, v249);
        v264 = *(unsigned __int8 *)(v247 + 80);
        v265 = (v264 + 24) & ~v264;
        v266 = v247;
        v267 = (v306 + v265 + 7) & 0xFFFFFFFFFFFFFFF8;
        v268 = (v267 + 23) & 0xFFFFFFFFFFFFFFF8;
        v269 = swift_allocObject(&unk_1007FC118, v268 + 16, v264 | 7);
        *(_QWORD *)(v269 + 16) = v260;
        (*(void (**)(uint64_t, char *, uint64_t))(v266 + 32))(v269 + v265, v263, v316);
        v270 = (_QWORD *)(v269 + v267);
        v271 = (uint64_t)v346;
        v272 = v341;
        *v270 = v346;
        v270[1] = v272;
        v273 = (char **)(v269 + v268);
        v274 = v347;
        *v273 = v349;
        v273[1] = v274;
        v275 = v259;
        swift_retain(v260);
        sub_1000E51CC(v271, v272);
        v276 = (uint64_t)v340;
        sub_1004853D8(v344, (uint64_t)v340, v275, (uint64_t)sub_1005B4C9C, v269);
        swift_release(v269);
        swift_bridgeObjectRelease(v276);
        v349 = (char *)v275;

        v277 = objc_allocWithZone((Class)REMStore);
        v278 = (char *)objc_msgSend(v277, "initWithDaemonController:", v333);
        v279 = objc_allocWithZone((Class)REMSaveRequest);
        v347 = v278;
        v280 = objc_msgSend(v279, "initWithStore:", v278);
        objc_msgSend(v280, "setAuthor:", RDTodayNotificationLastBannerPresentationDateAuthor);
        objc_msgSend(v280, "setUpdateLastModifiedDates:", 0);
        v281 = v280;
        Date.init()(objc_msgSend(v280, "setSyncToCloudKit:", 0));
        v282 = swift_allocObject(&unk_1007FC140, 24, 7);
        v346 = (uint64_t (*)(_QWORD))v282;
        *(_QWORD *)(v282 + 16) = _swiftEmptyArrayStorage;
        v283 = (_QWORD *)(v282 + 16);
        v284 = (char *)v330 + *(int *)(v338 + 48);
        do
        {
          v285 = v330;
          sub_100008868(v210, (uint64_t)v330, (uint64_t *)&unk_100850D60);
          v286 = *v285;
          v287 = objc_msgSend(v281, "updateReminder:", v286);
          v288 = Date._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v287, "setLastBannerPresentationDate:", v288);

          v289 = objc_msgSend(v286, "objectID");
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v289);
          v291 = *(_QWORD *)((*v283 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v290 = *(_QWORD *)((*v283 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v291 >= v290 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v290 > 1);
          v292 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v291, v289);
          specialized Array._endMutation()(v292);

          ((void (*)(char *, char *))v355)(v284, v348);
          v210 += v352;
          --v208;
        }
        while (v208);
        v293 = swift_bridgeObjectRelease(v351);
        v294 = v308;
        v295 = v331;
        v296 = v348;
        ((void (*)(char *, char *, char *, __n128))v334)(v308, v331, v348, v293);
        v297 = *(unsigned __int8 *)(v353 + 80);
        v298 = (v297 + 24) & ~v297;
        v299 = swift_allocObject(&unk_1007FC168, v298 + v309, v297 | 7);
        v300 = v346;
        *(_QWORD *)(v299 + 16) = v346;
        ((void (*)(uint64_t, char *, char *))v324)(v299 + v298, v294, v296);
        v360[3] = sub_1005B4D9C;
        v361 = v299;
        aBlock = _NSConcreteStackBlock;
        v360[0] = 1107296256;
        v360[1] = sub_1000E18E4;
        v360[2] = &unk_1007FC180;
        v301 = _Block_copy(&aBlock);
        v302 = v361;
        swift_retain(v300);
        swift_release(v302);
        objc_msgSend(v281, "saveWithQueue:completion:", v305, v301);
        _Block_release(v301);

        v303 = v355;
        ((void (*)(char *, char *))v355)(v295, v296);
        (*(void (**)(char *, uint64_t))(v313 + 8))(v312, v314);
        (*(void (**)(char *, uint64_t))(v311 + 8))(v310, v316);
        (*(void (**)(char *, uint64_t))(v318 + 8))(v323, v319);
        ((void (*)(char *, char *))v303)(v343, v296);
        ((void (*)(char *, char *))v303)(v354, v296);
        return swift_release(v300);
      }
      swift_bridgeObjectRelease(v351);
      v226 = sub_10000882C((uint64_t)v221, (uint64_t *)&unk_100846BD0);
      v215 = Logger.logObject.getter(v226);
      v227 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v215, v227))
      {
        v217 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v217 = 0;
        _os_log_impl((void *)&_mh_execute_header, v215, v227, "No reminderIDs found in Today smart list. Not posting TodayNotification.", v217, 2u);
        v60 = v348;
        goto LABEL_69;
      }
      v60 = v348;
    }
    else
    {
      swift_bridgeObjectRelease(v351);
      swift_bridgeObjectRelease(v197);
      v215 = Logger.logObject.getter(v219);
      v216 = static os_log_type_t.default.getter(v215);
      if (os_log_type_enabled(v215, v216))
      {
        v217 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v217 = 0;
        v218 = "No reminders in Today view. Not showing today notification.";
LABEL_68:
        _os_log_impl((void *)&_mh_execute_header, v215, v216, v218, v217, 2u);
LABEL_69:
        swift_slowDealloc(v217, -1, -1);
      }
    }
LABEL_70:
    v143 = v346;

    (*(void (**)(char *, uint64_t))(v318 + 8))(v323, v319);
    v119 = *(void (**)(char *, char *))(v183 + 8);
    v119(v343, v60);
  }
  else
  {
    v205 = aBlock;
    swift_bridgeObjectRelease(v182);
    v206 = _convertNSErrorToError(_:)(v191);

    swift_willThrow(v207);
    (*(void (**)(char *, uint64_t))(v318 + 8))(v323, v319);
    swift_errorRetain(v206);
    v110 = swift_errorRetain(v206);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = v206;
      v114 = (uint8_t *)swift_slowAlloc(12, -1);
      v115 = (void **)swift_slowAlloc(32, -1);
      aBlock = v115;
      *(_DWORD *)v114 = 136315138;
      swift_getErrorValue(v206, v357, v356);
      v116 = Error.localizedDescription.getter(v356[1], v356[2]);
      v118 = v117;
      v358 = COERCE_DOUBLE(sub_10001A820(v116, v117, (uint64_t *)&aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, &aBlock);
      swift_bridgeObjectRelease(v118);
      swift_errorRelease(v113);
      swift_errorRelease(v113);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Unable to fetch REMTodayDataView. Not posting any todayNotification. {error: %s}", v114, 0xCu);
      swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v114, -1, -1);

      swift_errorRelease(v113);
      v119 = *(void (**)(char *, char *))(v353 + 8);
    }
    else
    {

      swift_errorRelease(v206);
      swift_errorRelease(v206);
      swift_errorRelease(v206);
      v119 = *(void (**)(char *, char *))(v183 + 8);
    }
    v119(v343, v60);
    v143 = v346;
  }
  result = ((uint64_t (*)(char *, char *))v119)(v162, v60);
  if (v143)
    return v143(0);
  return result;
}

uint64_t sub_1005ABDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  char *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, __n128);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[2];

  v105 = a1;
  v108 = a2;
  v2 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v102 = *(_QWORD *)(v2 - 8);
  v103 = v2;
  __chkstk_darwin(v2);
  v101 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.SearchDirection(0);
  v99 = *(_QWORD *)(v4 - 8);
  v100 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.MatchingPolicy(0);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = (void (*)(char *, uint64_t, __n128))v7;
  __chkstk_darwin(v7);
  v98 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v109 = *(_QWORD *)(v9 - 8);
  v110 = v9;
  __chkstk_darwin(v9);
  v97 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v95 = *(_QWORD *)(v11 - 8);
  v96 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v14 = __chkstk_darwin(v91);
  v93 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v86 - v17;
  __chkstk_darwin(v16);
  v94 = (char *)&v86 - v19;
  v20 = sub_10001A630((uint64_t *)&unk_100841610);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v86 - v24;
  v26 = type metadata accessor for DateComponents(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v92 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v86 - v30;
  v32 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v33 = objc_msgSend(v32, "todayNotificationFireTime");

  if (v33)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v23, v34, 1, v26);
  sub_1000A5CA8((uint64_t)v23, (uint64_t)v25, (uint64_t *)&unk_100841610);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26);
  v36 = v110;
  if (v35 == 1)
  {
    sub_10000882C((uint64_t)v25, (uint64_t *)&unk_100841610);
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_10001AAA8(v37, (uint64_t)qword_100850AC0);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter(v39);
    v41 = os_log_type_enabled(v39, v40);
    v42 = v109;
    if (v41)
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "DateUtils.lastTodayNotificationFireDate: Early return because user has disabled today notifications.", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

  }
  else
  {
    v44 = *(uint64_t (**)(char *, char *, uint64_t))(v27 + 32);
    v104 = v31;
    v45 = v44(v31, v25, v26);
    v87 = v13;
    static Calendar.current.getter(v45);
    sub_100008868(v105, (uint64_t)v18, (uint64_t *)&unk_1008380D0);
    v46 = v109;
    v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
    v47 = v88(v18, 1, v36);
    v90 = v26;
    v89 = v27;
    v48 = v97;
    if (v47 == 1)
    {
      static Date.now.getter();
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      (*(void (**)(void))(v46 + 32))();
    }
    v49 = v98;
    (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t, __n128)))(v106 + 104))(v98, enum case for Calendar.MatchingPolicy.nextTime(_:), v107);
    v51 = v99;
    v50 = v100;
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v6, enum case for Calendar.SearchDirection.backward(_:), v100);
    v53 = v101;
    v52 = v102;
    v54 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, enum case for Calendar.RepeatedTimePolicy.first(_:), v103);
    v55 = (uint64_t)v94;
    v56 = v48;
    v57 = v48;
    v58 = v87;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v57, v104, v49, v53, v6);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v50);
    (*(void (**)(char *, void (*)(char *, uint64_t, __n128)))(v106 + 8))(v49, v107);
    v42 = v109;
    v36 = v110;
    (*(void (**)(char *, uint64_t))(v109 + 8))(v56, v110);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v96);
    if (v88((char *)v55, 1, v36) != 1)
    {
      (*(void (**)(char *, uint64_t))(v89 + 8))(v104, v90);
      v83 = v108;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v108, v55, v36);
      v82 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v83, v82, 1, v36);
    }
    v59 = v42;
    sub_10000882C(v55, (uint64_t *)&unk_1008380D0);
    v60 = v89;
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v61 = type metadata accessor for Logger(0);
    sub_10001AAA8(v61, (uint64_t)qword_100850AC0);
    v62 = v92;
    v63 = v104;
    v64 = v90;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v92, v104, v90);
    v65 = v93;
    v66 = sub_100008868(v105, v93, (uint64_t *)&unk_1008380D0);
    v67 = Logger.logObject.getter(v66);
    v68 = v63;
    v69 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v67, v69))
    {

      sub_10000882C(v65, (uint64_t *)&unk_1008380D0);
      v84 = *(void (**)(char *, uint64_t))(v60 + 8);
      v84(v62, v64);
      v84(v68, v64);
      v82 = 1;
      v83 = v108;
      v42 = v59;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v83, v82, 1, v36);
    }
    v70 = swift_slowAlloc(22, -1);
    v71 = swift_slowAlloc(64, -1);
    v112[0] = v71;
    *(_DWORD *)v70 = 136446466;
    v72 = DateComponents.description.getter();
    v74 = v73;
    v111 = sub_10001A820(v72, v73, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    v75 = swift_bridgeObjectRelease(v74);
    v107 = *(void (**)(char *, uint64_t, __n128))(v60 + 8);
    v107(v62, v64, v75);
    *(_WORD *)(v70 + 12) = 2082;
    v76 = v93;
    v77 = Optional.descriptionOrNil.getter(v91);
    v79 = v78;
    v111 = sub_10001A820(v77, v78, v112);
    v80 = v109;
    v36 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    swift_bridgeObjectRelease(v79);
    sub_10000882C(v76, (uint64_t *)&unk_1008380D0);
    v81 = v69;
    v42 = v80;
    _os_log_impl((void *)&_mh_execute_header, v67, v81, "DateUtils.lastTodayNotificationFireDate: Unable to find last fire date. {todayNotificationFireTime: %{public}s, referenceDate: %{public}s}", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v70, -1, -1);

    ((void (*)(char *, uint64_t))v107)(v104, v64);
  }
  v82 = 1;
  v83 = v108;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v83, v82, 1, v36);
}

uint64_t sub_1005AC628@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  _QWORD v25[2];

  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = sub_1002B1B30(v16, a2);

  if (!v17)
    goto LABEL_7;
  v25[1] = v4;
  v18 = objc_msgSend(v17, "assignmentContext");
  v19 = objc_msgSend(v18, "currentAssignment");

  if (v19)
  {

    if ((sub_1004D3090(0) & 1) == 0)
    {

      goto LABEL_7;
    }
  }
  sub_100456590(v17, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {

    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
LABEL_7:
    v20 = sub_10001A630((uint64_t *)&unk_100850D60);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v15, v11, v12);
  v23 = sub_10001A630((uint64_t *)&unk_100850D60);
  v24 = (char *)a4 + *(int *)(v23 + 48);
  *a4 = v17;
  v22(v24, v15, v12);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a4, 0, 1, v23);
}

uint64_t sub_1005AC830(void *a1, char *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  char *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t (*v52)(char *, uint64_t, __n128);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  char *v70;
  char v71;
  os_log_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v84 = a3;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v81 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v80 = (char *)&v73 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v73 - v15;
  v17 = __chkstk_darwin(v14);
  v79 = (char *)&v73 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v73 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v73 - v23;
  __chkstk_darwin(v22);
  v83 = (char *)&v73 - v25;
  v26 = objc_msgSend(a1, "lastBannerPresentationDate");
  if (v26)
  {
    v27 = v26;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v28(v7, v24, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    if ((_DWORD)v29 != 1)
    {
      v30 = v83;
      v28(v83, v7, v8);
      v31 = v30;
      goto LABEL_6;
    }
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  v31 = v83;
  static Date.distantPast.getter(v29);
  sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
LABEL_6:
  v32 = v16;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v33 = type metadata accessor for Logger(0);
  sub_10001AAA8(v33, (uint64_t)qword_100850AC0);
  v34 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v35 = v21;
  v34(v21, v31, v8);
  v36 = v79;
  v82 = a2;
  v34(v79, a2, v8);
  v34(v32, v84, v8);
  v37 = a1;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    v41 = swift_slowAlloc(42, -1);
    v74 = v32;
    v42 = v41;
    v43 = swift_slowAlloc(8, -1);
    v77 = v34;
    v44 = (_QWORD *)v43;
    v75 = v43;
    v78 = swift_slowAlloc(96, -1);
    v86 = v78;
    *(_DWORD *)v42 = 138544130;
    v76 = v40;
    v45 = objc_msgSend(v37, "objectID");
    v73 = v38;
    v46 = v36;
    v47 = v45;
    v85 = (uint64_t)v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    *v44 = v47;
    v34 = v77;

    *(_WORD *)(v42 + 12) = 2082;
    v48 = ((uint64_t (*)(void))Date.description.getter)();
    v50 = v49;
    v85 = sub_10001A820(v48, v49, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    v51 = swift_bridgeObjectRelease(v50);
    v52 = *(uint64_t (**)(char *, uint64_t, __n128))(v9 + 8);
    v53 = v52(v35, v8, v51);
    *(_WORD *)(v42 + 22) = 2082;
    v54 = Date.description.getter(v53);
    v56 = v55;
    v85 = sub_10001A820(v54, v55, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    v57 = swift_bridgeObjectRelease(v56);
    v58 = v52(v46, v8, v57);
    *(_WORD *)(v42 + 32) = 2082;
    v59 = v74;
    v60 = Date.description.getter(v58);
    v62 = v61;
    v85 = sub_10001A820(v60, v61, &v86);
    v31 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    v63 = swift_bridgeObjectRelease(v62);
    v52(v59, v8, v63);
    v38 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v76, "Evaluating whether to trigger TodayNotification {reminderID: %{public}@, lastPresentationTime: %{public}s, fireDate: %{public}s, now: %{public}s}", (uint8_t *)v42, 0x2Au);
    v64 = sub_10001A630((uint64_t *)&unk_100839E70);
    v65 = v75;
    swift_arrayDestroy(v75, 1, v64);
    swift_slowDealloc(v65, -1, -1);
    v66 = v78;
    swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {

    v52 = *(uint64_t (**)(char *, uint64_t, __n128))(v9 + 8);
    ((void (*)(char *, uint64_t))v52)(v35, v8);
    ((void (*)(char *, uint64_t))v52)(v36, v8);
    ((void (*)(char *, uint64_t))v52)(v32, v8);
  }

  v67 = v80;
  v68 = v82;
  v69 = static Date.< infix(_:_:)(v31, v82);
  v34(v67, v68, v8);
  v70 = v81;
  v34(v81, v84, v8);
  if ((v69 & 1) != 0)
    v71 = static Date.< infix(_:_:)(v67, v70);
  else
    v71 = 0;
  ((void (*)(char *, uint64_t))v52)(v70, v8);
  ((void (*)(char *, uint64_t))v52)(v67, v8);
  ((void (*)(char *, uint64_t))v52)(v31, v8);
  return v71 & 1;
}

void sub_1005ACDF4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, __n128), uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  _BYTE *v58;
  void (*v59)(_BYTE *, uint64_t, __n128);
  uint64_t v60;
  _BYTE *v61;
  void *v62;
  Class isa;
  uint64_t v64;
  _BYTE *v65;
  Class v66;
  id v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  __n128 v71;
  uint64_t v72;
  uint64_t inited;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  unint64_t v77;
  __n128 v78;
  void (*v79)(uint64_t, __n128);
  _BYTE *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BYTE *v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __n128 v90;
  _BYTE v91[12];
  int v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_BYTE *, uint64_t, uint64_t);
  uint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, __n128);
  uint64_t v109;
  _QWORD v110[3];
  char v111[8];
  char v112[80];
  uint64_t v113;
  uint64_t v114;

  v98 = a7;
  v96 = a6;
  v107 = a5;
  v108 = a4;
  v109 = a3;
  v9 = type metadata accessor for DateComponents(0);
  v105 = *(_QWORD *)(v9 - 8);
  v106 = v9;
  __chkstk_darwin(v9);
  v104 = &v91[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v103 = type metadata accessor for TimeZone(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = &v91[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v100 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v13 = &v91[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for RDUserNotificationCategory(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v97 = &v91[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v20 = &v91[-v19];
  __chkstk_darwin(v18);
  v22 = &v91[-v21];
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = &v91[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = *(void **)(a2 + 16);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (a1)
  {
    swift_errorRetain(a1);
    v23 = v14;
    if (qword_100837940 == -1)
    {
LABEL_4:
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_100850AC0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v20, v109, v23);
      swift_errorRetain(a1);
      v30 = swift_errorRetain(a1);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v34 = swift_slowAlloc(64, -1);
        v109 = v34;
        v114 = v34;
        *(_DWORD *)v33 = 136446466;
        v35 = RDUserNotificationCategory.rawValue.getter(v34);
        v37 = v36;
        v113 = sub_10001A820(v35, v36, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        v38 = swift_bridgeObjectRelease(v37);
        (*(void (**)(_BYTE *, uint64_t, __n128))(v15 + 8))(v20, v23, v38);
        *(_WORD *)(v33 + 12) = 2082;
        swift_getErrorValue(a1, v111, v110);
        v39 = Error.rem_errorDescription.getter(v110[1], v110[2]);
        v41 = v40;
        v113 = sub_10001A820(v39, v40, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
        swift_bridgeObjectRelease(v41);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDTodayNotificationEngine: Unable to post Today notification {category: %{public}s, error: %{public}s}", (uint8_t *)v33, 0x16u);
        v42 = v109;
        swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v20, v23);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      if (v108)
        ((void (*)(_QWORD))v108)(0);
      swift_errorRelease(a1);
      return;
    }
LABEL_25:
    swift_once(&qword_100837940, sub_1005A6874);
    goto LABEL_4;
  }
  v43 = v14;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v44 = type metadata accessor for Logger(0);
  v45 = sub_10001AAA8(v44, (uint64_t)qword_100850AC0);
  v95 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  v95(v22, v109, v14);
  v46 = v98;
  v47 = swift_bridgeObjectRetain_n(v98, 2);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    v94 = v45;
    v52 = v51;
    v53 = swift_slowAlloc(64, -1);
    v93 = v53;
    v114 = v53;
    *(_DWORD *)v52 = 136446466;
    v92 = v50;
    v54 = RDUserNotificationCategory.rawValue.getter(v53);
    v56 = v55;
    v113 = sub_10001A820(v54, v55, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
    v57 = swift_bridgeObjectRelease(v56);
    v58 = v22;
    v59 = *(void (**)(_BYTE *, uint64_t, __n128))(v15 + 8);
    v59(v58, v14, v57);
    *(_WORD *)(v52 + 12) = 2080;
    swift_bridgeObjectRetain(v46);
    v113 = sub_10001A820(v96, v46, &v114);
    v43 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
    swift_bridgeObjectRelease_n(v46, 3);
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v92, "RDTodayNotificationEngine: Posted Today notification {category: %{public}s, body: %s}", (uint8_t *)v52, 0x16u);
    v60 = v93;
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v52, -1, -1);

  }
  else
  {
    v61 = v22;
    v59 = *(void (**)(_BYTE *, uint64_t, __n128))(v15 + 8);
    ((void (*)(_BYTE *, uint64_t))v59)(v61, v14);

    swift_bridgeObjectRelease_n(v46, 2);
  }
  v62 = (void *)objc_opt_self(NSDateComponents);
  Date.init()(v62);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v64 = (*(uint64_t (**)(_BYTE *, uint64_t))(v99 + 8))(v13, v100);
  v65 = v101;
  static TimeZone.current.getter(v64);
  v66 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v65, v103);
  v67 = objc_msgSend(v62, "rem_dateComponentsWithDate:timeZone:isAllDay:", isa, v66, 0);

  v68 = v104;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v67);

  DateComponents.hour.getter(v69);
  LOBYTE(v67) = v70;
  (*(void (**)(_BYTE *, uint64_t))(v105 + 8))(v68, v106);
  if ((v67 & 1) == 0)
  {
    type metadata accessor for Analytics(0, v71);
    v72 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v72, v112);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 1701869940;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    RDUserNotificationCategory.rawValue.getter(inited);
    v75 = v74;
    v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v75);
    *(_QWORD *)(inited + 48) = v76;
    *(_QWORD *)(inited + 56) = 0x4872656767697274;
    *(_QWORD *)(inited + 64) = 0xEB0000000072756FLL;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    v77 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD000000000000020, 0x80000001006FD3F0, v77, 0, 1);
    v78 = swift_bridgeObjectRelease(v77);
    v79 = v108;
    if (!v108)
      return;
    goto LABEL_22;
  }
  v80 = v97;
  v81 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v95)(v97, v109, v43);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = v80;
    v85 = (uint8_t *)swift_slowAlloc(12, -1);
    v86 = swift_slowAlloc(32, -1);
    v114 = v86;
    *(_DWORD *)v85 = 136446210;
    v87 = RDUserNotificationCategory.rawValue.getter(v86);
    v89 = v88;
    v113 = sub_10001A820(v87, v88, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
    v90 = swift_bridgeObjectRelease(v89);
    v59(v84, v43, v90);
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {category: %{public}s}", v85, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t))v59)(v80, v43);
  }

  v79 = v108;
  if (v108)
LABEL_22:
    v79(1, v78);
}

void sub_1005AD760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  _QWORD v45[3];
  _BYTE v46[8];
  uint64_t v47;
  _BYTE v48[24];
  NSObject *v49;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_100850AC0);
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    v11 = swift_errorRetain(a1);
    v44 = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v49 = v14;
      *(_DWORD *)v13 = 136446466;
      swift_beginAccess(a2 + 16, v48, 0, 0);
      v15 = *(_QWORD *)(a2 + 16);
      v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v17 = swift_bridgeObjectRetain(v15);
      v18 = Array.description.getter(v17, v16);
      v20 = v19;
      swift_bridgeObjectRelease(v15);
      v47 = sub_10001A820(v18, v20, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v13 + 12) = 2080;
      swift_getErrorValue(a1, v46, v45);
      v21 = Error.localizedDescription.getter(v45[1], v45[2]);
      v23 = v22;
      v47 = sub_10001A820(v21, v22, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v44, v12, "TodayNotificationEngine is unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_release_n(a2, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v24 = type metadata accessor for Logger(0);
    sub_10001AAA8(v24, (uint64_t)qword_100850AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    v25 = swift_retain_n(a2, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v49 = v44;
      *(_DWORD *)v29 = 136446466;
      v43 = v28;
      swift_beginAccess(a2 + 16, v48, 0, 0);
      v30 = *(_QWORD *)(a2 + 16);
      v31 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v32 = swift_bridgeObjectRetain(v30);
      v33 = Array.description.getter(v32, v31);
      v35 = v34;
      swift_bridgeObjectRelease(v30);
      v47 = sub_10001A820(v33, v35, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v29 + 12) = 2082;
      v37 = Date.description.getter(v36);
      v39 = v38;
      v47 = sub_10001A820(v37, v38, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
      v40 = swift_bridgeObjectRelease(v39);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v40);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v43, "TodayNotificationEngine has updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}", (uint8_t *)v29, 0x16u);
      v41 = v44;
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

  }
}

void sub_1005ADC80(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;
  void (*v75)(char *, uint64_t, __n128);
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __n128 v79;
  void **v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  NSString v106;
  uint64_t v107;
  NSString v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  NSString v122;
  NSString v123;
  void *v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, char *, uint64_t);
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  void **v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  void **aBlock;
  uint64_t v157;
  void (*v158)(uint64_t, void *);
  void *v159;
  uint64_t (*v160)();
  uint64_t v161;
  uint64_t v162;
  char v163[8];

  v154 = a2;
  v148 = a1;
  v144 = type metadata accessor for RDUserNotificationCategory(0);
  v140 = *(_QWORD *)(v144 - 8);
  v3 = __chkstk_darwin(v144);
  v143 = (char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = v4;
  __chkstk_darwin(v3);
  v141 = (char *)&v128 - v5;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = __chkstk_darwin(v6);
  v146 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v147 = (char *)&v128 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v128 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v142 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v151 = (char *)&v128 - v18;
  v19 = __chkstk_darwin(v17);
  v150 = (char *)&v128 - v20;
  v21 = __chkstk_darwin(v19);
  v145 = (char *)&v128 - v22;
  v138 = v23;
  __chkstk_darwin(v21);
  v25 = (char *)&v128 - v24;
  v26 = type metadata accessor for DispatchPredicate(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (uint64_t *)((char *)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v152 = v2;
  v30 = (void *)*((_QWORD *)v2 + 2);
  *v29 = v30;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v26);
  v31 = v30;
  v32 = _dispatchPreconditionTest(_:)(v29);
  (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v29, v26);
  if ((v32 & 1) != 0)
  {
    v153 = v25;
    if (qword_100837940 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837940, sub_1005A6874);
LABEL_3:
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001AAA8(v33, (uint64_t)qword_100850AC0);
  v35 = v154;
  v36 = swift_bridgeObjectRetain_n(v154, 2);
  v149 = (void **)v34;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.info.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = v14;
    v41 = v13;
    v42 = (void **)swift_slowAlloc(32, -1);
    aBlock = v42;
    *(_DWORD *)v39 = 136446210;
    swift_bridgeObjectRetain(v154);
    v162 = sub_10001A820(v148, v154, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_bridgeObjectRelease_n(v154, 3);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDTodayNotificationEngine: started retractTodayNotificationIfApplicable {reason: %{public}s}", v39, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    v43 = v42;
    v13 = v41;
    v14 = v40;
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
  }
  v44 = v151;
  v45 = v152;
  v46 = v150;
  v47 = &v152[OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate];
  swift_beginAccess(&v152[OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate], &v162, 0, 0);
  sub_100008868((uint64_t)v47, (uint64_t)v12, (uint64_t *)&unk_1008380D0);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v49 = v48(v12, 1, v13);
  v50 = v153;
  if (v49 == 1)
  {
    v51 = sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.info.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      swift_slowDealloc(v54, -1, -1);
    }

  }
  else
  {
    v55 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v55(v153, v12, v13);
    v56 = (uint64_t)v146;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v146, 1, 1, v13);
    v57 = v147;
    sub_1005ABDC4(v56, (uint64_t)v147);
    sub_10000882C(v56, (uint64_t *)&unk_1008380D0);
    if (v48(v57, 1, v13) == 1)
    {
      v58 = sub_10000882C((uint64_t)v57, (uint64_t *)&unk_1008380D0);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.info.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "RDTodayNotificationEngine: Skipping retractTodayNotificationIfApplicable because user has disabled today notification or there was error getting lastTodayNotificationFireDate", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v50, v13);
    }
    else
    {
      v62 = v145;
      v55(v145, v57, v13);
      if ((static Date.< infix(_:_:)(v62, v50) & 1) != 0)
      {
        v63 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        v63(v46, v62, v13);
        v150 = (char *)v63;
        v64 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v44, v50, v13);
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.default.getter(v65);
        v67 = v66;
        v68 = os_log_type_enabled(v65, v66);
        v136 = v14;
        v151 = (char *)v55;
        if (v68)
        {
          v69 = swift_slowAlloc(22, -1);
          v149 = (void **)swift_slowAlloc(64, -1);
          aBlock = v149;
          *(_DWORD *)v69 = 136446466;
          LODWORD(v147) = v67;
          v70 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v71 = dispatch thunk of CustomStringConvertible.description.getter(v13, v70);
          v73 = v72;
          v155 = sub_10001A820(v71, v72, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &aBlock);
          v74 = swift_bridgeObjectRelease(v73);
          v75 = *(void (**)(char *, uint64_t, __n128))(v136 + 8);
          v75(v46, v13, v74);
          *(_WORD *)(v69 + 12) = 2082;
          v76 = dispatch thunk of CustomStringConvertible.description.getter(v13, v70);
          v78 = v77;
          v155 = sub_10001A820(v76, v77, (uint64_t *)&aBlock);
          v45 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &aBlock);
          v79 = swift_bridgeObjectRelease(v78);
          v75(v44, v13, v79);
          _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v147, "RDTodayNotificationEngine: proceeding to retractTodayNotificationIfApplicable because {lastTodayNotificationFireDate: %{public}s < lastDismissedDate: %{public}s}", (uint8_t *)v69, 0x16u);
          v80 = v149;
          swift_arrayDestroy(v149, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          v81 = v69;
          v14 = v136;
          swift_slowDealloc(v81, -1, -1);
        }
        else
        {
          v83 = *(void (**)(char *, uint64_t))(v14 + 8);
          v83(v46, v13);
          v83(v44, v13);
        }

        v84 = v139;
        v85 = v138;
        v86 = v140;
        v149 = *(void ***)(v140 + 104);
        v87 = v141;
        v88 = v144;
        v89 = ((uint64_t (*)(char *, _QWORD, uint64_t))v149)(v141, enum case for RDUserNotificationCategory.todayNotification(_:), v144);
        v152 = (char *)*((_QWORD *)v45 + 7);
        v132 = RDUserNotificationCategory.rawValue.getter(v89);
        v130 = v90;
        v131 = RDUserNotificationCategory.rawValue.getter(v132);
        v129 = v91;
        v147 = *(char **)(v86 + 16);
        v92 = v143;
        ((void (*)(char *, char *, uint64_t))v147)(v143, v87, v88);
        v93 = v142;
        ((void (*)(char *, char *, uint64_t))v150)(v142, v153, v13);
        v94 = *(unsigned __int8 *)(v86 + 80);
        v95 = (v94 + 16) & ~v94;
        v146 = (char *)v95;
        v96 = *(unsigned __int8 *)(v14 + 80);
        v97 = (v84 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
        v135 = v97;
        v98 = ((v96 + v97 + 16) & ~v96) + v85;
        v139 = v98;
        v99 = (v96 + v97 + 16) & ~v96;
        v134 = v99;
        v138 = v94 | v96 | 7;
        v100 = swift_allocObject(&unk_1007FC078, v98, v138);
        v101 = v13;
        v137 = v13;
        v102 = v100;
        v133 = *(void (**)(uint64_t, char *, uint64_t))(v86 + 32);
        v133(v100 + v95, v92, v88);
        v103 = (_QWORD *)(v102 + v97);
        v104 = v154;
        *v103 = v148;
        v103[1] = v104;
        ((void (*)(uint64_t, char *, uint64_t))v151)(v102 + v99, v93, v101);
        swift_bridgeObjectRetain(v104);
        v105 = v130;
        v106 = String._bridgeToObjectiveC()();
        v107 = v129;
        v108 = String._bridgeToObjectiveC()();
        v160 = sub_1005B4A8C;
        v161 = v102;
        aBlock = _NSConcreteStackBlock;
        v157 = 1107296256;
        v158 = sub_1000E18E4;
        v159 = &unk_1007FC090;
        v109 = _Block_copy(&aBlock);
        v110 = v161;
        swift_retain(v102);
        swift_release(v110);
        objc_msgSend(v152, "releaseNotificationWithIdentifier:reference:completion:", v106, v108, v109);
        _Block_release(v109);
        swift_release(v102);
        swift_bridgeObjectRelease(v105);
        swift_bridgeObjectRelease(v107);

        v140 = *(_QWORD *)(v86 + 8);
        v111 = v144;
        ((void (*)(char *, uint64_t))v140)(v87, v144);
        v112 = ((uint64_t (*)(char *, _QWORD, uint64_t))v149)(v87, enum case for RDUserNotificationCategory.todayNotificationForSingleReminder(_:), v111);
        v149 = (void **)RDUserNotificationCategory.rawValue.getter(v112);
        v114 = v113;
        RDUserNotificationCategory.rawValue.getter(v149);
        v116 = v115;
        v117 = v143;
        ((void (*)(char *, char *, uint64_t))v147)(v143, v87, v111);
        v118 = v142;
        v119 = v137;
        ((void (*)(char *, char *, uint64_t))v150)(v142, v153, v137);
        v120 = swift_allocObject(&unk_1007FC0C8, v139, v138);
        v133((uint64_t)&v146[v120], v117, v111);
        v121 = (_QWORD *)(v120 + v135);
        *v121 = v148;
        v121[1] = v104;
        ((void (*)(uint64_t, char *, uint64_t))v151)(v120 + v134, v118, v119);
        swift_bridgeObjectRetain(v104);
        v122 = String._bridgeToObjectiveC()();
        v123 = String._bridgeToObjectiveC()();
        v160 = sub_1005B4A8C;
        v161 = v120;
        aBlock = _NSConcreteStackBlock;
        v157 = 1107296256;
        v158 = sub_1000E18E4;
        v159 = &unk_1007FC0E0;
        v124 = _Block_copy(&aBlock);
        v125 = v161;
        swift_retain(v120);
        swift_release(v125);
        objc_msgSend(v152, "releaseNotificationWithIdentifier:reference:completion:", v122, v123, v124);
        _Block_release(v124);
        swift_release(v120);
        swift_bridgeObjectRelease(v114);
        swift_bridgeObjectRelease(v116);

        ((void (*)(char *, uint64_t))v140)(v87, v144);
        v126 = *(void (**)(char *, uint64_t))(v136 + 8);
        v127 = v137;
        v126(v145, v137);
        v126(v153, v127);
      }
      else
      {
        v82 = *(void (**)(char *, uint64_t))(v14 + 8);
        v82(v62, v13);
        v82(v50, v13);
      }
    }
  }
}

void sub_1005AE8EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  os_log_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75[8];
  uint64_t v76;
  uint64_t v77;

  v72 = a4;
  v73 = a5;
  v71 = a3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v66 - v12;
  v14 = type metadata accessor for RDUserNotificationCategory(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v66 - v19;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100850AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
    v22 = v8;
    v23 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v73, v7);
    v24 = v72;
    swift_bridgeObjectRetain(v72);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(v24);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(42, -1);
      v70 = v23;
      v30 = v29;
      v31 = swift_slowAlloc(128, -1);
      v69 = v31;
      v77 = v31;
      *(_DWORD *)v30 = 136446978;
      v68 = v28;
      v67 = v26;
      v32 = RDUserNotificationCategory.rawValue.getter(v31);
      v76 = sub_10001A820(v32, v33, &v77);
      v73 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      v34 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v17, v14, v34);
      *(_WORD *)(v30 + 12) = 2082;
      swift_bridgeObjectRetain(v24);
      v76 = sub_10001A820(v71, v24, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v30 + 22) = 2082;
      v35 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v36 = v70;
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v70, v35);
      v76 = sub_10001A820(v37, v38, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      v39 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v10, v36, v39);
      *(_WORD *)(v30 + 32) = 2080;
      swift_getErrorValue(a1, v75, v74);
      v40 = Error.rem_errorDescription.getter(v74[1], v74[2]);
      v76 = sub_10001A820(v40, v41, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v42 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "RDTodayNotificationEngine: retractTodayNotificationIfApplicable failed {category: %{public}s, retractReason: %{public}s, lastDismissedDate: %{public}s, error: %s}", (uint8_t *)v30, 0x2Au);
      v43 = v69;
      swift_arrayDestroy(v69, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      v64 = swift_bridgeObjectRelease_n(v24, 2);
      (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v10, v23, v64);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v44 = type metadata accessor for Logger(0);
    sub_10001AAA8(v44, (uint64_t)qword_100850AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, a2, v14);
    v45 = v8;
    v46 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v73, v7);
    v47 = v72;
    swift_bridgeObjectRetain_n(v72, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      v52 = swift_slowAlloc(32, -1);
      v73 = v45;
      v53 = v52;
      v54 = swift_slowAlloc(96, -1);
      v69 = v54;
      v77 = v54;
      *(_DWORD *)v53 = 136446722;
      v68 = v51;
      v55 = RDUserNotificationCategory.rawValue.getter(v54);
      v76 = sub_10001A820(v55, v56, &v77);
      v70 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      v57 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v20, v14, v57);
      *(_WORD *)(v53 + 12) = 2082;
      swift_bridgeObjectRetain(v47);
      v76 = sub_10001A820(v71, v47, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease_n(v47, 3);
      *(_WORD *)(v53 + 22) = 2082;
      v58 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v59 = v70;
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v70, v58);
      v76 = sub_10001A820(v60, v61, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      v62 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v13, v59, v62);
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v68, "RDTodayNotificationEngine: retractTodayNotificationIfApplicable completed {category: %{public}s, retractReason: %{public}s, lastDismissedDate: %{public}s}", (uint8_t *)v53, 0x20u);
      v63 = v69;
      swift_arrayDestroy(v69, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
      v65 = swift_bridgeObjectRelease_n(v47, 2);
      (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v13, v46, v65);
    }

  }
}

void sub_1005AEFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100837940, sub_1005A6874);
    goto LABEL_5;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started) == 1)
  {
    sub_1005AF11C();
    return;
  }
  if (qword_100837940 != -1)
    goto LABEL_9;
LABEL_5:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_100850AC0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDTodayNotificationEngine.start() must be called before setupTimers", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

}

void sub_1005AF11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  id v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  char *v53;
  uint8_t *v54;
  id v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint8_t *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  void (*v90)(char *, char *, uint64_t, __n128);
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unsigned int (*v95)(_QWORD, _QWORD, _QWORD);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  __n128 v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  double v122;
  id v123;
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 v133;
  uint64_t v134;
  unsigned int (*v135)(_QWORD, _QWORD, _QWORD);
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  __n128 v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  uint8_t *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  __n128 v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  NSObject *v192;
  os_log_type_t v193;
  char *v194;
  char *v195;
  uint8_t *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  __n128 v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char v211;
  void (*v212)(char *, uint64_t);
  uint64_t v213;
  _QWORD v214[2];
  id v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t (*v244)(char *, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  _QWORD *v252;
  _QWORD v253[3];
  char v254[8];
  char *v255;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v2 = __chkstk_darwin(v1);
  v220 = (uint64_t)v214 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v228 = (char *)v214 - v5;
  v6 = __chkstk_darwin(v4);
  v222 = (char *)v214 - v7;
  __chkstk_darwin(v6);
  v230 = (char *)v214 - v8;
  v242 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v221 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242);
  v10 = (char *)v214 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.DatesModel.Group(0);
  v250 = *(char **)(v11 - 8);
  v251 = v11;
  v12 = __chkstk_darwin(v11);
  v243 = (char *)v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v249 = (char *)v214 - v15;
  __chkstk_darwin(v14);
  v248 = (char *)v214 - v16;
  v237 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v236 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v235 = (char *)v214 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v19 = *(_QWORD *)(v18 - 8);
  v244 = (uint64_t (*)(char *, uint64_t, uint64_t))v18;
  v245 = v19;
  __chkstk_darwin(v18);
  v234 = (char *)v214 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v21 = *(char **)(v246 - 8);
  __chkstk_darwin(v246);
  v247 = (char *)v214 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_10001A630((uint64_t *)&unk_100850D40);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v233 = (char *)v214 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = type metadata accessor for REMRemindersListDataView.DatesModel(0);
  v223 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v232 = (char *)v214 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for Date(0);
  v239 = *(_QWORD *)(v238 - 8);
  v25 = __chkstk_darwin(v238);
  v217 = (char *)v214 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v219 = (uint64_t)v214 - v28;
  v29 = __chkstk_darwin(v27);
  v218 = (char *)v214 - v30;
  v31 = __chkstk_darwin(v29);
  v227 = (char *)v214 - v32;
  v33 = __chkstk_darwin(v31);
  v231 = (char *)v214 - v34;
  __chkstk_darwin(v33);
  v240 = (char *)v214 - v35;
  v36 = sub_10001A630((uint64_t *)&unk_100841610);
  v37 = __chkstk_darwin(v36);
  v39 = (char *)v214 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v41 = (char *)v214 - v40;
  v42 = type metadata accessor for DispatchPredicate(0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (_QWORD *)((char *)v214 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v241 = v0;
  v46 = *(void **)(v0 + 16);
  *v45 = v46;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v43 + 104))(v45, enum case for DispatchPredicate.onQueue(_:), v42);
  v47 = v46;
  v48 = _dispatchPreconditionTest(_:)(v45);
  (*(void (**)(_QWORD *, uint64_t))(v43 + 8))(v45, v42);
  if ((v48 & 1) == 0)
    goto LABEL_72;
  if (qword_100837940 != -1)
    goto LABEL_73;
  while (1)
  {
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001AAA8(v49, (uint64_t)qword_100850AC0);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    v53 = v21;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDTodayNotificationEngine: started addNextBannerTimeEvent", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    sub_1004625C0();
    v55 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v56 = objc_msgSend(v55, "todayNotificationFireTime");

    v57 = v247;
    if (v56)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v56);

      v58 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v39, 0, 1, v58);
    }
    else
    {
      v58 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v39, 1, 1, v58);
    }
    v59 = v251;
    v60 = v248;
    sub_1000A5CA8((uint64_t)v39, (uint64_t)v41, (uint64_t *)&unk_100841610);
    type metadata accessor for DateComponents(0);
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v41, 1, v58);
    v62 = sub_10000882C((uint64_t)v41, (uint64_t *)&unk_100841610);
    if (v61 == 1)
    {
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.info.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "User doesn't want today notifications at all. Not adding next time event.", v65, 2u);
        swift_slowDealloc(v65, -1, -1);
      }

      return;
    }
    v229 = v50;
    Date.init()(v62);
    v66 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v241 + 120));
    (*((void (**)(char *, _QWORD, uint64_t))v53 + 13))(v57, enum case for REMRemindersListDataView.SortingStyle.default(_:), v246);
    v216 = v53;
    v67 = v57;
    v21 = v234;
    (*(void (**)(char *, _QWORD, uint64_t (*)(char *, uint64_t, uint64_t)))(v245 + 104))(v234, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v244);
    v68 = v236;
    v69 = v235;
    v70 = v237;
    (*(void (**)(char *, _QWORD, uint64_t))(v236 + 104))(v235, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v237);
    v71 = v233;
    static REMRemindersListDataView.fetchScheduled(store:sortingStyle:showCompleted:countCompleted:remindersPrefetch:alwaysIncludeTodayGroup:diffingAgainst:)(v66, v67, v21, 0, v69, 0, 0);
    v214[1] = 0;
    v215 = v66;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
    (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v245 + 8))(v21, v244);
    (*((void (**)(char *, uint64_t))v216 + 1))(v247, v246);
    v39 = v232;
    v81 = v226;
    REMRemindersListDataView.Result.model.getter(v226);
    v82 = (*(uint64_t (**)(char *, uint64_t))(v225 + 8))(v71, v81);
    v83 = REMRemindersListDataView.DatesModel.groups.getter(v82);
    v255 = (char *)_swiftEmptyArrayStorage;
    v247 = *(char **)(v83 + 16);
    if (!v247)
      break;
    v84 = 0;
    v41 = v250;
    while ((unint64_t)v84 < *(_QWORD *)(v83 + 16))
    {
      v85 = (v41[80] + 32) & ~(unint64_t)v41[80];
      v86 = *((_QWORD *)v41 + 9);
      v21 = (char *)v83;
      v87 = (*((uint64_t (**)(char *, unint64_t, uint64_t))v41 + 2))(v60, v83 + v85 + v86 * (_QWORD)v84, v59);
      v88 = REMRemindersListDataView.DatesModel.Group.reminders.getter(v87);
      v39 = *(char **)(v88 + 16);
      v89 = swift_bridgeObjectRelease(v88);
      if (v39)
      {
        v90 = (void (*)(char *, char *, uint64_t, __n128))*((_QWORD *)v41 + 4);
        v90(v249, v60, v59, v89);
        v39 = v255;
        if ((swift_isUniquelyReferenced_nonNull_native(v255) & 1) == 0)
        {
          sub_1001C24A4(0, *((_QWORD *)v39 + 2) + 1, 1);
          v39 = v255;
        }
        v92 = *((_QWORD *)v39 + 2);
        v91 = *((_QWORD *)v39 + 3);
        if (v92 >= v91 >> 1)
        {
          sub_1001C24A4(v91 > 1, v92 + 1, 1);
          v39 = v255;
        }
        *((_QWORD *)v39 + 2) = v92 + 1;
        v93 = &v39[v85 + v92 * v86];
        v59 = v251;
        ((void (*)(char *, char *, uint64_t))v90)(v93, v249, v251);
        v255 = v39;
        v41 = v250;
        v60 = v248;
      }
      else
      {
        (*((void (**)(char *, uint64_t))v41 + 1))(v60, v59);
      }
      ++v84;
      v83 = (uint64_t)v21;
      if (v247 == v84)
      {
        v94 = v255;
        v95 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v240;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_once(&qword_100837940, sub_1005A6874);
  }
  v94 = (char *)_swiftEmptyArrayStorage;
  v41 = v250;
  v95 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v240;
LABEL_30:
  swift_bridgeObjectRelease(v83);
  v255 = (char *)_swiftEmptyArrayStorage;
  v247 = (char *)*((_QWORD *)v94 + 2);
  if (v247)
  {
    v246 = (uint64_t)&v94[(v41[80] + 32) & ~(unint64_t)v41[80]];
    v96 = *((_QWORD *)v41 + 9);
    v244 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v41 + 2);
    v245 = v96;
    v237 = (uint64_t)v94;
    swift_retain(v94);
    v97 = 0;
    v98 = v221;
    v99 = v243;
    do
    {
      v102 = v244(v99, v246 + v245 * (_QWORD)v97, v59);
      v103 = REMRemindersListDataView.DatesModel.Group.reminders.getter(v102);
      v104 = (char *)v103;
      v105 = *(_QWORD *)(v103 + 16);
      if (v105)
      {
        v249 = v97;
        v252 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v105);
        v106 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        v248 = v104;
        v107 = &v104[v106];
        v108 = *(_QWORD *)(v98 + 72);
        v109 = *(uint64_t (**)(char *, char *, uint64_t))(v98 + 16);
        v110 = v242;
        do
        {
          v111 = v109(v10, v107, v110);
          v112 = REMRemindersListDataView.ReminderLite.objectID.getter(v111);
          v113 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v10, v110);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v113);
          v114 = v252[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v114);
          v115 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v112);
          specialized ContiguousArray._endMutation()(v115);
          v107 += v108;
          --v105;
        }
        while (v105);
        v101 = v252;
        v100 = swift_bridgeObjectRelease(v248);
        v41 = v250;
        v59 = v251;
        v99 = v243;
        v97 = v249;
      }
      else
      {
        v100 = swift_bridgeObjectRelease(v103);
        v101 = _swiftEmptyArrayStorage;
      }
      ++v97;
      (*((void (**)(char *, uint64_t, __n128))v41 + 1))(v99, v59, v100);
      sub_1001E1C20((uint64_t)v101);
    }
    while (v97 != v247);
    swift_release_n(v237, 2);
    v116 = (uint64_t)v255;
    v95 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v240;
  }
  else
  {
    swift_release(v94);
    v116 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v117 = v238;
  if ((unint64_t)v116 >> 62)
    goto LABEL_75;
  v118 = swift_bridgeObjectRetain(v116);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v118);
  v119 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v120 = v116;
  while (1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v122 = swift_bridgeObjectRelease(v120).n128_u64[0];
    v255 = 0;
    v123 = v215;
    v124 = objc_msgSend(v215, "fetchRemindersWithObjectIDs:error:", isa, &v255, v122);

    v125 = v255;
    if (!v124)
    {
      v140 = v255;
      swift_bridgeObjectRelease(v116);
      v141 = _convertNSErrorToError(_:)(v125);

      swift_willThrow(v142);
      v143 = v141;

      (*(void (**)(char *, uint64_t))(v223 + 8))(v232, v224);
      swift_errorRetain(v141);
      v72 = swift_errorRetain(v141);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = v143;
        v76 = (uint8_t *)swift_slowAlloc(12, -1);
        v77 = (char *)swift_slowAlloc(32, -1);
        v255 = v77;
        *(_DWORD *)v76 = 136315138;
        swift_getErrorValue(v75, v254, v253);
        v78 = Error.localizedDescription.getter(v253[1], v253[2]);
        v80 = v79;
        v252 = (_QWORD *)sub_10001A820(v78, v79, (uint64_t *)&v255);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v253);
        swift_bridgeObjectRelease(v80);
        swift_errorRelease(v75);
        swift_errorRelease(v75);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Error fetching scheduled reminders when getting nextReminderDueDateMidnight {error: %s}", v76, 0xCu);
        swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v76, -1, -1);

        swift_errorRelease(v75);
      }
      else
      {
        swift_errorRelease(v143);
        swift_errorRelease(v143);
        swift_errorRelease(v143);

      }
      (*(void (**)(unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v239 + 8))(v95, v117);
      return;
    }
    v126 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    v127 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v128 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v124, v119, v126, v127);
    v129 = v125;

    __chkstk_darwin(v130);
    v214[-2] = v128;
    v214[-1] = v95;
    sub_1003522A0((void (*)(unsigned __int8 **))sub_1005B4A70, (uint64_t)&v214[-4], v116);
    v132 = v131;
    swift_bridgeObjectRelease(v116);
    v133 = swift_bridgeObjectRelease(v128);
    v251 = v132;
    v134 = *(_QWORD *)(v132 + 16);
    if (!v134)
    {
      v136 = v239;
      v138 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v239 + 56);
      v137 = (uint64_t)v222;
      v138(v222, 1, 1, v117, v133);
      v139 = v218;
      goto LABEL_48;
    }
    v135 = v95;
    v136 = v239;
    v116 = v251 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
    v137 = (uint64_t)v222;
    v250 = *(char **)(v239 + 16);
    ((void (*)(char *, uint64_t, uint64_t, __n128))v250)(v222, v116, v117, v133);
    v138 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v136 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v138)(v137, 0, 1, v117);
    v95 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v136 + 48);
    if (v95(v137, 1, v117) == 1)
    {
      v139 = v218;
      v95 = v135;
LABEL_48:
      sub_10000882C(v137, (uint64_t *)&unk_1008380D0);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v138)(v230, 1, 1, v117);
      v144 = *(char **)(v136 + 16);
      ((void (*)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))v144)(v139, v95, v117);
      goto LABEL_52;
    }
    v145 = *(void (**)(char *, uint64_t, uint64_t))(v136 + 32);
    v145(v231, v137, v117);
    swift_bridgeObjectRetain(v251);
    v146 = (uint64_t)v228;
    v144 = v250;
    if (v134 == 1)
      break;
    v207 = 1;
    v208 = v239;
    while (v207 < *(_QWORD *)(v251 + 16))
    {
      ((void (*)(uint64_t, unint64_t, uint64_t))v144)(v146, v116 + *(_QWORD *)(v208 + 72) * v207, v117);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v138)(v146, 0, 1, v117);
      if (v95(v146, 1, v117) == 1)
        goto LABEL_51;
      v209 = v227;
      v145(v227, v146, v117);
      v210 = v231;
      v211 = static Date.< infix(_:_:)(v209, v231);
      v212 = *(void (**)(char *, uint64_t))(v208 + 8);
      if ((v211 & 1) != 0)
      {
        v212(v210, v117);
        v145(v210, (uint64_t)v209, v117);
      }
      else
      {
        v212(v209, v117);
      }
      ++v207;
      v146 = (uint64_t)v228;
      v144 = v250;
      if (v134 == v207)
        goto LABEL_50;
    }
    __break(1u);
LABEL_75:
    if (v116 < 0)
      v213 = v116;
    else
      v213 = v116 & 0xFFFFFFFFFFFFFF8;
    v119 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_bridgeObjectRetain(v116);
    v120 = _bridgeCocoaArray<A>(_:)(v213, v119);
    swift_bridgeObjectRelease(v116);
  }
LABEL_50:
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v138)(v146, 1, 1, v117);
LABEL_51:
  swift_bridgeObjectRelease(v251);
  sub_10000882C(v146, (uint64_t *)&unk_1008380D0);
  v147 = (uint64_t)v230;
  v145(v230, (uint64_t)v231, v117);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v138)(v147, 0, 1, v117);
  v139 = v218;
  ((void (*)(char *, char *, uint64_t))v144)(v218, v240, v117);
LABEL_52:
  v148 = swift_bridgeObjectRetain_n(v251, 2);
  v149 = Logger.logObject.getter(v148);
  v150 = static os_log_type_t.debug.getter();
  v151 = v150;
  if (os_log_type_enabled(v149, v150))
  {
    v152 = swift_slowAlloc(22, -1);
    LODWORD(v249) = v151;
    v153 = v152;
    v250 = (char *)swift_slowAlloc(64, -1);
    v255 = v250;
    *(_DWORD *)v153 = 136315394;
    v154 = v144;
    v155 = v251;
    v156 = swift_bridgeObjectRetain(v251);
    v157 = v139;
    v158 = Array.description.getter(v156, v117);
    v160 = v159;
    swift_bridgeObjectRelease(v155);
    v252 = (_QWORD *)sub_10001A820(v158, v160, (uint64_t *)&v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v253);
    v161 = v155;
    v144 = v154;
    swift_bridgeObjectRelease_n(v161, 2);
    swift_bridgeObjectRelease(v160);
    *(_WORD *)(v153 + 12) = 2080;
    v248 = (char *)(v153 + 14);
    v162 = sub_10001A630((uint64_t *)&unk_100850D50);
    v163 = v239;
    v164 = *(unsigned __int8 *)(v239 + 80);
    v165 = (v164 + 32) & ~v164;
    v166 = swift_allocObject(v162, v165 + *(_QWORD *)(v239 + 72), v164 | 7);
    *(_OWORD *)(v166 + 16) = xmmword_1006A3C00;
    ((void (*)(uint64_t, char *, uint64_t))v144)(v166 + v165, v157, v117);
    v167 = Array.description.getter(v166, v117);
    v168 = v117;
    v170 = v169;
    swift_bridgeObjectRelease(v166);
    v252 = (_QWORD *)sub_10001A820(v167, v170, (uint64_t *)&v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v253);
    v171 = swift_bridgeObjectRelease(v170);
    v172 = *(char **)(v163 + 8);
    ((void (*)(char *, uint64_t, __n128))v172)(v157, v168, v171);
    _os_log_impl((void *)&_mh_execute_header, v149, (os_log_type_t)v249, "Deciding when to wake up for the next TodayNotification {todayTimeCandidates: %s, now: %s}", (uint8_t *)v153, 0x16u);
    v173 = v250;
    swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v173, -1, -1);
    swift_slowDealloc(v153, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v251, 2);
    v168 = v117;
    v163 = v239;
    v172 = *(char **)(v239 + 8);
    ((void (*)(char *, uint64_t))v172)(v139, v117);
  }

  v174 = v220;
  sub_100008868((uint64_t)v230, v220, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v174, 1, v168) == 1)
  {
    sub_10000882C(v174, (uint64_t *)&unk_1008380D0);
    v175 = swift_bridgeObjectRetain(v251);
    v176 = Logger.logObject.getter(v175);
    v177 = static os_log_type_t.default.getter(v176);
    if (os_log_type_enabled(v176, v177))
    {
      v178 = (uint8_t *)swift_slowAlloc(12, -1);
      v179 = (char *)swift_slowAlloc(32, -1);
      v255 = v179;
      *(_DWORD *)v178 = 136315138;
      v180 = v251;
      v181 = swift_bridgeObjectRetain(v251);
      v182 = v238;
      v183 = Array.description.getter(v181, v238);
      v250 = v172;
      v185 = v184;
      swift_bridgeObjectRelease(v180);
      v252 = (_QWORD *)sub_10001A820(v183, v185, (uint64_t *)&v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v253);
      swift_bridgeObjectRelease_n(v180, 2);
      v186 = v185;
      v172 = v250;
      swift_bridgeObjectRelease(v186);
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "No time in todayTimeCandidates is in the future. Not adding next time event. {todayTimeCandidates: %s}", v178, 0xCu);
      swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v179, -1, -1);
      swift_slowDealloc(v178, -1, -1);

      sub_10000882C((uint64_t)v230, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v223 + 8))(v232, v224);
    }
    else
    {
      swift_bridgeObjectRelease_n(v251, 2);

      sub_10000882C((uint64_t)v230, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t))(v223 + 8))(v232, v224);
      v182 = v238;
    }
    ((void (*)(char *, uint64_t))v172)(v240, v182);
  }
  else
  {
    v187 = swift_bridgeObjectRelease(v251);
    v188 = v219;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v163 + 32))(v219, v174, v168, v187);
    v189 = v144;
    v190 = v217;
    v191 = ((uint64_t (*)(char *, uint64_t, uint64_t))v189)(v217, v188, v168);
    v192 = Logger.logObject.getter(v191);
    v193 = static os_log_type_t.default.getter(v192);
    if (os_log_type_enabled(v192, v193))
    {
      v194 = v172;
      v195 = v190;
      v196 = (uint8_t *)swift_slowAlloc(12, -1);
      v197 = (char *)swift_slowAlloc(32, -1);
      v255 = v197;
      *(_DWORD *)v196 = 136446210;
      v198 = Date.description.getter(v197);
      v200 = v199;
      v252 = (_QWORD *)sub_10001A820(v198, v199, (uint64_t *)&v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v253);
      v201 = swift_bridgeObjectRelease(v200);
      v202 = v195;
      v172 = v194;
      ((void (*)(char *, uint64_t, __n128))v194)(v202, v168, v201);
      _os_log_impl((void *)&_mh_execute_header, v192, v193, "Scheduling next todayNotification fire date {nextFireDate: %{public}s}", v196, 0xCu);
      swift_arrayDestroy(v197, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v197, -1, -1);
      swift_slowDealloc(v196, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v172)(v190, v168);
    }

    v203 = v224;
    v204 = v223;
    v205 = v240;
    v206 = v219;
    sub_100310AA0(v219);

    ((void (*)(uint64_t, uint64_t))v172)(v206, v168);
    sub_10000882C((uint64_t)v230, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v232, v203);
    ((void (*)(char *, uint64_t))v172)(v205, v168);
  }
}

uint64_t sub_1005B0944@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = sub_1002B1B30(v11, a2);

  if (v12)
  {
    v13 = objc_msgSend(v12, "displayDate");
    if (v13)
    {
      v14 = v13;
      if ((objc_msgSend(v13, "isAllDay") & 1) != 0
        && ((v15 = objc_msgSend(v12, "assignmentContext"),
             v16 = objc_msgSend(v15, "currentAssignment"),
             v15,
             !v16)
         || (v16, (sub_1004D3090(0) & 1) != 0)))
      {
        sub_100454FF8(v12, a3, (uint64_t)v10);

        v17 = type metadata accessor for Date(0);
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) != 1)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v10, v17);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a4, 0, 1, v17);
        }
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
      }
      else
      {

      }
    }
    else
    {

    }
  }
  v19 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a4, 1, 1, v19);
}

void sub_1005B0B1C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Subtasks;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  id v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Class isa;
  double v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  id v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t Configuration;
  void (*v126)(_QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _QWORD v144[3];
  char v145[8];
  _QWORD *v146;

  v121 = a2;
  v126 = a1;
  v116 = type metadata accessor for RDUserNotificationCategory(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for RDUserNotificationType(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for Date(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v139 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_10001A630((uint64_t *)&unk_100850D30);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v138 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for REMRemindersListDataView.TodayGroupModel(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v122 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v136 = *(_QWORD *)(Subtasks - 8);
  v137 = Subtasks;
  __chkstk_darwin(Subtasks);
  v140 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v133 = *(_QWORD *)(v14 - 8);
  v134 = v14;
  __chkstk_darwin(v14);
  v135 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v131 = *(_QWORD *)(v16 - 8);
  v132 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v124 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v142 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (id *)((char *)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = v2;
  v26 = *(void **)(v2 + 16);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v25);
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) != 0)
  {
    if (qword_100837940 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837940, sub_1005A6874);
LABEL_3:
  v28 = type metadata accessor for Logger(0);
  v123 = sub_10001AAA8(v28, (uint64_t)qword_100850AC0);
  v29 = Logger.logObject.getter(v123);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v32 = v141;
  if (v31)
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDTodayNotificationEngine: started updateApplicationBadge", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  v34 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v32 + 120));
  (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v20, enum case for REMRemindersListDataView.SortingStyle.default(_:), v130);
  (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v18, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v132);
  v35 = v135;
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v135, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v134);
  v36 = v140;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v140, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), v137);
  v37 = v142;
  v38 = REMRemindersListDataView.FetchConfiguration.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:)(v20, v18, 0, v35, v36);
  v39 = v139;
  Date.init()(v38);
  v40 = v138;
  static REMRemindersListDataView.fetchToday_Groups(store:grouped:currentLocation:today:configuration:diffingAgainst:)(v34, 0, 0, v39, v37, 0);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v39, v128);
  v49 = v40;
  v50 = v120;
  REMRemindersListDataView.Result.model.getter(v120);
  v51 = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v49, v50);
  v52 = REMRemindersListDataView.TodayGroupModel.todayReminders.getter(v51);
  v53 = (char *)v52;
  v54 = *(_QWORD *)(v52 + 16);
  v110 = v34;
  if (v54)
  {
    v140 = 0;
    v146 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v54);
    v55 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v139 = v53;
    v56 = &v53[v55];
    v57 = *(_QWORD *)(v6 + 72);
    v58 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    do
    {
      v59 = v58(v8, v56, v5);
      v60 = REMRemindersListDataView.ReminderLite.objectID.getter(v59);
      v61 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v61);
      v62 = v146[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v62);
      v63 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v60);
      specialized ContiguousArray._endMutation()(v63);
      v56 += v57;
      --v54;
    }
    while (v54);
    v64 = (uint64_t)v146;
    swift_bridgeObjectRelease(v139);
    v32 = v141;
    v37 = v142;
    v34 = v110;
    if (!((unint64_t)v64 >> 62))
      goto LABEL_15;
  }
  else
  {
    swift_bridgeObjectRelease(v52);
    v64 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_15:
      v65 = swift_bridgeObjectRetain(v64);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v65);
      v66 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v67 = v64;
      goto LABEL_16;
    }
  }
  if (v64 < 0)
    v80 = v64;
  else
    v80 = v64 & 0xFFFFFFFFFFFFFF8;
  v66 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  swift_bridgeObjectRetain(v64);
  v67 = _bridgeCocoaArray<A>(_:)(v80, v66);
  swift_bridgeObjectRelease(v64);
LABEL_16:
  swift_bridgeObjectRelease(v64);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v69 = swift_bridgeObjectRelease(v67).n128_u64[0];
  v146 = 0;
  v70 = objc_msgSend(v34, "fetchRemindersWithObjectIDs:error:", isa, &v146, v69);

  v71 = v146;
  if (v70)
  {
    v72 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    v73 = sub_1000E51DC((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v74 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v70, v66, v72, v73);
    v75 = v71;

    v76 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v77 = objc_msgSend(v76, "shouldIncludeRemindersDueTodayInBadgeCount");

    if ((v77 & 1) != 0)
    {
      if ((v74 & 0xC000000000000001) != 0)
      {
        if (v74 < 0)
          v78 = v74;
        else
          v78 = v74 & 0xFFFFFFFFFFFFFF8;
        v79 = __CocoaDictionary.count.getter(v78);
      }
      else
      {
        v79 = *(_QWORD *)(v74 + 16);
      }
    }
    else
    {
      sub_1005A65C0(v74);
      v74 = v84;
      if ((unint64_t)v84 >> 62)
      {
        if (v84 >= 0)
          v84 &= 0xFFFFFFFFFFFFFF8uLL;
        v79 = _CocoaArrayWrapper.endIndex.getter(v84);
      }
      else
      {
        v79 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    swift_bridgeObjectRelease(v74);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.info.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = swift_slowAlloc(22, -1);
      v89 = (_QWORD *)swift_slowAlloc(32, -1);
      v146 = v89;
      *(_DWORD *)v88 = 136315394;
      v90 = Bool.yesno.getter(v77);
      v92 = v91;
      v143 = sub_10001A820(v90, v91, (uint64_t *)&v146);
      v32 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
      swift_bridgeObjectRelease(v92);
      *(_WORD *)(v88 + 12) = 2048;
      v143 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Updating application badge. {includeToday: %s, count: %ld}", (uint8_t *)v88, 0x16u);
      swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v88, -1, -1);
    }

    v93 = v116;
    v94 = v115;
    v95 = v113;
    v96 = v112;
    v97 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v112 + 104))(v111, enum case for RDUserNotificationType.todayNotificationBadge(_:), v113);
    v98 = sub_10023F73C(0, 0, 0);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v95);
    v99 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v79);
    objc_msgSend(v98, "setBadge:", v99);

    v100 = v114;
    v101 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v94 + 104))(v114, enum case for RDUserNotificationCategory.todayNotificationBadge(_:), v93);
    v102 = RDUserNotificationCategory.rawValue.getter(v101);
    v104 = v103;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v100, v93);
    v105 = swift_allocObject(&unk_1007FC050, 56, 7);
    v106 = v32;
    v107 = v105;
    v108 = (uint64_t)v126;
    *(_QWORD *)(v105 + 16) = v106;
    *(_QWORD *)(v105 + 24) = v108;
    v109 = v121;
    *(_QWORD *)(v105 + 32) = v121;
    *(_BYTE *)(v105 + 40) = (_BYTE)v77;
    *(_QWORD *)(v105 + 48) = v79;
    swift_retain(v106);
    sub_1000E51CC(v108, v109);
    sub_1004853D8(v102, v104, v98, (uint64_t)sub_1005B4A5C, v107);

    swift_bridgeObjectRelease(v104);
    swift_release(v107);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v122, v118);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v142, Configuration);
  }
  else
  {
    v81 = v146;
    v82 = _convertNSErrorToError(_:)(v71);

    swift_willThrow(v83);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v122, v118);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v37, Configuration);
    swift_errorRetain(v82);
    v41 = swift_errorRetain(v82);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (_QWORD *)swift_slowAlloc(32, -1);
      v146 = v45;
      *(_DWORD *)v44 = 136315138;
      swift_getErrorValue(v82, v145, v144);
      v46 = Error.localizedDescription.getter(v144[1], v144[2]);
      v48 = v47;
      v143 = sub_10001A820(v46, v47, (uint64_t *)&v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144);
      swift_bridgeObjectRelease(v48);
      swift_errorRelease(v82);
      swift_errorRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to fetch reminder count. Failed to update today badge {error: %s}", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      swift_errorRelease(v82);
    }
    else
    {
      swift_errorRelease(v82);
      swift_errorRelease(v82);
      swift_errorRelease(v82);

    }
    if (v126)
      v126(0);
  }
}

void sub_1005B18BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;

  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(a2 + 16);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100837940, sub_1005A6874);
LABEL_4:
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_100850AC0);
    swift_errorRetain(a1);
    v18 = swift_errorRetain(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v38 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_getErrorValue(a1, v36, v35);
      v23 = Error.localizedDescription.getter(v35[1], v35[2]);
      v25 = v24;
      v37 = sub_10001A820(v23, v24, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to post today badge notification. {error: %s}", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      if (!a3)
        goto LABEL_15;
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      if (!a3)
      {
LABEL_15:
        swift_errorRelease(a1);
        return;
      }
    }
    a3(0);
    goto LABEL_15;
  }
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837940 == -1)
      goto LABEL_4;
    goto LABEL_18;
  }
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10001AAA8(v26, (uint64_t)qword_100850AC0);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(32, -1);
    v38 = v31;
    *(_DWORD *)v30 = 136315394;
    v32 = Bool.yesno.getter(a5 & 1);
    v34 = v33;
    v37 = sub_10001A820(v32, v33, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v30 + 12) = 2048;
    v37 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Posted today badge notification. {includeToday: %s, count: %ld}", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }

  if (a3)
    a3(1);
}

uint64_t sub_1005B1CA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v7 = &v16[-v6 - 8];
  Date.init()(v8);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  sub_1000A5CA8((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_1008380D0);
  v10 = a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v16, 33, 0);
  sub_1000BABD0((uint64_t)v4, v10, (uint64_t *)&unk_1008380D0);
  swift_endAccess(v16);
  sub_100008868(v10, (uint64_t)v7, (uint64_t *)&unk_1008380D0);
  v11 = a1 + 80;
  swift_beginAccess(a1 + 80, v16, 33, 0);
  v13 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 112);
  sub_10001BA38(v11, v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v7, v13, v12);
  return swift_endAccess(v16);
}

void sub_1005B1E00()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850AC0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "RDTodayNotificationEngine: Unexpected .markAsCompleted actions for notification type .todayNotification", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_1005B1ECC(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = type metadata accessor for RDUserNotificationAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v4, v7, v9);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for RDUserNotificationAction.defaultDismiss(_:))
  {
    if (a2)
      a2();
    return;
  }
  if (v12 == enum case for RDUserNotificationAction.debugDismiss(_:))
    return;
  if (v12 != enum case for RDUserNotificationAction.markAsCompleted(_:))
  {
    if (v12 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
      || v12 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:))
    {
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10001AAA8(v16, (uint64_t)qword_100850AC0);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter(v18);
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_44;
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "RDTodayNotificationEngine: Unexpected .snooze* actions for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.addToReminders(_:))
    {
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10001AAA8(v22, (uint64_t)qword_100850AC0);
      v18 = Logger.logObject.getter(v23);
      v19 = static os_log_type_t.error.getter(v18);
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_44;
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "RDTodayNotificationEngine: Unexpected .addToReminders action for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
    {
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001AAA8(v24, (uint64_t)qword_100850AC0);
      v18 = Logger.logObject.getter(v25);
      v19 = static os_log_type_t.error.getter(v18);
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_44;
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "RDTodayNotificationEngine: Unexpected .viewAssignmentInList action for today notification";
    }
    else if (v12 == enum case for RDUserNotificationAction.declineAssignment(_:))
    {
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v26 = type metadata accessor for Logger(0);
      v27 = sub_10001AAA8(v26, (uint64_t)qword_100850AC0);
      v18 = Logger.logObject.getter(v27);
      v19 = static os_log_type_t.error.getter(v18);
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_44;
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "RDTodayNotificationEngine: Unexpected .declineAssignment action for today notification";
    }
    else
    {
      if (v12 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
        __break(1u);
        return;
      }
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_10001AAA8(v28, (uint64_t)qword_100850AC0);
      v18 = Logger.logObject.getter(v29);
      v19 = static os_log_type_t.error.getter(v18);
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_44;
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      v21 = "RDTodayNotificationEngine: Unexpected .viewRemindersInList action for today notification";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1, -1);
LABEL_44:

    return;
  }
  if (a4)
    a4();
}

void sub_1005B2338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  os_log_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  os_log_t v49;
  uint64_t v50;
  id v51;
  void (*v52)(char *, uint64_t, uint64_t);
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t aBlock[5];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];

  v57 = a2;
  v5 = type metadata accessor for RDUserNotificationAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - v9;
  v11 = type metadata accessor for REMNotificationIdentifier(0);
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  __chkstk_darwin(v11);
  v56 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v60 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(a3 + 120));
  v14 = (void *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)(a1, 0);
  v54 = v7;
  v55 = a3;
  v15 = v57;
  v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v6;
  v59 = v5;
  v16 = v14;
  v17 = objc_msgSend(v16, "objectID");
  v18 = objc_allocWithZone((Class)REMSaveRequest);
  v19 = objc_msgSend(v18, "initWithStore:", v60);
  v53 = objc_msgSend(v19, "updateReminder:", v16);
  objc_msgSend(v53, "snoozeForever");
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100850AC0);
  v22 = v58;
  v21 = v59;
  v23 = v15;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v52(v10, v15, v59);
  v24 = v17;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v49 = v25;
    v28 = v27;
    v29 = (_QWORD *)swift_slowAlloc(8, -1);
    v48 = v29;
    v50 = swift_slowAlloc(32, -1);
    aBlock[0] = v50;
    *(_DWORD *)v28 = 138543618;
    v63 = (uint64_t)v24;
    v51 = v16;
    v30 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    *v29 = v24;
    v23 = v57;

    *(_WORD *)(v28 + 12) = 2082;
    v32 = RDUserNotificationAction.rawValue.getter(v31);
    v63 = sub_10001A820(v32, v33, aBlock);
    v22 = v58;
    v21 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    v34 = swift_bridgeObjectRelease();
    v16 = v51;
    (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v10, v21, v34);
    v35 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, v26, "RDTodayNotificationEngine: Updating reminder for notification action {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v28, 0x16u);
    v36 = sub_10001A630((uint64_t *)&unk_100839E70);
    v37 = v48;
    swift_arrayDestroy(v48, 1, v36);
    swift_slowDealloc(v37, -1, -1);
    v38 = v50;
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v21);
  }
  v39 = v56;
  v40 = v54;
  v41 = *(_QWORD *)(v55 + 16);
  v52(v56, v23, v21);
  v42 = *(unsigned __int8 *)(v22 + 80);
  v43 = (v42 + 24) & ~v42;
  v44 = swift_allocObject(&unk_1007FC000, v43 + v40, v42 | 7);
  *(_QWORD *)(v44 + 16) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v44 + v43, v39, v21);
  aBlock[4] = (uint64_t)sub_1005B49C8;
  v62 = v44;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E18E4;
  aBlock[3] = (uint64_t)&unk_1007FC018;
  v45 = _Block_copy(aBlock);
  v46 = v62;
  v47 = v24;
  swift_release(v46);
  objc_msgSend(v19, "saveWithQueue:completion:", v41, v45);

  _Block_release(v45);
}

void sub_1005B2A5C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  id v72;
  id v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t aBlock[5];
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[16];

  v79 = a2;
  v76 = type metadata accessor for RDUserNotificationAction(0);
  v5 = *(_QWORD *)(v76 - 8);
  v6 = *(char **)(v5 + 64);
  __chkstk_darwin(v76);
  __chkstk_darwin(v7);
  v9 = (char *)&v68 - v8;
  v10 = (_QWORD *)type metadata accessor for REMAnalyticsEvent(0);
  v77 = *(v10 - 1);
  v78 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMNotificationIdentifier(0);
  v81 = *(char **)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13);
  v75 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v80 = (char *)&v68 - v16;
  v17 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *((_QWORD *)a3 + 15));
  v18 = (void *)REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)(a1, 0);
  v74 = v9;
  v75 = v6;
  v80 = a3;
  v81 = (char *)&v68 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v5;
  v19 = v76;
  v20 = v18;
  v21 = objc_msgSend(v20, "objectID");
  v72 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v17);
  v73 = v20;
  v22 = objc_msgSend(v72, "updateReminder:", v20);
  type metadata accessor for REMAnalyticsManager(0, v23);
  v25 = static REMAnalyticsManager.shared.getter(v24);
  v26 = (int *)sub_10001A630(&qword_100850D28);
  v27 = &v12[v26[12]];
  v28 = &v12[v26[16]];
  v29 = &v12[v26[20]];
  v30 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
  v31 = type metadata accessor for REMUserOperation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v12, v30, v31);
  v32 = type metadata accessor for Date(0);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v28, 1, 1, v32);
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v34 = v77;
  v33 = v78;
  v35.n128_f64[0] = (*(double (**)(char *, _QWORD, id))(v77 + 104))(v12, enum case for REMAnalyticsEvent.userOperation(_:), v78);
  REMAnalyticsManager.post(event:)(v12, v35);
  swift_release(v25);
  (*(void (**)(char *, id))(v34 + 8))(v12, v33);
  v78 = v22;
  objc_msgSend(v22, "setCompleted:", 1);
  v36 = v17;
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v37 = type metadata accessor for Logger(0);
  sub_10001AAA8(v37, (uint64_t)qword_100850AC0);
  v38 = v82;
  v39 = v74;
  v40 = v79;
  v77 = *(_QWORD *)(v82 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v77)(v74, v79, v19);
  v41 = v21;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(8, -1);
    v70 = v42;
    v46 = (_QWORD *)v45;
    v69 = v45;
    v71 = swift_slowAlloc(32, -1);
    aBlock[0] = v71;
    *(_DWORD *)v44 = 138543618;
    v85 = (uint64_t)v41;
    v47 = v36;
    v48 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
    *v46 = v41;

    v36 = v47;
    *(_WORD *)(v44 + 12) = 2082;
    v49 = v74;
    v51 = RDUserNotificationAction.rawValue.getter(v50);
    v85 = sub_10001A820(v51, v52, aBlock);
    v38 = v82;
    v40 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
    v53 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v49, v19, v53);
    v42 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, v43, "RDTodayNotificationEngine: Updating reminder for notification action {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v44, 0x16u);
    v54 = sub_10001A630((uint64_t *)&unk_100839E70);
    v55 = v69;
    swift_arrayDestroy(v69, 1, v54);
    swift_slowDealloc(v55, -1, -1);
    v56 = v71;
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v19);
  }

  v57 = v81;
  v58 = v75;
  v59 = *((_QWORD *)v80 + 2);
  ((void (*)(char *, uint64_t, uint64_t))v77)(v81, v40, v19);
  v60 = *(unsigned __int8 *)(v38 + 80);
  v61 = (v60 + 24) & ~v60;
  v62 = swift_allocObject(&unk_1007FBFB0, &v58[v61], v60 | 7);
  *(_QWORD *)(v62 + 16) = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v62 + v61, v57, v19);
  aBlock[4] = (uint64_t)sub_1005B49C8;
  v84 = v62;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000E18E4;
  aBlock[3] = (uint64_t)&unk_1007FBFC8;
  v63 = _Block_copy(aBlock);
  v64 = v84;
  v65 = v41;
  swift_release(v64);
  v66 = v72;
  objc_msgSend(v72, "saveWithQueue:completion:", v59, v63);

  v67 = v73;
  _Block_release(v63);

}

uint64_t sub_1005B32B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v13 = &v21[-v12 - 8];
  Date.init()(v14);
  v15 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 0, 1, v15);
  sub_1000A5CA8((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_1008380D0);
  v16 = a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate, v21, 33, 0);
  sub_1000BABD0((uint64_t)v10, v16, (uint64_t *)&unk_1008380D0);
  swift_endAccess(v21);
  sub_100008868(v16, (uint64_t)v13, (uint64_t *)&unk_1008380D0);
  swift_beginAccess(a1 + 80, v21, 33, 0);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  sub_10001BA38(a1 + 80, v17);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v13, v17, v18);
  swift_endAccess(v21);
  return a4(a2, a3, a1);
}

void sub_1005B3434(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  id v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[4];
  int v47;
  _QWORD *v48;
  os_log_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for RDUserNotificationAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v46[-v11];
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100850AC0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    v14 = a2;
    swift_errorRetain(a1);
    v15 = v14;
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc(32, -1);
      v48 = (_QWORD *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v54 = v50;
      *(_DWORD *)v20 = 136446722;
      swift_getErrorValue(a1, v52, v51);
      v49 = v17;
      v21 = Error.rem_errorDescription.getter(v51[1], v51[2]);
      v53 = sub_10001A820(v21, v22, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v20 + 12) = 2114;
      v53 = (uint64_t)v15;
      v23 = v15;
      v47 = v19;
      v24 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v25 = v48;
      *v48 = v15;

      *(_WORD *)(v20 + 22) = 2082;
      v27 = RDUserNotificationAction.rawValue.getter(v26);
      v53 = sub_10001A820(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v29 = swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v9, v6, v29);
      v30 = v49;
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v47, "RDTodayNotificationEngine: Save error. Failed to save updates from notification response {error: %{public}s, reminderID: %{public}@, action: %{public}s}", (uint8_t *)v20, 0x20u);
      v31 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v25, 1, v31);
      swift_slowDealloc(v25, -1, -1);
      v32 = v50;
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else
  {
    if (qword_100837940 != -1)
      swift_once(&qword_100837940, sub_1005A6874);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_100850AC0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v12, a3, v6);
    v34 = a2;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v49 = (os_log_t)swift_slowAlloc(8, -1);
      v38 = swift_slowAlloc(32, -1);
      v50 = v38;
      v54 = v38;
      *(_DWORD *)v37 = 136446466;
      v39 = RDUserNotificationAction.rawValue.getter(v38);
      v53 = sub_10001A820(v39, v40, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v41 = swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v12, v6, v41);
      *(_WORD *)(v37 + 12) = 2114;
      v53 = (uint64_t)v34;
      v42 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v43 = v49;
      v49->isa = (Class)v34;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDTodayNotificationEngine: Updated reminder successfully. {action: %{public}s, reminderID: %{public}@}", (uint8_t *)v37, 0x16u);
      v44 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v43, 1, v44);
      swift_slowDealloc(v43, -1, -1);
      v45 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);

    }
  }
}

uint64_t sub_1005B3994(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_1005B3B80(a2, a3, a4, a5, a6);
}

_QWORD *sub_1005B39AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v3 = sub_10001A630((uint64_t *)&unk_100850D60);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v9 = (id *)((char *)&v20 - v8);
  result = _swiftEmptyArrayStorage;
  v22 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v20 = v1;
    v12 = *(_QWORD *)(v7 + 72);
    v21 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = a1 + v21;
    v14 = _swiftEmptyArrayStorage;
    do
    {
      sub_100008868(v13, (uint64_t)v9, (uint64_t *)&unk_100850D60);
      v15 = objc_msgSend(*v9, "displayDate");
      if (v15 && (v16 = v15, v17 = objc_msgSend(v15, "isAllDay"), v16, v17))
      {
        sub_1000A5CA8((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_100850D60);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          sub_1001C2478(0, v14[2] + 1, 1);
        v14 = v22;
        v19 = v22[2];
        v18 = v22[3];
        if (v19 >= v18 >> 1)
        {
          sub_1001C2478(v18 > 1, v19 + 1, 1);
          v14 = v22;
        }
        v14[2] = v19 + 1;
        sub_1000A5CA8((uint64_t)v6, (uint64_t)v14 + v21 + v19 * v12, (uint64_t *)&unk_100850D60);
      }
      else
      {
        sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100850D60);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v22;
  }
  return result;
}

uint64_t sub_1005B3B80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  id *v32;
  void (*v33)(char *, uint64_t, uint64_t, __n128);
  int v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, char *);
  void (*v52)(char *, uint64_t, uint64_t, __n128);
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  __n128 v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  __n128 v74;
  os_log_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  id *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, __n128);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, char *, char *);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  os_log_t v118;
  uint64_t v119;
  int v120;
  _QWORD *v121;
  void (*v122)(char *, id *, char *);
  void (*v123)(char *, char *, char *);
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t, __n128);
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t (*v138)(void);
  uint64_t v139;
  uint64_t v140[2];

  v137 = a5;
  v138 = a4;
  v134 = a3;
  v135 = a1;
  v6 = type metadata accessor for REMNotificationIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v132 = (char *)v6;
  v133 = v7;
  v8 = *(char **)(v7 + 64);
  __chkstk_darwin(v6);
  v128 = (char *)&v118 - ((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v118 - v10;
  __chkstk_darwin(v12);
  v136 = (char *)&v118 - v13;
  v14 = sub_10001A630(&qword_100850D20);
  __chkstk_darwin(v14);
  v126 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for RDUserNotificationAction(0);
  v129 = *(_QWORD *)(v16 - 8);
  v130 = (void (*)(char *, uint64_t, uint64_t, __n128))v16;
  v17 = *(_QWORD **)(v129 + 64);
  __chkstk_darwin(v16);
  v125 = (char *)&v118 - (((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v127 = (char *)&v118 - v19;
  __chkstk_darwin(v20);
  v124 = (char *)&v118 - v21;
  v22 = type metadata accessor for RDUserNotificationType(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = ((char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v28 = (char *)&v118 - v27;
  v30 = __chkstk_darwin(v29);
  v32 = (id *)((char *)&v118 - v31);
  v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16);
  v33((char *)&v118 - v31, a2, v22, v30);
  v34 = (*(uint64_t (**)(id *, uint64_t))(v23 + 88))(v32, v22);
  if (v34 == enum case for RDUserNotificationType.reminderAlarm(_:))
    goto LABEL_2;
  if (v34 != enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (v34 == enum case for RDUserNotificationType.caldavSharedList(_:))
    {
      (*(void (**)(id *, uint64_t))(v23 + 96))(v32, v22);

      goto LABEL_3;
    }
    if (v34 == enum case for RDUserNotificationType.assignmentNotification(_:)
      || v34 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      (*(void (**)(id *, uint64_t))(v23 + 96))(v32, v22);
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    if (v34 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
LABEL_2:
      (*(void (**)(id *, uint64_t))(v23 + 8))(v32, v22);
LABEL_3:
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_100850AC0);
      ((void (*)(char *, uint64_t, uint64_t))v33)(v28, a2, v22);
      v36 = v135;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        v135 = (_QWORD *)swift_slowAlloc(8, -1);
        v136 = (char *)swift_slowAlloc(32, -1);
        v140[0] = (uint64_t)v136;
        *(_DWORD *)v39 = 136315394;
        ((void (*)(NSObject *, char *, uint64_t))v33)(v25, v28, v22);
        v40 = String.init<A>(describing:)(v25, v22);
        v139 = sub_10001A820(v40, v41, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
        v42 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v23 + 8))(v28, v22, v42);
        *(_WORD *)(v39 + 12) = 2112;
        v139 = (uint64_t)v36;
        v43 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
        v44 = v135;
        *v135 = v36;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDTodayNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v39, 0x16u);
        v45 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v44, 1, v45);
        swift_slowDealloc(v44, -1, -1);
        v46 = v136;
        swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);

      }
      goto LABEL_17;
    }
    if (v34 == enum case for RDUserNotificationType.todayNotification(_:))
    {
      if (qword_100837940 != -1)
        swift_once(&qword_100837940, sub_1005A6874);
      v103 = type metadata accessor for Logger(0);
      sub_10001AAA8(v103, (uint64_t)qword_100850AC0);
      v23 = v129;
      v33 = v130;
      v8 = v124;
      (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, __n128)))(v129 + 16))(v124, v134, v130);
      v17 = v135;
      v25 = Logger.logObject.getter(v17);
      v104 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v104))
      {
        v105 = swift_slowAlloc(22, -1);
        v106 = swift_slowAlloc(64, -1);
        v140[0] = v106;
        *(_DWORD *)v105 = 136446466;
        v107 = objc_msgSend(v17, "actionIdentifier");
        v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
        v110 = v109;

        v139 = sub_10001A820(v108, v110, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);

        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 12) = 2082;
        v111 = v124;
        v113 = RDUserNotificationAction.rawValue.getter(v112);
        v139 = sub_10001A820(v113, v114, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
        v115 = swift_bridgeObjectRelease();
        (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, __n128), __n128))(v23 + 8))(v111, v130, v115);
        _os_log_impl((void *)&_mh_execute_header, v25, v104, "TodayNotification: Processing notification response {type: .todayNotification, actionIdentifier: %{public}s, action: %{public}s}", (uint8_t *)v105, 0x16u);
        swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v105, -1, -1);
LABEL_35:

        v116 = (uint64_t)v126;
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v133 + 56))(v126, 1, 1, v132);
        v117 = v131;
        swift_retain();
        sub_1005B1ECC(v116, (void (*)(void))sub_1005B49BC, v117, sub_1005B1E00);
        swift_release(v117);
        sub_10000882C(v116, &qword_100850D20);
        goto LABEL_17;
      }
    }
    else
    {
      if (v34 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
        || v34 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        goto LABEL_3;
      }
      _diagnoseUnexpectedEnumCase<A>(type:)(v22, v22);
      __break(1u);
    }

    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, __n128)))(v23 + 8))(v8, v33);
    goto LABEL_35;
  }
  (*(void (**)(id *, uint64_t))(v23 + 96))(v32, v22);
  v48 = v132;
  v47 = v133;
  v49 = v136;
  v122 = *(void (**)(char *, id *, char *))(v133 + 32);
  v122(v136, v32, v132);
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v50 = type metadata accessor for Logger(0);
  sub_10001AAA8(v50, (uint64_t)qword_100850AC0);
  v51 = *(void (**)(char *, char *, char *))(v47 + 16);
  v51(v11, v49, v48);
  v53 = v129;
  v52 = v130;
  v54 = v127;
  v124 = *(char **)(v129 + 16);
  ((void (*)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, __n128)))v124)(v127, v134, v130);
  v121 = v135;
  v55 = Logger.logObject.getter(v121);
  v56 = static os_log_type_t.default.getter(v55);
  v120 = v56;
  v57 = os_log_type_enabled(v55, v56);
  v123 = v51;
  if (v57)
  {
    v58 = swift_slowAlloc(32, -1);
    v119 = swift_slowAlloc(96, -1);
    v140[0] = v119;
    *(_DWORD *)v58 = 136446722;
    v118 = v55;
    v59 = v128;
    v51(v128, v11, v48);
    v60 = String.init<A>(describing:)(v59, v48);
    v139 = sub_10001A820(v60, v61, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
    v62 = swift_bridgeObjectRelease();
    v135 = *(_QWORD **)(v47 + 8);
    ((void (*)(char *, char *, __n128))v135)(v11, v132, v62);
    *(_WORD *)(v58 + 12) = 2082;
    v63 = v121;
    v64 = objc_msgSend(v121, "actionIdentifier");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v68 = v65;
    v53 = v129;
    v52 = v130;
    v139 = sub_10001A820(v68, v67, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);

    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 22) = 2082;
    v69 = v127;
    v71 = RDUserNotificationAction.rawValue.getter(v70);
    v139 = sub_10001A820(v71, v72, v140);
    v51 = v123;
    v73 = v132;
    v47 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140);
    v74 = swift_bridgeObjectRelease();
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, __n128), __n128))(v53 + 8))(v69, v52, v74);
    v75 = v118;
    _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v120, "TodayNotification: Processing notification response {type: .todayNotificationForSingleReminder, notificationIdentifier: %{public}s, actionIdentifier: %{public}s, action: %{public}s}", (uint8_t *)v58, 0x20u);
    v76 = v119;
    swift_arrayDestroy(v119, 3, (char *)&type metadata for Any + 8);
    v77 = v76;
    v78 = v134;
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v58, -1, -1);

  }
  else
  {
    v79 = v11;
    v73 = v48;
    v135 = *(_QWORD **)(v47 + 8);
    ((void (*)(char *, char *))v135)(v79, v48);
    v80 = v121;

    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, __n128)))(v53 + 8))(v54, v52);
    v78 = v134;
  }
  v81 = (id *)v128;
  v51(v128, v136, v73);
  v82 = v125;
  ((void (*)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, __n128)))v124)(v125, v78, v52);
  v83 = *(unsigned __int8 *)(v47 + 80);
  v84 = (v83 + 24) & ~v83;
  v85 = *(unsigned __int8 *)(v53 + 80);
  v86 = (uint64_t)&v8[v85 + v84];
  v87 = v53;
  v88 = v52;
  v89 = v86 & ~v85;
  v132 = (char *)v17 + v89;
  v129 = v83 | v85 | 7;
  v90 = swift_allocObject(&unk_1007FBF60, (char *)v17 + v89, v129);
  *(_QWORD *)(v90 + 16) = v131;
  v91 = (void (*)(uint64_t, char *, char *))v122;
  v122((char *)(v90 + v84), v81, v73);
  v127 = *(char **)(v87 + 32);
  ((void (*)(uint64_t, char *, void (*)(char *, uint64_t, uint64_t, __n128)))v127)(v90 + v89, v82, v88);
  v123((char *)v81, v136, v73);
  ((void (*)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, __n128)))v124)(v82, v78, v88);
  v92 = swift_allocObject(&unk_1007FBF88, v132, v129);
  v93 = v131;
  *(_QWORD *)(v92 + 16) = v131;
  v94 = v92 + v84;
  v95 = v73;
  v91(v94, (char *)v81, v73);
  ((void (*)(uint64_t, char *, void (*)(char *, uint64_t, uint64_t, __n128)))v127)(v92 + v89, v82, v88);
  v96 = (uint64_t)v126;
  (*(void (**)(char *, uint64_t, uint64_t, char *))(v133 + 56))(v126, 1, 1, v95);
  swift_retain_n(v93);
  sub_1005B1ECC(v96, (void (*)(void))sub_1005B4874, v90, (void (*)(void))sub_1005B4940);
  swift_release(v90);
  swift_release(v92);
  sub_10000882C(v96, &qword_100850D20);
  ((void (*)(char *, char *))v135)(v136, v95);
LABEL_17:
  if (qword_100837940 != -1)
    swift_once(&qword_100837940, sub_1005A6874);
  v97 = type metadata accessor for Logger(0);
  v98 = sub_10001AAA8(v97, (uint64_t)qword_100850AC0);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.default.getter(v99);
  if (os_log_type_enabled(v99, v100))
  {
    v101 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v101 = 0;
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "RDTodayNotificationEngine: Completing action handler by calling completionHandler now.", v101, 2u);
    swift_slowDealloc(v101, -1, -1);
  }

  return v138();
}

uint64_t sub_1005B4874()
{
  return sub_1005B494C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1005B2338);
}

uint64_t sub_1005B4884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for REMNotificationIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for RDUserNotificationAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1005B4940()
{
  return sub_1005B494C((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1005B2A5C);
}

uint64_t sub_1005B494C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for REMNotificationIdentifier(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RDUserNotificationAction(0) - 8) + 80);
  return sub_1005B32B4(*(_QWORD *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_1005B49BC()
{
  uint64_t v0;

  return sub_1005B1CA4(v0);
}

uint64_t sub_1005B49C8(uint64_t a1)
{
  return sub_1005B4DB0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for RDUserNotificationAction, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1005B3434);
}

uint64_t sub_1005B49E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for RDUserNotificationAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005B4A54()
{
  return sub_1005B4F9C(56);
}

void sub_1005B4A5C(uint64_t a1)
{
  uint64_t v1;

  sub_1005B18BC(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1005B4A70@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005B0944(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1005B4A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  v1 = type metadata accessor for RDUserNotificationCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v12 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v9, v6, v12);
  return swift_deallocObject(v0, v10, v11);
}

void sub_1005B4B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for RDUserNotificationCategory(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_1005AE8EC(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), v1 + ((v5 + v6 + 16) & ~v6));
}

uint64_t sub_1005B4BDC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1005AC628(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1005B4BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for RDUserNotificationCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v7, v3 | 7);
}

void sub_1005B4C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for RDUserNotificationCategory(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005ACDF4(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(uint64_t, __n128))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1005B4D04()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005B4D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005B4D9C(uint64_t a1)
{
  return sub_1005B4DB0(a1, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1005AD760);
}

uint64_t sub_1005B4DB0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, *(_QWORD *)(v3 + 16), v3 + ((v5 + 24) & ~v5));
}

uint64_t sub_1005B4E00()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1005B4E24()
{
  uint64_t v0;

  sub_1005A7984(v0);
}

void sub_1005B4E2C(uint64_t a1)
{
  uint64_t v1;

  sub_1005A7CCC(a1, v1);
}

void sub_1005B4E34()
{
  uint64_t v0;

  sub_1005A8458(v0);
}

void sub_1005B4E3C(char a1)
{
  uint64_t v1;

  sub_1005A88D8(a1, v1);
}

void sub_1005B4E44(uint64_t a1)
{
  uint64_t v1;

  sub_1005A8E58(a1, v1);
}

void sub_1005B4E4C()
{
  uint64_t v0;

  sub_1005A92B0(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.start}");
}

uint64_t sub_1005B4E78()
{
  uint64_t v0;

  return sub_1005A9130(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1005B4E88()
{
  uint64_t v0;

  return sub_1005A8D28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1005B4E90()
{
  uint64_t v0;

  sub_1005A92B0(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}");
}

uint64_t sub_1005B4EB8()
{
  uint64_t v0;

  return sub_1005A879C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1005B4EC4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1005B4EF0()
{
  uint64_t v0;

  sub_1005A92B0(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.badgeEventStream}");
}

uint64_t sub_1005B4F10()
{
  return sub_1005B4F9C(40);
}

uint64_t sub_1005B4F20()
{
  uint64_t v0;

  return sub_1005A8238(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1005B4F28()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1005B4F4C()
{
  uint64_t v0;

  sub_1005A92B0(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}");
}

uint64_t sub_1005B4F6C()
{
  return sub_1005B4F9C(40);
}

void sub_1005B4F74()
{
  uint64_t v0;

  sub_1005A92B0(*(_QWORD *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.todayEngine.bannerTimeEventStream}");
}

uint64_t sub_1005B4F94()
{
  return sub_1005B4F9C(40);
}

uint64_t sub_1005B4F9C(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  if (v1[3])
    swift_release(v1[4]);
  return swift_deallocObject(v1, a1, 7);
}

void sub_1005B4FDC()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 24);
  sub_1005AEFA4();
  if (v1)
    v1();
}

uint64_t sub_1005B5060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100850D90);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100850D90);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1005B50F0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "housekeepingingActivityScheduler");
  qword_100850DA8 = (uint64_t)result;
  return result;
}

uint64_t sub_1005B5128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  __n128 v53;
  void (*v54)(char *, uint64_t);
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[4];
  _QWORD v71[2];
  uint64_t v72;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v62 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v58 - v5;
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_signpost_type_t.begin.getter(v10);
  if (qword_100837950 != -1)
    swift_once(&qword_100837950, sub_1005B50F0);
  v12 = qword_100850DA8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v11, &_mh_execute_header, v12, "RDSuggestConversionToGroceryListActivity.execute", 48, 2, v9);
  v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  v14 = *(_QWORD *)(v1 + 16);
  v15 = *(_QWORD *)(v1 + 24);
  v16 = qword_100837948;
  swift_bridgeObjectRetain(v15);
  if (v16 != -1)
    swift_once(&qword_100837948, sub_1005B5060);
  v64 = v9;
  v66 = v14;
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_100850D90);
  swift_bridgeObjectRetain_n(v15, 2);
  v61 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v63 = v13;
    v22 = swift_slowAlloc(12, -1);
    v60 = v2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v59 = v6;
    v25 = v24;
    v72 = v24;
    *(_DWORD *)v23 = 136446210;
    swift_bridgeObjectRetain(v15);
    v26 = v66;
    v69 = sub_10001A820(v66, v15, &v72);
    v13 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s] start execute()", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v27 = v25;
    v6 = v59;
    swift_slowDealloc(v27, -1, -1);
    v28 = v23;
    v2 = v60;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
    v26 = v66;
  }
  v30 = v68;
  v31 = Date.init()(v29);
  v70[0] = 0xD000000000000028;
  v70[1] = 0x80000001006C3D70;
  v70[3] = 0;
  v71[0] = 0;
  v70[2] = 0;
  *(_QWORD *)((char *)v71 + 6) = 0;
  __chkstk_darwin(v31);
  *(&v58 - 4) = v1;
  *(&v58 - 3) = v26;
  *(&v58 - 2) = v15;
  v32 = v65;
  sub_10035288C((uint64_t)v70, (uint64_t)sub_1005B789C, (uint64_t)(&v58 - 6));
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v30, v2);
    v33 = swift_bridgeObjectRelease();
    v34 = static os_signpost_type_t.end.getter(v33);
    v35 = qword_100850DA8;
    v36 = v64;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v34, &_mh_execute_header, v35, "RDSuggestConversionToGroceryListActivity.execute", 48, 2, v36);
    return ((uint64_t (*)(char *, uint64_t))v13)(v36, v6);
  }
  else
  {
    v63 = v13;
    v38 = v67;
    v39 = v62;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v62, v30, v2);
    swift_bridgeObjectRetain(v15);
    v41 = Logger.logObject.getter(v40);
    v42 = v30;
    v43 = static os_log_type_t.default.getter(v41);
    v65 = v41;
    v44 = os_log_type_enabled(v41, v43);
    v45 = v64;
    if (v44)
    {
      v46 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(32, -1);
      v72 = v61;
      *(_DWORD *)v46 = 136446466;
      swift_bridgeObjectRetain(v15);
      v69 = sub_10001A820(v66, v15, &v72);
      v60 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
      swift_bridgeObjectRelease_n(v15, 3);
      *(_WORD *)(v46 + 12) = 2048;
      v69 = Date.rem_elapsedInMilliseconds.getter(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
      v48 = *(void (**)(char *, uint64_t))(v67 + 8);
      v49 = v39;
      v50 = v60;
      v48(v49, v60);
      v51 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, v43, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v46, 0x16u);
      v52 = v61;
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v48(v68, v50);
    }
    else
    {

      v54 = *(void (**)(char *, uint64_t))(v38 + 8);
      v54(v39, v2);
      v55 = swift_bridgeObjectRelease_n(v15, 2);
      v53.n128_f64[0] = ((double (*)(char *, uint64_t, __n128))v54)(v42, v2, v55);
    }
    v56 = static os_signpost_type_t.end.getter(v53);
    v57 = qword_100850DA8;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v56, &_mh_execute_header, v57, "RDSuggestConversionToGroceryListActivity.execute", 48, 2, v45);
    return ((uint64_t (*)(char *, uint64_t))v63)(v45, v6);
  }
}

void sub_1005B571C(void *a1, NSObject *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  void *v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;

  v9 = objc_autoreleasePoolPush();
  sub_1005B5824(a2, (uint64_t)a1, a3, a4);
  if (v4)
  {
    objc_autoreleasePoolPop(v9);
  }
  else
  {
    objc_autoreleasePoolPop(v9);
    if ((objc_msgSend(a1, "hasChanges") & 1) != 0)
    {
      v15 = 0;
      v10 = objc_msgSend(a1, "save:", &v15);
      v11 = v15;
      if (v10)
      {
        v12 = v15;
      }
      else
      {
        v13 = v15;
        _convertNSErrorToError(_:)(v11);

        swift_willThrow(v14);
      }
    }
  }
}

void sub_1005B5824(NSObject *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *v19;
  BOOL v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  void *ObjCClassFromMetadata;
  Class isa;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  char **v58;
  char **v59;
  uint64_t v60;
  id v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  unint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  unint64_t v89;
  NSObject *v90;
  NSObject *v91;
  char *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_t v97;
  unint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int8 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;

  v5 = v4;
  v95 = a3;
  v88 = a1;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v11 - 8);
  v100 = v11;
  __chkstk_darwin(v11);
  v13 = ((char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = a2;
  v14 = sub_1005B7BF8();
  if ((unint64_t)v14 >> 62)
    goto LABEL_77;
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v16)
  {
LABEL_3:
    v17 = 0;
    v18 = v14 & 0xC000000000000001;
    v83 = v14 & 0xFFFFFFFFFFFFFF8;
    v82 = v14 + 32;
    *(_QWORD *)&v15 = 136446466;
    v93 = v15;
    v92 = (char *)&type metadata for Any + 8;
    v105 = 0x80000001006F40C0;
    *(_QWORD *)&v15 = 136446210;
    v84 = v15;
    v106 = a4;
    v102 = v10;
    v87 = v14;
    v91 = v13;
    v86 = v16;
    v85 = v14 & 0xC000000000000001;
    while (1)
    {
      if (v18)
      {
        v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      }
      else
      {
        if (v17 >= *(_QWORD *)(v83 + 16))
          goto LABEL_83;
        v19 = *(id *)(v82 + 8 * v17);
      }
      v104 = v19;
      v20 = __OFADD__(v17, 1);
      v21 = v17 + 1;
      if (v20)
        goto LABEL_76;
      v22 = -[NSObject remObjectID](v104, "remObjectID");
      if (!v22)
        break;
      v89 = v21;
      v90 = v22;
      v13 = v88;
      v23 = (uint64_t)sub_1005B6438(v103, v22);
      if (v5)
      {

        goto LABEL_81;
      }
      v24 = v23;
      v112 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0)
          v71 = v23;
        else
          v71 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v23);
        v25 = _CocoaArrayWrapper.endIndex.getter(v71);
        swift_bridgeObjectRelease();
        if (!v25)
          goto LABEL_62;
LABEL_14:
        if (v25 < 1)
        {
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        v101 = 0;
        v26 = 0;
        v27 = v24 & 0xC000000000000001;
        v98 = v24 & 0xC000000000000001;
        while (2)
        {
          if (v27)
            v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
          else
            v28 = *(id *)(v24 + 8 * v26 + 32);
          v29 = v28;
          *(_QWORD *)&v108 = 0xD000000000000024;
          *((_QWORD *)&v108 + 1) = v105;
          v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v108, &type metadata for String);
          v13 = objc_msgSend(v29, "__swift_objectForKeyedSubscript:", v30);
          swift_unknownObjectRelease(v30);
          if (v13)
          {
            _bridgeAnyObjectToAny(_:)(&v108, v13);
            swift_unknownObjectRelease(v13);
          }
          else
          {
            v108 = 0u;
            v109 = 0u;
          }
          sub_10001A5E8((uint64_t)&v108, (uint64_t)&v110);
          if (!v111)
          {

            sub_10000882C((uint64_t)&v110, (uint64_t *)&unk_10083D5B0);
            goto LABEL_17;
          }
          if ((swift_dynamicCast(&v107, &v110, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
          {

            goto LABEL_17;
          }
          v31 = v107;
          *(_QWORD *)&v108 = 0x696669746E656469;
          *((_QWORD *)&v108 + 1) = 0xEA00000000007265;
          v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v108, &type metadata for String);
          v13 = objc_msgSend(v29, "__swift_objectForKeyedSubscript:", v32);
          swift_unknownObjectRelease(v32);
          if (v13)
          {
            _bridgeAnyObjectToAny(_:)(&v108, v13);
            swift_unknownObjectRelease(v13);
          }
          else
          {
            v108 = 0u;
            v109 = 0u;
          }
          sub_10001A5E8((uint64_t)&v108, (uint64_t)&v110);
          if (v111)
          {
            v13 = v100;
            v33 = swift_dynamicCast(v10, &v110, (char *)&type metadata for Any + 8, v100, 6);
            v34 = v99;
            (*(void (**)(char *, _QWORD, uint64_t, NSObject *))(v99 + 56))(v10, v33 ^ 1u, 1, v13);
            if ((*(unsigned int (**)(char *, uint64_t, NSObject *))(v34 + 48))(v10, 1, v13) != 1)
            {
              v35 = v91;
              (*(void (**)(NSObject *, char *, NSObject *))(v99 + 32))(v91, v10, v100);
              if (v31)
              {
                if (qword_100837948 != -1)
                  swift_once(&qword_100837948, sub_1005B5060);
                v36 = type metadata accessor for Logger(0);
                sub_10001AAA8(v36, (uint64_t)qword_100850D90);
                v37 = v106;
                swift_bridgeObjectRetain_n(v106, 2);
                v13 = Logger.logObject.getter(v38);
                v39 = static os_log_type_t.default.getter(v13);
                if (os_log_type_enabled(v13, v39))
                {
                  v40 = swift_slowAlloc(12, -1);
                  v41 = swift_slowAlloc(32, -1);
                  v97 = v13;
                  v13 = v41;
                  v110 = v41;
                  *(_DWORD *)v40 = v84;
                  swift_bridgeObjectRetain(v37);
                  *(_QWORD *)(v40 + 4) = sub_10001A820(v95, v37, &v110);
                  swift_bridgeObjectRelease_n(v37, 3);
                  v42 = v97;
                  _os_log_impl((void *)&_mh_execute_header, v97, v39, "[%{public}s] found existing an list that is already suggested to be converted into a grocery list.", (uint8_t *)v40, 0xCu);
                  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v13, -1, -1);
                  v43 = v40;
                  v10 = v102;
                  swift_slowDealloc(v43, -1, -1);

                }
                else
                {
                  swift_bridgeObjectRelease_n(v37, 2);

                }
                (*(void (**)(NSObject *, NSObject *))(v99 + 8))(v91, v100);
                v27 = v98;
              }
              else
              {
                v44 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
                ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v44);
                isa = UUID._bridgeToObjectiveC()().super.isa;
                v47 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

                v13 = &v112;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
                v50 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v49 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
                v27 = v98;
                if (v50 >= v49 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1);
                v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v47);
                specialized Array._endMutation()(v51);

                (*(void (**)(NSObject *, NSObject *))(v99 + 8))(v35, v100);
                v10 = v102;
              }
LABEL_17:
              if (v25 == ++v26)
              {
                swift_bridgeObjectRelease();
                v52 = v112;
                v5 = v101;
                a4 = v106;
                if (!(v112 >> 62))
                  goto LABEL_45;
LABEL_63:
                if (v52 < 0)
                  v72 = v52;
                else
                  v72 = v52 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v52);
                v53 = _CocoaArrayWrapper.endIndex.getter(v72);
                swift_bridgeObjectRelease();
                if (!v53)
                  goto LABEL_4;
LABEL_46:
                v97 = (os_log_t)type metadata accessor for RDGroceryOperationQueue();
                v98 = v52 & 0xC000000000000001;
                v54 = 4;
                v94 = v52;
                v96 = v53;
                while (1)
                {
                  v13 = (v54 - 4);
                  v55 = v98
                      ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54 - 4, v52)
                      : *(id *)(v52 + 8 * v54);
                  v56 = v55;
                  v14 = v54 - 3;
                  if (__OFADD__(v13, 1))
                    break;
                  v57 = v55;
                  v58 = sub_10053F65C(v56, 0, 1, v104, v103);
                  if (v5)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    v73 = v90;
                    goto LABEL_69;
                  }
                  v59 = v58;

                  if (qword_100837948 != -1)
                    swift_once(&qword_100837948, sub_1005B5060);
                  v60 = type metadata accessor for Logger(0);
                  sub_10001AAA8(v60, (uint64_t)qword_100850D90);
                  swift_bridgeObjectRetain_n(a4, 2);
                  v61 = v57;
                  v13 = Logger.logObject.getter(v61);
                  v62 = static os_log_type_t.default.getter(v13);
                  if (os_log_type_enabled(v13, v62))
                  {
                    v63 = swift_slowAlloc(22, -1);
                    v101 = 0;
                    v64 = v63;
                    v65 = (_QWORD *)swift_slowAlloc(8, -1);
                    v66 = swift_slowAlloc(32, -1);
                    v110 = v66;
                    *(_DWORD *)v64 = v93;
                    swift_bridgeObjectRetain(v106);
                    *(_QWORD *)(v64 + 4) = sub_10001A820(v95, v106, &v110);
                    swift_bridgeObjectRelease_n(v106, 3);
                    *(_WORD *)(v64 + 12) = 2114;
                    *(_QWORD *)(v64 + 14) = v61;
                    *v65 = v56;

                    _os_log_impl((void *)&_mh_execute_header, v13, v62, "[%{public}s] inserted grocery operation queue item for determine whether to suggest to convert this list into a grocery list {listObjectID: %{public}@", (uint8_t *)v64, 0x16u);
                    v67 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v65, 1, v67);
                    v68 = v65;
                    a4 = v106;
                    swift_slowDealloc(v68, -1, -1);
                    swift_arrayDestroy(v66, 1, v92);
                    v69 = v66;
                    v52 = v94;
                    swift_slowDealloc(v69, -1, -1);
                    v70 = v64;
                    v5 = v101;
                    swift_slowDealloc(v70, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(a4, 2);
                  }
                  ++v54;
                  v10 = v102;
                  if (v14 == v96)
                    goto LABEL_4;
                }
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                if (v14 < 0)
                  v81 = v14;
                else
                  v81 = v14 & 0xFFFFFFFFFFFFFF8;
                v16 = _CocoaArrayWrapper.endIndex.getter(v81);
                if (!v16)
                  goto LABEL_81;
                goto LABEL_3;
              }
              continue;
            }
          }
          else
          {
            sub_10000882C((uint64_t)&v110, (uint64_t *)&unk_10083D5B0);
            (*(void (**)(char *, uint64_t, uint64_t, NSObject *))(v99 + 56))(v10, 1, 1, v100);
          }
          break;
        }

        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
        v27 = v98;
        goto LABEL_17;
      }
      v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v25)
        goto LABEL_14;
LABEL_62:
      swift_bridgeObjectRelease();
      v52 = (uint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
        goto LABEL_63;
LABEL_45:
      v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v53)
        goto LABEL_46;
LABEL_4:

      swift_bridgeObjectRelease();
      v17 = v89;
      v14 = v87;
      v18 = v85;
      if (v89 == v86)
        goto LABEL_81;
    }
    swift_bridgeObjectRelease();
    if (qword_100837948 == -1)
      goto LABEL_71;
LABEL_84:
    swift_once(&qword_100837948, sub_1005B5060);
LABEL_71:
    v74 = type metadata accessor for Logger(0);
    sub_10001AAA8(v74, (uint64_t)qword_100850D90);
    swift_bridgeObjectRetain_n(a4, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = a4;
    v78 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v110 = v80;
      *(_DWORD *)v79 = v84;
      swift_bridgeObjectRetain(v77);
      *(_QWORD *)&v108 = sub_10001A820(v95, v77, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8);
      swift_bridgeObjectRelease_n(v77, 3);
      _os_log_impl((void *)&_mh_execute_header, v76, v78, "[%{public}s] found no accounts that support grocery lists. Not suggesting grocery list conversion.", v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v77, 2);
      v73 = v104;
LABEL_69:

    }
  }
  else
  {
LABEL_81:
    swift_bridgeObjectRelease();
  }
}

void *sub_1005B6438(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *ObjCClassFromMetadata;
  id v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t inited;
  Class v39;
  uint64_t v40;
  _QWORD v42[4];
  _BYTE v43[48];
  uint64_t v44;

  v42[1] = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = a2;
  swift_storeEnumTagMultiPayload(v9, v10, 2);
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v11);
  v13 = a2;
  v14 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithEntityName:", v16, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v17, "setResultType:", 2);
  sub_10000A3AC();
  v19 = v18;
  objc_msgSend(v17, "setPredicate:", v18);

  v20 = objc_msgSend(v13, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v25 = *(void **)(v42[3] + 32);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "storeForAccountIdentifier:", v26);

  if (v27)
  {
    swift_bridgeObjectRelease();
    v28 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v29 = swift_allocObject(v28, 40, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v29 + 32) = v27;
    v44 = v29;
    specialized Array._endMutation()(v29);
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v30 = v27;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v32 = sub_10001A630((uint64_t *)&unk_100839E80);
    v33 = swift_allocObject(v32, 96, 7);
    *(_OWORD *)(v33 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v33 + 32) = 0x696669746E656469;
    *(_QWORD *)(v33 + 40) = 0xEA00000000007265;
    *(_QWORD *)(v33 + 88) = &type metadata for String;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = 0xD000000000000024;
    *(_QWORD *)(v33 + 72) = 0x80000001006F40C0;
    v34 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setPropertiesToFetch:", v34, swift_bridgeObjectRelease().n128_f64[0]);

    v35 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v36 = (void *)NSManagedObjectContext.fetch<A>(_:)(v17, v35);
    sub_1000EC49C((uint64_t)v9);

  }
  else
  {
    v36 = (void *)objc_opt_self(REMError);
    v37 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v37, v43);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = v22;
    *(_QWORD *)(inited + 40) = v24;
    sub_10011EE40(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v39 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "accountStoreMissingError:", v39, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v40);
    sub_1000EC49C((uint64_t)v9);
  }
  return v36;
}

uint64_t sub_1005B68A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_1005B68D8()
{
  return sub_1005B5128();
}

uint64_t sub_1005B68F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - v4;
  v6 = (_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults + 24);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults + 32);
  sub_10000A388((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults), v7);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8) & 1) != 0)
  {
    if (qword_100837948 != -1)
      swift_once(&qword_100837948, sub_1005B5060);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_100850D90);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_12;
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    v14 = "RDSuggestConversionToGroceryListActivity: not executing because the user already dismissed a grocery tip.";
    goto LABEL_11;
  }
  v15 = v6[3];
  v16 = v6[4];
  sub_10000A388(v6, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  if ((v17 & 1) == 0)
  {
    v22 = static Locale.current.getter(v17);
    v23 = Locale.identifier.getter(v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    type metadata accessor for REMGroceryDummyModel(0);
    v20 = static REMGroceryDummyModel.isSupported(localeIdentifier:)(v23, v25);
    swift_bridgeObjectRelease();
    return v20 & 1;
  }
  if (qword_100837948 != -1)
    swift_once(&qword_100837948, sub_1005B5060);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_100850D90);
  v11 = Logger.logObject.getter(v19);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    v14 = "RDSuggestConversionToGroceryListActivity: not executing because the user already created a grocery list.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }
LABEL_12:

  v20 = 0;
  return v20 & 1;
}

unint64_t sub_1005B6CF0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

uint64_t sub_1005B6E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD v26[5];

  sub_100018618(a1, (uint64_t)v26);
  v5 = sub_10001A630((uint64_t *)&unk_10083E310);
  v6 = type metadata accessor for RDSuggestConversionToGroceryListActivity();
  if (swift_dynamicCast(&v25, v26, v5, v6, 0))
  {

    v7 = v2 + 16;
    swift_beginAccess(v7, &v20, 0, 0);
    sub_100018618(v7, (uint64_t)v22);
    v8 = v23;
    v9 = v24;
    sub_10000A388(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
  else
  {
    if (qword_100837948 != -1)
      swift_once(&qword_100837948, sub_1005B5060);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100850D90);
    v12 = sub_100018618(a1, (uint64_t)v22);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136446210;
      sub_100018618((uint64_t)v22, (uint64_t)&v20);
      v17 = String.init<A>(describing:)(&v20, v5);
      v20 = sub_10001A820(v17, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDSuggestConversionToGroceryListExecutionDateStorage.lastExecutedDate(for:) must work with RDSuggestConversionToGroceryListActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v22);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    v19 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

uint64_t sub_1005B7078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018618(a1, (uint64_t)v27);
  v8 = sub_10001A630((uint64_t *)&unk_10083E310);
  v9 = type metadata accessor for RDSuggestConversionToGroceryListActivity();
  if (swift_dynamicCast(&v23, v27, v8, v9, 0))
  {

    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    swift_beginAccess(v2 + 16, v26, 33, 0);
    v12 = *(_QWORD *)(v2 + 40);
    v13 = *(_QWORD *)(v2 + 48);
    sub_10001BA38(v2 + 16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, v12, v13);
    swift_endAccess(v26);
  }
  else
  {
    if (qword_100837948 != -1)
      swift_once(&qword_100837948, sub_1005B5060);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_100850D90);
    v15 = sub_100018618(a1, (uint64_t)v26);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v18 = 136446210;
      sub_100018618((uint64_t)v26, (uint64_t)&v23);
      v20 = String.init<A>(describing:)(&v23, v8);
      v23 = (id)sub_10001A820(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDSuggestConversionToGroceryListExecutionDateStorage.updateLastExecutedDate(for:) must work with RDSuggestConversionToGroceryListActivity only {executable: %{public}s}", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
    }

  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
}

uint64_t sub_1005B7328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005B6E00(a1, a2);
}

uint64_t sub_1005B7348(uint64_t a1, uint64_t a2)
{
  return sub_1005B7078(a1, a2);
}

uint64_t sub_1005B7450@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable);
  a1[3] = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  a1[4] = &off_1007FC580;
  a1[5] = &off_1007FC590;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1005B74A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 32);
  sub_10000A388(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v2);
}

uint64_t sub_1005B74E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100008868(v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10083ECE0);
}

uint64_t sub_1005B7514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100008868(v3, a1, (uint64_t *)&unk_10083E300);
}

uint64_t sub_1005B756C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void **v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t, uint64_t);
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v5 = *v2;
  v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations;
  v7 = v6[3];
  v8 = v6[4];
  sub_10000A388(v6, v7);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  v11 = v5;
  v12 = v10(v7, v9);
  v17 = a1;
  v18 = &off_1007FC5D0;
  *(_QWORD *)&v16 = v11;
  v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v14 = swift_allocObject(v13, 64, 7);
  result = sub_10001BCA8(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1007F54C8;
  *a2 = v14;
  return result;
}

uint64_t sub_1005B7640()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1005B767C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100018618(*v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executionDateStorage, a1);
}

uint64_t sub_1005B76A4@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "suggestConversionToGroceryListLastExecutionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1005B7728(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Class v7;
  Class isa;
  Class v9;

  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = 0;
  if (v6 != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    v7 = isa;
  }
  v9 = v7;
  objc_msgSend(v3, "setSuggestConversionToGroceryListLastExecutionDate:");

}

id sub_1005B77C8()
{
  id *v0;

  return objc_msgSend(*v0, "hasCreatedGroceryList");
}

id sub_1005B77E8()
{
  id *v0;

  return objc_msgSend(*v0, "groceryTipDismissed");
}

id sub_1005B7808()
{
  id *v0;

  return objc_msgSend(*v0, "suggestConversionToGroceryListDefaultThrottleInterval");
}

id sub_1005B7818()
{
  id *v0;

  return objc_msgSend(*v0, "suggestConversionToGroceryListRateReduceFactor");
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity()
{
  return objc_opt_self(_TtC7remindd40RDSuggestConversionToGroceryListActivity);
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable()
{
  return objc_opt_self(_TtCC7remindd40RDSuggestConversionToGroceryListActivityP33_4F4A50C54F9157D599216622FAC8547E50RDSuggestConversionToGroceryListActivityExecutable);
}

uint64_t type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListExecutionDateStorage()
{
  return objc_opt_self(_TtCC7remindd40RDSuggestConversionToGroceryListActivityP33_4F4A50C54F9157D599216622FAC8547E52RDSuggestConversionToGroceryListExecutionDateStorage);
}

void sub_1005B789C(void *a1)
{
  uint64_t v1;

  sub_1005B571C(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1005B78B8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[48];

  sub_10034B07C(3, 0, 7);
  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v2, v13);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006C3EE8);
  KeyPath = swift_getKeyPath(&unk_1006C3F18);
  *(_QWORD *)(inited + 40) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  v5 = (void *)sub_100357FC0(inited, 0, 0, (uint64_t)v1);
  swift_bridgeObjectRelease();
  v6 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v7 = swift_getKeyPath(&unk_1006C3F18);
  v8 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(v7, 1);
  *(_QWORD *)(v6 + 32) = v8;
  specialized Array._endMutation()(v8);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v10 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v11 = NSManagedObjectContext.fetch<A>(_:)(v5, v10);

  return v11;
}

uint64_t sub_1005B7BF8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1005B78B8();
  v1 = result;
  if (!((unint64_t)result >> 62))
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_29;
    goto LABEL_18;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v2 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_32;
  }
  for (i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
    else
      v6 = *(id *)(v1 + 8 * i + 32);
    v7 = v6;
    v8 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v6, "type"));
    v9 = objc_msgSend(v8, "supportsGroceriesList");

    if (v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v4 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
      v5 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v7);
      specialized ContiguousArray._endMutation()(v5);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_29;
LABEL_18:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v11 = _swiftEmptyArrayStorage[2];
    result = swift_retain();
    if (!v11)
    {
LABEL_30:
      swift_release(_swiftEmptyArrayStorage);
      swift_release(_swiftEmptyArrayStorage);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_20;
  }
LABEL_29:
  v18 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v18);
  v11 = result;
  if (!result)
    goto LABEL_30;
LABEL_20:
  if (v11 >= 1)
  {
    for (j = 0; j != v11; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
      else
        v13 = (id)_swiftEmptyArrayStorage[j + 4];
      v14 = v13;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v16 >= v15 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
      v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized Array._endMutation()(v17);
    }
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer()
{
  return &type metadata for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer;
}

unint64_t sub_1005B7E80(uint64_t a1)
{
  unint64_t result;

  result = sub_1005B7EA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005B7EA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100851020;
  if (!qword_100851020)
  {
    v1 = type metadata accessor for REMListPickerDataView.Invocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMListPickerDataView.Invocation, v1);
    atomic_store(result, (unint64_t *)&qword_100851020);
  }
  return result;
}

uint64_t sub_1005B7EEC@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  __n128 v20;
  uint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _BYTE v27[12];
  int v28;

  v28 = a2;
  v5 = type metadata accessor for REMAccountsListDataView.Model.Account(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for REMListPickerDataView.PickerMode(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (void **)&v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  REMListPickerDataView.Invocation.Parameters.pickerMode.getter(v12);
  v15 = (*(uint64_t (**)(void **, uint64_t))(v11 + 88))(v14, v10);
  if ((_DWORD)v15 == enum case for REMListPickerDataView.PickerMode.specificAccount(_:))
  {
    (*(void (**)(void **, uint64_t))(v11 + 96))(v14, v10);
    v16 = *v14;
    v17 = sub_100017004();
    v18 = REMAccountsListDataView.Model.Account.account.getter(v17);
    v19 = objc_msgSend((id)v18, "objectID");

    LOBYTE(v18) = static NSObject.== infix(_:_:)(v16);
    if ((v18 & 1) == 0)
      goto LABEL_8;
LABEL_7:
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v23.n128_f64[0] = REMListPickerDataView.Model.Account.init(account:shouldIncludeCustomSmartLists:)(v9, v28 & 1);
    v24 = type metadata accessor for REMListPickerDataView.Model.Account(0, v23);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a3, 0, 1, v24);
  }
  if ((_DWORD)v15 == enum case for REMListPickerDataView.PickerMode.allAccounts(_:))
    goto LABEL_7;
  if ((_DWORD)v15 != enum case for REMListPickerDataView.PickerMode.cloudKitOnlyAccounts(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
    __break(1u);
    return result;
  }
  v21 = REMAccountsListDataView.Model.Account.account.getter(v15);
  v22 = objc_msgSend((id)v21, "capabilities");

  LOBYTE(v21) = objc_msgSend(v22, "supportsSubtasks");
  if ((v21 & 1) != 0)
    goto LABEL_7;
LABEL_8:
  v26 = type metadata accessor for REMListPickerDataView.Model.Account(0, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a3, 1, 1, v26);
}

char *sub_1005B8134(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t Options;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a2;
  v36 = a5;
  v33 = a3;
  v34 = a4;
  v7 = type metadata accessor for REMAccountsListDataView.Model(0, a6);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Options = type metadata accessor for REMAccountsListDataView.FetchOptions(0, v8);
  v12 = *(_QWORD *)(Options - 8);
  v13 = __chkstk_darwin(Options);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char *)type metadata accessor for REMAccountsListDataView.Invocation.Result(0, v13);
  v17 = *((_QWORD *)v16 - 1);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for REMAccountsListDataView.Invocation(0, v18);
  v22 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21)), "init");
  static REMAccountsListDataView.FetchOptions.accountsOnly.getter();
  v23 = v37;
  sub_1003E658C(a1, v36, v35, (unint64_t)v15, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, Options);

  if (!v23)
  {
    REMAccountsListDataView.Invocation.Result.model.getter();
    v24 = (*(uint64_t (**)(char *, char *))(v17 + 8))(v20, v16);
    v25 = REMAccountsListDataView.Model.accounts.getter(v24);
    v26 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v32);
    v27 = v33;
    v28 = REMListPickerDataView.Invocation.Parameters.shouldIncludeCustomSmartLists.getter(v26);
    __chkstk_darwin(v28);
    *(&v31 - 2) = v27;
    *((_BYTE *)&v31 - 8) = v29 & 1;
    v16 = sub_100350810((void (*)(_QWORD, __n128))sub_1005B8340, (uint64_t)(&v31 - 4), v25);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t sub_1005B8340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005B7EEC(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

uint64_t type metadata accessor for RDManagedObjectIDCache(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100851028, (uint64_t)&nominal type descriptor for RDManagedObjectIDCache);
}

uint64_t sub_1005B8370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, qword_100872298);
}

uint64_t sub_1005B8380()
{
  return type metadata accessor for RDManagedObjectIDCache(0);
}

uint64_t type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008510D8, (uint64_t)&nominal type descriptor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache);
}

uint64_t sub_1005B839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, qword_1008722A8);
}

uint64_t sub_1005B83A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t active;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  __chkstk_darwin(v0);
  v26 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  active = type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(0);
  v29 = (_QWORD *)active;
  v13 = sub_10001A630(&qword_100851208);
  v14 = String.init<A>(reflecting:)(&v29, v13);
  v24 = v15;
  v25 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v16 = static OS_dispatch_queue.global(qos:)(v11);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static DispatchQoS.unspecified.getter(v17);
  v29 = _swiftEmptyArrayStorage;
  v18 = sub_1001BAB10();
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v19, v20, v2, v18);
  v21 = v26;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v26, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v24, v7, v4, v21, v16);
  swift_allocObject(active, *(unsigned int *)(active + 48), *(unsigned __int16 *)(active + 52));
  result = REMCache.init(cacheQueue:countLimit:)(v22, 1);
  qword_100872288 = result;
  return result;
}

uint64_t sub_1005B8604()
{
  return type metadata accessor for RDPrimaryActiveCloudKitAccountManagedObjectIDCache(0);
}

uint64_t sub_1005B860C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  char v10;
  char *v12;
  _BYTE v13[24];
  uint64_t v14;

  v2 = v1;
  ObjectType = swift_getObjectType();
  sub_1000E6B28(a1, (uint64_t)v13);
  if (!v14)
  {
    sub_1000F4294((uint64_t)v13);
    goto LABEL_7;
  }
  if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
  {
LABEL_7:
    v10 = 0;
    return v10 & 1;
  }
  v5 = v12;
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID);
  v7 = *(id *)&v5[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID];
  LOBYTE(v6) = static NSObject.== infix(_:_:)(v6);

  if ((v6 & 1) == 0)
  {

    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID);
  v9 = *(id *)&v5[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID];
  v10 = static NSObject.== infix(_:_:)(v8);

  return v10 & 1;
}

uint64_t sub_1005B8844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID), "uuid"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v7 = UUID.uuidString.getter();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v20 = v7;
  v21 = v9;
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 24415;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  *(_QWORD *)&v11 = swift_bridgeObjectRelease(v9).n128_u64[0];
  v12 = v20;
  v13 = v21;
  v14 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID), "stringRepresentation", v11);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v20 = v12;
  v21 = v13;
  swift_bridgeObjectRetain(v13);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  return v20;
}

uint64_t type metadata accessor for RDPredefinedObjectKey()
{
  return objc_opt_self(_TtC7remindd21RDPredefinedObjectKey);
}

uint64_t type metadata accessor for RDPredefinedManagedObjectIDCache(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_100851160, (uint64_t)&nominal type descriptor for RDPredefinedManagedObjectIDCache);
}

uint64_t sub_1005B8A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, qword_1008722B8);
}

uint64_t sub_1005B8A2C()
{
  return type metadata accessor for RDPredefinedManagedObjectIDCache(0);
}

uint64_t type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_1008511B0, (uint64_t)&nominal type descriptor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache);
}

uint64_t sub_1005B8A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100334F68(a1, a2, a3, qword_1008722C8);
}

void sub_1005B8A54()
{
  uint64_t v0;

  sub_1005B8A70();
  qword_100872290 = v0;
}

void sub_1005B8A70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v35 = (_QWORD *)type metadata accessor for RDPredefinedManagedObjectIDCache(0);
  v13 = sub_10001A630(&qword_100851200);
  v14 = String.init<A>(reflecting:)(&v35, v13);
  v31 = v15;
  v32 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v16 = static OS_dispatch_queue.global(qos:)(v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v17);
  v35 = _swiftEmptyArrayStorage;
  v18 = sub_1001BAB10();
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1001BAB58();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v19, v20, v3, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v32, v31, v8, v5, v2, v16);
  v22 = static REMSmartList.NonCustom.allCases.getter();
  v23 = *(_QWORD *)(v22 + 16);
  v24 = swift_bridgeObjectRelease(v22);
  v25 = static REMManualOrdering.Predefined.allCases.getter(v24);
  v26 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRelease(v25);
  v27 = __OFADD__(v23, v26);
  v28 = v23 + v26;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    v29 = type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    REMCache.init(cacheQueue:countLimit:)(v21, v28);
  }
}

uint64_t sub_1005B8CE4()
{
  return type metadata accessor for RDPredefinedSmartListAndManualOrderingManagedObjectIDCache(0);
}

void sub_1005B8CF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006AAD80;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006C41F8);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006C4230);
  KeyPath = swift_getKeyPath(&unk_1006C4278);
  *(_QWORD *)(v1 + 48) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  if ((v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
    v3 = (uint64_t)sub_1001E8750(v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v3 = v1 & 0xFFFFFFFFFFFFFF8;
  }
  qword_1008722D8 = v3;
}

void sub_1005B8DA4(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C41D0, (uint64_t (*)(uint64_t))sub_1001E8750, &qword_1008722E0);
}

void sub_1005B8DC0(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C42C8, (uint64_t (*)(uint64_t))sub_1001E9B58, &qword_1008722E8);
}

void sub_1005B8DDC(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C42A0, (uint64_t (*)(uint64_t))sub_1001E9A44, &qword_1008722F0);
}

void sub_1005B8DF8(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C4318, (uint64_t (*)(uint64_t))sub_1001E9DFC, &qword_1008722F8);
}

void sub_1005B8E14(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C42F0, (uint64_t (*)(uint64_t))sub_1001E9DFC, &qword_100872300);
}

void sub_1005B8E30(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C41A8, (uint64_t (*)(uint64_t))sub_1001E8CC0, &qword_100872308);
}

void sub_1005B8E4C(uint64_t a1)
{
  sub_1005B8E68(a1, (uint64_t)&unk_1006C4170, (uint64_t (*)(uint64_t))sub_1001E8CC0, &qword_100872310);
}

void sub_1005B8E68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;

  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(a2);
  *(_QWORD *)(v8 + 32) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    v10 = a3(v8);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v10 = v8 & 0xFFFFFFFFFFFFFF8;
  }
  *a4 = v10;
}

uint64_t sub_1005B8F08(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  v12 = objc_msgSend(a1, "identifier");
  if (v12)
  {
    v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v14, 1, v2);
  sub_1000A5CA8((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v11, v2);
    v16 = sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
    v15 = UUID.uuidString.getter(v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v15;
}

uint64_t sub_1005B90A0(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  Swift::String v31;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = objc_msgSend(a1, "personID");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v8;

  sub_100197460(a2, (uint64_t)&v33);
  if (v34)
  {
    sub_10001BCA8(&v33, (uint64_t)&v35);
    v10 = objc_msgSend(a3, "externalIdentifier");
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v14 = v13;

      v15 = v37;
      v16 = v38;
      sub_10000A388(&v35, v37);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(v12, v14, v15, v16);
      v19 = v18;
      swift_bridgeObjectRelease(v14);
      if (v19)
      {
        *(_QWORD *)&v33 = v7;
        *((_QWORD *)&v33 + 1) = v9;
        swift_bridgeObjectRetain(v9);
        v20._countAndFlagsBits = 124;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        swift_bridgeObjectRelease(v9);
        v21 = *((_QWORD *)&v33 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v33 + 1));
        v22._countAndFlagsBits = v17;
        v22._object = v19;
        String.append(_:)(v22);
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v21);
        v23 = v33;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v35);
        return v23;
      }
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v35);
  }
  else
  {
    sub_10000882C((uint64_t)&v33, &qword_1008484C0);
  }
  v24 = objc_msgSend(a3, "externalIdentifier");
  v25 = v24;
  if (v24)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

    v35 = v7;
    v36 = v9;
    swift_bridgeObjectRetain(v9);
    v29._countAndFlagsBits = 124;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v9);
    v30 = v36;
    swift_bridgeObjectRetain(v36);
    v31._countAndFlagsBits = v26;
    v31._object = v28;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v28);
    return v35;
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    return 0;
  }
}

uint64_t sub_1005B92D0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1005B9338()
{
  return type metadata accessor for RDElementManualSortID(0);
}

uint64_t type metadata accessor for RDElementManualSortID(uint64_t a1)
{
  uint64_t result;

  result = qword_100851238;
  if (!qword_100851238)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDElementManualSortID);
  return result;
}

uint64_t sub_1005B937C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1006C4128;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1005B9400(uint64_t *a1, uint64_t *a2)
{
  return sub_1005B940C(*a1, *a2);
}

uint64_t sub_1005B940C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = v6 == v7 && v4 == v5;
    if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, a2 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID) & 1) != 0)
  {
    sub_100017004();
    return static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID)) & 1;
  }
  return 0;
}

uint64_t sub_1005B94AC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, char *, uint64_t);
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = objc_msgSend(a1, "identifier");
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_7;
  }
  v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_7:

    sub_10000882C(a2, &qword_1008484C0);
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v16(v13, v6, v7);
  v17 = objc_msgSend(a1, "account");
  if (!v17)
  {
LABEL_9:

    sub_10000882C(a2, &qword_1008484C0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return 0;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "remObjectID");
  if (!v19)
  {

    goto LABEL_9;
  }
  v39 = v16;
  v44 = v19;
  v46 = swift_allocObject(&unk_1007FC788, 24, 7);
  *(_QWORD *)(v46 + 16) = a1;
  sub_100197460(a2, (uint64_t)&v47);
  v20 = swift_allocObject(&unk_1007FC7B0, 72, 7);
  *(_QWORD *)(v20 + 16) = v18;
  sub_1000A5CA8((uint64_t)&v47, v20 + 24, &qword_1008484C0);
  *(_QWORD *)(v20 + 64) = a1;
  v43 = a1;
  v41 = v18;
  v45 = objc_msgSend(v41, "accountTypeHost");
  v21 = swift_allocObject(&unk_1007FC7D8, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1005B9CF8;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1007FC800, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_1005B9CF8;
  *(_QWORD *)(v22 + 24) = v20;
  v23 = swift_allocObject(&unk_1007FC828, 32, 7);
  v24 = v46;
  *(_QWORD *)(v23 + 16) = sub_1005B9CB4;
  *(_QWORD *)(v23 + 24) = v24;
  swift_retain_n(v20, 2);
  swift_retain(v24);
  v42 = v23;
  v40 = v22;
  v25 = v22;
  v26 = v45;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v47, 0, 0, 0, 0, sub_1005B9D08, v21, sub_1005B9D84, v25, 0, 0, 0, 0, sub_1005B9D84, v23, 0, 0, &type metadata for String);

  swift_release(v20);
  swift_release(v46);

  swift_release(v21);
  swift_release(v40);
  swift_release(v42);
  sub_10000882C(a2, &qword_1008484C0);
  v29 = v47;
  v28 = v48;
  v46 = v48;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v30 = type metadata accessor for RDElementManualSortID(0);
  v31 = (char *)swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *((_QWORD *)v31 + 2) = v29;
  *((_QWORD *)v31 + 3) = v28;
  v32 = v39;
  v39(&v31[OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID], v11, v7);
  v33 = v44;
  *(_QWORD *)&v31[OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID] = v44;
  swift_setDeallocating(v31);
  v34 = &v31[OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID];
  v35 = *(void (**)(char *, uint64_t))(v8 + 8);
  v36 = v33;
  v35(v34, v7);

  swift_deallocClassInstance(v31, *(unsigned int *)(*(_QWORD *)v31 + 48), *(unsigned __int16 *)(*(_QWORD *)v31 + 52));
  v32(v11, v13, v7);
  v37 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v38 = v46;
  *(_QWORD *)(v37 + 16) = v29;
  *(_QWORD *)(v37 + 24) = v38;
  v32((char *)(v37 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID), v11, v7);
  *(_QWORD *)(v37 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v36;
  return v37;
}

uint64_t sub_1005B99F0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v12 = objc_msgSend(a1, "identifier");
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_7;
  }
  v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_7:

    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v14(v11, v4, v5);
  v15 = objc_msgSend(a1, "account");
  if (!v15)
  {

LABEL_10:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return 0;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

    goto LABEL_10;
  }
  v18 = v17;
  v19 = UUID.uuidString.getter(v17);
  v21 = v20;

  v14(v9, v11, v5);
  v22 = type metadata accessor for RDElementManualSortID(0);
  v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v23 + 16) = v19;
  *(_QWORD *)(v23 + 24) = v21;
  v14((char *)(v23 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID), v9, v5);
  *(_QWORD *)(v23 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v18;
  return v23;
}

id sub_1005B9C3C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_1005B9C74(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_1005B9C90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005B9CB4()
{
  uint64_t v0;

  return sub_1005B8F08(*(void **)(v0 + 16));
}

uint64_t sub_1005B9CBC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1005B9CF8()
{
  uint64_t v0;

  return sub_1005B90A0(*(void **)(v0 + 16), v0 + 24, *(void **)(v0 + 64));
}

uint64_t sub_1005B9D08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10048FD70(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1005B9D20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005B9D84@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005B9D08(a1);
}

uint64_t sub_1005B9DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008512D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008512D0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_1005B9E30()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD v6[9];

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)(v6, 0);
  v3 = v1;
  NSObject.hash(into:)(v6);

  v4 = v2;
  NSObject.hash(into:)(v6);

  return Hasher._finalize()();
}

void sub_1005B9E98(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(v1 + 8);
  v4 = *(id *)v1;
  NSObject.hash(into:)(a1);

  v5 = v3;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_1005B9EF8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[9];

  v2 = *(void **)v1;
  v3 = *(void **)(v1 + 8);
  Hasher.init(_seed:)(v7, a1);
  v4 = v2;
  NSObject.hash(into:)(v7);

  v5 = v3;
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

_QWORD *sub_1005B9F5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t inited;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE v41[64];
  _BYTE v42[24];
  objc_super v43;

  v6 = v5;
  v12 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[2] = _swiftEmptyArrayStorage;
  v6[3] = _swiftEmptyArrayStorage;
  v15 = (char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  v16 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v40(v15, 1, 1, v16);
  *((_BYTE *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started) = 0;
  v6[4] = a1;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_beforeFirstUnlockNotificationEngine) = a5;
  v17 = (objc_class *)type metadata accessor for RDDaemonController();
  v18 = (char *)objc_allocWithZone(v17);
  v19 = &v18[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  v20 = &v18[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(_OWORD *)v20 = xmmword_1006C4340;
  *(_QWORD *)(v20 + 38) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  v43.receiver = v18;
  v43.super_class = v17;
  v21 = a1;
  swift_unknownObjectRetain(a2);
  swift_retain(a5);
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController) = objc_msgSendSuper2(&v43, "init");
  if (a4)
  {
    v6[5] = a4;
    v22 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v22, v41);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    v24 = (void *)objc_opt_self(REMAlarmTrigger);
    swift_retain_n(a4, 2);
    v38 = v21;
    v25 = objc_msgSend(v24, "cdEntityName");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v39 = a5;
    v28 = v27;

    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(inited + 40) = v28;
    v29 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    *(_QWORD *)(inited + 48) = v30;
    *(_QWORD *)(inited + 56) = v32;
    v33 = sub_1002E6C54(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 2, &type metadata for String);
    v34 = swift_allocObject(&unk_1007FC948, 24, 7);
    swift_weakInit(v34 + 16, v6);
    swift_retain(v34);
    v35 = v38;
    sub_100395434(v33, v38, (uint64_t)sub_1005BDC88, v34, (uint64_t)v14);
    swift_bridgeObjectRelease(v33);
    swift_release_n(v34, 2);

    swift_unknownObjectRelease(a2);
    swift_release_n(a4, 2);
    swift_release(v39);
    v40(v14, 0, 1, v16);
  }
  else
  {

    swift_unknownObjectRelease(a2);
    swift_release(a5);
    v6[5] = 0;
    v40(v14, 1, 1, v16);
  }
  v36 = (uint64_t)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  swift_beginAccess((char *)v6 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken, v42, 33, 0);
  sub_1000E5374((uint64_t)v14, v36);
  swift_endAccess(v42);
  return v6;
}

void sub_1005BA2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _BYTE v19[24];

  v2 = a2 + 16;
  if (qword_1008379A8 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_1008512D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction INIT {name: com.apple.remindd.RDAlarmEngine.alarmDatabaseDidChange}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = os_transaction_create("com.apple.remindd.RDAlarmEngine.alarmDatabaseDidChange");
  swift_beginAccess(v2, v19, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v10 = Strong;
    sub_1005BA504();
    v11 = swift_release(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
LABEL_7:
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngine.alarmDatabaseDidChange}", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
  }
  else
  {
    v15 = Logger.logObject.getter(0);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received store changes with deallocated alarm engine", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v12 = Logger.logObject.getter(v18);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
      goto LABEL_7;
  }
  swift_unknownObjectRelease(v8);

}

double sub_1005BA504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  if (qword_1008379A8 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_1008512D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Triggered alarmEngine database did change. Notifying producers", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    swift_bridgeObjectRetain(v8);
    do
    {
      sub_100018618(v10, (uint64_t)v13);
      v11 = v14;
      v12 = v15;
      sub_10000A388(v13, v14);
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v13);
      v10 += 40;
      --v9;
    }
    while (v9);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  }
  return result;
}

void sub_1005BA648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + 40);
  if (!v9)
    goto LABEL_6;
  v10 = v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken, v17, 0, 0);
  sub_1000E542C(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E5474((uint64_t)v4);
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release(*(_QWORD *)(v1 + 40));
    sub_1000E5474(v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_storeControllerNotificationCenterToken);
    swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_beforeFirstUnlockNotificationEngine));

    return;
  }
  sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
  v11 = *(os_unfair_lock_s **)(v9 + 40);
  swift_retain();
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-16] = v8;
  swift_beginAccess(v9 + 48, v16, 33, 0);
  sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v15[-32]);
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16);
  if (v14 >= v13)
  {
    sub_1001CED20(v13, v14);
    swift_endAccess(v16);
    os_unfair_lock_unlock(v11);
    swift_release(v9);
    sub_1000A3F78((uint64_t)v8);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_1005BA84C()
{
  uint64_t v0;

  sub_1005BA648();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005BA870()
{
  return type metadata accessor for RDAlarmEngine(0);
}

uint64_t type metadata accessor for RDAlarmEngine(uint64_t a1)
{
  uint64_t result;

  result = qword_100851318;
  if (!qword_100851318)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDAlarmEngine);
  return result;
}

void sub_1005BA8B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "\b";
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = "\b";
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_1006C4400;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_1005BA95C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*((_BYTE *)v3 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started) & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, 0x80000001007096E0, "remindd/RDAlarmEngine.swift", 27, 2, 180, 0);
    __break(1u);
    return;
  }
  *((_BYTE *)v3 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_started) = 1;
  v10 = (void *)v3[4];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v12 = v3[2];
    v3[2] = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v12);
    v13 = v3[3];
    v3[3] = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v13);
    if (qword_1008379A8 == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008379A8, sub_1005B9DA0);
LABEL_4:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_1008512D0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  v16 = swift_retain_n(v3, 2);
  v44 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (!os_log_type_enabled(v17, v18))
  {

    swift_release_n(v3, 2);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    v28 = *(_QWORD *)(a1 + 16);
    if (!v28)
      goto LABEL_11;
LABEL_8:
    v29 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    v30 = v28;
    do
    {
      v31 = v29[3];
      v32 = v29[4];
      sub_10000A388(v29, v31);
      (*(void (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
      v29 += 5;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }
  v19 = swift_slowAlloc(32, -1);
  v20 = swift_slowAlloc(32, -1);
  v43 = v20;
  *(_DWORD *)v19 = 136315650;
  v45 = 60;
  v46 = 0xE100000000000000;
  v47 = v20;
  v21._countAndFlagsBits = sub_1004E8C68((uint64_t)v3);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v46;
  v45 = sub_10001A820(v45, v46, &v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v24);
  *(_WORD *)(v19 + 12) = 2048;
  v25 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRelease(a1);
  v45 = v25;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
  swift_bridgeObjectRelease(a1);
  *(_WORD *)(v19 + 22) = 2048;
  v26 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a2);
  v45 = v26;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
  swift_bridgeObjectRelease(a2);
  _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting alarmEngine {engine: %s, producers.count: %ld, consumers.count: %ld}", (uint8_t *)v19, 0x20u);
  v27 = v43;
  swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v27, -1, -1);
  swift_slowDealloc(v19, -1, -1);

  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
    goto LABEL_8;
LABEL_11:
  swift_bridgeObjectRetain_n(a1, 2);
  v33 = swift_retain_n(v3, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(32, -1);
    *(_DWORD *)v36 = 136315394;
    v45 = 60;
    v46 = 0xE100000000000000;
    v47 = v37;
    v38._countAndFlagsBits = sub_1004E8C68((uint64_t)v3);
    v39 = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v39);
    v40._countAndFlagsBits = 62;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    v41 = v46;
    v45 = sub_10001A820(v45, v46, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v36 + 12) = 2048;
    swift_bridgeObjectRelease(a1);
    v45 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Finished starting alarmEngine {engine: %s, producers.count: %ld}", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
}

void sub_1005BAEE8(uint64_t a1, void *a2, void *a3, const char *a4, const char *a5)
{
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1008379A8 != -1)
      swift_once(&qword_1008379A8, sub_1005B9DA0);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_1008512D0);
    v10 = a3;
    v11 = a2;
    swift_errorRetain(a1);
    v12 = v10;
    v44 = v11;
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(32, -1);
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      v42 = swift_slowAlloc(64, -1);
      v45 = a1;
      v46 = v42;
      *(_DWORD *)v16 = 136315650;
      swift_errorRetain(a1);
      v17 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v18 = String.init<A>(describing:)(&v45, v17);
      v45 = sub_10001A820(v18, v19, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v16 + 12) = 2114;
      v45 = (uint64_t)v44;
      v20 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      *v41 = v44;

      *(_WORD *)(v16 + 22) = 2082;
      v21 = objc_msgSend(v12, "actionIdentifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v45 = sub_10001A820(v22, v24, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, a4, (uint8_t *)v16, 0x20u);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v41, 1, v25);
      swift_slowDealloc(v41, -1, -1);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  else
  {
    if (qword_1008379A8 != -1)
      swift_once(&qword_1008379A8, sub_1005B9DA0);
    v27 = type metadata accessor for Logger(0);
    sub_10001AAA8(v27, (uint64_t)qword_1008512D0);
    v28 = a3;
    v29 = a2;
    v44 = v28;
    v30 = v29;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      v43 = swift_slowAlloc(32, -1);
      v46 = v43;
      *(_DWORD *)v33 = 136446466;
      v35 = objc_msgSend(v44, "actionIdentifier");
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      v45 = sub_10001A820(v36, v38, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2112;
      v45 = (uint64_t)v30;
      v39 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      *v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, a5, (uint8_t *)v33, 0x16u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v40);
      swift_slowDealloc(v34, -1, -1);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      return;
    }

  }
}

uint64_t sub_1005BB440(uint64_t a1, void **a2, NSObject *a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_1005BB79C(a2, a3, a4, a5, a6);
}

void *sub_1005BB458(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v2 = objc_msgSend(a1, "trigger");
  v3 = objc_opt_self(REMAlarmDateTrigger);
  if (swift_dynamicCastObjCClass(v2, v3)
    || (v4 = objc_opt_self(REMAlarmTimeIntervalTrigger), swift_dynamicCastObjCClass(v2, v4))
    || (v6 = objc_opt_self(REMAlarmLocationTrigger), swift_dynamicCastObjCClass(v2, v6))
    || (v7 = objc_opt_self(REMAlarmVehicleTrigger), swift_dynamicCastObjCClass(v2, v7)))
  {
LABEL_3:

    return a1;
  }
  v8 = objc_opt_self(REMAlarmContactTrigger);
  if (!swift_dynamicCastObjCClass(v2, v8))
  {
    v14 = objc_opt_self(REMAlarmDueDateDeltaAlertTrigger);
    v15 = swift_dynamicCastObjCClass(v2, v14);

    if (v15)
      return a1;
    if (qword_1008379A8 != -1)
      swift_once(&qword_1008379A8, sub_1005B9DA0);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_1008512D0);
    v2 = a1;
    v17 = Logger.logObject.getter(v2);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v21 = objc_msgSend(v2, "trigger");
      v23 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      *v20 = v21;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to get infer RDProducerAlarmTrigger enum from trigger {trigger: %@}", v19, 0xCu);
      v22 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      return a1;
    }

    goto LABEL_3;
  }
  if (qword_1008379A8 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_1008512D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "This is an incorrect use of API. peopleInteraction origin takes an additional parameter that cannot be deduced solely by the REMAlarm. You need to create the origin enum manually", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  return a1;
}

uint64_t sub_1005BB79C(void **a1, NSObject *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  NSObject *v43;
  void (*v44)(char *, NSObject *, uint64_t (*)(void), __n128);
  int v45;
  uint64_t *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void (*v51)(char *, char *, void **);
  char *v52;
  void **v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  void **v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  NSObject *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  __n128 v68;
  void (*v69)(char *, void **, __n128);
  NSObject *v70;
  char *v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void (*v79)(NSObject *, uint64_t, uint64_t);
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  NSObject **v85;
  void (*v86)(NSObject *, uint64_t, uint64_t);
  NSObject *v87;
  NSObject **v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  __n128 v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  void **v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  uint64_t v102;
  unint64_t v103;
  __n128 v104;
  void **v105;
  NSObject *v106;
  NSObject *v107;
  uint64_t v108;
  void **v109;
  char *v110;
  uint64_t v111;
  __n128 v112;
  NSObject *v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  void **v118;
  void *v119;
  uint64_t v120;
  void **v121;
  NSObject *v122;
  NSObject *v123;
  char *v124;
  void **v125;
  NSObject *v126;
  uint64_t v127;
  __n128 v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t result;
  __n128 v145;
  uint64_t v146;
  int *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 v156;
  uint64_t v157;
  NSObject *v158;
  NSObject *v159;
  void **v160;
  uint64_t v161;
  NSObject *v162;
  NSObject *v163;
  char *v164;
  void **v165;
  NSObject *v166;
  os_log_type_t v167;
  int v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  __n128 v177;
  NSObject *v178;
  uint64_t v179;
  unint64_t v180;
  __n128 v181;
  void (*v182)(char *, void **, __n128);
  void **v183;
  const char *v184;
  double v185;
  char *v186;
  NSObject *v187;
  char *v188;
  uint64_t v189;
  os_log_t v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  id v194;
  void *v195;
  id v196;
  void *v197;
  id v198;
  char *v199;
  Class isa;
  id v201;
  __n128 v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  NSObject *v215;
  os_log_type_t v216;
  uint8_t *v217;
  NSObject *v218;
  uint64_t *v219;
  uint64_t *v220;
  NSObject *v221;
  os_log_type_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  void **v227;
  void *v228;
  uint64_t v229;
  void **v230;
  void **v231;
  void **v232;
  uint64_t v233;
  void **v234;
  NSObject *v235;
  NSObject *v236;
  os_log_type_t v237;
  uint64_t v238;
  void ***v239;
  void **v240;
  void ***v241;
  void **v242;
  void **v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  __n128 v247;
  uint64_t v248;
  void **v249;
  NSObject *v250;
  os_log_type_t v251;
  const char *v252;
  NSObject *v253;
  os_log_type_t v254;
  uint8_t *v255;
  uint64_t *v256;
  NSObject *v257;
  NSObject *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  os_log_t v262;
  void **v263;
  NSObject *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  NSObject *v271;
  char *v272;
  char *v273;
  void **v274;
  uint64_t v275;
  uint64_t v276;
  void **v277;
  uint64_t v278;
  NSObject *v279;
  NSObject *v280;
  NSObject *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t (*v289)(void);
  void **v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void **aBlock;
  uint64_t v295;
  void *v296;
  void *v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;

  v288 = a5;
  v289 = a4;
  v278 = a3;
  v290 = a1;
  v287 = type metadata accessor for DispatchWorkItemFlags(0);
  v286 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v285 = (char *)&v259 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = type metadata accessor for DispatchQoS(0);
  v283 = *(_QWORD *)(v284 - 8);
  __chkstk_darwin(v284);
  v282 = (char *)&v259 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = type metadata accessor for Date(0);
  v269 = *(_QWORD *)(v270 - 8);
  __chkstk_darwin(v270);
  v261 = (char *)&v259 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = type metadata accessor for REMAnalyticsEvent(0);
  v267 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v266 = (char *)&v259 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = type metadata accessor for RDUserNotificationAction(0);
  v275 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v263 = (void **)((char *)&v259 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v262 = (os_log_t)((char *)&v259 - v12);
  __chkstk_darwin(v13);
  v273 = (char *)&v259 - v14;
  __chkstk_darwin(v15);
  v281 = ((char *)&v259 - v16);
  v17 = (void **)type metadata accessor for REMNotificationIdentifier(0);
  v18 = (uint64_t)*(v17 - 1);
  __chkstk_darwin(v17);
  v264 = ((char *)&v259 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v277 = (void **)((char *)&v259 - v21);
  __chkstk_darwin(v22);
  v265 = (char *)&v259 - v23;
  __chkstk_darwin(v24);
  v271 = ((char *)&v259 - v25);
  __chkstk_darwin(v26);
  v279 = ((char *)&v259 - v27);
  __chkstk_darwin(v28);
  v30 = (char *)&v259 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v259 - v32;
  v34 = (uint64_t (*)(void))type metadata accessor for RDUserNotificationType(0);
  v35 = *((_QWORD *)v34 - 1);
  __chkstk_darwin(v34);
  v274 = (void **)((char *)&v259 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v37);
  v39 = (char *)&v259 - v38;
  v41 = __chkstk_darwin(v40);
  v43 = ((char *)&v259 - v42);
  v44 = *(void (**)(char *, NSObject *, uint64_t (*)(void), __n128))(v35 + 16);
  v280 = a2;
  v44((char *)&v259 - v42, a2, v34, v41);
  v45 = (*(uint64_t (**)(NSObject *, uint64_t (*)(void)))(v35 + 88))(v43, v34);
  v46 = &qword_100837000;
  if (v45 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    (*(void (**)(NSObject *, uint64_t (*)(void)))(v35 + 96))(v43, v34);
    (*(void (**)(char *, NSObject *, void **))(v18 + 32))(v33, v43, v17);
    v47 = v17;
    v48 = v18;
    if (qword_1008379A8 != -1)
      swift_once(&qword_1008379A8, sub_1005B9DA0);
    v49 = type metadata accessor for Logger(0);
    v50 = (void **)sub_10001AAA8(v49, (uint64_t)qword_1008512D0);
    v51 = *(void (**)(char *, char *, void **))(v18 + 16);
    v52 = v30;
    v51(v30, v33, v47);
    v53 = v290;
    v290 = v50;
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    v56 = os_log_type_enabled(v54, v55);
    v272 = v33;
    v274 = v53;
    v280 = v51;
    if (v56)
    {
      v57 = swift_slowAlloc(22, -1);
      v58 = (void **)swift_slowAlloc(64, -1);
      v260 = v48;
      v271 = v58;
      aBlock = v58;
      *(_DWORD *)v57 = 136446466;
      v265 = v52;
      v59 = objc_msgSend(v53, "actionIdentifier");
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v62 = v61;

      v293 = sub_10001A820(v60, v62, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);

      v63 = swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2082;
      v64 = v279;
      v65 = v265;
      ((void (*)(NSObject *, char *, void **, __n128))v51)(v279, v265, v47, v63);
      v66 = String.init<A>(describing:)(v64, v47);
      v293 = sub_10001A820(v66, v67, (uint64_t *)&aBlock);
      v33 = v272;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      v68 = swift_bridgeObjectRelease();
      v69 = *(void (**)(char *, void **, __n128))(v260 + 8);
      v69(v65, v47, v68);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "ReminderAlarm: Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}", (uint8_t *)v57, 0x16u);
      v70 = v271;
      swift_arrayDestroy(v271, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {

      v69 = *(void (**)(char *, void **, __n128))(v48 + 8);
      ((void (*)(char *, void **))v69)(v52, v47);
    }

    v72 = v281;
    v73 = v291;
    v74 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v291 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController));
    v75 = REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)(v33, 0);
    v265 = (char *)v69;
    v76 = v73;
    v277 = v47;
    v77 = -[NSObject objectID](v75, "objectID");
    v279 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v74);
    v281 = v75;
    v264 = -[NSObject updateReminder:](v279, "updateReminder:", v75);
    v78 = v275;
    v79 = *(void (**)(NSObject *, uint64_t, uint64_t))(v275 + 16);
    v43 = v276;
    v79(v72, v278, v276);
    v80 = v77;
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter(v81);
    v83 = os_log_type_enabled(v81, (os_log_type_t)v82);
    v271 = v74;
    v280 = v80;
    if (v83)
    {
      v84 = swift_slowAlloc(22, -1);
      v85 = (NSObject **)swift_slowAlloc(8, -1);
      v263 = (void **)swift_slowAlloc(32, -1);
      v293 = (uint64_t)v80;
      aBlock = v263;
      *(_DWORD *)v84 = 138543618;
      v262 = v81;
      v86 = v79;
      v87 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      *v85 = v80;
      v88 = v85;

      v79 = v86;
      *(_WORD *)(v84 + 12) = 2082;
      v90 = RDUserNotificationAction.rawValue.getter(v89);
      v293 = sub_10001A820(v90, v91, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      v92 = swift_bridgeObjectRelease();
      v78 = v275;
      v43 = v276;
      (*(void (**)(NSObject *, uint64_t, __n128))(v275 + 8))(v72, v276, v92);
      v81 = v262;
      _os_log_impl((void *)&_mh_execute_header, v262, (os_log_type_t)v82, "ReminderAlarm: Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v84, 0x16u);
      v93 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v88, 1, v93);
      v76 = v291;
      swift_slowDealloc(v88, -1, -1);
      v94 = v263;
      swift_arrayDestroy(v263, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v84, -1, -1);
    }
    else
    {

      (*(void (**)(NSObject *, NSObject *))(v78 + 8))(v72, v43);
    }

    v34 = v289;
    v110 = v273;
    v79(v273, v278, (uint64_t)v43);
    v111 = (*(uint64_t (**)(char *, NSObject *))(v78 + 88))(v110, v43);
    v46 = (uint64_t *)v281;
    if ((_DWORD)v111 == enum case for RDUserNotificationAction.defaultDismiss(_:))
    {
      v113 = v264;
      -[NSObject snoozeForever](v264, "snoozeForever");
      v114 = v277;
      v35 = v76;
LABEL_26:
      v115 = *(_QWORD *)(v35 + 32);
      v116 = swift_allocObject(&unk_1007FC8F8, 32, 7);
      v117 = v280;
      v118 = v274;
      *(_QWORD *)(v116 + 16) = v280;
      *(_QWORD *)(v116 + 24) = v118;
      v298 = sub_1005BDC3C;
      v299 = v116;
      aBlock = _NSConcreteStackBlock;
      v295 = 1107296256;
      v296 = sub_1000E18E4;
      v297 = &unk_1007FC910;
      v119 = _Block_copy(&aBlock);
      v120 = v299;
      v121 = v118;
      v122 = v117;
      swift_release(v120);
      v123 = v279;
      -[NSObject saveWithQueue:completion:](v279, "saveWithQueue:completion:", v115, v119);
      _Block_release(v119);

      v124 = v272;
      v125 = v114;
LABEL_30:
      ((void (*)(char *, void **))v265)(v124, v125);
LABEL_31:
      v127 = *(_QWORD *)(v35 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_beforeFirstUnlockNotificationEngine);
      if (v127)
      {
        sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
        swift_retain();
        v129 = (void *)static OS_dispatch_queue.main.getter(v128);
        v298 = sub_1005BDBE4;
        v299 = v127;
        aBlock = _NSConcreteStackBlock;
        v295 = 1107296256;
        v296 = sub_1000094C8;
        v297 = &unk_1007FC870;
        v130 = _Block_copy(&aBlock);
        v131 = v299;
        swift_retain();
        v132 = swift_release(v131);
        v133 = v282;
        static DispatchQoS.unspecified.getter(v132);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v134 = sub_1000D3124();
        v135 = sub_10001A630((uint64_t *)&unk_100838000);
        v136 = sub_1000D316C();
        v137 = v285;
        v138 = v287;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v135, v136, v287, v134);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v133, v137, v130);
        _Block_release(v130);
        swift_release(v127);

        (*(void (**)(char *, uint64_t))(v286 + 8))(v137, v138);
        (*(void (**)(char *, uint64_t))(v283 + 8))(v133, v284);
      }
      if (qword_1008379A8 != -1)
        swift_once(&qword_1008379A8, sub_1005B9DA0);
      v139 = type metadata accessor for Logger(0);
      v140 = sub_10001AAA8(v139, (uint64_t)qword_1008512D0);
      v141 = Logger.logObject.getter(v140);
      v142 = static os_log_type_t.default.getter(v141);
      if (os_log_type_enabled(v141, v142))
      {
        v143 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v143 = 0;
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "Completing action handler by calling completionHandler now.", v143, 2u);
        swift_slowDealloc(v143, -1, -1);
      }

      return v34();
    }
    v17 = v277;
    if ((_DWORD)v111 == enum case for RDUserNotificationAction.debugDismiss(_:))
    {
      v35 = v76;
      v126 = v264;
LABEL_29:

      v124 = v272;
      v125 = v17;
      goto LABEL_30;
    }
    v35 = v76;
    if ((_DWORD)v111 == enum case for RDUserNotificationAction.markAsCompleted(_:))
    {
      type metadata accessor for REMAnalyticsManager(0, v112);
      v146 = static REMAnalyticsManager.shared.getter(v145);
      v147 = (int *)sub_10001A630(&qword_100850D28);
      v148 = v266;
      v149 = &v266[v147[12]];
      v150 = &v266[v147[16]];
      v151 = &v266[v147[20]];
      v152 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
      v153 = type metadata accessor for REMUserOperation(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 104))(v148, v152, v153);
      *(_QWORD *)v149 = 0;
      *((_QWORD *)v149 + 1) = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v269 + 56))(v150, 1, 1, v270);
      *(_QWORD *)v151 = 0;
      *((_QWORD *)v151 + 1) = 0;
      v46 = (uint64_t *)v281;
      v154 = v267;
      v155 = v268;
      v156.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v267 + 104))(v148, enum case for REMAnalyticsEvent.userOperation(_:), v268);
      REMAnalyticsManager.post(event:)(v148, v156);
      swift_release(v146);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v148, v155);
      v113 = v264;
      -[NSObject setCompleted:](v264, "setCompleted:", 1);
      v114 = v17;
      goto LABEL_26;
    }
    if ((_DWORD)v111 == enum case for RDUserNotificationAction.snoozeForOneHour(_:))
    {
      v184 = "snoozeFromNowForTimeInterval:";
      v185 = 3600.0;
LABEL_53:
      v113 = v264;
      objc_msgSend(v264, v184, v185);
      v114 = v17;
      goto LABEL_26;
    }
    goto LABEL_51;
  }
  if (v45 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    (*(void (**)(NSObject *, uint64_t (*)(void)))(v35 + 8))(v43, v34);
    v71 = v39;
    goto LABEL_17;
  }
  v71 = v39;
  if (v45 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(NSObject *, uint64_t (*)(void)))(v35 + 96))(v43, v34);

    goto LABEL_17;
  }
  if (v45 == enum case for RDUserNotificationType.assignmentNotification(_:)
    || v45 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(NSObject *, uint64_t (*)(void)))(v35 + 96))(v43, v34);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v45 != enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    if (v45 != enum case for RDUserNotificationType.todayNotification(_:)
      && v45 != enum case for RDUserNotificationType.todayNotificationBadge(_:)
      && v45 != enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
      v111 = _diagnoseUnexpectedEnumCase<A>(type:)(v34, v34);
      __break(1u);
LABEL_51:
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.snoozeForOneDay(_:))
      {
        v184 = "snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:";
        v185 = 86400.0;
        goto LABEL_53;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:))
      {
        v113 = v264;
        -[NSObject snoozeToNextThirds](v264, "snoozeToNextThirds");
        v114 = v17;
        goto LABEL_26;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:))
      {
        v184 = "snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:";
        v185 = 604800.0;
        goto LABEL_53;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.addToReminders(_:))
      {
        v215 = Logger.logObject.getter(v111);
        v216 = static os_log_type_t.error.getter(v215);
        if (os_log_type_enabled(v215, v216))
        {
          v217 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v217 = 0;
          _os_log_impl((void *)&_mh_execute_header, v215, v216, "ReminderAlarm: Unexpected .addToReminders action for notification type .reminderAlarm", v217, 2u);
          v218 = v280;
          v219 = (uint64_t *)v271;
          v280 = v281;
          v220 = &v292;
LABEL_100:
          v257 = *(v220 - 32);
          swift_slowDealloc(v217, -1, -1);
          v250 = v279;
          v258 = v257;
LABEL_103:

          v46 = v219;
          v279 = v215;
          v126 = v280;
          v280 = v250;
          v271 = v258;
          goto LABEL_29;
        }
        v218 = v280;
        v219 = (uint64_t *)v271;
        v280 = v281;
        v250 = v279;
        v256 = &v292;
LABEL_102:
        v258 = *(v256 - 32);
        goto LABEL_103;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
      {
        v250 = Logger.logObject.getter(v111);
        v251 = static os_log_type_t.error.getter(v250);
        if (os_log_type_enabled(v250, v251))
        {
          v217 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v217 = 0;
          v252 = "ReminderAlarm: Unexpected .viewAssignmentInList action for notification type .reminderAlarm";
LABEL_99:
          _os_log_impl((void *)&_mh_execute_header, v250, v251, v252, v217, 2u);
          v218 = v279;
          v219 = (uint64_t *)v264;
          v215 = v271;
          v279 = v250;
          v220 = &v300;
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.declineAssignment(_:))
      {
        v250 = Logger.logObject.getter(v111);
        v251 = static os_log_type_t.error.getter(v250);
        if (os_log_type_enabled(v250, v251))
        {
          v217 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v217 = 0;
          v252 = "ReminderAlarm: Unexpected .declineAssignment action for notification type .reminderAlarm";
          goto LABEL_99;
        }
LABEL_101:
        v218 = v279;
        v219 = (uint64_t *)v264;
        v215 = v271;
        v256 = &v300;
        goto LABEL_102;
      }
      if ((_DWORD)v111 == enum case for RDUserNotificationAction.viewRemindersInList(_:))
      {
        v250 = Logger.logObject.getter(v111);
        v251 = static os_log_type_t.error.getter(v250);
        if (os_log_type_enabled(v250, v251))
        {
          v217 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v217 = 0;
          v252 = "ReminderAlarm: Unexpected .viewRemindersInList action for notification type .remindersAlarm";
          goto LABEL_99;
        }
        goto LABEL_101;
      }
LABEL_105:
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v43, v43);
      __break(1u);
      return result;
    }
LABEL_17:
    if (qword_1008379A8 != -1)
      swift_once(&qword_1008379A8, sub_1005B9DA0);
    v95 = type metadata accessor for Logger(0);
    sub_10001AAA8(v95, (uint64_t)qword_1008512D0);
    ((void (*)(char *, NSObject *, uint64_t (*)(void)))v44)(v71, v280, v34);
    v96 = v290;
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc(22, -1);
      v281 = v97;
      v100 = v99;
      v280 = swift_slowAlloc(8, -1);
      v290 = (void **)swift_slowAlloc(32, -1);
      aBlock = v290;
      *(_DWORD *)v100 = 136315394;
      v101 = v274;
      ((void (*)(void **, char *, uint64_t (*)(void)))v44)(v274, v71, v34);
      v102 = String.init<A>(describing:)(v101, v34);
      v293 = sub_10001A820(v102, v103, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      v104 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t (*)(void), __n128))(v35 + 8))(v71, v34, v104);
      *(_WORD *)(v100 + 12) = 2112;
      v293 = (uint64_t)v96;
      v105 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      v106 = v280;
      v280->isa = (Class)v96;

      v107 = v281;
      _os_log_impl((void *)&_mh_execute_header, v281, v98, "AlarmEngine didn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v100, 0x16u);
      v108 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v106, 1, v108);
      swift_slowDealloc(v106, -1, -1);
      v109 = v290;
      swift_arrayDestroy(v290, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v100, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t (*)(void)))(v35 + 8))(v71, v34);

    }
    v34 = v289;
    v35 = v291;
    goto LABEL_31;
  }
  (*(void (**)(NSObject *, uint64_t (*)(void)))(v35 + 96))(v43, v34);
  v157 = v18;
  v158 = v271;
  v159 = v43;
  v160 = v17;
  (*(void (**)(NSObject *, NSObject *, void **))(v18 + 32))(v271, v159, v17);
  if (qword_1008379A8 != -1)
    swift_once(&qword_1008379A8, sub_1005B9DA0);
  v161 = type metadata accessor for Logger(0);
  v162 = sub_10001AAA8(v161, (uint64_t)qword_1008512D0);
  v163 = *(NSObject **)(v18 + 16);
  v164 = v265;
  ((void (*)(char *, NSObject *, void **))v163)(v265, v158, v17);
  v165 = v290;
  v166 = Logger.logObject.getter(v165);
  v167 = static os_log_type_t.default.getter(v166);
  v168 = v167;
  v169 = os_log_type_enabled(v166, v167);
  v290 = v165;
  v281 = v163;
  if (v169)
  {
    v170 = swift_slowAlloc(22, -1);
    LODWORD(v274) = v168;
    v171 = v170;
    v277 = (void **)swift_slowAlloc(64, -1);
    aBlock = v277;
    *(_DWORD *)v171 = 136446466;
    v172 = objc_msgSend(v165, "actionIdentifier");
    v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
    v260 = v157;
    v174 = v173;
    v280 = v162;
    v176 = v175;

    v293 = sub_10001A820(v174, v176, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);

    v177 = swift_bridgeObjectRelease();
    *(_WORD *)(v171 + 12) = 2082;
    v178 = v279;
    ((void (*)(NSObject *, char *, void **, __n128))v163)(v279, v164, v17, v177);
    v179 = String.init<A>(describing:)(v178, v17);
    v293 = sub_10001A820(v179, v180, (uint64_t *)&aBlock);
    v160 = v17;
    v162 = v280;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
    v181 = swift_bridgeObjectRelease();
    v182 = *(void (**)(char *, void **, __n128))(v260 + 8);
    v182(v164, v17, v181);
    _os_log_impl((void *)&_mh_execute_header, v166, (os_log_type_t)v274, "DueDateDeltaAlarm: Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}", (uint8_t *)v171, 0x16u);
    v183 = v277;
    swift_arrayDestroy(v277, 2, (char *)&type metadata for Any + 8);
    v158 = v271;
    swift_slowDealloc(v183, -1, -1);
    swift_slowDealloc(v171, -1, -1);
  }
  else
  {

    v182 = *(void (**)(char *, void **, __n128))(v157 + 8);
    ((void (*)(char *, void **))v182)(v164, v17);
  }

  v35 = v291;
  v186 = (char *)objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v291 + OBJC_IVAR____TtC7remindd13RDAlarmEngine_daemonController));
  v187 = REMStore.fetchReminder(notificationIdentifier:includingDueDateDeltaAlerts:)(v158, 1);
  v277 = (void **)-[NSObject objectID](v187, "objectID");
  v281 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v186);
  v279 = v187;
  v188 = (char *)-[NSObject updateReminder:](v281, "updateReminder:", v187);
  v189 = v275;
  v190 = v262;
  v191 = v276;
  v274 = *(void ***)(v275 + 16);
  ((void (*)(os_log_t, uint64_t, uint64_t))v274)(v262, v278, v276);
  v192 = (*(uint64_t (**)(os_log_t, uint64_t))(v189 + 88))(v190, v191);
  if ((_DWORD)v192 != enum case for RDUserNotificationAction.defaultDismiss(_:))
  {
    v272 = v188;
    v273 = v186;
    v265 = (char *)v182;
    v43 = v281;
    if ((_DWORD)v192 != enum case for RDUserNotificationAction.debugDismiss(_:))
    {
      if ((_DWORD)v192 == enum case for RDUserNotificationAction.markAsCompleted(_:))
      {
        type metadata accessor for REMAnalyticsManager(0, v193);
        v203 = static REMAnalyticsManager.shared.getter(v202);
        v204 = (int *)sub_10001A630(&qword_100850D28);
        v205 = v204[12];
        v206 = v266;
        v280 = v162;
        v207 = &v266[v205];
        v208 = &v266[v204[16]];
        v209 = &v266[v204[20]];
        v210 = enum case for REMUserOperation.markReminderCompletedNotification(_:);
        v211 = type metadata accessor for REMUserOperation(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v211 - 8) + 104))(v206, v210, v211);
        *(_QWORD *)v207 = 0;
        *((_QWORD *)v207 + 1) = 0;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v269 + 56))(v208, 1, 1, v270);
        *(_QWORD *)v209 = 0;
        *((_QWORD *)v209 + 1) = 0;
        v43 = v281;
        v212 = v267;
        v213 = v268;
        v214.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v267 + 104))(v206, enum case for REMAnalyticsEvent.userOperation(_:), v268);
        REMAnalyticsManager.post(event:)(v206, v214);
        swift_release(v203);
        (*(void (**)(char *, uint64_t))(v212 + 8))(v206, v213);
        objc_msgSend(v272, "setCompleted:", 1);
      }
      else
      {
        if ((_DWORD)v192 != enum case for RDUserNotificationAction.snoozeForOneHour(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.snoozeForOneDay(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.addToReminders(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.viewAssignmentInList(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.declineAssignment(_:)
          && (_DWORD)v192 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
        {
          _diagnoseUnexpectedEnumCase<A>(type:)(v276, v276);
          __break(1u);
          goto LABEL_105;
        }
        v221 = Logger.logObject.getter(v192);
        v222 = static os_log_type_t.error.getter(v221);
        if (os_log_type_enabled(v221, v222))
        {
          v223 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v223 = 0;
          _os_log_impl((void *)&_mh_execute_header, v221, v222, "DueDateDeltaAlarm: Unexpected action for notification type .dueDateDeltaAlarm", v223, 2u);
          swift_slowDealloc(v223, -1, -1);
        }

      }
    }
LABEL_81:
    v224 = *(_QWORD *)(v35 + 32);
    v225 = swift_allocObject(&unk_1007FC8A8, 32, 7);
    v226 = v277;
    v227 = v290;
    *(_QWORD *)(v225 + 16) = v277;
    *(_QWORD *)(v225 + 24) = v227;
    v298 = sub_1005BDC14;
    v299 = v225;
    aBlock = _NSConcreteStackBlock;
    v295 = 1107296256;
    v296 = sub_1000E18E4;
    v297 = &unk_1007FC8C0;
    v228 = _Block_copy(&aBlock);
    v229 = v299;
    v230 = v227;
    v231 = v226;
    swift_release(v229);
    -[NSObject saveWithQueue:completion:](v43, "saveWithQueue:completion:", v224, v228);
    _Block_release(v228);
    v232 = v263;
    v233 = v276;
    ((void (*)(void **, uint64_t, uint64_t))v274)(v263, v278, v276);
    v234 = v231;
    v235 = Logger.logObject.getter(v234);
    v236 = v43;
    v237 = static os_log_type_t.default.getter(v235);
    if (os_log_type_enabled(v235, v237))
    {
      v238 = swift_slowAlloc(22, -1);
      v239 = (void ***)swift_slowAlloc(8, -1);
      v290 = (void **)swift_slowAlloc(32, -1);
      v293 = (uint64_t)v234;
      aBlock = v290;
      *(_DWORD *)v238 = 138543618;
      v240 = v234;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      *v239 = v234;
      v241 = v239;

      v242 = v240;
      *(_WORD *)(v238 + 12) = 2082;
      v243 = v263;
      v245 = RDUserNotificationAction.rawValue.getter(v244);
      v293 = sub_10001A820(v245, v246, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, &aBlock);
      v247 = swift_bridgeObjectRelease();
      (*(void (**)(void **, uint64_t, __n128))(v275 + 8))(v243, v276, v247);
      _os_log_impl((void *)&_mh_execute_header, v235, v237, "DueDateDeltaAlarm: Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}", (uint8_t *)v238, 0x16u);
      v248 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v241, 1, v248);
      v35 = v291;
      swift_slowDealloc(v241, -1, -1);
      v249 = v290;
      swift_arrayDestroy(v290, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v249, -1, -1);
      swift_slowDealloc(v238, -1, -1);

    }
    else
    {

      (*(void (**)(void **, uint64_t))(v275 + 8))(v232, v233);
    }
    ((void (*)(NSObject *, void **))v265)(v271, v17);
    v34 = v289;
    goto LABEL_31;
  }
  v194 = objc_msgSend(v188, "dueDateDeltaAlertContext");
  if (v194)
  {
    v195 = v194;
    v273 = v186;
    v196 = objc_msgSend(v188, "fetchedCurrentDueDateDeltaAlert");
    if (v196)
    {
      v197 = v196;
      v272 = v188;
      v265 = (char *)v182;
      v198 = objc_msgSend(v195, "updateDueDateDeltaAlert:", v196);
      v199 = v261;
      Date.init()(v198);
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v269 + 8))(v199, v270);
      v201 = objc_msgSend(v198, "setAcknowledgedDate:", isa);

      v35 = v291;
      v43 = v281;
      goto LABEL_81;
    }

    v186 = v273;
  }
  v253 = Logger.logObject.getter(v194);
  v254 = static os_log_type_t.error.getter(v253);
  if (os_log_type_enabled(v253, v254))
  {
    v255 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v255 = 0;
    _os_log_impl((void *)&_mh_execute_header, v253, v254, "DueDateDeltaAlarm: Unable to get early alert context to set ackDate.", v255, 2u);
    swift_slowDealloc(v255, -1, -1);
  }

  return ((uint64_t (*)(NSObject *, void **))v182)(v271, v160);
}

uint64_t sub_1005BDBE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1005BDC14(uint64_t a1)
{
  uint64_t v1;

  sub_1005BAEE8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), "DueDateDeltaAlarm: Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}", "DueDateDeltaAlarm: Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}");
}

void sub_1005BDC3C(uint64_t a1)
{
  uint64_t v1;

  sub_1005BAEE8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), "ReminderAlarm: Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}", "ReminderAlarm: Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}");
}

uint64_t sub_1005BDC64()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1005BDC88(uint64_t a1)
{
  uint64_t v1;

  sub_1005BA2D0(a1, v1);
}

ValueMetadata *type metadata accessor for RDDataSourceAlarm()
{
  return &type metadata for RDDataSourceAlarm;
}

void destroy for RDProducerAlarm(uint64_t a1)
{

  sub_1001BB1AC(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = v4;
  sub_1001BB164(v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t assignWithCopy for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_1001BB164(v7, v8, v9, v10);
  v11 = *(void **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v14 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v10;
  sub_1001BB1AC(v11, v12, v13, v14);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 initializeWithTake for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDProducerAlarm(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  sub_1001BB1AC(v7, v8, v9, v10);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDProducerAlarm(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 35))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDProducerAlarm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarm()
{
  return &type metadata for RDProducerAlarm;
}

unint64_t sub_1005BDF00()
{
  unint64_t result;

  result = qword_1008513D8;
  if (!qword_1008513D8)
  {
    result = swift_getWitnessTable(&unk_1006C44A4, &type metadata for RDDataSourceAlarm);
    atomic_store(result, (unint64_t *)&qword_1008513D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDProducerAlarmType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1005BDF90 + 4 * byte_1006C435A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005BDFC4 + 4 * byte_1006C4355[v4]))();
}

uint64_t sub_1005BDFC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BDFCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005BDFD4);
  return result;
}

uint64_t sub_1005BDFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005BDFE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005BDFEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BDFF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarmType()
{
  return &type metadata for RDProducerAlarmType;
}

void destroy for RDProducerAlarmOrigin(uint64_t a1)
{
  sub_1001BB1AC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1001BB164(*(id *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1001BB164(*(id *)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1001BB1AC(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RDProducerAlarmOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1001BB1AC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDProducerAlarmOrigin(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDProducerAlarmOrigin(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1005BE1DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1005BE1E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDProducerAlarmOrigin()
{
  return &type metadata for RDProducerAlarmOrigin;
}

unint64_t sub_1005BE200()
{
  unint64_t result;

  result = qword_1008513E0;
  if (!qword_1008513E0)
  {
    result = swift_getWitnessTable(&unk_1006C4548, &type metadata for RDProducerAlarmType);
    atomic_store(result, (unint64_t *)&qword_1008513E0);
  }
  return result;
}

uint64_t sub_1005BE258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008513E8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008513E8);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

double sub_1005BE2E8(uint64_t a1, double a2, double a3, double a4)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(double *)(a1 + 32);
  if (v5 < 5)
    goto LABEL_12;
  v7 = a2 + 1.0;
  if (v6 > 0.0 && v6 <= v7)
  {
    v10 = 0xE400000000000000;
    v11 = 1751607624;
    v4 = a3;
    goto LABEL_13;
  }
  if (v7 >= v6 || v6 > v4 + v4 + 1.0)
  {
LABEL_12:
    v10 = 0xE700000000000000;
    v11 = 0x746C7561666544;
  }
  else
  {
    v10 = 0xE600000000000000;
    v11 = 0x6D756964654DLL;
    v4 = a4;
  }
LABEL_13:
  if (qword_1008379B0 != -1)
    swift_once(&qword_1008379B0, sub_1005BE258);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_1008513E8);
  swift_bridgeObjectRetain(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    v17 = swift_slowAlloc(32, -1);
    v20 = v17;
    *(_DWORD *)v16 = 136315906;
    swift_bridgeObjectRetain(v10);
    v19 = sub_10001A820(v11, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v16 + 12) = 2048;
    v19 = *(_QWORD *)&v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *(_WORD *)(v16 + 22) = 2048;
    v19 = *(_QWORD *)&v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *(_WORD *)(v16 + 32) = 2048;
    v19 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDAlarmEngine:debouncePolicy: DB load is '%s', debounce interval to use: %f s, stats: {average: %f, #sample: %ld}", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v10, 2);
  }
  return v4;
}

void sub_1005BE554(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *oslog;

  v13 = sub_10001A630(&qword_100851400);
  v14 = swift_allocObject(v13, 232, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1006A5140;
  *(_QWORD *)(v14 + 56) = type metadata accessor for RDTimeAlarmProducer();
  *(_QWORD *)(v14 + 64) = sub_10009FC50((unint64_t *)&unk_100840750, (uint64_t (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer, (uint64_t)&unk_1006B5454);
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 96) = type metadata accessor for RDDueDateDeltaAlarmProducer();
  *(_QWORD *)(v14 + 104) = sub_10009FC50(&qword_100840760, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer, (uint64_t)&unk_1006BAA5C);
  *(_QWORD *)(v14 + 72) = a3;
  *(_QWORD *)(v14 + 136) = type metadata accessor for RDLocationAlarmProducer();
  *(_QWORD *)(v14 + 144) = sub_10009FC50((unint64_t *)&unk_100840770, (uint64_t (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer, (uint64_t)&unk_1006BFEC8);
  *(_QWORD *)(v14 + 112) = a4;
  *(_QWORD *)(v14 + 176) = type metadata accessor for RDVehicleAlarmProducer();
  *(_QWORD *)(v14 + 184) = sub_10009FC50(&qword_100840768, (uint64_t (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer, (uint64_t)&unk_1006BC5D8);
  *(_QWORD *)(v14 + 152) = a5;
  *(_QWORD *)(v14 + 216) = type metadata accessor for RDContactInteractionAlarmProducer();
  *(_QWORD *)(v14 + 224) = sub_10009FC50(&qword_100840748, (uint64_t (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer, (uint64_t)&unk_1006AF1D4);
  *(_QWORD *)(v14 + 192) = a6;
  v15 = sub_10001A630(&qword_100851408);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v16 + 56) = type metadata accessor for RDAlarmNotificationConsumer();
  *(_QWORD *)(v16 + 64) = &off_1007EA358;
  *(_QWORD *)(v16 + 32) = a7;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  swift_retain(a7);
  sub_1005BA95C(v14, v16);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v16);
  if (qword_1008379B0 != -1)
    swift_once(&qword_1008379B0, sub_1005BE258);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001AAA8(v22, (uint64_t)qword_1008513E8);
  oslog = Logger.logObject.getter(v23);
  v24 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v24, "os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngineAssembly}", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

uint64_t sub_1005BE7EC(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100851448, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005BE828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100851410);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100851410);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1005BE8B8(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t Configuration;
  uint64_t v81;
  void (*v82)(_QWORD, _QWORD);
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  id v87;

  v81 = a1;
  v85 = a3;
  v78 = a6;
  v77 = type metadata accessor for REMRemindersListDataView.GroupSectionsModel(0);
  __chkstk_darwin(v77);
  v76 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel(0);
  v79 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v74 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v75 = (char *)&v62 - v12;
  v13 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v72 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  __chkstk_darwin(v13);
  v71 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v15 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v62 - v24;
  v84 = a5;
  v26 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter(v23);
  v86 = a2;
  v83 = a4;
  v27 = v87;
  sub_1004ABE50((uint64_t)a2, a4, v26);
  v29 = v28;

  if (!v27)
  {
    v65 = v15;
    v30 = v82;
    v66 = v17;
    v67 = v18;
    v87 = v29;
    v31 = Configuration;
    v68 = v21;
    v69 = v19;
    v32 = v86;
    v33 = v83;
    v34 = sub_1005C0A00(v81, v86, v85, v83, v84);
    v64 = v35;
    v81 = v34;
    v36 = objc_msgSend(v30, "fetchResultTokenToDiffAgainst");
    v37 = (uint64_t)v25;
    sub_100493C24(v36, (uint64_t)v32, (uint64_t)v25);
    v85 = 0;

    v38 = v66;
    v39 = ((uint64_t (*)(void))REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter)();
    v40 = (uint64_t)v71;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v39);
    v82 = *(void (**)(_QWORD, _QWORD))(v65 + 8);
    v82(v38, v31);
    v41 = v81;
    swift_bridgeObjectRetain(v81);
    v42 = sub_10049D93C(v40, v37, (uint64_t)v32, v33, 0, v41);
    v44 = v43;
    v45 = swift_bridgeObjectRelease();
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v72 + 8))(v40, v73, v45);
    v47 = REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter(v46);
    v48 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v47);
    v82(v38, v31);
    if ((v48 & 1) != 0)
      v49 = v64;
    else
      v49 = 0;
    v50 = v75;
    REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v41, v49, (v48 & 1) == 0, 2, v42, v44);
    v51 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    v52 = v74;
    v53 = v37;
    v63 = v37;
    v54 = v70;
    v51(v74, v50, v70);
    v55 = v87;
    v56 = v76;
    REMRemindersListDataView.GroupSectionsModel.init(listSections:group:)(v52, v55);
    v58 = v68;
    v57 = v69;
    v59 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v53, v67);
    v60 = sub_10009FC50(&qword_1008514F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupSectionsModel);
    v61 = sub_10009FC50(&qword_100851500, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v56, v58, v77, v60, v61);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v54);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v63, v59);
  }
}

uint64_t sub_1005BED38@<X0>(void **a1@<X0>, uint64_t (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X3>, void (*a5)(char *, uint64_t)@<X4>, void *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, uint64_t *a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Configuration;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  __n128 v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  unsigned __int8 v56;
  unsigned int *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  void (*v97)(char *, uint64_t);
  uint64_t (*v98)(char *, uint64_t);
  void *v99;
  uint64_t v100;

  v87 = a8;
  v94 = a7;
  v95 = a3;
  v98 = a2;
  v99 = a6;
  v96 = a4;
  v97 = a5;
  v80 = a9;
  v85 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType(0, a10);
  v89 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v79 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (char *)&v77 - v14;
  v16 = __chkstk_darwin(v15);
  v92 = (char *)&v77 - v17;
  v91 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v16);
  v86 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v78 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v84 = (char *)&v77 - v20;
  v90 = type metadata accessor for REMRemindersListDataView.ListSectionsModel(0);
  v82 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v77 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v81 = (char *)&v77 - v23;
  v24 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v24);
  v83 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v27 = __chkstk_darwin(Configuration);
  v29 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for REMRemindersListDataView.ListSectionsInvocation.Parameters(0, v27);
  v30 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v32 = (char *)&v77 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_10001A630(&qword_100850178);
  v34 = *(void **)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v37 = (void (*)(char *, uint64_t, uint64_t))((char *)&v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = *a1;
  v39 = REMList.codable.getter(v35);
  REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.ListSectionsInvocation.Parameters.init(list:configuration:)(v39, v29);
  v40 = v100;
  sub_100504130(v96, (uint64_t)v97, v99, (uint64_t)v32, (uint64_t)v37);
  if (v40)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v93);
    *a11 = v40;
  }
  else
  {
    v99 = v34;
    v42 = v85;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v93);
    v43 = v81;
    v100 = v33;
    v44 = REMRemindersListDataView.DefaultInvocationResult.model.getter(v33);
    v45 = v84;
    REMRemindersListDataView.ListSectionsModel.sectionsModel.getter(v44);
    v98 = *(uint64_t (**)(char *, uint64_t))(v82 + 8);
    v46 = v98(v43, v90);
    v47 = (uint64_t)v83;
    REMRemindersListDataView.SectionsModel.remindersCount.getter(v46);
    v97 = *(void (**)(char *, uint64_t))(v86 + 8);
    v97(v45, v91);
    v48 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
    {
      result = sub_10000882C(v47, &qword_100839AA0);
      v50 = 0;
    }
    else
    {
      v50 = REMRemindersListDataView.CountByCompleted.completed.getter();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    }
    v51 = v92;
    v52 = v88;
    v53 = v89;
    if (__OFADD__(*v87, v50))
    {
      __break(1u);
    }
    else
    {
      *v87 += v50;
      v54 = objc_msgSend(v38, "groceryContext");
      if (v54
        && (v55 = v54,
            v56 = objc_msgSend(v54, "shouldCategorizeGroceryItems"),
            v55,
            (v56 & 1) != 0))
      {
        v57 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.grocery(_:);
      }
      else
      {
        v57 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
      }
      v96 = v37;
      (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, *v57, v42);
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v51, v52, v42);
      v58 = objc_msgSend(v38, "objectID");
      v95 = REMObjectID.codable.getter(v58);

      v59 = objc_msgSend(v38, "displayName");
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v93 = v61;
      v94 = v60;

      v62 = objc_msgSend(v38, "color");
      if (v62)
      {
        v63 = v62;
        v88 = (char *)REMColor.codable.getter();

      }
      else
      {
        v88 = 0;
      }
      v64 = v77;
      v65 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v66 = v79;
      v67 = v92;
      v68 = v53;
      v69 = v42;
      v65(v79, v92, v42);
      v70 = v100;
      v71 = v96;
      v72 = REMRemindersListDataView.DefaultInvocationResult.model.getter(v100);
      v73 = v64;
      v74 = v78;
      REMRemindersListDataView.ListSectionsModel.sectionsModel.getter(v72);
      v75 = v98(v73, v90);
      v76 = REMRemindersListDataView.SectionsModel.sections.getter(v75);
      v97(v74, v91);
      REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)(v95, v94, v93, v88, v66, v76);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
      return (*((uint64_t (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))v99 + 1))(v71, v70);
    }
  }
  return result;
}

uint64_t sub_1005BF2F8@<X0>(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, uint64_t)@<X3>, void (*a5)(char *, uint64_t)@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, uint64_t *a11)
{
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Configuration;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  char *v84;
  _QWORD *v85;
  uint64_t v86;

  v75 = a8;
  v80 = a7;
  v81 = a3;
  v84 = a2;
  v85 = a6;
  v82 = a4;
  v83 = a5;
  v69 = a9;
  v67 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType(0, a10);
  v76 = *(_QWORD *)(v67 - 8);
  v12 = __chkstk_darwin(v67);
  v68 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for REMRemindersListDataView.SectionsModel(0, v12);
  v74 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v66 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v73 = (char *)&v65 - v16;
  v77 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel(0);
  v71 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v65 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v70 = (char *)&v65 - v19;
  v20 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v20);
  v72 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v23 = __chkstk_darwin(Configuration);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters(0, v23);
  v26 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A630(&qword_100850628);
  v30 = *(_QWORD **)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  v35 = REMSmartList.codable.getter(v31);
  REMRemindersListDataView.GroupSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.init(smartList:shouldFetchManualOrderingID:configuration:)(v35, 0, v25);
  v36 = v86;
  sub_1000CB13C(v82, (uint64_t)v83, v85, (uint64_t)v28, (uint64_t)v33);
  if (v36)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v79);
    *a11 = v36;
  }
  else
  {
    v85 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v79);
    v38 = v70;
    v86 = v29;
    v84 = v33;
    v39 = REMRemindersListDataView.DefaultInvocationResult.model.getter(v29);
    v40 = v73;
    REMRemindersListDataView.CustomSmartListSectionsModel.sectionsModel.getter(v39);
    v41 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
    v42 = v41(v38, v77);
    v43 = (uint64_t)v72;
    REMRemindersListDataView.SectionsModel.remindersCount.getter(v42);
    v83 = *(void (**)(char *, uint64_t))(v74 + 8);
    v83(v40, v78);
    v44 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
    {
      result = sub_10000882C(v43, &qword_100839AA0);
      v46 = 0;
    }
    else
    {
      v46 = REMRemindersListDataView.CountByCompleted.completed.getter();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    }
    v47 = v76;
    v48 = *v75 + v46;
    if (__OFADD__(*v75, v46))
    {
      __break(1u);
    }
    else
    {
      v82 = v41;
      *v75 = v48;
      v49 = objc_msgSend(v34, "objectID");
      v81 = REMObjectID.codable.getter(v49);

      v50 = objc_msgSend(v34, "name");
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v52 = v51;

      v53 = objc_msgSend(v34, "color");
      if (v53)
      {
        v54 = v53;
        v55 = REMColor.codable.getter();

      }
      else
      {
        v55 = 0;
      }
      v56 = v68;
      (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v68, enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:), v67);
      v57 = v65;
      v58 = v86;
      v59 = v84;
      v60 = REMRemindersListDataView.DefaultInvocationResult.model.getter(v86);
      v61 = v66;
      REMRemindersListDataView.CustomSmartListSectionsModel.sectionsModel.getter(v60);
      v62 = v82(v57, v77);
      v63 = v56;
      v64 = REMRemindersListDataView.SectionsModel.sections.getter(v62);
      v83(v61, v78);
      REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)(v81, v80, v52, v55, v63, v64);
      return ((uint64_t (*)(char *, uint64_t))v85[1])(v59, v58);
    }
  }
  return result;
}

uint64_t _s19PolymorphicListItemCMa_1()
{
  return objc_opt_self(_TtCE7reminddCO19ReminderKitInternal24REMRemindersListDataView23GroupSectionsInvocationP33_335363FECA984253F018F2A71D2F6EB419PolymorphicListItem);
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa_1()
{
  return &_s19PolymorphicListItemC5ModelON_1;
}

void sub_1005BF834(uint64_t a1, int a2, _QWORD *a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;

  v8 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, a4);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_10083F520);
  __chkstk_darwin(v12);
  v16 = (void **)((char *)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v63) = a2;
  v59[1] = v4;
  v60 = v17;
  v18 = (char *)v16 + *(int *)(v13 + 48);
  v59[0] = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = a1 + v59[0];
  v65 = *(_QWORD *)(v14 + 72);
  v62 = a1;
  swift_bridgeObjectRetain(a1);
  sub_1005C1228(v19, (uint64_t)v16);
  v70 = *v16;
  v20 = (uint64_t)v70;
  v61 = v9;
  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v64 = v18;
  v66 = v8;
  v21(v11, v18, v8);
  v22 = (_QWORD *)*a3;
  v24 = sub_1002C6730(v20);
  v25 = v22[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    goto LABEL_23;
  v28 = v23;
  if (v22[3] >= v27)
  {
    if ((v63 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1002D6ACC();
      if ((v28 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v35 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    *(_QWORD *)(v35[6] + 8 * v24) = v20;
    v36 = v35[7];
    v63 = *(_QWORD *)(v61 + 72);
    v37 = v66;
    v21((char *)(v36 + v63 * v24), v11, v66);
    v38 = v35[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v35[2] = v40;
    v41 = v60 - 1;
    if (v60 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(v62, 2);
      return;
    }
    v42 = v62 + v65 + v59[0];
    while (1)
    {
      sub_1005C1228(v42, (uint64_t)v16);
      v70 = *v16;
      v43 = (uint64_t)v70;
      v21(v11, v64, v37);
      v44 = (_QWORD *)*a3;
      v45 = sub_1002C6730(v43);
      v47 = v44[2];
      v48 = (v46 & 1) == 0;
      v39 = __OFADD__(v47, v48);
      v49 = v47 + v48;
      if (v39)
        break;
      v50 = v46;
      if (v44[3] < v49)
      {
        sub_1002CDBC4(v49, 1);
        v45 = sub_1002C6730(v43);
        if ((v50 & 1) != (v51 & 1))
          goto LABEL_25;
      }
      if ((v50 & 1) != 0)
        goto LABEL_10;
      v52 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      *(_QWORD *)(v52[6] + 8 * v45) = v43;
      v37 = v66;
      v21((char *)(v52[7] + v63 * v45), v11, v66);
      v53 = v52[2];
      v39 = __OFADD__(v53, 1);
      v54 = v53 + 1;
      if (v39)
        goto LABEL_24;
      v52[2] = v54;
      v42 += v65;
      if (!--v41)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002CDBC4(v27, v63 & 1);
  v29 = sub_1002C6730(v20);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    if ((v28 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v31 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v31);
    v69 = v31;
    swift_errorRetain(v31);
    v32 = sub_10001A630((uint64_t *)&unk_10083AA20);
    if ((swift_dynamicCast(v32, &v69, v32, &type metadata for _MergeError, 0) & 1) == 0)
    {
      v33 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v11, v66, v33);
      v34 = v70;
      swift_bridgeObjectRelease();

      swift_errorRelease(v69);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  v55 = type metadata accessor for REMObjectID_Codable(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v55);
  __break(1u);
LABEL_26:
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v56._object = (void *)0x8000000100701A20;
  v56._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v56);
  v57 = type metadata accessor for REMObjectID_Codable(0);
  _print_unlocked<A, B>(_:_:)(&v70, &v67, v57, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v58._countAndFlagsBits = 39;
  v58._object = (void *)0xE100000000000000;
  String.append(_:)(v58);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, v68, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

_QWORD *sub_1005BFCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;

  v3 = v2;
  v40 = a2;
  v5 = sub_10001A630(&qword_100843618);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v39 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v35 = (char *)v34 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_23;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter(v33))
  {
    v34[1] = v3;
    v38 = a1 & 0xC000000000000001;
    v41 = _swiftEmptyArrayStorage;
    v15 = 4;
    v36 = v14;
    v37 = a1;
    while (1)
    {
      v3 = v15 - 4;
      v16 = v38 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a1) : *(id *)(a1 + 8 * v15);
      v17 = v16;
      v18 = v15 - 3;
      if (__OFADD__(v3, 1))
        break;
      v19 = REMObjectID.codable.getter(v16);
      v20 = (void *)v19;
      v21 = v40;
      if (*(_QWORD *)(v40 + 16) && (v22 = sub_1002C6730(v19), (v23 & 1) != 0))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, *(_QWORD *)(v21 + 56) + *(_QWORD *)(v10 + 72) * v22, v9);
        v24 = 0;
      }
      else
      {
        v24 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v24, 1, v9);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_100843618);
      }
      else
      {
        v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v26 = v35;
        v25(v35, v8, v9);
        v25(v39, v26, v9);
        swift_isUniquelyReferenced_nonNull_native(v41);
        if ((v27 & 1) != 0)
          v28 = (unint64_t)v41;
        else
          v28 = sub_1002C8738(0, v41[2] + 1, 1, (unint64_t)v41);
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
          v28 = sub_1002C8738(v29 > 1, v30 + 1, 1, v28);
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v31 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v41 = (_QWORD *)v28;
        v25((char *)(v28 + v31 + *(_QWORD *)(v10 + 72) * v30), v39, v9);
      }
      a1 = v37;
      ++v15;
      if (v18 == v36)
      {
        swift_bridgeObjectRelease();
        return v41;
      }
    }
    __break(1u);
LABEL_23:
    if (a1 < 0)
      v33 = a1;
    else
      v33 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1005BFFC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  __n128 v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  id v56;
  id v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  int64_t v79;
  _QWORD *v80;
  char *v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  uint64_t v97;
  void *v98;
  _QWORD *v99;
  char *v100;
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD v110[6];
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v6 = v5;
  v12 = sub_10001A630(&qword_10083F520);
  v105 = *(_QWORD *)(v12 - 8);
  v106 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v63 = a2;
    else
      v63 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v15 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease();
    if (!v15)
      goto LABEL_57;
  }
  else
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      goto LABEL_57;
  }
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v64 = a3;
    else
      v64 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v16 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_5;
LABEL_57:
    swift_bridgeObjectRetain(a1);
    return (uint64_t)a1;
  }
  v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    goto LABEL_57;
LABEL_5:
  v115 = (uint64_t)_swiftEmptyArrayStorage;
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_59;
  }
  v108 = v16;
  v103 = a3;
  v98 = a5;
  v101 = (id)a4;
  v99 = a1;
  v100 = v14;
  v102 = v6;
  v17 = v104;
  v107 = v104 & 0xC000000000000001;
  swift_bridgeObjectRetain(v104);
  for (i = 0; i != v15; ++i)
  {
    if (v107)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
    else
      v20 = *(id *)(v17 + 8 * i + 32);
    v21 = v20;
    v16 = _s19PolymorphicListItemCMa_1();
    v22 = swift_allocObject(v16, 24, 7);
    v23 = type metadata accessor for REMList_Codable(0);
    v112 = v23;
    v113 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
    v114 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
    v111[0] = v21;
    sub_100385E40((uint64_t)v111, (uint64_t)v110);
    v24 = sub_10001A630(&qword_100849100);
    if (swift_dynamicCast(&v109, v110, v24, v23, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
      v25 = v109;
LABEL_16:
      *(_QWORD *)(v22 + 16) = v25;
      v27 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v110);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      a4 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v28 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (a4 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a4, v22);
      specialized Array._endMutation()(v29);
      continue;
    }
    v26 = type metadata accessor for REMSmartList_Codable(0);
    if (swift_dynamicCast(&v109, v110, v24, v26, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
      v25 = v109 | 0x8000000000000000;
      goto LABEL_16;
    }
    if (qword_1008379B8 != -1)
      swift_once(&qword_1008379B8, sub_1005BE828);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_100851410);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    a4 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)a4, "unknown or unsupported REM object type for PolymorphicListItem", v34, 2u);
      v35 = v34;
      v17 = v104;
      swift_slowDealloc(v35, -1, -1);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v110);
    swift_deallocPartialClassInstance(v22, v16, 24, 7, v19);
  }
  swift_bridgeObjectRelease();
  v36 = v115;
  v115 = (uint64_t)_swiftEmptyArrayStorage;
  if (v108 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v104 = v36;
  v37 = v103;
  v107 = v103 & 0xC000000000000001;
  swift_bridgeObjectRetain(v103);
  v38 = 0;
  do
  {
    if (v107)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v37);
    else
      v40 = *(id *)(v37 + 8 * v38 + 32);
    v41 = v40;
    v42 = swift_allocObject(v16, 24, 7);
    v43 = type metadata accessor for REMSmartList_Codable(0);
    v112 = v43;
    v113 = sub_10009FC50(&qword_100849108, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
    v114 = sub_10009FC50(&qword_100849110, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
    v111[0] = v41;
    sub_100385E40((uint64_t)v111, (uint64_t)v110);
    if (swift_dynamicCast(&v109, v110, v24, v23, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
      v44 = v109;
LABEL_34:
      *(_QWORD *)(v42 + 16) = v44;
      v45 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v110);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      v47 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v46 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v47 >= v46 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1);
      v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v42);
      specialized Array._endMutation()(v48);
      goto LABEL_26;
    }
    if (swift_dynamicCast(&v109, v110, v24, v43, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
      v44 = v109 | 0x8000000000000000;
      goto LABEL_34;
    }
    if (qword_1008379B8 != -1)
      swift_once(&qword_1008379B8, sub_1005BE828);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001AAA8(v49, (uint64_t)qword_100851410);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "unknown or unsupported REM object type for PolymorphicListItem", v53, 2u);
      v54 = v53;
      v37 = v103;
      swift_slowDealloc(v54, -1, -1);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v110);
    swift_deallocPartialClassInstance(v42, v16, 24, 7, v39);
LABEL_26:
    ++v38;
  }
  while (v108 != v38);
  swift_bridgeObjectRelease();
  v111[0] = v104;
  sub_1001E2404(v115);
  a4 = v111[0];
  if (!(v111[0] >> 62))
  {
    v55 = *(_QWORD *)((v111[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    v56 = v101;
    v57 = v101;
    if (v55 > 1)
      goto LABEL_43;
LABEL_64:

    v61 = 0;
    v60 = v102;
    goto LABEL_65;
  }
LABEL_60:
  if (a4 < 0)
    v65 = a4;
  else
    v65 = a4 & 0xFFFFFFFFFFFFFF8;
  v56 = v101;
  v66 = v101;
  swift_bridgeObjectRetain(a4);
  v67 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease();
  if (v67 <= 1)
    goto LABEL_64;
LABEL_43:
  v58 = v102;
  sub_100204328(v56, v98);
  v60 = v58;
  if (v58)
  {

    swift_errorRelease(v58);
    v61 = 0;
    v60 = 0;
  }
  else if (v59)
  {
    v61 = v59;
    v62 = REMOrderedIdentifierMap.reorder<A>(objects:)(a4, v16);
    swift_bridgeObjectRelease();

    a4 = v62;
  }
  else
  {

    v61 = 0;
  }
LABEL_65:
  v107 = (unint64_t)v61;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v77 = a4;
    else
      v77 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v68 = _CocoaArrayWrapper.endIndex.getter(v77);
    swift_bridgeObjectRelease();
    if (!v68)
      goto LABEL_78;
LABEL_67:
    v111[0] = _swiftEmptyArrayStorage;
    v69 = v111;
    specialized ContiguousArray.reserveCapacity(_:)(v68);
    if ((v68 & 0x8000000000000000) == 0)
    {
      v70 = 0;
      do
      {
        if ((a4 & 0xC000000000000001) != 0)
        {
          v71 = specialized _ArrayBuffer._getElementSlowPath(_:)(v70, a4);
        }
        else
        {
          v71 = *(_QWORD *)(a4 + 8 * v70 + 32);
          swift_retain();
        }
        v72 = objc_msgSend((id)(*(_QWORD *)(v71 + 16) & 0x7FFFFFFFFFFFFFFFLL), "remObjectID");
        v73 = swift_release(v71);
        ++v70;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v73);
        v74 = *(_QWORD *)(v111[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v74);
        v75 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
        specialized ContiguousArray._endMutation()(v75);
      }
      while (v68 != v70);
      v76 = (_QWORD *)v111[0];
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    __break(1u);
    goto LABEL_92;
  }
  v68 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v68)
    goto LABEL_67;
LABEL_78:
  swift_bridgeObjectRelease();
  v76 = _swiftEmptyArrayStorage;
LABEL_79:
  v78 = v99;
  v79 = v99[2];
  v80 = _swiftEmptyArrayStorage;
  v81 = v100;
  if (v79)
  {
    v104 = (uint64_t)v76;
    v102 = v60;
    v111[0] = _swiftEmptyArrayStorage;
    sub_1001C1DF0(0, v79, 0);
    v80 = (_QWORD *)v111[0];
    v108 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v82);
    v83 = *(_QWORD *)(v108 - 8);
    v84 = (uint64_t)v78 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
    v85 = *(_QWORD *)(v83 + 72);
    v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 16);
    do
    {
      v87 = v86(&v81[*(int *)(v106 + 48)], v84, v108);
      *(_QWORD *)v81 = REMRemindersListDataView.ListsSectionsModel.List.listID.getter(v87);
      v111[0] = v80;
      v89 = v80[2];
      v88 = v80[3];
      if (v89 >= v88 >> 1)
      {
        sub_1001C1DF0(v88 > 1, v89 + 1, 1);
        v80 = (_QWORD *)v111[0];
      }
      v80[2] = v89 + 1;
      sub_1005C11E0((uint64_t)v81, (uint64_t)v80+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(_QWORD *)(v105 + 72) * v89);
      v84 += v85;
      --v79;
    }
    while (v79);
    v60 = v102;
    v76 = (_QWORD *)v104;
  }
  v90 = v80[2];
  v91 = (void *)v107;
  if (v90)
  {
    sub_10001A630(&qword_1008443F8);
    v92 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v90);
  }
  else
  {
    v92 = _swiftEmptyDictionarySingleton;
  }
  v111[0] = v92;
  v93 = swift_bridgeObjectRetain(v80);
  sub_1005BF834(v94, 1, v111, v93);
  v69 = v60;
  if (v60)
  {
LABEL_92:
    result = swift_unexpectedError(v69, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v95 = v111[0];
  swift_retain();
  a1 = sub_1005BFCCC((uint64_t)v76, v95);
  swift_bridgeObjectRelease();

  swift_release_n(v95);
  return (uint64_t)a1;
}

uint64_t sub_1005C0A00(uint64_t a1, _QWORD *a2, _QWORD *a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  __n128 v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  _QWORD *v71;

  v6 = v5;
  v69 = a4;
  v66 = a1;
  v67 = a3;
  v65 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v65);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s10PredicatesOMa_1(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter(v12);
  v16 = objc_msgSend(v15, "objectID");

  v68 = a5;
  v17 = REMRemindersListDataView.GroupSectionsInvocation.Parameters.includePinnedSublists.getter();
  *(_QWORD *)v14 = v16;
  LOBYTE(v18) = v17 & 1;
  v14[8] = v17 & 1;
  swift_storeEnumTagMultiPayload(v14, v11, 3);
  v70 = (uint64_t *)v16;
  sub_10000A3AC();
  v20 = v19;
  v21 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v22 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v23 = objc_msgSend((id)swift_getObjCClassFromMetadata(v21), "entity");
  objc_msgSend(v22, "setEntity:", v23);

  objc_msgSend(v22, "setAffectedStores:", 0);
  objc_msgSend(v22, "setPredicate:", v20);

  if (qword_1008376D0 != -1)
    goto LABEL_13;
  while (1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v22, "setSortDescriptors:", isa);

    v25 = (uint64_t)a2;
    v26 = NSManagedObjectContext.fetch<A>(_:)(v22, v21);
    if (v6)
      break;
    v64 = v10;
    v71 = (_QWORD *)v26;
    v27 = sub_10001A630(&qword_10083FF50);
    v28 = sub_1000EC4D8();
    v29 = Sequence.elements<A>(ofType:)(v21, v27, v21, v28);
    swift_bridgeObjectRelease();

    sub_1004A87E4(v29, v69);
    v31 = v30;
    swift_bridgeObjectRelease();
    v63 = v31;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v57 = v31;
      else
        v57 = v31 & 0xFFFFFFFFFFFFFF8;
      v58 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
      swift_bridgeObjectRetain(v31);
      v33 = _bridgeCocoaArray<A>(_:)(v57, v58);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v31);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
      sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
      v33 = v31;
    }
    v34 = (uint64_t)v64;
    v71 = 0;
    v35 = type metadata accessor for REMRemindersListDataView.ListSectionsInvocation(0);
    v36 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v35)), "init");
    __chkstk_darwin(v36);
    v37 = v66;
    *(&v61 - 8) = v38;
    *(&v61 - 7) = v37;
    v39 = v67;
    *(&v61 - 6) = (uint64_t)a2;
    *(&v61 - 5) = (uint64_t)v39;
    v40 = v68;
    *(&v61 - 4) = (uint64_t)v69;
    *(&v61 - 3) = v40;
    *(&v61 - 2) = (uint64_t)&v71;
    v62 = sub_1002004C0((void (*)(id *, uint64_t *))sub_1005C1170, (uint64_t)(&v61 - 10), v33);
    swift_bridgeObjectRelease();

    v42 = v71;
    v43 = v70;
    *(_QWORD *)v34 = v70;
    *(_BYTE *)(v34 + 8) = v18;
    swift_storeEnumTagMultiPayload(v34, v65, 4);
    v10 = v43;
    v44 = sub_10058C44C(v34, (uint64_t)a2, 0);
    v45 = (uint64_t)v69;
    v6 = 0;
    v18 = (uint64_t)sub_10058CE80(v44, v69);
    swift_bridgeObjectRelease();
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v59 = v18;
      else
        v59 = v18 & 0xFFFFFFFFFFFFFF8;
      v60 = sub_1000151B0(0, &qword_10083B1E0, REMSmartList_ptr);
      swift_bridgeObjectRetain(v18);
      v47 = _bridgeCocoaArray<A>(_:)(v59, v60);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v18);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v46);
      sub_1000151B0(0, &qword_10083B1E0, REMSmartList_ptr);
      v47 = v18;
    }
    v71 = 0;
    v48 = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation(0);
    v49 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v48)), "init");
    v70 = &v61;
    __chkstk_darwin(v49);
    v50 = v66;
    *(&v61 - 8) = v51;
    *(&v61 - 7) = v50;
    v52 = v67;
    *(&v61 - 6) = (uint64_t)a2;
    *(&v61 - 5) = (uint64_t)v52;
    *(&v61 - 4) = v45;
    *(&v61 - 3) = v68;
    *(&v61 - 2) = (uint64_t)&v71;
    v53 = sub_1002004C0((void (*)(id *, uint64_t *))sub_1005C118C, (uint64_t)(&v61 - 10), v47);
    v69 = a2;
    v54 = (uint64_t *)v53;
    swift_bridgeObjectRelease();

    v67 = v71;
    v71 = (_QWORD *)v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v54);
    v70 = v54;
    sub_1001E25DC((uint64_t)v54);
    a2 = v71;
    v56 = (void *)REMRemindersListDataView.GroupSectionsInvocation.Parameters.group.getter(v55);
    v22 = objc_msgSend(v56, "accountID");

    v21 = v63;
    v25 = sub_1005BFFC8(a2, v63, v18, (uint64_t)v22, v69);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001C744((uint64_t)v64, _s10PredicatesOMa_3);
    sub_10001C744((uint64_t)v14, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v42, v67))
      return v25;
    __break(1u);
LABEL_13:
    swift_once(&qword_1008376D0, sub_1004A7024);
  }

  sub_10001C744((uint64_t)v14, _s10PredicatesOMa_1);
  return v25;
}

uint64_t sub_1005C1170(uint64_t a1, uint64_t a2)
{
  return sub_1005C11A8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005BED38);
}

uint64_t sub_1005C118C(uint64_t a1, uint64_t a2)
{
  return sub_1005C11A8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005BF2F8);
}

uint64_t sub_1005C11A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], a2);
}

uint64_t sub_1005C11E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083F520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C1228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083F520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C1270@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t inited;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  __n128 v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  __n128 v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  void *v42;
  char v43[88];
  unint64_t v44;

  v3 = v1;
  v37 = a1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMJSONType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
  v15 = sub_1001EA650(v14);
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v17 = sub_10009FC50(&qword_100851510, type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t)&unk_1006B2938);
  Array<A>.toJSON()(v15, v16, v17);
  result = swift_release(v15);
  if (!v2)
  {
    v34[1] = 0;
    v36 = v11;
    v35 = v10;
    v19 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v19, v43);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 40) = 0x80000001007066D0;
    REMJSONType.associatedValueAsAny.getter(inited);
    v21 = sub_10016E7E4(inited);
    sub_1000CDA2C(v3 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t)v6);
    v23 = v38;
    v22 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v6, 1, v39) == 1)
    {
      sub_1000EA320((uint64_t)v6);
    }
    else
    {
      v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v9, v6, v22);
      v25 = Date.timeIntervalSinceReferenceDate.getter(v24);
      v42 = &type metadata for Double;
      *(double *)&v41 = v25;
      sub_10001A6CC(&v41, v40);
      swift_isUniquelyReferenced_nonNull_native(v21);
      v44 = v21;
      sub_10028CB74(v40, 0xD000000000000029, 0x80000001007066F0, v26);
      v21 = v44;
      v27 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v23 + 8))(v9, v22, v27);
    }
    v28 = v37;
    v29 = v35;
    v30 = v36;
    v42 = &type metadata for Int;
    *(_QWORD *)&v41 = kREMSupportedVersionFor2024;
    sub_10001A6CC(&v41, v40);
    swift_isUniquelyReferenced_nonNull_native(v21);
    v44 = v21;
    sub_10028CB74(v40, 0xD000000000000017, 0x80000001006F4060, v31);
    v32 = v44;
    v33 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v30 + 8))(v13, v29, v33);
    *v28 = v32;
    return (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(v30 + 104))(v28, enum case for REMJSONType.jsonObject(_:), v29);
  }
  return result;
}

uint64_t sub_1005C15C8@<X0>(unint64_t *a1@<X8>)
{
  return sub_1005C1270(a1);
}

uint64_t sub_1005C15E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1005C1610(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1005C1610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char **v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v2 = sub_10001A630(&qword_100850100);
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  __chkstk_darwin(v2);
  v51 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v48);
  v47 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v50 = (char *)&v47 - v6;
  __chkstk_darwin(v7);
  v49 = (uint64_t *)((char *)&v47 - v8);
  v54 = sub_10001A630(&qword_100851508);
  v9 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10001A630(&qword_100839B00);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMJSONType(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v17 + 16))(v20, a1, v16, v18);
  v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v20, v16);
  if (v21 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v20, v16);
    v22 = *v20;
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v12);
    v56 = kREMSupportedVersionFor2024;
    v23 = v55;
    Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)(&v57, 0xD000000000000017, 0x80000001006F4060, v15, &v56, v22, &type metadata for Int);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v23)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v15;
    }
    v15 = v57;
    if ((rem_isUnsupportedVersionByRuntime(v57) & 1) == 0)
    {
      v33 = type metadata accessor for RDPermanentlyHiddenReminder(0);
      v34 = sub_10009FC50(&qword_100851510, type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t)&unk_1006B2938);
      *v11 = v33;
      v11[1] = v34;
      v35 = v54;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Dictionary<>.DeserializableValueType.jsonArray<A, B><A1>(_:), v54);
      v36 = sub_10001A630(&qword_100851518);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD00000000000001ALL, 0x80000001007066D0, v11, v22, v36);
      (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v35);
      v37 = sub_10011FD1C((uint64_t)v57);
      v38 = swift_bridgeObjectRelease();
      v40 = v51;
      v39 = v52;
      v41 = v53;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v52 + 104))(v51, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v53, v38);
      v42 = type metadata accessor for Date(0);
      v43 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v50, 1, 1, v42);
      v44 = v49;
      Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)(v49, 0xD000000000000029, 0x80000001007066F0, v40, v43, v22, v48);
      swift_bridgeObjectRelease();
      sub_1000EA320(v43);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
      v45 = v47;
      sub_1000CDA74((uint64_t)v44, v47);
      v46 = type metadata accessor for RDRecentlyDeletedInfo(0);
      v15 = (char *)swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      *((_QWORD *)v15 + 2) = v37;
      sub_1000CDA74(v45, (uint64_t)&v15[OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate]);
      return (uint64_t)v15;
    }
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for REMJSONDeserializationError(0);
    v31 = sub_10009FC50((unint64_t *)&qword_100839B18, (uint64_t (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError, (uint64_t)&protocol conformance descriptor for REMJSONDeserializationError);
    swift_allocError(v24, v31, 0, 0);
    v27 = v32;
    *v32 = v15;
    v28 = (unsigned int *)&enum case for REMJSONDeserializationError.notSupported(_:);
LABEL_6:
    v29 = (*(uint64_t (**)(char **, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, *v28, v24);
    swift_willThrow(v29);
    return (uint64_t)v15;
  }
  if (v21 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v20, v16);
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for REMJSONDeserializationError(0);
    v25 = sub_10009FC50((unint64_t *)&qword_100839B18, (uint64_t (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError, (uint64_t)&protocol conformance descriptor for REMJSONDeserializationError);
    swift_allocError(v24, v25, 0, 0);
    v27 = v26;
    v28 = (unsigned int *)&enum case for REMJSONDeserializationError.invalidData(_:);
    goto LABEL_6;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v16, v16);
  __break(1u);
  return result;
}

uint64_t sub_1005C1B88@<X0>(uint64_t a1@<X8>)
{
  return sub_1005C1D98((void (*)(uint64_t))&static Date.distantPast.getter, a1);
}

BOOL sub_1005C1B94(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[4];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v27 - v9;
  sub_1005C1D98((void (*)(uint64_t))&static Date.distantFuture.getter, (uint64_t)v27 - v9);
  sub_10057A248((uint64_t)v8);
  v11 = static Date.< infix(_:_:)(v10, v8);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  if ((v11 & 1) != 0)
    return 1;
  sub_1005C1D98((void (*)(uint64_t))&static Date.distantFuture.getter, (uint64_t)v10);
  sub_10057A248((uint64_t)v8);
  v14 = static Date.== infix(_:_:)(v10, v8);
  v12(v8, v4);
  v12(v10, v4);
  if ((v14 & 1) == 0)
    return 0;
  v15 = objc_msgSend(v2, "name");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0xE000000000000000;
  }
  v27[2] = v17;
  v27[3] = v19;
  v20 = objc_msgSend(a1, "name");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0xE000000000000000;
  }
  v27[0] = v22;
  v27[1] = v24;
  v25 = sub_1000E525C();
  v26 = StringProtocol.localizedStandardCompare<A>(_:)(v27, &type metadata for String, &type metadata for String, v25, v25);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v24);
  return v26 == -1;
}

uint64_t sub_1005C1D8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1005C1D98((void (*)(uint64_t))&static Date.distantFuture.getter, a1);
}

uint64_t sub_1005C1D98@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v18;

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v4, "creationDate");
  if (v13)
  {
    v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v15(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
    if ((_DWORD)v16 != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a2, v12, v6);
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  a1(v16);
  return sub_1000EA320((uint64_t)v12);
}

uint64_t sub_1005C1EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100851520);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100851520);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t type metadata accessor for RDNoOpAppProtectionGuard()
{
  return objc_opt_self(_TtC7remindd24RDNoOpAppProtectionGuard);
}

uint64_t sub_1005C1FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, _QWORD))
{
  return a10(1, 0);
}

uint64_t sub_1005C1FD0(char a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v24)(_QWORD, _QWORD);
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;

  if (a2)
  {
    swift_getErrorValue(a2, v26, v25);
    v6 = Error.rem_errorDescription.getter(v25[1], v25[2]);
    v8 = v7;
LABEL_9:
    if (qword_1008379C0 != -1)
      swift_once(&qword_1008379C0, sub_1005C1EF8);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100851520);
    v17 = swift_bridgeObjectRetain(v8);
    v11 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v18))
    {
      v19 = swift_slowAlloc(18, -1);
      v24 = a3;
      v20 = swift_slowAlloc(32, -1);
      v28 = v20;
      *(_DWORD *)v19 = 67240450;
      LODWORD(v27) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);
      *(_WORD *)(v19 + 8) = 2082;
      swift_bridgeObjectRetain(v8);
      v27 = sub_10001A820(v6, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v18, "RDSystemAppProtectionGuard: initiate auth finished {success: %{BOOL,public}d, error: %{public}s}", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      v21 = v20;
      a3 = v24;
      swift_slowDealloc(v21, -1, -1);
      v15 = v19;
      goto LABEL_13;
    }

    v22 = v8;
LABEL_15:
    swift_bridgeObjectRelease_n(v22, 2);
    return a3(a1 & 1, a2);
  }
  v6 = 7104878;
  if ((a1 & 1) == 0)
  {
    v8 = 0xE300000000000000;
    goto LABEL_9;
  }
  if (qword_1008379C0 != -1)
    swift_once(&qword_1008379C0, sub_1005C1EF8);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)qword_100851520);
  v10 = swift_bridgeObjectRetain(0xE300000000000000);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (!os_log_type_enabled(v11, v12))
  {

    v22 = 0xE300000000000000;
    goto LABEL_15;
  }
  v13 = swift_slowAlloc(18, -1);
  v14 = swift_slowAlloc(32, -1);
  v28 = v14;
  *(_DWORD *)v13 = 67240450;
  LODWORD(v27) = 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);
  *(_WORD *)(v13 + 8) = 2082;
  swift_bridgeObjectRetain(0xE300000000000000);
  v27 = sub_10001A820(7104878, 0xE300000000000000, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
  swift_bridgeObjectRelease_n(0xE300000000000000, 3);
  _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDSystemAppProtectionGuard: initiate auth finished {success: %{BOOL,public}d, error: %{public}s}", (uint8_t *)v13, 0x12u);
  swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v14, -1, -1);
  v15 = v13;
LABEL_13:
  swift_slowDealloc(v15, -1, -1);

  return a3(a1 & 1, a2);
}

uint64_t type metadata accessor for RDSystemAppProtectionGuard()
{
  return objc_opt_self(_TtC7remindd26RDSystemAppProtectionGuard);
}

void sub_1005C237C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void (*a5)(uint64_t a1, uint64_t a2, void *a3), void *a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  sub_1005C24B4(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 1, a10, a11);
}

void sub_1005C2394(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[40];

  v2 = type metadata accessor for REMFeatureFlags(0);
  __chkstk_darwin(v2);
  sub_1000184A8(a1, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_1005C2420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 - 56) = v1;
  *(_WORD *)(v2 - 52) = WORD2(v1) & 0x3FFF;
  sub_1005C2860(v0);
  return 2;
}

void sub_1005C24B4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void (*a5)(uint64_t a1, uint64_t a2, void *a3), void *a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  void *v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v36;
  void **aBlock;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, void *);
  void *v40;
  uint64_t (*v41)(char, uint64_t);
  uint64_t v42;

  v13 = (void *)objc_opt_self(APApplication);
  v14 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v13, "applicationWithBundleIdentifier:", v14);

  if (qword_1008379C0 != -1)
    swift_once(&qword_1008379C0, sub_1005C1EF8);
  v15 = a10;
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_100851520);
  v17 = swift_bridgeObjectRetain_n(a8, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (void **)swift_slowAlloc(64, -1);
    aBlock = v21;
    *(_DWORD *)v20 = 136446466;
    swift_bridgeObjectRetain(a8);
    v36 = sub_10001A820(a7, a8, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &aBlock);
    swift_bridgeObjectRelease_n(a8, 3);
    *(_WORD *)(v20 + 12) = 2082;
    if ((a9 & 1) != 0)
      v22 = 4408148;
    else
      v22 = 0xD000000000000013;
    if ((a9 & 1) != 0)
      v23 = 0xE300000000000000;
    else
      v23 = 0x8000000100709850;
    v36 = sub_10001A820(v22, v23, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &aBlock);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDSystemAppProtectionGuard: initiate auth {processDescription: %{public}s, accessGrantReason: %{public}s}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    v24 = v21;
    v15 = a10;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a8, 2);
  }
  if ((a9 & 1) != 0)
    v25 = 1;
  else
    v25 = 2;
  v30 = v25;
  v26 = objc_msgSend((id)objc_opt_self(APGuard), "sharedGuard");
  v27 = swift_allocObject(&unk_1007FCCC8, 32, 7);
  *(_QWORD *)(v27 + 16) = v15;
  *(_QWORD *)(v27 + 24) = a11;
  v41 = sub_1005C2858;
  v42 = v27;
  aBlock = _NSConcreteStackBlock;
  v38 = 1107296256;
  v39 = sub_1001BCC34;
  v40 = &unk_1007FCCE0;
  v28 = _Block_copy(&aBlock);
  v29 = v42;
  swift_retain(a11);
  swift_release(v29);
  aBlock = a3;
  v38 = a4;
  v39 = a5;
  v40 = a6;
  objc_msgSend(v26, "initiateAuthenticationWithShieldingForSubject:onBehalfOfProcessWithAuditToken:accessGrantReason:completion:", v31, &aBlock, v30, v28);

  _Block_release(v28);
}

uint64_t sub_1005C2834()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005C2858(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1005C1FD0(a1, a2, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_1005C2860(uint64_t a1)
{
  sub_1000178E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
  return a1;
}

uint64_t sub_1005C289C(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_1008516A0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AssignedInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1005C28D8(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100837278 != -1)
    swift_once(&qword_100837278, sub_10034C0CC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_100846A10);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unexpected .localInternal in AccountsListDataView", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  *a1 = 3;
}

uint64_t sub_1005C29C0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001D92D4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1005C44AC(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_1005C2A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100851668);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100851668);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1005C2AC8(uint64_t (*a1)(uint64_t a1)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, __n128);
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  void *v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, __n128);
  uint64_t v41;
  int v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  char *v52;
  char *v53;
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t, __n128);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  void *v93;
  id v94;

  v92 = a4;
  v93 = a3;
  v90 = a2;
  v85 = a5;
  v78 = type metadata accessor for REMRemindersListDataView.AssignedModel(0);
  v86 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v83 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v84 = (char *)&v64 - v9;
  v87 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  v89 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v82 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v88 = (char *)&v64 - v12;
  v13 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v80 = *(_QWORD *)(v13 - 8);
  v81 = v13;
  __chkstk_darwin(v13);
  v79 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v64 - v20;
  v22 = (_QWORD *)type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v23 = *(v22 - 1);
  __chkstk_darwin(v22);
  v25 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))((char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = a1;
  v26 = v94;
  v27 = sub_1005C3048(a1);
  if (!v26)
  {
    v76 = v25;
    v77 = v23;
    v94 = v22;
    v74 = v5;
    v71 = v18;
    v75 = v21;
    v72 = v16;
    v73 = v15;
    v28 = (uint64_t)v27;
    v29 = v91;
    v30 = v92;
    v31 = sub_1005C8104((uint64_t)v27, v91, v93, v92);
    v33 = v32;
    v34 = sub_1005C9560(v28, (uint64_t)v29, v30);
    v69 = v33;
    v36 = v35 & 1;
    v70 = 0;
    v37 = v34;
    v39 = REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter(v38);
    v40 = v76;
    REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter(v39);
    v68 = v39;
    v41 = v70;
    v42 = sub_1005C97C0((uint64_t)v29, v28, v39, v37, v36, v40, (uint64_t)v31);
    if (v41)
    {
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t, __n128), id))(v77 + 8))(v40, v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v64 = v42;
      v65 = v36;
      v66 = v37;
      v67 = v31;
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t, __n128), id))(v77 + 8))(v40, v94);
      swift_bridgeObjectRelease();
      v43 = objc_msgSend(v74, "fetchResultTokenToDiffAgainst", swift_bridgeObjectRelease().n128_f64[0]);
      v44 = (uint64_t)v75;
      sub_100493C24(v43, (uint64_t)v29, (uint64_t)v75);

      v45 = (uint64_t)v79;
      v70 = 0;
      REMRemindersListDataView.AssignedInvocation.Parameters.remindersPrefetch.getter(v46);
      v47 = (uint64_t)v67;
      swift_bridgeObjectRetain(v67);
      v48 = sub_10049D940(v45, v44, (uint64_t)v29, v93, 0, v47);
      v50 = v49;
      v51 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, __n128))(v80 + 8))(v45, v81, v51);
      v52 = v88;
      REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v47, v66, v65, v64 & 1, v48, v50);
      v53 = v82;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v82, v52, v87);
      v54 = v69;
      v94 = v69;
      v55 = v84;
      REMRemindersListDataView.AssignedModel.init(listsModel:assignedSmartList:)(v53, v54);
      v56 = v86;
      v57 = v83;
      v58 = v78;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v83, v55, v78);
      v59 = v72;
      v60 = v71;
      v61 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v44, v73);
      v62 = sub_10009FC50(&qword_1008516A8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AssignedModel);
      v63 = sub_10009FC50(&qword_1008516B0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AssignedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AssignedModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v57, v60, v58, v62, v63);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v58);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v87);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v75, v61);
    }
  }
}

void *sub_1005C3048(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v1;
  sub_10034B07C(3, 0, 7);
  v6 = v5;
  v7 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
  objc_msgSend(v8, "setEntity:", v9);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v6);
  v10 = NSManagedObjectContext.fetch<A>(_:)(v8, v7);

  if (!v2)
  {
    if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v10);
      v11 = (uint64_t)sub_1001E8BA0(v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
    }
    v17 = v11;
    sub_1005C29C0(&v17);
    swift_bridgeObjectRelease();
    v12 = v17;
    v13 = v3;
    v14 = a1;
    v3 = sub_1005C6C30(_swiftEmptyArrayStorage, v12);
    swift_release(v12);

  }
  return v3;
}

id sub_1005C3200@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005C35C8(a1, a2);
}

void sub_1005C3214(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(*a1, "reminder");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "objectID");

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1005C3284@<X0>(id *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a3;
  v49 = a4;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v45 - v16;
  v18 = *a1;
  v19 = objc_msgSend(*a1, "identifier", v15);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_8;
  }
  v20 = v19;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
LABEL_10:
    v38 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v49, 1, 1, v38);
  }
  v21(v17, v9, v10);
  v22 = *a2;
  if (!*(_QWORD *)(v22 + 16) || (v23 = sub_1002C65F8((uint64_t)v17), (v24 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_10;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
  v26 = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v25);
  v46 = sub_1003BF224(v27, v26);
  v47 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = (void *)objc_opt_self(REMList);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v28, "objectIDWithUUID:", isa);

  v32 = REMObjectID.codable.getter(v31);
  v33 = objc_msgSend(v18, "name");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0xE000000000000000;
  }
  v40 = objc_msgSend(v18, "color");
  if (v40)
  {
    v41 = v40;
    v42 = REMColor.codable.getter();

  }
  else
  {
    v42 = 0;
  }
  v43 = v49;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)(v32, v35, v37, v42, v46, 0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  v44 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
}

id sub_1005C35C8@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id result;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)v23 - v13;
  result = objc_msgSend(*a1, "reminder", v12);
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend(result, "identifier");

    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v18, 1, v4);
    sub_1000F2CE4((uint64_t)v10, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      result = (id)sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
      v19 = 0;
      v20 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
      v21 = sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
      v19 = UUID.uuidString.getter(v21);
      v20 = v22;
      result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    *a2 = v19;
    a2[1] = v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1005C3798(uint64_t *a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  id v48;
  void *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __n128 v76;
  void (*v77)(char *, uint64_t, __n128);
  char *v78;
  id v79;
  id v80;
  void *v81;
  NSString v82;
  double v83;
  double v84;
  id v85;
  void *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  Class v93;
  NSDate v94;
  uint64_t v95;
  NSString v96;
  double v97;
  double v98;
  id v99;
  id v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  char *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v113 = a1;
  v3 = type metadata accessor for Date(0);
  v111 = *(_QWORD *)(v3 - 8);
  v112 = v3;
  __chkstk_darwin(v3);
  v110 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v108 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v107 = (char *)&v102 - v8;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v102 - v13;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v109 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v102 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v102 - v22;
  *(_QWORD *)&v25 = __chkstk_darwin(v24).n128_u64[0];
  v27 = (char *)&v102 - v26;
  v115 = *a2;
  v28 = objc_msgSend(v115, "identifier", v25);
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    goto LABEL_12;
  }
  v29 = v28;
  v114 = v27;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v30(v14, v23, v15);
  v31 = v16;
  v32 = v15;
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v33(v14, 0, 1, v32);
  v106 = v31;
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v34(v14, 1, v32) == 1)
  {
LABEL_12:
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
    if (qword_1008379C8 != -1)
      swift_once(&qword_1008379C8, sub_1005C2A38);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_100851668);
    v58 = v115;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v61 = 138412290;
      v63 = objc_msgSend(v58, "objectID");
      v118 = (uint64_t)v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
      *v62 = v63;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no identifier %@", v61, 0xCu);
      v64 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v62, 1, v64);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

    }
    return;
  }
  v105 = v32;
  v30(v114, v14, v32);
  v35 = objc_msgSend(v115, "reminder");
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend(v35, "objectID");

    if (v37)
    {
      v38 = *v113;
      v39 = v37;
      v40 = sub_1002B1DAC(v39, v38);

      if (v40)
      {
        v41 = objc_msgSend(v40, "identifier");
        if (v41)
        {
          v42 = v41;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

          v43 = v23;
          v44 = v105;
          v30(v11, v43, v105);
          v33(v11, 0, 1, v44);
          if (v34(v11, 1, v44) != 1)
          {
            v103 = v39;
            v45 = v40;
            v46 = v109;
            v47 = v105;
            v30(v109, v11, v105);
            v104 = v45;
            v48 = objc_msgSend(v45, "assignedDate");
            if (v48)
            {
              v49 = v48;
              v50 = v110;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

              v51 = v111;
              v52 = v107;
              v53 = v50;
              v54 = v112;
              (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v107, v53, v112);
              v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
              v55(v52, 0, 1, v54);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v52, 1, v54) == 1)
              {
                isa = 0;
              }
              else
              {
                isa = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v54);
              }
            }
            else
            {
              v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56);
              v55(v107, 1, 1, v112);
              isa = 0;
            }
            v81 = (void *)objc_opt_self(REMAssignment);
            UUID.uuidString.getter(v81);
            v82 = String._bridgeToObjectiveC()();
            objc_msgSend(v81, "orderValueWithAssignedDate:objectIdentifier:", isa, v82, swift_bridgeObjectRelease().n128_f64[0]);
            v84 = v83;

            v85 = objc_msgSend(v115, "assignedDate");
            if (v85)
            {
              v86 = v85;
              v87 = v110;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v85);

              v88 = v111;
              v89 = v108;
              v90 = v87;
              v91 = v112;
              (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v108, v90, v112);
              v55(v89, 0, 1, v91);
              v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48))(v89, 1, v91);
              if ((_DWORD)v92 == 1)
              {
                v93 = 0;
              }
              else
              {
                v94.super.isa = Date._bridgeToObjectiveC()().super.isa;
                v95 = v88;
                v93 = v94.super.isa;
                v92 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v89, v91);
              }
            }
            else
            {
              v92 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v108, 1, 1, v112);
              v93 = 0;
            }
            UUID.uuidString.getter(v92);
            v96 = String._bridgeToObjectiveC()();
            objc_msgSend(v81, "orderValueWithAssignedDate:objectIdentifier:", v93, v96, swift_bridgeObjectRelease().n128_f64[0]);
            v98 = v97;

            if (v84 <= v98)
            {
              v99 = v115;
              v100 = v103;
              sub_100191430((uint64_t)v99, (uint64_t)v100);

              v104 = v100;
            }

            v101 = *(void (**)(char *, uint64_t))(v106 + 8);
            v101(v46, v47);
            v101(v114, v47);
            return;
          }
        }
        else
        {
          v33(v11, 1, 1, v105);
        }

        sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C80);
      }
      v79 = v115;
      v80 = v39;
      sub_100191430((uint64_t)v79, (uint64_t)v80);

      (*(void (**)(char *, uint64_t))(v106 + 8))(v114, v105);
      return;
    }
  }
  if (qword_1008379C8 != -1)
    swift_once(&qword_1008379C8, sub_1005C2A38);
  v65 = type metadata accessor for Logger(0);
  sub_10001AAA8(v65, (uint64_t)qword_100851668);
  v67 = v105;
  v66 = v106;
  v68 = v114;
  v69 = (*(uint64_t (**)(char *, char *, uint64_t))(v106 + 16))(v20, v114, v105);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.error.getter(v70);
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = swift_slowAlloc(32, -1);
    v118 = v73;
    *(_DWORD *)v72 = 136315138;
    v115 = v72 + 4;
    v74 = UUID.uuidString.getter(v73);
    v116 = sub_10001A820(v74, v75, &v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
    v76 = swift_bridgeObjectRelease();
    v77 = *(void (**)(char *, uint64_t, __n128))(v66 + 8);
    v77(v20, v67, v76);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no owning reminder {identifier: %s}", v72, 0xCu);
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v72, -1, -1);

    v78 = v114;
  }
  else
  {

    v77 = *(void (**)(char *, uint64_t, __n128))(v66 + 8);
    ((void (*)(char *, uint64_t))v77)(v20, v67);
    v78 = v68;
  }
  ((void (*)(char *, uint64_t))v77)(v78, v67);
}

void sub_1005C40FC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  Swift::String v19;
  char v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  int v24;
  uint8_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v16 = *(id *)(a1 + 8);
  v17 = objc_msgSend(v16, "ckAssigneeIdentifier");
  if (v17)
  {
    v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = String.uppercased()();
    swift_bridgeObjectRelease();
    v20 = sub_1001A560C(v19._countAndFlagsBits, (uint64_t)v19._object, a2);
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
LABEL_11:
      v29 = v39;
      goto LABEL_12;
    }

LABEL_10:
    v16 = 0;
    goto LABEL_11;
  }
  if (qword_1008379C8 != -1)
    swift_once(&qword_1008379C8, sub_1005C2A38);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100851668);
  v22 = v16;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter(v23);
  if (!os_log_type_enabled(v23, (os_log_type_t)v24))
  {

    goto LABEL_10;
  }
  v37 = v24;
  v38 = v3;
  v25 = (uint8_t *)swift_slowAlloc(12, -1);
  v36 = swift_slowAlloc(32, -1);
  v42 = v36;
  *(_DWORD *)v25 = 136315138;
  v26 = objc_msgSend(v22, "identifier");
  if (v26)
  {
    v27 = v26;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v28, 1, v6);
  sub_1000F2CE4((uint64_t)v12, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v30 = 0xE300000000000000;
    v31 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    v32 = sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v31 = UUID.uuidString.getter(v32);
    v30 = v33;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v29 = v39;
  v40 = sub_10001A820(v31, v30, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v37, "REMRemindersListDataView.AssignedInvocation: cdAssignment has no ckAssigneeIdentifier {identifier: %s}", v25, 0xCu);
  v34 = v36;
  swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v34, -1, -1);
  swift_slowDealloc(v25, -1, -1);

  v16 = 0;
LABEL_12:
  *v29 = v16;
}

void sub_1005C44AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unsigned int v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  unsigned int v43;
  id v44;
  id v45;
  BOOL v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  uint64_t *v59;
  Swift::Int v60;
  Swift::Int v61;
  uint64_t *v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  Swift::Int v68;
  uint64_t v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  id v78;
  uint8_t *v79;
  uint8_t *v80;
  unsigned int v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  char v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  char *v161;
  Swift::Int v162;
  Swift::Int v163;
  unint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  char v168;
  Swift::Int v169;
  Swift::Int v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_207;
    if (v4)
      sub_1005C5790(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_215;
  v159 = v5;
  v156 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v173 = (uint64_t)_swiftEmptyArrayStorage;
    v166 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
LABEL_173:
      if (v13 >= 2)
      {
        v148 = *v156;
        do
        {
          v149 = v13 - 2;
          if (v13 < 2)
            goto LABEL_202;
          if (!v148)
            goto LABEL_214;
          v150 = *(_QWORD *)&v10[16 * v149 + 32];
          v151 = *(_QWORD *)&v10[16 * v13 + 24];
          sub_1005C5C90((id *)(v148 + 8 * v150), (id *)(v148 + 8 * *(_QWORD *)&v10[16 * v13 + 16]), v148 + 8 * v151, v166);
          if (v2)
            break;
          if (v151 < v150)
            goto LABEL_203;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = sub_1001D52E4((uint64_t)v10);
          if (v149 >= *((_QWORD *)v10 + 2))
            goto LABEL_204;
          v152 = &v10[16 * v149 + 32];
          *(_QWORD *)v152 = v150;
          *((_QWORD *)v152 + 1) = v151;
          v153 = *((_QWORD *)v10 + 2);
          if (v13 > v153)
            goto LABEL_205;
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v153 - v13));
          *((_QWORD *)v10 + 2) = v153 - 1;
          v13 = v153 - 1;
        }
        while (v153 > 2);
      }
LABEL_184:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v154);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    v166 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v173 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v157 = *a1 - 8;
  v158 = *a1 + 16;
  v10 = (char *)_swiftEmptyArrayStorage;
  v162 = v4;
  v167 = *a1;
LABEL_15:
  v14 = v11 + 1;
  v161 = v10;
  v163 = v11;
  if (v11 + 1 >= v4)
    goto LABEL_80;
  v15 = *(void **)(v12 + 8 * v14);
  v16 = *(void **)(v12 + 8 * v11);
  v17 = v15;
  v18 = v16;
  v19 = objc_msgSend(v17, "accountTypeHost");
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v172 + 3), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
  if (v2)
  {

    if (qword_100837278 != -1)
      swift_once(&qword_100837278, sub_10034C0CC);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_100846A10);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unknown or undefined account type in AccountsListDataView", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    swift_errorRelease(v2);

    v2 = 0;
  }
  else
  {

    v25 = BYTE3(v172);
    if (BYTE3(v172) != 4)
      goto LABEL_24;
  }
  v25 = 3;
LABEL_24:
  v26 = v18;
  v27 = objc_msgSend(v26, "accountTypeHost");
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v172 + 2), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

  if (BYTE2(v172) != 4)
  {
    if (v25 < BYTE2(v172))
      goto LABEL_26;
    if (BYTE2(v172) >= v25)
    {
LABEL_28:
      v28 = objc_msgSend(v17, "name");
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

      }
      else
      {
        v30 = 0;
        v32 = 0xE000000000000000;
      }
      v33 = objc_msgSend(v26, "name");
      if (v33)
      {
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

      }
      else
      {
        v35 = 0;
        v37 = 0xE000000000000000;
      }
      v12 = v167;
      if (v30 == v35 && v32 == v37)
        v168 = 0;
      else
        v168 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v35, v37, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
LABEL_32:
    v168 = 0;
    goto LABEL_42;
  }
  if (v25 >= 3)
  {
    if (v25 == 3)
      goto LABEL_28;
    goto LABEL_32;
  }
LABEL_26:
  v168 = 1;
LABEL_42:

  v4 = v162;
  v11 = v163;
  v14 = v163 + 2;
  if (v163 + 2 >= v162)
  {
LABEL_70:
    if ((v168 & 1) == 0)
    {
LABEL_80:
      if (v14 >= v4)
        goto LABEL_122;
      if (__OFSUB__(v14, v11))
        goto LABEL_206;
      if (v14 - v11 >= v159)
        goto LABEL_122;
      if (__OFADD__(v11, v159))
        goto LABEL_208;
      if (v11 + v159 >= v4)
        v64 = v4;
      else
        v64 = v11 + v159;
      if (v64 < v11)
      {
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      if (v14 == v64)
        goto LABEL_122;
      v65 = v157 + 8 * v14;
      v160 = v64;
LABEL_92:
      v170 = v14;
      v66 = v65;
      v67 = *(void **)(v12 + 8 * v14);
      v68 = v11;
      v165 = v66;
      v69 = v66;
      while (1)
      {
        v70 = *(void **)v69;
        v71 = v67;
        v72 = v70;
        v73 = objc_msgSend(v71, "accountTypeHost");
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v172 + 5), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
        if (v2)
        {

          if (qword_100837278 != -1)
            swift_once(&qword_100837278, sub_10034C0CC);
          v74 = type metadata accessor for Logger(0);
          v75 = sub_10001AAA8(v74, (uint64_t)qword_100846A10);
          v76 = Logger.logObject.getter(v75);
          v77 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v76, v77))
          {
            v78 = v71;
            v79 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v79 = 0;
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unknown or undefined account type in AccountsListDataView", v79, 2u);
            v80 = v79;
            v71 = v78;
            swift_slowDealloc(v80, -1, -1);
          }
          swift_errorRelease(v2);

          v2 = 0;
        }
        else
        {

          v81 = BYTE5(v172);
          if (BYTE5(v172) != 4)
            goto LABEL_101;
        }
        v81 = 3;
LABEL_101:
        v82 = v72;
        v83 = objc_msgSend(v82, "accountTypeHost");
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v172 + 4), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

        if (BYTE4(v172) == 4)
        {
          if (v81 >= 3)
          {
            if (v81 != 3)
              goto LABEL_90;
            goto LABEL_105;
          }
        }
        else if (v81 >= BYTE4(v172))
        {
          if (BYTE4(v172) < v81)
          {
LABEL_90:

            goto LABEL_91;
          }
LABEL_105:
          v84 = v71;
          v85 = objc_msgSend(v71, "name");
          if (v85)
          {
            v86 = v85;
            v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
            v89 = v88;

          }
          else
          {
            v87 = 0;
            v89 = 0xE000000000000000;
          }
          v90 = objc_msgSend(v82, "name");
          if (v90)
          {
            v91 = v90;
            v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
            v94 = v93;

            if (v87 != v92)
            {
LABEL_116:
              v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v89, v92, v94, 1);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v12 = v167;
              v2 = 0;
              if ((v95 & 1) == 0)
                goto LABEL_91;
              goto LABEL_117;
            }
          }
          else
          {
            v92 = 0;
            v94 = 0xE000000000000000;
            if (v87)
              goto LABEL_116;
          }
          if (v89 == v94)
          {

            swift_bridgeObjectRelease_n(v89, 2);
            v12 = v167;
            v2 = 0;
LABEL_91:
            v14 = v170 + 1;
            v11 = v163;
            v65 = v165 + 8;
            if (v170 + 1 != v160)
              goto LABEL_92;
            v14 = v160;
            v10 = v161;
LABEL_122:
            if (v14 < v11)
              goto LABEL_201;
            if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
              v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
            v98 = *((_QWORD *)v10 + 2);
            v97 = *((_QWORD *)v10 + 3);
            v13 = v98 + 1;
            v171 = v14;
            if (v98 >= v97 >> 1)
              v10 = sub_1001D4DF0((char *)(v97 > 1), v98 + 1, 1, v10);
            *((_QWORD *)v10 + 2) = v13;
            v99 = v10 + 32;
            v100 = &v10[16 * v98 + 32];
            *(_QWORD *)v100 = v11;
            *((_QWORD *)v100 + 1) = v171;
            if (v98)
            {
              while (2)
              {
                v101 = v13 - 1;
                if (v13 >= 4)
                {
                  v106 = &v99[16 * v13];
                  v107 = *((_QWORD *)v106 - 8);
                  v108 = *((_QWORD *)v106 - 7);
                  v112 = __OFSUB__(v108, v107);
                  v109 = v108 - v107;
                  if (v112)
                    goto LABEL_190;
                  v111 = *((_QWORD *)v106 - 6);
                  v110 = *((_QWORD *)v106 - 5);
                  v112 = __OFSUB__(v110, v111);
                  v104 = v110 - v111;
                  v105 = v112;
                  if (v112)
                    goto LABEL_191;
                  v113 = v13 - 2;
                  v114 = &v99[16 * v13 - 32];
                  v116 = *(_QWORD *)v114;
                  v115 = *((_QWORD *)v114 + 1);
                  v112 = __OFSUB__(v115, v116);
                  v117 = v115 - v116;
                  if (v112)
                    goto LABEL_193;
                  v112 = __OFADD__(v104, v117);
                  v118 = v104 + v117;
                  if (v112)
                    goto LABEL_196;
                  if (v118 >= v109)
                  {
                    v136 = &v99[16 * v101];
                    v138 = *(_QWORD *)v136;
                    v137 = *((_QWORD *)v136 + 1);
                    v112 = __OFSUB__(v137, v138);
                    v139 = v137 - v138;
                    if (v112)
                      goto LABEL_200;
                    v129 = v104 < v139;
                  }
                  else
                  {
LABEL_141:
                    if ((v105 & 1) != 0)
                      goto LABEL_192;
                    v113 = v13 - 2;
                    v119 = &v99[16 * v13 - 32];
                    v121 = *(_QWORD *)v119;
                    v120 = *((_QWORD *)v119 + 1);
                    v122 = __OFSUB__(v120, v121);
                    v123 = v120 - v121;
                    v124 = v122;
                    if (v122)
                      goto LABEL_195;
                    v125 = &v99[16 * v101];
                    v127 = *(_QWORD *)v125;
                    v126 = *((_QWORD *)v125 + 1);
                    v112 = __OFSUB__(v126, v127);
                    v128 = v126 - v127;
                    if (v112)
                      goto LABEL_198;
                    if (__OFADD__(v123, v128))
                      goto LABEL_199;
                    if (v123 + v128 < v104)
                      goto LABEL_153;
                    v129 = v104 < v128;
                  }
                  if (v129)
                    v101 = v113;
                }
                else
                {
                  if (v13 == 3)
                  {
                    v103 = *((_QWORD *)v10 + 4);
                    v102 = *((_QWORD *)v10 + 5);
                    v112 = __OFSUB__(v102, v103);
                    v104 = v102 - v103;
                    v105 = v112;
                    goto LABEL_141;
                  }
                  v130 = *((_QWORD *)v10 + 4);
                  v131 = *((_QWORD *)v10 + 5);
                  v112 = __OFSUB__(v131, v130);
                  v123 = v131 - v130;
                  v124 = v112;
LABEL_153:
                  if ((v124 & 1) != 0)
                    goto LABEL_194;
                  v132 = &v99[16 * v101];
                  v134 = *(_QWORD *)v132;
                  v133 = *((_QWORD *)v132 + 1);
                  v112 = __OFSUB__(v133, v134);
                  v135 = v133 - v134;
                  if (v112)
                    goto LABEL_197;
                  if (v135 < v123)
                    goto LABEL_14;
                }
                v140 = v101 - 1;
                if (v101 - 1 >= v13)
                {
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
LABEL_191:
                  __break(1u);
LABEL_192:
                  __break(1u);
LABEL_193:
                  __break(1u);
LABEL_194:
                  __break(1u);
LABEL_195:
                  __break(1u);
LABEL_196:
                  __break(1u);
LABEL_197:
                  __break(1u);
LABEL_198:
                  __break(1u);
LABEL_199:
                  __break(1u);
LABEL_200:
                  __break(1u);
LABEL_201:
                  __break(1u);
LABEL_202:
                  __break(1u);
LABEL_203:
                  __break(1u);
LABEL_204:
                  __break(1u);
LABEL_205:
                  __break(1u);
LABEL_206:
                  __break(1u);
LABEL_207:
                  __break(1u);
LABEL_208:
                  __break(1u);
                  goto LABEL_209;
                }
                v141 = v12;
                if (!v12)
                  goto LABEL_212;
                v142 = v10;
                v143 = &v99[16 * v140];
                v144 = *(_QWORD *)v143;
                v145 = &v99[16 * v101];
                v146 = *((_QWORD *)v145 + 1);
                sub_1005C5C90((id *)(v141 + 8 * *(_QWORD *)v143), (id *)(v141 + 8 * *(_QWORD *)v145), v141 + 8 * v146, v166);
                if (v2)
                  goto LABEL_184;
                if (v146 < v144)
                  goto LABEL_187;
                if (v101 > *((_QWORD *)v142 + 2))
                  goto LABEL_188;
                *(_QWORD *)v143 = v144;
                *(_QWORD *)&v99[16 * v140 + 8] = v146;
                v147 = *((_QWORD *)v142 + 2);
                if (v101 >= v147)
                  goto LABEL_189;
                v10 = v142;
                v13 = v147 - 1;
                memmove(&v99[16 * v101], v145 + 16, 16 * (v147 - 1 - v101));
                *((_QWORD *)v142 + 2) = v147 - 1;
                v12 = v167;
                if (v147 <= 2)
                  goto LABEL_14;
                continue;
              }
            }
            v13 = 1;
LABEL_14:
            v4 = v162;
            v11 = v171;
            if (v171 >= v162)
              goto LABEL_173;
            goto LABEL_15;
          }
          goto LABEL_116;
        }

LABEL_117:
        if (!v12)
          goto LABEL_211;
        v96 = *(void **)v69;
        v67 = *(void **)(v69 + 8);
        *(_QWORD *)v69 = v67;
        *(_QWORD *)(v69 + 8) = v96;
        v69 -= 8;
        if (v170 == ++v68)
          goto LABEL_91;
      }
    }
    if (v14 < v11)
      goto LABEL_210;
LABEL_72:
    if (v11 < v14)
    {
      v59 = (uint64_t *)(v157 + 8 * v14);
      v60 = v14;
      v61 = v11;
      v62 = (uint64_t *)(v12 + 8 * v11);
      while (1)
      {
        if (v61 != --v60)
        {
          if (!v12)
            goto LABEL_213;
          v63 = *v62;
          *v62 = *v59;
          *v59 = v63;
        }
        ++v61;
        --v59;
        ++v62;
        if (v61 >= v60)
          goto LABEL_80;
      }
    }
    goto LABEL_80;
  }
  v38 = (id *)(v158 + 8 * v163);
  while (1)
  {
    v169 = v14;
    v39 = *(v38 - 1);
    v40 = *v38;
    v41 = v39;
    v42 = objc_msgSend(v40, "accountTypeHost");
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v172 + 1), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

    v43 = BYTE1(v172);
    if (BYTE1(v172) == 4)
      v43 = 3;
    v44 = v41;
    v45 = objc_msgSend(v44, "accountTypeHost");
    REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v172, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
    v14 = v169;

    if (v172 != 4)
      break;
    v46 = v43 == 3;
    if (v43 >= 3)
    {
      v10 = v161;
      if (!v46)
        goto LABEL_56;
      goto LABEL_52;
    }
LABEL_44:
    v10 = v161;

    if ((v168 & 1) == 0)
    {
      v4 = v162;
      v11 = v163;
      goto LABEL_80;
    }
LABEL_45:
    ++v14;
    ++v38;
    v4 = v162;
    if (v162 == v14)
    {
      v14 = v162;
      goto LABEL_69;
    }
  }
  if (v43 < v172)
    goto LABEL_44;
  v51 = v172 >= v43;
  v10 = v161;
  if (!v51)
  {
LABEL_56:

    if ((v168 & 1) != 0)
      goto LABEL_169;
    goto LABEL_45;
  }
LABEL_52:
  v47 = objc_msgSend(v40, "name");
  if (v47)
  {
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v164 = v50;

  }
  else
  {
    v49 = 0;
    v164 = 0xE000000000000000;
  }
  v52 = objc_msgSend(v44, "name");
  if (v52)
  {
    v53 = v52;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v56 = v55;

  }
  else
  {
    v54 = 0;
    v56 = 0xE000000000000000;
  }
  if (v49 != v54 || v164 != v56)
  {
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v164, v54, v56, 1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = v168 ^ v57;
    v12 = v167;
    v14 = v169;
    if ((v58 & 1) != 0)
    {
      v4 = v162;
LABEL_69:
      v11 = v163;
      goto LABEL_70;
    }
    goto LABEL_45;
  }

  swift_bridgeObjectRelease_n(v164, 2);
  v12 = v167;
  v14 = v169;
  if ((v168 & 1) == 0)
    goto LABEL_45;
LABEL_169:
  v4 = v162;
  v11 = v163;
  if (v14 >= v163)
    goto LABEL_72;
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  LOBYTE(v155) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v155, 936, 0);
  __break(1u);
}

void sub_1005C5790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  id v18;
  uint8_t *v19;
  uint8_t *v20;
  unsigned int v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = v4;
  if (a3 != a2)
  {
    v6 = a3;
    v41 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_6:
    v8 = *(void **)(v41 + 8 * v6);
    v9 = a1;
    v39 = v7;
    v40 = v6;
    while (1)
    {
      v10 = *(void **)v7;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, "accountTypeHost");
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)((uint64_t *)((char *)&v42 + 1), sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
      if (v5)
      {

        if (qword_100837278 != -1)
          swift_once(&qword_100837278, sub_10034C0CC);
        v14 = type metadata accessor for Logger(0);
        v15 = sub_10001AAA8(v14, (uint64_t)qword_100846A10);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = v11;
          v19 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unknown or undefined account type in AccountsListDataView", v19, 2u);
          v20 = v19;
          v11 = v18;
          swift_slowDealloc(v20, -1, -1);
        }
        swift_errorRelease(v5);

        v5 = 0;
      }
      else
      {

        v21 = BYTE1(v42);
        if (BYTE1(v42) != 4)
          goto LABEL_15;
      }
      v21 = 3;
LABEL_15:
      v22 = v12;
      v23 = objc_msgSend(v22, "accountTypeHost");
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v42, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

      if (v42 == 4)
      {
        if (v21 < 3)
          goto LABEL_17;
        if (v21 != 3)
          goto LABEL_4;
      }
      else
      {
        if (v21 < v42)
        {
LABEL_17:

          goto LABEL_31;
        }
        if (v42 < v21)
        {
LABEL_4:

          goto LABEL_5;
        }
      }
      v24 = objc_msgSend(v11, "name");
      if (v24)
      {
        v25 = v24;
        v26 = v11;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v29 = v28;

      }
      else
      {
        v26 = v11;
        v27 = 0;
        v29 = 0xE000000000000000;
      }
      v30 = objc_msgSend(v22, "name");
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        if (v27 == v32)
          goto LABEL_29;
      }
      else
      {
        v32 = 0;
        v34 = 0xE000000000000000;
        if (!v27)
        {
LABEL_29:
          if (v29 == v34)
          {

            swift_bridgeObjectRelease_n(v29, 2);
            v6 = v40;
            v5 = 0;
LABEL_5:
            ++v6;
            v7 = v39 + 8;
            if (v6 == a2)
              return;
            goto LABEL_6;
          }
        }
      }
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v32, v34, 1);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v40;
      v5 = 0;
      if ((v35 & 1) == 0)
        goto LABEL_5;
LABEL_31:
      if (!v41)
      {
        __break(1u);
        return;
      }
      v36 = *(void **)v7;
      v8 = *(void **)(v7 + 8);
      *(_QWORD *)v7 = v8;
      *(_QWORD *)(v7 + 8) = v36;
      v7 -= 8;
      if (v6 == ++v9)
        goto LABEL_5;
    }
  }
}

uint64_t sub_1005C5C90(id *a1, id *__src, unint64_t a3, void **__dst)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint32_t *p_ivar_base_size;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  void **v23;
  uint8_t *v24;
  uint8_t *v25;
  unsigned int v26;
  id v27;
  id v28;
  id *v29;
  void **v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  void **v42;
  id *v43;
  id *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  void *v55;
  unsigned int v56;
  id v57;
  id v58;
  id *v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t result;
  void *v73;
  void **v74;
  void **v75;
  void **v76;
  id *v77;
  void **v78;
  id *v79;
  unint64_t v81;
  id *v82;
  void **v83;
  unsigned __int8 v84;
  void **v85;
  void **v86;
  id *v87;

  v5 = v4;
  v6 = __dst;
  v7 = __src;
  v8 = (char *)__src - (char *)a1;
  v9 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v9 = (char *)__src - (char *)a1;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  v87 = a1;
  v86 = __dst;
  v82 = a1;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_97;
    if (__dst != __src || &__src[v13] <= __dst)
    {
      memmove(__dst, __src, 8 * v13);
      a1 = v82;
    }
    v42 = &v6[v13];
    v85 = v42;
    v87 = v7;
    if (a1 >= v7 || v11 < 8)
    {
LABEL_96:
      sub_1001D4FA4(&v87, &v86, &v85);
      return 1;
    }
    v43 = (id *)(a3 - 8);
    v44 = v7;
    v75 = v6;
    while (1)
    {
      v81 = (unint64_t)v42;
      v76 = v42 - 1;
      v45 = *--v44;
      v46 = *(v42 - 1);
      v47 = v45;
      v48 = objc_msgSend(v46, "accountTypeHost");
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v84, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
      v79 = v7;
      if (v5)
      {

        if (qword_100837278 != -1)
          swift_once(&qword_100837278, sub_10034C0CC);
        v49 = type metadata accessor for Logger(0);
        v50 = sub_10001AAA8(v49, (uint64_t)qword_100846A10);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unknown or undefined account type in AccountsListDataView", v53, 2u);
          v54 = v53;
          v6 = v75;
          swift_slowDealloc(v54, -1, -1);
        }
        swift_errorRelease(v5);

        v55 = v46;
        v5 = 0;
      }
      else
      {

        v55 = v46;
        v56 = v84;
        if (v84 != 4)
          goto LABEL_66;
      }
      v56 = 3;
LABEL_66:
      v77 = v43 + 1;
      v57 = v47;
      v58 = objc_msgSend(v57, "accountTypeHost");
      REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v84, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

      if (v84 == 4)
      {
        if (v56 < 3)
          goto LABEL_68;
        v60 = v55;
        if (v56 != 3)
          goto LABEL_73;
      }
      else
      {
        if (v56 < v84)
        {
LABEL_68:

          v59 = v79;
LABEL_69:
          v42 = (void **)v81;
          if (v77 != v59 || v43 >= v59)
            *v43 = *v44;
          v87 = v44;
          if (v44 <= v82)
            goto LABEL_96;
          goto LABEL_57;
        }
        if (v84 < v56)
        {
LABEL_73:

LABEL_86:
          v59 = v79;
          goto LABEL_87;
        }
        v60 = v55;
      }
      v61 = objc_msgSend(v60, "name");
      if (v61)
      {
        v62 = v61;
        v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v65 = v64;

      }
      else
      {
        v63 = 0;
        v65 = 0xE000000000000000;
      }
      v73 = v60;
      v66 = objc_msgSend(v57, "name");
      if (v66)
      {
        v67 = v66;
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v70 = v69;

        if (v63 != v68)
          goto LABEL_93;
      }
      else
      {
        v68 = 0;
        v70 = 0xE000000000000000;
        if (v63)
          goto LABEL_93;
      }
      if (v65 == v70)
      {

        swift_bridgeObjectRelease_n(v65, 2);
        v6 = v75;
        goto LABEL_86;
      }
LABEL_93:
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v68, v70, 1);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v75;
      v59 = v79;
      if ((v71 & 1) != 0)
        goto LABEL_69;
LABEL_87:
      v42 = v76;
      v85 = v76;
      if ((unint64_t)v77 < v81 || (unint64_t)v43 >= v81 || v77 != (id *)v81)
        *v43 = *v76;
      v44 = v59;
      if (v59 <= v82)
        goto LABEL_96;
LABEL_57:
      --v43;
      v7 = v44;
      if (v42 <= v6)
        goto LABEL_96;
    }
  }
  if (v8 >= -7)
  {
    if (__dst != a1 || &a1[v10] <= __dst)
    {
      memmove(__dst, a1, 8 * v10);
      a1 = v82;
    }
    v78 = &v6[v10];
    v85 = v78;
    if ((unint64_t)v7 < a3 && v8 >= 8)
    {
      p_ivar_base_size = &RDDataAccess.ivar_base_size;
      while (1)
      {
        v83 = a1;
        v15 = *v6;
        v16 = *v7;
        v17 = v15;
        v18 = objc_msgSend(v16, *((SEL *)p_ivar_base_size + 344));
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v84, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);
        if (v5)
        {

          if (qword_100837278 != -1)
            swift_once(&qword_100837278, sub_10034C0CC);
          v19 = type metadata accessor for Logger(0);
          v20 = sub_10001AAA8(v19, (uint64_t)qword_100846A10);
          v21 = Logger.logObject.getter(v20);
          v22 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v21, v22))
          {
            v23 = v6;
            v24 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unknown or undefined account type in AccountsListDataView", v24, 2u);
            v25 = v24;
            v6 = v23;
            p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
            swift_slowDealloc(v25, -1, -1);
          }
          swift_errorRelease(v5);

          v5 = 0;
        }
        else
        {

          v26 = v84;
          if (v84 != 4)
            goto LABEL_21;
        }
        v26 = 3;
LABEL_21:
        v27 = v17;
        v28 = objc_msgSend(v27, *((SEL *)p_ivar_base_size + 344));
        REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v84, sub_10034CCC8, 0, sub_1000E77AC, 0, 0, 0, 0, 0, sub_1001F4694, 0, sub_1005C28D8, 0, 0, 0, 0, 0, &_s16AccountSortOrderON);

        if (v84 == 4)
        {
          if (v26 < 3)
            goto LABEL_23;
          if (v26 != 3)
            goto LABEL_33;
        }
        else
        {
          if (v26 < v84)
          {
LABEL_23:

            goto LABEL_24;
          }
          if (v84 < v26)
          {
LABEL_33:

LABEL_42:
            v30 = v83;
            if (v83 != v6)
              *v83 = *v6;
            v86 = ++v6;
            v29 = v7;
            goto LABEL_45;
          }
        }
        v31 = objc_msgSend(v16, "name");
        if (v31)
        {
          v32 = v31;
          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v35 = v34;

        }
        else
        {
          v33 = 0;
          v35 = 0xE000000000000000;
        }
        v74 = v6;
        v36 = objc_msgSend(v27, "name");
        if (v36)
        {
          v37 = v36;
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v40 = v39;

          if (v33 == v38)
            goto LABEL_39;
        }
        else
        {
          v38 = 0;
          v40 = 0xE000000000000000;
          if (!v33)
          {
LABEL_39:
            if (v35 == v40)
            {

              swift_bridgeObjectRelease_n(v35, 2);
              v6 = v74;
              p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
              goto LABEL_42;
            }
          }
        }
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v38, v40, 1);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v74;
        p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
        if ((v41 & 1) == 0)
          goto LABEL_42;
LABEL_24:
        v29 = v7 + 1;
        v30 = v83;
        if (v83 < v7 || v83 >= v29 || v83 != v7)
          *v83 = *v7;
LABEL_45:
        a1 = v30 + 1;
        v87 = a1;
        if (v6 < v78)
        {
          v7 = v29;
          if ((unint64_t)v29 < a3)
            continue;
        }
        goto LABEL_96;
      }
    }
    goto LABEL_96;
  }
LABEL_97:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1005C6790()
{
  _QWORD *result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  _QWORD *v7;

  sub_1001C1B0C(0, 2, 0);
  result = _swiftEmptyArrayStorage;
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    sub_1001C1B0C(v1 > 1, v2 + 1, 1);
    result = _swiftEmptyArrayStorage;
    v1 = _swiftEmptyArrayStorage[3];
    v3 = v1 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v4;
  v5 = &_swiftEmptyArrayStorage[2 * v2];
  v5[4] = 0x696669746E656469;
  v5[5] = 0xEA00000000007265;
  v6 = v2 + 2;
  if (v3 <= v4)
  {
    sub_1001C1B0C(v1 > 1, v6, 1);
    result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  v7 = &_swiftEmptyArrayStorage[2 * v4];
  v7[4] = 0xD000000000000011;
  v7[5] = 0x8000000100702620;
  return result;
}

void sub_1005C68D4(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  _QWORD *v19;
  Class isa;
  Class v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;

  v4 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (id *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a2;
  v9 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v8, "type", v5));
  v10 = objc_msgSend(v9, "supportsAssignments");

  if (v10)
  {
    v28 = 0;
    v11 = objc_msgSend(v8, "remObjectIDWithError:", &v28);
    v12 = v28;
    if (v11)
    {
      *v7 = v11;
      swift_storeEnumTagMultiPayload(v7, v4, 6);
      v13 = v12;
      sub_10000A3AC();
      v15 = v14;
      sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
      v16 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v17 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "entity");
      objc_msgSend(v17, "setEntity:", v18);

      objc_msgSend(v17, "setAffectedStores:", 0);
      objc_msgSend(v17, "setPredicate:", v15);
      v19 = sub_1005C6790();
      sub_1001DFBD0((uint64_t)v19);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v17, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      if (qword_1008376D0 != -1)
        swift_once(&qword_1008376D0, sub_1004A7024);
      sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
      v21 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v17, "setSortDescriptors:", v21);

      v22 = (void *)NSManagedObjectContext.fetch<A>(_:)(v17, v16);
      if (!v2)
      {
        v28 = v22;
        v23 = sub_10001A630(&qword_10083FF50);
        v24 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
        v25 = Sequence.elements<A>(ofType:)(v16, v23, v16, v24);
        swift_bridgeObjectRelease();
        sub_1001E1A68(v25);
      }

    }
    else
    {
      v26 = v28;
      _convertNSErrorToError(_:)(v12);

      swift_willThrow(v27);
    }
  }
}

void *sub_1005C6C30(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;

  v3 = v2;
  v5 = a1;
  v13 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    for (i = 4; ; ++i)
    {
      v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
         : *(id *)(a2 + 8 * i);
      v5 = v8;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v12 = v8;
      sub_1005C68D4((uint64_t)&v13, &v12);
      if (v3)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v5;
      }

      if (v9 == v6)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v10 = a2;
    else
      v10 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1005C6D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v46 - v11;
  if (REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter(v10))
    return;
  v52 = v12;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v45 = a1;
    else
      v45 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v45);
    if (v13)
      goto LABEL_4;
LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = swift_bridgeObjectRetain(a1);
  if (!v13)
    goto LABEL_33;
LABEL_4:
  if (v13 >= 1)
  {
    v50 = v8;
    v51 = v3;
    v46 = v5;
    v15 = 0;
    v54 = a1 & 0xC000000000000001;
    v16 = _swiftEmptyArrayStorage;
    v14.n128_u64[0] = 136446210;
    v48 = v14;
    v47 = (char *)&type metadata for Any + 8;
    v53 = v13;
    v49 = v2;
    do
    {
      if (v54)
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
      else
        v18 = *(id *)(a1 + 8 * v15 + 32);
      v19 = v18;
      v20 = objc_msgSend(v18, "currentUserShareParticipantID", v46);
      if (v20)
      {
        v21 = v20;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v20);

        v22 = String.uppercased()();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = sub_1002C8224(0, v16[2] + 1, 1, v16);
        v17 = v53;
        v24 = v16[2];
        v23 = v16[3];
        if (v24 >= v23 >> 1)
          v16 = sub_1002C8224((_QWORD *)(v23 > 1), v24 + 1, 1, v16);
        v16[2] = v24 + 1;
        *(Swift::String *)&v16[2 * v24 + 4] = v22;

      }
      else
      {
        v25 = objc_msgSend(v19, "identifier");
        if (v25)
        {
          v26 = v25;
          v27 = (uint64_t)v50;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

          v28 = 0;
        }
        else
        {
          v28 = 1;
          v27 = (uint64_t)v50;
        }
        v29 = v51;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v27, v28, 1, v2);
        v30 = v27;
        v31 = (uint64_t)v52;
        sub_1000F2CE4(v30, (uint64_t)v52);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v2))
        {
          sub_10000882C(v31, (uint64_t *)&unk_100839C80);
          v32 = 0xE300000000000000;
          v33 = 7104878;
        }
        else
        {
          v34 = v46;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v46, v31, v2);
          v35 = sub_10000882C(v31, (uint64_t *)&unk_100839C80);
          v33 = UUID.uuidString.getter(v35);
          v32 = v36;
          (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v2);
        }
        if (qword_1008379C8 != -1)
          swift_once(&qword_1008379C8, sub_1005C2A38);
        v37 = type metadata accessor for Logger(0);
        sub_10001AAA8(v37, (uint64_t)qword_100851668);
        swift_bridgeObjectRetain(v32);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = a1;
          v42 = swift_slowAlloc(12, -1);
          v43 = swift_slowAlloc(32, -1);
          v55 = v43;
          *(_DWORD *)v42 = v48.n128_u32[0];
          swift_bridgeObjectRetain(v32);
          *(_QWORD *)(v42 + 4) = sub_10001A820(v33, v32, &v55);
          swift_bridgeObjectRelease_n(v32, 3);
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "REMRemindersListDataView.AssignedInvocation - Got a shared to/from me list that doesn't have the current user in the sharee list, huh?! {listID: %{public}s}", (uint8_t *)v42, 0xCu);
          swift_arrayDestroy(v43, 1, v47);
          swift_slowDealloc(v43, -1, -1);
          v44 = v42;
          a1 = v41;
          v2 = v49;
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v32, 2);
        }
        v17 = v53;
      }
      ++v15;
    }
    while (v17 != v15);
    goto LABEL_33;
  }
  __break(1u);
}

void sub_1005C720C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  unint64_t v39;

  v3 = v2;
  v5 = a1;
  v39 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v36 = 0;
    v6 = 0;
    v7 = 0;
    v8 = __CocoaDictionary.makeIterator()(a1) | 0x8000000000000000;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v6 = ~v9;
    v36 = a1 + 64;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v7 = v11 & *(_QWORD *)(a1 + 64);
    v8 = a1;
  }
  swift_bridgeObjectRetain(v5);
  v13 = 0;
  v35 = (unint64_t)(v6 + 64) >> 6;
  v34 = (char *)&type metadata for Swift.AnyObject + 8;
  while ((v8 & 0x8000000000000000) != 0)
  {
    v18 = __CocoaDictionary.Iterator.next()(v12);
    if (!v18)
      goto LABEL_41;
    v20 = v18;
    v21 = v19;
    v37 = v18;
    v22 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v38, &v37, v34, v22, 7);
    v23 = (id)v38[0];
    swift_unknownObjectRelease(v20);
    v37 = v21;
    v24 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(v38, &v37, v34, v24, 7);
    v25 = (id)v38[0];
    swift_unknownObjectRelease(v21);
    v17 = v13;
    v15 = v7;
    if (!v23)
      goto LABEL_41;
LABEL_30:
    v38[0] = v23;
    v38[1] = v25;
    sub_1005C40FC((uint64_t)v38, a2, &v37);

    if (v3)
    {
      sub_1000C6560(v8);
      swift_bridgeObjectRelease();
      return;
    }
    v30 = v37;
    if (v37)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v32 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      v12 = specialized Array._endMutation()(v14);
    }
    v13 = v17;
    v7 = v15;
  }
  if (v7)
  {
    v15 = (v7 - 1) & v7;
    v16 = __clz(__rbit64(v7)) | (v13 << 6);
    v17 = v13;
LABEL_29:
    v28 = 8 * v16;
    v29 = *(void **)(*(_QWORD *)(v8 + 56) + v28);
    v23 = *(id *)(*(_QWORD *)(v8 + 48) + v28);
    v25 = v29;
    if (!v23)
      goto LABEL_41;
    goto LABEL_30;
  }
  v17 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v17 >= v35)
      goto LABEL_41;
    v26 = *(_QWORD *)(v36 + 8 * v17);
    if (!v26)
    {
      v27 = v13 + 2;
      if (v13 + 2 >= v35)
        goto LABEL_41;
      v26 = *(_QWORD *)(v36 + 8 * v27);
      if (v26)
        goto LABEL_27;
      v27 = v13 + 3;
      if (v13 + 3 >= v35)
        goto LABEL_41;
      v26 = *(_QWORD *)(v36 + 8 * v27);
      if (v26)
        goto LABEL_27;
      v27 = v13 + 4;
      if (v13 + 4 >= v35)
        goto LABEL_41;
      v26 = *(_QWORD *)(v36 + 8 * v27);
      if (v26)
      {
LABEL_27:
        v17 = v27;
      }
      else
      {
        v17 = v13 + 5;
        if (v13 + 5 >= v35)
          goto LABEL_41;
        v26 = *(_QWORD *)(v36 + 8 * v17);
        if (!v26)
        {
          v33 = v13 + 6;
          while (v35 != v33)
          {
            v26 = *(_QWORD *)(v36 + 8 * v33++);
            if (v26)
            {
              v17 = v33 - 1;
              goto LABEL_28;
            }
          }
LABEL_41:
          sub_1000C6560(v8);
          return;
        }
      }
    }
LABEL_28:
    v15 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v17 << 6);
    goto LABEL_29;
  }
  __break(1u);
}

void sub_1005C75A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Class isa;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  _QWORD *v29;

  v2 = v1;
  v4 = _s10PredicatesOMa_2(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      sub_1005C6D60(a1);
      a1 = v7;
      if (!*(_QWORD *)(v7 + 16))
      {
        swift_bridgeObjectRelease();
        return;
      }
      if ((REMRemindersListDataView.AssignedInvocation.Parameters.countCompleted.getter() & 1) != 0)
      {
        v8 = sub_10001A630(&qword_10084F9F0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
      }
      else
      {
        REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter();
        v9 = sub_10001A630(&qword_10084F9F0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
      }
      v10 = (void *)sub_100568FB4();
      sub_10001C744((uint64_t)v6, _s10PredicatesOMa_2);
      v11 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
      v6 = (char *)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
      objc_msgSend(v6, "setEntity:", v12);

      objc_msgSend(v6, "setAffectedStores:", 0);
      objc_msgSend(v6, "setPredicate:", v10);
      sub_10056A46C();
      sub_1001DFBD0(v13);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      sub_10056A7CC();
      v15 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "setRelationshipKeyPathsForPrefetching:", v15, swift_bridgeObjectRelease().n128_f64[0]);

      v16 = NSManagedObjectContext.fetch<A>(_:)(v6, v11);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return;
      }
      v17 = v16;
      v29 = _swiftEmptyDictionarySingleton;
      if ((unint64_t)v16 >> 62)
      {
        if (v16 < 0)
          v26 = v16;
        else
          v26 = v16 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v16);
        v18 = _CocoaArrayWrapper.endIndex.getter(v26);
        if (!v18)
        {
LABEL_30:
          swift_bridgeObjectRelease_n(v17, 2);
          v23 = _swiftEmptyDictionarySingleton;
LABEL_31:
          swift_bridgeObjectRetain(a1);
          sub_1005C720C((uint64_t)v23, (_QWORD *)a1);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease_n(a1, 2);
          return;
        }
      }
      else
      {
        v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v16);
        if (!v18)
          goto LABEL_30;
      }
      v27 = v10;
      v19 = 4;
      while (1)
      {
        v20 = (v17 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v17)
            : *(id *)(v17 + 8 * v19);
        v21 = v20;
        v22 = v19 - 3;
        if (__OFADD__(v19 - 4, 1))
          break;
        v28 = v20;
        sub_1005C3798((uint64_t *)&v29, &v28);
        v2 = 0;

        ++v19;
        if (v22 == v18)
        {
          swift_bridgeObjectRelease_n(v17, 2);
          v23 = v29;
          v10 = v27;
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_21:
      if (a1 < 0)
        v24 = a1;
      else
        v24 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v25 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease();
    }
    while (v25);
  }
}

uint64_t sub_1005C79A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v56 = a2;
  v57 = a1;
  v2 = type metadata accessor for Logger(0);
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  __chkstk_darwin(v2);
  v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s9UtilitiesO12SortingStyleOMa(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v22 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v16, v21, v22);
  swift_storeEnumTagMultiPayload(v16, v13, 2);
  sub_1004979A4();
  sub_10001C744((uint64_t)v16, _s9UtilitiesO12SortingStyleOMa);
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v9, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v53);
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v6, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v55);
  v23 = v56;
  v24 = swift_bridgeObjectRetain(v56);
  v25 = v9;
  v26 = v57;
  REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)(v12, v25, 0, v6, v23, v24);
  v27 = v59;
  v28 = sub_1005C3048(v26);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  else
  {
    v29 = v17;
    v31 = v50;
    v30 = v51;
    sub_1005C75A8((uint64_t)v28);
    v34 = v33;
    v59 = v20;
    swift_bridgeObjectRelease();
    if (qword_1008379C8 != -1)
      swift_once(&qword_1008379C8, sub_1005C2A38);
    v35 = sub_10001AAA8(v30, (uint64_t)qword_100851668);
    v36 = v49;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 16))(v49, v35, v30);
    v57 = &v48;
    v58 = v34;
    v60 = v34;
    __chkstk_darwin(v37);
    *(&v48 - 2) = (uint64_t)v36;
    v38 = sub_10001A630(&qword_100841340);
    v39 = sub_10001A630((uint64_t *)&unk_10083A370);
    v40 = sub_1000A5F84(&qword_100841348, &qword_100841340, (uint64_t)&protocol conformance descriptor for [A]);
    v41 = Sequence.map<A>(skippingError:_:)(sub_1005C9F3C, &v48 - 4, sub_1005C3200, 0, v38, v39, v40);
    v42 = v18;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v49, v30);
    swift_bridgeObjectRelease();
    v60 = v41;
    v43 = sub_10001A630(&qword_1008466E8);
    v44 = sub_1000A5F84(&qword_1008516C0, &qword_1008466E8, (uint64_t)&protocol conformance descriptor for [A]);
    v45 = sub_1005C9EC4();
    v46 = Sequence<>.unique()(v43, v44, v45);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v46 + 16);
    v47 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v59, v29, v47);
  }
  return v18;
}

void sub_1005C7E18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;

  v4 = v3;
  v35 = a2;
  v36 = a3;
  v6 = sub_10001A630(&qword_10084C5D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v10 = *(unsigned __int8 **)(v9 - 8);
  __chkstk_darwin(v9);
  v33 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v30 = (char *)&v28 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v37 = v9;
    v32 = a1 & 0xC000000000000001;
    v34 = _swiftEmptyArrayStorage;
    v15 = 4;
    v31 = v8;
    v29 = a1;
    while (1)
    {
      v16 = v10;
      v17 = v32
          ? (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a1)
          : (unsigned __int8 *)*(id *)(a1 + 8 * v15);
      v10 = v17;
      v18 = v15 - 3;
      if (__OFADD__(v15 - 4, 1))
        break;
      v38 = v17;
      sub_1005C3284((id *)&v38, v35, v36, (uint64_t)v8);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      v9 = v14;

      v10 = v16;
      v19 = v37;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v16 + 6))(v8, 1, v37) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_10084C5D0);
      }
      else
      {
        v20 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v16 + 4);
        v21 = v30;
        v20(v30, v8, v19);
        v20(v33, v21, v19);
        v22 = (unint64_t)v34;
        swift_isUniquelyReferenced_nonNull_native(v34);
        if ((v23 & 1) == 0)
          v22 = sub_1002C84F0(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
        v25 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        if (v25 >= v24 >> 1)
          v22 = sub_1002C84F0(v24 > 1, v25 + 1, 1, v22);
        *(_QWORD *)(v22 + 16) = v25 + 1;
        v10 = v16;
        v26 = (v16[80] + 32) & ~(unint64_t)v16[80];
        v34 = (_QWORD *)v22;
        v20((char *)(v22 + v26 + *((_QWORD *)v16 + 9) * v25), v33, v37);
        a1 = v29;
      }
      ++v15;
      v14 = v9;
      v8 = v31;
      if (v18 == v9)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v27 = a1;
    else
      v27 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease();
}

uint64_t (*sub_1005C8104(uint64_t a1, uint64_t (*a2)(uint64_t a1), void *a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t (**v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  char *v77;
  uint64_t v78;
  __n128 v79;
  char *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (**v107)(char *, uint64_t, uint64_t);
  Class isa;
  char *v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  uint64_t (**v127)(char *, uint64_t, uint64_t);
  void *v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  id v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t);
  NSObject *v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t);
  char *v175;
  uint64_t v176;
  uint64_t *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  id v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t (**v192)(char *, uint64_t, uint64_t);
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  NSObject *v204;
  uint64_t v205;
  void *v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;

  v182 = a3;
  v205 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v189 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v196 = (uint64_t)&v167 - v9;
  v10 = type metadata accessor for UUID(0);
  v201 = *(_QWORD *)(v10 - 8);
  v202 = v10;
  __chkstk_darwin(v10);
  v191 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_10001A630(&qword_100844170);
  v186 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v175 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v197 = *(_QWORD *)(v13 - 8);
  v198 = v13;
  __chkstk_darwin(v13);
  v178 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v181 = (char *)&v167 - v16;
  v200 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v200);
  v180 = (uint64_t)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v183 = (uint64_t)&v167 - v19;
  __chkstk_darwin(v20);
  v195 = (char *)&v167 - v21;
  __chkstk_darwin(v22);
  v190 = (uint64_t)&v167 - v23;
  __chkstk_darwin(v24);
  v194 = (char *)&v167 - v25;
  __chkstk_darwin(v26);
  v199 = (uint64_t)&v167 - v27;
  v28 = type metadata accessor for Logger(0);
  v192 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v28 - 8);
  v193 = v28;
  __chkstk_darwin(v28);
  v203 = (char *)&v167 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  __chkstk_darwin(v30);
  v32 = (char *)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v177 = (uint64_t *)((char *)&v167 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v34);
  v179 = (char *)&v167 - v35;
  __chkstk_darwin(v36);
  v185 = (char *)&v167 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)&v167 - v39;
  v41 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v42 = __chkstk_darwin(v41);
  v44 = (char *)&v167 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters(0, v42);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v167 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = REMRemindersListDataView.AssignedInvocation.Parameters.sortingStyle.getter(v47);
  v51 = REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter(v50);
  v52.n128_f64[0] = REMRemindersListDataView.AssignedInvocation.Parameters.remindersPrefetch.getter(v51);
  v53 = a4;
  v54 = REMRemindersListDataView.AssignedInvocation.Parameters.currentUserShareParticipantIDsOverride.getter(v52);
  v55 = v205;
  REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)(v44, v40, 0, v32, v54, v56);
  v57 = v204;
  sub_1005C75A8(v55);
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
    return a2;
  }
  v204 = v58;
  v59 = v192;
  v170 = v44;
  v168 = v40;
  v167 = v53;
  v173 = 0;
  v171 = v46;
  v184 = v49;
  v172 = v45;
  v174 = a2;
  if (qword_1008379C8 != -1)
    swift_once(&qword_1008379C8, sub_1005C2A38);
  v60 = v193;
  v61 = sub_10001AAA8(v193, (uint64_t)qword_100851668);
  v62 = v59;
  v63 = v203;
  v64 = v59[2](v203, v61, v60);
  v169 = &v167;
  v209 = (uint64_t)v204;
  __chkstk_darwin(v64);
  *(&v167 - 2) = (uint64_t)v63;
  v65 = sub_10001A630(&qword_100841340);
  v66 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  v67 = sub_1000A5F84(&qword_100841348, &qword_100841340, (uint64_t)&protocol conformance descriptor for [A]);
  v68 = v173;
  v69 = Sequence.map<A>(skippingError:_:)(sub_1005C9F20, &v167 - 4, sub_1005C3214, 0, v65, v66, v67);
  v71 = v194;
  v70 = (uint64_t)v195;
  if (v68)
  {
    swift_errorRelease(v68);
    v72 = _swiftEmptyArrayStorage;
  }
  else
  {
    v72 = (_QWORD *)v69;
  }
  v73 = v199;
  ((void (*)(char *, uint64_t))v62[1])(v203, v60);
  swift_bridgeObjectRelease();
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v74 = sub_10001A630((uint64_t *)&unk_10083A270);
  v75 = swift_allocObject(v74, 72, 7);
  *(_OWORD *)(v75 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v75 + 56) = sub_10001A630((uint64_t *)&unk_100846CB0);
  *(_QWORD *)(v75 + 64) = sub_1000A5F84(&qword_10084C270, (uint64_t *)&unk_100846CB0, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v75 + 32) = v72;
  v77 = (char *)NSPredicate.init(format:_:)(0x204E4920464C4553, 0xEA00000000004025, v75, v76);
  v78 = (uint64_t)v170;
  REMRemindersListDataView.AssignedInvocation.Parameters.sortingStyle.getter(v79);
  (*(void (**)(id, _QWORD, uint64_t))(v197 + 104))(v71, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v198);
  swift_storeEnumTagMultiPayload(v71, v200, 2);
  sub_1004957D0(v78, (uint64_t)v71, v73);
  v80 = (char *)REMSmartListTypeAssigned;
  v81 = sub_1004961B4(v70, v174, REMSmartListTypeAssigned, v73);
  v203 = v80;
  v204 = v81;
  sub_1003BFBD0(v70, v190);
  if (qword_1008375D8 != -1)
    swift_once(&qword_1008375D8, sub_100497894);
  v82 = qword_100871F88;
  KeyPath = swift_getKeyPath(&unk_1006C46D8);
  v84 = swift_getKeyPath(&unk_1006C4710);
  v208 = v82;
  if ((unint64_t)v82 >> 62)
  {
    if (v82 < 0)
      v161 = v82;
    else
      v161 = v82 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v82, 2);
    v85 = _CocoaArrayWrapper.endIndex.getter(v161);
    swift_bridgeObjectRelease();
    v87 = v85 + 2;
    if (!__OFADD__(v85, 2))
    {
LABEL_12:
      v88 = sub_100191218(v87);
      specialized Array._endMutation()(v88);
      v89 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v89);
      v85 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v86 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v85 < v86 >> 1)
        goto LABEL_13;
      goto LABEL_51;
    }
  }
  else
  {
    v85 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v82);
    v87 = v85 + 2;
    if (!__OFADD__(v85, 2))
      goto LABEL_12;
  }
  __break(1u);
LABEL_51:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1);
LABEL_13:
  v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, KeyPath);
  specialized Array._endMutation()(v90);
  v91 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v91);
  v93 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v92 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v93 >= v92 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1);
  v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, v84);
  specialized Array._endMutation()(v94);
  v95 = v208;
  swift_release(v84);
  swift_release(KeyPath);
  v209 = v95;
  v96 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v97 = (_QWORD *)swift_allocObject(v96, 48, 7);
  *((_OWORD *)v97 + 1) = xmmword_1006A8550;
  v97[4] = swift_getKeyPath(&unk_1006C46D8);
  v98 = swift_getKeyPath(&unk_1006C4710);
  v97[5] = v98;
  v207 = v97;
  specialized Array._endMutation()(v98);
  v208 = (unint64_t)v207;
  sub_10049AAF8(v73);
  sub_1001E12FC(v99);
  sub_10049ACB4(v73);
  sub_1001E12FC(v100);
  v101 = sub_10001A630(&qword_10083FD30);
  Array<A>.removeDuplicates()(v101, &protocol witness table for AnyKeyPath);
  Array<A>.removeDuplicates()(v101, &protocol witness table for AnyKeyPath);
  v102 = v209;
  v103 = v208;
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRetain(v103);
  v104 = (char *)sub_100358798(v102, v103, 0, (uint64_t)v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v105 = (uint64_t)v168;
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter(v106);
  sub_10049ADC0(v190, v105, 0);
  v107 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v187 + 8);
  ((void (*)(uint64_t, uint64_t))v107)(v105, v188);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v109 = v104;
  objc_msgSend(v104, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0], v167);

  v110 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v111 = v174;
  v112 = NSManagedObjectContext.fetch<A>(_:)(v104, v110);
  v195 = v77;
  swift_bridgeObjectRetain(v112);
  v113 = v185;
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter(v114);
  sub_100498430(v112, v113, v111, 0);
  v193 = v115;
  v194 = v109;
  v192 = v107;
  ((void (*)(void *, uint64_t))v107)(v113, v188);
  v117 = v112;
  swift_bridgeObjectRelease();
  v118 = v183;
  sub_1001D8AD8(v190, v183);
  if (swift_getEnumCaseMultiPayload(v118, v200) != 4)
  {
    sub_10001C744(v118, _s9UtilitiesO12SortingStyleOMa);
    goto LABEL_23;
  }
  v119 = *(_QWORD *)v118;

  v185 = (char *)v119;
  if (!v119)
    goto LABEL_23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v120 = sub_10049A8FC();
  if (!v120)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    v129 = v180;
    sub_1001D8AD8(v73, v180);
    v130 = (char *)&loc_1005C8DA8 + *((int *)qword_1005C9548 + swift_getEnumCaseMultiPayload(v129, v200));
    __asm { BR              X10 }
  }
  v121 = v120;
  v122 = v179;
  REMRemindersListDataView.AssignedInvocation.Parameters.showCompleted.getter(v120);
  v123 = v187;
  v124 = v177;
  v125 = v188;
  (*(void (**)(uint64_t *, char *, uint64_t))(v187 + 16))(v177, v122, v188);
  v126 = (*(uint64_t (**)(uint64_t *, uint64_t))(v123 + 88))(v124, v125);
  if (v126 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    v127 = v192;
    ((void (*)(uint64_t *, uint64_t))v192)(v124, v125);
    v128 = &_swiftEmptySetSingleton;
  }
  else
  {
    v127 = v192;
    if (v126 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v123 + 96))(v124, v125);
      v128 = (void *)sub_1002EBC10(*v124);
      swift_bridgeObjectRelease();
    }
    else
    {
      v128 = &_swiftEmptySetSingleton;
      if (v126 != enum case for REMRemindersListDataView.ShowCompleted.off(_:)
        && v126 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
      {
        goto LABEL_61;
      }
    }
  }
  v131 = v117;
  swift_bridgeObjectRetain(v117);
  v133 = sub_10049B990(v132, (uint64_t)v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10011F128((uint64_t)v133);
  v135 = v134;
  swift_bridgeObjectRelease();
  sub_10018BB4C(v135);
  v137 = v136;
  swift_bridgeObjectRelease();
  v138 = (uint64_t)sub_1001D61DC((uint64_t)v185, v137, v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v121);
  v139 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v127)(v179, v125, v139);
  v207 = _swiftEmptyDictionarySingleton;
  v140 = v138;
  v173 = 0;
  if ((unint64_t)v138 >> 62)
  {
    if (v138 < 0)
      v162 = v138;
    else
      v162 = v138 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v138);
    v141 = _CocoaArrayWrapper.endIndex.getter(v162);
    swift_bridgeObjectRelease();
    v142 = v196;
    if (v141)
      goto LABEL_31;
  }
  else
  {
    v141 = *(_QWORD *)((v138 & 0xFFFFFFFFFFFFF8) + 0x10);
    v142 = v196;
    if (v141)
    {
LABEL_31:
      if (v141 >= 1)
      {
        v143 = 0;
        while (1)
        {
          if ((v138 & 0xC000000000000001) != 0)
            v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v143, v140);
          else
            v144 = *(id *)(v140 + 8 * v143 + 32);
          v145 = v144;
          v146 = objc_msgSend(v144, "list");
          if (v146)
          {
            v147 = v146;
            v148 = objc_msgSend(v146, "identifier");

            if (v148)
            {
              v149 = v189;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v148);

              v150 = 0;
            }
            else
            {
              v150 = 1;
              v149 = v189;
            }
            v152 = v201;
            v151 = v202;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v149, v150, 1, v202);
            v153 = (uint64_t)v149;
            v154 = v151;
            v142 = v196;
            sub_1000F2CE4(v153, v196);
            v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v142, 1, v154);
            v140 = v138;
            if (v155 != 1)
            {
              v156 = v201;
              (*(void (**)(char *, uint64_t, uint64_t))(v201 + 32))(v191, v142, v154);
              v206 = v145;
              v157 = sub_10001A630(&qword_10083B4D0);
              v158 = sub_1000A5F84((unint64_t *)&qword_10083B4D8, &qword_10083D590, (uint64_t)&protocol conformance descriptor for [A]);
              v159 = v157;
              v142 = v196;
              Dictionary<>.append(_:toCollectionUnderKey:)(&v206, v191, v159, v158);
              v160 = *(void (**)(char *, uint64_t))(v156 + 8);
              v140 = v138;
              v160(v191, v202);

              goto LABEL_35;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v142, 1, 1, v202);
          }

          sub_10000882C(v142, (uint64_t *)&unk_100839C80);
LABEL_35:
          if (v141 == ++v143)
            goto LABEL_56;
        }
      }
      __break(1u);
LABEL_61:
      _diagnoseUnexpectedEnumCase<A>(type:)(v125, v125);
      __break(1u);
      JUMPOUT(0x1005C9548);
    }
  }
LABEL_56:
  swift_bridgeObjectRelease();
  v163 = v193;
  swift_bridgeObjectRetain(v193);
  v164 = v173;
  sub_1005C7E18(v205, (uint64_t *)&v207, v163);
  a2 = v165;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v166 = v204;
  sub_10049E31C(v204, v203, (uint64_t)v174, v182);
  if (v164)
  {
    swift_bridgeObjectRelease();

    a2 = _s9UtilitiesO12SortingStyleOMa;
  }
  else
  {

  }
  sub_10001C744(v190, _s9UtilitiesO12SortingStyleOMa);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v184, v172);
  sub_10001C744(v199, _s9UtilitiesO12SortingStyleOMa);
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1005C9560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3;
  if ((REMRemindersListDataView.AssignedInvocation.Parameters.countCompleted.getter(v8) & 1) == 0)
    return 0;
  sub_1005C75A8(a1);
  if (!v3)
  {
    v13 = v12;
    if (qword_1008379C8 != -1)
      swift_once(&qword_1008379C8, sub_1005C2A38);
    v14 = sub_10001AAA8(v6, (uint64_t)qword_100851668);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v14, v6);
    v25[0] = v25;
    v25[1] = v13;
    v26 = v13;
    __chkstk_darwin(v15);
    v25[-2] = v10;
    v16 = sub_10001A630(&qword_100841340);
    v17 = sub_10001A630((uint64_t *)&unk_10083A370);
    v18 = sub_1000A5F84(&qword_100841348, &qword_100841340, (uint64_t)&protocol conformance descriptor for [A]);
    v19 = Sequence.map<A>(skippingError:_:)(sub_1005C9EB8, &v25[-4], sub_1005C3200, 0, v16, v17, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_bridgeObjectRelease();
    v26 = v19;
    v20 = sub_10001A630(&qword_1008466E8);
    v21 = sub_1000A5F84(&qword_1008516C0, &qword_1008466E8, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = sub_1005C9EC4();
    v23 = Sequence<>.unique()(v20, v21, v22);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v23 + 16);
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1005C97C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(char *, uint64_t, uint64_t, __n128), uint64_t a7)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  char v53;
  __n128 v54;
  __n128 v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, __n128);
  __n128 v58;
  BOOL v59;
  __n128 v60;
  __n128 v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t, __n128);
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t, __n128);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v105 = a4;
  v107 = a7;
  v101 = a6;
  LODWORD(v102) = a5;
  v92 = a3;
  v93 = a2;
  v94 = a1;
  v7 = a5 & 1;
  v8 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v87 = *(_QWORD *)(v8 - 8);
  v88 = v8;
  __chkstk_darwin(v8);
  v90 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v84 = *(_QWORD *)(v85 - 8);
  v10 = __chkstk_darwin(v85);
  v86 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for REMRemindersListDataView.AssignedInvocation.Parameters(0, v10);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v97 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v98 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v103 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v83 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v96 = (char *)&v78 - v21;
  __chkstk_darwin(v22);
  v104 = (char *)&v78 - v23;
  v24 = sub_10001A630(&qword_1008516B8);
  __chkstk_darwin(v24);
  v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v78 - v29;
  v32 = (char *)&v78 + *(int *)(v31 + 48) - v29;
  *(_QWORD *)v30 = v105;
  v30[8] = v7;
  v33 = *(void (**)(char *, char *, uint64_t, __n128))(v18 + 16);
  v33(v32, (char *)v101, v17, v28);
  *(_QWORD *)&v30[*(int *)(v24 + 64)] = v107;
  v34 = &v26[*(int *)(v24 + 48)];
  v35 = v32;
  v36 = v104;
  v95 = v33;
  ((void (*)(char *, char *, uint64_t))v33)(v34, v35, v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v36, v34, v17);
  if ((v102 & 1) == 0)
  {
    v57 = *(void (**)(char *, uint64_t, __n128))(v18 + 8);
    v58 = swift_bridgeObjectRetain(v107);
    v57(v36, v17, v58);
    sub_10000882C((uint64_t)v30, &qword_1008516B8);
    return v105 > 0;
  }
  v81 = v30;
  v37 = *(_QWORD *)(v107 + 16);
  v38 = v106;
  if (v37)
  {
    v79 = v18;
    v80 = v17;
    v105 = v107 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80));
    v39 = *(_QWORD *)(v103 + 72);
    v101 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v103 + 16);
    v102 = v39;
    v40 = swift_bridgeObjectRetain_n(v107, 3);
    v41 = 0;
    v43 = v99;
    v42 = v100;
    v44 = v98;
    v78 = v37;
    while (1)
    {
      v45 = v101(v43, v105 + v102 * v41, v42, v40);
      v46 = REMRemindersListDataView.ListsModel.Sublist.reminders.getter(v45);
      v47 = *(_QWORD *)(v46 + 16);
      if (v47)
        break;
      v54 = swift_bridgeObjectRelease();
LABEL_10:
      ++v41;
      (*(void (**)(char *, uint64_t, __n128))(v103 + 8))(v43, v42, v54);
      if (v41 == v37)
      {
        v55 = swift_bridgeObjectRelease_n(v107, 2);
        v17 = v80;
        v56 = v79;
        v36 = v104;
        goto LABEL_15;
      }
    }
    v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    v82 = v46;
    v49 = v46 + v48;
    v50 = *(_QWORD *)(v44 + 72);
    v51 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v44 + 16);
    while (1)
    {
      v52 = v51(v15, v49, v13);
      v53 = REMRemindersListDataView.ReminderLite.isCompleted.getter(v52);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v13);
      if ((v53 & 1) != 0)
        break;
      v49 += v50;
      if (!--v47)
      {
        v54 = swift_bridgeObjectRelease();
        v38 = v106;
        v43 = v99;
        v42 = v100;
        v37 = v78;
        goto LABEL_10;
      }
    }
    v60 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v103 + 8))(v99, v100, v60);
    v61 = swift_bridgeObjectRelease_n(v107, 2);
    (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v104, v80, v61);
    sub_10000882C((uint64_t)v81, &qword_1008516B8);
    return 1;
  }
  v55 = swift_bridgeObjectRetain(v107);
  v56 = v18;
LABEL_15:
  v62 = v96;
  v95(v96, v36, v17, v55);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v62, v17);
  v64 = (uint64_t)v97;
  v65 = (uint64_t)v81;
  if (v63 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v62, v17);
    goto LABEL_20;
  }
  if (v63 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v56 + 96))(v62, v17);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v63 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
LABEL_20:
    v66 = v36;
    v67 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v86, enum case for REMRemindersListDataView.SortingStyle.default(_:), v85);
    v68 = v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v83, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v17);
    v69 = v90;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v90, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v88);
    v70 = v92;
    v71 = swift_bridgeObjectRetain(v92);
    REMRemindersListDataView.AssignedInvocation.Parameters.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:currentUserShareParticipantIDsOverride:)(v67, v68, 1, v69, v70, v71);
    v72 = sub_1005C9560(v93, v94, v64);
    if (v38)
    {
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v64, v91);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v17);
      sub_10000882C(v65, &qword_1008516B8);
    }
    else
    {
      v74 = v72;
      v75 = v73;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v64, v91);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v17);
      sub_10000882C(v65, &qword_1008516B8);
      return (v75 & 1) == 0 && v74 > 0;
    }
    return v59;
  }
  if (v63 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v17);
    sub_10000882C(v65, &qword_1008516B8);
    return 0;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v17, v17);
  __break(1u);
  return result;
}

uint64_t sub_1005C9EB8(uint64_t a1, uint64_t a2)
{
  return sub_10037F22C(a2);
}

unint64_t sub_1005C9EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008516C8;
  if (!qword_1008516C8)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083A370);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1008516C8);
  }
  return result;
}

uint64_t sub_1005C9F20(uint64_t a1, uint64_t a2)
{
  return sub_10037F700(a2);
}

uint64_t sub_1005C9F40(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD *v31;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  v31 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v1, 0);
  v2 = _swiftEmptyArrayStorage;
  result = sub_100658CFC(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v26 = v1;
  v27 = v5;
  v28 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v29 = v7;
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = v12[1];
    v30[0] = *v12;
    v30[1] = v13;
    v14 = swift_bridgeObjectRetain(v13);
    result = String.init<A>(_:)(v30, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v14);
    v15 = result;
    v17 = v16;
    v31 = v2;
    v19 = v2[2];
    v18 = v2[3];
    if (v19 >= v18 >> 1)
    {
      result = sub_1001C1B0C(v18 > 1, v19 + 1, 1);
      v2 = v31;
    }
    v2[2] = v19 + 1;
    v20 = &v2[2 * v19];
    v20[4] = v15;
    v20[5] = v17;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v21 = *(_QWORD *)(v28 + 8 * v11);
    if ((v21 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v27;
    if (*(_DWORD *)(a1 + 36) != v27)
      goto LABEL_27;
    v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      v9 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v26;
    }
    else
    {
      v23 = v11 + 1;
      v24 = (unint64_t)(v9 + 63) >> 6;
      v10 = v26;
      if (v11 + 1 < v24)
      {
        v25 = *(_QWORD *)(v28 + 8 * v23);
        if (v25)
        {
LABEL_20:
          v9 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v11)
          {
            v25 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v25)
            {
              v23 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v29 + 1;
    v6 = v9;
    if (v29 + 1 == v10)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

_QWORD *sub_1005CA170(uint64_t (*a1)(id *), _QWORD *a2, unint64_t a3)
{
  return sub_1005CA184(a1, a2, a3);
}

_QWORD *sub_1005CA184(uint64_t (*a1)(id *), _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(id *);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;

  v4 = a3;
  v26 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
      v24 = v4 & 0xC000000000000001;
      v22 = v4;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v25 = v9;
        v12 = a2;
        v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v7;
          v15 = a1;
          v16 = a2;
          v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          a1 = v15;
          v7 = v14;
          v4 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v26;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

void sub_1005CA328(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = (void *)v11[1];
    swift_bridgeObjectRetain(v13);
    v14._countAndFlagsBits = v12;
    v14._object = v13;
    v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DB5F0, v14);
    swift_bridgeObjectRelease();
    if (v15 <= 7)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C8F00(0, v8[2] + 1, 1, v8);
      v19 = v8;
      v20 = v8[2];
      v21 = v19;
      v22 = v19[3];
      if (v20 >= v22 >> 1)
        v21 = sub_1002C8F00((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
      v21[2] = v20 + 1;
      v23 = (char *)v21 + v20;
      v8 = v21;
      v23[32] = v15;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_29;
      v17 = *(_QWORD *)(v2 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_29;
        v17 = *(_QWORD *)(v2 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_29;
          v17 = *(_QWORD *)(v2 + 8 * v7);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CA540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    v14 = sub_100259B98(v12, v13);
    if (v14 == 26)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v18 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C9030(0, v8[2] + 1, 1, v8);
      v20 = v8[2];
      v19 = v8[3];
      if (v20 >= v19 >> 1)
        v8 = sub_1002C9030((_QWORD *)(v19 > 1), v20 + 1, 1, v8);
      v8[2] = v20 + 1;
      *((_BYTE *)v8 + v20 + 32) = v18;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v6)
      goto LABEL_29;
    v16 = *(_QWORD *)(v2 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v6)
        goto LABEL_29;
      v16 = *(_QWORD *)(v2 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v6)
          goto LABEL_29;
        v16 = *(_QWORD *)(v2 + 8 * v7);
        if (!v16)
        {
          v7 = v15 + 3;
          if (v15 + 3 >= v6)
            goto LABEL_29;
          v16 = *(_QWORD *)(v2 + 8 * v7);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v2 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v16 = *(_QWORD *)(v2 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1005CA73C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = _swiftEmptyArrayStorage;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v13 | (v11 << 6); ; i = __clz(__rbit64(v19)) + (v11 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain(v17);
    result = a2(v16, v17);
    if (result == 38)
    {
      if (v8)
        goto LABEL_4;
    }
    else
    {
      v21 = result;
      result = swift_isUniquelyReferenced_nonNull_native(v12);
      if ((result & 1) == 0)
      {
        result = a3(0, v12[2] + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v23 = v12[2];
      v22 = v12[3];
      v24 = v12;
      if (v23 >= v22 >> 1)
      {
        result = a3(v22 > 1, v23 + 1, 1, v12);
        v24 = (_QWORD *)result;
      }
      v24[2] = v23 + 1;
      v12 = v24;
      *((_BYTE *)v24 + v23 + 32) = v21;
      if (v8)
        goto LABEL_4;
    }
LABEL_7:
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v9)
      goto LABEL_29;
    v19 = *(_QWORD *)(v5 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v9)
        goto LABEL_29;
      v19 = *(_QWORD *)(v5 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v9)
          goto LABEL_29;
        v19 = *(_QWORD *)(v5 + 8 * v11);
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v9)
            goto LABEL_29;
          v19 = *(_QWORD *)(v5 + 8 * v11);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v19 - 1) & v19;
  }
  v20 = v18 + 4;
  if (v20 >= v9)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v12;
  }
  v19 = *(_QWORD *)(v5 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v9)
      goto LABEL_29;
    v19 = *(_QWORD *)(v5 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_1005CA94C(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = (void *)v14[1];
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    v18 = _findStringSwitchCase(cases:string:)(a2, v17);
    swift_bridgeObjectRelease(v16);
    if (v18 <= 2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)a3(0, v11[2] + 1, 1, v11);
      v22 = v11;
      v23 = v11[2];
      v24 = (uint64_t)v22;
      v25 = v22[3];
      if (v23 >= v25 >> 1)
        v24 = a3(v25 > 1, v23 + 1, 1, (_QWORD *)v24);
      *(_QWORD *)(v24 + 16) = v23 + 1;
      v26 = v24 + v23;
      v11 = (_QWORD *)v24;
      *(_BYTE *)(v26 + 32) = v18;
      if (v8)
        goto LABEL_4;
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v19 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_29;
      v20 = *(_QWORD *)(v5 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_29;
        v20 = *(_QWORD *)(v5 + 8 * v10);
        if (!v20)
        {
          v10 = v19 + 3;
          if (v19 + 3 >= v9)
            goto LABEL_29;
          v20 = *(_QWORD *)(v5 + 8 * v10);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v20 - 1) & v20;
  }
  v21 = v19 + 4;
  if (v21 >= v9)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v5 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CAB6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = (void *)v11[1];
    swift_bridgeObjectRetain(v13);
    v14._countAndFlagsBits = v12;
    v14._object = v13;
    v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC318, v14);
    swift_bridgeObjectRelease();
    if (v15 <= 0xB)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C906C(0, v8[2] + 1, 1, v8);
      v19 = v8;
      v20 = v8[2];
      v21 = v19;
      v22 = v19[3];
      if (v20 >= v22 >> 1)
        v21 = sub_1002C906C((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
      v21[2] = v20 + 1;
      v23 = (char *)v21 + v20;
      v8 = v21;
      v23[32] = v15;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_29;
      v17 = *(_QWORD *)(v2 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_29;
        v17 = *(_QWORD *)(v2 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_29;
          v17 = *(_QWORD *)(v2 + 8 * v7);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CAD84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = (void *)v11[1];
    swift_bridgeObjectRetain(v13);
    v14._countAndFlagsBits = v12;
    v14._object = v13;
    v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC510, v14);
    swift_bridgeObjectRelease();
    if (v15 <= 0xD)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C9090(0, v8[2] + 1, 1, v8);
      v19 = v8;
      v20 = v8[2];
      v21 = v19;
      v22 = v19[3];
      if (v20 >= v22 >> 1)
        v21 = sub_1002C9090((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
      v21[2] = v20 + 1;
      v23 = (char *)v21 + v20;
      v8 = v21;
      v23[32] = v15;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_29;
      v17 = *(_QWORD *)(v2 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_29;
        v17 = *(_QWORD *)(v2 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_29;
          v17 = *(_QWORD *)(v2 + 8 * v7);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CAF9C(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::Int v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = (void *)v14[1];
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    v18 = _findStringSwitchCase(cases:string:)(a2, v17);
    swift_bridgeObjectRelease(v16);
    if (v18)
    {
      if (v8)
        goto LABEL_4;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)a3(0, v11[2] + 1, 1, v11);
      v23 = v11[2];
      v22 = v11[3];
      v24 = v23 + 1;
      if (v23 >= v22 >> 1)
        v11 = (_QWORD *)a3(v22 > 1, v23 + 1, 1, v11);
      v11[2] = v24;
      if (v8)
        goto LABEL_4;
    }
LABEL_7:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v19 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_29;
      v20 = *(_QWORD *)(v5 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_29;
        v20 = *(_QWORD *)(v5 + 8 * v10);
        if (!v20)
        {
          v10 = v19 + 3;
          if (v19 + 3 >= v9)
            goto LABEL_29;
          v20 = *(_QWORD *)(v5 + 8 * v10);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v20 - 1) & v20;
  }
  v21 = v19 + 4;
  if (v21 >= v9)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v5 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CB1A4(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = (void *)v14[1];
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    v18 = _findStringSwitchCase(cases:string:)(a2, v17);
    swift_bridgeObjectRelease(v16);
    if (v18 <= 5)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)a3(0, v11[2] + 1, 1, v11);
      v22 = v11;
      v23 = v11[2];
      v24 = (uint64_t)v22;
      v25 = v22[3];
      if (v23 >= v25 >> 1)
        v24 = a3(v25 > 1, v23 + 1, 1, (_QWORD *)v24);
      *(_QWORD *)(v24 + 16) = v23 + 1;
      v26 = v24 + v23;
      v11 = (_QWORD *)v24;
      *(_BYTE *)(v26 + 32) = v18;
      if (v8)
        goto LABEL_4;
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v19 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_29;
      v20 = *(_QWORD *)(v5 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_29;
        v20 = *(_QWORD *)(v5 + 8 * v10);
        if (!v20)
        {
          v10 = v19 + 3;
          if (v19 + 3 >= v9)
            goto LABEL_29;
          v20 = *(_QWORD *)(v5 + 8 * v10);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v20 - 1) & v20;
  }
  v21 = v19 + 4;
  if (v21 >= v9)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v5 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CB3C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = (void *)v11[1];
    swift_bridgeObjectRetain(v13);
    v14._countAndFlagsBits = v12;
    v14._object = v13;
    v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC7B8, v14);
    swift_bridgeObjectRelease();
    if (v15 <= 4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C90C0(0, v8[2] + 1, 1, v8);
      v19 = v8;
      v20 = v8[2];
      v21 = v19;
      v22 = v19[3];
      if (v20 >= v22 >> 1)
        v21 = sub_1002C90C0((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
      v21[2] = v20 + 1;
      v23 = (char *)v21 + v20;
      v8 = v21;
      v23[32] = v15;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_29;
      v17 = *(_QWORD *)(v2 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_29;
        v17 = *(_QWORD *)(v2 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_29;
          v17 = *(_QWORD *)(v2 + 8 * v7);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v17 = *(_QWORD *)(v2 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CB5DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    v14 = sub_1004773E8(v12, v13);
    if (v14 == 22)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v18 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1002C90D8(0, v8[2] + 1, 1, v8);
      v20 = v8[2];
      v19 = v8[3];
      if (v20 >= v19 >> 1)
        v8 = sub_1002C90D8((_QWORD *)(v19 > 1), v20 + 1, 1, v8);
      v8[2] = v20 + 1;
      *((_BYTE *)v8 + v20 + 32) = v18;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v6)
      goto LABEL_29;
    v16 = *(_QWORD *)(v2 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v6)
        goto LABEL_29;
      v16 = *(_QWORD *)(v2 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v6)
          goto LABEL_29;
        v16 = *(_QWORD *)(v2 + 8 * v7);
        if (!v16)
        {
          v7 = v15 + 3;
          if (v15 + 3 >= v6)
            goto LABEL_29;
          v16 = *(_QWORD *)(v2 + 8 * v7);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v2 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v16 = *(_QWORD *)(v2 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_1005CB7D8(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::Int v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v25 = _swiftEmptyArrayStorage;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v10 << 6);
LABEL_22:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v17 = *v16;
    v18 = (void *)v16[1];
    swift_bridgeObjectRetain(v18);
    v19._countAndFlagsBits = v17;
    v19._object = v18;
    v20 = _findStringSwitchCase(cases:string:)(a2, v19);
    swift_bridgeObjectRelease(v18);
    if (v20 == 1)
    {
      v21 = 1;
LABEL_26:
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        v25 = (_QWORD *)a3(0, v25[2] + 1, 1);
      v23 = v25[2];
      v22 = v25[3];
      if (v23 >= v22 >> 1)
        v25 = (_QWORD *)((uint64_t (*)(BOOL, unint64_t, uint64_t, _QWORD *))a3)(v22 > 1, v23 + 1, 1, v25);
      v25[2] = v23 + 1;
      *((_BYTE *)v25 + v23 + 32) = v21;
    }
    else if (!v20)
    {
      v21 = 0;
      goto LABEL_26;
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v13 >= v9)
    goto LABEL_31;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_21;
  v10 = v13 + 1;
  if (v13 + 1 >= v9)
    goto LABEL_31;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 2;
  if (v13 + 2 >= v9)
    goto LABEL_31;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 3;
  if (v13 + 3 >= v9)
    goto LABEL_31;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
  {
LABEL_21:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 4;
  if (v15 >= v9)
  {
LABEL_31:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      goto LABEL_31;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

void sub_1005CBA00(uint64_t a1, Swift::OpaquePointer a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = (void *)v14[1];
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    v18 = _findStringSwitchCase(cases:string:)(a2, v17);
    swift_bridgeObjectRelease(v16);
    if (v18 <= 3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)a3(0, v11[2] + 1, 1, v11);
      v22 = v11;
      v23 = v11[2];
      v24 = (uint64_t)v22;
      v25 = v22[3];
      if (v23 >= v25 >> 1)
        v24 = a3(v25 > 1, v23 + 1, 1, (_QWORD *)v24);
      *(_QWORD *)(v24 + 16) = v23 + 1;
      v26 = v24 + v23;
      v11 = (_QWORD *)v24;
      *(_BYTE *)(v26 + 32) = v18;
      if (v8)
        goto LABEL_4;
    }
    else if (v8)
    {
      goto LABEL_4;
    }
LABEL_7:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v19 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_29;
      v20 = *(_QWORD *)(v5 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_29;
        v20 = *(_QWORD *)(v5 + 8 * v10);
        if (!v20)
        {
          v10 = v19 + 3;
          if (v19 + 3 >= v9)
            goto LABEL_29;
          v20 = *(_QWORD *)(v5 + 8 * v10);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v20 - 1) & v20;
  }
  v21 = v19 + 4;
  if (v21 >= v9)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v5 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v9)
      goto LABEL_29;
    v20 = *(_QWORD *)(v5 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void *sub_1005CBC20(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *ObjCClassFromMetadata;
  id v8;
  os_log_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  unint64_t v55;
  NSString v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  Swift::String v85;
  id v86;
  uint64_t v87;
  void *v88;
  void *v89;
  Swift::String v90;
  Swift::String v91;
  id v92;
  uint64_t v93;
  void *v94;
  void *v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  void *v99;
  Swift::String v100;
  unint64_t v101;
  NSString v102;
  uint64_t v103;
  id v105;
  NSObject *v106;
  os_log_type_t v107;
  char **v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  Swift::String v118;
  id v119;
  uint64_t v120;
  void *v121;
  void *v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;
  void *object;
  Swift::String v127;
  unint64_t v128;
  NSString v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  _QWORD *v139;
  os_log_t v140;
  os_log_t v141;
  NSObject *loga;
  os_log_t log;
  id v144;
  id v145;
  void *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v2 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v146 = a1;
  v3 = objc_msgSend(a1, "entityName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  v8 = objc_msgSend(ObjCClassFromMetadata, "entity");
  if (!v8)
  {
    swift_bridgeObjectRelease(v6);
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10083C248);
    v18 = v146;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      loga = v19;
      v21 = swift_slowAlloc(22, -1);
      v140 = (os_log_t)swift_slowAlloc(8, -1);
      v145 = (id)swift_slowAlloc(32, -1);
      v147 = (uint64_t)v145;
      *(_DWORD *)v21 = 138412546;
      v22 = ObjCClassFromMetadata;
      v149 = (uint64_t)v18;
      v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      v140->isa = (Class)v18;

      *(_WORD *)(v21 + 12) = 2080;
      v24 = objc_msgSend(ObjCClassFromMetadata, "description");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      ObjCClassFromMetadata = v22;
      v149 = sub_10001A820(v25, v27, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, loga, v20, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v21, 0x16u);
      v28 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v140, 1, v28);
      swift_slowDealloc(v140, -1, -1);
      swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
    v41 = (void *)objc_opt_self(REMError);
    v147 = 0;
    v148 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v42._countAndFlagsBits = 0xD000000000000030;
    v42._object = (void *)0x8000000100709950;
    String.append(_:)(v42);
    v43 = objc_msgSend(v18, "description");
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(v46);
    v48._countAndFlagsBits = 0x656A624F4443202CLL;
    v48._object = (void *)0xEC000000203A7463;
    String.append(_:)(v48);
    v49 = objc_msgSend(ObjCClassFromMetadata, "description");
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    v53._countAndFlagsBits = v50;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v52);
    v54._countAndFlagsBits = 125;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    v55 = v148;
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v41, "internalErrorWithDebugDescription:", v56, swift_bridgeObjectRelease(v55).n128_f64[0]);

    swift_willThrow(v57);
    goto LABEL_30;
  }
  v144 = ObjCClassFromMetadata;
  v9 = (os_log_t)v8;
  v10 = -[NSObject name](v9, "name");
  if (!v10)
    goto LABEL_13;
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  if (v12 == v4 && v14 == v6)
  {

    swift_bridgeObjectRelease(v6);
    goto LABEL_18;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v4, v6, 0);
  swift_bridgeObjectRelease(v14);
  if ((v16 & 1) == 0)
  {
LABEL_13:
    v134 = v4;
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10083C248);
    v30 = v146;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    log = v9;
    v133 = v2;
    v137 = v30;
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v131 = v31;
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      v132 = swift_slowAlloc(32, -1);
      v147 = v132;
      *(_DWORD *)v33 = 138412546;
      v149 = (uint64_t)v30;
      v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      *v34 = v30;

      *(_WORD *)(v33 + 12) = 2080;
      v36 = objc_msgSend(v144, "description");
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v149 = sub_10001A820(v37, v39, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v131, v32, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v33, 0x16u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v40);
      swift_slowDealloc(v34, -1, -1);
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v132, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    v58 = -[NSObject managedObjectModel](v9, "managedObjectModel");
    v59 = objc_msgSend(v58, "entitiesByName");

    v60 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String, v60, &protocol witness table for String);

    if (*(_QWORD *)(v61 + 16) && (v62 = sub_10001A6DC(v134, v6), (v63 & 1) != 0))
    {
      v64 = *(id *)(*(_QWORD *)(v61 + 56) + 8 * v62);
      swift_bridgeObjectRelease(v6);
      if (objc_msgSend(v64, "isKindOfEntity:", v9, swift_bridgeObjectRelease(v61).n128_f64[0]))
      {

        return v146;
      }
      v136 = v64;
      v105 = v137;
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.fault.getter();
      v108 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v106, v107))
      {
        v109 = swift_slowAlloc(22, -1);
        v139 = (_QWORD *)swift_slowAlloc(8, -1);
        v141 = (os_log_t)swift_slowAlloc(32, -1);
        v147 = (uint64_t)v141;
        *(_DWORD *)v109 = 138412546;
        v149 = (uint64_t)v105;
        v110 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
        *v139 = v105;

        *(_WORD *)(v109 + 12) = 2080;
        v111 = objc_msgSend(v144, "description");
        v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
        v114 = v113;

        v115 = v112;
        v9 = log;
        v149 = sub_10001A820(v115, v114, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
        v108 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        swift_bridgeObjectRelease(v114);
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v109, 0x16u);
        v116 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v139, 1, v116);
        swift_slowDealloc(v139, -1, -1);
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v109, -1, -1);

      }
      else
      {

      }
      v117 = (void *)objc_opt_self(REMError);
      v147 = 0;
      v148 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v118._countAndFlagsBits = 0xD000000000000054;
      v118._object = (void *)0x80000001007099F0;
      String.append(_:)(v118);
      v119 = objc_msgSend(v105, v108[152]);
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
      v122 = v121;

      v123._countAndFlagsBits = v120;
      v123._object = v122;
      String.append(_:)(v123);
      swift_bridgeObjectRelease(v122);
      v124._countAndFlagsBits = 0x656A624F4443202CLL;
      v124._object = (void *)0xEC000000203A7463;
      String.append(_:)(v124);
      v125._countAndFlagsBits = _typeName(_:qualified:)(v133, 0);
      object = v125._object;
      String.append(_:)(v125);
      swift_bridgeObjectRelease(object);
      v127._countAndFlagsBits = 125;
      v127._object = (void *)0xE100000000000000;
      String.append(_:)(v127);
      v128 = v148;
      v129 = String._bridgeToObjectiveC()();
      objc_msgSend(v117, "internalErrorWithDebugDescription:", v129, swift_bridgeObjectRelease(v128).n128_f64[0]);

      swift_willThrow(v130);
    }
    else
    {
      swift_bridgeObjectRelease(v6);
      v65 = -[NSObject managedObjectModel](v9, "managedObjectModel", swift_bridgeObjectRelease(v61).n128_f64[0]);
      v66 = objc_msgSend(v65, "entitiesByName");

      v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v66, &type metadata for String, v60, &protocol witness table for String);
      v68 = sub_1005C9F40(v67);
      swift_bridgeObjectRelease(v67);
      v69 = v137;
      swift_bridgeObjectRetain_n(v68, 2);
      v70 = v69;
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = swift_slowAlloc(32, -1);
        v135 = (_QWORD *)swift_slowAlloc(8, -1);
        v138 = swift_slowAlloc(64, -1);
        v147 = v138;
        *(_DWORD *)v73 = 138412802;
        v149 = (uint64_t)v70;
        v74 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
        *v135 = v70;

        *(_WORD *)(v73 + 12) = 2080;
        v75 = objc_msgSend(v144, "description");
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

        v149 = sub_10001A820(v76, v78, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
        swift_bridgeObjectRelease(v78);
        *(_WORD *)(v73 + 22) = 2080;
        swift_bridgeObjectRetain(v68);
        v80 = Array.description.getter(v79, &type metadata for String);
        v82 = v81;
        swift_bridgeObjectRelease(v68);
        v149 = sub_10001A820(v80, v82, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
        swift_bridgeObjectRelease_n(v68, 2);
        swift_bridgeObjectRelease(v82);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v73, 0x20u);
        v83 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v135, 1, v83);
        swift_slowDealloc(v135, -1, -1);
        swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v138, -1, -1);
        swift_slowDealloc(v73, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v68, 2);
      }
      v84 = (void *)objc_opt_self(REMError);
      v147 = 0;
      v148 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v85._countAndFlagsBits = 0xD00000000000003FLL;
      v85._object = (void *)0x8000000100709990;
      String.append(_:)(v85);
      v86 = objc_msgSend(v70, "description");
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v89 = v88;

      v90._countAndFlagsBits = v87;
      v90._object = v89;
      String.append(_:)(v90);
      swift_bridgeObjectRelease(v89);
      v91._countAndFlagsBits = 0x656A624F4443202CLL;
      v91._object = (void *)0xEC000000203A7463;
      String.append(_:)(v91);
      v92 = objc_msgSend(v144, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      v96._countAndFlagsBits = v93;
      v96._object = v95;
      String.append(_:)(v96);
      swift_bridgeObjectRelease(v95);
      v97._object = (void *)0x80000001007099D0;
      v97._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v97);
      v98._countAndFlagsBits = Array.description.getter(v68, &type metadata for String);
      v99 = v98._object;
      String.append(_:)(v98);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v99);
      v100._countAndFlagsBits = 125;
      v100._object = (void *)0xE100000000000000;
      String.append(_:)(v100);
      v101 = v148;
      v102 = String._bridgeToObjectiveC()();
      objc_msgSend(v84, "internalErrorWithDebugDescription:", v102, swift_bridgeObjectRelease(v101).n128_f64[0]);

      swift_willThrow(v103);
    }
LABEL_30:

    return v146;
  }

LABEL_18:
  swift_bridgeObjectRelease(v6);
  return v146;
}

void *sub_1005CCB64(void *a1)
{
  return sub_1005CCBAC(a1, (unint64_t *)&qword_100839900, off_1007D66E0);
}

void *sub_1005CCB88(void *a1)
{
  return sub_1005CCBAC(a1, &qword_10083AA30, off_1007D6658);
}

void *sub_1005CCBAC(void *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *ObjCClassFromMetadata;
  id v10;
  os_log_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  NSString v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  Swift::String v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  id v94;
  uint64_t v95;
  void *v96;
  void *v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  void *v101;
  Swift::String v102;
  unint64_t v103;
  NSString v104;
  uint64_t v105;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  char **v110;
  uint64_t v111;
  id v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  Swift::String v120;
  id v121;
  uint64_t v122;
  void *v123;
  void *v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;
  void *object;
  Swift::String v129;
  unint64_t v130;
  NSString v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  os_log_t v142;
  os_log_t v143;
  NSObject *loga;
  os_log_t log;
  id v146;
  id v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v4 = sub_1000151B0(0, a2, a3);
  v148 = a1;
  v5 = objc_msgSend(a1, "entityName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v4);
  v10 = objc_msgSend(ObjCClassFromMetadata, "entity");
  if (!v10)
  {
    swift_bridgeObjectRelease(v8);
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10083C248);
    v20 = v148;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      loga = v21;
      v23 = swift_slowAlloc(22, -1);
      v142 = (os_log_t)swift_slowAlloc(8, -1);
      v147 = (id)swift_slowAlloc(32, -1);
      v149 = (uint64_t)v147;
      *(_DWORD *)v23 = 138412546;
      v24 = ObjCClassFromMetadata;
      v151 = (uint64_t)v20;
      v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      v142->isa = (Class)v20;

      *(_WORD *)(v23 + 12) = 2080;
      v26 = objc_msgSend(ObjCClassFromMetadata, "description");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      ObjCClassFromMetadata = v24;
      v151 = sub_10001A820(v27, v29, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, loga, v22, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v23, 0x16u);
      v30 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v142, 1, v30);
      swift_slowDealloc(v142, -1, -1);
      swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v147, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
    v43 = (void *)objc_opt_self(REMError);
    v149 = 0;
    v150 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v44._countAndFlagsBits = 0xD000000000000030;
    v44._object = (void *)0x8000000100709950;
    String.append(_:)(v44);
    v45 = objc_msgSend(v20, "description");
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49._countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v48);
    v50._countAndFlagsBits = 0x656A624F4443202CLL;
    v50._object = (void *)0xEC000000203A7463;
    String.append(_:)(v50);
    v51 = objc_msgSend(ObjCClassFromMetadata, "description");
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    v56._countAndFlagsBits = 125;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    v57 = v150;
    v58 = String._bridgeToObjectiveC()();
    objc_msgSend(v43, "internalErrorWithDebugDescription:", v58, swift_bridgeObjectRelease(v57).n128_f64[0]);

    swift_willThrow(v59);
    goto LABEL_30;
  }
  v146 = ObjCClassFromMetadata;
  v11 = (os_log_t)v10;
  v12 = -[NSObject name](v11, "name");
  if (!v12)
    goto LABEL_13;
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  if (v14 == v6 && v16 == v8)
  {

    swift_bridgeObjectRelease(v8);
    goto LABEL_18;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v6, v8, 0);
  swift_bridgeObjectRelease(v16);
  if ((v18 & 1) == 0)
  {
LABEL_13:
    v136 = v6;
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_10083C248);
    v32 = v148;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter(v33);
    log = v11;
    v135 = v4;
    v139 = v32;
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v133 = v33;
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      v134 = swift_slowAlloc(32, -1);
      v149 = v134;
      *(_DWORD *)v35 = 138412546;
      v151 = (uint64_t)v32;
      v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      *v36 = v32;

      *(_WORD *)(v35 + 12) = 2080;
      v38 = objc_msgSend(v146, "description");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v151 = sub_10001A820(v39, v41, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v133, v34, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v35, 0x16u);
      v42 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v36, 1, v42);
      swift_slowDealloc(v36, -1, -1);
      swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    v60 = -[NSObject managedObjectModel](v11, "managedObjectModel");
    v61 = objc_msgSend(v60, "entitiesByName");

    v62 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v61, &type metadata for String, v62, &protocol witness table for String);

    if (*(_QWORD *)(v63 + 16) && (v64 = sub_10001A6DC(v136, v8), (v65 & 1) != 0))
    {
      v66 = *(id *)(*(_QWORD *)(v63 + 56) + 8 * v64);
      swift_bridgeObjectRelease(v8);
      if (objc_msgSend(v66, "isKindOfEntity:", v11, swift_bridgeObjectRelease(v63).n128_f64[0]))
      {

        return v148;
      }
      v138 = v66;
      v107 = v139;
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.fault.getter();
      v110 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v108, v109))
      {
        v111 = swift_slowAlloc(22, -1);
        v141 = (_QWORD *)swift_slowAlloc(8, -1);
        v143 = (os_log_t)swift_slowAlloc(32, -1);
        v149 = (uint64_t)v143;
        *(_DWORD *)v111 = 138412546;
        v151 = (uint64_t)v107;
        v112 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        *v141 = v107;

        *(_WORD *)(v111 + 12) = 2080;
        v113 = objc_msgSend(v146, "description");
        v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
        v116 = v115;

        v117 = v114;
        v11 = log;
        v151 = sub_10001A820(v117, v116, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        v110 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        swift_bridgeObjectRelease(v116);
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v111, 0x16u);
        v118 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v141, 1, v118);
        swift_slowDealloc(v141, -1, -1);
        swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v143, -1, -1);
        swift_slowDealloc(v111, -1, -1);

      }
      else
      {

      }
      v119 = (void *)objc_opt_self(REMError);
      v149 = 0;
      v150 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v120._countAndFlagsBits = 0xD000000000000054;
      v120._object = (void *)0x80000001007099F0;
      String.append(_:)(v120);
      v121 = objc_msgSend(v107, v110[152]);
      v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      v124 = v123;

      v125._countAndFlagsBits = v122;
      v125._object = v124;
      String.append(_:)(v125);
      swift_bridgeObjectRelease(v124);
      v126._countAndFlagsBits = 0x656A624F4443202CLL;
      v126._object = (void *)0xEC000000203A7463;
      String.append(_:)(v126);
      v127._countAndFlagsBits = _typeName(_:qualified:)(v135, 0);
      object = v127._object;
      String.append(_:)(v127);
      swift_bridgeObjectRelease(object);
      v129._countAndFlagsBits = 125;
      v129._object = (void *)0xE100000000000000;
      String.append(_:)(v129);
      v130 = v150;
      v131 = String._bridgeToObjectiveC()();
      objc_msgSend(v119, "internalErrorWithDebugDescription:", v131, swift_bridgeObjectRelease(v130).n128_f64[0]);

      swift_willThrow(v132);
    }
    else
    {
      swift_bridgeObjectRelease(v8);
      v67 = -[NSObject managedObjectModel](v11, "managedObjectModel", swift_bridgeObjectRelease(v63).n128_f64[0]);
      v68 = objc_msgSend(v67, "entitiesByName");

      v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String, v62, &protocol witness table for String);
      v70 = sub_1005C9F40(v69);
      swift_bridgeObjectRelease(v69);
      v71 = v139;
      swift_bridgeObjectRetain_n(v70, 2);
      v72 = v71;
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc(32, -1);
        v137 = (_QWORD *)swift_slowAlloc(8, -1);
        v140 = swift_slowAlloc(64, -1);
        v149 = v140;
        *(_DWORD *)v75 = 138412802;
        v151 = (uint64_t)v72;
        v76 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        *v137 = v72;

        *(_WORD *)(v75 + 12) = 2080;
        v77 = objc_msgSend(v146, "description");
        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v80 = v79;

        v151 = sub_10001A820(v78, v80, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        swift_bridgeObjectRelease(v80);
        *(_WORD *)(v75 + 22) = 2080;
        swift_bridgeObjectRetain(v70);
        v82 = Array.description.getter(v81, &type metadata for String);
        v84 = v83;
        swift_bridgeObjectRelease(v70);
        v151 = sub_10001A820(v82, v84, &v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
        swift_bridgeObjectRelease_n(v70, 2);
        swift_bridgeObjectRelease(v84);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v75, 0x20u);
        v85 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v137, 1, v85);
        swift_slowDealloc(v137, -1, -1);
        swift_arrayDestroy(v140, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v75, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v70, 2);
      }
      v86 = (void *)objc_opt_self(REMError);
      v149 = 0;
      v150 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v87._countAndFlagsBits = 0xD00000000000003FLL;
      v87._object = (void *)0x8000000100709990;
      String.append(_:)(v87);
      v88 = objc_msgSend(v72, "description");
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v92._countAndFlagsBits = v89;
      v92._object = v91;
      String.append(_:)(v92);
      swift_bridgeObjectRelease(v91);
      v93._countAndFlagsBits = 0x656A624F4443202CLL;
      v93._object = (void *)0xEC000000203A7463;
      String.append(_:)(v93);
      v94 = objc_msgSend(v146, "description");
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      v97 = v96;

      v98._countAndFlagsBits = v95;
      v98._object = v97;
      String.append(_:)(v98);
      swift_bridgeObjectRelease(v97);
      v99._object = (void *)0x80000001007099D0;
      v99._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v99);
      v100._countAndFlagsBits = Array.description.getter(v70, &type metadata for String);
      v101 = v100._object;
      String.append(_:)(v100);
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v101);
      v102._countAndFlagsBits = 125;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      v103 = v150;
      v104 = String._bridgeToObjectiveC()();
      objc_msgSend(v86, "internalErrorWithDebugDescription:", v104, swift_bridgeObjectRelease(v103).n128_f64[0]);

      swift_willThrow(v105);
    }
LABEL_30:

    return v148;
  }

LABEL_18:
  swift_bridgeObjectRelease(v8);
  return v148;
}

void *sub_1005CDAE0(void *a1)
{
  return sub_1005CCBAC(a1, (unint64_t *)&unk_1008398F0, off_1007D6660);
}

uint64_t sub_1005CDB04(uint64_t a1)
{
  sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  return a1;
}

void *sub_1005CDB44(void *a1)
{
  return sub_1005CCBAC(a1, (unint64_t *)&qword_10083DA60, off_1007D66C8);
}

void *sub_1005CDB68(void *a1, uint64_t (*a2)(_QWORD), uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  NSObject **v38;
  void *v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  NSString v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  NSObject *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  NSObject *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  Swift::String v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  id v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  NSString v104;
  uint64_t v105;
  NSObject *v107;
  NSObject *v108;
  os_log_type_t v109;
  char **v110;
  uint64_t v111;
  NSObject *v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  Swift::String v119;
  id v120;
  uint64_t v121;
  void *v122;
  void *v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  NSString v127;
  uint64_t v128;
  os_log_type_t type;
  uint64_t v130;
  Swift::String v131;
  NSObject *v132;
  NSObject **v133;
  NSObject **v134;
  id v135;
  NSObject *loga;
  os_log_t log;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  os_log_t v141;
  os_log_t v142;
  os_log_t v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v7 = a2(0);
  v144 = a1;
  v8 = objc_msgSend(a1, "entityName");
  v141 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v7);
  v12 = objc_msgSend(ObjCClassFromMetadata, "entity");
  if (!v12)
  {
    swift_bridgeObjectRelease();
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_10083C248);
    v22 = v144;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v138 = (_QWORD *)swift_slowAlloc(8, -1);
      v142 = (os_log_t)swift_slowAlloc(32, -1);
      v145 = (uint64_t)v142;
      *(_DWORD *)v25 = 138412546;
      v147 = (uint64_t)v22;
      loga = v23;
      v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v138 = v22;

      *(_WORD *)(v25 + 12) = 2080;
      v27 = objc_msgSend(ObjCClassFromMetadata, "description");
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v29 = ObjCClassFromMetadata;
      v31 = v30;

      v147 = sub_10001A820(v28, v31, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v24, "Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}", (uint8_t *)v25, 0x16u);
      v32 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v138, 1, v32);
      swift_slowDealloc(v138, -1, -1);
      swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v142, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      v29 = ObjCClassFromMetadata;
    }
    v46 = (void *)objc_opt_self(REMError);
    v145 = 0;
    v146 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v47._countAndFlagsBits = 0xD000000000000030;
    v47._object = (void *)0x8000000100709950;
    String.append(_:)(v47);
    v48 = objc_msgSend(v22, "description");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0x656A624F4443202CLL;
    v53._object = (void *)0xEC000000203A7463;
    String.append(_:)(v53);
    v54 = objc_msgSend(v29, "description");
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v57 = v56;

    v58._countAndFlagsBits = v55;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 125;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    v60 = String._bridgeToObjectiveC()();
    objc_msgSend(v46, "internalErrorWithDebugDescription:", v60, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v61);
    goto LABEL_30;
  }
  v13 = v12;
  v14 = -[NSObject name](v13, "name");
  if (!v14)
    goto LABEL_13;
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  if ((os_log_t)v16 == v141 && v18 == v10)
  {

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v141, v10, 0);
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_13:
    if (qword_100836D60 != -1)
      swift_once(&qword_100836D60, sub_10013DC64);
    v33 = type metadata accessor for Logger(0);
    sub_10001AAA8(v33, (uint64_t)qword_10083C248);
    v34 = v144;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter(v35);
    v135 = ObjCClassFromMetadata;
    log = v13;
    v131._countAndFlagsBits = a3;
    v131._object = a4;
    v132 = v34;
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      type = v36;
      v38 = (NSObject **)swift_slowAlloc(8, -1);
      v130 = swift_slowAlloc(32, -1);
      v145 = v130;
      *(_DWORD *)v37 = 138412546;
      v147 = (uint64_t)v34;
      v39 = ObjCClassFromMetadata;
      v40 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v38 = v34;

      *(_WORD *)(v37 + 12) = 2080;
      v41 = objc_msgSend(v39, "description");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v147 = sub_10001A820(v42, v44, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      swift_bridgeObjectRelease();
      v34 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, type, "cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}", (uint8_t *)v37, 0x16u);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v38, 1, v45);
      swift_slowDealloc(v38, -1, -1);
      swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v130, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {

    }
    v62 = -[NSObject managedObjectModel](v13, "managedObjectModel");
    v63 = objc_msgSend(v62, "entitiesByName");

    v64 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
    v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v63, &type metadata for String, v64, &protocol witness table for String);

    if (*(_QWORD *)(v65 + 16) && (v66 = sub_10001A6DC((uint64_t)v141, v10), (v67 & 1) != 0))
    {
      v68 = *(id *)(*(_QWORD *)(v65 + 56) + 8 * v66);
      swift_bridgeObjectRelease();
      if (-[NSObject isKindOfEntity:](v68, "isKindOfEntity:", v13, swift_bridgeObjectRelease().n128_f64[0]))
      {

        return v144;
      }
      v143 = v68;
      v107 = v132;
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.fault.getter();
      v110 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v108, v109))
      {
        v111 = swift_slowAlloc(22, -1);
        v134 = (NSObject **)swift_slowAlloc(8, -1);
        v140 = swift_slowAlloc(32, -1);
        v145 = v140;
        *(_DWORD *)v111 = 138412546;
        v147 = (uint64_t)v107;
        v112 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        *v134 = v107;

        *(_WORD *)(v111 + 12) = 2080;
        v113 = objc_msgSend(v135, "description");
        v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
        v116 = v115;

        v110 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        v147 = sub_10001A820(v114, v116, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}", (uint8_t *)v111, 0x16u);
        v117 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v134, 1, v117);
        swift_slowDealloc(v134, -1, -1);
        swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v111, -1, -1);

      }
      else
      {

      }
      v118 = (void *)objc_opt_self(REMError);
      v145 = 0;
      v146 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v119._countAndFlagsBits = 0xD000000000000054;
      v119._object = (void *)0x80000001007099F0;
      String.append(_:)(v119);
      v120 = objc_msgSend(v107, v110[152]);
      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
      v123 = v122;

      v124._countAndFlagsBits = v121;
      v124._object = v123;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      v125._countAndFlagsBits = 0x656A624F4443202CLL;
      v125._object = (void *)0xEC000000203A7463;
      String.append(_:)(v125);
      String.append(_:)(v131);
      v126._countAndFlagsBits = 125;
      v126._object = (void *)0xE100000000000000;
      String.append(_:)(v126);
      v127 = String._bridgeToObjectiveC()();
      objc_msgSend(v118, "internalErrorWithDebugDescription:", v127, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v128);
    }
    else
    {
      swift_bridgeObjectRelease();
      v69 = -[NSObject managedObjectModel](v13, "managedObjectModel", swift_bridgeObjectRelease().n128_f64[0]);
      v70 = objc_msgSend(v69, "entitiesByName");

      v71 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v70, &type metadata for String, v64, &protocol witness table for String);
      v72 = sub_1005C9F40(v71);
      swift_bridgeObjectRelease();
      v73 = v132;
      swift_bridgeObjectRetain_n(v72, 2);
      v74 = v73;
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = swift_slowAlloc(32, -1);
        v133 = (NSObject **)swift_slowAlloc(8, -1);
        v139 = swift_slowAlloc(64, -1);
        v145 = v139;
        *(_DWORD *)v77 = 138412802;
        v147 = (uint64_t)v74;
        v78 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        *v133 = v74;

        *(_WORD *)(v77 + 12) = 2080;
        v79 = objc_msgSend(v135, "description");
        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v82 = v81;

        v147 = sub_10001A820(v80, v82, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        swift_bridgeObjectRelease();
        *(_WORD *)(v77 + 22) = 2080;
        swift_bridgeObjectRetain(v72);
        v84 = Array.description.getter(v83, &type metadata for String);
        v86 = v85;
        swift_bridgeObjectRelease();
        v147 = sub_10001A820(v84, v86, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        swift_bridgeObjectRelease_n(v72, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}", (uint8_t *)v77, 0x20u);
        v87 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v133, 1, v87);
        swift_slowDealloc(v133, -1, -1);
        swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v139, -1, -1);
        swift_slowDealloc(v77, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v72, 2);
      }
      v88 = (void *)objc_opt_self(REMError);
      v145 = 0;
      v146 = 0xE000000000000000;
      _StringGuts.grow(_:)(100);
      v89._countAndFlagsBits = 0xD00000000000003FLL;
      v89._object = (void *)0x8000000100709990;
      String.append(_:)(v89);
      v90 = -[NSObject description](v74, "description");
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      v93 = v92;

      v94._countAndFlagsBits = v91;
      v94._object = v93;
      String.append(_:)(v94);
      swift_bridgeObjectRelease();
      v95._countAndFlagsBits = 0x656A624F4443202CLL;
      v95._object = (void *)0xEC000000203A7463;
      String.append(_:)(v95);
      v96 = objc_msgSend(v135, "description");
      v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v99 = v98;

      v100._countAndFlagsBits = v97;
      v100._object = v99;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._object = (void *)0x80000001007099D0;
      v101._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v101);
      v102._countAndFlagsBits = Array.description.getter(v72, &type metadata for String);
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103._countAndFlagsBits = 125;
      v103._object = (void *)0xE100000000000000;
      String.append(_:)(v103);
      v104 = String._bridgeToObjectiveC()();
      objc_msgSend(v88, "internalErrorWithDebugDescription:", v104, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v105);
    }
LABEL_30:

    return v144;
  }

LABEL_18:
  swift_bridgeObjectRelease();
  return v144;
}

void *sub_1005CEA58(void *a1)
{
  return sub_1005CCBAC(a1, (unint64_t *)&unk_100840000, off_1007D6720);
}

_QWORD *sub_1005CEA9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, (unint64_t *)&qword_10083AE90, off_1007D6708, &qword_10083D590, (uint64_t *)&unk_100843C70);
}

_QWORD *sub_1005CEADC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, (unint64_t *)&qword_100839900, off_1007D66E0, &qword_10083FF50, (uint64_t *)&unk_100843E20);
}

_QWORD *sub_1005CEB1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5, unint64_t *a6, _QWORD *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  Class isa;
  uint64_t v33;
  NSArray v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  void *object;
  unint64_t v43;
  NSString v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  objc_class *v55;
  int v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v53 = a6;
  v54 = a7;
  v55 = a5;
  v57 = a4;
  v56 = a3;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a1;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = _swiftEmptyArrayStorage;
  if (v18)
  {
    v50 = a2;
    v51 = v9;
    v52 = v10;
    v48 = a9;
    v49 = a8;
    v60 = _swiftEmptyArrayStorage;
    v58 = v18;
    sub_1001C1BE4(0, v18, 0);
    v20 = 0;
    v19 = v60;
    do
    {
      v21 = *(id *)(v59 + 8 * v20 + 32);
      v22 = objc_msgSend(v21, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

      v60 = v19;
      v24 = v19[2];
      v23 = v19[3];
      if (v24 >= v23 >> 1)
      {
        sub_1001C1BE4(v23 > 1, v24 + 1, 1);
        v19 = v60;
      }
      ++v20;
      v19[2] = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v24, v17, v14);
    }
    while (v58 != v20);
    v25 = sub_1000151B0(0, v53, v54);
    v26 = sub_10011EF34((uint64_t)v19);
    swift_release(v19);
    KeyPath = swift_getKeyPath(&unk_1006C4900);
    v28 = sub_1002EBC2C(v26);
    swift_bridgeObjectRelease(v26);
    v29 = (void *)sub_10034297C(KeyPath, v28, &qword_1008517D8, (uint64_t *)&unk_100844290);
    swift_release(KeyPath);
    v30 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v25), "entity");
    objc_msgSend(v30, "setEntity:", v31);

    isa = v55;
    if (v55)
    {
      sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v30, "setAffectedStores:", isa);

    objc_msgSend(v30, "setPredicate:", v29);
    v33 = v52;
    if ((v56 & 1) == 0)
      objc_msgSend(v30, "setFetchBatchSize:", v50);
    if (v57)
      v34.super.isa = Array._bridgeToObjectiveC()().super.isa;
    else
      v34.super.isa = 0;
    objc_msgSend(v30, "setRelationshipKeyPathsForPrefetching:", v34.super.isa);

    v35 = NSManagedObjectContext.fetch<A>(_:)(v30, v25);
    if (!v33)
    {
      v36 = (_QWORD *)v35;
      v62 = sub_10001A630(v49);
      v60 = v36;
      throwingCast<A>(_:as:failureMessage:)(&v63, &v60, v62, 0, 0, v62);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v60);
      v19 = (_QWORD *)v63;
      if ((unint64_t)v63 >> 62)
      {
        if (v63 < 0)
          v47 = v63;
        else
          v47 = v63 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v63);
        v37 = _CocoaArrayWrapper.endIndex.getter(v47);
        swift_bridgeObjectRelease(v19);
      }
      else
      {
        v37 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v58 < v37)
      {
        swift_bridgeObjectRelease(v19);
        v38 = (void *)objc_opt_self(REMError);
        v60 = 0;
        v61 = 0xE000000000000000;
        _StringGuts.grow(_:)(70);
        v39._object = (void *)0x8000000100709AA0;
        v39._countAndFlagsBits = 0xD000000000000044;
        String.append(_:)(v39);
        v40 = sub_10001A630(v48);
        v41._countAndFlagsBits = Array.description.getter(v59, v40);
        object = v41._object;
        String.append(_:)(v41);
        swift_bridgeObjectRelease(object);
        v43 = v61;
        v44 = String._bridgeToObjectiveC()();
        objc_msgSend(v38, "internalErrorWithDebugDescription:", v44, swift_bridgeObjectRelease(v43).n128_f64[0]);

        swift_willThrow(v45);
      }
    }

  }
  return v19;
}

_QWORD *sub_1005CEFB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, &qword_10083AA30, off_1007D6658, &qword_10083FE60, (uint64_t *)&unk_100851830);
}

_QWORD *sub_1005CEFF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, (unint64_t *)&unk_1008398F0, off_1007D6660, &qword_100851A90, &qword_10083B5C8);
}

void sub_1005CF038(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  type metadata accessor for UUID(0);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    sub_1006512FC(a1, a2, a3 & 1, a4);
  }
}

_QWORD *sub_1005CF0CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  id v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  NSArray v33;
  uint64_t v34;
  NSArray v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD);
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v52 = a6;
  v53 = a5;
  v55 = a4;
  v54 = a3;
  v51 = a2;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a1;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    v48 = a7;
    v49 = v8;
    v47 = a8;
    v50 = v9;
    v57[0] = _swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v17, 0);
    v19 = 0;
    v20 = v57[0];
    do
    {
      v21 = v17;
      v22 = *(id *)(v56 + 8 * v19 + 32);
      v23 = objc_msgSend(v22, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v57[0] = v20;
      v25 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      v18 = (_QWORD *)(v25 + 1);
      if (v25 >= v24 >> 1)
      {
        sub_1001C1BE4(v24 > 1, v25 + 1, 1);
        v20 = v57[0];
      }
      ++v19;
      *(_QWORD *)(v20 + 16) = v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v25, v16, v13);
      v17 = v21;
    }
    while (v21 != v19);
    v26 = v52(0);
    v27 = sub_10011EF34(v20);
    swift_release(v20);
    KeyPath = swift_getKeyPath(&unk_1006C4900);
    v29 = sub_1002EBC2C(v27);
    swift_bridgeObjectRelease();
    v30 = (void *)sub_10034297C(KeyPath, v29, &qword_1008517D8, (uint64_t *)&unk_100844290);
    swift_release(KeyPath);
    v31 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v32 = objc_msgSend((id)swift_getObjCClassFromMetadata(v26), "entity");
    objc_msgSend(v31, "setEntity:", v32);

    if (v53)
    {
      sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v33.super.isa = 0;
    }
    v34 = v50;
    objc_msgSend(v31, "setAffectedStores:", v33.super.isa);

    objc_msgSend(v31, "setPredicate:", v30);
    if ((v54 & 1) == 0)
      objc_msgSend(v31, "setFetchBatchSize:", v51);
    if (v55)
      v35.super.isa = Array._bridgeToObjectiveC()().super.isa;
    else
      v35.super.isa = 0;
    objc_msgSend(v31, "setRelationshipKeyPathsForPrefetching:", v35.super.isa);

    v36 = NSManagedObjectContext.fetch<A>(_:)(v31, v26);
    if (v34)
      goto LABEL_22;
    v37 = v36;
    v58 = sub_10001A630(v48);
    v57[0] = v37;
    throwingCast<A>(_:as:failureMessage:)(&v59, v57, v58, 0, 0, v58);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v57);
    v18 = (_QWORD *)v59;
    if ((unint64_t)v59 >> 62)
    {
      if (v59 < 0)
        v44 = v59;
      else
        v44 = v59 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v59);
      v45 = _CocoaArrayWrapper.endIndex.getter(v44);
      swift_bridgeObjectRelease();
      if (v17 >= v45)
        goto LABEL_22;
    }
    else if (v17 >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_22:

      return v18;
    }
    swift_bridgeObjectRelease();
    v38 = (void *)objc_opt_self(REMError);
    v57[0] = 0;
    v57[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v39._object = (void *)0x8000000100709AA0;
    v39._countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v39);
    v40 = sub_10001A630(v47);
    v41._countAndFlagsBits = Array.description.getter(v56, v40);
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "internalErrorWithDebugDescription:", v42, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v43);
    goto LABEL_22;
  }
  return v18;
}

_QWORD *sub_1005CF570(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, (unint64_t *)&qword_10083DA60, off_1007D66C8, &qword_10083DAE0, (uint64_t *)&unk_100843DA0);
}

_QWORD *sub_1005CF5B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  return sub_1005CEB1C(a1, a2, a3, a4, a5, (unint64_t *)&unk_100840000, off_1007D6720, (uint64_t *)&unk_100851970, (uint64_t *)&unk_100843B70);
}

_QWORD *sub_1005CF5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1)
    return (_QWORD *)a4();
  v8 = v5;
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_100847400);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136446210;
    v18 = v8;
    v15 = sub_10001A630(a5);
    v16 = String.init<A>(describing:)(&v18, v15);
    v18 = sub_10001A820(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1005CF7A0(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
    return (_QWORD *)a2();
  v6 = v3;
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v18 = v12;
    *(_DWORD *)v11 = 136446210;
    v16 = v6;
    v13 = sub_10001A630(a3);
    v14 = String.init<A>(describing:)(&v16, v13);
    v16 = sub_10001A820(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  return _swiftEmptyArrayStorage;
}

unint64_t sub_1005CF94C()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE730, v0);
  if (result >= 6)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v14 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    return 6;
  }
  return result;
}

unint64_t sub_1005CFB2C(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x44497463656A626FLL;
  v5._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result >= 4)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000151B0(0, a2, a3);
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return 4;
  }
  return result;
}

uint64_t sub_1005CFD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_100259B98(0x44497463656A626FLL, 0xE800000000000000);
  if (v0 == 26)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001AAA8(v1, (uint64_t)qword_100847400);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136446210;
      v7 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "description");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v13 = sub_10001A820(v9, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  return v0;
}

unint64_t sub_1005CFEE4(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x44497463656A626FLL;
  v5._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result >= 5)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000151B0(0, a2, a3);
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return 5;
  }
  return result;
}

uint64_t sub_1005D00BC(uint64_t (*a1)(uint64_t, unint64_t), unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v5 = a1(0x44497463656A626FLL, 0xE800000000000000);
  if (v5 == 11)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_100847400);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v19 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_1000151B0(0, a2, a3);
      v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "description");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v18 = sub_10001A820(v14, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  return v5;
}

uint64_t sub_1005D02A0(uint64_t (*a1)(uint64_t, unint64_t), unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v5 = a1(0x44497463656A626FLL, 0xE800000000000000);
  if (v5 == 38)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_100847400);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v19 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_1000151B0(0, a2, a3);
      v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "description");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v18 = sub_10001A820(v14, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  return v5;
}

unint64_t sub_1005D0484(Swift::OpaquePointer a1, uint64_t (*a2)(_QWORD))
{
  Swift::String v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3._countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100847400);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v17 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = a2(0);
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = sub_10001A820(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    return 2;
  }
  return result;
}

unint64_t sub_1005D0654()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;

  v15._countAndFlagsBits = 0x44497463656A626FLL;
  v15._object = (void *)0xE800000000000000;
  v0 = sub_1001574E4(v15);
  if (v0 == 12)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001AAA8(v1, (uint64_t)qword_100847400);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136446210;
      v7 = type metadata accessor for REMCDTemplate();
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "description");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v13 = sub_10001A820(v9, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  return v0;
}

unint64_t sub_1005D0824(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x44497463656A626FLL;
  v5._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result >= 2)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000151B0(0, a2, a3);
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return 2;
  }
  return result;
}

unint64_t sub_1005D0A00()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;

  v15._countAndFlagsBits = 0x44497463656A626FLL;
  v15._object = (void *)0xE800000000000000;
  v0 = sub_1001A1950(v15);
  if (v0 == 14)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001AAA8(v1, (uint64_t)qword_100847400);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136446210;
      v7 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "description");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v13 = sub_10001A820(v9, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  return v0;
}

unint64_t sub_1005D0BE0()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC6B8, v0);
  if (result >= 6)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v14 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = type metadata accessor for REMCDDueDateDeltaAlert();
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    return 6;
  }
  return result;
}

unint64_t sub_1005D0DB0(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x44497463656A626FLL;
  v5._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result >= 7)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000151B0(0, a2, a3);
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return 7;
  }
  return result;
}

unint64_t sub_1005D0F88()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC7B8, v0);
  if (result >= 5)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v14 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = type metadata accessor for REMCDListSection();
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    return 5;
  }
  return result;
}

unint64_t sub_1005D1158()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x44497463656A626FLL;
  v0._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DECA0, v0);
  if (result >= 3)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v14 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    return 3;
  }
  return result;
}

uint64_t sub_1005D1338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_1004773E8(0x44497463656A626FLL, 0xE800000000000000);
  if (v0 == 22)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001AAA8(v1, (uint64_t)qword_100847400);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136446210;
      v7 = type metadata accessor for REMCDSavedReminder();
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "description");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v13 = sub_10001A820(v9, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  return v0;
}

unint64_t sub_1005D1508(Swift::OpaquePointer a1, uint64_t (*a2)(_QWORD))
{
  Swift::String v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3._countAndFlagsBits = 0x44497463656A626FLL;
  v3._object = (void *)0xE800000000000000;
  result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 4)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100847400);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v17 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = a2(0);
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = sub_10001A820(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    return 4;
  }
  return result;
}

unint64_t sub_1005D16D4(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x49746E756F636361;
  v5._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result >= 2)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = sub_1000151B0(0, a2, a3);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    return 2;
  }
  return result;
}

unint64_t sub_1005D18BC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;

  v15._countAndFlagsBits = 0x49746E756F636361;
  v15._object = (void *)0xE900000000000044;
  v0 = sub_100536738(v15);
  if (v0 == 8)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001AAA8(v1, (uint64_t)qword_100847400);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v14 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "description");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v13 = sub_10001A820(v9, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  return v0;
}

unint64_t sub_1005D1AA8()
{
  Swift::String v0;
  unint64_t result;

  v0._countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DBAE8, v0);
  if (result > 1)
  {
    sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    return 2;
  }
  return result;
}

unint64_t sub_1005D1B0C()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DBE18, v0);
  if (result > 5)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v14 = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    return 6;
  }
  return result;
}

unint64_t sub_1005D1CF8()
{
  Swift::String v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0._countAndFlagsBits = 0x49746E756F636361;
  v0._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC278, v0);
  if (result > 2)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100847400);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = type metadata accessor for REMCDTemplate();
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v14 = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_10001A820(v10, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    return 3;
  }
  return result;
}

unint64_t sub_1005D1ED4(Swift::OpaquePointer a1, unint64_t *a2, _QWORD *a3)
{
  Swift::String v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5._countAndFlagsBits = 0x49746E756F636361;
  v5._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)(a1, v5);
  if (result > 3)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847400);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = sub_1000151B0(0, a2, a3);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "description");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = sub_10001A820(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    return 4;
  }
  return result;
}

BOOL sub_1005D20B8(Swift::OpaquePointer a1, uint64_t (*a2)(_QWORD))
{
  Swift::String v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3._countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  v4 = _findStringSwitchCase(cases:string:)(a1, v3);
  if (v4)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100847400);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = a2(0);
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v17 = sub_10001A820(v13, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  return v4 != 0;
}

unint64_t sub_1005D2294(Swift::OpaquePointer a1, uint64_t (*a2)(_QWORD))
{
  Swift::String v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3._countAndFlagsBits = 0x49746E756F636361;
  v3._object = (void *)0xE900000000000044;
  result = _findStringSwitchCase(cases:string:)(a1, v3);
  if (result >= 2)
  {
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100847400);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = a2(0);
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v17 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = sub_10001A820(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    return 2;
  }
  return result;
}

double sub_1005D2470(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100659C38(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006722E0, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  v13 = swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDSavedAttachment();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD1C0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_10067231C;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD1E8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672344;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD210, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_10067236C;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD238, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672394;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D2C5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_10065A460(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(&_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672A24, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease(v11);
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  v13 = swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(a1);
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD620, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672A58;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD648, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672A80;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD670, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672AA8;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD698, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672AC8;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D3458(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065B9A4);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100671F34, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  v13 = swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDManualSortHint();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FCFE0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100671F68;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD008, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100671FB8;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD030, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100671FE0;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD058, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672008;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D3C50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100662610(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100673104, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_10084FBF8, off_1007D6678);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD9E0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100673138;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FDA08, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100673160;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FDA30, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100673180;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FDA58, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006731A0;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D444C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100662E74(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100673210, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FDA80, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100673244;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FDAA8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_10067326C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FDAD0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_10067328C;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FDAF8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006732AC;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D4C48(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, sub_10065BCD8);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_10067331C, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FDB20, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100673350;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FDB48, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100673378;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FDB70, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100673398;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FDB98, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006733B8;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D544C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006636E0(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100673428, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FDBC0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_10067345C;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FDBE8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100673484;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FDC10, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_1006734A4;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FDC38, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006734C4;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D5C48(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, sub_10065C180);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006724C0, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD300, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_1006724F4;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD328, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_10067251C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD350, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672544;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD378, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672564;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D644C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, (void (*)(void))sub_10065C9A4);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006725D4, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD3A0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672608;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD3C8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672630;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD3F0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672658;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD418, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672678;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D6C50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, sub_10065D504);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672910, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD580, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_10067294C;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD5A8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672974;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD5D0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672994;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD5F8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006729B4;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D7454(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, sub_10065D168);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006727FC, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&unk_1008455A0, off_1007D66D8);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD4E0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672838;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD508, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672860;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD530, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672880;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD558, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_1006728A0;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D7C58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100663F2C(a1);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006726E8, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_100845598, off_1007D6728);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD440, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672724;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD468, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_10067274C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD490, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_10067276C;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD4B8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_10067278C;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D8454(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_1006649D8(a1, sub_10065DD58);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672B38, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD6C0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672B74;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD6E8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672B9C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD710, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672BBC;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD738, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672BDC;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D8C58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065E388);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672EBC, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD8A0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672EF0;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD8C8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672F18;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD8F0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672F40;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD918, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672F70;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D9460(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065E988);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672FE0, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD940, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100673014;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD968, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_10067303C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD990, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100673064;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD9B8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100673094;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005D9C68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065EF5C);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100673534, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDDueDateDeltaAlert();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FDC60, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((v35 & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_1006735AC;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FDC88, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_1006735CC;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FDCB0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_1006735F4;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FDCD8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100673648;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DA460(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_100662360);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672D74, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD800, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672DB0;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD828, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672DD0;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD850, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672DF8;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD878, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672E20;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DAC68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_100661D48);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672C4C, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD760, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100672C88;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD788, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672CA8;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD7B0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672CD0;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD7D8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672CF8;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DB470(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_1006618D0);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006736E8, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD260, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_1006723E8;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD288, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100672408;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD2B0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672430;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD2D8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672458;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DBC78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_100661000);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_1006721B0, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDSavedReminder();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD120, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_1006721EC;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD148, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_10067220C;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD170, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100672234;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD198, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100672254;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DC470(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_1006608A0);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100672070, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FD080, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_1006720AC;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FD0A8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_1006720CC;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FD0D0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_1006720F4;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FD0F8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_10067211C;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DCC78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_100660240);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100671DF4, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDTemplate();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FCF40, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100671E30;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FCF68, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100671E50;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FCF90, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100671E78;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FCFB8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100671EA0;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DD470(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065FD88);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100671CC4, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDListSection();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FCEA0, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100671D00;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FCEC8, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100671D44;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FCEF0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100671D64;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FCF18, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100671D84;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DDC68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065F918);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100671BA4, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDSmartListSection();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FCE00, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100671BE0;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FCE28, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100671C24;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FCE50, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100671C44;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FCE78, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100671C64;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

double sub_1005DE460(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  double result;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75;

  v3 = v2;
  v75 = a2;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v67 = a1;
    else
      v67 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v68)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v6 = 0;
  sub_100664C48(a1, sub_10065F3EC);
  v7 = 0;
  __chkstk_darwin(v8);
  v69[2] = &v75;
  v9 = sub_10027BDE4(_swiftEmptyDictionarySingleton, (void (*)(void **, id *))sub_100671A38, (uint64_t)v69, a1);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10011E910(v10);
  swift_retain();
  sub_1006592DC(v11, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release(v3);
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v72 = 0;
    v16 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(64, -1);
    v74[0] = v70;
    *(_DWORD *)v16 = 134218498;
    v71 = 0;
    if (v5)
    {
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v73 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    v19 = type metadata accessor for REMCDTemplateSection();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v73 = sub_10001A820(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v24 = swift_bridgeObjectRetain(v9);
    v25 = sub_1001E927C(v24);
    swift_bridgeObjectRelease_n(v9, 2);
    v26 = Array.description.getter(v25, &type metadata for String);
    v28 = v27;
    swift_release(v25);
    v73 = sub_10001A820(v26, v28, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v16, 0x20u);
    v29 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v6 = v71;
    v7 = v72;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v30 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = v75;
  v32 = (_QWORD *)swift_allocObject(&unk_1007FCD60, 56, 7);
  v32[2] = v30;
  v32[3] = v7;
  v32[4] = v6;
  v32[5] = v9;
  v33 = v3 + 14;
  v32[6] = v31;
  swift_beginAccess(v3 + 14, v74, 33, 0);
  v34 = (_QWORD *)v3[14];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  swift_errorRetain(v7);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
  v3[14] = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1002C9114(0, v34[2] + 1, 1, v34);
    *v33 = v34;
  }
  v37 = v34[2];
  v36 = v34[3];
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1002C9114((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
    *v33 = v34;
  }
  v34[2] = v37 + 1;
  v38 = &v34[2 * v37];
  v38[4] = sub_100671A98;
  v38[5] = v32;
  swift_endAccess(v74);
  swift_release(v30);
  v39 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v39 + 16, v3);
  v40 = v75;
  v41 = (_QWORD *)swift_allocObject(&unk_1007FCD88, 40, 7);
  v41[2] = v39;
  v41[3] = v9;
  v41[4] = v40;
  v42 = v3 + 15;
  swift_beginAccess(v3 + 15, v74, 33, 0);
  v43 = (_QWORD *)v3[15];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native(v43);
  v3[15] = v43;
  if ((v44 & 1) == 0)
  {
    v43 = sub_1002C9114(0, v43[2] + 1, 1, v43);
    *v42 = v43;
  }
  v46 = v43[2];
  v45 = v43[3];
  if (v46 >= v45 >> 1)
  {
    v43 = sub_1002C9114((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
    *v42 = v43;
  }
  v43[2] = v46 + 1;
  v47 = &v43[2 * v46];
  v47[4] = sub_100671AB8;
  v47[5] = v41;
  swift_endAccess(v74);
  swift_release(v39);
  v48 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v48 + 16, v3);
  v49 = v75;
  v50 = (_QWORD *)swift_allocObject(&unk_1007FCDB0, 40, 7);
  v50[2] = v48;
  v50[3] = v9;
  v50[4] = v49;
  v51 = v3 + 16;
  swift_beginAccess(v3 + 16, v74, 33, 0);
  v52 = (_QWORD *)v3[16];
  swift_bridgeObjectRetain(v9);
  swift_retain();
  swift_retain();
  v53 = swift_isUniquelyReferenced_nonNull_native(v52);
  v3[16] = v52;
  if ((v53 & 1) == 0)
  {
    v52 = sub_1002C9114(0, v52[2] + 1, 1, v52);
    *v51 = v52;
  }
  v55 = v52[2];
  v54 = v52[3];
  if (v55 >= v54 >> 1)
  {
    v52 = sub_1002C9114((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
    *v51 = v52;
  }
  v52[2] = v55 + 1;
  v56 = &v52[2 * v55];
  v56[4] = sub_100671AD8;
  v56[5] = v50;
  swift_endAccess(v74);
  swift_release(v48);
  v57 = swift_allocObject(&unk_1007FCD38, 24, 7);
  swift_weakInit(v57 + 16, v3);
  v58 = v75;
  v59 = (_QWORD *)swift_allocObject(&unk_1007FCDD8, 40, 7);
  v59[2] = v57;
  v59[3] = v9;
  v59[4] = v58;
  v60 = v3 + 17;
  swift_beginAccess(v3 + 17, v74, 33, 0);
  v61 = (_QWORD *)v3[17];
  swift_retain();
  swift_retain();
  v62 = swift_isUniquelyReferenced_nonNull_native(v61);
  v3[17] = v61;
  if ((v62 & 1) == 0)
  {
    v61 = sub_1002C9114(0, v61[2] + 1, 1, v61);
    *v60 = v61;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v61 = sub_1002C9114((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    *v60 = v61;
  }
  v61[2] = v64 + 1;
  v65 = &v61[2 * v64];
  v65[4] = sub_100671AF8;
  v65[5] = v59;
  swift_endAccess(v74);
  swift_errorRelease(v7);
  swift_errorRelease(v6);
  swift_release(v57);
  return result;
}

void sub_1005DEC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, __n128))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  __n128 v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  void (*v45)(uint64_t, uint64_t, __n128);
  char v46[24];
  char v47[24];
  uint64_t v48;

  v8 = v6;
  v12 = a1 + 16;
  swift_beginAccess(a1 + 16, v47, 0, 0);
  Strong = swift_weakLoadStrong(v12);
  if (!Strong)
    return;
  v14 = Strong;
  if (a2)
  {
    v15 = swift_errorRetain(a2);
    swift_willThrow(v15);
    swift_release(v14);
    return;
  }
  if (a3)
  {
    v16 = swift_errorRetain(a3);
    swift_willThrow(v16);
    swift_release(v14);
    return;
  }
  v43 = a4 + 64;
  v17 = 1 << *(_BYTE *)(a4 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a4 + 64);
  v20 = Strong + 144;
  swift_bridgeObjectRetain(a4);
  v48 = v20;
  swift_beginAccess(v14 + 144, v46, 0, 0);
  v21 = 0;
  v44 = (unint64_t)(v17 + 63) >> 6;
  v45 = a6;
  if (!v19)
    goto LABEL_10;
LABEL_9:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v22 | (v21 << 6); ; i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    v27 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v29 = *v27;
    v28 = (void *)v27[1];
    v30 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v31 = *(_QWORD *)v48;
    v32 = *(_QWORD *)(*(_QWORD *)v48 + 16);
    swift_bridgeObjectRetain(v28);
    if (!v32)
      goto LABEL_31;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    v33 = sub_10001A6DC(v29, (uint64_t)v28);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      v37 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v38._object = (void *)0x8000000100709A50;
      v38._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v38);
      v39._countAndFlagsBits = v29;
      v39._object = v28;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "internalErrorWithDebugDescription:", v40, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v41);
      swift_release(a4);
      v42 = v14;
LABEL_34:
      swift_release(v42);
      return;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v33);
    swift_retain();
    swift_bridgeObjectRelease_n(v28, 2);
    v36 = swift_bridgeObjectRelease();
    v45(v30, v35, v36);
    if (v8)
    {
      swift_release(a4);
      swift_release(v14);
      swift_release(v35);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v35);
    if (v19)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v44)
      goto LABEL_33;
    v25 = *(_QWORD *)(v43 + 8 * v21);
    if (!v25)
      break;
LABEL_20:
    v19 = (v25 - 1) & v25;
  }
  v26 = v21 + 1;
  if (v21 + 1 >= v44)
    goto LABEL_33;
  v25 = *(_QWORD *)(v43 + 8 * v26);
  if (v25)
    goto LABEL_19;
  v26 = v21 + 2;
  if (v21 + 2 >= v44)
    goto LABEL_33;
  v25 = *(_QWORD *)(v43 + 8 * v26);
  if (v25)
    goto LABEL_19;
  v26 = v21 + 3;
  if (v21 + 3 >= v44)
  {
LABEL_33:
    swift_release(v14);
    v42 = a4;
    goto LABEL_34;
  }
  v25 = *(_QWORD *)(v43 + 8 * v26);
  if (v25)
  {
LABEL_19:
    v21 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v44)
      goto LABEL_33;
    v25 = *(_QWORD *)(v43 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
}

void sub_1005DF008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, __n128);
  char v48[24];
  char v49[24];
  uint64_t v50;

  v8 = v6;
  v13 = a1 + 16;
  swift_beginAccess(a1 + 16, v49, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (!Strong)
    return;
  v15 = Strong;
  if (a2)
  {
    v16 = swift_errorRetain(a2);
    swift_willThrow(v16);
    swift_release(v15);
    return;
  }
  if (a3)
  {
    v17 = swift_errorRetain(a3);
    swift_willThrow(v17);
    swift_release(v15);
    return;
  }
  v46 = a5;
  v44 = a4 + 64;
  v18 = 1 << *(_BYTE *)(a4 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(a4 + 64);
  v21 = Strong + 144;
  swift_bridgeObjectRetain(a4);
  v50 = v21;
  swift_beginAccess(v15 + 144, v48, 0, 0);
  v22 = 0;
  v45 = (unint64_t)(v18 + 63) >> 6;
  v47 = a6;
  if (!v20)
    goto LABEL_10;
LABEL_9:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    v28 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v30 = *v28;
    v29 = (void *)v28[1];
    v31 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v32 = *(_QWORD *)v50;
    v33 = *(_QWORD *)(*(_QWORD *)v50 + 16);
    swift_bridgeObjectRetain(v29);
    if (!v33)
      goto LABEL_31;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    v34 = sub_10001A6DC(v30, (uint64_t)v29);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v32);
LABEL_31:
      v38 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v39._object = (void *)0x8000000100709A50;
      v39._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v39);
      v40._countAndFlagsBits = v30;
      v40._object = v29;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v29);
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v38, "internalErrorWithDebugDescription:", v41, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

      swift_willThrow(v42);
      swift_release(a4);
      v43 = v15;
LABEL_34:
      swift_release(v43);
      return;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v34);
    swift_retain();
    swift_bridgeObjectRelease_n(v29, 2);
    v37 = swift_bridgeObjectRelease(v32);
    v47(v31, v46, v36, v37);
    if (v8)
    {
      swift_release(a4);
      swift_release(v15);
      swift_release(v36);
      swift_bridgeObjectRelease(v31);
      return;
    }
    swift_bridgeObjectRelease(v31);
    swift_release(v36);
    if (v20)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v22 >= v45)
      goto LABEL_33;
    v26 = *(_QWORD *)(v44 + 8 * v22);
    if (!v26)
      break;
LABEL_20:
    v20 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v45)
    goto LABEL_33;
  v26 = *(_QWORD *)(v44 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v27 = v22 + 2;
  if (v22 + 2 >= v45)
    goto LABEL_33;
  v26 = *(_QWORD *)(v44 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v27 = v22 + 3;
  if (v22 + 3 >= v45)
  {
LABEL_33:
    swift_release(v15);
    v43 = a4;
    goto LABEL_34;
  }
  v26 = *(_QWORD *)(v44 + 8 * v27);
  if (v26)
  {
LABEL_19:
    v22 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v45)
      goto LABEL_33;
    v26 = *(_QWORD *)(v44 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
}

void sub_1005DF3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;
  char v45[24];
  char v46[24];
  uint64_t v47;

  v6 = v5;
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v46, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (!Strong)
    return;
  v13 = Strong;
  if (a2)
  {
    v14 = swift_errorRetain(a2);
    swift_willThrow(v14);
    swift_release(v13);
    return;
  }
  if (a3)
  {
    v15 = swift_errorRetain(a3);
    swift_willThrow(v15);
    swift_release(v13);
    return;
  }
  v42 = a4 + 64;
  v16 = 1 << *(_BYTE *)(a4 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a4 + 64);
  v19 = Strong + 144;
  swift_bridgeObjectRetain(a4);
  v47 = v19;
  swift_beginAccess(v13 + 144, v45, 0, 0);
  v20 = 0;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v44 = a5;
  if (!v18)
    goto LABEL_10;
LABEL_9:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v27 = *v26;
    v28 = (void *)v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v30 = *(_QWORD *)v47;
    v31 = *(_QWORD *)(*(_QWORD *)v47 + 16);
    swift_bridgeObjectRetain(v28);
    if (!v31)
      goto LABEL_31;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v32 = sub_10001A6DC(v27, (uint64_t)v28);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      v35 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v36._countAndFlagsBits = 0xD00000000000004DLL;
      v36._object = (void *)0x8000000100709A50;
      String.append(_:)(v36);
      v37._countAndFlagsBits = v27;
      v37._object = v28;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v35, "internalErrorWithDebugDescription:", v38, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v39);
      swift_release(a4);
      v40 = v13;
      goto LABEL_35;
    }
    v34 = *(_QWORD **)(*(_QWORD *)(v30 + 56) + 8 * v32);
    swift_retain();
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease();
    sub_100604ED0(v29, v44, v34, (uint64_t (*)(id *))sub_100673700, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, 0xD000000000000014, (void *)0x8000000100709AF0, (void (*)(char *, uint64_t))sub_1002B1864, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_10065F274, &off_1007DCB20, (uint64_t (*)(void))sub_1002C672C, (void (*)(_QWORD *, char *, _QWORD *, __n128))sub_100406D78, (uint64_t)&type metadata for REMTemplateSectionStorageCDIngestor.ValueKey, (uint64_t (*)(id *))sub_100648D10);
    if (v6)
    {
      swift_release(v13);
      swift_bridgeObjectRelease();
      v41 = v34;
      goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    swift_release(v34);
    if (v18)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v20 >= v43)
      goto LABEL_33;
    v24 = *(_QWORD *)(v42 + 8 * v20);
    if (!v24)
      break;
LABEL_20:
    v18 = (v24 - 1) & v24;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v43)
    goto LABEL_33;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_19;
  v25 = v20 + 2;
  if (v20 + 2 >= v43)
    goto LABEL_33;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_19;
  v25 = v20 + 3;
  if (v20 + 3 >= v43)
  {
LABEL_33:
    v41 = (_QWORD *)v13;
LABEL_34:
    swift_release(v41);
    v40 = a4;
LABEL_35:
    swift_release(v40);
    return;
  }
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
  {
LABEL_19:
    v20 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v43)
      goto LABEL_33;
    v24 = *(_QWORD *)(v42 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

void sub_1005DF7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;
  char v45[24];
  char v46[24];
  uint64_t v47;

  v6 = v5;
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v46, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (!Strong)
    return;
  v13 = Strong;
  if (a2)
  {
    v14 = swift_errorRetain(a2);
    swift_willThrow(v14);
    swift_release(v13);
    return;
  }
  if (a3)
  {
    v15 = swift_errorRetain(a3);
    swift_willThrow(v15);
    swift_release(v13);
    return;
  }
  v42 = a4 + 64;
  v16 = 1 << *(_BYTE *)(a4 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a4 + 64);
  v19 = Strong + 144;
  swift_bridgeObjectRetain(a4);
  v47 = v19;
  swift_beginAccess(v13 + 144, v45, 0, 0);
  v20 = 0;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v44 = a5;
  if (!v18)
    goto LABEL_10;
LABEL_9:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v27 = *v26;
    v28 = (void *)v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v30 = *(_QWORD *)v47;
    v31 = *(_QWORD *)(*(_QWORD *)v47 + 16);
    swift_bridgeObjectRetain(v28);
    if (!v31)
      goto LABEL_31;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v32 = sub_10001A6DC(v27, (uint64_t)v28);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      v35 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v36._countAndFlagsBits = 0xD00000000000004DLL;
      v36._object = (void *)0x8000000100709A50;
      String.append(_:)(v36);
      v37._countAndFlagsBits = v27;
      v37._object = v28;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v35, "internalErrorWithDebugDescription:", v38, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v39);
      swift_release(a4);
      v40 = v13;
      goto LABEL_35;
    }
    v34 = *(_QWORD **)(*(_QWORD *)(v30 + 56) + 8 * v32);
    swift_retain();
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease();
    sub_100604ED0(v29, v44, v34, (uint64_t (*)(id *))sub_100673730, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, 0xD000000000000015, (void *)0x8000000100709BB0, (void (*)(char *, uint64_t))sub_1002B1870, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_10065F7A0, &off_1007DCBF0, (uint64_t (*)(void))sub_1002C672C, (void (*)(_QWORD *, char *, _QWORD *, __n128))sub_100464638, (uint64_t)&type metadata for REMSmartListSectionStorageCDIngestor.ValueKey, (uint64_t (*)(id *))sub_100649130);
    if (v6)
    {
      swift_release(v13);
      swift_bridgeObjectRelease();
      v41 = v34;
      goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    swift_release(v34);
    if (v18)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v20 >= v43)
      goto LABEL_33;
    v24 = *(_QWORD *)(v42 + 8 * v20);
    if (!v24)
      break;
LABEL_20:
    v18 = (v24 - 1) & v24;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v43)
    goto LABEL_33;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_19;
  v25 = v20 + 2;
  if (v20 + 2 >= v43)
    goto LABEL_33;
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_19;
  v25 = v20 + 3;
  if (v20 + 3 >= v43)
  {
LABEL_33:
    v41 = (_QWORD *)v13;
LABEL_34:
    swift_release(v41);
    v40 = a4;
LABEL_35:
    swift_release(v40);
    return;
  }
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
  {
LABEL_19:
    v20 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v43)
      goto LABEL_33;
    v24 = *(_QWORD *)(v42 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

void sub_1005DFBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, __n128);
  char v49[24];
  char v50[24];
  uint64_t v51;

  v8 = v6;
  v13 = a1 + 16;
  swift_beginAccess(a1 + 16, v50, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (!Strong)
    return;
  v15 = Strong;
  if (a2)
  {
    v16 = swift_errorRetain(a2);
    swift_willThrow(v16);
    swift_release(v15);
    return;
  }
  if (a3)
  {
    v17 = swift_errorRetain(a3);
    swift_willThrow(v17);
    swift_release(v15);
    return;
  }
  v47 = a5;
  v45 = a4 + 64;
  v18 = 1 << *(_BYTE *)(a4 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(a4 + 64);
  v21 = Strong + 144;
  swift_bridgeObjectRetain(a4);
  v51 = v21;
  swift_beginAccess(v15 + 144, v49, 0, 0);
  v22 = 0;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v48 = a6;
  if (!v20)
    goto LABEL_10;
LABEL_9:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    v28 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v30 = *v28;
    v29 = (void *)v28[1];
    v31 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * i);
    v32 = *(_QWORD *)v51;
    v33 = *(_QWORD *)(*(_QWORD *)v51 + 16);
    swift_bridgeObjectRetain(v29);
    if (!v33)
      goto LABEL_31;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    v34 = sub_10001A6DC(v30, (uint64_t)v29);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_31:
      v38 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v39._object = (void *)0x8000000100709A50;
      v39._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v39);
      v40._countAndFlagsBits = v30;
      v40._object = v29;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v38, "internalErrorWithDebugDescription:", v41, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v42);
      swift_release(a4);
      v43 = v15;
      goto LABEL_35;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v34);
    swift_retain();
    swift_bridgeObjectRelease_n(v29, 2);
    v37 = swift_bridgeObjectRelease();
    v48(v31, v47, v36, v37);
    if (v8)
    {
      swift_release(v15);
      swift_bridgeObjectRelease();
      v44 = v36;
      goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    swift_release(v36);
    if (v20)
      goto LABEL_9;
LABEL_10:
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v22 >= v46)
      goto LABEL_33;
    v26 = *(_QWORD *)(v45 + 8 * v22);
    if (!v26)
      break;
LABEL_20:
    v20 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v46)
    goto LABEL_33;
  v26 = *(_QWORD *)(v45 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v27 = v22 + 2;
  if (v22 + 2 >= v46)
    goto LABEL_33;
  v26 = *(_QWORD *)(v45 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v27 = v22 + 3;
  if (v22 + 3 >= v46)
  {
LABEL_33:
    v44 = v15;
LABEL_34:
    swift_release(v44);
    v43 = a4;
LABEL_35:
    swift_release(v43);
    return;
  }
  v26 = *(_QWORD *)(v45 + 8 * v27);
  if (v26)
  {
LABEL_19:
    v22 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v46)
      goto LABEL_33;
    v26 = *(_QWORD *)(v45 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

void sub_1005DFFAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v40[24];
  char v41[24];
  void (*v42)(uint64_t, uint64_t, uint64_t, __n128);

  v42 = a4;
  v5 = v4;
  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v41, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = Strong;
  v36 = a2 + 64;
  v10 = 1 << *(_BYTE *)(a2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a2 + 64);
  v13 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v13, v40, 0, 0);
  v14 = 0;
  v37 = (unint64_t)(v10 + 63) >> 6;
  v38 = v9;
  if (!v12)
    goto LABEL_6;
LABEL_5:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v22 = *v20;
    v21 = (void *)v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v24 = *(_QWORD *)v13;
    v25 = *(_QWORD *)(*(_QWORD *)v13 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v25)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    v26 = sub_10001A6DC(v22, (uint64_t)v21);
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v24);
LABEL_27:
      v30 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v31._object = (void *)0x8000000100709A50;
      v31._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v31);
      v32._countAndFlagsBits = v22;
      v32._object = v21;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v21);
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v30, "internalErrorWithDebugDescription:", v33, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

      swift_willThrow(v34);
      swift_release(a2);
      v35 = v38;
LABEL_30:
      swift_release(v35);
      return;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v26);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    v29 = swift_bridgeObjectRelease(v24);
    v9 = v38;
    v42(v23, a3, v28, v29);
    if (v5)
    {
      swift_release(a2);
      swift_release(v38);
      swift_release(v28);
      swift_bridgeObjectRelease(v23);
      return;
    }
    swift_bridgeObjectRelease(v23);
    swift_release(v28);
    if (v12)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v14 >= v37)
      goto LABEL_29;
    v18 = *(_QWORD *)(v36 + 8 * v14);
    if (!v18)
      break;
LABEL_16:
    v12 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v37)
    goto LABEL_29;
  v18 = *(_QWORD *)(v36 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v14 + 2;
  if (v14 + 2 >= v37)
    goto LABEL_29;
  v18 = *(_QWORD *)(v36 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v14 + 3;
  if (v14 + 3 >= v37)
  {
LABEL_29:
    swift_release(v9);
    v35 = a2;
    goto LABEL_30;
  }
  v18 = *(_QWORD *)(v36 + 8 * v19);
  if (v18)
  {
LABEL_15:
    v14 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v37)
      goto LABEL_29;
    v18 = *(_QWORD *)(v36 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E0308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10061D388(v22, v39, v27, (uint64_t)sub_100673500, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1003514D4, &qword_100840C00, off_1007D6688, (uint64_t (*)(id, uint64_t, __n128))sub_100645350, (uint64_t (*)(void))sub_1002C672C, (void (*)(id, _QWORD, uint64_t, unint64_t *, _QWORD *, __n128))sub_10065B400);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E069C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10061D388(v22, v39, v27, (uint64_t)sub_1006733F4, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1003514F0, &qword_100840C10, off_1007D6670, (uint64_t (*)(id, uint64_t, __n128))sub_100645770, (uint64_t (*)(void))sub_1002C672C, (void (*)(id, _QWORD, uint64_t, unint64_t *, _QWORD *, __n128))sub_10065B400);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E0A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10061D388(v22, v39, v27, (uint64_t)sub_1006732E8, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_10035150C, (unint64_t *)&qword_100840C40, off_1007D6668, (uint64_t (*)(id, uint64_t, __n128))sub_100645B90, (uint64_t (*)(void))sub_1002C672C, (void (*)(id, _QWORD, uint64_t, unint64_t *, _QWORD *, __n128))sub_10065AF6C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E0DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10061D388(v22, v39, v27, (uint64_t)sub_1006731DC, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_100351528, &qword_10084FBF8, off_1007D6678, (uint64_t (*)(id, uint64_t, __n128))sub_100645FB0, (uint64_t (*)(void))sub_1002C672C, (void (*)(id, _QWORD, uint64_t, unint64_t *, _QWORD *, __n128))sub_10065AF6C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E1158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_1006225CC(v22, v39, v27, (uint64_t)sub_1006727C8, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_100351788, (uint64_t)&qword_100845598, off_1007D6728, (uint64_t)sub_100646C10, (uint64_t (*)(void))sub_1002C672C, (void (*)(void *, id, _QWORD, uint64_t, __n128))sub_10041C52C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E14EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_1006225CC(v22, v39, v27, (uint64_t)sub_1006728DC, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1003517A4, (uint64_t)&unk_1008455A0, off_1007D66D8, (uint64_t)sub_100647030, (uint64_t (*)(void))sub_1002C672C, (void (*)(void *, id, _QWORD, uint64_t, __n128))sub_10041C550);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E1880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_1006225CC(v22, v39, v27, (uint64_t)sub_1006729F0, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1003517C0, (uint64_t)&unk_10083AE00, off_1007D66C0, (uint64_t)sub_100647450, (uint64_t (*)(void))sub_1002C672C, (void (*)(void *, id, _QWORD, uint64_t, __n128))sub_10041C574);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E1C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_1006225CC(v22, v39, v27, (uint64_t)sub_100672C18, (uint64_t (*)(uint64_t, char *, uint64_t, __n128))sub_1003517DC, (uint64_t)&qword_100841620, off_1007D6700, (uint64_t)sub_100647870, (uint64_t (*)(void))sub_1002C672C, (void (*)(void *, id, _QWORD, uint64_t, __n128))sub_100318D10);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E1FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(NSObject **)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100628D98(v22, v40, v27, (uint64_t)sub_100671B40, (uint64_t (*)(_QWORD, _QWORD, _QWORD, __n128))sub_1003525BC, (uint64_t (*)(_QWORD, __n128))type metadata accessor for REMCDTemplateSection, 0xD000000000000014, (void *)0x8000000100709AF0, (uint64_t (*)(_QWORD, _QWORD, __n128))sub_100648D10, (uint64_t (*)(void))sub_1002C672C, (uint64_t (*)(_QWORD, __n128))sub_10030F418, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_100407680);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E2354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(NSObject **)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100628D98(v22, v40, v27, (uint64_t)sub_100671CA4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, __n128))sub_1003525D8, (uint64_t (*)(_QWORD, __n128))type metadata accessor for REMCDSmartListSection, 0xD000000000000015, (void *)0x8000000100709BB0, (uint64_t (*)(_QWORD, _QWORD, __n128))sub_100649130, (uint64_t (*)(void))sub_1002C672C, (uint64_t (*)(_QWORD, __n128))sub_10030F418, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_100464ECC);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E2700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(NSObject **)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100628D98(v22, v40, v27, (uint64_t)sub_100671DD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, __n128))sub_1003525F4, (uint64_t (*)(_QWORD, __n128))type metadata accessor for REMCDListSection, 0xD000000000000010, (void *)0x8000000100709BD0, (uint64_t (*)(_QWORD, _QWORD, __n128))sub_100649550, (uint64_t (*)(void))sub_1002C672C, (uint64_t (*)(_QWORD, __n128))sub_10030F418, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_10030FE70);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E2AAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v41[24];
  char v42[24];
  void (*v43)(uint64_t, uint64_t, uint64_t, __n128);

  v43 = a4;
  v5 = v4;
  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v42, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = Strong;
  v37 = a2 + 64;
  v10 = 1 << *(_BYTE *)(a2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a2 + 64);
  v13 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v13, v41, 0, 0);
  v14 = 0;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v39 = v9;
  if (!v12)
    goto LABEL_6;
LABEL_5:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v22 = *v20;
    v21 = (void *)v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v24 = *(_QWORD *)v13;
    v25 = *(_QWORD *)(*(_QWORD *)v13 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v25)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    v26 = sub_10001A6DC(v22, (uint64_t)v21);
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v30 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v31._object = (void *)0x8000000100709A50;
      v31._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v31);
      v32._countAndFlagsBits = v22;
      v32._object = v21;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v30, "internalErrorWithDebugDescription:", v33, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v34);
      swift_release(a2);
      v35 = v39;
      goto LABEL_31;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v26);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    v29 = swift_bridgeObjectRelease();
    v9 = v39;
    v43(v23, a3, v28, v29);
    if (v5)
    {
      swift_release(v39);
      swift_bridgeObjectRelease();
      v36 = v28;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v28);
    if (v12)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v14 >= v38)
      goto LABEL_29;
    v18 = *(_QWORD *)(v37 + 8 * v14);
    if (!v18)
      break;
LABEL_16:
    v12 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v38)
    goto LABEL_29;
  v18 = *(_QWORD *)(v37 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v14 + 2;
  if (v14 + 2 >= v38)
    goto LABEL_29;
  v18 = *(_QWORD *)(v37 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v14 + 3;
  if (v14 + 3 >= v38)
  {
LABEL_29:
    v36 = v9;
LABEL_30:
    swift_release(v36);
    v35 = a2;
LABEL_31:
    swift_release(v35);
    return;
  }
  v18 = *(_QWORD *)(v37 + 8 * v19);
  if (v18)
  {
LABEL_15:
    v14 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v38)
      goto LABEL_29;
    v18 = *(_QWORD *)(v37 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E2DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v21);
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease(v23);
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&qword_10083DA60, (uint64_t)off_1007D66C8, (uint64_t (*)(uint64_t, unint64_t))sub_100644B10, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease(v22);
      return;
    }
    swift_bridgeObjectRelease(v22);
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E317C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), &qword_100840C00, (uint64_t)off_1007D6688, (uint64_t (*)(uint64_t, unint64_t))sub_100645350, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E34FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), &qword_100840C10, (uint64_t)off_1007D6670, (uint64_t (*)(uint64_t, unint64_t))sub_100645770, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E387C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&qword_100840C40, (uint64_t)off_1007D6668, (uint64_t (*)(uint64_t, unint64_t))sub_100645B90, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E3BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), &qword_10084FBF8, (uint64_t)off_1007D6678, (uint64_t (*)(uint64_t, unint64_t))sub_100645FB0, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E3F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&unk_1008398F0, (uint64_t)off_1007D6660, (uint64_t (*)(uint64_t, unint64_t))sub_1006463D0, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E42FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), &qword_100840020, (uint64_t)off_1007D6690, (uint64_t (*)(uint64_t, unint64_t))sub_1006467F0, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), &qword_100845598, (uint64_t)off_1007D6728, (uint64_t (*)(uint64_t, unint64_t))sub_100646C10, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E49FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&unk_1008455A0, (uint64_t)off_1007D66D8, (uint64_t (*)(uint64_t, unint64_t))sub_100647030, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E4D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&unk_10083AE00, (uint64_t)off_1007D66C0, (uint64_t (*)(uint64_t, unint64_t))sub_100647450, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E50FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  uint64_t v39;

  v4 = v3;
  v39 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v34 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v37, 0, 0);
  v13 = 0;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v36;
LABEL_30:
      swift_release(v33);
      return;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v36;
    sub_10063662C(v22, v39, v27, (uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), (unint64_t *)&qword_100841620, (uint64_t)off_1007D6700, (uint64_t (*)(uint64_t, unint64_t))sub_100647870, (unint64_t *)sub_1002C672C);
    if (v4)
    {
      swift_release(a2);
      swift_release(v36);
      swift_release(v27);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v35)
    goto LABEL_29;
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v35)
  {
LABEL_29:
    swift_release(v8);
    v33 = a2;
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v35)
      goto LABEL_29;
    v17 = *(_QWORD *)(v34 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E547C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t a1, uint64_t a2), unint64_t (*)(void *), __n128))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v42[24];
  char v43[24];
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128);

  v44 = a5;
  v6 = v5;
  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v43, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (!Strong)
    return;
  v10 = Strong;
  v37 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a2 + 64);
  v14 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v14, v42, 0, 0);
  v15 = 0;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v39 = v10;
  if (!v13)
    goto LABEL_6;
LABEL_5:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v22 = *v21;
    v23 = (void *)v21[1];
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v25 = *(_QWORD *)v14;
    v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    swift_bridgeObjectRetain(v23);
    if (!v26)
      goto LABEL_27;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v27 = sub_10001A6DC(v22, (uint64_t)v23);
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v31 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v32._object = (void *)0x8000000100709A50;
      v32._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v32);
      v33._countAndFlagsBits = v22;
      v33._object = v23;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34 = String._bridgeToObjectiveC()();
      objc_msgSend(v31, "internalErrorWithDebugDescription:", v34, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v35);
      swift_release(a2);
      v36 = v39;
LABEL_30:
      swift_release(v36);
      return;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27);
    swift_retain();
    swift_bridgeObjectRelease_n(v23, 2);
    v30 = swift_bridgeObjectRelease();
    v10 = v39;
    v44(v24, a3, v29, a4, &qword_100851CB0, off_1007D66B0, sub_1006484D0, sub_1002C672C, v30);
    if (v6)
    {
      swift_release(a2);
      swift_release(v39);
      swift_release(v29);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v29);
    if (v13)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v15 >= v38)
      goto LABEL_29;
    v19 = *(_QWORD *)(v37 + 8 * v15);
    if (!v19)
      break;
LABEL_16:
    v13 = (v19 - 1) & v19;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v38)
    goto LABEL_29;
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v15 + 2;
  if (v15 + 2 >= v38)
    goto LABEL_29;
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v15 + 3;
  if (v15 + 3 >= v38)
  {
LABEL_29:
    swift_release(v10);
    v36 = a2;
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v15 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v38)
      goto LABEL_29;
    v19 = *(_QWORD *)(v37 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E57FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_10063AD24(v22, v40, v27, (uint64_t (*)(id *))sub_100673718, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, (uint64_t (*)(_QWORD *, unint64_t))sub_1006488F0, 0xD000000000000016, (void *)0x8000000100709CF0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E5B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_10063AD24(v22, v40, v27, (uint64_t (*)(id *))sub_100673718, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, (uint64_t (*)(_QWORD *, unint64_t))sub_100648D10, 0xD000000000000014, (void *)0x8000000100709AF0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E5F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_10063AD24(v22, v40, v27, (uint64_t (*)(id *))sub_100673718, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, (uint64_t (*)(_QWORD *, unint64_t))sub_100649130, 0xD000000000000015, (void *)0x8000000100709BB0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E62AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_10063AD24(v22, v40, v27, (uint64_t (*)(id *))sub_100673718, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, (uint64_t (*)(_QWORD *, unint64_t))sub_100649550, 0xD000000000000010, (void *)0x8000000100709BD0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E663C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_10063AD24(v22, v40, v27, (uint64_t (*)(id *))sub_1006722A4, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, (uint64_t (*)(_QWORD *, unint64_t))sub_10064A1B0, 0xD000000000000012, (void *)0x80000001006FA060, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E69CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  char v35[24];
  char v36[24];
  uint64_t v37;

  v3 = v2;
  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v36, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return;
  v7 = Strong;
  v33 = a2 + 64;
  v8 = 1 << *(_BYTE *)(a2 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a2 + 64);
  v11 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v11, v35, 0, 0);
  v12 = 0;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v37 = v7;
  if (!v10)
    goto LABEL_6;
LABEL_5:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v18;
    v19 = (void *)v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v22 = *(_QWORD *)v11;
    v23 = *(_QWORD *)(*(_QWORD *)v11 + 16);
    swift_bridgeObjectRetain(v19);
    if (!v23)
      goto LABEL_27;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v24 = sub_10001A6DC(v20, (uint64_t)v19);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v27 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v28._object = (void *)0x8000000100709A50;
      v28._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v28);
      v29._countAndFlagsBits = v20;
      v29._object = v19;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v27, "internalErrorWithDebugDescription:", v30, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v31);
      swift_release(a2);
      v32 = v37;
LABEL_30:
      swift_release(v32);
      return;
    }
    v26 = *(uint64_t **)(*(_QWORD *)(v22 + 56) + 8 * v24);
    swift_retain();
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease();
    v7 = v37;
    sub_10066EF4C(v21, v26);
    if (v3)
    {
      swift_release(a2);
      swift_release(v7);
      swift_release(v26);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v26);
    if (v10)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v34)
      goto LABEL_29;
    v16 = *(_QWORD *)(v33 + 8 * v12);
    if (!v16)
      break;
LABEL_16:
    v10 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
    goto LABEL_15;
  v17 = v12 + 2;
  if (v12 + 2 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
    goto LABEL_15;
  v17 = v12 + 3;
  if (v12 + 3 >= v34)
  {
LABEL_29:
    swift_release(v7);
    v32 = a2;
    goto LABEL_30;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
LABEL_15:
    v12 = v17;
    goto LABEL_16;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v34)
      goto LABEL_29;
    v16 = *(_QWORD *)(v33 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E6D20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t (*a7)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char v44[24];
  char v45[24];
  uint64_t (*v46)(void);

  v46 = a7;
  v8 = v7;
  v10 = a1 + 16;
  swift_beginAccess(a1 + 16, v45, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (!Strong)
    return;
  v12 = Strong;
  v38 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a2 + 64);
  v16 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v16, v44, 0, 0);
  v17 = 0;
  v39 = (unint64_t)(v13 + 63) >> 6;
  v40 = v12;
  if (!v15)
    goto LABEL_6;
LABEL_5:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v25 = *v23;
    v24 = (void *)v23[1];
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v27 = *(_QWORD *)v16;
    v28 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    swift_bridgeObjectRetain(v24);
    if (!v28)
      goto LABEL_27;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    v29 = sub_10001A6DC(v25, (uint64_t)v24);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v27);
LABEL_27:
      v32 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v33._object = (void *)0x8000000100709A50;
      v33._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v33);
      v34._countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      swift_bridgeObjectRelease(v24);
      v35 = String._bridgeToObjectiveC()();
      objc_msgSend(v32, "internalErrorWithDebugDescription:", v35, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

      swift_willThrow(v36);
      swift_release(a2);
      v37 = v40;
LABEL_30:
      swift_release(v37);
      return;
    }
    v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v29);
    swift_retain();
    swift_bridgeObjectRelease_n(v24, 2);
    swift_bridgeObjectRelease(v27);
    v12 = v40;
    sub_10066FBE4(v26, v31, a4, a5, a6, v46);
    if (v8)
    {
      swift_release(a2);
      swift_release(v40);
      swift_release(v31);
      swift_bridgeObjectRelease(v26);
      return;
    }
    swift_bridgeObjectRelease(v26);
    swift_release(v31);
    if (v15)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v17 >= v39)
      goto LABEL_29;
    v21 = *(_QWORD *)(v38 + 8 * v17);
    if (!v21)
      break;
LABEL_16:
    v15 = (v21 - 1) & v21;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v39)
    goto LABEL_29;
  v21 = *(_QWORD *)(v38 + 8 * v22);
  if (v21)
    goto LABEL_15;
  v22 = v17 + 2;
  if (v17 + 2 >= v39)
    goto LABEL_29;
  v21 = *(_QWORD *)(v38 + 8 * v22);
  if (v21)
    goto LABEL_15;
  v22 = v17 + 3;
  if (v17 + 3 >= v39)
  {
LABEL_29:
    swift_release(v12);
    v37 = a2;
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(v38 + 8 * v22);
  if (v21)
  {
LABEL_15:
    v17 = v22;
    goto LABEL_16;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v39)
      goto LABEL_29;
    v21 = *(_QWORD *)(v38 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E7084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t a1, uint64_t a2), unint64_t (*)(void *), __n128))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v42[24];
  char v43[24];
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128);

  v44 = a5;
  v6 = v5;
  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v43, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (!Strong)
    return;
  v10 = Strong;
  v37 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a2 + 64);
  v14 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v14, v42, 0, 0);
  v15 = 0;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v39 = v10;
  if (!v13)
    goto LABEL_6;
LABEL_5:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v22 = *v21;
    v23 = (void *)v21[1];
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v25 = *(_QWORD *)v14;
    v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    swift_bridgeObjectRetain(v23);
    if (!v26)
      goto LABEL_27;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v27 = sub_10001A6DC(v22, (uint64_t)v23);
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v31 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v32._object = (void *)0x8000000100709A50;
      v32._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v32);
      v33._countAndFlagsBits = v22;
      v33._object = v23;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34 = String._bridgeToObjectiveC()();
      objc_msgSend(v31, "internalErrorWithDebugDescription:", v34, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v35);
      swift_release(a2);
      v36 = v39;
LABEL_30:
      swift_release(v36);
      return;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27);
    swift_retain();
    swift_bridgeObjectRelease_n(v23, 2);
    v30 = swift_bridgeObjectRelease();
    v10 = v39;
    v44(v24, a3, v29, a4, &qword_100839928, off_1007D6718, sub_1006480B0, sub_1002C672C, v30);
    if (v6)
    {
      swift_release(a2);
      swift_release(v39);
      swift_release(v29);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_release(v29);
    if (v13)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v15 >= v38)
      goto LABEL_29;
    v19 = *(_QWORD *)(v37 + 8 * v15);
    if (!v19)
      break;
LABEL_16:
    v13 = (v19 - 1) & v19;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v38)
    goto LABEL_29;
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v15 + 2;
  if (v15 + 2 >= v38)
    goto LABEL_29;
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v15 + 3;
  if (v15 + 3 >= v38)
  {
LABEL_29:
    swift_release(v10);
    v36 = a2;
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v37 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v15 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v38)
      goto LABEL_29;
    v19 = *(_QWORD *)(v37 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_1005E7404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100673664, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_1006488F0, 0xD000000000000016, 0x8000000100709CF0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E7794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100671B14, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_100648D10, 0xD000000000000014, 0x8000000100709AF0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E7B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100671C80, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_100649130, 0xD000000000000015, 0x8000000100709BB0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E7EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100671DA0, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_100649550, 0xD000000000000010, 0x8000000100709BD0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E8244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v21 = *v19;
    v20 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v20);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v21, (uint64_t)v20);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v21;
      v30._object = v20;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100671EBC, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_100649970, 0x6D655444434D4552, 0xED00006574616C70, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E85D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641330(v22, v40, v27, (uint64_t (*)(id *))sub_100672138, (uint64_t)&unk_100840000, off_1007D6720, (uint64_t (*)(_QWORD *, NSObject *, __n128))sub_100649D90, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E8948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      v29._object = (void *)0x8000000100709A50;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641F00(v22, v40, v27, (uint64_t (*)(id *))sub_100672270, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, (uint64_t (*)(_QWORD *, uint64_t, __n128))sub_10064A1B0, 0xD000000000000012, 0x80000001006FA060, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E8CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  uint64_t v40;

  v4 = v3;
  v40 = a3;
  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    return;
  v8 = Strong;
  v35 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = Strong + 144;
  swift_bridgeObjectRetain(a2);
  swift_beginAccess(v12, v38, 0, 0);
  v13 = 0;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = v8;
  if (!v11)
    goto LABEL_6;
LABEL_5:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = (void *)v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = *(_QWORD *)v12;
    v24 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    swift_bridgeObjectRetain(v21);
    if (!v24)
      goto LABEL_27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001A6DC(v20, (uint64_t)v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_27:
      v28 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(79);
      v29._object = (void *)0x8000000100709A50;
      v29._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v20;
      v30._object = v21;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "internalErrorWithDebugDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v32);
      swift_release(a2);
      v33 = v37;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
    v8 = v37;
    sub_100641330(v22, v40, v27, (uint64_t (*)(id *))sub_100672D14, (uint64_t)&qword_100839900, off_1007D66E0, (uint64_t (*)(_QWORD *, NSObject *, __n128))sub_10064A9F0, (uint64_t (*)(void))sub_1002C672C);
    if (v4)
    {
      swift_release(v37);
      swift_bridgeObjectRelease();
      v34 = v27;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_release(v27);
    if (v11)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 2;
  if (v13 + 2 >= v36)
    goto LABEL_29;
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
    goto LABEL_15;
  v18 = v13 + 3;
  if (v13 + 3 >= v36)
  {
LABEL_29:
    v34 = v8;
LABEL_30:
    swift_release(v34);
    v33 = a2;
LABEL_31:
    swift_release(v33);
    return;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
LABEL_15:
    v13 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v36)
      goto LABEL_29;
    v17 = *(_QWORD *)(v35 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
}

void sub_1005E904C(int64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  _BOOL4 v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  id v67;
  BOOL v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  Swift::OpaquePointer v90;
  char v91;
  id v92;
  unint64_t v93;
  char v94;
  id v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t *v99;
  id v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  void *v108;
  uint64_t v109;
  void *ObjCClassFromMetadata;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  Class isa;
  uint64_t v122;
  id v123;
  unint64_t v124;
  id v125;
  _QWORD *v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  int v130;
  _BOOL4 v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  id v156;
  char *v157;
  char *v158;
  NSObject *v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  os_log_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  id v189;
  unint64_t v190;
  id v191;
  _QWORD *v192;
  id v193;
  char isUniquelyReferenced_nonNull_native;
  int v195;
  id v196;
  id v197;
  char *v198;
  uint64_t v199;
  NSObject *v200;
  uint64_t v201;
  char *v202;
  _QWORD *v203;
  uint64_t v204;
  void *v205;
  os_log_t v206;
  char v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  unint64_t v212;
  _QWORD *v213;
  Class v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  Class v218;
  uint8_t *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  os_log_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  char *v227;
  uint64_t v228;
  NSObject *v229;
  os_log_type_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  NSString v238;
  NSString v239;
  NSString v240;
  uint64_t v241;
  id v242;
  int64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  id v249;
  _QWORD *v250;
  uint8_t *v251;
  os_log_t v252;
  char *v253;
  _QWORD *v254;
  __n128 v255;
  _QWORD *v256;
  __n128 v257;
  __n128 v258;
  char *v259;
  __n128 v260;
  char *v261;
  int64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  void *v268;
  unint64_t v269;
  uint64_t *v270;
  NSObject *v271;
  uint64_t v272;
  __n128 v273;
  int64_t v274;
  uint64_t v275;
  os_log_t v276;
  uint64_t v277;
  uint64_t v278;
  id v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  void (**v284)(_QWORD, _QWORD, _QWORD);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  char v294[8];
  char v295[8];
  _QWORD *v296;
  uint64_t v297;

  v5 = v4;
  v6 = v3;
  v277 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v281 = (uint64_t)&v247 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v280 = (char *)&v247 - v12;
  v286 = type metadata accessor for UUID(0);
  v285 = *(_QWORD *)(v286 - 8);
  __chkstk_darwin(v286);
  v283 = (char *)&v247 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v282 = (char *)&v247 - v15;
  v16 = type metadata accessor for Logger(0);
  v284 = *(void (***)(_QWORD, _QWORD, _QWORD))(v16 - 8);
  __chkstk_darwin(v16);
  v287 = (uint64_t)&v247 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = a3;
  v19 = *((_QWORD *)a3 + 2);
  v18 = *((_QWORD *)a3 + 3);
  v279 = (id)*((_QWORD *)a3 + 4);
  v20 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v20 != -1)
    goto LABEL_151;
LABEL_2:
  v21 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v291 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = (char *)static os_log_type_t.info.getter(v23);
  v25 = os_log_type_enabled(v23, (os_log_type_t)v24);
  v26 = (unint64_t)a1 >> 62;
  v292 = a1;
  v289 = (unint64_t)a1 >> 62;
  v290 = v6;
  v272 = v16;
  if (v25)
  {
    LODWORD(v276) = (_DWORD)v24;
    v24 = (char *)swift_slowAlloc(42, -1);
    v27 = (_QWORD *)swift_slowAlloc(96, -1);
    v293 = v27;
    *(_DWORD *)v24 = 136446978;
    v296 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    *((_WORD *)v24 + 6) = 2048;
    v278 = v19;
    v275 = (uint64_t)v27;
    if (!v26)
    {
      v28 = *(_QWORD *)((v292 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_158;
  }

  swift_bridgeObjectRelease_n(v18, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v26)
    {
      v243 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v16 = _CocoaArrayWrapper.endIndex.getter(v243);
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v16)
      break;
    v293 = _swiftEmptyArrayStorage;
    v23 = &v293;
    specialized ContiguousArray.reserveCapacity(_:)(v16);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = 0;
      v6 = a1 & 0xC000000000000001;
      v19 = 0x8000000100709CD0;
      while (v16 != v18)
      {
        if (v6)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
        else
          v35 = *(id *)(a1 + 8 * v18 + 32);
        v36 = v35;
        v37 = (char *)sub_1005CDB68(objc_msgSend(v36, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);
        if (v5)
        {

          v44 = v293;
          swift_bridgeObjectRelease();
          swift_release(v44);
          return;
        }
        v24 = v37;
        ++v18;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v39 = v293[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
        v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v24);
        v34 = specialized ContiguousArray._endMutation()(v40);
        a1 = v292;
        if (v16 == v18)
        {
          v41 = v293;
          v26 = v289;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    if (v292 < 0)
      v244 = v292;
    else
      v244 = v292 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v292);
    v28 = _CocoaArrayWrapper.endIndex.getter(v244);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v296 = (_QWORD *)v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    swift_bridgeObjectRelease();
    *((_WORD *)v24 + 11) = 2082;
    v29 = type metadata accessor for REMCDSavedAttachment();
    v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = v31;

    v296 = (_QWORD *)sub_10001A820(v19, v32, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    swift_bridgeObjectRelease();
    *((_WORD *)v24 + 16) = 2082;
    swift_bridgeObjectRetain(v18);
    v296 = (_QWORD *)sub_10001A820(v278, v18, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v276, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v24, 0x2Au);
    v33 = v275;
    swift_arrayDestroy(v275, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    a1 = v292;
    v26 = v289;
  }
  v41 = _swiftEmptyArrayStorage;
LABEL_20:
  v42 = v290;
  v43 = *(_QWORD *)(v290 + 96);
  if (v43 <= 1)
  {
    if (v43)
    {
      if (v43 != 1)
        goto LABEL_164;
      swift_bridgeObjectRelease();
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = (_QWORD *)swift_slowAlloc(32, -1);
        v293 = v60;
        *(_DWORD *)v59 = 136315138;
        v287 = (uint64_t)(v59 + 4);
        v61 = objc_msgSend((id)type metadata accessor for REMCDSavedAttachment(), "cdEntityName");
        v24 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v19 = v62;

        v26 = v289;
        v296 = (_QWORD *)sub_10001A820((uint64_t)v24, v19, (uint64_t *)&v293);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Skipping fetch during upsert {CDType: %s}", v59, 0xCu);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        v63 = v60;
        a1 = v292;
        swift_slowDealloc(v63, -1, -1);
        v42 = v290;
        swift_slowDealloc(v59, -1, -1);
      }

      v18 = sub_1002B0370((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_35;
    }
  }
  else if ((unint64_t)(v43 - 2) >= 3 && v43 != 4499 && v43 != 4599)
  {
LABEL_164:
    v284[2](v287, v291, v272);
    v245 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v246 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v245, v246);
    __break(1u);
    JUMPOUT(0x1005EB3D0);
  }
  v45 = Logger.logObject.getter(v34);
  v46 = static os_log_type_t.debug.getter();
  LOWORD(v19) = v46;
  if (os_log_type_enabled(v45, v46))
  {
    v287 = (uint64_t)v41;
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (_QWORD *)swift_slowAlloc(32, -1);
    v293 = v48;
    *(_DWORD *)v47 = 136315138;
    v284 = (void (**)(_QWORD, _QWORD, _QWORD))(v47 + 4);
    v24 = (char *)objc_msgSend((id)type metadata accessor for REMCDSavedAttachment(), "cdEntityName");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v51 = v50;

    v52 = v49;
    v26 = v289;
    v296 = (_QWORD *)sub_10001A820(v52, v51, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    v41 = (_QWORD *)v287;
    v42 = v290;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v19, "Performing fetch during upsert {CDType: %s}", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    v53 = v48;
    a1 = v292;
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }

  sub_1006442D0((uint64_t)v41, (uint64_t)v288);
  v18 = v54;
  v55 = swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    return;
  }
LABEL_35:
  if (v26)
  {
    if (a1 < 0)
      v65 = a1;
    else
      v65 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v64 = _CocoaArrayWrapper.endIndex.getter(v65);
    v55 = swift_bridgeObjectRelease();
    if (!v64)
      goto LABEL_136;
  }
  else
  {
    v64 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v64)
    {
LABEL_136:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v66 = 0;
  v265 = v42 + 24;
  v266 = v288 + 48;
  v264 = v288 + 56;
  v269 = a1 & 0xC000000000000001;
  v263 = a1 & 0xFFFFFFFFFFFFFF8;
  v262 = a1 + 32;
  v270 = &v297;
  v261 = (char *)&v296 + 4;
  v268 = (void *)0x8000000100709CD0;
  v55.n128_u64[0] = 136446978;
  v260 = v55;
  v55.n128_u64[0] = 136446210;
  v273 = v55;
  v55.n128_u64[0] = 136447490;
  v257 = v55;
  v55.n128_u64[0] = 136447234;
  v255 = v55;
  v55.n128_u64[0] = 136446466;
  v258 = v55;
  v259 = (char *)&type metadata for Any + 8;
  v278 = v18;
  v267 = v64;
  while (1)
  {
    if (v269)
    {
      v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, a1);
      v68 = __OFADD__(v66, 1);
      v23 = ((char *)&v66->isa + 1);
      if (v68)
        goto LABEL_157;
    }
    else
    {
      if ((unint64_t)v66 >= *(_QWORD *)(v263 + 16))
      {
        __break(1u);
LABEL_163:
        swift_once(&qword_100837928, sub_1005A2648);
        goto LABEL_138;
      }
      v67 = *(id *)(v262 + 8 * (_QWORD)v66);
      v68 = __OFADD__(v66, 1);
      v23 = ((char *)&v66->isa + 1);
      if (v68)
        goto LABEL_157;
    }
    v271 = v23;
    v69 = v67;
    v70 = objc_msgSend(v69, "remObjectID");
    v71 = sub_1005CDB68(v70, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, v268);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v72 = v71;
    v289 = 0;

    v284 = (void (**)(_QWORD, _QWORD, _QWORD))v69;
    v73 = objc_msgSend(v69, "accountID");
    v74 = objc_msgSend(v73, "uuid");

    v75 = v282;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

    v77 = UUID.uuidString.getter(v76);
    v79 = v78;
    v80 = *(void (**)(char *, uint64_t))(v285 + 8);
    v81 = v75;
    v82 = v286;
    v80(v81, v286);
    v83 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v84 = objc_msgSend(v83, "uuid");

    v24 = v283;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

    v86 = UUID.uuidString.getter(v85);
    v88 = v87;
    v80(v24, v82);
    if (v77 == v86 && v79 == v88)
    {
      swift_bridgeObjectRelease_n(v79, 2);
LABEL_54:
      __asm { BR              X10 }
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v79, v86, v88, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
      goto LABEL_54;
    v18 = v278;
    v90._rawValue = &off_1007DCDE8;
    v91 = sub_1005D0484(v90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment);
    if (!*(_QWORD *)(v18 + 16))
      goto LABEL_60;
    v92 = v72;
    v93 = sub_1002C672C(v92);
    if ((v94 & 1) == 0)
      break;
    v95 = *(id *)(*(_QWORD *)(v18 + 56) + 8 * v93);

    v19 = (uint64_t)v92;
    v96 = Logger.logObject.getter(v19);
    v97 = static os_log_type_t.info.getter(v96);
    if (os_log_type_enabled(v96, v97))
    {
      v98 = swift_slowAlloc(22, -1);
      v24 = (char *)swift_slowAlloc(8, -1);
      v288 = (char *)swift_slowAlloc(32, -1);
      v293 = v288;
      *(_DWORD *)v98 = v258.n128_u32[0];
      v296 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v293);
      v99 = v270;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
      *(_WORD *)(v98 + 12) = 2114;
      v287 = (uint64_t)v95;
      v296 = (_QWORD *)v19;
      v100 = (id)v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v99);
      *(_QWORD *)v24 = v19;

      _os_log_impl((void *)&_mh_execute_header, v96, v97, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v98, 0x16u);
      v101 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v24, 1, v101);
      swift_slowDealloc(v24, -1, -1);
      v102 = v288;
      swift_arrayDestroy(v288, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      v103 = v98;
      v18 = v278;
      swift_slowDealloc(v103, -1, -1);

      goto LABEL_107;
    }

LABEL_135:
    a1 = v292;
    v66 = v271;
    v5 = v289;
    if (v271 == v267)
      goto LABEL_136;
  }

LABEL_60:
  if (v91 == 2)
    goto LABEL_142;
  if ((v91 & 1) != 0)
    v104 = 6911093;
  else
    v104 = 0x44497463656A626FLL;
  if ((v91 & 1) != 0)
    v105 = 0xE300000000000000;
  else
    v105 = 0xE800000000000000;
  if (v104 == 0x44497463656A626FLL && v105 == 0xE800000000000000)
  {
LABEL_69:
    swift_bridgeObjectRelease_n(v105, 2);
    goto LABEL_74;
  }
  v106 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v104, v105, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v106 & 1) == 0)
  {
    if (v104 == 6911093 && v105 == 0xE300000000000000)
      goto LABEL_69;
    v107 = _stringCompareWithSmolCheck(_:_:expecting:)(6911093, 0xE300000000000000, v104, v105, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v107 & 1) == 0)
    {
LABEL_142:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v242 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v72);
      swift_willThrow(v242);

      return;
    }
  }
LABEL_74:
  v108 = *(void **)(v290 + 88);
  v109 = type metadata accessor for REMCDSavedAttachment();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v109);
  v111 = objc_msgSend(ObjCClassFromMetadata, "entity");
  v112 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v111, v108);
  v113 = v279;
  objc_msgSend(v108, "assignObject:toPersistentStore:", v112, v113);

  v114 = v112;
  v115 = objc_msgSend(v72, "uuid");
  v116 = (uint64_t)v280;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v115);

  v117 = v285;
  v118 = v286;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v285 + 56))(v116, 0, 1, v286);
  v119 = v281;
  sub_10011D420(v116, v281);
  v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v119, 1, v118);
  isa = 0;
  if (v120 != 1)
  {
    v122 = v281;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v80((char *)v122, v286);
  }
  objc_msgSend(v114, "setIdentifier:", isa);

  sub_10011E85C(v116);
  v123 = v72;
  v124 = v290;
  swift_retain_n(v290);
  v125 = v114;
  v126 = v123;
  v127 = (char *)v125;
  v128 = Logger.logObject.getter(v127);
  v129 = static os_log_type_t.default.getter(v128);
  v130 = v129;
  v131 = os_log_type_enabled(v128, v129);
  v288 = v127;
  if (v131)
  {
    v132 = swift_slowAlloc(42, -1);
    v133 = (_QWORD *)swift_slowAlloc(16, -1);
    v287 = swift_slowAlloc(64, -1);
    v293 = (_QWORD *)v287;
    *(_DWORD *)v132 = v260.n128_u32[0];
    v296 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v293);
    v134 = v270;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
    *(_WORD *)(v132 + 12) = 2082;
    sub_1000184A8(v265, (uint64_t)v295);
    sub_100671124((uint64_t)v295, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    LODWORD(v276) = v130;
    sub_1000181B8();
    v136 = v135;
    v138 = v137;
    sub_100671124((uint64_t)v295, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v296 = (_QWORD *)sub_10001A820(v136, v138, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v134);
    swift_release_n(v124);
    swift_bridgeObjectRelease();
    *(_WORD *)(v132 + 22) = 2114;
    v296 = v126;
    v139 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v134);
    *v133 = v126;

    *(_WORD *)(v132 + 32) = 2112;
    v140 = objc_msgSend(v288, "objectID");
    v296 = v140;
    v127 = v288;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v134);
    v133[1] = v140;

    _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v276, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v132, 0x2Au);
    v141 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v133, 2, v141);
    swift_slowDealloc(v133, -1, -1);
    v142 = v287;
    swift_arrayDestroy(v287, 2, v259);
    swift_slowDealloc(v142, -1, -1);
    swift_slowDealloc(v132, -1, -1);

  }
  else
  {

    swift_release_n(v124);
  }
  v143 = v124;
  swift_beginAccess(v266, &v293, 33, 0);
  v18 = v126;
  sub_1001912EC((uint64_t)v127, v18);
  swift_endAccess(&v293);

  v145 = 2;
  v287 = 2;
  v146 = &byte_1007E0658;
  while (1)
  {
    if (((*(unsigned int *)(v143 + 64) | ((unint64_t)*(unsigned __int16 *)(v143 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
    {
      v147 = *v146;
      v148 = Logger.logObject.getter(v144);
      v149 = static os_log_type_t.error.getter(v148);
      if (os_log_type_enabled(v148, v149))
      {
        v150 = swift_slowAlloc(12, -1);
        v151 = (_QWORD *)swift_slowAlloc(32, -1);
        v293 = v151;
        *(_DWORD *)v150 = v273.n128_u32[0];
        LOBYTE(v296) = v147;
        v152 = String.init<A>(describing:)(&v296, &type metadata for REMSavedAttachmentCDIngestor.ValueKey);
        *(_QWORD *)(v150 + 4) = sub_10001A820(v152, v153, (uint64_t *)&v293);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v148, v149, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v150, 0xCu);
        swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
        v154 = v151;
        v143 = v290;
        swift_slowDealloc(v154, -1, -1);
        swift_slowDealloc(v150, -1, -1);
      }

    }
    LODWORD(v19) = *(_DWORD *)(v143 + 64);
    if (*(unsigned __int16 *)(v143 + 68) >> 14 == 2 && (*(_DWORD *)(v143 + 64) & 1) == 0)
      break;
    ++v146;
    if (!--v145)
    {
      swift_retain_n(v143);
      v156 = (id)v18;
      v157 = v288;
      v19 = (uint64_t)v156;
      v158 = v157;
      v159 = Logger.logObject.getter(v158);
      v160 = static os_log_type_t.default.getter(v159);
      if (os_log_type_enabled(v159, (os_log_type_t)v160))
      {
        LODWORD(v274) = v160;
        v276 = v159;
        v161 = (_QWORD *)v19;
        v162 = swift_slowAlloc(58, -1);
        v163 = (_QWORD *)swift_slowAlloc(16, -1);
        v275 = swift_slowAlloc(96, -1);
        v293 = (_QWORD *)v275;
        *(_DWORD *)v162 = v257.n128_u32[0];
        v296 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v293);
        v164 = v270;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
        *(_WORD *)(v162 + 12) = 2082;
        sub_1000184A8(v265, (uint64_t)v294);
        sub_100671124((uint64_t)v294, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v166 = v165;
        v168 = v167;
        sub_100671124((uint64_t)v294, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v296 = (_QWORD *)sub_10001A820(v166, v168, (uint64_t *)&v293);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v164);
        swift_release_n(v143);
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 22) = 2114;
        v296 = v161;
        v169 = v161;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v164);
        v288 = (char *)v161;
        *v163 = v161;

        *(_WORD *)(v162 + 32) = 2112;
        v170 = objc_msgSend(v158, "objectID");
        v296 = v170;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v164);
        v256 = v163;
        v163[1] = v170;

        *(_WORD *)(v162 + 42) = 2082;
        v171 = 2;
        v296 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, 2, 0);
        v172 = v296;
        v173 = v296[2];
        v174 = 2 * v173;
        v175 = &byte_1007E0658;
        do
        {
          if (*v175)
            v176 = 6911093;
          else
            v176 = 0x44497463656A626FLL;
          if (*v175)
            v177 = 0xE300000000000000;
          else
            v177 = 0xE800000000000000;
          v296 = v172;
          v178 = v172[3];
          v179 = v173 + 1;
          if (v173 >= v178 >> 1)
          {
            sub_1001C1B0C(v178 > 1, v173 + 1, 1);
            v172 = v296;
          }
          v172[2] = v179;
          v180 = &v172[v174];
          v180[4] = v176;
          v180[5] = v177;
          v174 += 2;
          ++v175;
          v173 = v179;
          --v171;
        }
        while (v171);
        v181 = Array.description.getter(v172, &type metadata for String);
        v183 = v182;
        swift_bridgeObjectRelease();
        v296 = (_QWORD *)sub_10001A820(v181, v183, (uint64_t *)&v293);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 52) = 1024;
        v143 = v290;
        v184 = *(unsigned __int8 *)(v290 + 104);
        swift_release(v290);
        LODWORD(v296) = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v261);
        swift_release(v143);
        v185 = v276;
        _os_log_impl((void *)&_mh_execute_header, v276, (os_log_type_t)v274, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v162, 0x3Au);
        v186 = sub_10001A630((uint64_t *)&unk_100839E70);
        v187 = v256;
        swift_arrayDestroy(v256, 2, v186);
        swift_slowDealloc(v187, -1, -1);
        v188 = v275;
        swift_arrayDestroy(v275, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v188, -1, -1);
        swift_slowDealloc(v162, -1, -1);

        v18 = v278;
        v189 = v284;
        v19 = (uint64_t)v288;
      }
      else
      {

        swift_release_n(v143);
        v18 = v278;
        v189 = v284;
      }
      v190 = v289;
      sub_10019D13C(v189, v158);
      if (!v190)
      {
        v289 = 0;
        v191 = objc_msgSend(v158, "changedValues");
        v24 = (char *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v191, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        v192 = v264;
        swift_beginAccess(v264, &v293, 33, 0);
        v193 = (id)v19;
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v192);
        v296 = (_QWORD *)*v192;
        *v192 = 0x8000000000000000;
        sub_10028C70C((uint64_t)v24, v193, isUniquelyReferenced_nonNull_native);
        *v192 = v296;

        swift_bridgeObjectRelease();
        swift_endAccess(&v293);
        v195 = *(unsigned __int8 *)(v143 + 104);
        if (v287 && (v195 & 1) != 0)
        {
          v96 = v158;
          -[NSObject updateChangeCount](v96, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

LABEL_107:
          goto LABEL_135;
        }
        v196 = v193;
        swift_retain_n(v143);
        v6 = v143;
        v197 = v196;
        v198 = v158;
        swift_bridgeObjectRetain(v24);
        v200 = Logger.logObject.getter(v199);
        LODWORD(v256) = static os_log_type_t.default.getter(v200);
        if (!os_log_type_enabled(v200, (os_log_type_t)v256))
        {

          swift_bridgeObjectRelease_n(v24, 2);
          swift_release_n(v6);
          goto LABEL_135;
        }
        v252 = v200;
        v253 = v198;
        v201 = swift_slowAlloc(44, -1);
        v254 = (_QWORD *)swift_slowAlloc(8, -1);
        v250 = (_QWORD *)swift_slowAlloc(64, -1);
        v293 = v250;
        *(_DWORD *)v201 = v255.n128_u32[0];
        v296 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v293);
        v19 = (uint64_t)v270;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
        *(_WORD *)(v201 + 12) = 1024;
        swift_release(v6);
        LODWORD(v296) = v195;
        v202 = v261;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v261);
        swift_release(v6);
        *(_WORD *)(v201 + 18) = 1024;
        LODWORD(v296) = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v202);
        *(_WORD *)(v201 + 24) = 2114;
        v296 = v197;
        v5 = (uint64_t)v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v19);
        *v254 = v197;

        v249 = (id)v5;
        v251 = (uint8_t *)v201;
        *(_WORD *)(v201 + 34) = 2082;
        a1 = *((_QWORD *)v24 + 2);
        if (!a1)
        {
          v203 = _swiftEmptyArrayStorage;
LABEL_134:
          v219 = v251;
          v220 = Array.description.getter(v203, &type metadata for String);
          v222 = v221;
          swift_bridgeObjectRelease();
          v296 = (_QWORD *)sub_10001A820(v220, v222, (uint64_t *)&v293);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v270);
          swift_bridgeObjectRelease_n(v24, 2);
          swift_bridgeObjectRelease();
          v223 = v252;
          _os_log_impl((void *)&_mh_execute_header, v252, (os_log_type_t)v256, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v219, 0x2Cu);
          v224 = sub_10001A630((uint64_t *)&unk_100839E70);
          v225 = v254;
          swift_arrayDestroy(v254, 1, v224);
          swift_slowDealloc(v225, -1, -1);
          v226 = v250;
          swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v226, -1, -1);
          swift_slowDealloc(v219, -1, -1);

          v227 = v253;
          goto LABEL_135;
        }
        v296 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v24);
        sub_1001C1B0C(0, a1, 0);
        v203 = v296;
        v16 = sub_100658CFC((uint64_t)v24);
        v18 = v204;
        v205 = 0;
        v206 = (os_log_t)(v24 + 64);
        v207 = v24[32];
        v275 = v204;
        v248 = v24 + 88;
        v274 = a1;
        v276 = (os_log_t)(v24 + 64);
        while (2)
        {
          if (v16 < 0 || v16 >= 1 << v207)
            goto LABEL_145;
          v19 = (unint64_t)v16 >> 6;
          v5 = 1 << v16;
          if (((uint64_t)v206[(unint64_t)v16 >> 6].isa & (1 << v16)) == 0)
            goto LABEL_146;
          if (*((_DWORD *)v24 + 9) != (_DWORD)v18)
            goto LABEL_147;
          v210 = *((_QWORD *)v24 + 6) + 16 * v16;
          v211 = *(char **)v210;
          a1 = *(_QWORD *)(v210 + 8);
          v287 = (uint64_t)v205;
          v288 = v211;
          v296 = v203;
          v6 = v203[2];
          v212 = v203[3];
          swift_bridgeObjectRetain(a1);
          if (v6 >= v212 >> 1)
          {
            sub_1001C1B0C(v212 > 1, v6 + 1, 1);
            v203 = v296;
          }
          v203[2] = v6 + 1;
          v213 = &v203[2 * v6];
          v213[4] = v288;
          v213[5] = a1;
          v207 = v24[32];
          v208 = 1 << v207;
          if (v16 >= 1 << v207)
            goto LABEL_148;
          v206 = v276;
          v214 = v276[v19].isa;
          if (((unint64_t)v214 & v5) == 0)
            goto LABEL_149;
          if (*((_DWORD *)v24 + 9) != (_DWORD)v18)
            goto LABEL_150;
          v215 = (unint64_t)v214 & (-2 << (v16 & 0x3F));
          if (v215)
          {
            v208 = __clz(__rbit64(v215)) | v16 & 0xFFFFFFFFFFFFFFC0;
            a1 = v274;
            v209 = v287;
          }
          else
          {
            v216 = v19 + 1;
            v217 = (v208 + 63) >> 6;
            a1 = v274;
            v209 = v287;
            if (v19 + 1 < v217)
            {
              v218 = v276[v216].isa;
              if (v218)
                goto LABEL_125;
              v216 = v19 + 2;
              if (v19 + 2 < v217)
              {
                v218 = v276[v216].isa;
                if (v218)
                {
LABEL_125:
                  v208 = __clz(__rbit64((unint64_t)v218)) + (v216 << 6);
                }
                else
                {
                  while (v217 - 3 != v19)
                  {
                    v218 = *(Class *)&v248[8 * v19++];
                    if (v218)
                    {
                      v216 = v19 + 2;
                      goto LABEL_125;
                    }
                  }
                }
              }
            }
          }
          v205 = (void *)(v209 + 1);
          v18 = v275;
          v16 = v208;
          if (v205 == (void *)a1)
          {
            swift_bridgeObjectRelease();
            v18 = v278;
            goto LABEL_134;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  if (qword_100837928 != -1)
    goto LABEL_163;
LABEL_138:
  v228 = sub_10001AAA8(v272, (uint64_t)qword_1008508E0);
  v229 = Logger.logObject.getter(v228);
  v230 = static os_log_type_t.error.getter(v229);
  if (os_log_type_enabled(v229, v230))
  {
    v231 = swift_slowAlloc(22, -1);
    v232 = (_QWORD *)swift_slowAlloc(64, -1);
    v293 = v232;
    *(_DWORD *)v231 = v258.n128_u32[0];
    v233 = sub_1005A26D8(1);
    v296 = (_QWORD *)sub_10001A820(v233, v234, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    swift_bridgeObjectRelease();
    *(_WORD *)(v231 + 12) = 2082;
    v235 = sub_1005A26D8(v19);
    v296 = (_QWORD *)sub_10001A820(v235, v236, (uint64_t *)&v293);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v229, v230, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v231, 0x16u);
    swift_arrayDestroy(v232, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v232, -1, -1);
    swift_slowDealloc(v231, -1, -1);
  }

  v237 = (void *)objc_opt_self(REMError);
  v238 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v239 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8(v19);
  v240 = String._bridgeToObjectiveC()();
  objc_msgSend(v237, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v238, v239, v240, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v241);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1005EB3E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _WORD *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  id v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  id v70;
  BOOL v71;
  NSObject *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  Swift::OpaquePointer v92;
  id v93;
  unint64_t v94;
  char v95;
  _WORD *v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t *v100;
  id v101;
  uint64_t v102;
  _QWORD *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _OWORD v109[7];
  __n128 v110;
  char *v111;
  __n128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  NSObject *v119;
  unint64_t v120;
  uint64_t *v121;
  NSObject *v122;
  uint64_t v123;
  __n128 v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint8_t *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _WORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;

  v4 = v3;
  v133 = a2;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v130 = (char *)v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v109 - v10;
  v136 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v132 = (uint8_t *)v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v131 = (char *)v109 - v14;
  v15 = type metadata accessor for Logger(0);
  v127 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint8_t *)a3[2];
  v18 = (_WORD *)a3[3];
  v138 = a3;
  v128 = a3[4];
  v20 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v20 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v21 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v141 = v21;
  v23 = Logger.logObject.getter(v22);
  LODWORD(v137) = static os_log_type_t.info.getter(v23);
  v24 = os_log_type_enabled(v23, (os_log_type_t)v137);
  v25 = (unint64_t)a1 >> 62;
  v142 = a1;
  v129 = v11;
  v139 = (unint64_t)a1 >> 62;
  v123 = v15;
  v134 = v17;
  if (!v24)
  {

    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease_n(a1, 2);
    goto LABEL_8;
  }
  v126 = (uint64_t)v19;
  v19 = (uint8_t *)swift_slowAlloc(42, -1);
  v125 = (_QWORD *)swift_slowAlloc(96, -1);
  v143 = v125;
  *(_DWORD *)v19 = 136446978;
  v144 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v143);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
  *((_WORD *)v19 + 6) = 2048;
  if (v25)
    goto LABEL_76;
  v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(a1);
    v144 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
    swift_bridgeObjectRelease(a1);
    *((_WORD *)v19 + 11) = 2082;
    v27 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v144 = sub_10001A820(v29, v31, (uint64_t *)&v143);
    a1 = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
    swift_bridgeObjectRelease(v31);
    *((_WORD *)v19 + 16) = 2082;
    swift_bridgeObjectRetain(v18);
    v144 = sub_10001A820(v126, (unint64_t)v18, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v137, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", v19, 0x2Au);
    v32 = v125;
    swift_arrayDestroy(v125, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v25 = v139;
LABEL_8:
    v34 = v140;
    if (v25)
    {
      if (a1 < 0)
        v105 = a1;
      else
        v105 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v35 = _CocoaArrayWrapper.endIndex.getter(v105);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v35 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v35)
    {
      v43 = _swiftEmptyArrayStorage;
LABEL_21:
      v44 = *(_QWORD *)(v34 + 96);
      if (v44 <= 1)
      {
        if (v44)
        {
          if (v44 != 1)
            goto LABEL_81;
          swift_bridgeObjectRelease(v43);
          v60 = Logger.logObject.getter(v59);
          v61 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v60, v61))
          {
            v62 = (uint8_t *)swift_slowAlloc(12, -1);
            v63 = (_QWORD *)swift_slowAlloc(32, -1);
            v143 = v63;
            *(_DWORD *)v62 = 136315138;
            v137 = v62 + 4;
            v64 = objc_msgSend((id)objc_opt_self(REMCDHashtag), "cdEntityName");
            v19 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
            v66 = v65;

            a1 = v142;
            v144 = sub_10001A820((uint64_t)v19, v66, (uint64_t *)&v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
            v67 = v66;
            v25 = v139;
            swift_bridgeObjectRelease(v67);
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "Skipping fetch during upsert {CDType: %s}", v62, 0xCu);
            swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
            v34 = v140;
            swift_slowDealloc(v63, -1, -1);
            swift_slowDealloc(v62, -1, -1);
          }

          v18 = v138;
          v127 = sub_1002B06BC((uint64_t)_swiftEmptyArrayStorage);
          if (!v25)
          {
LABEL_33:
            v23 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v23)
            {
LABEL_67:
              swift_bridgeObjectRelease(a1);
              swift_bridgeObjectRelease(v127);
              return;
            }
LABEL_43:
            v69 = 0;
            v117 = v34 + 24;
            v118 = (char *)(v18 + 24);
            v116 = (char *)(v18 + 28);
            v120 = a1 & 0xC000000000000001;
            v115 = a1 & 0xFFFFFFFFFFFFFF8;
            v114 = a1 + 32;
            v121 = &v145;
            v113 = (char *)&v144 + 4;
            v58.n128_u64[0] = 136446978;
            v112 = v58;
            v58.n128_u64[0] = 136446210;
            v124 = v58;
            v58.n128_u64[0] = 136447490;
            v109[6] = v58;
            v58.n128_u64[0] = 136447234;
            v109[4] = v58;
            v58.n128_u64[0] = 136446466;
            v110 = v58;
            v111 = (char *)&type metadata for Any + 8;
            v119 = v23;
            while (1)
            {
              if (v120)
              {
                v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v69, a1);
                v71 = __OFADD__(v69, 1);
                v72 = ((char *)&v69->isa + 1);
                if (v71)
                  goto LABEL_75;
              }
              else
              {
                if ((unint64_t)v69 >= *(_QWORD *)(v115 + 16))
                {
                  __break(1u);
                  JUMPOUT(0x1005EDA40);
                }
                v70 = *(id *)(v114 + 8 * (_QWORD)v69);
                v71 = __OFADD__(v69, 1);
                v72 = ((char *)&v69->isa + 1);
                if (v71)
                  goto LABEL_75;
              }
              v73 = v70;
              v74 = sub_1005CCBAC(objc_msgSend(v73, "remObjectID"), (unint64_t *)&qword_10083DA60, off_1007D66C8);
              if (v4)
              {
                swift_bridgeObjectRelease(v142);
                swift_bridgeObjectRelease(v127);

                return;
              }
              v75 = v74;
              v122 = v72;
              v139 = 0;
              v134 = v73;

              v76 = objc_msgSend(*(id *)(v133 + 16), "uuid");
              v77 = v131;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

              v79 = UUID.uuidString.getter(v78);
              v81 = v80;
              v82 = *(void (**)(char *, uint64_t))(v135 + 8);
              v83 = v136;
              v82(v77, v136);
              v84 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
              v85 = objc_msgSend(v84, "uuid");

              v19 = v132;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

              v87 = UUID.uuidString.getter(v86);
              v89 = v88;
              v82((char *)v19, v83);
              if (v79 == v87 && v81 == v89)
              {
                swift_bridgeObjectRelease_n(v81, 2);
LABEL_55:
                __asm { BR              X10 }
              }
              v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v87, v89, 0);
              swift_bridgeObjectRelease(v89);
              swift_bridgeObjectRelease(v81);
              v91 = v127;
              if ((v90 & 1) != 0)
                goto LABEL_55;
              v92._rawValue = &off_1007DE238;
              v18 = (_WORD *)sub_1005CFB2C(v92, (unint64_t *)&qword_10083DA60, off_1007D66C8);
              if (!*(_QWORD *)(v91 + 16))
                break;
              v93 = v75;
              v94 = sub_1002C672C(v93);
              if ((v95 & 1) == 0)
              {

                break;
              }
              v96 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v94);

              v97 = v93;
              v98 = Logger.logObject.getter(v97);
              v99 = static os_log_type_t.info.getter(v98);
              if (os_log_type_enabled(v98, v99))
              {
                v18 = (_WORD *)swift_slowAlloc(22, -1);
                v19 = (uint8_t *)swift_slowAlloc(8, -1);
                v137 = (_QWORD *)swift_slowAlloc(32, -1);
                v143 = v137;
                *(_DWORD *)v18 = v110.n128_u32[0];
                v144 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v143);
                v138 = v96;
                v100 = v121;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v121);
                v18[6] = 2114;
                v144 = (uint64_t)v97;
                v101 = v97;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v100);
                *(_QWORD *)v19 = v97;

                _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v18, 0x16u);
                v102 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v19, 1, v102);
                swift_slowDealloc(v19, -1, -1);
                v103 = v137;
                swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v103, -1, -1);
                swift_slowDealloc(v18, -1, -1);

              }
              else
              {

              }
              a1 = v142;
              v23 = v119;
              v69 = v122;
              v4 = v139;
              if (v122 == v119)
                goto LABEL_67;
            }
            if (v18 != 4)
              JUMPOUT(0x1005EC1C4);
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v142);
            v104 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v75);
            swift_willThrow(v104);

            return;
          }
LABEL_39:
          if (a1 < 0)
            v68 = a1;
          else
            v68 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v23 = _CocoaArrayWrapper.endIndex.getter(v68);
          v58 = swift_bridgeObjectRelease(a1);
          if (!v23)
            goto LABEL_67;
          goto LABEL_43;
        }
      }
      else if ((unint64_t)(v44 - 2) >= 3 && v44 != 4499 && v44 != 4599)
      {
LABEL_81:
        (*(void (**)(id, uint64_t, uint64_t))(v127 + 16))(v134, v141, v123);
        v107 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v108 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v107, v108);
        __break(1u);
        JUMPOUT(0x1005EDAC0);
      }
      v46 = Logger.logObject.getter(v33);
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v137 = v43;
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = (_QWORD *)swift_slowAlloc(32, -1);
        v143 = v49;
        *(_DWORD *)v48 = 136315138;
        v134 = v48 + 4;
        v19 = (uint8_t *)objc_msgSend((id)objc_opt_self(REMCDHashtag), "cdEntityName");
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v52 = v51;

        v53 = v50;
        a1 = v142;
        v144 = sub_10001A820(v53, v52, (uint64_t *)&v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
        v54 = v52;
        v43 = v137;
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Performing fetch during upsert {CDType: %s}", v48, 0xCu);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        v55 = v49;
        v25 = v139;
        swift_slowDealloc(v55, -1, -1);
        v34 = v140;
        swift_slowDealloc(v48, -1, -1);
      }

      v18 = v138;
      sub_100644B10((uint64_t)v43, (uint64_t)v138);
      v57 = v56;
      v58 = swift_bridgeObjectRelease(v43);
      if (v4)
      {
        swift_bridgeObjectRelease(a1);
        return;
      }
      v127 = v57;
      if (!v25)
        goto LABEL_33;
      goto LABEL_39;
    }
    v143 = _swiftEmptyArrayStorage;
    v23 = &v143;
    specialized ContiguousArray.reserveCapacity(_:)(v35);
    if ((v35 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    if (a1 < 0)
      v106 = a1;
    else
      v106 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v26 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_bridgeObjectRelease(a1);
  }
  v36 = 0;
  while (1)
  {
    if (v35 == v36)
    {
      __break(1u);
      JUMPOUT(0x1005ED9ACLL);
    }
    v37 = (a1 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v142)
        : *(id *)(v142 + 8 * v36 + 32);
    v38 = v37;
    v39 = (uint8_t *)sub_1005CCBAC(objc_msgSend(v38, "remObjectID"), (unint64_t *)&qword_10083DA60, off_1007D66C8);
    if (v4)
      break;
    v19 = v39;
    ++v36;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v40);
    v41 = v143[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
    v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v19);
    v33 = specialized ContiguousArray._endMutation()(v42);
    if (v35 == v36)
    {
      a1 = v142;
      v43 = v143;
      v25 = v139;
      v34 = v140;
      goto LABEL_21;
    }
  }

  v45 = v143;
  swift_bridgeObjectRelease(v142);
  swift_release(v45);
}

void sub_1005EDB60(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  _BOOL4 v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject **v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject **v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  NSObject **v64;
  char *v65;
  NSObject *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  NSObject **v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  char *v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  id v99;
  id v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  _UNKNOWN **v108;
  Swift::OpaquePointer v109;
  char v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v123;
  void *v124;
  uint64_t v125;
  void *ObjCClassFromMetadata;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  Class isa;
  char *v138;
  id v139;
  char *v140;
  NSObject *v141;
  NSObject *v142;
  os_log_type_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char **v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  NSObject *v154;
  NSObject *v155;
  uint64_t v156;
  char **v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *i;
  char v163;
  NSObject *v164;
  os_log_type_t v165;
  uint64_t v166;
  NSObject **v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v172;
  NSObject *v173;
  char *v174;
  NSObject *v175;
  NSObject *v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  NSObject *v187;
  NSObject *v188;
  int64_t v189;
  uint64_t v190;
  NSObject *v191;
  Class v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  NSObject *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  os_log_t v205;
  uint64_t v206;
  NSObject *v207;
  NSObject **v208;
  char *v209;
  uint64_t v210;
  id v211;
  char *v212;
  NSObject **v213;
  char *v214;
  char isUniquelyReferenced_nonNull_native;
  int v216;
  char *v217;
  NSObject *v218;
  uint64_t v219;
  NSObject *v220;
  _BOOL4 v221;
  uint64_t v222;
  uint64_t *v223;
  char *v224;
  NSObject *v225;
  int64_t v226;
  uint64_t v227;
  char *v228;
  unsigned int v229;
  unsigned int v230;
  char *v231;
  NSObject *v232;
  unint64_t v233;
  char *v234;
  unint64_t v235;
  uint64_t v236;
  objc_class *v237;
  unint64_t v238;
  char *v239;
  NSObject *v240;
  Class v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint8_t *v246;
  uint64_t v247;
  char *v248;
  os_log_t v249;
  uint64_t v250;
  NSObject **v251;
  NSObject **v252;
  NSObject *v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  os_log_type_t v257;
  uint64_t v258;
  NSObject **v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  NSObject *v264;
  void *v265;
  NSString v266;
  NSString v267;
  NSString v268;
  uint64_t v269;
  void *v270;
  char *v271;
  id *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  NSObject *v278;
  NSObject **v279;
  uint8_t *v280;
  os_log_t v281;
  NSObject *v282;
  NSObject **v283;
  uint64_t v284;
  __n128 v285;
  char *v286;
  __n128 v287;
  __n128 v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  NSObject *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  NSObject **v296;
  unint64_t v297;
  uint64_t *v298;
  void *v299;
  os_log_t v300;
  NSObject *v301;
  NSObject *v302;
  __n128 v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  id v310;
  char *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  char *v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint8_t *v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD v322[4];
  NSObject **v323;
  char v324[8];
  char v325[8];
  char v326;
  char v327;
  NSObject *v328;
  uint64_t v329;
  uint64_t v330;

  v319 = (uint8_t *)a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v312 = (uint64_t)&v277 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v311 = (char *)&v277 - v9;
  v318 = type metadata accessor for UUID(0);
  v314 = *(_QWORD *)(v318 - 8);
  __chkstk_darwin(v318);
  v313 = (char *)&v277 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v277 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v277 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *((_QWORD *)a3 + 3);
  v315 = (char *)*((_QWORD *)a3 + 2);
  v310 = (id)*((_QWORD *)a3 + 4);
  v320 = v3;
  v19 = *(char **)(v3 + 72);
  v316 = a2;
  v322[3] = v19;
  v323 = (NSObject **)a2;
  v322[2] = &v323;
  swift_bridgeObjectRetain(v18);
  v20 = (uint64_t)v319;
  swift_bridgeObjectRetain(v319);
  v21 = v20;
  v22 = v321;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673778, v322, v21);
  if (v22)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v319 = 0;
  v303.n128_u64[0] = v15;
  v304 = (unint64_t)v17;
  v306 = a3;
  v321 = v23;
  v305 = v19;
  v307 = v13;
  v308 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_161;
  while (1)
  {
    v24 = sub_10001AAA8(v308, (uint64_t)qword_100845DC0);
    v25 = (uint64_t)v321;
    swift_bridgeObjectRetain_n(v321, 2);
    swift_bridgeObjectRetain(v18);
    v317 = v24;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter(v27);
    v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
    v30 = (char *)((unint64_t)v25 >> 62);
    v31 = v320;
    v309 = (char *)((unint64_t)v25 >> 62);
    if (v29)
    {
      v19 = (char *)swift_slowAlloc(42, -1);
      v32 = swift_slowAlloc(96, -1);
      v323 = (NSObject **)v32;
      *(_DWORD *)v19 = 136446978;
      v328 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
      *((_WORD *)v19 + 6) = 2048;
      LODWORD(v302) = v28;
      v301 = v32;
      v33 = (uint64_t)&v330;
      if (v30)
        goto LABEL_173;
      v34 = (uint64_t)v319;
      v35 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v328 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
      swift_bridgeObjectRelease();
      *((_WORD *)v19 + 11) = 2082;
      v36 = type metadata accessor for REMCDManualSortHint();
      v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v328 = sub_10001A820(v38, v40, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
      v25 = (uint64_t)v321;
      swift_bridgeObjectRelease();
      *((_WORD *)v19 + 16) = 2082;
      swift_bridgeObjectRetain(v18);
      v328 = sub_10001A820((uint64_t)v315, v18, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v302, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v19, 0x2Au);
      v41 = v301;
      swift_arrayDestroy(v301, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v31 = v320;
      v30 = v309;
    }
    else
    {
      v34 = (uint64_t)v319;

      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v25, 2);
    }
    if (v30)
    {
      v273 = v25 < 0 ? v25 : v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v42 = _CocoaArrayWrapper.endIndex.getter(v273);
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v42)
      break;
    v323 = (NSObject **)_swiftEmptyArrayStorage;
    v27 = &v323;
    specialized ContiguousArray.reserveCapacity(_:)(v42);
    if (v42 < 0)
      goto LABEL_172;
    v43 = 0;
    v44 = v25 & 0xC000000000000001;
    v18 = (unint64_t)type metadata accessor for REMCDManualSortHint;
    while (v42 != v43)
    {
      if (v44)
        v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v25);
      else
        v45 = *(id *)(v25 + 8 * v43 + 32);
      v46 = v45;
      v47 = (char *)sub_1005CDB68(objc_msgSend(v46, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);
      if (v34)
      {

        v54 = v323;
        swift_bridgeObjectRelease();
        swift_release(v54);
        return;
      }
      v19 = v47;
      ++v43;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
      v49 = v323[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
      v50 = v49;
      v25 = (uint64_t)v321;
      v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v19);
      specialized ContiguousArray._endMutation()(v51);
      if (v42 == v43)
      {
        v52 = (uint8_t *)v323;
        v31 = v320;
        v30 = v309;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_161:
    swift_once(&qword_1008371E8, sub_100331650);
  }
  v52 = (uint8_t *)_swiftEmptyArrayStorage;
LABEL_22:
  v53 = *(_QWORD *)(v31 + 96);
  if (v53 > 1)
  {
    if ((unint64_t)(v53 - 2) >= 3 && v53 != 4499 && v53 != 4599)
    {
LABEL_180:
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v303.n128_u64[0] + 16))(v304, v317, v308);
      v275 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v276 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v275, v276);
      __break(1u);
      JUMPOUT(0x1005F001CLL);
    }
LABEL_29:
    v319 = v52;
    v55 = v30;
    v56 = Logger.logObject.getter(v52);
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (NSObject **)swift_slowAlloc(32, -1);
      v323 = v59;
      *(_DWORD *)v58 = 136315138;
      v315 = (char *)(v58 + 4);
      v60 = objc_msgSend((id)type metadata accessor for REMCDManualSortHint(), "cdEntityName");
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      v328 = sub_10001A820(v61, v63, (uint64_t *)&v323);
      v25 = (uint64_t)v321;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
      v31 = v320;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Performing fetch during upsert {CDType: %s}", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      v64 = v59;
      v55 = v309;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }

    v65 = v307;
    v66 = v306;
    sub_100644F30((uint64_t)v319, (uint64_t)v306);
    v68 = v67;
    v69 = v34;
    v70 = swift_bridgeObjectRelease();
    if (v34)
      goto LABEL_2;
    v304 = v68;
    if (!v55)
      goto LABEL_33;
    goto LABEL_39;
  }
  if (!v53)
    goto LABEL_29;
  if (v53 != 1)
    goto LABEL_180;
  v73 = v30;
  swift_bridgeObjectRelease();
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = (NSObject **)swift_slowAlloc(32, -1);
    v323 = v78;
    *(_DWORD *)v77 = 136315138;
    v319 = v77 + 4;
    v79 = objc_msgSend((id)type metadata accessor for REMCDManualSortHint(), "cdEntityName");
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v82 = v81;

    v328 = sub_10001A820(v80, v82, (uint64_t *)&v323);
    v73 = v309;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
    v25 = (uint64_t)v321;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Skipping fetch during upsert {CDType: %s}", v77, 0xCu);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);
  }

  v65 = v307;
  v66 = v306;
  v304 = sub_1002B07EC((uint64_t)_swiftEmptyArrayStorage);
  v69 = v34;
  v31 = v320;
  if (!v73)
  {
LABEL_33:
    v71 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    v72 = v69;
    if (!v71)
    {
LABEL_149:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_43;
  }
LABEL_39:
  if (v25 < 0)
    v83 = v25;
  else
    v83 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v71 = _CocoaArrayWrapper.endIndex.getter(v83);
  v70 = swift_bridgeObjectRelease();
  v72 = v69;
  if (!v71)
    goto LABEL_149;
LABEL_43:
  v84 = 0;
  v293 = v31 + 24;
  v292 = v66 + 6;
  v296 = (NSObject **)&v66[7];
  v85 = v25 & 0xC000000000000001;
  v291 = v25 & 0xFFFFFFFFFFFFFF8;
  v290 = v25 + 32;
  v298 = &v329;
  v289 = (char *)&v328 + 4;
  v299 = (void *)0x8000000100709CB0;
  v70.n128_u64[0] = 136446978;
  v287 = v70;
  v70.n128_u64[0] = 136446210;
  v303 = v70;
  v70.n128_u64[0] = 136447490;
  v288 = v70;
  v70.n128_u64[0] = 136447234;
  v285 = v70;
  v286 = (char *)&type metadata for Any + 8;
  v86 = v316;
  v294 = v25 & 0xC000000000000001;
  v87 = v318;
  v295 = v71;
  while (1)
  {
    if (v85)
    {
      v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v84, v25);
    }
    else
    {
      if (v84 >= *(_QWORD *)(v291 + 16))
        goto LABEL_178;
      v88 = *(id *)(v290 + 8 * v84);
    }
    v297 = v84 + 1;
    if (__OFADD__(v84, 1))
      break;
    v89 = (char *)v88;
    v90 = objc_msgSend(v89, "remObjectID");
    v309 = (char *)sub_1005CDB68(v90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, v299);
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v319 = 0;
    v306 = v89;

    v91 = objc_msgSend((id)v86[2], "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v91);

    v93 = UUID.uuidString.getter(v92);
    v94 = v65;
    v95 = v93;
    v97 = v96;
    v98 = *(void (**)(char *, uint64_t))(v314 + 8);
    v98(v94, v87);
    v99 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v100 = objc_msgSend(v99, "uuid");

    v101 = v313;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v100);

    v103 = UUID.uuidString.getter(v102);
    v105 = v104;
    v315 = (char *)v98;
    v98(v101, v87);
    if (v95 == v103 && v97 == v105)
    {
      swift_bridgeObjectRelease_n(v97, 2);
LABEL_54:
      __asm { BR              X10 }
    }
    v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v103, v105, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v106 & 1) != 0)
      goto LABEL_54;
    v107 = (uint64_t)v319;
    v108 = sub_10065B89C(v306, (uint64_t)v305);
    if (v107)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v272 = (id *)&v327;
      goto LABEL_155;
    }
    v25 = (uint64_t)v108;
    v319 = 0;
    v109._rawValue = &off_1007DE8F8;
    v110 = sub_1005D0484(v109, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint);
    if (*(_QWORD *)(v304 + 16))
    {
      v111 = v309;
      v112 = v304;
      v113 = sub_1002C672C(v111);
      if ((v114 & 1) != 0)
      {
        v302 = *(id *)(*(_QWORD *)(v112 + 56) + 8 * v113);
        v115 = v320;
        goto LABEL_89;
      }

    }
    if (v110 == 2 || (v116 = *(_QWORD *)(v25 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_154:
      v270 = (void *)objc_opt_self(REMError);
      v271 = v309;
      swift_willThrow(objc_msgSend(v270, "noSuchObjectErrorWithObjectID:", v309));

      v272 = (id *)&v326;
LABEL_155:

      return;
    }
    if ((v110 & 1) != 0)
      v117 = 0x6465696669646F6DLL;
    else
      v117 = 0x44497463656A626FLL;
    if ((v110 & 1) != 0)
      v118 = 0xEC00000065746144;
    else
      v118 = 0xE800000000000000;
    swift_bridgeObjectRetain(v25);
    v119 = 0;
    while (1)
    {
      v120 = *(_BYTE *)(v25 + v119 + 32) ? 0x6465696669646F6DLL : 0x44497463656A626FLL;
      v121 = *(_BYTE *)(v25 + v119 + 32) ? 0xEC00000065746144 : 0xE800000000000000;
      if (v120 == v117 && v121 == v118)
        break;
      v123 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v121, v117, v118, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v123 & 1) != 0)
        goto LABEL_83;
      if (v116 == ++v119)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v25, 2);
        goto LABEL_154;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_83:
    swift_bridgeObjectRelease();
    v124 = *(void **)(v320 + 88);
    v125 = type metadata accessor for REMCDManualSortHint();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v125);
    v127 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v128 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v127, v124);
    v129 = v310;
    v130 = v128;
    objc_msgSend(v124, "assignObject:toPersistentStore:", v130, v129);

    v131 = v130;
    v132 = objc_msgSend(v309, "uuid");
    v133 = (uint64_t)v311;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v132);

    v134 = v314;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v314 + 56))(v133, 0, 1, v87);
    v135 = v312;
    sub_10011D420(v133, v312);
    v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v135, 1, v87);
    isa = 0;
    if (v136 != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v315)(v135, v87);
    }
    objc_msgSend(v131, "setIdentifier:", isa, v277);

    sub_10011E85C(v133);
    v138 = v309;
    v115 = v320;
    swift_retain_n(v320);
    v139 = v131;
    v140 = v138;
    v141 = v139;
    v142 = Logger.logObject.getter(v141);
    v143 = static os_log_type_t.default.getter(v142);
    v144 = v143;
    if (os_log_type_enabled(v142, v143))
    {
      v145 = swift_slowAlloc(42, -1);
      v302 = v142;
      v146 = v145;
      v147 = (char **)swift_slowAlloc(16, -1);
      v315 = (char *)swift_slowAlloc(64, -1);
      v323 = (NSObject **)v315;
      *(_DWORD *)v146 = v287.n128_u32[0];
      LODWORD(v301) = v144;
      v328 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v323);
      v148 = v298;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v298);
      *(_WORD *)(v146 + 12) = 2082;
      sub_1000184A8(v293, (uint64_t)v325);
      sub_100671124((uint64_t)v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v150 = v149;
      v152 = v151;
      sub_100671124((uint64_t)v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v328 = sub_10001A820(v150, v152, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v148);
      swift_release_n(v320);
      swift_bridgeObjectRelease();
      *(_WORD *)(v146 + 22) = 2114;
      v328 = v140;
      v153 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v148);
      *v147 = v140;

      *(_WORD *)(v146 + 32) = 2112;
      v154 = -[NSObject objectID](v141, "objectID");
      v328 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v148);
      v147[1] = (char *)v154;
      v115 = v320;

      v155 = v302;
      _os_log_impl((void *)&_mh_execute_header, v302, (os_log_type_t)v301, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v146, 0x2Au);
      v156 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v147, 2, v156);
      v157 = v147;
      v87 = v318;
      swift_slowDealloc(v157, -1, -1);
      v158 = v315;
      swift_arrayDestroy(v315, 2, v286);
      swift_slowDealloc(v158, -1, -1);
      swift_slowDealloc(v146, -1, -1);

    }
    else
    {

      swift_release_n(v115);
    }
    swift_beginAccess(v292, &v323, 33, 0);
    v159 = v140;
    v302 = v141;
    sub_1001912EC((uint64_t)v141, (uint64_t)v159);
    swift_endAccess(&v323);
LABEL_89:

    v160 = *(char **)(v25 + 16);
    v315 = v160;
    if (!v160)
      goto LABEL_101;
    swift_bridgeObjectRetain(v25);
    for (i = 0; i != v160; ++i)
    {
      if (((*(unsigned int *)(v115 + 64) | ((unint64_t)*(unsigned __int16 *)(v115 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v163 = i[v25 + 32];
        v164 = Logger.logObject.getter(v161);
        v165 = static os_log_type_t.error.getter(v164);
        if (os_log_type_enabled(v164, v165))
        {
          v166 = swift_slowAlloc(12, -1);
          v167 = (NSObject **)swift_slowAlloc(32, -1);
          v323 = v167;
          *(_DWORD *)v166 = v303.n128_u32[0];
          LOBYTE(v328) = v163;
          v168 = String.init<A>(describing:)(&v328, &type metadata for REMManualOrderingCDIngestor.ValueKey);
          *(_QWORD *)(v166 + 4) = sub_10001A820(v168, v169, (uint64_t *)&v323);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v164, v165, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v166, 0xCu);
          swift_arrayDestroy(v167, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v167, -1, -1);
          v170 = v166;
          v115 = v320;
          swift_slowDealloc(v170, -1, -1);
        }

        v160 = v315;
      }
      LODWORD(v66) = *(_DWORD *)(v115 + 64);
      if (*(unsigned __int16 *)(v115 + 68) >> 14 == 2 && (*(_DWORD *)(v115 + 64) & 1) == 0)
      {
        v254 = v308;
        if (qword_100837928 == -1)
          goto LABEL_151;
        goto LABEL_179;
      }
    }
    swift_bridgeObjectRelease();
    v87 = v318;
LABEL_101:
    swift_retain_n(v115);
    v172 = v309;
    swift_bridgeObjectRetain_n(v25, 2);
    v173 = v302;
    v174 = v172;
    v175 = v173;
    v176 = Logger.logObject.getter(v175);
    v177 = static os_log_type_t.default.getter(v176);
    v178 = os_log_type_enabled(v176, (os_log_type_t)v177);
    v309 = v174;
    if (v178)
    {
      LODWORD(v282) = v177;
      v300 = v176;
      v179 = swift_slowAlloc(58, -1);
      v302 = swift_slowAlloc(16, -1);
      v283 = (NSObject **)swift_slowAlloc(96, -1);
      v323 = v283;
      *(_DWORD *)v179 = v288.n128_u32[0];
      v328 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v323);
      v180 = v298;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v298);
      *(_WORD *)(v179 + 12) = 2082;
      sub_1000184A8(v293, (uint64_t)v324);
      sub_100671124((uint64_t)v324, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v182 = v181;
      v183 = v115;
      v185 = v184;
      sub_100671124((uint64_t)v324, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v328 = sub_10001A820(v182, v185, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v180);
      swift_release_n(v183);
      swift_bridgeObjectRelease();
      *(_WORD *)(v179 + 22) = 2114;
      v328 = v174;
      v186 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v180);
      v187 = v302;
      v302->isa = (Class)v174;

      *(_WORD *)(v179 + 32) = 2112;
      v188 = -[NSObject objectID](v175, "objectID");
      v328 = v188;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v180);
      v187[1].isa = (Class)v188;

      v301 = v175;
      v284 = v179;
      *(_WORD *)(v179 + 42) = 2082;
      v189 = *(_QWORD *)(v25 + 16);
      if (v189)
      {
        v328 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v189, 0);
        v190 = 0;
        v191 = v328;
        v192 = v328[2].isa;
        v193 = 2 * (_QWORD)v192;
        do
        {
          v194 = (unint64_t)v192 + v190;
          if (*(_BYTE *)(v25 + v190 + 32))
            v195 = 0x6465696669646F6DLL;
          else
            v195 = 0x44497463656A626FLL;
          if (*(_BYTE *)(v25 + v190 + 32))
            v196 = 0xEC00000065746144;
          else
            v196 = 0xE800000000000000;
          v328 = v191;
          v197 = (unint64_t)v191[3].isa;
          v198 = v194 + 1;
          if (v194 >= v197 >> 1)
          {
            sub_1001C1B0C(v197 > 1, v194 + 1, 1);
            v191 = v328;
          }
          ++v190;
          v191[2].isa = (Class)v198;
          v199 = &v191[v193];
          v199[4].isa = (Class)v195;
          v199[5].isa = (Class)v196;
          v193 += 2;
        }
        while (v189 != v190);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v191 = _swiftEmptyArrayStorage;
      }
      v87 = v318;
      v200 = v284;
      v201 = Array.description.getter(v191, &type metadata for String);
      v203 = v202;
      swift_bridgeObjectRelease();
      v328 = sub_10001A820(v201, v203, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v298);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v200 + 52) = 1024;
      v115 = v320;
      v204 = *(unsigned __int8 *)(v320 + 104);
      swift_release(v320);
      LODWORD(v328) = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v289);
      swift_release(v115);
      v205 = v300;
      _os_log_impl((void *)&_mh_execute_header, v300, (os_log_type_t)v282, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v200, 0x3Au);
      v206 = sub_10001A630((uint64_t *)&unk_100839E70);
      v207 = v302;
      swift_arrayDestroy(v302, 2, v206);
      swift_slowDealloc(v207, -1, -1);
      v208 = v283;
      swift_arrayDestroy(v283, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      swift_slowDealloc(v200, -1, -1);

      v175 = v301;
    }
    else
    {

      swift_release_n(v115);
      swift_bridgeObjectRelease_n(v25, 2);
    }
    v209 = v306;
    v210 = (uint64_t)v319;
    sub_10040F4D4(v306, (char *)v175);
    if (v210)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v319 = 0;
    v211 = -[NSObject changedValues](v175, "changedValues");
    v212 = (char *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v211, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v213 = v296;
    swift_beginAccess(v296, &v323, 33, 0);
    v214 = v309;
    swift_bridgeObjectRetain(v212);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v213);
    v328 = *v213;
    *v213 = 0x8000000000000000;
    v309 = v212;
    sub_10028C70C((uint64_t)v212, v214, isUniquelyReferenced_nonNull_native);
    *v213 = v328;

    swift_bridgeObjectRelease();
    swift_endAccess(&v323);
    v216 = *(unsigned __int8 *)(v115 + 104);
    v66 = v175;
    swift_bridgeObjectRelease();
    if (v315 && (v216 & 1) != 0)
    {
      -[NSObject updateChangeCount](v66, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      v25 = (uint64_t)v321;
      goto LABEL_148;
    }
    v217 = v214;
    swift_retain_n(v115);
    v218 = v217;
    v19 = v309;
    swift_bridgeObjectRetain(v309);
    v220 = Logger.logObject.getter(v219);
    LODWORD(v284) = static os_log_type_t.default.getter(v220);
    v221 = os_log_type_enabled(v220, (os_log_type_t)v284);
    v25 = (uint64_t)v321;
    v18 = 1;
    if (v221)
    {
      v281 = v220;
      v282 = v66;
      v222 = swift_slowAlloc(44, -1);
      v283 = (NSObject **)swift_slowAlloc(8, -1);
      v279 = (NSObject **)swift_slowAlloc(64, -1);
      v323 = v279;
      *(_DWORD *)v222 = v285.n128_u32[0];
      v328 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v323);
      v223 = v298;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v298);
      v25 = 1024;
      *(_WORD *)(v222 + 12) = 1024;
      swift_release(v115);
      LODWORD(v328) = v216;
      v224 = v289;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v289);
      swift_release(v115);
      *(_WORD *)(v222 + 18) = 1024;
      LODWORD(v328) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v224);
      *(_WORD *)(v222 + 24) = 2114;
      v328 = v218;
      v225 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v223);
      *v283 = v218;

      v278 = v225;
      v280 = (uint8_t *)v222;
      *(_WORD *)(v222 + 34) = 2082;
      v226 = *((_QWORD *)v19 + 2);
      if (v226)
      {
        v328 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v309);
        sub_1001C1B0C(0, v226, 0);
        v27 = v328;
        v227 = sub_100658CFC((uint64_t)v309);
        v228 = v309;
        v230 = v229;
        v231 = 0;
        v232 = (v309 + 64);
        v33 = v309[32];
        v300 = (os_log_t)v229;
        v277 = v309 + 88;
        v301 = v226;
        v302 = (v309 + 64);
        while (1)
        {
          if (v227 < 0 || (v33 = 1 << v33, v227 >= v33))
          {
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            v34 = *(_QWORD *)(v33 - 256);
            if (v25 < 0)
              v274 = v25;
            else
              v274 = v25 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v25);
            v35 = _CocoaArrayWrapper.endIndex.getter(v274);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v235 = (unint64_t)v227 >> 6;
          v33 = (uint64_t)v232[(unint64_t)v227 >> 6].isa;
          if ((v33 & (1 << v227)) == 0)
            goto LABEL_167;
          v33 = *((unsigned int *)v228 + 9);
          if ((_DWORD)v33 != v230)
            goto LABEL_168;
          v309 = v231;
          v236 = *((_QWORD *)v228 + 6) + 16 * v227;
          v237 = *(objc_class **)(v236 + 8);
          v315 = *(char **)v236;
          v328 = v27;
          v25 = (uint64_t)v27[2].isa;
          v238 = (unint64_t)v27[3].isa;
          v19 = (char *)(v25 + 1);
          v239 = v228;
          swift_bridgeObjectRetain(v237);
          if (v25 >= v238 >> 1)
          {
            sub_1001C1B0C(v238 > 1, v25 + 1, 1);
            v27 = v328;
          }
          v27[2].isa = (Class)v19;
          v240 = &v27[2 * v25];
          v240[4].isa = (Class)v315;
          v240[5].isa = v237;
          v33 = v239[32];
          v18 = 1;
          v233 = 1 << v33;
          if (v227 >= 1 << v33)
            goto LABEL_169;
          v232 = v302;
          v241 = v302[v235].isa;
          if (((unint64_t)v241 & (1 << v227)) == 0)
            goto LABEL_170;
          v228 = v239;
          if (*((_DWORD *)v239 + 9) != v230)
            goto LABEL_171;
          v242 = (unint64_t)v241 & (-2 << (v227 & 0x3F));
          if (v242)
          {
            v233 = __clz(__rbit64(v242)) | v227 & 0xFFFFFFFFFFFFFFC0;
            v25 = (uint64_t)v321;
            v87 = v318;
            v234 = (char *)v301;
          }
          else
          {
            v243 = v235 + 1;
            v244 = (v233 + 63) >> 6;
            v25 = (uint64_t)v321;
            v87 = v318;
            v234 = (char *)v301;
            if (v235 + 1 < v244)
            {
              v245 = (unint64_t)v302[v243].isa;
              if (!v245)
              {
                v243 = v235 + 2;
                if (v235 + 2 >= v244)
                  goto LABEL_125;
                v245 = (unint64_t)v302[v243].isa;
                if (!v245)
                {
                  while (v244 - 3 != v235)
                  {
                    v245 = *(_QWORD *)&v277[8 * v235++];
                    if (v245)
                    {
                      v243 = v235 + 2;
                      goto LABEL_138;
                    }
                  }
                  goto LABEL_125;
                }
              }
LABEL_138:
              v233 = __clz(__rbit64(v245)) + (v243 << 6);
            }
          }
LABEL_125:
          v231 = v309 + 1;
          v230 = v300;
          v227 = v233;
          if (v309 + 1 == v234)
          {
            v19 = v228;
            swift_bridgeObjectRelease();
            goto LABEL_147;
          }
        }
      }
      v27 = _swiftEmptyArrayStorage;
      v25 = (uint64_t)v321;
      v87 = v318;
LABEL_147:
      v246 = v280;
      v247 = Array.description.getter(v27, &type metadata for String);
      v66 = v248;
      swift_bridgeObjectRelease();
      v328 = sub_10001A820(v247, (unint64_t)v66, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, v298);
      swift_bridgeObjectRelease_n(v19, 2);
      swift_bridgeObjectRelease();
      v249 = v281;
      _os_log_impl((void *)&_mh_execute_header, v281, (os_log_type_t)v284, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v246, 0x2Cu);
      v250 = sub_10001A630((uint64_t *)&unk_100839E70);
      v251 = v283;
      swift_arrayDestroy(v283, 1, v250);
      swift_slowDealloc(v251, -1, -1);
      v252 = v279;
      swift_arrayDestroy(v279, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v252, -1, -1);
      swift_slowDealloc(v246, -1, -1);

      v253 = v282;
    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      swift_release_n(v115);
    }
LABEL_148:
    v84 = v297;
    v72 = (uint64_t)v319;
    v86 = v316;
    v65 = v307;
    v85 = v294;
    if (v297 == v295)
      goto LABEL_149;
  }
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  swift_once(&qword_100837928, sub_1005A2648);
  v254 = v308;
LABEL_151:
  v255 = sub_10001AAA8(v254, (uint64_t)qword_1008508E0);
  v256 = Logger.logObject.getter(v255);
  v257 = static os_log_type_t.error.getter(v256);
  if (os_log_type_enabled(v256, v257))
  {
    v258 = swift_slowAlloc(22, -1);
    v259 = (NSObject **)swift_slowAlloc(64, -1);
    v323 = v259;
    *(_DWORD *)v258 = 136446466;
    v260 = sub_1005A26D8(1);
    v328 = sub_10001A820(v260, v261, (uint64_t *)&v323);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
    swift_bridgeObjectRelease();
    *(_WORD *)(v258 + 12) = 2082;
    v262 = sub_1005A26D8((__int16)v66);
    v328 = sub_10001A820(v262, v263, (uint64_t *)&v323);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &v329);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v256, v257, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v258, 0x16u);
    swift_arrayDestroy(v259, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v259, -1, -1);
    swift_slowDealloc(v258, -1, -1);
  }

  v264 = v302;
  v265 = (void *)objc_opt_self(REMError);
  v266 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v267 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8((__int16)v66);
  v268 = String._bridgeToObjectiveC()();
  objc_msgSend(v265, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v266, v267, v268, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v269);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n(v25, 2);
}

void sub_1005F002C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  id v70;
  BOOL v71;
  NSObject *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  Swift::OpaquePointer v91;
  char v92;
  id v93;
  unint64_t v94;
  char v95;
  id v96;
  _QWORD *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  void *v104;
  uint64_t v105;
  void *ObjCClassFromMetadata;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  Class isa;
  uint64_t v118;
  id v119;
  int64_t v120;
  id v121;
  _QWORD *v122;
  _QWORD *v123;
  NSObject *v124;
  os_log_type_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  id v152;
  _QWORD *v153;
  _QWORD *v154;
  NSObject *v155;
  NSObject *v156;
  int v157;
  BOOL v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  NSObject *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  void *v186;
  unint64_t v187;
  id v188;
  _QWORD *v189;
  _QWORD *v190;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v192;
  int v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  NSObject *v197;
  uint64_t v198;
  NSObject *v199;
  int v200;
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  void *v204;
  NSObject *v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  Class v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  os_log_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  NSObject *v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  NSString v237;
  NSString v238;
  NSString v239;
  uint64_t v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  int v249;
  _QWORD *v250;
  uint8_t *v251;
  os_log_t v252;
  NSObject *v253;
  __n128 v254;
  _QWORD *v255;
  __n128 v256;
  __n128 v257;
  char *v258;
  __n128 v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  unint64_t v267;
  uint64_t *v268;
  NSObject *v269;
  unint64_t v270;
  __n128 v271;
  int64_t v272;
  uint64_t v273;
  NSObject *v274;
  unint64_t v275;
  id v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  int64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  char v292[8];
  char v293[8];
  _QWORD *v294;
  uint64_t v295;

  v5 = v4;
  v6 = v3;
  v280 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v277 = (uint64_t)&v246 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v282 = (uint64_t)&v246 - v12;
  v284 = type metadata accessor for UUID(0);
  v283 = *(_QWORD *)(v284 - 8);
  __chkstk_darwin(v284);
  v279 = (char *)&v246 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v278 = (char *)&v246 - v15;
  v16 = type metadata accessor for Logger(0);
  v275 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (uint64_t)&v246 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a3[2];
  v19 = a3[3];
  v286 = a3;
  v276 = (id)a3[4];
  v21 = qword_1008371E8;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(a1);
  if (v21 != -1)
    goto LABEL_151;
LABEL_2:
  v22 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v19);
  v289 = v22;
  v24 = Logger.logObject.getter(v23);
  LODWORD(v285) = static os_log_type_t.info.getter(v24);
  v25 = os_log_type_enabled(v24, (os_log_type_t)v285);
  v26 = (unint64_t)a1 >> 62;
  v290 = a1;
  v287 = (unint64_t)a1 >> 62;
  v288 = v6;
  v270 = v16;
  v281 = (void *)v18;
  if (v25)
  {
    v274 = v20;
    v20 = swift_slowAlloc(42, -1);
    v273 = swift_slowAlloc(96, -1);
    v291 = (_QWORD *)v273;
    *(_DWORD *)v20 = 136446978;
    v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    *(_WORD *)(v20 + 12) = 2048;
    if (!v26)
    {
      v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_158;
  }

  swift_bridgeObjectRelease_n(v19, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v26)
    {
      v242 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v18 = _CocoaArrayWrapper.endIndex.getter(v242);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v18)
      break;
    v291 = _swiftEmptyArrayStorage;
    v24 = &v291;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = 0;
      v16 = a1 & 0xC000000000000001;
      a1 = (uint64_t)&qword_100840C00;
      while (v18 != v19)
      {
        if (v16)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v290);
        else
          v35 = *(id *)(v290 + 8 * v19 + 32);
        v36 = v35;
        v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), &qword_100840C00, off_1007D6688);
        if (v5)
        {

          v43 = v291;
          swift_bridgeObjectRelease();
          swift_release(v43);
          return;
        }
        v20 = (uint64_t)v37;
        ++v19;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v6 = v291[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v20);
        v34 = specialized ContiguousArray._endMutation()(v39);
        if (v18 == v19)
        {
          a1 = v290;
          v40 = v291;
          v26 = v287;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    if (a1 < 0)
      v243 = a1;
    else
      v243 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v243);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v294 = (_QWORD *)v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    v28 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33 = v30;
    a1 = v290;
    v294 = (_QWORD *)sub_10001A820(v33, v32, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2082;
    swift_bridgeObjectRetain(v19);
    v294 = (_QWORD *)sub_10001A820((uint64_t)v274, v19, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v285, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v20, 0x2Au);
    v6 = v273;
    swift_arrayDestroy(v273, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v26 = v287;
  }
  v40 = _swiftEmptyArrayStorage;
LABEL_20:
  v41 = v288;
  v42 = *(_QWORD *)(v288 + 96);
  if (v42 > 1)
  {
    if ((unint64_t)(v42 - 2) >= 3 && v42 != 4499 && v42 != 4599)
    {
LABEL_164:
      (*(void (**)(void *, uint64_t, unint64_t))(v275 + 16))(v281, v289, v270);
      v244 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v245 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v244, v245);
      __break(1u);
      JUMPOUT(0x1005F23ACLL);
    }
LABEL_27:
    v44 = Logger.logObject.getter(v34);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v285 = (uint64_t)v40;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (_QWORD *)swift_slowAlloc(32, -1);
      v291 = v47;
      *(_DWORD *)v46 = 136315138;
      v281 = v46 + 4;
      v20 = (uint64_t)objc_msgSend((id)objc_opt_self(REMCDAlarmVehicleTrigger), "cdEntityName");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v50 = v49;

      v51 = v48;
      v26 = v287;
      v294 = (_QWORD *)sub_10001A820(v51, v50, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
      v40 = (_QWORD *)v285;
      v41 = v288;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Performing fetch during upsert {CDType: %s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      a1 = v290;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    v19 = (uint64_t)v286;
    sub_100645350((uint64_t)v40, (uint64_t)v286);
    v54 = v53;
    v55 = swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v275 = v54;
    if (!v26)
      goto LABEL_32;
    goto LABEL_38;
  }
  if (!v42)
    goto LABEL_27;
  if (v42 != 1)
    goto LABEL_164;
  swift_bridgeObjectRelease();
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (_QWORD *)swift_slowAlloc(32, -1);
    v291 = v60;
    *(_DWORD *)v59 = 136315138;
    v285 = (uint64_t)(v59 + 4);
    v61 = objc_msgSend((id)objc_opt_self(REMCDAlarmVehicleTrigger), "cdEntityName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v63 = v62;

    v26 = v287;
    v294 = (_QWORD *)sub_10001A820(v20, v63, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    a1 = v290;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Skipping fetch during upsert {CDType: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    v41 = v288;
    swift_slowDealloc(v59, -1, -1);
  }

  v19 = (uint64_t)v286;
  v275 = sub_1002B07F8((uint64_t)_swiftEmptyArrayStorage);
  if (!v26)
  {
LABEL_32:
    v24 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v24)
    {
LABEL_136:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_42;
  }
LABEL_38:
  if (a1 < 0)
    v64 = a1;
  else
    v64 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v64);
  v55 = swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_136;
LABEL_42:
  v65 = 0;
  v264 = v41 + 24;
  v265 = v19 + 48;
  v263 = (_QWORD *)(v19 + 56);
  v267 = a1 & 0xC000000000000001;
  v262 = a1 & 0xFFFFFFFFFFFFFF8;
  v261 = a1 + 32;
  v268 = &v295;
  v260 = (char *)&v294 + 4;
  v55.n128_u64[0] = 136446978;
  v259 = v55;
  v55.n128_u64[0] = 136446210;
  v271 = v55;
  v55.n128_u64[0] = 136447490;
  v256 = v55;
  v55.n128_u64[0] = 136447234;
  v254 = v55;
  v55.n128_u64[0] = 136446466;
  v257 = v55;
  v258 = (char *)&type metadata for Any + 8;
  v266 = v24;
  while (1)
  {
    if (v267)
    {
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, a1);
      v71 = __OFADD__(v65, 1);
      v72 = ((char *)&v65->isa + 1);
      if (v71)
        goto LABEL_157;
      goto LABEL_52;
    }
    if ((unint64_t)v65 >= *(_QWORD *)(v262 + 16))
      break;
    v70 = *(id *)(v261 + 8 * (_QWORD)v65);
    v71 = __OFADD__(v65, 1);
    v72 = ((char *)&v65->isa + 1);
    if (v71)
      goto LABEL_157;
LABEL_52:
    v73 = v70;
    v74 = sub_1005CCBAC(objc_msgSend(v73, "remObjectID"), &qword_100840C00, off_1007D6688);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v75 = v74;
    v269 = v72;
    v287 = 0;
    v281 = v73;

    v76 = objc_msgSend(*(id *)(v280 + 16), "uuid");
    v77 = v278;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v79 = UUID.uuidString.getter(v78);
    v81 = v80;
    v82 = *(void (**)(char *, uint64_t))(v283 + 8);
    v83 = v284;
    v82(v77, v284);
    v84 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v85 = objc_msgSend(v84, "uuid");

    v20 = (uint64_t)v279;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v19 = UUID.uuidString.getter(v86);
    v88 = v87;
    v82((char *)v20, v83);
    if (v79 == v19 && v81 == v88)
    {
      swift_bridgeObjectRelease_n(v81, 2);
LABEL_57:
      __asm { BR              X10 }
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v19, v88, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = v275;
    if ((v89 & 1) != 0)
      goto LABEL_57;
    v91._rawValue = &off_1007DEC50;
    v92 = sub_1005D0824(v91, &qword_100840C00, off_1007D6688);
    if (*(_QWORD *)(v90 + 16))
    {
      v93 = v75;
      v94 = sub_1002C672C(v93);
      if ((v95 & 1) != 0)
      {
        v96 = *(id *)(*(_QWORD *)(v90 + 56) + 8 * v94);

        v97 = v93;
        v98 = Logger.logObject.getter(v97);
        v99 = static os_log_type_t.info.getter(v98);
        if (os_log_type_enabled(v98, v99))
        {
          v19 = swift_slowAlloc(22, -1);
          v20 = swift_slowAlloc(8, -1);
          v286 = (_QWORD *)swift_slowAlloc(32, -1);
          v291 = v286;
          *(_DWORD *)v19 = v257.n128_u32[0];
          v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
          v66 = v268;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
          *(_WORD *)(v19 + 12) = 2114;
          v285 = (uint64_t)v96;
          v294 = v97;
          v67 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v66);
          *(_QWORD *)v20 = v97;

          _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v19, 0x16u);
          v68 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v20, 1, v68);
          swift_slowDealloc(v20, -1, -1);
          v69 = v286;
          swift_arrayDestroy(v286, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v19, -1, -1);

        }
        else
        {

        }
        a1 = v290;
        goto LABEL_45;
      }

    }
    if (v92 == 2)
      goto LABEL_142;
    if ((v92 & 1) != 0)
      v100 = 0x746E657665;
    else
      v100 = 0x44497463656A626FLL;
    if ((v92 & 1) != 0)
      v101 = 0xE500000000000000;
    else
      v101 = 0xE800000000000000;
    if (v100 == 0x44497463656A626FLL && v101 == 0xE800000000000000)
      goto LABEL_72;
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v100, v101, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v102 & 1) == 0)
    {
      if (v100 != 0x746E657665 || v101 != 0xE500000000000000)
      {
        v103 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E657665, 0xE500000000000000, v100, v101, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v103 & 1) == 0)
        {
LABEL_142:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v241 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v75);
          swift_willThrow(v241);

          return;
        }
        goto LABEL_77;
      }
LABEL_72:
      swift_bridgeObjectRelease_n(v101, 2);
    }
LABEL_77:
    v104 = *(void **)(v288 + 88);
    v105 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v105);
    v107 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v108 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v107, v104);
    v109 = v276;
    objc_msgSend(v104, "assignObject:toPersistentStore:", v108, v109);

    v110 = v108;
    v111 = objc_msgSend(v75, "uuid");
    v112 = v282;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v111);

    v113 = v283;
    v114 = v284;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v283 + 56))(v112, 0, 1, v284);
    v115 = v277;
    sub_10011D420(v112, v277);
    v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v115, 1, v114);
    isa = 0;
    if (v116 != 1)
    {
      v118 = v277;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v82((char *)v118, v284);
    }
    objc_msgSend(v110, "setIdentifier:", isa);

    sub_10011E85C(v282);
    v119 = v75;
    v120 = v288;
    swift_retain_n(v288);
    v121 = v110;
    v122 = v119;
    v123 = v121;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter(v124);
    v126 = v125;
    v127 = os_log_type_enabled(v124, v125);
    v286 = v123;
    if (v127)
    {
      v128 = swift_slowAlloc(42, -1);
      v129 = (_QWORD *)swift_slowAlloc(16, -1);
      v285 = swift_slowAlloc(64, -1);
      v291 = (_QWORD *)v285;
      *(_DWORD *)v128 = v259.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      v130 = v268;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v128 + 12) = 2082;
      sub_1000184A8(v264, (uint64_t)v293);
      sub_100671124((uint64_t)v293, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      LODWORD(v274) = v126;
      sub_1000181B8();
      v132 = v131;
      v134 = v133;
      sub_100671124((uint64_t)v293, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v294 = (_QWORD *)sub_10001A820(v132, v134, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      swift_release_n(v120);
      swift_bridgeObjectRelease();
      *(_WORD *)(v128 + 22) = 2114;
      v294 = v122;
      v135 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      *v129 = v122;

      *(_WORD *)(v128 + 32) = 2112;
      v136 = objc_msgSend(v286, "objectID");
      v294 = v136;
      v123 = v286;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      v129[1] = v136;

      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v274, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v128, 0x2Au);
      v137 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v129, 2, v137);
      swift_slowDealloc(v129, -1, -1);
      v138 = v285;
      swift_arrayDestroy(v285, 2, v258);
      swift_slowDealloc(v138, -1, -1);
      swift_slowDealloc(v128, -1, -1);

    }
    else
    {

      swift_release_n(v120);
    }
    v139 = v120;
    swift_beginAccess(v265, &v291, 33, 0);
    a1 = v122;
    sub_1001912EC((uint64_t)v123, a1);
    swift_endAccess(&v291);

    v141 = 2;
    v285 = 2;
    v142 = &byte_1007E06A8;
    do
    {
      if (((*(unsigned int *)(v139 + 64) | ((unint64_t)*(unsigned __int16 *)(v139 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v143 = *v142;
        v144 = Logger.logObject.getter(v140);
        v145 = static os_log_type_t.error.getter(v144);
        if (os_log_type_enabled(v144, v145))
        {
          v146 = swift_slowAlloc(12, -1);
          v147 = (_QWORD *)swift_slowAlloc(32, -1);
          v291 = v147;
          *(_DWORD *)v146 = v271.n128_u32[0];
          LOBYTE(v294) = v143;
          v148 = String.init<A>(describing:)(&v294, &type metadata for REMAlarmVehicleTriggerCDIngestor.ValueKey);
          *(_QWORD *)(v146 + 4) = sub_10001A820(v148, v149, (uint64_t *)&v291);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v146, 0xCu);
          swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
          v150 = v147;
          v139 = v288;
          swift_slowDealloc(v150, -1, -1);
          swift_slowDealloc(v146, -1, -1);
        }

      }
      LODWORD(v19) = *(_DWORD *)(v139 + 64);
      if (*(unsigned __int16 *)(v139 + 68) >> 14 == 2 && (*(_DWORD *)(v139 + 64) & 1) == 0)
      {
        if (qword_100837928 == -1)
          goto LABEL_138;
        goto LABEL_163;
      }
      ++v142;
      --v141;
    }
    while (v141);
    swift_retain_n(v139);
    v152 = (id)a1;
    v153 = v286;
    v154 = v152;
    v155 = v153;
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.default.getter(v156);
    v158 = os_log_type_enabled(v156, (os_log_type_t)v157);
    v286 = v154;
    if (v158)
    {
      LODWORD(v272) = v157;
      v274 = v156;
      v159 = swift_slowAlloc(58, -1);
      v160 = (_QWORD *)swift_slowAlloc(16, -1);
      v273 = swift_slowAlloc(96, -1);
      v291 = (_QWORD *)v273;
      *(_DWORD *)v159 = v256.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      v161 = v268;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v159 + 12) = 2082;
      sub_1000184A8(v264, (uint64_t)v292);
      sub_100671124((uint64_t)v292, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v163 = v162;
      v165 = v164;
      sub_100671124((uint64_t)v292, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v294 = (_QWORD *)sub_10001A820(v163, v165, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      swift_release_n(v139);
      swift_bridgeObjectRelease();
      *(_WORD *)(v159 + 22) = 2114;
      v294 = v154;
      v166 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      *v160 = v154;

      *(_WORD *)(v159 + 32) = 2112;
      v167 = -[NSObject objectID](v155, "objectID");
      v294 = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      v255 = v160;
      v160[1] = v167;

      *(_WORD *)(v159 + 42) = 2082;
      v168 = 2;
      v294 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 2, 0);
      v169 = v294;
      v170 = v294[2];
      v171 = 2 * v170;
      v172 = &byte_1007E06A8;
      do
      {
        if (*v172)
          v173 = 0x746E657665;
        else
          v173 = 0x44497463656A626FLL;
        if (*v172)
          v174 = 0xE500000000000000;
        else
          v174 = 0xE800000000000000;
        v294 = v169;
        v175 = v169[3];
        v176 = v170 + 1;
        if (v170 >= v175 >> 1)
        {
          sub_1001C1B0C(v175 > 1, v170 + 1, 1);
          v169 = v294;
        }
        v169[2] = v176;
        v177 = &v169[v171];
        v177[4] = v173;
        v177[5] = v174;
        v171 += 2;
        ++v172;
        v170 = v176;
        --v168;
      }
      while (v168);
      v178 = Array.description.getter(v169, &type metadata for String);
      v180 = v179;
      swift_bridgeObjectRelease();
      v294 = (_QWORD *)sub_10001A820(v178, v180, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      swift_bridgeObjectRelease();
      *(_WORD *)(v159 + 52) = 1024;
      v139 = v288;
      v181 = *(unsigned __int8 *)(v288 + 104);
      swift_release(v288);
      LODWORD(v294) = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v260);
      swift_release(v139);
      v182 = v274;
      _os_log_impl((void *)&_mh_execute_header, v274, (os_log_type_t)v272, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v159, 0x3Au);
      v183 = sub_10001A630((uint64_t *)&unk_100839E70);
      v184 = v255;
      swift_arrayDestroy(v255, 2, v183);
      swift_slowDealloc(v184, -1, -1);
      v185 = v273;
      swift_arrayDestroy(v273, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1, -1);
      swift_slowDealloc(v159, -1, -1);

    }
    else
    {

      swift_release_n(v139);
    }
    a1 = v290;
    v186 = v281;
    v20 = 1;
    v187 = v287;
    sub_10014ACD0(v281, v155, (uint64_t)&off_1007E0688);
    if (v187)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v287 = 0;
    v274 = v155;
    v188 = -[NSObject changedValues](v155, "changedValues");
    v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v188, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v189 = v263;
    swift_beginAccess(v263, &v291, 33, 0);
    v190 = v286;
    swift_bridgeObjectRetain(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v189);
    v294 = (_QWORD *)*v189;
    *v189 = 0x8000000000000000;
    v192 = v19;
    sub_10028C70C(v19, v190, isUniquelyReferenced_nonNull_native);
    *v189 = v294;

    swift_bridgeObjectRelease();
    swift_endAccess(&v291);
    v193 = *(unsigned __int8 *)(v139 + 104);
    if (v285 && (v193 & 1) != 0)
    {
      v194 = v274;
      -[NSObject updateChangeCount](v194, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_45;
    }
    v195 = v190;
    swift_retain_n(v139);
    v19 = v139;
    v196 = v195;
    v197 = v274;
    swift_bridgeObjectRetain(v192);
    v199 = Logger.logObject.getter(v198);
    v200 = static os_log_type_t.default.getter(v199);
    if (os_log_type_enabled(v199, (os_log_type_t)v200))
    {
      v249 = v200;
      v252 = v199;
      v253 = v197;
      v16 = swift_slowAlloc(44, -1);
      v255 = (_QWORD *)swift_slowAlloc(8, -1);
      v250 = (_QWORD *)swift_slowAlloc(64, -1);
      v291 = v250;
      *(_DWORD *)v16 = v254.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v16 + 12) = 1024;
      swift_release(v19);
      LODWORD(v294) = v193;
      v201 = v260;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v260);
      swift_release(v19);
      *(_WORD *)(v16 + 18) = 1024;
      LODWORD(v294) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v201);
      *(_WORD *)(v16 + 24) = 2114;
      v294 = v196;
      v5 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *v255 = v196;

      v248 = (id)v5;
      v251 = (uint8_t *)v16;
      *(_WORD *)(v16 + 34) = 2082;
      v6 = *(_QWORD *)(v192 + 16);
      if (!v6)
      {
        v202 = _swiftEmptyArrayStorage;
LABEL_135:
        v218 = v251;
        v219 = Array.description.getter(v202, &type metadata for String);
        v221 = v220;
        swift_bridgeObjectRelease();
        v294 = (_QWORD *)sub_10001A820(v219, v221, (uint64_t *)&v291);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
        swift_bridgeObjectRelease_n(v192, 2);
        swift_bridgeObjectRelease();
        v222 = v252;
        _os_log_impl((void *)&_mh_execute_header, v252, (os_log_type_t)v249, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v218, 0x2Cu);
        v223 = sub_10001A630((uint64_t *)&unk_100839E70);
        v224 = v255;
        swift_arrayDestroy(v255, 1, v223);
        swift_slowDealloc(v224, -1, -1);
        v225 = v250;
        swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v225, -1, -1);
        swift_slowDealloc(v218, -1, -1);

        v226 = v253;
        goto LABEL_45;
      }
      v294 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v192);
      sub_1001C1B0C(0, v6, 0);
      v202 = v294;
      v18 = sub_100658CFC(v192);
      a1 = v203;
      v204 = 0;
      v205 = (v192 + 64);
      v206 = *(_BYTE *)(v192 + 32);
      v273 = v203;
      v247 = v192 + 88;
      v272 = v6;
      v274 = (v192 + 64);
      while (2)
      {
        if (v18 < 0 || v18 >= 1 << v206)
          goto LABEL_145;
        v19 = (unint64_t)v18 >> 6;
        v5 = 1 << v18;
        if (((uint64_t)v205[(unint64_t)v18 >> 6].isa & (1 << v18)) == 0)
          goto LABEL_146;
        if (*(_DWORD *)(v192 + 36) != (_DWORD)a1)
          goto LABEL_147;
        v209 = *(_QWORD *)(v192 + 48) + 16 * v18;
        v210 = *(_QWORD **)v209;
        v6 = *(_QWORD *)(v209 + 8);
        v285 = (uint64_t)v204;
        v286 = v210;
        v294 = v202;
        v16 = v202[2];
        v211 = v202[3];
        swift_bridgeObjectRetain(v6);
        if (v16 >= v211 >> 1)
        {
          sub_1001C1B0C(v211 > 1, v16 + 1, 1);
          v202 = v294;
        }
        v202[2] = v16 + 1;
        v212 = &v202[2 * v16];
        v212[4] = v286;
        v212[5] = v6;
        v206 = *(_BYTE *)(v192 + 32);
        v20 = 1;
        v207 = 1 << v206;
        if (v18 >= 1 << v206)
          goto LABEL_148;
        v205 = v274;
        v213 = v274[v19].isa;
        if (((unint64_t)v213 & v5) == 0)
          goto LABEL_149;
        if (*(_DWORD *)(v192 + 36) != (_DWORD)a1)
          goto LABEL_150;
        v214 = (unint64_t)v213 & (-2 << (v18 & 0x3F));
        if (v214)
        {
          v207 = __clz(__rbit64(v214)) | v18 & 0xFFFFFFFFFFFFFFC0;
          v6 = v272;
          v208 = v285;
        }
        else
        {
          v215 = v19 + 1;
          v216 = (v207 + 63) >> 6;
          v6 = v272;
          v208 = v285;
          if (v19 + 1 < v216)
          {
            v217 = (unint64_t)v274[v215].isa;
            if (v217)
              goto LABEL_126;
            v215 = v19 + 2;
            if (v19 + 2 < v216)
            {
              v217 = (unint64_t)v274[v215].isa;
              if (v217)
              {
LABEL_126:
                v207 = __clz(__rbit64(v217)) + (v215 << 6);
              }
              else
              {
                while (v216 - 3 != v19)
                {
                  v217 = *(_QWORD *)(v247 + 8 * v19++);
                  if (v217)
                  {
                    v215 = v19 + 2;
                    goto LABEL_126;
                  }
                }
              }
            }
          }
        }
        v204 = (void *)(v208 + 1);
        a1 = v273;
        v18 = v207;
        if (v204 == (void *)v6)
        {
          swift_bridgeObjectRelease();
          a1 = v290;
          goto LABEL_135;
        }
        continue;
      }
    }

    swift_bridgeObjectRelease_n(v192, 2);
    swift_release_n(v19);
LABEL_45:
    v24 = v266;
    v65 = v269;
    v5 = v287;
    if (v269 == v266)
      goto LABEL_136;
  }
  __break(1u);
LABEL_163:
  swift_once(&qword_100837928, sub_1005A2648);
LABEL_138:
  v227 = sub_10001AAA8(v270, (uint64_t)qword_1008508E0);
  v228 = Logger.logObject.getter(v227);
  v229 = static os_log_type_t.error.getter(v228);
  if (os_log_type_enabled(v228, v229))
  {
    v230 = swift_slowAlloc(22, -1);
    v231 = (_QWORD *)swift_slowAlloc(64, -1);
    v291 = v231;
    *(_DWORD *)v230 = v257.n128_u32[0];
    v232 = sub_1005A26D8(1);
    v294 = (_QWORD *)sub_10001A820(v232, v233, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v230 + 12) = 2082;
    v234 = sub_1005A26D8(v19);
    v294 = (_QWORD *)sub_10001A820(v234, v235, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v228, v229, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v230, 0x16u);
    swift_arrayDestroy(v231, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v231, -1, -1);
    swift_slowDealloc(v230, -1, -1);
  }

  v236 = (void *)objc_opt_self(REMError);
  v237 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v238 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8(v19);
  v239 = String._bridgeToObjectiveC()();
  objc_msgSend(v236, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v237, v238, v239, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1005F23BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  BOOL v71;
  NSObject *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  int64_t v92;
  id v93;
  unint64_t v94;
  char v95;
  id v96;
  _QWORD *v97;
  NSObject *v98;
  os_log_type_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  void *v104;
  uint64_t v105;
  void *ObjCClassFromMetadata;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  Class isa;
  uint64_t v118;
  id v119;
  int64_t v120;
  id v121;
  _QWORD *v122;
  id v123;
  NSObject *v124;
  os_log_type_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  char v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  id v153;
  id v154;
  id v155;
  id v156;
  NSObject *v157;
  int v158;
  BOOL v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  id v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  unint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  BOOL v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  os_log_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  unint64_t v193;
  id v194;
  uint64_t v195;
  _QWORD *v196;
  id v197;
  char isUniquelyReferenced_nonNull_native;
  int v199;
  id v200;
  id v201;
  _QWORD *v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  int v207;
  int64_t v208;
  char *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  os_log_t v213;
  char v214;
  unint64_t v215;
  uint64_t v216;
  void *v217;
  unint64_t v218;
  _QWORD *v219;
  Class v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  Class v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  os_log_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  id v236;
  char v237;
  id v238;
  uint64_t v239;
  NSObject *v240;
  os_log_type_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  NSString v249;
  NSString v250;
  NSString v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  id v259;
  int v260;
  _QWORD *v261;
  uint8_t *v262;
  os_log_t v263;
  id v264;
  __n128 v265;
  _QWORD *v266;
  __n128 v267;
  __n128 v268;
  char *v269;
  __n128 v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  NSObject *v279;
  unint64_t v280;
  uint64_t *v281;
  NSObject *v282;
  unint64_t v283;
  __n128 v284;
  uint64_t v285;
  _QWORD *v286;
  os_log_t v287;
  unint64_t v288;
  id v289;
  void *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  id v299;
  unint64_t v300;
  int64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  char v305[8];
  char v306[8];
  _QWORD *v307;
  uint64_t v308;

  v5 = v4;
  v6 = v3;
  v294 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v291 = (uint64_t)&v257 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v295 = (uint64_t)&v257 - v12;
  v297 = type metadata accessor for UUID(0);
  v296 = *(_QWORD *)(v297 - 8);
  __chkstk_darwin(v297);
  v293 = (char *)&v257 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v292 = (char *)&v257 - v15;
  v16 = type metadata accessor for Logger(0);
  v288 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (uint64_t)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a3[2];
  v19 = a3[3];
  v299 = a3;
  v289 = (id)a3[4];
  v21 = qword_1008371E8;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(a1);
  if (v21 != -1)
    goto LABEL_166;
LABEL_2:
  v22 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v19);
  v302 = v22;
  v24 = Logger.logObject.getter(v23);
  LODWORD(v298) = static os_log_type_t.info.getter(v24);
  v25 = os_log_type_enabled(v24, (os_log_type_t)v298);
  v26 = (unint64_t)a1 >> 62;
  v303 = a1;
  v300 = (unint64_t)a1 >> 62;
  v301 = v6;
  v283 = v16;
  v290 = (void *)v18;
  if (v25)
  {
    v287 = (os_log_t)v20;
    v20 = swift_slowAlloc(42, -1);
    v286 = (_QWORD *)swift_slowAlloc(96, -1);
    v304 = v286;
    *(_DWORD *)v20 = 136446978;
    v307 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    *(_WORD *)(v20 + 12) = 2048;
    if (!v26)
    {
      v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_173;
  }

  swift_bridgeObjectRelease_n(v19, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v26)
    {
      v253 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v18 = _CocoaArrayWrapper.endIndex.getter(v253);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v18)
      break;
    v304 = _swiftEmptyArrayStorage;
    v24 = &v304;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = 0;
      v16 = a1 & 0xC000000000000001;
      a1 = (uint64_t)&qword_100840C10;
      while (v18 != v19)
      {
        if (v16)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v303);
        else
          v35 = *(id *)(v303 + 8 * v19 + 32);
        v36 = v35;
        v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), &qword_100840C10, off_1007D6670);
        if (v5)
        {

          v43 = v304;
          swift_bridgeObjectRelease();
          swift_release(v43);
          return;
        }
        v20 = (uint64_t)v37;
        ++v19;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v6 = v304[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v20);
        v34 = specialized ContiguousArray._endMutation()(v39);
        if (v18 == v19)
        {
          a1 = v303;
          v40 = v304;
          v26 = v300;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    if (a1 < 0)
      v254 = a1;
    else
      v254 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v254);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v307 = (_QWORD *)v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    v28 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33 = v30;
    a1 = v303;
    v307 = (_QWORD *)sub_10001A820(v33, v32, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2082;
    swift_bridgeObjectRetain(v19);
    v307 = (_QWORD *)sub_10001A820((uint64_t)v287, v19, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v298, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v20, 0x2Au);
    v6 = (int64_t)v286;
    swift_arrayDestroy(v286, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v26 = v300;
  }
  v40 = _swiftEmptyArrayStorage;
LABEL_20:
  v41 = v301;
  v42 = *(_QWORD *)(v301 + 96);
  if (v42 > 1)
  {
    if ((unint64_t)(v42 - 2) >= 3 && v42 != 4499 && v42 != 4599)
    {
LABEL_179:
      (*(void (**)(void *, uint64_t, unint64_t))(v288 + 16))(v290, v302, v283);
      v255 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v256 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v255, v256);
      __break(1u);
      JUMPOUT(0x1005F4954);
    }
LABEL_27:
    v44 = Logger.logObject.getter(v34);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v298 = (uint64_t)v40;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (_QWORD *)swift_slowAlloc(32, -1);
      v304 = v47;
      *(_DWORD *)v46 = 136315138;
      v290 = v46 + 4;
      v20 = (uint64_t)objc_msgSend((id)objc_opt_self(REMCDAlarmLocationTrigger), "cdEntityName");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v50 = v49;

      v51 = v48;
      v26 = v300;
      v307 = (_QWORD *)sub_10001A820(v51, v50, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
      v40 = (_QWORD *)v298;
      v41 = v301;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Performing fetch during upsert {CDType: %s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      a1 = v303;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    v19 = (uint64_t)v299;
    sub_100645770((uint64_t)v40, (uint64_t)v299);
    v54 = v53;
    v55 = swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v288 = v54;
    if (!v26)
      goto LABEL_32;
    goto LABEL_38;
  }
  if (!v42)
    goto LABEL_27;
  if (v42 != 1)
    goto LABEL_179;
  swift_bridgeObjectRelease();
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (_QWORD *)swift_slowAlloc(32, -1);
    v304 = v60;
    *(_DWORD *)v59 = 136315138;
    v298 = (uint64_t)(v59 + 4);
    v61 = objc_msgSend((id)objc_opt_self(REMCDAlarmLocationTrigger), "cdEntityName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v63 = v62;

    v26 = v300;
    v307 = (_QWORD *)sub_10001A820(v20, v63, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    a1 = v303;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Skipping fetch during upsert {CDType: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    v41 = v301;
    swift_slowDealloc(v59, -1, -1);
  }

  v19 = (uint64_t)v299;
  v288 = sub_1002B0804((uint64_t)_swiftEmptyArrayStorage);
  if (!v26)
  {
LABEL_32:
    v24 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v24)
    {
LABEL_152:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_42;
  }
LABEL_38:
  if (a1 < 0)
    v64 = a1;
  else
    v64 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v64);
  v55 = swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_152;
LABEL_42:
  v65 = 0;
  v275 = v41 + 24;
  v277 = v19 + 48;
  v274 = (_QWORD *)(v19 + 56);
  v280 = a1 & 0xC000000000000001;
  v273 = a1 & 0xFFFFFFFFFFFFFF8;
  v272 = a1 + 32;
  v281 = &v308;
  v271 = (char *)&v307 + 4;
  v276 = (unint64_t)"ents";
  v278 = 0x80000001006F4D50;
  v55.n128_u64[0] = 136446978;
  v270 = v55;
  v55.n128_u64[0] = 136446210;
  v284 = v55;
  v55.n128_u64[0] = 136447490;
  v267 = v55;
  v55.n128_u64[0] = 136447234;
  v265 = v55;
  v55.n128_u64[0] = 136446466;
  v268 = v55;
  v269 = (char *)&type metadata for Any + 8;
  v279 = v24;
  while (1)
  {
    if (v280)
    {
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, a1);
      v71 = __OFADD__(v65, 1);
      v72 = ((char *)&v65->isa + 1);
      if (v71)
        goto LABEL_172;
      goto LABEL_52;
    }
    if ((unint64_t)v65 >= *(_QWORD *)(v273 + 16))
      break;
    v70 = *(id *)(v272 + 8 * (_QWORD)v65);
    v71 = __OFADD__(v65, 1);
    v72 = ((char *)&v65->isa + 1);
    if (v71)
      goto LABEL_172;
LABEL_52:
    v73 = v70;
    v74 = sub_1005CCBAC(objc_msgSend(v73, "remObjectID"), &qword_100840C10, off_1007D6670);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v75 = v74;
    v282 = v72;
    v300 = 0;
    v290 = v73;

    v76 = objc_msgSend(*(id *)(v294 + 16), "uuid");
    v77 = v292;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v79 = UUID.uuidString.getter(v78);
    v81 = v80;
    v82 = *(void (**)(char *, uint64_t))(v296 + 8);
    v83 = v297;
    v82(v77, v297);
    v84 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v85 = objc_msgSend(v84, "uuid");

    v20 = (uint64_t)v293;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v87 = UUID.uuidString.getter(v86);
    v89 = v88;
    v82((char *)v20, v83);
    if (v79 == v87 && v81 == v89)
    {
      swift_bridgeObjectRelease_n(v81, 2);
LABEL_57:
      __asm { BR              X10 }
    }
    v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v87, v89, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91 = v288;
    if ((v90 & 1) != 0)
      goto LABEL_57;
    v92 = v301;
    v19 = sub_1005D1158();
    if (*(_QWORD *)(v91 + 16))
    {
      v93 = v75;
      v94 = sub_1002C672C(v93);
      if ((v95 & 1) != 0)
      {
        v96 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v94);

        v97 = v93;
        v98 = Logger.logObject.getter(v97);
        v99 = static os_log_type_t.info.getter(v98);
        if (os_log_type_enabled(v98, v99))
        {
          v19 = swift_slowAlloc(22, -1);
          v20 = swift_slowAlloc(8, -1);
          v298 = swift_slowAlloc(32, -1);
          v304 = (_QWORD *)v298;
          *(_DWORD *)v19 = v268.n128_u32[0];
          v307 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v304);
          v299 = v96;
          v66 = v281;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
          *(_WORD *)(v19 + 12) = 2114;
          v307 = v97;
          v67 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v66);
          *(_QWORD *)v20 = v97;

          _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v19, 0x16u);
          v68 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v20, 1, v68);
          swift_slowDealloc(v20, -1, -1);
          v69 = v298;
          swift_arrayDestroy(v298, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v19, -1, -1);

        }
        else
        {

        }
        a1 = v303;
        goto LABEL_45;
      }

    }
    if (v19 == 3)
      goto LABEL_151;
    v100 = 0xE800000000000000;
    if (!(_BYTE)v19)
      goto LABEL_69;
    if (v19 == 1)
    {
      v101 = v276 | 0x8000000000000000;
      v102 = 0xD000000000000012;
    }
    else
    {
      v102 = 0x74696D69786F7270;
      v101 = 0xE900000000000079;
    }
    v103 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v102, v101, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v103 & 1) == 0)
    {
      v100 = v276 | 0x8000000000000000;
      if ((_BYTE)v19)
      {
        if (v19 == 1)
        {
          v183 = v276 | 0x8000000000000000;
          v184 = 0xD000000000000012;
        }
        else
        {
          v184 = 0x74696D69786F7270;
          v183 = 0xE900000000000079;
        }
      }
      else
      {
        v183 = 0xE800000000000000;
        v184 = 0x44497463656A626FLL;
      }
      if (v184 == 0xD000000000000012 && v100 == v183)
        goto LABEL_69;
      v225 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, v100, v184, v183, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v225 & 1) == 0)
      {
        v100 = 0xE900000000000079;
        if ((_BYTE)v19)
        {
          if (v19 == 1)
          {
            v226 = v276 | 0x8000000000000000;
            v227 = 0xD000000000000012;
          }
          else
          {
            v227 = 0x74696D69786F7270;
            v226 = 0xE900000000000079;
          }
        }
        else
        {
          v226 = 0xE800000000000000;
          v227 = 0x44497463656A626FLL;
        }
        if (v227 != 0x74696D69786F7270 || v226 != 0xE900000000000079)
        {
          v237 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D69786F7270, 0xE900000000000079, v227, v226, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v237 & 1) == 0)
          {
LABEL_151:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v238 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v75);
            swift_willThrow(v238);

            return;
          }
          goto LABEL_71;
        }
LABEL_69:
        swift_bridgeObjectRelease_n(v100, 2);
      }
    }
LABEL_71:
    v104 = *(void **)(v92 + 88);
    v105 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v105);
    v107 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v108 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v107, v104);
    v109 = v289;
    objc_msgSend(v104, "assignObject:toPersistentStore:", v108, v109);

    v110 = v108;
    v111 = objc_msgSend(v75, "uuid");
    v112 = v295;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v111);

    v113 = v296;
    v114 = v297;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v296 + 56))(v112, 0, 1, v297);
    v115 = v291;
    sub_10011D420(v112, v291);
    v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v115, 1, v114);
    isa = 0;
    if (v116 != 1)
    {
      v118 = v291;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v82((char *)v118, v297);
    }
    objc_msgSend(v110, "setIdentifier:", isa);

    sub_10011E85C(v295);
    v119 = v75;
    v120 = v301;
    swift_retain_n(v301);
    v121 = v110;
    v122 = v119;
    v123 = v121;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter(v124);
    v126 = v125;
    v127 = os_log_type_enabled(v124, v125);
    v299 = v123;
    if (v127)
    {
      v128 = swift_slowAlloc(42, -1);
      v129 = (_QWORD *)swift_slowAlloc(16, -1);
      v298 = swift_slowAlloc(64, -1);
      v304 = (_QWORD *)v298;
      *(_DWORD *)v128 = v270.n128_u32[0];
      v307 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v304);
      v130 = v281;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
      *(_WORD *)(v128 + 12) = 2082;
      sub_1000184A8(v275, (uint64_t)v306);
      sub_100671124((uint64_t)v306, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      LODWORD(v287) = v126;
      sub_1000181B8();
      v132 = v131;
      v134 = v133;
      sub_100671124((uint64_t)v306, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v307 = (_QWORD *)sub_10001A820(v132, v134, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v130);
      swift_release_n(v120);
      swift_bridgeObjectRelease();
      *(_WORD *)(v128 + 22) = 2114;
      v307 = v122;
      v135 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v130);
      *v129 = v122;

      *(_WORD *)(v128 + 32) = 2112;
      v136 = objc_msgSend(v299, "objectID");
      v307 = v136;
      v123 = v299;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v130);
      v129[1] = v136;

      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v287, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v128, 0x2Au);
      v137 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v129, 2, v137);
      swift_slowDealloc(v129, -1, -1);
      v138 = v298;
      swift_arrayDestroy(v298, 2, v269);
      swift_slowDealloc(v138, -1, -1);
      swift_slowDealloc(v128, -1, -1);

    }
    else
    {

      swift_release_n(v120);
    }
    v139 = v120;
    swift_beginAccess(v277, &v304, 33, 0);
    a1 = v122;
    sub_1001912EC((uint64_t)v123, a1);
    swift_endAccess(&v304);

    v141 = 3;
    v298 = 3;
    v142 = &byte_1007E06D0;
    do
    {
      v144 = *v142++;
      v143 = v144;
      if (((*(unsigned int *)(v139 + 64) | ((unint64_t)*(unsigned __int16 *)(v139 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v145 = Logger.logObject.getter(v140);
        v146 = static os_log_type_t.error.getter(v145);
        if (os_log_type_enabled(v145, v146))
        {
          v147 = swift_slowAlloc(12, -1);
          v148 = (_QWORD *)swift_slowAlloc(32, -1);
          v304 = v148;
          *(_DWORD *)v147 = v284.n128_u32[0];
          LOBYTE(v307) = v143;
          v149 = String.init<A>(describing:)(&v307, &type metadata for REMAlarmLocationTriggerCDIngestor.ValueKey);
          *(_QWORD *)(v147 + 4) = sub_10001A820(v149, v150, (uint64_t *)&v304);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v145, v146, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v147, 0xCu);
          swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
          v151 = v148;
          v139 = v301;
          swift_slowDealloc(v151, -1, -1);
          swift_slowDealloc(v147, -1, -1);
        }

      }
      LODWORD(v19) = *(_DWORD *)(v139 + 64);
      if (*(unsigned __int16 *)(v139 + 68) >> 14 == 2 && (*(_DWORD *)(v139 + 64) & 1) == 0)
      {
        if (qword_100837928 == -1)
          goto LABEL_154;
        goto LABEL_178;
      }
      --v141;
    }
    while (v141);
    swift_retain_n(v139);
    v153 = (id)a1;
    v154 = v299;
    v155 = v153;
    v156 = v154;
    v157 = Logger.logObject.getter(v156);
    v158 = static os_log_type_t.default.getter(v157);
    v159 = os_log_type_enabled(v157, (os_log_type_t)v158);
    v299 = v155;
    if (v159)
    {
      LODWORD(v285) = v158;
      v287 = v157;
      v160 = swift_slowAlloc(58, -1);
      v161 = (_QWORD *)swift_slowAlloc(16, -1);
      v286 = (_QWORD *)swift_slowAlloc(96, -1);
      v304 = v286;
      *(_DWORD *)v160 = v267.n128_u32[0];
      v307 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v304);
      v162 = v281;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
      *(_WORD *)(v160 + 12) = 2082;
      sub_1000184A8(v275, (uint64_t)v305);
      sub_100671124((uint64_t)v305, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v164 = v163;
      v166 = v165;
      sub_100671124((uint64_t)v305, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v307 = (_QWORD *)sub_10001A820(v164, v166, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v162);
      swift_release_n(v139);
      swift_bridgeObjectRelease();
      *(_WORD *)(v160 + 22) = 2114;
      v307 = v155;
      v167 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v162);
      *v161 = v155;

      *(_WORD *)(v160 + 32) = 2112;
      v168 = objc_msgSend(v156, "objectID");
      v307 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v162);
      v266 = v161;
      v161[1] = v168;

      *(_WORD *)(v160 + 42) = 2082;
      v169 = 3;
      v307 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 3, 0);
      v170 = v307;
      v171 = &byte_1007E06D0;
      v172 = v276;
      do
      {
        v174 = *v171++;
        v173 = v174;
        v175 = v172 | 0x8000000000000000;
        v176 = v174 == 1;
        if (v174 == 1)
          v177 = 0xD000000000000012;
        else
          v177 = 0x74696D69786F7270;
        if (!v176)
          v175 = 0xE900000000000079;
        if (v173)
          v178 = v177;
        else
          v178 = 0x44497463656A626FLL;
        if (v173)
          v179 = v175;
        else
          v179 = 0xE800000000000000;
        v307 = v170;
        v181 = v170[2];
        v180 = v170[3];
        if (v181 >= v180 >> 1)
        {
          sub_1001C1B0C(v180 > 1, v181 + 1, 1);
          v172 = v276;
          v170 = v307;
        }
        v170[2] = v181 + 1;
        v182 = &v170[2 * v181];
        v182[4] = v178;
        v182[5] = v179;
        --v169;
      }
      while (v169);
      v185 = Array.description.getter(v170, &type metadata for String);
      v187 = v186;
      swift_bridgeObjectRelease();
      v307 = (_QWORD *)sub_10001A820(v185, v187, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
      swift_bridgeObjectRelease();
      *(_WORD *)(v160 + 52) = 1024;
      v139 = v301;
      v188 = *(unsigned __int8 *)(v301 + 104);
      swift_release(v301);
      LODWORD(v307) = v188;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v271);
      swift_release(v139);
      v189 = v287;
      _os_log_impl((void *)&_mh_execute_header, v287, (os_log_type_t)v285, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v160, 0x3Au);
      v190 = sub_10001A630((uint64_t *)&unk_100839E70);
      v191 = v266;
      swift_arrayDestroy(v266, 2, v190);
      swift_slowDealloc(v191, -1, -1);
      v192 = v286;
      swift_arrayDestroy(v286, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v192, -1, -1);
      swift_slowDealloc(v160, -1, -1);

    }
    else
    {

      swift_release_n(v139);
    }
    a1 = v303;
    v20 = 1;
    v193 = v300;
    sub_10014A82C(v290, v156, (uint64_t)&off_1007E06B0);
    if (v193)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v300 = 0;
    v194 = objc_msgSend(v156, "changedValues");
    v195 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v194, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v196 = v274;
    swift_beginAccess(v274, &v304, 33, 0);
    v197 = v299;
    swift_bridgeObjectRetain(v195);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v196);
    v307 = (_QWORD *)*v196;
    *v196 = 0x8000000000000000;
    v19 = v195;
    sub_10028C70C(v195, v197, isUniquelyReferenced_nonNull_native);
    *v196 = v307;

    swift_bridgeObjectRelease();
    swift_endAccess(&v304);
    v199 = *(unsigned __int8 *)(v139 + 104);
    if (v298 && (v199 & 1) != 0)
    {
      v200 = v156;
      objc_msgSend(v200, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_45;
    }
    v201 = v197;
    swift_retain_n(v139);
    v202 = v201;
    v203 = v156;
    v204 = v195;
    swift_bridgeObjectRetain(v195);
    v206 = Logger.logObject.getter(v205);
    v207 = static os_log_type_t.default.getter(v206);
    if (os_log_type_enabled(v206, (os_log_type_t)v207))
    {
      v260 = v207;
      v263 = v206;
      v264 = v203;
      v16 = swift_slowAlloc(44, -1);
      v266 = (_QWORD *)swift_slowAlloc(8, -1);
      v261 = (_QWORD *)swift_slowAlloc(64, -1);
      v304 = v261;
      *(_DWORD *)v16 = v265.n128_u32[0];
      v307 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v304);
      v19 = (uint64_t)v281;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
      *(_WORD *)(v16 + 12) = 1024;
      v208 = v301;
      swift_release(v301);
      LODWORD(v307) = v199;
      v209 = v271;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v271);
      swift_release(v208);
      *(_WORD *)(v16 + 18) = 1024;
      LODWORD(v307) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v209);
      *(_WORD *)(v16 + 24) = 2114;
      v307 = v202;
      v5 = v202;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v19);
      *v266 = v202;

      v259 = (id)v5;
      v262 = (uint8_t *)v16;
      *(_WORD *)(v16 + 34) = 2082;
      v6 = *(_QWORD *)(v204 + 16);
      if (!v6)
      {
        v210 = _swiftEmptyArrayStorage;
LABEL_145:
        v228 = v262;
        v229 = Array.description.getter(v210, &type metadata for String);
        v231 = v230;
        swift_bridgeObjectRelease();
        v307 = (_QWORD *)sub_10001A820(v229, v231, (uint64_t *)&v304);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, v281);
        swift_bridgeObjectRelease_n(v204, 2);
        swift_bridgeObjectRelease();
        v232 = v263;
        _os_log_impl((void *)&_mh_execute_header, v263, (os_log_type_t)v260, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v228, 0x2Cu);
        v233 = sub_10001A630((uint64_t *)&unk_100839E70);
        v234 = v266;
        swift_arrayDestroy(v266, 1, v233);
        swift_slowDealloc(v234, -1, -1);
        v235 = v261;
        swift_arrayDestroy(v261, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v235, -1, -1);
        swift_slowDealloc(v228, -1, -1);

        v236 = v264;
        goto LABEL_45;
      }
      v307 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v204);
      sub_1001C1B0C(0, v6, 0);
      v210 = v307;
      v18 = sub_100658CFC(v204);
      a1 = v211;
      v212 = 0;
      v213 = (os_log_t)(v204 + 64);
      v214 = *(_BYTE *)(v204 + 32);
      v285 = v211;
      v258 = v204 + 88;
      v286 = (_QWORD *)v6;
      v287 = (os_log_t)(v204 + 64);
      while (2)
      {
        if (v18 < 0 || v18 >= 1 << v214)
          goto LABEL_160;
        v19 = (unint64_t)v18 >> 6;
        v5 = 1 << v18;
        if (((uint64_t)v213[(unint64_t)v18 >> 6].isa & (1 << v18)) == 0)
          goto LABEL_161;
        if (*(_DWORD *)(v204 + 36) != (_DWORD)a1)
          goto LABEL_162;
        v216 = *(_QWORD *)(v204 + 48) + 16 * v18;
        v217 = *(void **)v216;
        v6 = *(_QWORD *)(v216 + 8);
        v298 = v212;
        v299 = v217;
        v307 = v210;
        v16 = v210[2];
        v218 = v210[3];
        swift_bridgeObjectRetain(v6);
        if (v16 >= v218 >> 1)
        {
          sub_1001C1B0C(v218 > 1, v16 + 1, 1);
          v210 = v307;
        }
        v210[2] = v16 + 1;
        v219 = &v210[2 * v16];
        v219[4] = v299;
        v219[5] = v6;
        v214 = *(_BYTE *)(v204 + 32);
        v20 = 1;
        v215 = 1 << v214;
        if (v18 >= 1 << v214)
          goto LABEL_163;
        v213 = v287;
        v220 = v287[v19].isa;
        if (((unint64_t)v220 & v5) == 0)
          goto LABEL_164;
        if (*(_DWORD *)(v204 + 36) != (_DWORD)a1)
          goto LABEL_165;
        v221 = (unint64_t)v220 & (-2 << (v18 & 0x3F));
        if (v221)
        {
          v215 = __clz(__rbit64(v221)) | v18 & 0xFFFFFFFFFFFFFFC0;
          v6 = (int64_t)v286;
        }
        else
        {
          v222 = v19 + 1;
          v223 = (v215 + 63) >> 6;
          v6 = (int64_t)v286;
          if (v19 + 1 < v223)
          {
            v224 = v287[v222].isa;
            if (v224)
              goto LABEL_128;
            v222 = v19 + 2;
            if (v19 + 2 < v223)
            {
              v224 = v287[v222].isa;
              if (v224)
              {
LABEL_128:
                v215 = __clz(__rbit64((unint64_t)v224)) + (v222 << 6);
              }
              else
              {
                while (v223 - 3 != v19)
                {
                  v224 = *(Class *)(v258 + 8 * v19++);
                  if (v224)
                  {
                    v222 = v19 + 2;
                    goto LABEL_128;
                  }
                }
              }
            }
          }
        }
        v212 = v298 + 1;
        a1 = v285;
        v18 = v215;
        if (v298 + 1 == v6)
        {
          swift_bridgeObjectRelease();
          a1 = v303;
          goto LABEL_145;
        }
        continue;
      }
    }

    swift_bridgeObjectRelease_n(v19, 2);
    swift_release_n(v301);
LABEL_45:
    v24 = v279;
    v65 = v282;
    v5 = v300;
    if (v282 == v279)
      goto LABEL_152;
  }
  __break(1u);
LABEL_178:
  swift_once(&qword_100837928, sub_1005A2648);
LABEL_154:
  v239 = sub_10001AAA8(v283, (uint64_t)qword_1008508E0);
  v240 = Logger.logObject.getter(v239);
  v241 = static os_log_type_t.error.getter(v240);
  if (os_log_type_enabled(v240, v241))
  {
    v242 = swift_slowAlloc(22, -1);
    v243 = (_QWORD *)swift_slowAlloc(64, -1);
    v304 = v243;
    *(_DWORD *)v242 = v268.n128_u32[0];
    v244 = sub_1005A26D8(1);
    v307 = (_QWORD *)sub_10001A820(v244, v245, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    swift_bridgeObjectRelease();
    *(_WORD *)(v242 + 12) = 2082;
    v246 = sub_1005A26D8(v19);
    v307 = (_QWORD *)sub_10001A820(v246, v247, (uint64_t *)&v304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &v308);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v240, v241, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v242, 0x16u);
    swift_arrayDestroy(v243, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v243, -1, -1);
    swift_slowDealloc(v242, -1, -1);
  }

  v248 = (void *)objc_opt_self(REMError);
  v249 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v250 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8(v19);
  v251 = String._bridgeToObjectiveC()();
  objc_msgSend(v248, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v249, v250, v251, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v252);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1005F4964(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  id v70;
  BOOL v71;
  NSObject *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  Swift::OpaquePointer v91;
  char v92;
  id v93;
  unint64_t v94;
  char v95;
  id v96;
  _QWORD *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  void *v104;
  uint64_t v105;
  void *ObjCClassFromMetadata;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  Class isa;
  uint64_t v118;
  id v119;
  int64_t v120;
  id v121;
  _QWORD *v122;
  _QWORD *v123;
  NSObject *v124;
  os_log_type_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  id v152;
  _QWORD *v153;
  _QWORD *v154;
  NSObject *v155;
  NSObject *v156;
  int v157;
  BOOL v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  NSObject *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  void *v186;
  unint64_t v187;
  id v188;
  _QWORD *v189;
  _QWORD *v190;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v192;
  int v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  NSObject *v197;
  uint64_t v198;
  NSObject *v199;
  int v200;
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  void *v204;
  NSObject *v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  Class v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  os_log_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  NSObject *v226;
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  NSString v237;
  NSString v238;
  NSString v239;
  uint64_t v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  int v249;
  _QWORD *v250;
  uint8_t *v251;
  os_log_t v252;
  NSObject *v253;
  __n128 v254;
  _QWORD *v255;
  __n128 v256;
  __n128 v257;
  char *v258;
  __n128 v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  unint64_t v267;
  uint64_t *v268;
  NSObject *v269;
  unint64_t v270;
  __n128 v271;
  int64_t v272;
  uint64_t v273;
  NSObject *v274;
  unint64_t v275;
  id v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  int64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  char v292[8];
  char v293[8];
  _QWORD *v294;
  uint64_t v295;

  v5 = v4;
  v6 = v3;
  v280 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v277 = (uint64_t)&v246 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v282 = (uint64_t)&v246 - v12;
  v284 = type metadata accessor for UUID(0);
  v283 = *(_QWORD *)(v284 - 8);
  __chkstk_darwin(v284);
  v279 = (char *)&v246 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v278 = (char *)&v246 - v15;
  v16 = type metadata accessor for Logger(0);
  v275 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (uint64_t)&v246 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a3[2];
  v19 = a3[3];
  v286 = a3;
  v276 = (id)a3[4];
  v21 = qword_1008371E8;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(a1);
  if (v21 != -1)
    goto LABEL_151;
LABEL_2:
  v22 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v19);
  v289 = v22;
  v24 = Logger.logObject.getter(v23);
  LODWORD(v285) = static os_log_type_t.info.getter(v24);
  v25 = os_log_type_enabled(v24, (os_log_type_t)v285);
  v26 = (unint64_t)a1 >> 62;
  v290 = a1;
  v287 = (unint64_t)a1 >> 62;
  v288 = v6;
  v270 = v16;
  v281 = (void *)v18;
  if (v25)
  {
    v274 = v20;
    v20 = swift_slowAlloc(42, -1);
    v273 = swift_slowAlloc(96, -1);
    v291 = (_QWORD *)v273;
    *(_DWORD *)v20 = 136446978;
    v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    *(_WORD *)(v20 + 12) = 2048;
    if (!v26)
    {
      v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_158;
  }

  swift_bridgeObjectRelease_n(v19, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v26)
    {
      v242 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v18 = _CocoaArrayWrapper.endIndex.getter(v242);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v18)
      break;
    v291 = _swiftEmptyArrayStorage;
    v24 = &v291;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = 0;
      v16 = a1 & 0xC000000000000001;
      a1 = (uint64_t)&qword_100840C40;
      while (v18 != v19)
      {
        if (v16)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v290);
        else
          v35 = *(id *)(v290 + 8 * v19 + 32);
        v36 = v35;
        v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), (unint64_t *)&qword_100840C40, off_1007D6668);
        if (v5)
        {

          v43 = v291;
          swift_bridgeObjectRelease();
          swift_release(v43);
          return;
        }
        v20 = (uint64_t)v37;
        ++v19;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        v6 = v291[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v20);
        v34 = specialized ContiguousArray._endMutation()(v39);
        if (v18 == v19)
        {
          a1 = v290;
          v40 = v291;
          v26 = v287;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    if (a1 < 0)
      v243 = a1;
    else
      v243 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v243);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v294 = (_QWORD *)v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    v28 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33 = v30;
    a1 = v290;
    v294 = (_QWORD *)sub_10001A820(v33, v32, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2082;
    swift_bridgeObjectRetain(v19);
    v294 = (_QWORD *)sub_10001A820((uint64_t)v274, v19, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v285, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v20, 0x2Au);
    v6 = v273;
    swift_arrayDestroy(v273, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v26 = v287;
  }
  v40 = _swiftEmptyArrayStorage;
LABEL_20:
  v41 = v288;
  v42 = *(_QWORD *)(v288 + 96);
  if (v42 > 1)
  {
    if ((unint64_t)(v42 - 2) >= 3 && v42 != 4499 && v42 != 4599)
    {
LABEL_164:
      (*(void (**)(void *, uint64_t, unint64_t))(v275 + 16))(v281, v289, v270);
      v244 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v245 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v244, v245);
      __break(1u);
      JUMPOUT(0x1005F6D24);
    }
LABEL_27:
    v44 = Logger.logObject.getter(v34);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v285 = (uint64_t)v40;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (_QWORD *)swift_slowAlloc(32, -1);
      v291 = v47;
      *(_DWORD *)v46 = 136315138;
      v281 = v46 + 4;
      v20 = (uint64_t)objc_msgSend((id)objc_opt_self(REMCDAlarmDateTrigger), "cdEntityName");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v50 = v49;

      v51 = v48;
      v26 = v287;
      v294 = (_QWORD *)sub_10001A820(v51, v50, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
      v40 = (_QWORD *)v285;
      v41 = v288;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Performing fetch during upsert {CDType: %s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      a1 = v290;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    v19 = (uint64_t)v286;
    sub_100645B90((uint64_t)v40, (uint64_t)v286);
    v54 = v53;
    v55 = swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v275 = v54;
    if (!v26)
      goto LABEL_32;
    goto LABEL_38;
  }
  if (!v42)
    goto LABEL_27;
  if (v42 != 1)
    goto LABEL_164;
  swift_bridgeObjectRelease();
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (_QWORD *)swift_slowAlloc(32, -1);
    v291 = v60;
    *(_DWORD *)v59 = 136315138;
    v285 = (uint64_t)(v59 + 4);
    v61 = objc_msgSend((id)objc_opt_self(REMCDAlarmDateTrigger), "cdEntityName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v63 = v62;

    v26 = v287;
    v294 = (_QWORD *)sub_10001A820(v20, v63, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    a1 = v290;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Skipping fetch during upsert {CDType: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    v41 = v288;
    swift_slowDealloc(v59, -1, -1);
  }

  v19 = (uint64_t)v286;
  v275 = sub_1002B0810((uint64_t)_swiftEmptyArrayStorage);
  if (!v26)
  {
LABEL_32:
    v24 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v24)
    {
LABEL_136:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_42;
  }
LABEL_38:
  if (a1 < 0)
    v64 = a1;
  else
    v64 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v64);
  v55 = swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_136;
LABEL_42:
  v65 = 0;
  v264 = v41 + 24;
  v265 = v19 + 48;
  v263 = (_QWORD *)(v19 + 56);
  v267 = a1 & 0xC000000000000001;
  v262 = a1 & 0xFFFFFFFFFFFFFF8;
  v261 = a1 + 32;
  v268 = &v295;
  v260 = (char *)&v294 + 4;
  v55.n128_u64[0] = 136446978;
  v259 = v55;
  v55.n128_u64[0] = 136446210;
  v271 = v55;
  v55.n128_u64[0] = 136447490;
  v256 = v55;
  v55.n128_u64[0] = 136447234;
  v254 = v55;
  v55.n128_u64[0] = 136446466;
  v257 = v55;
  v258 = (char *)&type metadata for Any + 8;
  v266 = v24;
  while (1)
  {
    if (v267)
    {
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, a1);
      v71 = __OFADD__(v65, 1);
      v72 = ((char *)&v65->isa + 1);
      if (v71)
        goto LABEL_157;
      goto LABEL_52;
    }
    if ((unint64_t)v65 >= *(_QWORD *)(v262 + 16))
      break;
    v70 = *(id *)(v261 + 8 * (_QWORD)v65);
    v71 = __OFADD__(v65, 1);
    v72 = ((char *)&v65->isa + 1);
    if (v71)
      goto LABEL_157;
LABEL_52:
    v73 = v70;
    v74 = sub_1005CCBAC(objc_msgSend(v73, "remObjectID"), (unint64_t *)&qword_100840C40, off_1007D6668);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v75 = v74;
    v269 = v72;
    v287 = 0;
    v281 = v73;

    v76 = objc_msgSend(*(id *)(v280 + 16), "uuid");
    v77 = v278;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v79 = UUID.uuidString.getter(v78);
    v81 = v80;
    v82 = *(void (**)(char *, uint64_t))(v283 + 8);
    v83 = v284;
    v82(v77, v284);
    v84 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v85 = objc_msgSend(v84, "uuid");

    v20 = (uint64_t)v279;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v19 = UUID.uuidString.getter(v86);
    v88 = v87;
    v82((char *)v20, v83);
    if (v79 == v19 && v81 == v88)
    {
      swift_bridgeObjectRelease_n(v81, 2);
LABEL_57:
      __asm { BR              X10 }
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v19, v88, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = v275;
    if ((v89 & 1) != 0)
      goto LABEL_57;
    v91._rawValue = &off_1007DEB38;
    v92 = sub_1005D0824(v91, (unint64_t *)&qword_100840C40, off_1007D6668);
    if (*(_QWORD *)(v90 + 16))
    {
      v93 = v75;
      v94 = sub_1002C672C(v93);
      if ((v95 & 1) != 0)
      {
        v96 = *(id *)(*(_QWORD *)(v90 + 56) + 8 * v94);

        v97 = v93;
        v98 = Logger.logObject.getter(v97);
        v99 = static os_log_type_t.info.getter(v98);
        if (os_log_type_enabled(v98, v99))
        {
          v19 = swift_slowAlloc(22, -1);
          v20 = swift_slowAlloc(8, -1);
          v286 = (_QWORD *)swift_slowAlloc(32, -1);
          v291 = v286;
          *(_DWORD *)v19 = v257.n128_u32[0];
          v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
          v66 = v268;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
          *(_WORD *)(v19 + 12) = 2114;
          v285 = (uint64_t)v96;
          v294 = v97;
          v67 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v66);
          *(_QWORD *)v20 = v97;

          _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v19, 0x16u);
          v68 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v20, 1, v68);
          swift_slowDealloc(v20, -1, -1);
          v69 = v286;
          swift_arrayDestroy(v286, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v19, -1, -1);

        }
        else
        {

        }
        a1 = v290;
        goto LABEL_45;
      }

    }
    if (v92 == 2)
      goto LABEL_142;
    if ((v92 & 1) != 0)
      v100 = 0x706D6F4365746164;
    else
      v100 = 0x44497463656A626FLL;
    if ((v92 & 1) != 0)
      v101 = 0xEE0073746E656E6FLL;
    else
      v101 = 0xE800000000000000;
    if (v100 == 0x44497463656A626FLL && v101 == 0xE800000000000000)
      goto LABEL_72;
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v100, v101, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v102 & 1) == 0)
    {
      if (v100 != 0x706D6F4365746164 || v101 != 0xEE0073746E656E6FLL)
      {
        v103 = _stringCompareWithSmolCheck(_:_:expecting:)(0x706D6F4365746164, 0xEE0073746E656E6FLL, v100, v101, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v103 & 1) == 0)
        {
LABEL_142:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v241 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v75);
          swift_willThrow(v241);

          return;
        }
        goto LABEL_77;
      }
LABEL_72:
      swift_bridgeObjectRelease_n(v101, 2);
    }
LABEL_77:
    v104 = *(void **)(v288 + 88);
    v105 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v105);
    v107 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v108 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v107, v104);
    v109 = v276;
    objc_msgSend(v104, "assignObject:toPersistentStore:", v108, v109);

    v110 = v108;
    v111 = objc_msgSend(v75, "uuid");
    v112 = v282;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v111);

    v113 = v283;
    v114 = v284;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v283 + 56))(v112, 0, 1, v284);
    v115 = v277;
    sub_10011D420(v112, v277);
    v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v115, 1, v114);
    isa = 0;
    if (v116 != 1)
    {
      v118 = v277;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v82((char *)v118, v284);
    }
    objc_msgSend(v110, "setIdentifier:", isa);

    sub_10011E85C(v282);
    v119 = v75;
    v120 = v288;
    swift_retain_n(v288);
    v121 = v110;
    v122 = v119;
    v123 = v121;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter(v124);
    v126 = v125;
    v127 = os_log_type_enabled(v124, v125);
    v286 = v123;
    if (v127)
    {
      v128 = swift_slowAlloc(42, -1);
      v129 = (_QWORD *)swift_slowAlloc(16, -1);
      v285 = swift_slowAlloc(64, -1);
      v291 = (_QWORD *)v285;
      *(_DWORD *)v128 = v259.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      v130 = v268;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v128 + 12) = 2082;
      sub_1000184A8(v264, (uint64_t)v293);
      sub_100671124((uint64_t)v293, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      LODWORD(v274) = v126;
      sub_1000181B8();
      v132 = v131;
      v134 = v133;
      sub_100671124((uint64_t)v293, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v294 = (_QWORD *)sub_10001A820(v132, v134, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      swift_release_n(v120);
      swift_bridgeObjectRelease();
      *(_WORD *)(v128 + 22) = 2114;
      v294 = v122;
      v135 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      *v129 = v122;

      *(_WORD *)(v128 + 32) = 2112;
      v136 = objc_msgSend(v286, "objectID");
      v294 = v136;
      v123 = v286;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v130);
      v129[1] = v136;

      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v274, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v128, 0x2Au);
      v137 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v129, 2, v137);
      swift_slowDealloc(v129, -1, -1);
      v138 = v285;
      swift_arrayDestroy(v285, 2, v258);
      swift_slowDealloc(v138, -1, -1);
      swift_slowDealloc(v128, -1, -1);

    }
    else
    {

      swift_release_n(v120);
    }
    v139 = v120;
    swift_beginAccess(v265, &v291, 33, 0);
    a1 = v122;
    sub_1001912EC((uint64_t)v123, a1);
    swift_endAccess(&v291);

    v141 = 2;
    v285 = 2;
    v142 = &byte_1007E06F8;
    do
    {
      if (((*(unsigned int *)(v139 + 64) | ((unint64_t)*(unsigned __int16 *)(v139 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v143 = *v142;
        v144 = Logger.logObject.getter(v140);
        v145 = static os_log_type_t.error.getter(v144);
        if (os_log_type_enabled(v144, v145))
        {
          v146 = swift_slowAlloc(12, -1);
          v147 = (_QWORD *)swift_slowAlloc(32, -1);
          v291 = v147;
          *(_DWORD *)v146 = v271.n128_u32[0];
          LOBYTE(v294) = v143;
          v148 = String.init<A>(describing:)(&v294, &type metadata for REMAlarmDateTriggerCDIngestor.ValueKey);
          *(_QWORD *)(v146 + 4) = sub_10001A820(v148, v149, (uint64_t *)&v291);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v146, 0xCu);
          swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
          v150 = v147;
          v139 = v288;
          swift_slowDealloc(v150, -1, -1);
          swift_slowDealloc(v146, -1, -1);
        }

      }
      LODWORD(v19) = *(_DWORD *)(v139 + 64);
      if (*(unsigned __int16 *)(v139 + 68) >> 14 == 2 && (*(_DWORD *)(v139 + 64) & 1) == 0)
      {
        if (qword_100837928 == -1)
          goto LABEL_138;
        goto LABEL_163;
      }
      ++v142;
      --v141;
    }
    while (v141);
    swift_retain_n(v139);
    v152 = (id)a1;
    v153 = v286;
    v154 = v152;
    v155 = v153;
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.default.getter(v156);
    v158 = os_log_type_enabled(v156, (os_log_type_t)v157);
    v286 = v154;
    if (v158)
    {
      LODWORD(v272) = v157;
      v274 = v156;
      v159 = swift_slowAlloc(58, -1);
      v160 = (_QWORD *)swift_slowAlloc(16, -1);
      v273 = swift_slowAlloc(96, -1);
      v291 = (_QWORD *)v273;
      *(_DWORD *)v159 = v256.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      v161 = v268;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v159 + 12) = 2082;
      sub_1000184A8(v264, (uint64_t)v292);
      sub_100671124((uint64_t)v292, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v163 = v162;
      v165 = v164;
      sub_100671124((uint64_t)v292, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v294 = (_QWORD *)sub_10001A820(v163, v165, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      swift_release_n(v139);
      swift_bridgeObjectRelease();
      *(_WORD *)(v159 + 22) = 2114;
      v294 = v154;
      v166 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      *v160 = v154;

      *(_WORD *)(v159 + 32) = 2112;
      v167 = -[NSObject objectID](v155, "objectID");
      v294 = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v161);
      v255 = v160;
      v160[1] = v167;

      *(_WORD *)(v159 + 42) = 2082;
      v168 = 2;
      v294 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 2, 0);
      v169 = v294;
      v170 = v294[2];
      v171 = 2 * v170;
      v172 = &byte_1007E06F8;
      do
      {
        if (*v172)
          v173 = 0x706D6F4365746164;
        else
          v173 = 0x44497463656A626FLL;
        if (*v172)
          v174 = 0xEE0073746E656E6FLL;
        else
          v174 = 0xE800000000000000;
        v294 = v169;
        v175 = v169[3];
        v176 = v170 + 1;
        if (v170 >= v175 >> 1)
        {
          sub_1001C1B0C(v175 > 1, v170 + 1, 1);
          v169 = v294;
        }
        v169[2] = v176;
        v177 = &v169[v171];
        v177[4] = v173;
        v177[5] = v174;
        v171 += 2;
        ++v172;
        v170 = v176;
        --v168;
      }
      while (v168);
      v178 = Array.description.getter(v169, &type metadata for String);
      v180 = v179;
      swift_bridgeObjectRelease();
      v294 = (_QWORD *)sub_10001A820(v178, v180, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      swift_bridgeObjectRelease();
      *(_WORD *)(v159 + 52) = 1024;
      v139 = v288;
      v181 = *(unsigned __int8 *)(v288 + 104);
      swift_release(v288);
      LODWORD(v294) = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v260);
      swift_release(v139);
      v182 = v274;
      _os_log_impl((void *)&_mh_execute_header, v274, (os_log_type_t)v272, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v159, 0x3Au);
      v183 = sub_10001A630((uint64_t *)&unk_100839E70);
      v184 = v255;
      swift_arrayDestroy(v255, 2, v183);
      swift_slowDealloc(v184, -1, -1);
      v185 = v273;
      swift_arrayDestroy(v273, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1, -1);
      swift_slowDealloc(v159, -1, -1);

    }
    else
    {

      swift_release_n(v139);
    }
    a1 = v290;
    v186 = v281;
    v20 = 1;
    v187 = v287;
    sub_10014A598(v281, v155, (uint64_t)&off_1007E06D8);
    if (v187)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v287 = 0;
    v274 = v155;
    v188 = -[NSObject changedValues](v155, "changedValues");
    v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v188, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v189 = v263;
    swift_beginAccess(v263, &v291, 33, 0);
    v190 = v286;
    swift_bridgeObjectRetain(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v189);
    v294 = (_QWORD *)*v189;
    *v189 = 0x8000000000000000;
    v192 = v19;
    sub_10028C70C(v19, v190, isUniquelyReferenced_nonNull_native);
    *v189 = v294;

    swift_bridgeObjectRelease();
    swift_endAccess(&v291);
    v193 = *(unsigned __int8 *)(v139 + 104);
    if (v285 && (v193 & 1) != 0)
    {
      v194 = v274;
      -[NSObject updateChangeCount](v194, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_45;
    }
    v195 = v190;
    swift_retain_n(v139);
    v19 = v139;
    v196 = v195;
    v197 = v274;
    swift_bridgeObjectRetain(v192);
    v199 = Logger.logObject.getter(v198);
    v200 = static os_log_type_t.default.getter(v199);
    if (os_log_type_enabled(v199, (os_log_type_t)v200))
    {
      v249 = v200;
      v252 = v199;
      v253 = v197;
      v16 = swift_slowAlloc(44, -1);
      v255 = (_QWORD *)swift_slowAlloc(8, -1);
      v250 = (_QWORD *)swift_slowAlloc(64, -1);
      v291 = v250;
      *(_DWORD *)v16 = v254.n128_u32[0];
      v294 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *(_WORD *)(v16 + 12) = 1024;
      swift_release(v19);
      LODWORD(v294) = v193;
      v201 = v260;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v260);
      swift_release(v19);
      *(_WORD *)(v16 + 18) = 1024;
      LODWORD(v294) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v201);
      *(_WORD *)(v16 + 24) = 2114;
      v294 = v196;
      v5 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
      *v255 = v196;

      v248 = (id)v5;
      v251 = (uint8_t *)v16;
      *(_WORD *)(v16 + 34) = 2082;
      v6 = *(_QWORD *)(v192 + 16);
      if (!v6)
      {
        v202 = _swiftEmptyArrayStorage;
LABEL_135:
        v218 = v251;
        v219 = Array.description.getter(v202, &type metadata for String);
        v221 = v220;
        swift_bridgeObjectRelease();
        v294 = (_QWORD *)sub_10001A820(v219, v221, (uint64_t *)&v291);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v268);
        swift_bridgeObjectRelease_n(v192, 2);
        swift_bridgeObjectRelease();
        v222 = v252;
        _os_log_impl((void *)&_mh_execute_header, v252, (os_log_type_t)v249, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v218, 0x2Cu);
        v223 = sub_10001A630((uint64_t *)&unk_100839E70);
        v224 = v255;
        swift_arrayDestroy(v255, 1, v223);
        swift_slowDealloc(v224, -1, -1);
        v225 = v250;
        swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v225, -1, -1);
        swift_slowDealloc(v218, -1, -1);

        v226 = v253;
        goto LABEL_45;
      }
      v294 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v192);
      sub_1001C1B0C(0, v6, 0);
      v202 = v294;
      v18 = sub_100658CFC(v192);
      a1 = v203;
      v204 = 0;
      v205 = (v192 + 64);
      v206 = *(_BYTE *)(v192 + 32);
      v273 = v203;
      v247 = v192 + 88;
      v272 = v6;
      v274 = (v192 + 64);
      while (2)
      {
        if (v18 < 0 || v18 >= 1 << v206)
          goto LABEL_145;
        v19 = (unint64_t)v18 >> 6;
        v5 = 1 << v18;
        if (((uint64_t)v205[(unint64_t)v18 >> 6].isa & (1 << v18)) == 0)
          goto LABEL_146;
        if (*(_DWORD *)(v192 + 36) != (_DWORD)a1)
          goto LABEL_147;
        v209 = *(_QWORD *)(v192 + 48) + 16 * v18;
        v210 = *(_QWORD **)v209;
        v6 = *(_QWORD *)(v209 + 8);
        v285 = (uint64_t)v204;
        v286 = v210;
        v294 = v202;
        v16 = v202[2];
        v211 = v202[3];
        swift_bridgeObjectRetain(v6);
        if (v16 >= v211 >> 1)
        {
          sub_1001C1B0C(v211 > 1, v16 + 1, 1);
          v202 = v294;
        }
        v202[2] = v16 + 1;
        v212 = &v202[2 * v16];
        v212[4] = v286;
        v212[5] = v6;
        v206 = *(_BYTE *)(v192 + 32);
        v20 = 1;
        v207 = 1 << v206;
        if (v18 >= 1 << v206)
          goto LABEL_148;
        v205 = v274;
        v213 = v274[v19].isa;
        if (((unint64_t)v213 & v5) == 0)
          goto LABEL_149;
        if (*(_DWORD *)(v192 + 36) != (_DWORD)a1)
          goto LABEL_150;
        v214 = (unint64_t)v213 & (-2 << (v18 & 0x3F));
        if (v214)
        {
          v207 = __clz(__rbit64(v214)) | v18 & 0xFFFFFFFFFFFFFFC0;
          v6 = v272;
          v208 = v285;
        }
        else
        {
          v215 = v19 + 1;
          v216 = (v207 + 63) >> 6;
          v6 = v272;
          v208 = v285;
          if (v19 + 1 < v216)
          {
            v217 = (unint64_t)v274[v215].isa;
            if (v217)
              goto LABEL_126;
            v215 = v19 + 2;
            if (v19 + 2 < v216)
            {
              v217 = (unint64_t)v274[v215].isa;
              if (v217)
              {
LABEL_126:
                v207 = __clz(__rbit64(v217)) + (v215 << 6);
              }
              else
              {
                while (v216 - 3 != v19)
                {
                  v217 = *(_QWORD *)(v247 + 8 * v19++);
                  if (v217)
                  {
                    v215 = v19 + 2;
                    goto LABEL_126;
                  }
                }
              }
            }
          }
        }
        v204 = (void *)(v208 + 1);
        a1 = v273;
        v18 = v207;
        if (v204 == (void *)v6)
        {
          swift_bridgeObjectRelease();
          a1 = v290;
          goto LABEL_135;
        }
        continue;
      }
    }

    swift_bridgeObjectRelease_n(v192, 2);
    swift_release_n(v19);
LABEL_45:
    v24 = v266;
    v65 = v269;
    v5 = v287;
    if (v269 == v266)
      goto LABEL_136;
  }
  __break(1u);
LABEL_163:
  swift_once(&qword_100837928, sub_1005A2648);
LABEL_138:
  v227 = sub_10001AAA8(v270, (uint64_t)qword_1008508E0);
  v228 = Logger.logObject.getter(v227);
  v229 = static os_log_type_t.error.getter(v228);
  if (os_log_type_enabled(v228, v229))
  {
    v230 = swift_slowAlloc(22, -1);
    v231 = (_QWORD *)swift_slowAlloc(64, -1);
    v291 = v231;
    *(_DWORD *)v230 = v257.n128_u32[0];
    v232 = sub_1005A26D8(1);
    v294 = (_QWORD *)sub_10001A820(v232, v233, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    *(_WORD *)(v230 + 12) = 2082;
    v234 = sub_1005A26D8(v19);
    v294 = (_QWORD *)sub_10001A820(v234, v235, (uint64_t *)&v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v228, v229, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v230, 0x16u);
    swift_arrayDestroy(v231, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v231, -1, -1);
    swift_slowDealloc(v230, -1, -1);
  }

  v236 = (void *)objc_opt_self(REMError);
  v237 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v238 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8(v19);
  v239 = String._bridgeToObjectiveC()();
  objc_msgSend(v236, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v237, v238, v239, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1005F6D34(uint64_t a1, uint64_t a2, NSObject *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  NSObject *v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  id v70;
  BOOL v71;
  NSObject *v72;
  void *v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  Swift::OpaquePointer v92;
  char v93;
  id v94;
  unint64_t v95;
  char v96;
  char *v97;
  _QWORD *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  void *v105;
  uint64_t v106;
  void *ObjCClassFromMetadata;
  id v108;
  id v109;
  objc_class *v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  Class v118;
  uint64_t v119;
  id v120;
  id v121;
  _QWORD *v122;
  char *v123;
  NSObject *v124;
  os_log_type_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  NSObject *v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  NSObject *v147;
  uint64_t v148;
  unint64_t v149;
  NSObject *v151;
  char *v152;
  NSObject *v153;
  NSObject *v154;
  int v155;
  BOOL v156;
  NSObject *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  NSObject *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  NSObject *v179;
  uint64_t v180;
  os_log_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  char *v185;
  id v186;
  id v187;
  char *v188;
  Class v189;
  id v190;
  NSObject *v191;
  _QWORD *v192;
  char *v193;
  char isUniquelyReferenced_nonNull_native;
  int v195;
  id v196;
  char *v197;
  char *v198;
  id v199;
  uint64_t v200;
  NSObject *v201;
  uint64_t *v202;
  char *v203;
  uint64_t *v204;
  NSObject *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  NSObject *v210;
  char v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  Class v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint8_t *v223;
  uint64_t v224;
  unint64_t v225;
  os_log_t v226;
  uint64_t v227;
  unint64_t v228;
  NSObject *v229;
  id v230;
  uint64_t v231;
  NSObject *v232;
  os_log_type_t v233;
  uint64_t v234;
  NSObject *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  NSString v241;
  NSString v242;
  NSString v243;
  uint64_t v244;
  NSObject *v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  id v252;
  unint64_t v253;
  int v254;
  NSObject *v255;
  uint8_t *v256;
  __n128 v257;
  os_log_t v258;
  id v259;
  __n128 v260;
  __n128 v261;
  char *v262;
  __n128 v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  NSObject *v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  __n128 v275;
  uint64_t v276;
  uint64_t v277;
  NSObject *v278;
  unint64_t v279;
  Class v280;
  char *v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint8_t *v285;
  uint64_t v286;
  char *v287;
  NSObject *v288;
  unint64_t v289;
  char *v290;
  NSObject *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  NSObject *v295;
  char v296[8];
  char v297[8];
  _QWORD *p_isa;
  uint64_t v299;

  v5 = v4;
  v6 = v3;
  v284 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v282 = (uint64_t)&v251 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v281 = (char *)&v251 - v12;
  v293 = type metadata accessor for UUID(0);
  v286 = *(_QWORD *)(v293 - 8);
  __chkstk_darwin(v293);
  v283 = (char *)&v251 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v290 = (char *)&v251 - v15;
  v16 = type metadata accessor for Logger(0);
  v285 = *(uint8_t **)(v16 - 8);
  __chkstk_darwin(v16);
  v287 = (char *)&v251 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = (uint64_t)a3[2].isa;
  v18 = (unint64_t)a3[3].isa;
  v288 = a3;
  v280 = a3[4].isa;
  v20 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v20 != -1)
    goto LABEL_158;
LABEL_2:
  v21 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v292 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  v25 = os_log_type_enabled(v23, (os_log_type_t)v24);
  v26 = (unint64_t)a1 >> 62;
  v294 = a1;
  v289 = v6;
  v291 = ((unint64_t)a1 >> 62);
  v274 = v16;
  if (v25)
  {
    LODWORD(v278) = v24;
    v27 = swift_slowAlloc(42, -1);
    v28 = swift_slowAlloc(96, -1);
    v295 = v28;
    *(_DWORD *)v27 = 136446978;
    p_isa = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
    *(_WORD *)(v27 + 12) = 2048;
    v279 = isa;
    v277 = (uint64_t)v28;
    if (!v26)
    {
      v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_165;
  }

  swift_bridgeObjectRelease_n(v18, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v26)
    {
      v247 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v27 = _CocoaArrayWrapper.endIndex.getter(v247);
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v27)
      break;
    v295 = _swiftEmptyArrayStorage;
    v23 = &v295;
    specialized ContiguousArray.reserveCapacity(_:)(v27);
    if ((v27 & 0x8000000000000000) == 0)
    {
      v18 = 0;
      v6 = a1 & 0xC000000000000001;
      a1 = (uint64_t)off_1007D6678;
      while (v27 != v18)
      {
        if (v6)
          v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v294);
        else
          v36 = *(id *)(v294 + 8 * v18 + 32);
        v37 = v36;
        v38 = sub_1005CCBAC(objc_msgSend(v37, "remObjectID"), &qword_10084FBF8, off_1007D6678);
        if (v5)
        {

          v43 = v295;
          swift_bridgeObjectRelease();
          swift_release(v43);
          return;
        }
        isa = (uint64_t)v38;
        ++v18;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
        v16 = (uint64_t)v295[2].isa;
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, isa);
        v35 = specialized ContiguousArray._endMutation()(v40);
        if (v27 == v18)
        {
          a1 = v294;
          v41 = v295;
          v6 = v289;
          v26 = (unint64_t)v291;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
LABEL_164:
    __break(1u);
LABEL_165:
    if (a1 < 0)
      v248 = a1;
    else
      v248 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v29 = _CocoaArrayWrapper.endIndex.getter(v248);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    p_isa = (_QWORD *)v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2082;
    isa = v27 + 24;
    v30 = sub_1000151B0(0, &qword_10084FBF8, off_1007D6678);
    v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v30), "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    p_isa = (_QWORD *)sub_10001A820(v32, v34, (uint64_t *)&v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
    a1 = v294;
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 32) = 2082;
    swift_bridgeObjectRetain(v18);
    p_isa = (_QWORD *)sub_10001A820(v279, v18, (uint64_t *)&v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v278, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v27, 0x2Au);
    v16 = v277;
    swift_arrayDestroy(v277, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v6 = v289;
    v26 = (unint64_t)v291;
  }
  v41 = _swiftEmptyArrayStorage;
LABEL_20:
  v42 = *(_QWORD *)(v6 + 96);
  if (v42 > 1)
  {
    if ((unint64_t)(v42 - 2) >= 3 && v42 != 4499 && v42 != 4599)
    {
LABEL_171:
      (*((void (**)(char *, uint64_t, uint64_t))v285 + 2))(v287, v292, v274);
      v249 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v250 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v249, v250);
      __break(1u);
      JUMPOUT(0x1005F9200);
    }
LABEL_27:
    v44 = Logger.logObject.getter(v35);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v287 = (char *)v41;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v295 = v47;
      *(_DWORD *)v46 = 136315138;
      v285 = v46 + 4;
      isa = (uint64_t)objc_msgSend((id)objc_opt_self(REMCDAlarmTimeIntervalTrigger), "cdEntityName");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(isa);
      v50 = v49;

      v51 = v48;
      a1 = v294;
      p_isa = (_QWORD *)sub_10001A820(v51, v50, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
      v41 = v287;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Performing fetch during upsert {CDType: %s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      v26 = (unint64_t)v291;
      v6 = v289;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    v18 = (unint64_t)v288;
    sub_100645FB0((uint64_t)v41, (uint64_t)v288);
    v54 = v53;
    v55 = swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v279 = v54;
    if (!v26)
      goto LABEL_32;
LABEL_38:
    if (a1 < 0)
      v64 = a1;
    else
      v64 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v23 = _CocoaArrayWrapper.endIndex.getter(v64);
    v55 = swift_bridgeObjectRelease();
    if (!v23)
    {
LABEL_143:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_42;
  }
  if (!v42)
    goto LABEL_27;
  if (v42 != 1)
    goto LABEL_171;
  swift_bridgeObjectRelease();
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v295 = v60;
    *(_DWORD *)v59 = 136315138;
    v287 = (char *)(v59 + 4);
    v61 = objc_msgSend((id)objc_opt_self(REMCDAlarmTimeIntervalTrigger), "cdEntityName");
    isa = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v63 = v62;

    a1 = v294;
    p_isa = (_QWORD *)sub_10001A820(isa, v63, (uint64_t *)&v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
    v26 = (unint64_t)v291;
    v6 = v289;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Skipping fetch during upsert {CDType: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }

  v18 = (unint64_t)v288;
  v279 = sub_1002B081C((uint64_t)_swiftEmptyArrayStorage);
  if (v26)
    goto LABEL_38;
LABEL_32:
  v23 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v23)
    goto LABEL_143;
LABEL_42:
  v65 = 0;
  v268 = v6 + 24;
  v269 = v18 + 48;
  v267 = (_QWORD *)(v18 + 56);
  v271 = a1 & 0xC000000000000001;
  v266 = a1 & 0xFFFFFFFFFFFFFF8;
  v265 = a1 + 32;
  v272 = &v299;
  v264 = (char *)&p_isa + 4;
  v55.n128_u64[0] = 136446978;
  v263 = v55;
  v55.n128_u64[0] = 136446210;
  v275 = v55;
  v55.n128_u64[0] = 136447490;
  v260 = v55;
  v55.n128_u64[0] = 136447234;
  v257 = v55;
  v55.n128_u64[0] = 136446466;
  v261 = v55;
  v262 = (char *)&type metadata for Any + 8;
  v270 = v23;
  while (1)
  {
    if (v271)
    {
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, a1);
      v71 = __OFADD__(v65, 1);
      v27 = v65 + 1;
      if (v71)
        goto LABEL_163;
    }
    else
    {
      if (v65 >= *(_QWORD *)(v266 + 16))
      {
        __break(1u);
LABEL_170:
        swift_once(&qword_100837928, sub_1005A2648);
LABEL_145:
        v231 = sub_10001AAA8(v274, (uint64_t)qword_1008508E0);
        v232 = Logger.logObject.getter(v231);
        v233 = static os_log_type_t.error.getter(v232);
        if (os_log_type_enabled(v232, v233))
        {
          v234 = swift_slowAlloc(22, -1);
          v235 = swift_slowAlloc(64, -1);
          v295 = v235;
          *(_DWORD *)v234 = v261.n128_u32[0];
          v236 = sub_1005A26D8(1);
          p_isa = (_QWORD *)sub_10001A820(v236, v237, (uint64_t *)&v295);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
          swift_bridgeObjectRelease();
          *(_WORD *)(v234 + 12) = 2082;
          v238 = sub_1005A26D8(isa);
          p_isa = (_QWORD *)sub_10001A820(v238, v239, (uint64_t *)&v295);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v299);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v232, v233, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v234, 0x16u);
          swift_arrayDestroy(v235, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v235, -1, -1);
          swift_slowDealloc(v234, -1, -1);
        }

        v240 = (void *)objc_opt_self(REMError);
        v241 = String._bridgeToObjectiveC()();
        sub_1005A26D8(1);
        v242 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_1005A26D8(isa);
        v243 = String._bridgeToObjectiveC()();
        objc_msgSend(v240, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v241, v242, v243, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v244);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v245 = v278;
        goto LABEL_148;
      }
      v70 = *(id *)(v265 + 8 * v65);
      v71 = __OFADD__(v65, 1);
      v27 = v65 + 1;
      if (v71)
      {
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
    }
    v72 = v70;
    v73 = sub_1005CCBAC(-[NSObject remObjectID](v72, "remObjectID"), &qword_10084FBF8, off_1007D6678);
    if (v5)
      break;
    v74 = v73;
    v273 = v27;
    v285 = 0;
    v291 = v72;

    v75 = objc_msgSend(*(id *)(v284 + 16), "uuid");
    v76 = v290;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

    v78 = UUID.uuidString.getter(v77);
    v80 = v79;
    v81 = *(NSObject **)(v286 + 8);
    v82 = v293;
    ((void (*)(char *, uint64_t))v81)(v76, v293);
    v83 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v84 = objc_msgSend(v83, "uuid");

    isa = (uint64_t)v283;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

    v86 = UUID.uuidString.getter(v85);
    v88 = v87;
    v288 = v81;
    ((void (*)(uint64_t, uint64_t))v81)(isa, v82);
    if (v78 == v86 && v80 == v88)
    {
      swift_bridgeObjectRelease_n(v80, 2);
LABEL_57:
      __asm { BR              X10 }
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v86, v88, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = v279;
    v18 = (unint64_t)v74;
    if ((v89 & 1) != 0)
      goto LABEL_57;
    v91 = v289;
    v92._rawValue = &off_1007DE4F8;
    v93 = sub_1005D0824(v92, &qword_10084FBF8, off_1007D6678);
    if (*(_QWORD *)(v90 + 16))
    {
      v94 = v74;
      v95 = sub_1002C672C(v94);
      if ((v96 & 1) != 0)
      {
        v97 = (char *)*(id *)(*(_QWORD *)(v90 + 56) + 8 * v95);

        v98 = v94;
        v99 = Logger.logObject.getter(v98);
        v100 = static os_log_type_t.info.getter(v99);
        if (os_log_type_enabled(v99, v100))
        {
          v18 = swift_slowAlloc(22, -1);
          isa = swift_slowAlloc(8, -1);
          v288 = swift_slowAlloc(32, -1);
          v295 = v288;
          *(_DWORD *)v18 = v261.n128_u32[0];
          p_isa = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v295);
          v66 = v272;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
          *(_WORD *)(v18 + 12) = 2114;
          v287 = v97;
          p_isa = v98;
          v67 = v98;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v66);
          *(_QWORD *)isa = v98;

          _os_log_impl((void *)&_mh_execute_header, v99, v100, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v18, 0x16u);
          v68 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(isa, 1, v68);
          swift_slowDealloc(isa, -1, -1);
          v69 = v288;
          swift_arrayDestroy(v288, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v18, -1, -1);

        }
        else
        {

        }
        a1 = v294;
        goto LABEL_45;
      }

    }
    if (v93 == 2)
      goto LABEL_150;
    if ((v93 & 1) != 0)
      v101 = 0x65746E49656D6974;
    else
      v101 = 0x44497463656A626FLL;
    if ((v93 & 1) != 0)
      v102 = 0xEC0000006C617672;
    else
      v102 = 0xE800000000000000;
    if (v101 == 0x44497463656A626FLL && v102 == 0xE800000000000000)
      goto LABEL_72;
    v103 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v101, v102, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v103 & 1) == 0)
    {
      if (v101 != 0x65746E49656D6974 || v102 != 0xEC0000006C617672)
      {
        v104 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746E49656D6974, 0xEC0000006C617672, v101, v102, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v104 & 1) == 0)
        {
LABEL_150:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v246 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v74);
          swift_willThrow(v246);

          v245 = v291;
LABEL_148:

          return;
        }
        goto LABEL_77;
      }
LABEL_72:
      swift_bridgeObjectRelease_n(v102, 2);
    }
LABEL_77:
    v105 = *(void **)(v91 + 88);
    v106 = sub_1000151B0(0, &qword_10084FBF8, off_1007D6678);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v106);
    v108 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v109 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v108, v105);
    v110 = v280;
    objc_msgSend(v105, "assignObject:toPersistentStore:", v109, v110);

    v111 = v109;
    v112 = objc_msgSend(v74, "uuid");
    v113 = (uint64_t)v281;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v112);

    v114 = v286;
    v115 = v293;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v286 + 56))(v113, 0, 1, v293);
    v116 = v282;
    sub_10011D420(v113, v282);
    v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v116, 1, v115);
    v118 = 0;
    if (v117 != 1)
    {
      v119 = v282;
      v118 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v288)(v119, v293);
    }
    objc_msgSend(v111, "setIdentifier:", v118, v251);

    sub_10011E85C(v113);
    v120 = v74;
    swift_retain_n(v91);
    v121 = v111;
    v122 = v120;
    v123 = (char *)v121;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter(v124);
    v126 = v125;
    v127 = os_log_type_enabled(v124, v125);
    v287 = v123;
    if (v127)
    {
      v128 = swift_slowAlloc(42, -1);
      v129 = (_QWORD *)swift_slowAlloc(16, -1);
      v278 = swift_slowAlloc(64, -1);
      v295 = v278;
      *(_DWORD *)v128 = v263.n128_u32[0];
      p_isa = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v295);
      LODWORD(v277) = v126;
      v130 = v272;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
      *(_WORD *)(v128 + 12) = 2082;
      sub_1000184A8(v268, (uint64_t)v297);
      sub_100671124((uint64_t)v297, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v132 = v131;
      v134 = v133;
      sub_100671124((uint64_t)v297, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      p_isa = (_QWORD *)sub_10001A820(v132, v134, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v130);
      swift_release_n(v91);
      swift_bridgeObjectRelease();
      *(_WORD *)(v128 + 22) = 2114;
      p_isa = v122;
      v135 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v130);
      *v129 = v122;

      *(_WORD *)(v128 + 32) = 2112;
      v136 = objc_msgSend(v287, "objectID");
      p_isa = v136;
      v123 = v287;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v130);
      v129[1] = v136;

      _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v277, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v128, 0x2Au);
      v137 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v129, 2, v137);
      swift_slowDealloc(v129, -1, -1);
      v138 = v278;
      swift_arrayDestroy(v278, 2, v262);
      swift_slowDealloc(v138, -1, -1);
      swift_slowDealloc(v128, -1, -1);

    }
    else
    {

      swift_release_n(v91);
    }
    swift_beginAccess(v269, &v295, 33, 0);
    v139 = v122;
    sub_1001912EC((uint64_t)v123, (uint64_t)v139);
    swift_endAccess(&v295);
    v278 = v139;

    v141 = 2;
    v277 = 2;
    v142 = &byte_1007E0720;
    do
    {
      if (((*(unsigned int *)(v91 + 64) | ((unint64_t)*(unsigned __int16 *)(v91 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v143 = *v142;
        v144 = Logger.logObject.getter(v140);
        v145 = static os_log_type_t.error.getter(v144);
        if (os_log_type_enabled(v144, v145))
        {
          v146 = swift_slowAlloc(12, -1);
          v147 = swift_slowAlloc(32, -1);
          v295 = v147;
          *(_DWORD *)v146 = v275.n128_u32[0];
          LOBYTE(p_isa) = v143;
          v148 = String.init<A>(describing:)(&p_isa, &type metadata for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey);
          *(_QWORD *)(v146 + 4) = sub_10001A820(v148, v149, (uint64_t *)&v295);
          v91 = v289;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v146, 0xCu);
          swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v147, -1, -1);
          swift_slowDealloc(v146, -1, -1);
        }

      }
      LODWORD(isa) = *(_DWORD *)(v91 + 64);
      if (*(unsigned __int16 *)(v91 + 68) >> 14 == 2 && (*(_DWORD *)(v91 + 64) & 1) == 0)
      {
        if (qword_100837928 == -1)
          goto LABEL_145;
        goto LABEL_170;
      }
      ++v142;
      --v141;
    }
    while (v141);
    swift_retain_n(v91);
    v151 = v278;
    v152 = v287;
    v153 = v151;
    v18 = v152;
    v154 = Logger.logObject.getter(v18);
    v155 = static os_log_type_t.default.getter(v154);
    v156 = os_log_type_enabled(v154, (os_log_type_t)v155);
    v287 = (char *)v153;
    if (v156)
    {
      LODWORD(v259) = v155;
      v278 = v154;
      isa = swift_slowAlloc(58, -1);
      v157 = swift_slowAlloc(16, -1);
      v276 = swift_slowAlloc(96, -1);
      v295 = v276;
      *(_DWORD *)isa = v260.n128_u32[0];
      p_isa = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v295);
      v158 = v272;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
      *(_WORD *)(isa + 12) = 2082;
      sub_1000184A8(v268, (uint64_t)v296);
      sub_100671124((uint64_t)v296, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v160 = v159;
      v162 = v161;
      sub_100671124((uint64_t)v296, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      p_isa = (_QWORD *)sub_10001A820(v160, v162, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v158);
      swift_release_n(v91);
      swift_bridgeObjectRelease();
      *(_WORD *)(isa + 22) = 2114;
      p_isa = &v153->isa;
      v163 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v158);
      v157->isa = (Class)v153;

      *(_WORD *)(isa + 32) = 2112;
      v164 = objc_msgSend((id)v18, "objectID");
      p_isa = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v158);
      v258 = v157;
      v157[1].isa = (Class)v164;

      *(_WORD *)(isa + 42) = 2082;
      v165 = 2;
      p_isa = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 2, 0);
      v166 = p_isa;
      v167 = p_isa[2];
      v168 = 2 * v167;
      v169 = &byte_1007E0720;
      do
      {
        if (*v169)
          v170 = 0x65746E49656D6974;
        else
          v170 = 0x44497463656A626FLL;
        if (*v169)
          v171 = 0xEC0000006C617672;
        else
          v171 = 0xE800000000000000;
        p_isa = v166;
        v172 = v166[3];
        v173 = v167 + 1;
        if (v167 >= v172 >> 1)
        {
          sub_1001C1B0C(v172 > 1, v167 + 1, 1);
          v166 = p_isa;
        }
        v166[2] = v173;
        v174 = &v166[v168];
        v174[4] = v170;
        v174[5] = v171;
        v168 += 2;
        ++v169;
        v167 = v173;
        --v165;
      }
      while (v165);
      v175 = Array.description.getter(v166, &type metadata for String);
      v177 = v176;
      swift_bridgeObjectRelease();
      p_isa = (_QWORD *)sub_10001A820(v175, v177, (uint64_t *)&v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
      swift_bridgeObjectRelease();
      *(_WORD *)(isa + 52) = 1024;
      v91 = v289;
      v178 = *(unsigned __int8 *)(v289 + 104);
      swift_release(v289);
      LODWORD(p_isa) = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v264);
      swift_release(v91);
      v179 = v278;
      _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v259, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)isa, 0x3Au);
      v180 = sub_10001A630((uint64_t *)&unk_100839E70);
      v181 = v258;
      swift_arrayDestroy(v258, 2, v180);
      swift_slowDealloc(v181, -1, -1);
      v182 = v276;
      swift_arrayDestroy(v276, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v182, -1, -1);
      swift_slowDealloc(isa, -1, -1);

    }
    else
    {

      swift_release_n(v91);
    }
    a1 = v294;
    v183 = 2;
    v184 = v291;
    v185 = &byte_1007E0720;
    do
    {
      if ((*v185 & 1) != 0)
      {
        -[NSObject timeInterval](v184, "timeInterval");
        objc_msgSend((id)v18, "setTimeInterval:");
      }
      else
      {
        v186 = -[NSObject remObjectID](v184, "remObjectID");
        v187 = objc_msgSend(v186, "uuid");

        v188 = v290;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v187);

        v189 = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, uint64_t))v288)(v188, v293);
        objc_msgSend((id)v18, "setIdentifier:", v189);

        v184 = v291;
      }
      ++v185;
      --v183;
    }
    while (v183);
    v190 = objc_msgSend((id)v18, "changedValues");
    v191 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v190, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v192 = v267;
    swift_beginAccess(v267, &v295, 33, 0);
    v193 = v287;
    swift_bridgeObjectRetain(v191);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v192);
    p_isa = (_QWORD *)*v192;
    *v192 = 0x8000000000000000;
    sub_10028C70C((uint64_t)v191, v193, isUniquelyReferenced_nonNull_native);
    *v192 = p_isa;

    swift_bridgeObjectRelease();
    swift_endAccess(&v295);
    v195 = *(unsigned __int8 *)(v91 + 104);
    if (v277 && (v195 & 1) != 0)
    {
      v196 = (id)v18;
      objc_msgSend(v196, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_45;
    }
    v197 = v193;
    swift_retain_n(v91);
    v6 = v91;
    v198 = v197;
    v199 = (id)v18;
    swift_bridgeObjectRetain(v191);
    v201 = Logger.logObject.getter(v200);
    v18 = static os_log_type_t.default.getter(v201);
    if (os_log_type_enabled(v201, (os_log_type_t)v18))
    {
      v254 = v18;
      v258 = v201;
      v259 = v199;
      isa = swift_slowAlloc(44, -1);
      v18 = swift_slowAlloc(8, -1);
      v255 = swift_slowAlloc(64, -1);
      v295 = v255;
      *(_DWORD *)isa = v257.n128_u32[0];
      p_isa = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v295);
      v288 = v191;
      v202 = v272;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
      *(_WORD *)(isa + 12) = 1024;
      swift_release(v6);
      LODWORD(p_isa) = v195;
      v203 = v264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v264);
      swift_release(v6);
      *(_WORD *)(isa + 18) = 1024;
      LODWORD(p_isa) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v203);
      *(_WORD *)(isa + 24) = 2114;
      p_isa = v198;
      v5 = v198;
      v204 = v202;
      v205 = v288;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v204);
      v253 = v18;
      *(_QWORD *)v18 = v198;

      v252 = (id)v5;
      v256 = (uint8_t *)isa;
      *(_WORD *)(isa + 34) = 2082;
      v16 = (uint64_t)v205[2].isa;
      if (!v16)
      {
        v206 = _swiftEmptyArrayStorage;
LABEL_142:
        v223 = v256;
        v224 = Array.description.getter(v206, &type metadata for String);
        v18 = v225;
        swift_bridgeObjectRelease();
        p_isa = (_QWORD *)sub_10001A820(v224, v18, (uint64_t *)&v295);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v272);
        swift_bridgeObjectRelease_n(v205, 2);
        swift_bridgeObjectRelease();
        v226 = v258;
        _os_log_impl((void *)&_mh_execute_header, v258, (os_log_type_t)v254, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v223, 0x2Cu);
        v227 = sub_10001A630((uint64_t *)&unk_100839E70);
        v228 = v253;
        swift_arrayDestroy(v253, 1, v227);
        swift_slowDealloc(v228, -1, -1);
        v229 = v255;
        swift_arrayDestroy(v255, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1, -1);
        swift_slowDealloc(v223, -1, -1);

        v230 = v259;
        goto LABEL_45;
      }
      p_isa = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v205);
      sub_1001C1B0C(0, v16, 0);
      v206 = p_isa;
      v207 = sub_100658CFC((uint64_t)v205);
      a1 = v208;
      v209 = 0;
      v210 = v205 + 8;
      v211 = (char)v205[4].isa;
      v276 = v208;
      v251 = (char *)&v205[11];
      v277 = v16;
      v278 = v205 + 8;
      while (2)
      {
        if (v207 < 0 || v207 >= 1 << v211)
          goto LABEL_152;
        isa = (unint64_t)v207 >> 6;
        v5 = 1 << v207;
        if (((uint64_t)v210[(unint64_t)v207 >> 6].isa & (1 << v207)) == 0)
          goto LABEL_153;
        if (HIDWORD(v205[4].isa) != (_DWORD)a1)
          goto LABEL_154;
        v287 = v209;
        v214 = (uint64_t)v205[6].isa + 16 * v207;
        v16 = *(_QWORD *)(v214 + 8);
        v288 = *(NSObject **)v214;
        p_isa = v206;
        v6 = v206[2];
        v215 = v206[3];
        v18 = v6 + 1;
        swift_bridgeObjectRetain(v16);
        if (v6 >= v215 >> 1)
        {
          sub_1001C1B0C(v215 > 1, v6 + 1, 1);
          v206 = p_isa;
        }
        v206[2] = v18;
        v216 = &v206[2 * v6];
        v216[4] = v288;
        v216[5] = v16;
        v211 = (char)v205[4].isa;
        v212 = 1 << v211;
        if (v207 >= 1 << v211)
          goto LABEL_155;
        v210 = v278;
        v217 = v278[isa].isa;
        if (((unint64_t)v217 & v5) == 0)
          goto LABEL_156;
        if (HIDWORD(v205[4].isa) != (_DWORD)a1)
          goto LABEL_157;
        v218 = (unint64_t)v217 & (-2 << (v207 & 0x3F));
        if (v218)
        {
          v212 = __clz(__rbit64(v218)) | v207 & 0xFFFFFFFFFFFFFFC0;
          v16 = v277;
        }
        else
        {
          v219 = isa + 1;
          v220 = (v212 + 63) >> 6;
          v16 = v277;
          if (isa + 1 < v220)
          {
            v221 = (unint64_t)v278[v219].isa;
            if (v221)
            {
LABEL_131:
              v213 = v287;
LABEL_132:
              v212 = __clz(__rbit64(v221)) + (v219 << 6);
              goto LABEL_118;
            }
            v219 = isa + 2;
            if (isa + 2 < v220)
            {
              v221 = (unint64_t)v278[v219].isa;
              if (v221)
                goto LABEL_131;
              v222 = v220 - 3;
              v213 = v287;
              while (v222 != isa)
              {
                v221 = *(_QWORD *)&v251[8 * isa++];
                if (v221)
                {
                  v219 = isa + 2;
                  goto LABEL_132;
                }
              }
LABEL_118:
              v209 = v213 + 1;
              a1 = v276;
              v207 = v212;
              if (v209 == (char *)v16)
              {
                swift_bridgeObjectRelease();
                a1 = v294;
                goto LABEL_142;
              }
              continue;
            }
          }
        }
        break;
      }
      v213 = v287;
      goto LABEL_118;
    }

    swift_bridgeObjectRelease_n(v191, 2);
    swift_release_n(v6);
LABEL_45:
    v23 = v270;
    v65 = v273;
    v5 = (uint64_t)v285;
    if (v273 == v270)
      goto LABEL_143;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_1005F9210(uint64_t a1, uint64_t a2, char *a3)
{
  char *v3;
  uint8_t *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char *v65;
  id v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  id v71;
  BOOL v72;
  NSObject *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint8_t *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  id v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  char v91;
  char *v92;
  unint64_t v93;
  Swift::OpaquePointer v94;
  char v95;
  uint64_t v96;
  id v97;
  unint64_t v98;
  char v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t *v104;
  id v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _OWORD v112[6];
  __n128 v113;
  char *v114;
  __n128 v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  NSObject *v122;
  unint64_t v123;
  char *v124;
  const char *v125;
  uint64_t *v126;
  NSObject *v127;
  __n128 v128;
  unint64_t v129;
  char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;

  v5 = v3;
  v139 = a2;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v135 = (char *)v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v138 = (char *)v112 - v11;
  v142 = type metadata accessor for UUID(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v137 = (char *)v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v136 = (char *)v112 - v14;
  v15 = type metadata accessor for Logger(0);
  v134 = *(id *)(v15 - 8);
  __chkstk_darwin(v15);
  v143 = (char *)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = a3;
  v18 = *((_QWORD *)a3 + 2);
  v17 = (char *)*((_QWORD *)a3 + 3);
  v133 = *((_QWORD *)a3 + 4);
  v19 = qword_1008371E8;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v20 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v17);
  v146 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  v24 = os_log_type_enabled(v22, (os_log_type_t)v23);
  v25 = (unint64_t)a1 >> 62;
  v148 = a1;
  v140 = v15;
  v145 = (id)((unint64_t)a1 >> 62);
  if (!v24)
  {

    swift_bridgeObjectRelease_n(v17, 2);
    v35 = swift_bridgeObjectRelease_n(a1, 2);
    goto LABEL_8;
  }
  v131 = v23;
  v4 = (uint8_t *)swift_slowAlloc(42, -1);
  v26 = (char *)swift_slowAlloc(96, -1);
  v149 = v26;
  *(_DWORD *)v4 = 136446978;
  v150 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v149);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
  *((_WORD *)v4 + 6) = 2048;
  v132 = v18;
  v130 = v26;
  if (v25)
    goto LABEL_74;
  v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v150 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
    swift_bridgeObjectRelease();
    *((_WORD *)v4 + 11) = 2082;
    v28 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    a1 = v148;
    v150 = sub_10001A820(v30, v32, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
    swift_bridgeObjectRelease();
    *((_WORD *)v4 + 16) = 2082;
    swift_bridgeObjectRetain(v17);
    v150 = sub_10001A820(v132, (unint64_t)v17, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v131, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", v4, 0x2Au);
    v33 = v130;
    swift_arrayDestroy(v130, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v4, -1, -1);

    v15 = v140;
    v25 = (unint64_t)v145;
LABEL_8:
    if (v25)
    {
      if (a1 < 0)
        v108 = a1;
      else
        v108 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v36 = _CocoaArrayWrapper.endIndex.getter(v108);
      v35 = swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v37 = (char *)_swiftEmptyArrayStorage;
    if (!v36)
    {
LABEL_20:
      v47 = *(_QWORD *)(v147 + 96);
      if (v47 <= 1)
      {
        if (v47)
        {
          if (v47 != 1)
            goto LABEL_79;
          swift_bridgeObjectRelease();
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v62, v63))
          {
            v64 = (uint8_t *)swift_slowAlloc(12, -1);
            v65 = (char *)swift_slowAlloc(32, -1);
            v149 = v65;
            *(_DWORD *)v64 = 136315138;
            v143 = (char *)(v64 + 4);
            v66 = objc_msgSend((id)objc_opt_self(REMCDAlarm), "cdEntityName");
            v4 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
            v68 = v67;

            v150 = sub_10001A820((uint64_t)v4, v68, (uint64_t *)&v149);
            a1 = v148;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Skipping fetch during upsert {CDType: %s}", v64, 0xCu);
            swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v65, -1, -1);
            swift_slowDealloc(v64, -1, -1);
          }

          v17 = v144;
          v129 = sub_1002B0958((uint64_t)_swiftEmptyArrayStorage);
          if (!v145)
          {
LABEL_32:
            v22 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v22)
            {
LABEL_65:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
LABEL_42:
            v70 = 0;
            v120 = v147 + 24;
            v121 = v17 + 48;
            v119 = v17 + 56;
            v123 = a1 & 0xC000000000000001;
            v118 = a1 & 0xFFFFFFFFFFFFFF8;
            v117 = a1 + 32;
            v126 = &v151;
            v116 = (char *)&v150 + 4;
            v60.n128_u64[0] = 136446978;
            v115 = v60;
            v60.n128_u64[0] = 136446210;
            v128 = v60;
            v60.n128_u64[0] = 136447490;
            v112[5] = v60;
            v125 = "reminderIdentifier";
            v60.n128_u64[0] = 136447234;
            v112[4] = v60;
            v60.n128_u64[0] = 136446466;
            v113 = v60;
            v124 = "nfoChecksum";
            v114 = (char *)&type metadata for Any + 8;
            v122 = v22;
            while (1)
            {
              if (v123)
              {
                v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, a1);
                v72 = __OFADD__(v70, 1);
                v73 = ((char *)&v70->isa + 1);
                if (v72)
                  goto LABEL_73;
              }
              else
              {
                if ((unint64_t)v70 >= *(_QWORD *)(v118 + 16))
                {
                  __break(1u);
                  JUMPOUT(0x1005FBA98);
                }
                v71 = *(id *)(v117 + 8 * (_QWORD)v70);
                v72 = __OFADD__(v70, 1);
                v73 = ((char *)&v70->isa + 1);
                if (v72)
                  goto LABEL_73;
              }
              v127 = v73;
              v74 = v71;
              v75 = sub_1005CCBAC(objc_msgSend(v74, "remObjectID"), (unint64_t *)&unk_1008398F0, off_1007D6660);
              if (v5)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                return;
              }
              v76 = v75;
              v143 = 0;
              v134 = v74;

              v77 = objc_msgSend(*(id *)(v139 + 16), "uuid");
              v78 = v136;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v77);

              v80 = UUID.uuidString.getter(v79);
              v82 = v81;
              v83 = *(void (**)(char *, uint64_t))(v141 + 8);
              v84 = v142;
              v83(v78, v142);
              v85 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
              v86 = objc_msgSend(v85, "uuid");

              v87 = v137;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v86);

              v89 = UUID.uuidString.getter(v88);
              v4 = v90;
              v145 = v83;
              v83(v87, v84);
              if (v80 == v89 && v82 == v4)
              {
                swift_bridgeObjectRelease_n(v82, 2);
LABEL_56:
                __asm { BR              X10 }
              }
              v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v89, v4, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v91 & 1) != 0)
                goto LABEL_56;
              v92 = v143;
              v93 = v129;
              v94._rawValue = &off_1007DE570;
              v95 = sub_1005CFEE4(v94, (unint64_t *)&unk_1008398F0, off_1007D6660);
              v96 = *(_QWORD *)(v93 + 16);
              v143 = v92;
              if (!v96)
                break;
              v97 = v76;
              v98 = sub_1002C672C(v97);
              if ((v99 & 1) == 0)
              {

                break;
              }
              v17 = (char *)*(id *)(*(_QWORD *)(v93 + 56) + 8 * v98);

              v100 = v97;
              v101 = Logger.logObject.getter(v100);
              v102 = static os_log_type_t.info.getter(v101);
              if (os_log_type_enabled(v101, v102))
              {
                v103 = swift_slowAlloc(22, -1);
                v4 = (uint8_t *)swift_slowAlloc(8, -1);
                v144 = (char *)swift_slowAlloc(32, -1);
                v149 = v144;
                *(_DWORD *)v103 = v113.n128_u32[0];
                v150 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v149);
                v145 = v17;
                v104 = v126;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v126);
                *(_WORD *)(v103 + 12) = 2114;
                v150 = (uint64_t)v100;
                v105 = v100;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v104);
                *(_QWORD *)v4 = v100;

                _os_log_impl((void *)&_mh_execute_header, v101, v102, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v103, 0x16u);
                v106 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v4, 1, v106);
                swift_slowDealloc(v4, -1, -1);
                v17 = v144;
                swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v17, -1, -1);
                swift_slowDealloc(v103, -1, -1);

              }
              else
              {

              }
              a1 = v148;
              v5 = v143;
              v70 = v127;
              v22 = v122;
              if (v127 == v122)
                goto LABEL_65;
            }
            if (v95 != 5)
              JUMPOUT(0x1005FA084);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v107 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v76);
            swift_willThrow(v107);

            return;
          }
LABEL_38:
          if (a1 < 0)
            v69 = a1;
          else
            v69 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v22 = _CocoaArrayWrapper.endIndex.getter(v69);
          v60 = swift_bridgeObjectRelease();
          if (!v22)
            goto LABEL_65;
          goto LABEL_42;
        }
      }
      else if ((unint64_t)(v47 - 2) >= 3 && v47 != 4499 && v47 != 4599)
      {
LABEL_79:
        (*((void (**)(char *, uint64_t, uint64_t, __n128))v134 + 2))(v143, v146, v15, v35);
        v110 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v111 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v110, v111);
        __break(1u);
        JUMPOUT(0x1005FBB10);
      }
      v49 = Logger.logObject.getter(v34);
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = (_QWORD *)swift_slowAlloc(32, -1);
        v143 = v37;
        v53 = v52;
        v149 = (char *)v52;
        *(_DWORD *)v51 = 136315138;
        v134 = v51 + 4;
        v4 = (uint8_t *)objc_msgSend((id)objc_opt_self(REMCDAlarm), "cdEntityName");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v56 = v55;

        v150 = sub_10001A820(v54, v56, (uint64_t *)&v149);
        a1 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Performing fetch during upsert {CDType: %s}", v51, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        v57 = v53;
        v37 = v143;
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }

      v17 = v144;
      sub_1006463D0((uint64_t)v37, (uint64_t)v144);
      v59 = v58;
      v60 = swift_bridgeObjectRelease();
      if (v5)
      {
        swift_bridgeObjectRelease();
        return;
      }
      v129 = v59;
      if (!v145)
        goto LABEL_32;
      goto LABEL_38;
    }
    v149 = (char *)_swiftEmptyArrayStorage;
    v22 = &v149;
    specialized ContiguousArray.reserveCapacity(_:)(v36);
    if ((v36 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    if (a1 < 0)
      v109 = a1;
    else
      v109 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v109);
    swift_bridgeObjectRelease();
  }
  v38 = 0;
  v4 = (uint8_t *)(a1 & 0xC000000000000001);
  while (1)
  {
    if (v36 == v38)
    {
      __break(1u);
      JUMPOUT(0x1005FBA04);
    }
    v39 = v4 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, a1) : *(id *)(a1 + 8 * v38 + 32);
    v40 = v39;
    v41 = sub_1005CCBAC(objc_msgSend(v40, "remObjectID"), (unint64_t *)&unk_1008398F0, off_1007D6660);
    if (v5)
      break;
    v42 = v41;
    ++v38;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
    v44 = *((_QWORD *)v149 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
    v45 = v44;
    a1 = v148;
    v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v42);
    v34 = specialized ContiguousArray._endMutation()(v46);
    if (v36 == v38)
    {
      v37 = v149;
      v15 = v140;
      goto LABEL_20;
    }
  }

  v48 = v149;
  swift_bridgeObjectRelease();
  swift_release(v48);
}

void sub_1005FBBFC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint8_t *v54;
  const char *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  const char *v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  BOOL v80;
  unint64_t v81;
  id v82;
  void *v83;
  void *v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  id v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  id v103;
  unint64_t v104;
  char v105;
  id v106;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  id v113;
  uint64_t v114;
  _QWORD *v115;
  const char *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD v122[6];
  char *v123;
  __n128 v124;
  __n128 v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  __n128 v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  const char *v139;
  id v140;
  uint64_t v141;
  char *v142;
  id v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  const char *v148;
  const char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;

  v5 = v4;
  v6 = v3;
  v147 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v142 = (char *)v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v144 = (char *)v122 - v12;
  v152 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v146 = (char *)v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v145 = (char *)v122 - v15;
  v16 = type metadata accessor for Logger(0);
  v148 = *(const char **)(v16 - 8);
  __chkstk_darwin(v16);
  v149 = (char *)v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)*((_QWORD *)a3 + 2);
  v18 = *((_QWORD *)a3 + 3);
  v151 = a3;
  v141 = *((_QWORD *)a3 + 4);
  v20 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v20 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v21 = sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v154 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  v25 = os_log_type_enabled(v23, (os_log_type_t)v24);
  v26 = (unint64_t)a1 >> 62;
  v155 = v6;
  v156 = a1;
  v153 = (unint64_t)a1 >> 62;
  v138 = v16;
  if (v25)
  {
    LODWORD(v140) = v24;
    v143 = v19;
    v27 = swift_slowAlloc(42, -1);
    v28 = (const char *)swift_slowAlloc(96, -1);
    v157 = v28;
    *(_DWORD *)v27 = 136446978;
    v158 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
    *(_WORD *)(v27 + 12) = 2048;
    v139 = v28;
    if (v26)
    {
      if (a1 < 0)
        v119 = a1;
      else
        v119 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v29 = _CocoaArrayWrapper.endIndex.getter(v119);
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v158 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2082;
    v30 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v30), "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v158 = sub_10001A820(v32, v34, (uint64_t *)&v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 32) = 2082;
    a1 = v156;
    swift_bridgeObjectRetain(v18);
    v158 = sub_10001A820((uint64_t)v143, v18, (uint64_t *)&v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v140, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v27, 0x2Au);
    v35 = v139;
    swift_arrayDestroy(v139, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v26 = v153;
  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  if (v26)
  {
    if (a1 < 0)
      v118 = a1;
    else
      v118 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v37 = _CocoaArrayWrapper.endIndex.getter(v118);
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v37)
  {
    v47 = (const char *)_swiftEmptyArrayStorage;
LABEL_21:
    v48 = v155;
    v49 = *(_QWORD *)(v155 + 96);
    if (v49 <= 1)
    {
      if (v49)
      {
        if (v49 != 1)
          goto LABEL_80;
        swift_bridgeObjectRelease();
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(12, -1);
          v70 = (const char *)swift_slowAlloc(32, -1);
          v157 = v70;
          *(_DWORD *)v69 = 136315138;
          v149 = (const char *)(v69 + 4);
          v71 = objc_msgSend((id)objc_opt_self(REMCDAssignment), "cdEntityName");
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
          v74 = v73;

          v75 = v72;
          a1 = v156;
          v158 = sub_10001A820(v75, v74, (uint64_t *)&v157);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Skipping fetch during upsert {CDType: %s}", v69, 0xCu);
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          v48 = v155;
          swift_slowDealloc(v69, -1, -1);
        }

        v61 = v151;
        v63 = sub_1002B0964((uint64_t)_swiftEmptyArrayStorage);
        if (!v153)
        {
LABEL_33:
          v65 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v65)
          {
LABEL_65:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_43:
          v128 = v48 + 24;
          v77 = 0;
          v131 = v61 + 48;
          v127 = v61 + 56;
          v78 = a1 & 0xC000000000000001;
          v130 = a1 & 0xFFFFFFFFFFFFFF8;
          v129 = a1 + 32;
          v134 = &v159;
          v126 = (char *)&v158 + 4;
          v64.n128_u64[0] = 136446978;
          v124 = v64;
          v64.n128_u64[0] = 136446210;
          v135 = v64;
          v64.n128_u64[0] = 136447490;
          v122[5] = v64;
          v151 = "ookItemsIntent";
          v149 = "ckAssigneeIdentifier";
          v64.n128_u64[0] = 136447234;
          v122[4] = v64;
          v64.n128_u64[0] = 136446466;
          v125 = v64;
          v148 = "ckOriginatorIdentifier";
          v123 = (char *)&type metadata for Any + 8;
          v137 = v63;
          v133 = v65;
          v132 = a1 & 0xC000000000000001;
          while (1)
          {
            if (v78)
            {
              v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77, a1);
              v80 = __OFADD__(v77, 1);
              v81 = v77 + 1;
              if (v80)
                goto LABEL_78;
            }
            else
            {
              if (v77 >= *(_QWORD *)(v130 + 16))
                goto LABEL_79;
              v79 = *(id *)(v129 + 8 * v77);
              v80 = __OFADD__(v77, 1);
              v81 = v77 + 1;
              if (v80)
              {
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
                JUMPOUT(0x1005FE0A0);
              }
            }
            v136 = v81;
            v82 = v79;
            v83 = sub_1005CCBAC(objc_msgSend(v82, "remObjectID"), &qword_100840020, off_1007D6690);
            if (v5)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return;
            }
            v84 = v83;
            v153 = 0;
            v143 = v82;

            v85 = objc_msgSend(*(id *)(v147 + 16), "uuid");
            v86 = v145;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

            v88 = UUID.uuidString.getter(v87);
            v90 = v89;
            v91 = *(void (**)(char *, uint64_t))(v150 + 8);
            v92 = v152;
            v91(v86, v152);
            v93 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
            v94 = objc_msgSend(v93, "uuid");

            v95 = v146;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

            v97 = UUID.uuidString.getter(v96);
            v99 = v98;
            v91(v95, v92);
            if (v88 == v97 && v90 == v99)
            {
              swift_bridgeObjectRelease_n(v90, 2);
LABEL_55:
              __asm { BR              X10 }
            }
            v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v90, v97, v99, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v100 & 1) != 0)
              goto LABEL_55;
            v101 = v137;
            v102 = sub_1005CF94C();
            if (!*(_QWORD *)(v101 + 16))
              break;
            v103 = v84;
            v104 = sub_1002C672C(v103);
            if ((v105 & 1) == 0)
            {

              break;
            }
            v106 = *(id *)(*(_QWORD *)(v101 + 56) + 8 * v104);

            v107 = v103;
            v108 = Logger.logObject.getter(v107);
            v109 = static os_log_type_t.info.getter(v108);
            if (os_log_type_enabled(v108, v109))
            {
              v110 = swift_slowAlloc(22, -1);
              v111 = (_QWORD *)swift_slowAlloc(8, -1);
              v139 = (const char *)swift_slowAlloc(32, -1);
              v157 = v139;
              *(_DWORD *)v110 = v125.n128_u32[0];
              v140 = v106;
              v158 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v157);
              v112 = v134;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v134);
              *(_WORD *)(v110 + 12) = 2114;
              v158 = (uint64_t)v107;
              v113 = v107;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v112);
              *v111 = v107;

              _os_log_impl((void *)&_mh_execute_header, v108, v109, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v110, 0x16u);
              v114 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v111, 1, v114);
              v115 = v111;
              a1 = v156;
              swift_slowDealloc(v115, -1, -1);
              v116 = v139;
              swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v116, -1, -1);
              swift_slowDealloc(v110, -1, -1);

            }
            else
            {

            }
            v5 = v153;
            v77 = v136;
            v78 = v132;
            if (v136 == v133)
              goto LABEL_65;
          }
          if (v102 != 6)
            JUMPOUT(0x1005FCA10);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v117 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v84);
          swift_willThrow(v117);

          return;
        }
LABEL_39:
        if (a1 < 0)
          v76 = a1;
        else
          v76 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v65 = _CocoaArrayWrapper.endIndex.getter(v76);
        v64 = swift_bridgeObjectRelease();
        if (!v65)
          goto LABEL_65;
        goto LABEL_43;
      }
    }
    else if ((unint64_t)(v49 - 2) >= 3 && v49 != 4499 && v49 != 4599)
    {
LABEL_80:
      (*((void (**)(const char *, uint64_t, uint64_t))v148 + 2))(v149, v154, v138);
      v120 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v121 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v120, v121);
      __break(1u);
      JUMPOUT(0x1005FE120);
    }
    v51 = Logger.logObject.getter(v36);
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(12, -1);
      v149 = v47;
      v54 = (uint8_t *)v53;
      v55 = (const char *)swift_slowAlloc(32, -1);
      v157 = v55;
      *(_DWORD *)v54 = 136315138;
      v148 = (const char *)(v54 + 4);
      v56 = objc_msgSend((id)objc_opt_self(REMCDAssignment), "cdEntityName");
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      v158 = sub_10001A820(v57, v59, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Performing fetch during upsert {CDType: %s}", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      v60 = v54;
      v47 = v149;
      v48 = v155;
      swift_slowDealloc(v60, -1, -1);
    }

    v61 = v151;
    sub_1006467F0((uint64_t)v47, (uint64_t)v151);
    v63 = v62;
    v64 = swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return;
    }
    a1 = v156;
    if (!v153)
      goto LABEL_33;
    goto LABEL_39;
  }
  v157 = (const char *)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v37);
  if (v37 < 0)
  {
    __break(1u);
    JUMPOUT(0x1005FE054);
  }
  v38 = 0;
  v39 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v37 == v38)
    {
      __break(1u);
      JUMPOUT(0x1005FDFE0);
    }
    v40 = v39
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v156)
        : *(id *)(v156 + 8 * v38 + 32);
    v41 = v40;
    v42 = sub_1005CCBAC(objc_msgSend(v41, "remObjectID"), &qword_100840020, off_1007D6690);
    if (v5)
      break;
    v43 = v42;
    ++v38;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v44);
    v45 = *((_QWORD *)v157 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v45);
    v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v43);
    v36 = specialized ContiguousArray._endMutation()(v46);
    if (v37 == v38)
    {
      a1 = v156;
      v47 = v157;
      goto LABEL_21;
    }
  }

  v50 = v157;
  swift_bridgeObjectRelease();
  swift_release(v50);
}

