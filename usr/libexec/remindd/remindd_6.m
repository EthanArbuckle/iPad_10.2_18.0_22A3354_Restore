id sub_1003A5340(Class *a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v17;
  id v18;
  _BYTE v19[32];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v17 = type metadata accessor for NSFastEnumerationIterator(0);
  v4 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone(*a1), "init");
  v8 = a2();
  NSFastEnumerationIterator.next()(v8);
  while (v23)
  {
    sub_10001A6CC(&v22, &v20);
    sub_10001A670((uint64_t)&v20, (uint64_t)v19);
    v13 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    if (swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, v13, 6))
    {
      v14 = v18;
      v15 = objc_msgSend(v18, "jsonify");
      objc_msgSend(v7, "addObject:", v15);

    }
    else
    {
      v9 = v21;
      v10 = sub_10000A388(&v20, v21);
      v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
      objc_msgSend(v7, "addObject:", v11);
      swift_unknownObjectRelease(v11);
    }
    v12 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v20);
    NSFastEnumerationIterator.next()(v12);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  return v7;
}

id sub_1003A553C()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v22;
  id v23[3];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  _QWORD v28[3];
  uint64_t v29;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  v2 = objc_msgSend(v0, "allKeys");
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    do
    {
      sub_10001A670(v5, (uint64_t)v28);
      v12 = v29;
      v13 = sub_10000A388(v28, v29);
      v14 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v12);
      v15 = objc_msgSend(v0, "__swift_objectForKeyedSubscript:", v14);
      swift_unknownObjectRelease(v14);
      if (v15)
      {
        _bridgeAnyObjectToAny(_:)(&v25, v15);
        swift_unknownObjectRelease(v15);
        sub_10001A6CC(&v25, v27);
        sub_10001A670((uint64_t)v27, (uint64_t)&v25);
        v16 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
        if (swift_dynamicCast(v23, &v25, (char *)&type metadata for Any + 8, v16, 6))
        {
          v17 = v23[0];
          v18 = objc_msgSend(v23[0], "jsonify");
          v26 = v16;

          *(_QWORD *)&v25 = v18;
        }
        else
        {
          sub_10001A670((uint64_t)v27, (uint64_t)&v25);
        }
        sub_10001A670((uint64_t)v28, (uint64_t)v23);
        if (swift_dynamicCast(&v22, v23, (char *)&type metadata for Any + 8, v16, 6))
        {
          v19 = v22;
          v20 = objc_msgSend(v22, "jsonify");
          v24 = v16;

          v23[0] = v20;
        }
        else
        {
          sub_10001A670((uint64_t)v28, (uint64_t)v23);
        }
        v6 = v26;
        v7 = sub_10000A388(&v25, v26);
        v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v6);
        v9 = v24;
        v10 = sub_10000A388(v23, v24);
        v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
        objc_msgSend(v1, "__swift_setObject:forKeyedSubscript:", v8, v11);
        swift_unknownObjectRelease(v8);
        swift_unknownObjectRelease(v11);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v25);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1003A5818()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  qword_100871EB8 = (uint64_t)result;
  return result;
}

void sub_1003A58C4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  id v26;
  id v27;
  Swift::String v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  void *v55;
  void *v56;
  unsigned int v57;
  id v58;
  id v59;
  void *v60;
  void *v61;
  unsigned int v62;
  id v63;
  int v64;
  uint64_t v65;
  char **v66;
  __int128 v67;
  uint64_t v68;
  char **v69;
  id v70;
  dispatch_group_t v71;
  id v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  id v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  double v94;
  id v95;
  uint64_t v96;
  void *v97;
  void *v98;
  Swift::String v99;
  uint64_t v100;
  unint64_t v101;
  Swift::String v102;
  id v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  unint64_t v108;
  __n128 v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  __n128 v120;
  uint64_t v121;
  NSURL *v122;
  void *v123;
  void *v124;
  unsigned int v125;
  uint64_t v126;
  id v127;
  id v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  id v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  void *v156;
  id v157;
  uint64_t v158;
  id v159;
  Class v160;
  uint64_t v161;
  NSObject *v162;
  void *v163;
  uint64_t v164;
  NSObject *v165;
  objc_class *v166;
  uint64_t v167;
  id v168;
  void (*v169)(uint64_t, uint64_t);
  uint64_t v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  char *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t);
  void *v182;
  Swift::String v183;
  Swift::String v184;
  Swift::String v185;
  unint64_t v186;
  NSString v187;
  id v188;
  void *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  NSString v193;
  id v194;
  int v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  __int128 v200;
  char *v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  char *v206;
  NSString *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  void *v214;
  char *v215;
  uint64_t v216;
  NSObject *v217;
  id v218;
  char *v219;
  char *v220;
  id v221;
  Class isa;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(char *, char *, uint64_t);
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t, __n128);
  void *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t aBlock;
  unint64_t v236;
  uint64_t (*v237)(uint64_t);
  void *v238;
  void (*v239)();
  uint64_t v240;
  uint64_t v241;
  char v242[8];
  NSURL v243;
  Swift::OpaquePointer_optional v244;
  Swift::OpaquePointer_optional v245;

  v198 = a4;
  v232 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v213 = (char *)&v194 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v231 = (char *)&v194 - v10;
  __chkstk_darwin(v11);
  v215 = (char *)&v194 - v12;
  __chkstk_darwin(v13);
  v220 = (char *)&v194 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v194 - v16;
  __chkstk_darwin(v18);
  v20 = (uint64_t)&v194 - v19;
  v216 = v21;
  __chkstk_darwin(v22);
  v219 = (char *)&v194 - v23;
  v230 = a2;
  v24 = String._bridgeToObjectiveC()();
  v214 = a3;
  v25 = objc_msgSend(a3, "containerForAccountID:", v24);

  v199 = v25;
  if (!v25)
  {
    if (qword_100837390 != -1)
      swift_once(&qword_100837390, sub_1003A3B28);
    v44 = type metadata accessor for Logger(0);
    sub_10001AAA8(v44, (uint64_t)qword_100847DC8);
    v45 = swift_bridgeObjectRetain_n(v230, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      aBlock = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = (unint64_t)v230;
      swift_bridgeObjectRetain(v230);
      v241 = sub_10001A820(a1, v50, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, v242);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to fetch CKContainer for accountID {accountID: %s}", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v230, 2);
    }
    v182 = (void *)objc_opt_self(REMError);
    aBlock = 0;
    v236 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v183._object = (void *)0x80000001007020B0;
    v183._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v183);
    v184._countAndFlagsBits = a1;
    v184._object = v230;
    String.append(_:)(v184);
    v185._countAndFlagsBits = 125;
    v185._object = (void *)0xE100000000000000;
    String.append(_:)(v185);
    v186 = v236;
    v187 = String._bridgeToObjectiveC()();
    v188 = objc_msgSend(v182, "internalErrorWithDebugDescription:", v187, swift_bridgeObjectRelease(v186).n128_f64[0]);

    v189 = (void *)_convertErrorToNSError(_:)(v188);
    (*(void (**)(uint64_t, _QWORD, void *))(v198 + 16))(v198, 0, v189);

    return;
  }
  v26 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v27 = objc_msgSend(v26, "temporaryDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

  aBlock = a1;
  v236 = (unint64_t)v230;
  swift_bridgeObjectRetain(v230);
  v28._countAndFlagsBits = 0x6E6961746E6F632DLL;
  v28._object = (void *)0xEA00000000007265;
  String.append(_:)(v28);
  v29 = v236;
  URL.appendingPathComponent(_:)(aBlock, v236);
  v30 = swift_bridgeObjectRelease(v29);
  v229 = *(void (**)(uint64_t, uint64_t, __n128))(v7 + 8);
  v229(v20, v232, v30);
  if (qword_100837390 != -1)
    goto LABEL_56;
LABEL_3:
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001AAA8(v31, (uint64_t)qword_100847DC8);
  v227 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
  v33 = v227(v17, v219, v232);
  v228 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v221 = v26;
  v211 = v7;
  v210 = v20;
  v203 = a1;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    aBlock = v38;
    *(_DWORD *)v37 = 136315138;
    v39 = URL.path.getter(v38);
    v41 = v40;
    v241 = sub_10001A820(v39, v40, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, v242);
    v42 = swift_bridgeObjectRelease(v41);
    v229((uint64_t)v17, v232, v42);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "downloadContainer outputDirURL: %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    v43 = v38;
    v26 = v221;
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v229)(v17, v232);
  }

  URL.path.getter(v51);
  v53 = v52;
  v54 = String._bridgeToObjectiveC()();
  LODWORD(v53) = objc_msgSend(v26, "fileExistsAtPath:", v54, swift_bridgeObjectRelease(v53).n128_f64[0]);

  a1 = (uint64_t)v220;
  if ((_DWORD)v53)
  {
    URL._bridgeToObjectiveC()(&v243);
    v56 = v55;
    aBlock = 0;
    v57 = objc_msgSend(v26, "removeItemAtURL:error:", v55, &aBlock);

    v58 = (id)aBlock;
    if (!v57)
      goto LABEL_49;
    v59 = (id)aBlock;
  }
  URL._bridgeToObjectiveC()(&v243);
  v61 = v60;
  aBlock = 0;
  v62 = objc_msgSend(v26, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v60, 1, 0, &aBlock);

  v58 = (id)aBlock;
  if (v62)
  {
    v194 = (id)objc_opt_self(CKFetchRecordZonesOperation);
    v207 = CKCurrentUserDefaultName;
    v206 = &v234;
    v205 = v216 + 7;
    v63 = v58;
    v64 = 0;
    v65 = 0;
    v66 = &selRef_rd_isExcludedFromBackup;
    *(_QWORD *)&v67 = 136315138;
    v202 = v67;
    v201 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v67 = 138412546;
    v200 = v67;
    v204 = xmmword_1006A7330;
    while (1)
    {
      v195 = v64;
      v91 = *(&off_1007DCCD8 + v65 + 4) == (_UNKNOWN *)2;
      v69 = &selRef_privateCloudDatabase;
      if (!v91)
        v69 = &selRef_sharedCloudDatabase;
      v70 = objc_msgSend(v199, *v69);
      v71 = dispatch_group_create();
      v72 = objc_msgSend(v194, "fetchAllRecordZonesOperation");
      v73 = swift_allocObject(&unk_1007F19C0, 24, 7);
      *(_QWORD *)(v73 + 16) = _swiftEmptyArrayStorage;
      v74 = (uint64_t *)(v73 + 16);
      swift_retain();
      v197 = v73;
      CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter(sub_1003A6FF0, v73);
      CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter(sub_1003A3EDC, 0);
      v75 = swift_allocObject(&unk_1007F19E8, 24, 7);
      *(_QWORD *)(v75 + 16) = v71;
      v239 = sub_1003A6FFC;
      v240 = v75;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v236 = 1107296256;
      v237 = sub_1000094C8;
      v238 = &unk_1007F1AA0;
      v76 = _Block_copy(&aBlock);
      v77 = v240;
      v78 = v72;
      v79 = v71;
      sub_1000E51CC((uint64_t)sub_1003A6FFC, v75);
      swift_release(v77);
      objc_msgSend(v78, "setCompletionBlock:", v76);
      _Block_release(v76);

      swift_release(v75);
      dispatch_group_enter(v79);
      objc_msgSend(v78, "setDatabase:", v70);
      v218 = v70;
      v196 = v78;
      objc_msgSend(v70, "addOperation:", v78);
      v217 = v79;
      OS_dispatch_group.wait()();
      swift_beginAccess(v74, &v241, 0, 0);
      v80 = *v74;
      if ((unint64_t)*v74 >> 62)
      {
        v170 = v80 < 0 ? *v74 : v80 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*v74, 2);
        v81 = _CocoaArrayWrapper.endIndex.getter(v170);
        swift_bridgeObjectRelease(v80);
      }
      else
      {
        v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v80);
      }
      v26 = v221;
      if (v81)
        break;
LABEL_15:

      swift_bridgeObjectRelease(v80);
      swift_release(v197);

      v64 = 1;
      v65 = 1;
      if ((v195 & 1) != 0)
      {
        v190 = v219;
        URL.path.getter(v68);
        v192 = v191;
        v193 = String._bridgeToObjectiveC()();
        (*(void (**)(uint64_t, NSString, _QWORD))(v198 + 16))(v198, v193, 0);

        swift_bridgeObjectRelease(v192);
        v175 = v190;
        goto LABEL_50;
      }
    }
    v7 = v80 & 0xC000000000000001;
    v20 = 4;
    v209 = v81;
    v208 = v80 & 0xC000000000000001;
    v212 = v80;
    while (1)
    {
      v17 = (char *)(v20 - 4);
      if (v7)
        v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v80);
      else
        v82 = *(id *)(v80 + 8 * v20);
      v83 = v82;
      v84 = v20 - 3;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
        __break(1u);
LABEL_56:
        swift_once(&qword_100837390, sub_1003A3B28);
        goto LABEL_3;
      }
      if (objc_msgSend(v82, v66[417]))
      {

        goto LABEL_23;
      }
      v85 = objc_msgSend(v83, "ownerName");
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v88 = v87;

      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
      v91 = v86 == v89 && v88 == v90;
      v226 = v20;
      v225 = v20 - 3;
      if (v91)
        break;
      v92 = v90;
      v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v88, v89, v90, 0);
      swift_bridgeObjectRelease(v88);
      *(_QWORD *)&v94 = swift_bridgeObjectRelease(v92).n128_u64[0];
      if ((v93 & 1) != 0)
        goto LABEL_36;
      aBlock = 0x4244646572616853;
      v236 = 0xE90000000000002DLL;
      v95 = objc_msgSend(v83, "ownerName", v94);
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v98 = v97;

      v99._countAndFlagsBits = v96;
      v99._object = v98;
      String.append(_:)(v99);
      swift_bridgeObjectRelease(v98);
      v100 = aBlock;
      v101 = v236;
LABEL_37:
      aBlock = v100;
      v236 = v101;
      v102._countAndFlagsBits = 45;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      v103 = objc_msgSend(v83, "zoneName");
      v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      v106 = v105;

      v107._countAndFlagsBits = v104;
      v107._object = v106;
      String.append(_:)(v107);
      swift_bridgeObjectRelease(v106);
      v108 = v236;
      URL.appendingPathComponent(_:)(aBlock, v236);
      v109 = swift_bridgeObjectRelease(v108);
      v110 = v215;
      v111 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v227)(v215, a1, v232, v109);
      v112 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.default.getter(v112);
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc(12, -1);
        v115 = swift_slowAlloc(32, -1);
        aBlock = v115;
        *(_DWORD *)v114 = v202;
        v116 = sub_1003A7180();
        v117 = dispatch thunk of CustomStringConvertible.description.getter(v232, v116);
        v119 = v118;
        v233 = sub_10001A820(v117, v118, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v206);
        v120 = swift_bridgeObjectRelease(v119);
        v229((uint64_t)v110, v232, v120);
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "downloadContainer zoneDirURL: %s", v114, 0xCu);
        swift_arrayDestroy(v115, 1, v201);
        v121 = v115;
        v26 = v221;
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v114, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v229)(v110, v232);
      }

      URL._bridgeToObjectiveC()(v122);
      v124 = v123;
      aBlock = 0;
      v125 = objc_msgSend(v26, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v123, 1, 0, &aBlock);

      v126 = aBlock;
      if (!v125)
      {
        v176 = (id)aBlock;
        swift_bridgeObjectRelease(v212);
        v177 = _convertNSErrorToError(_:)(v126);

        swift_willThrow(v178);
        swift_errorRetain(v177);
        v179 = (void *)_convertErrorToNSError(_:)(v177);
        (*(void (**)(uint64_t, _QWORD, void *))(v198 + 16))(v198, 0, v179);

        swift_errorRelease(v177);
        swift_errorRelease(v177);

        v180 = v232;
        v181 = (void (*)(char *, uint64_t))v229;
        ((void (*)(uint64_t, uint64_t))v229)(a1, v232);
        v181(v219, v180);
        swift_release(v197);
        return;
      }
      v127 = (id)aBlock;
      URL.appendingPathComponent(_:)(0x737465737341, 0xE600000000000000);
      v224 = swift_allocObject(&unk_1007F1A10, 17, 7);
      *(_BYTE *)(v224 + 16) = 0;
      swift_bridgeObjectRetain_n(v230, 2);
      v128 = v83;
      v129 = Logger.logObject.getter(v128);
      v130 = static os_log_type_t.default.getter(v129);
      if (os_log_type_enabled(v129, v130))
      {
        v131 = swift_slowAlloc(22, -1);
        v132 = (_QWORD *)swift_slowAlloc(8, -1);
        v133 = swift_slowAlloc(32, -1);
        aBlock = v133;
        *(_DWORD *)v131 = v200;
        v233 = (uint64_t)v128;
        v134 = v128;
        v135 = v206;
        v136 = (unint64_t)v230;
        a1 = (uint64_t)v220;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v206);
        *v132 = v128;

        *(_WORD *)(v131 + 12) = 2080;
        swift_bridgeObjectRetain(v136);
        v233 = sub_10001A820(v203, v136, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v135);
        swift_bridgeObjectRelease_n(v136, 3);
        _os_log_impl((void *)&_mh_execute_header, v129, v130, "Downloading records in zone %@ for accountID %s", (uint8_t *)v131, 0x16u);
        v137 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v132, 1, v137);
        swift_slowDealloc(v132, -1, -1);
        swift_arrayDestroy(v133, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v133, -1, -1);
        swift_slowDealloc(v131, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v230, 2);
      }
      v138 = v211;
      sub_1000151B0(0, &qword_100847DE0, CKFetchRecordZoneChangesOperation_ptr);
      v139 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v140 = swift_allocObject(v139, 40, 7);
      *(_OWORD *)(v140 + 16) = v204;
      *(_QWORD *)(v140 + 32) = v128;
      aBlock = v140;
      specialized Array._endMutation()(v140);
      v141 = (id)aBlock;
      v223 = v128;
      v244.value._rawValue = v141;
      v244.is_nil = 0;
      isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v244, v245).super.super.super.super.isa;
      v142 = v210;
      v143 = v232;
      v144 = (void (*)(char *, char *, uint64_t))v227;
      v227((char *)v210, (char *)a1, v232);
      v145 = v213;
      v144(v213, v231, v143);
      v146 = *(unsigned __int8 *)(v138 + 80);
      v147 = (v146 + 24) & ~v146;
      v148 = (v205 + v147) & 0xFFFFFFFFFFFFFFF8;
      v149 = (v148 + 15) & 0xFFFFFFFFFFFFFFF8;
      v150 = (v146 + v149 + 8) & ~v146;
      v151 = swift_allocObject(&unk_1007F1A38, v150 + v216, v146 | 7);
      v152 = v214;
      *(_QWORD *)(v151 + 16) = v214;
      v153 = v151 + v147;
      v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 32);
      v154(v153, v142, v143);
      v155 = v224;
      *(_QWORD *)(v151 + v148) = v224;
      v156 = v221;
      *(_QWORD *)(v151 + v149) = v221;
      v154(v151 + v150, (uint64_t)v145, v143);
      v157 = v152;
      v158 = v155;
      swift_retain();
      v159 = v156;
      v160 = isa;
      CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_1003A70D4, v151);
      v161 = swift_allocObject(&unk_1007F1A60, 24, 7);
      v162 = v217;
      *(_QWORD *)(v161 + 16) = v217;
      v239 = sub_1003A78B8;
      v240 = v161;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v236 = 1107296256;
      v237 = sub_1000094C8;
      v238 = &unk_1007F1A78;
      v163 = _Block_copy(&aBlock);
      v164 = v240;
      v165 = v162;
      v166 = v160;
      sub_1000E51CC((uint64_t)sub_1003A78B8, v161);
      v167 = v164;
      a1 = (uint64_t)v220;
      swift_release(v167);
      -[objc_class setCompletionBlock:](v166, "setCompletionBlock:", v163);
      _Block_release(v163);

      swift_release(v161);
      dispatch_group_enter(v165);
      v168 = v218;
      -[objc_class setDatabase:](v166, "setDatabase:", v218);
      objc_msgSend(v168, "addOperation:", v166);
      v26 = v156;
      OS_dispatch_group.wait()();

      v169 = (void (*)(uint64_t, uint64_t))v229;
      ((void (*)(char *, uint64_t))v229)(v231, v143);
      v169(a1, v143);
      swift_release(v158);
      v66 = &selRef_rd_isExcludedFromBackup;
      v80 = v212;
      v81 = v209;
      v7 = v208;
      v20 = v226;
      v84 = v225;
LABEL_23:
      ++v20;
      if (v84 == v81)
        goto LABEL_15;
    }
    swift_bridgeObjectRelease_n(v88, 2);
LABEL_36:
    v100 = 0x4465746176697250;
    v101 = 0xE900000000000042;
    goto LABEL_37;
  }
LABEL_49:
  v171 = v58;
  v172 = _convertNSErrorToError(_:)(v58);

  swift_willThrow(v173);
  swift_errorRetain(v172);
  v174 = (void *)_convertErrorToNSError(_:)(v172);
  (*(void (**)(uint64_t, _QWORD, void *))(v198 + 16))(v198, 0, v174);

  swift_errorRelease(v172);
  swift_errorRelease(v172);
  v175 = v219;
LABEL_50:
  ((void (*)(char *, uint64_t))v229)(v175, v232);
}

uint64_t sub_1003A6D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = 2;
  v39 = a3;
  v12 = sub_10001A630(&qword_10083DFA8);
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v40, sub_100268FAC, v37, v12);
  if (v3)
    return v4 & 1;
  v13 = v40;
  if (!((unint64_t)v40 >> 62))
  {
    v14 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_4;
LABEL_19:
    swift_bridgeObjectRelease(v13);
    v26 = _swiftEmptyArrayStorage;
LABEL_20:
    v4 = sub_1001A560C(a1, a2, v26);
    swift_bridgeObjectRelease(v26);
    return v4 & 1;
  }
  if (v40 < 0)
    v30 = v40;
  else
    v30 = v40 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v40);
  v14 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v13);
  if (!v14)
    goto LABEL_19;
LABEL_4:
  v40 = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_1001C1B0C(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v35 = v14;
    v36 = v9;
    v31 = 0;
    v32 = a1;
    v16 = 0;
    v33 = a2;
    v34 = v13 & 0xC000000000000001;
    v17 = v8;
    v18 = v13;
    do
    {
      if (v34)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      else
        v19 = *(id *)(v13 + 8 * v16 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "uuid", v31, v32, v33);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v8);

      v26 = (_QWORD *)v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      {
        sub_1001C1B0C(0, v26[2] + 1, 1);
        v26 = (_QWORD *)v40;
      }
      v28 = v26[2];
      v27 = v26[3];
      if (v28 >= v27 >> 1)
      {
        sub_1001C1B0C(v27 > 1, v28 + 1, 1);
        v26 = (_QWORD *)v40;
      }
      ++v16;
      v26[2] = v28 + 1;
      v29 = &v26[2 * v28];
      v29[4] = v23;
      v29[5] = v25;
      v8 = v17;
      v13 = v18;
    }
    while (v35 != v16);
    swift_bridgeObjectRelease(v18);
    a1 = v32;
    a2 = v33;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003A6FCC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003A6FF0(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_1003A3BB8(a1, a2, a3 & 1, v3);
}

void sub_1003A6FFC()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1003A7004()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003A7014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v3 + v8 + 8) & ~v3;
  v10 = v9 + v5;

  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));

  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

void sub_1003A70D4(void *a1, void *a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1003A40E4(a1, a2, v6, *(void **)(v3 + 16), v3 + v9, *(_QWORD *)(v3 + v10), *(void **)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), v3 + ((v8 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8));
}

uint64_t sub_1003A715C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1003A7180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100845D78;
  if (!qword_100845D78)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100845D78);
  }
  return result;
}

void *sub_1003A71C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  NSString v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  id v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  void *result;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _OWORD v60[2];
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;

  v56 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - v7;
  v57 = 0;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a1;
  v14 = CKRecord.recordType.getter(v13);
  v16 = v15;
  v17 = objc_msgSend((id)objc_opt_self(REMCDAccount), "recordTypes");
  v18 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  if (!v18[2])
  {
    __break(1u);
    goto LABEL_36;
  }
  v19 = v18[4];
  v20 = v18[5];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v18);
  if (v14 == v19 && v16 == v20)
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v19, v20, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v16);
    if ((v22 & 1) == 0)
      return 0;
  }
  v24 = CKRecord.subscript.getter(0xD00000000000001DLL, 0x80000001007020F0);
  if (!v24)
    goto LABEL_14;
  v25 = v24;
  v26 = objc_opt_self(CKAsset);
  v27 = (void *)swift_dynamicCastObjCClass(v25, v26);
  if (!v27)
  {
    swift_unknownObjectRelease(v25);
LABEL_14:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C70);
    goto LABEL_18;
  }
  v28 = objc_msgSend(v27, "fileURL");
  swift_unknownObjectRelease(v25);
  if (v28)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, v29, 1, v9);
  sub_10031E6C0((uint64_t)v5, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    goto LABEL_17;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v44 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v44);
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  LODWORD(v46) = objc_msgSend(v44, "fileExistsAtPath:", v47, swift_bridgeObjectRelease(v46).n128_f64[0]);

  if ((_DWORD)v46)
  {
    v48 = v57;
    v49 = Data.init(contentsOf:options:)(v12, 0);
    if (!v48)
    {
      v5 = (char *)v49;
      v8 = v50;
      v57 = 0;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      goto LABEL_20;
    }
    swift_errorRelease(v48);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v57 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
LABEL_18:
  v30 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(0xD000000000000018, 0x8000000100702110, v30, &type metadata for Data, &protocol witness table for Data);
  v23 = 0;
  v8 = v64;
  if ((unint64_t)v64 >> 60 == 15)
    return v23;
  v5 = v63;
LABEL_20:
  sub_1000A70E4((uint64_t)v5, (unint64_t)v8);
  v31 = objc_msgSend(v56, "storeController");
  if (v31)
  {
    v32 = v31;
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v32, "newBackgroundContextWithAuthor:", v33);

    v35 = (void *)sub_100300818();
    if (v35)
    {
      v36 = objc_allocWithZone((Class)REMReplicaIDSource);
      v37 = v35;
      v38 = String._bridgeToObjectiveC()();
      v39 = objc_msgSend(v36, "initWithAccountID:objectID:property:", v37, v37, v38);

      v40 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
      v41 = v39;
      sub_1000A70E4((uint64_t)v5, (unint64_t)v8);
      v42 = v57;
      v43 = sub_100259BE8((uint64_t)v41);
      sub_1000A71C8((uint64_t)v5, (unint64_t)v8);

      if (v42)
      {
        sub_1000A71C8((uint64_t)v5, (unint64_t)v8);

        sub_1000A71B4((uint64_t)v5, (unint64_t)v8);
        swift_errorRelease(v42);
      }
      else
      {
        if (v43)
        {
          *(_QWORD *)&v61 = 0xD00000000000001FLL;
          *((_QWORD *)&v61 + 1) = 0x8000000100702160;
          AnyHashable.init<A>(_:)(&v63, &v61, &type metadata for String, &protocol witness table for String);
          v51 = objc_msgSend(v43, "orderedSet");
          v52 = objc_msgSend(v51, "array");

          v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, (char *)&type metadata for Any + 8);
          v62 = sub_10001A630(&qword_1008442B0);
          *(_QWORD *)&v61 = v53;
          sub_10001A6CC(&v61, v60);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          v59 = &_swiftEmptyDictionarySingleton;
          sub_10028C16C(v60, (uint64_t)&v63, isUniquelyReferenced_nonNull_native);
          v23 = v59;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_10020DA24((uint64_t)&v63);
          sub_1000A71B4((uint64_t)v5, (unint64_t)v8);
          sub_1000A71C8((uint64_t)v5, (unint64_t)v8);

          return v23;
        }
        sub_1000A71C8((uint64_t)v5, (unint64_t)v8);

        sub_1000A71B4((uint64_t)v5, (unint64_t)v8);
      }
      return &_swiftEmptyDictionarySingleton;
    }
    else
    {
      sub_1000A71B4((uint64_t)v5, (unint64_t)v8);
      sub_1000A71C8((uint64_t)v5, (unint64_t)v8);
      return 0;
    }
  }
LABEL_36:
  result = (void *)sub_1000A71B4((uint64_t)v5, (unint64_t)v8);
  __break(1u);
  return result;
}

uint64_t sub_1003A786C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100847DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1003A78C4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
  v5 = sub_1003A80D8(v4);
  sub_10040ADF0(v5, &v19);
  swift_release(v5);
  v6 = _swiftEmptyArrayStorage;
  v8 = v19;
  v7 = v20;
  v17 = v20;
  v18 = _swiftEmptyArrayStorage;
  v10 = v21;
  v9 = v22;
  v26 = v21;
  v27 = v20;
  v16 = v21;
  v25 = v19;
  v11 = *(_QWORD *)(v19 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain(v22);
    sub_1000F4348(&v27);
    sub_1000F4348(&v26);
    sub_1000F4348(&v25);
    v12 = (uint64_t *)(v8 + 40);
    do
    {
      v13 = *v12;
      v15[0] = *(v12 - 1);
      v15[1] = v13;
      sub_1003A7A88(v15, &v17, (uint64_t)&v16, &v18);
      v12 += 2;
      --v11;
    }
    while (v11);
    sub_1000F4320(&v25);
    sub_1000F4320(&v27);
    sub_1000F4320(&v26);
    swift_bridgeObjectRelease();
    v7 = v17;
    v6 = v18;
    v10 = v16;
  }
  v24 = v23;
  sub_1000F4320(&v24);
  sub_1000F4320(&v25);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  v14 = sub_10011E910(v9);
  sub_1000F3AF0(v6, v10, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    *a1 = v6;
    a1[1] = v7;
    a1[2] = v10;
    a1[3] = v9;
    a1[4] = v14;
  }
}

void sub_1003A7A88(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v7 = *a1;
  v6 = a1[1];
  v8._countAndFlagsBits = 0x7C6C61636F6CLL;
  v8._object = (void *)0xE600000000000000;
  if (String.hasPrefix(_:)(v8))
  {
    sub_1002CB188(v7, v6);
    swift_bridgeObjectRelease();
    sub_1002CAEAC(v7, v6);
  }
  else
  {
    v9 = *a4;
    swift_bridgeObjectRetain(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    *a4 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
      *a4 = v9;
    }
    v12 = v9[2];
    v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      v9 = sub_1002C8224((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      *a4 = v9;
    }
    v9[2] = v12 + 1;
    v13 = &v9[2 * v12];
    v13[4] = v7;
    v13[5] = v6;
    v14 = *a2;
    v15 = *(_QWORD *)(*a2 + 16);
    swift_bridgeObjectRetain(v6);
    if (v15 && (v16 = sub_10001A6DC(v7, v6), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v16);
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v29 = v7;
        v30 = a2;
        swift_bridgeObjectRetain(v18);
        v21 = (_QWORD *)(v20 + 40);
        do
        {
          v23 = *(v21 - 1);
          v22 = *v21;
          swift_bridgeObjectRetain(*v21);
          v24._countAndFlagsBits = 0x7C6C61636F6CLL;
          v24._object = (void *)0xE600000000000000;
          if (String.hasPrefix(_:)(v24))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              sub_1001C1B0C(0, _swiftEmptyArrayStorage[2] + 1, 1);
            v26 = _swiftEmptyArrayStorage[2];
            v25 = _swiftEmptyArrayStorage[3];
            if (v26 >= v25 >> 1)
              sub_1001C1B0C(v25 > 1, v26 + 1, 1);
            _swiftEmptyArrayStorage[2] = v26 + 1;
            v27 = &_swiftEmptyArrayStorage[2 * v26];
            v27[4] = v23;
            v27[5] = v22;
          }
          v21 += 2;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        a2 = v30;
        v7 = v29;
      }
      v28 = swift_isUniquelyReferenced_nonNull_native(*a2);
      v31 = *a2;
      *a2 = 0x8000000000000000;
      sub_10028C2A4((uint64_t)_swiftEmptyArrayStorage, v7, v6, v28);
      *a2 = v31;
    }
    else
    {
      sub_1002CB188(v7, v6);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_1003A7D2C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Double v16;
  Swift::Int32 v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  double v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *(_QWORD *)(v1 + 24);
  v43 = v2;
  swift_bridgeObjectRetain(v2);
  v3 = (_QWORD *)sub_1002AF0A8((uint64_t)_swiftEmptyArrayStorage);
  v40 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v41 = (unint64_t)(v4 + 63) >> 6;
  v42 = v2;
  swift_bridgeObjectRetain(v2);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_26;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_40;
    if (v10 >= v41)
      break;
    v11 = *(_QWORD *)(v40 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v41)
        break;
      v11 = *(_QWORD *)(v40 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v41)
          break;
        v11 = *(_QWORD *)(v40 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v41)
            break;
          v11 = *(_QWORD *)(v40 + 8 * v7);
          if (!v11)
          {
            v7 = v10 + 4;
            if (v10 + 4 >= v41)
              break;
            v11 = *(_QWORD *)(v40 + 8 * v7);
            if (!v11)
            {
              v12 = v10 + 5;
              if (v12 >= v41)
                break;
              v11 = *(_QWORD *)(v40 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v7 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_41;
                  if (v7 >= v41)
                    goto LABEL_35;
                  v11 = *(_QWORD *)(v40 + 8 * v7);
                  ++v12;
                  if (v11)
                    goto LABEL_25;
                }
              }
              v7 = v12;
            }
          }
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_26:
    v13 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v9);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(double *)(*(_QWORD *)(v42 + 56) + 8 * v9);
    swift_bridgeObjectRetain_n(v14, 2);
    v17 = Int32.init(timeIntervalSinceReferenceDate:)(v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v20 = sub_10001A6DC(v15, v14);
    v21 = v3[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return;
    }
    v24 = v19;
    if (v3[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1002D5F88();
    }
    else
    {
      sub_1002CC238(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_10001A6DC(v15, v14);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_42;
      v20 = v25;
    }
    v27 = (double)v17;
    if ((v24 & 1) != 0)
    {
      *(double *)(v3[7] + 8 * v20) = v27;
    }
    else
    {
      v3[(v20 >> 6) + 8] |= 1 << v20;
      v28 = (uint64_t *)(v3[6] + 16 * v20);
      *v28 = v15;
      v28[1] = v14;
      *(double *)(v3[7] + 8 * v20) = v27;
      v29 = v3[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_39;
      v3[2] = v31;
      swift_bridgeObjectRetain(v14);
    }
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease();
  }
LABEL_35:
  swift_release(v42);
  sub_1000F4320(&v43);
  v32 = (_QWORD *)*v38;
  v33 = v38[1];
  v34 = v38[2];
  swift_bridgeObjectRetain(*v38);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v3);
  v36 = sub_10011E910(v35);
  sub_1000F3AF0(v32, v34, v36);
  if (v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *a1 = v32;
    a1[1] = v33;
    a1[2] = v34;
    a1[3] = v3;
    a1[4] = v36;
  }
}

uint64_t sub_1003A80D8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_1003A8234((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release(v2);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_1003A8234((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_1003A8234(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::Bool v19;
  uint64_t v22;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
LABEL_4:
  v22 = v4;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v5 << 6);
LABEL_18:
    v16 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v17 = v16[1];
    if ((*v16 != 0x6C61636F6CLL || v17 != 0xE500000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, 0x6C61636F6CLL, 0xE500000000000000, 0) & 1) == 0)
    {
      swift_bridgeObjectRetain(v17);
      v18._countAndFlagsBits = 0x7C6C61636F6CLL;
      v18._object = (void *)0xE600000000000000;
      v19 = String.hasPrefix(_:)(v18);
      swift_bridgeObjectRelease();
      if (!v19)
      {
        *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        v4 = v22 + 1;
        if (!__OFADD__(v22, 1))
          goto LABEL_4;
        __break(1u);
LABEL_30:
        swift_retain();
        sub_1002185C8(a1, a2, v22, a3);
        return;
      }
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v5 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_17:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_18;
  }
  v15 = v5 + 1;
  if (v5 + 1 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v5 + 2;
  if (v5 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v5 + 3;
  if (v5 + 3 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v5 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_30;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1003A8444(void *a1, uint64_t a2)
{
  NSObject **v2;
  NSObject **v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  NSObject **v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  NSObject **v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v41;
  NSObject **v42;
  uint8_t *v43;
  NSObject **v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003A8A50((uint64_t)a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_1008380D0);
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100847E10);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(8, -1);
      v45 = a2;
      v46 = v14;
      v19 = (_QWORD *)v18;
      *(_DWORD *)v17 = 138412290;
      v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      *v19 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No checked-in -- Checking in {interaction: %@}", v17, 0xCu);
      v21 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v19, 1, v21);
      v22 = v19;
      a2 = (uint64_t)v45;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {

      v15 = v14;
    }

    sub_1003A8D04(v14, a2);
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  if (Date.timeIntervalSince(_:)(v12) >= 10800.0)
  {
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100847E10);
    v32 = a1;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v45 = a2;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (NSObject **)swift_slowAlloc(8, -1);
      v43 = v35;
      v44 = v3;
      *(_DWORD *)v35 = 138412290;
      v46 = v32;
      v36 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      v37 = v42;
      *v42 = v32;

      a2 = (uint64_t)v45;
      v38 = v43;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "timeout expired -- reset check-in {interaction: %@}", v43, 0xCu);
      v39 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {

      v33 = v32;
    }

    sub_1003A8D04(v32, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 1;
  }
  if (qword_1008373A0 != -1)
    swift_once(&qword_1008373A0, sub_1003A89C0);
  v23 = type metadata accessor for Logger(0);
  sub_10001AAA8(v23, (uint64_t)qword_100847E10);
  v24 = a1;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v45 = v25;
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v27 = 138412290;
    v46 = v24;
    v28 = v24;
    v25 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    v29 = v44;
    *v44 = v24;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "timeout hasn't expired -- don't check-in {interaction: %@}", v27, 0xCu);
    v30 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v29, 1, v30);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return 0;
}

uint64_t sub_1003A89C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847E10);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847E10);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003A8A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;

  v4 = sub_10001A630(&qword_1008447E8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  v12 = (id *)((char *)&v32 - v11);
  v13 = sub_10001A630(&qword_100847EC8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  v19 = sub_1003A9658();
  v20 = v19;
  v21 = v19[2];
  if (v21)
  {
    v33 = v4;
    v34 = v10;
    v35 = v18;
    v36 = a2;
    v22 = (uint64_t)v19 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v23 = *(_QWORD *)(v5 + 72);
    while (1)
    {
      sub_100008868(v22, (uint64_t)v12, &qword_1008447E8);
      if (objc_msgSend(*v12, "matchesContactRepresentation:", a1))
        break;
      sub_10000882C((uint64_t)v12, &qword_1008447E8);
      v22 += v23;
      if (!--v21)
      {
        v24 = 1;
        v18 = v35;
        a2 = v36;
        goto LABEL_8;
      }
    }
    v18 = v35;
    sub_1003A9D30((uint64_t)v12, (uint64_t)v35);
    v24 = 0;
    a2 = v36;
LABEL_8:
    v4 = v33;
    v10 = v34;
  }
  else
  {
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, v24, 1, v4);
  swift_bridgeObjectRelease(v20);
  sub_100008868((uint64_t)v18, (uint64_t)v16, &qword_100847EC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4) == 1)
  {
    v25 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
  }
  else
  {
    sub_1003A9D30((uint64_t)v16, (uint64_t)v10);
    v26 = *(int *)(v4 + 48);
    v27 = &v37[v26];
    v28 = &v10[v26];
    v29 = type metadata accessor for Date(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(a2, v27, v29);
    sub_10000882C((uint64_t)v10, &qword_1008447E8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(a2, 0, 1, v29);
  }
  return sub_10000882C((uint64_t)v18, &qword_100847EC8);
}

uint64_t sub_1003A8D04(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t);
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  void (*v56)(_BYTE *, uint64_t, __n128);
  os_log_t v57;
  uint64_t v58;
  _QWORD *v59;
  os_log_t v60;
  id *v61;
  char *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v73[12];
  int v74;
  os_log_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_BYTE *, uint64_t, uint64_t);
  id *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88[2];
  _QWORD *v89;

  v5 = sub_10001A630(&qword_1008447E8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v73[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v80 = (id *)&v73[-v10];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v86 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v73[-v15];
  v81 = v2;
  v17 = sub_1003A9658();
  v89 = v17;
  v18 = v17[2];
  v82 = v9;
  v83 = v5;
  v84 = v11;
  v85 = a2;
  if (v18)
  {
    v19 = v17;
    v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v78 = v6;
    v21 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain(v17);
    v22 = 0;
    while ((objc_msgSend(*(id *)((char *)v19 + v20), "matchesContactRepresentation:", a1) & 1) == 0)
    {
      ++v22;
      v20 += v21;
      if (v18 == v22)
      {
        swift_bridgeObjectRelease(v19);
        v6 = v78;
        v9 = v82;
        v5 = v83;
        v11 = v84;
        a2 = v85;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(v19);
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v42 = type metadata accessor for Logger(0);
    sub_10001AAA8(v42, (uint64_t)qword_100847E10);
    v11 = v84;
    v79 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
    v79(v16, v85, v84);
    v43 = a1;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    v46 = v45;
    v47 = os_log_type_enabled(v44, v45);
    v6 = v78;
    if (v47)
    {
      v48 = swift_slowAlloc(22, -1);
      v75 = v44;
      v49 = v48;
      v86 = (_QWORD *)swift_slowAlloc(8, -1);
      v76 = (os_log_t)swift_slowAlloc(32, -1);
      v87 = (uint64_t)v43;
      v88[0] = (uint64_t)v76;
      *(_DWORD *)v49 = 138412546;
      v74 = v46;
      v77 = v12;
      v50 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      *v86 = v43;

      v11 = v84;
      *(_WORD *)(v49 + 12) = 2080;
      v51 = sub_1003AA7C4();
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v11, v51);
      v54 = v53;
      v87 = sub_10001A820(v52, v53, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      v55 = swift_bridgeObjectRelease(v54);
      v56 = *(void (**)(_BYTE *, uint64_t, __n128))(v77 + 8);
      v56(v16, v11, v55);
      v57 = v75;
      _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "Replacing existing checkIn {interaction: %@, date: %s}", (uint8_t *)v49, 0x16u);
      v58 = sub_10001A630((uint64_t *)&unk_100839E70);
      v59 = v86;
      swift_arrayDestroy(v86, 1, v58);
      swift_slowDealloc(v59, -1, -1);
      v60 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

      v56 = *(void (**)(_BYTE *, uint64_t, __n128))(v12 + 8);
      ((void (*)(_BYTE *, uint64_t))v56)(v16, v11);

    }
    v9 = v82;
    v61 = v80;
    sub_1003DCCC0(v22, (uint64_t)v80);

    v5 = v83;
    ((void (*)(char *, uint64_t))v56)((char *)v61 + *(int *)(v83 + 48), v11);
    a2 = v85;
    v24 = v79;
  }
  else
  {
LABEL_6:
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_100847E10);
    v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
    v24(v86, a2, v11);
    v25 = a1;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    LODWORD(v80) = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(8, -1);
      v75 = v29;
      v78 = swift_slowAlloc(32, -1);
      v87 = (uint64_t)v25;
      v88[0] = v78;
      *(_DWORD *)v28 = 138412546;
      v76 = v26;
      v77 = v12;
      v79 = v24;
      v30 = v25;
      v24 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      v29->isa = (Class)v25;

      v5 = v83;
      v31 = v84;
      *(_WORD *)(v28 + 12) = 2080;
      v32 = sub_1003AA7C4();
      v33 = v86;
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v36 = v35;
      v87 = sub_10001A820(v34, v35, v88);
      v11 = v31;
      a2 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      v37 = swift_bridgeObjectRelease(v36);
      (*(void (**)(_QWORD *, uint64_t, __n128))(v77 + 8))(v33, v11, v37);
      v26 = v76;
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v80, "CheckIn not found -- Adding new one {interaction: %@, date: %s}", (uint8_t *)v28, 0x16u);
      v38 = sub_10001A630((uint64_t *)&unk_100839E70);
      v39 = v75;
      swift_arrayDestroy(v75, 1, v38);
      swift_slowDealloc(v39, -1, -1);
      v40 = v78;
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v41 = v28;
      v9 = v82;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {

      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v86, v11);
    }

  }
  v62 = (char *)v9 + *(int *)(v5 + 48);
  *v9 = a1;
  v24(v62, a2, v11);
  v63 = (uint64_t)v89;
  v64 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
    v63 = sub_1002C9F60(0, *(_QWORD *)(v63 + 16) + 1, 1, v63);
  v66 = *(_QWORD *)(v63 + 16);
  v65 = *(_QWORD *)(v63 + 24);
  if (v66 >= v65 >> 1)
    v63 = sub_1002C9F60(v65 > 1, v66 + 1, 1, v63);
  *(_QWORD *)(v63 + 16) = v66 + 1;
  sub_1003A9D30((uint64_t)v9, v63+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v66);
  v89 = (_QWORD *)v63;
  v67 = sub_1003AA2C8(v63);
  v69 = v68;
  swift_bridgeObjectRelease(v63);
  v70 = v81[5];
  v71 = v81[6];
  sub_10000A388(v81 + 2, v70);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v71 + 8))(v67, v69, v70, v71);
  return sub_1000A71C8(v67, v69);
}

_QWORD *sub_1003A9658()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000A388(v0 + 2, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  if (v4 >> 60 == 15)
  {
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100847E10);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No stored checkIns -- returning empty array", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
  else
  {
    v10 = v3;
    v11 = v4;
    v12 = sub_1003A9D78(v3, v4);
    sub_1000A71B4(v10, v11);
  }
  return v12;
}

uint64_t sub_1003A9940@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void *v25;

  v3 = v2;
  v5 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6 == 2)
      goto LABEL_3;
LABEL_16:
    if (qword_1008373A0 == -1)
    {
LABEL_17:
      v16 = type metadata accessor for Logger(0);
      sub_10001AAA8(v16, (uint64_t)qword_100847E10);
      v17 = swift_bridgeObjectRetain(v5);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v20 = 134217984;
        v22 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
        swift_bridgeObjectRelease(v5);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unexpected count for checkIn {count: %ld}", v20, 0xCu);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease(v5);
      }
      v21 = sub_10001A630(&qword_1008447E8);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 1, 1, v21);
    }
LABEL_24:
    swift_once(&qword_1008373A0, sub_1003A89C0);
    goto LABEL_17;
  }
  if (v5 < 0)
    v15 = *a1;
  else
    v15 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v5);
  if (v6 != 2)
    goto LABEL_16;
LABEL_3:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v7 = *(_QWORD *)(v5 + 32);
      swift_unknownObjectRetain(v7);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_24;
  }
  v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
LABEL_6:
  ObjectType = swift_getObjectType(v7);
  v22 = v7;
  v8 = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
  throwingCast<A>(_:as:failureMessage:)(&v25, &v22, v8, 0, 0, v8);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v22);
  if (!v3)
  {
    v10 = v25;
    if ((v5 & 0xC000000000000001) != 0)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v5);
LABEL_11:
      ObjectType = swift_getObjectType(v11);
      v22 = v11;
      v12 = sub_1000151B0(0, &qword_100847EE0, NSDate_ptr);
      throwingCast<A>(_:as:failureMessage:)(&v25, &v22, v12, 0, 0, v12);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v22);
      v13 = v25;
      v14 = sub_10001A630(&qword_1008447E8);
      *a2 = v10;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 0, 1, v14);
    }
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v11 = *(_QWORD *)(v5 + 40);
      swift_unknownObjectRetain(v11);
      goto LABEL_11;
    }
    __break(1u);
  }
  return result;
}

void sub_1003A9C68()
{
  void **v0;
  void *v1;
  Class isa;

  v1 = *v0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setUserInteractionsData:", isa);

}

uint64_t sub_1003A9CAC()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "userInteractionsData");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t type metadata accessor for RDUserInteractionSessionManager()
{
  return objc_opt_self(_TtC7remindd31RDUserInteractionSessionManager);
}

uint64_t sub_1003A9D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_1008447E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1003A9D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[4];
  uint64_t v43;
  uint64_t v44;

  v4 = sub_10001A630(&qword_100847EC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A630(&qword_1008447E8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  sub_1000151B0(0, &qword_100847740, NSKeyedUnarchiver_ptr);
  v14 = sub_10001A630(&qword_100847ED0);
  v15 = swift_allocObject(v14, 56, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v15 + 32) = sub_1000151B0(0, &qword_100847ED8, NSArray_ptr);
  *(_QWORD *)(v15 + 40) = sub_1000151B0(0, (unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
  *(_QWORD *)(v15 + 48) = sub_1000151B0(0, &qword_100847EE0, NSDate_ptr);
  v16 = v41;
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v42, v15, a1, a2);
  if (v16)
  {
    swift_bridgeObjectRelease(v15);
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100847E10);
    swift_errorRetain(v16);
    v19 = swift_errorRetain(v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v42[0] = v23;
      *(_DWORD *)v22 = 136446210;
      v43 = v16;
      swift_errorRetain(v16);
      v24 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v25 = String.init<A>(describing:)(&v43, v24);
      v27 = v26;
      v43 = sub_10001A820(v25, v26, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to decoded encoded CheckIns -- return empty array {error: %{public}s}", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(v16);
      swift_errorRelease(v16);
    }

    swift_errorRelease(v16);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v39 = v11;
    v40 = v7;
    swift_bridgeObjectRelease(v15);
    v17 = sub_10001A630(&qword_100847EE8);
    throwingCast<A>(_:as:failureMessage:)(&v43, v42, v17, 0, 0, v17);
    v41 = v43;
    v30 = *(_QWORD *)(v43 + 16);
    if (v30)
    {
      swift_bridgeObjectRetain(v41);
      v31 = 0;
      v28 = _swiftEmptyArrayStorage;
      v32 = v40;
      v38 = v30;
      do
      {
        v33 = *(_QWORD *)(v41 + 8 * v31 + 32);
        v43 = v33;
        swift_bridgeObjectRetain(v33);
        sub_1003A9940(&v43, v6);
        v34 = swift_bridgeObjectRelease(v33);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v32, v34) == 1)
        {
          sub_10000882C((uint64_t)v6, &qword_100847EC8);
        }
        else
        {
          sub_1003A9D30((uint64_t)v6, (uint64_t)v13);
          v35 = (uint64_t)v39;
          sub_1003A9D30((uint64_t)v13, (uint64_t)v39);
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
            v28 = (_QWORD *)sub_1002C9F60(0, v28[2] + 1, 1, (unint64_t)v28);
          v37 = v28[2];
          v36 = v28[3];
          if (v37 >= v36 >> 1)
            v28 = (_QWORD *)sub_1002C9F60(v36 > 1, v37 + 1, 1, (unint64_t)v28);
          v28[2] = v37 + 1;
          sub_1003A9D30(v35, (uint64_t)v28+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v37);
          v32 = v40;
          v30 = v38;
        }
        ++v31;
      }
      while (v30 != v31);
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      v28 = _swiftEmptyArrayStorage;
    }
    sub_10000882C((uint64_t)v42, (uint64_t *)&unk_10083D5B0);
    swift_bridgeObjectRelease(v41);
  }
  return v28;
}

uint64_t sub_1003AA2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  id v26;
  NSDate v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  Class isa;
  double v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v53[2];
  __int128 v54;
  uint64_t v55;
  void **v56;
  void **v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v59 = sub_10001A630(&qword_1008447E8);
  v3 = *(_QWORD *)(v59 - 8);
  v4 = __chkstk_darwin(v59);
  v58 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v57 = (void **)((char *)v53 - v7);
  __chkstk_darwin(v6);
  v56 = (void **)((char *)v53 - v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v53[1] = v1;
    v63 = _swiftEmptyArrayStorage;
    sub_1001C2140(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v55 = *(_QWORD *)(v3 + 72);
    v54 = xmmword_1006A8550;
    v12 = v56;
    do
    {
      v60 = v11;
      v61 = v9;
      sub_100008868(v11, (uint64_t)v12, &qword_1008447E8);
      v13 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v14 = swift_allocObject(v13, 48, 7);
      *(_OWORD *)(v14 + 16) = v54;
      v15 = v59;
      v16 = *(int *)(v59 + 48);
      v17 = (char *)v57 + v16;
      v18 = (char *)v12 + v16;
      v19 = *v12;
      *v57 = *v12;
      v20 = type metadata accessor for Date(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v22(v17, v18, v20);
      *(_QWORD *)(v14 + 32) = v19;
      v23 = *(int *)(v15 + 48);
      v24 = v58;
      v25 = &v58[v23];
      *(_QWORD *)v58 = v19;
      v22(&v24[v23], v18, v20);
      v26 = v19;
      v27.super.isa = Date._bridgeToObjectiveC()().super.isa;
      *(NSDate *)(v14 + 40) = v27;
      v62 = v14;
      specialized Array._endMutation()(v27.super.isa);
      v28 = v62;
      v29 = *(void (**)(char *, uint64_t))(v21 + 8);
      v29(v25, v20);
      v29(v17, v20);
      sub_10000882C((uint64_t)v12, &qword_1008447E8);
      v10 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
      {
        sub_1001C2140(0, v10[2] + 1, 1);
        v10 = v63;
      }
      v31 = v10[2];
      v30 = v10[3];
      v32 = v60;
      if (v31 >= v30 >> 1)
      {
        sub_1001C2140(v30 > 1, v31 + 1, 1);
        v10 = v63;
      }
      v10[2] = v31 + 1;
      v10[v31 + 4] = v28;
      v11 = v32 + v55;
      v9 = v61 - 1;
    }
    while (v61 != 1);
  }
  v33 = (void *)objc_opt_self(NSKeyedArchiver);
  sub_10001A630(&qword_10083F648);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v35 = swift_bridgeObjectRelease(v10).n128_u64[0];
  v63 = 0;
  v36 = objc_msgSend(v33, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v63, v35);

  v37 = v63;
  if (v36)
  {
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);

  }
  else
  {
    v39 = v37;
    v40 = _convertNSErrorToError(_:)(v37);

    swift_willThrow(v41);
    if (qword_1008373A0 != -1)
      swift_once(&qword_1008373A0, sub_1003A89C0);
    v42 = type metadata accessor for Logger(0);
    sub_10001AAA8(v42, (uint64_t)qword_100847E10);
    swift_errorRetain(v40);
    v43 = swift_errorRetain(v40);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (_QWORD *)swift_slowAlloc(32, -1);
      v62 = v40;
      v63 = v47;
      *(_DWORD *)v46 = 136446210;
      swift_errorRetain(v40);
      v48 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v49 = String.init<A>(describing:)(&v62, v48);
      v51 = v50;
      v62 = sub_10001A820(v49, v50, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v51);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to encode checkIns -- encodging empty array {error: %{public}s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
    }

    swift_errorRelease(v40);
    return 0;
  }
  return v38;
}

unint64_t sub_1003AA7C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100846B70;
  if (!qword_100846B70)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100846B70);
  }
  return result;
}

void sub_1003AA80C()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0;
  sub_1003AB21C();
  sub_1003AB478();
  sub_1003ABCBC();
  sub_1003AC45C();
  v2 = sub_1003ACDDC();
  sub_1003AD1A4();
  sub_10001A630(&qword_100847F88);
  v9 = v2;
  v3 = sub_10001A630(&qword_100847F90);
  v4 = sub_1000A5F84(&qword_100847F98, &qword_100847F90, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = static Promise.all<A>(_:)(&v9, v3, v4);
  swift_bridgeObjectRelease(v2);
  v6 = swift_allocObject(&unk_1007F1AF0, 24, 7);
  *(_QWORD *)(v6 + 16) = v1;
  v7 = (void *)zalgo.getter(v1);
  v8 = dispatch thunk of Promise.then<A>(on:closure:)(v7, sub_1003B0018, v6, &type metadata for () + 1);
  swift_release(v8);
  swift_release(v5);
  swift_release(v6);

}

uint64_t sub_1003AAAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847EF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847EF0);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

NSString sub_1003AAB88()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100871EC0 = (uint64_t)result;
  return result;
}

id sub_1003AAC28()
{
  return sub_1000E67EC(type metadata accessor for RDAccountInitializer);
}

uint64_t type metadata accessor for RDAccountInitializer()
{
  return objc_opt_self(_TtC7remindd20RDAccountInitializer);
}

uint64_t sub_1003AAEA0(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Notification(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v21[1] = *(_QWORD *)&v1[OBJC_IVAR___RDAccountInitializerDidCompleteInitializeAllAccountsObserver_queue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_1007F1BE0, v14 + v11, v13 | 7);
  *(_QWORD *)(v15 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1003B0178;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F1BF8;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_1000D3124();
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release(v27);
}

id sub_1003AB1B4()
{
  return sub_1000E67EC(type metadata accessor for RDAccountInitializer.DidCompleteInitializeAllAccountsObserver);
}

uint64_t type metadata accessor for RDAccountInitializer.DidCompleteInitializeAllAccountsObserver()
{
  return objc_opt_self(RDAccountInitializerDidCompleteInitializeAllAccountsObserver);
}

void sub_1003AB21C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[2];
  uint64_t v18;

  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController), "inMemoryPrimaryActiveCKAccountREMObjectID");
  if (v2)
  {
    v3 = v2;
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_100847EF0);
    v5 = v3;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v14[4] = v1;
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v18 = v9;
      *(_DWORD *)v8 = 136446210;
      v10 = sub_10001A630((uint64_t *)&unk_100844910);
      v11 = Optional.descriptionOrNil.getter(v10);
      v13 = v12;
      v15 = sub_10001A820(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16);

      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDAccountInitializer: No need to update in-memory PrimaryActiveCKAccountCaches {current: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v16[0] = 0xD000000000000028;
    v16[1] = 0x80000001007022E0;
    v16[3] = 0;
    v17[0] = 0;
    v16[2] = 0;
    *(_QWORD *)((char *)v17 + 6) = 0;
    __chkstk_darwin(0);
    v14[2] = v0;
    sub_10035288C((uint64_t)v16, (uint64_t)sub_1003B00EC, (uint64_t)v14);
  }
}

uint64_t sub_1003AB478()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  void *v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Bool v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  os_log_type_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  id v58;
  unsigned int v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  v69 = 0;
  v66 = v2;
  v3 = objc_msgSend(v2, "fetchAccountsWithError:", &v69);
  v4 = v69;
  if (!v3)
  {
    v19 = v69;
    _convertNSErrorToError(_:)(v4);

    return swift_willThrow(v20);
  }
  v5 = v3;
  v6 = sub_1000151B0(0, &qword_100844408, REMAccount_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  v8 = v4;

  v69 = _swiftEmptyArrayStorage;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v22 = v7;
    else
      v22 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v9 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v7);
    if (v9)
      goto LABEL_4;
  }
  else
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_4:
      if (v9 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      for (i = 0; i != v9; ++i)
      {
        if ((v7 & 0xC000000000000001) != 0)
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
        else
          v11 = *(id *)(v7 + 8 * i + 32);
        v12 = v11;
        if (objc_msgSend(v11, "type") != (id)1
          || (v13 = objc_msgSend(v12, "objectID"),
              v14 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID"),
              sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr),
              v15 = static NSObject.== infix(_:_:)(v13),
              v13,
              v14,
              (v15 & 1) != 0))
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          isa = v69[2].isa;
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(isa);
          v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(isa, v12);
          specialized ContiguousArray._endMutation()(v18);
        }
      }
      swift_bridgeObjectRelease(v7);
      v9 = (uint64_t)v69;
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease(v7);
  v9 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_21:
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v23 = type metadata accessor for Logger(0);
  sub_10001AAA8(v23, (uint64_t)qword_100847EF0);
  v24 = swift_retain_n(v9, 2);
  v4 = Logger.logObject.getter(v24);
  LOBYTE(v7) = static os_log_type_t.info.getter(v4);
  if (!os_log_type_enabled(v4, (os_log_type_t)v7))
  {

    swift_release_n(v9, 2);
    goto LABEL_29;
  }
  v1 = swift_slowAlloc(12, -1);
  *(_DWORD *)v1 = 134217984;
  if (v9 < 0 || (v9 & 0x4000000000000000) != 0)
    goto LABEL_57;
  v25 = *(NSObject **)(v9 + 16);
  while (1)
  {
    swift_release(v9);
    v69 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    swift_release(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v7, "Removing Extraneous Local Accounts {candidateAccounts.count: %ld}", (uint8_t *)v1, 0xCu);
    swift_slowDealloc(v1, -1, -1);

LABEL_29:
    if (v9 < 0 || (v9 & 0x4000000000000000) != 0)
      break;
    v1 = *(_QWORD *)(v9 + 16);
    if (!v1)
      return swift_release(v9);
LABEL_32:
    if (v1 >= 1)
    {
      v26 = 0;
      v68 = v9 & 0xC000000000000001;
      v67 = v9;
      while (1)
      {
        v27 = v68
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v9)
            : *(id *)(v9 + 8 * v26 + 32);
        v28 = v27;
        v29 = REMAccount.isConsideredEmpty()();
        if (v30)
          break;
        v40 = v29;
        v41 = v28;
        v42 = v41;
        if (!v40)
        {
          v33 = Logger.logObject.getter(v41);
          v51 = static os_log_type_t.default.getter(v33);
          if (os_log_type_enabled(v33, v51))
          {
            v52 = swift_slowAlloc(22, -1);
            v53 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v52 = 138543618;
            v54 = -[NSObject objectID](v42, "objectID");
            *(_QWORD *)(v52 + 4) = v54;
            *(_WORD *)(v52 + 12) = 2112;
            *(_QWORD *)(v52 + 14) = v42;
            *v53 = v54;
            v53[1] = v42;
            _os_log_impl((void *)&_mh_execute_header, v33, v51, "Extraneous Local Account is not empty. Not Removing {accountObjID: %{public}@, account: %@}", (uint8_t *)v52, 0x16u);
            v55 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v53, 2, v55);
            swift_slowDealloc(v53, -1, -1);
            v56 = v52;
            v9 = v67;
            swift_slowDealloc(v56, -1, -1);

          }
          else
          {

            v33 = v42;
          }
          goto LABEL_35;
        }
        v43 = v41;
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.default.getter(v44);
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc(22, -1);
          v47 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v46 = 138543618;
          v48 = -[NSObject objectID](v43, "objectID");
          *(_QWORD *)(v46 + 4) = v48;
          *(_WORD *)(v46 + 12) = 2112;
          *(_QWORD *)(v46 + 14) = v43;
          *v47 = v48;
          v47[1] = v43;

          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Extraneous Local Account is empty. Removing {accountObjID: %{public}@, account: %@}", (uint8_t *)v46, 0x16u);
          v49 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v47, 2, v49);
          v50 = v47;
          v9 = v67;
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v46, -1, -1);
        }
        else
        {

          v44 = v43;
        }

        type metadata accessor for Analytics(0, v57);
        static Analytics.postEvent(_:payload:duration:)(0xD00000000000002FLL, 0x8000000100702270, 0, 0, 1);
        v58 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v66);
        v33 = objc_msgSend(v58, "updateAccount:", v43);
        -[NSObject removeFromStore](v33, "removeFromStore");
        v69 = 0;
        v59 = objc_msgSend(v58, "saveSynchronouslyWithError:", &v69);
        v60 = v69;
        if (!v59)
        {
          v62 = v69;
          v31 = _convertNSErrorToError(_:)(v60);

          swift_willThrow(v63);
LABEL_41:
          v32 = v28;
          v33 = Logger.logObject.getter(v32);
          v34 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v33, v34))
          {
            v35 = swift_slowAlloc(22, -1);
            v36 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v35 = 138543618;
            v37 = objc_msgSend(v32, "objectID");
            *(_QWORD *)(v35 + 4) = v37;
            *(_WORD *)(v35 + 12) = 2112;
            *(_QWORD *)(v35 + 14) = v32;
            *v36 = v37;
            v36[1] = v32;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to query whether Extraneous Local Account is empty. Skipping {accountObjID: %{public}@, account: %@}", (uint8_t *)v35, 0x16u);
            v38 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v36, 2, v38);
            swift_slowDealloc(v36, -1, -1);
            v39 = v35;
            v9 = v67;
            swift_slowDealloc(v39, -1, -1);
            swift_errorRelease(v31);

          }
          else
          {

            swift_errorRelease(v31);
          }
          goto LABEL_35;
        }
        v61 = v69;

LABEL_35:
        ++v26;

        if (v1 == v26)
          return swift_release(v9);
      }
      v31 = v30;
      goto LABEL_41;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain(v9);
    v25 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_release(v9);
  }
  swift_bridgeObjectRetain(v9);
  v1 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_release(v9);
  if (v1)
    goto LABEL_32;
  return swift_release(v9);
}

void sub_1003ABCBC()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  unsigned int v24;
  NSObject *v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  unsigned int v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  NSObject **v56;
  NSObject *v57;
  NSObject **v58;
  void *v59;
  id v60;
  uint8_t *bufa;
  uint8_t *buf;
  NSObject *v63;
  uint64_t v64;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController), "supportsLocalInternalAccount"))
  {
    v1 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
    v63 = 0;
    v3 = objc_msgSend(v2, "fetchAccountWithObjectID:error:", v1, &v63);
    v4 = v63;
    if (v3)
    {
      v5 = v63;
    }
    else
    {
      v11 = v63;
      v12 = _convertNSErrorToError(_:)(v4);

      swift_willThrow(v13);
      swift_errorRelease(v12);
      v14 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v2);
      v15 = String._bridgeToObjectiveC()();
      v16 = -[NSObject __addAccountWithType:name:accountObjectID:](v14, "__addAccountWithType:name:accountObjectID:", 5, v15, v1);

      if (qword_1008373A8 != -1)
        swift_once(&qword_1008373A8, sub_1003AAAF8);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_100847EF0);
      v18 = v16;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v60 = v1;
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v58 = (NSObject **)swift_slowAlloc(8, -1);
        bufa = v21;
        v63 = v18;
        *(_DWORD *)v21 = 138412290;
        v22 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        *v58 = v18;

        v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAccountInitializer: Creating localInternal account {accountChangeItem: %@}", v21, 0xCu);
        v23 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v58, 1, v23);
        swift_slowDealloc(v58, -1, -1);
        v1 = v60;
        swift_slowDealloc(bufa, -1, -1);
      }
      else
      {

        v19 = v18;
      }

      v63 = 0;
      v24 = -[NSObject saveSynchronouslyWithError:](v14, "saveSynchronouslyWithError:", &v63);
      v25 = v63;
      if (!v24)
      {
        v47 = v63;
        _convertNSErrorToError(_:)(v25);

        swift_willThrow(v48);
LABEL_29:

        return;
      }
      v26 = v63;

    }
    v18 = objc_msgSend((id)objc_opt_self(REMList), "siriFoundInAppsListID");
    v63 = 0;
    v27 = objc_msgSend(v2, "fetchListWithObjectID:error:", v18, &v63);
    v28 = v63;
    if (v27)
    {
      v29 = v27;
      v30 = v63;

      return;
    }
    v31 = v63;
    v32 = _convertNSErrorToError(_:)(v28);

    swift_willThrow(v33);
    swift_errorRelease(v32);
    v14 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v2);
    v63 = 0;
    v34 = (uint8_t *)objc_msgSend(v2, "fetchAccountWithObjectID:error:", v1, &v63);
    v35 = v63;
    buf = v34;
    if (v34)
    {
      v36 = v63;
      v37 = -[NSObject updateAccount:](v14, "updateAccount:", buf);
      v38 = String._bridgeToObjectiveC()();
      v39 = -[NSObject addListWithName:toAccountChangeItem:listObjectID:](v14, "addListWithName:toAccountChangeItem:listObjectID:", v38, v37, v18);

      if (qword_1008373A8 != -1)
        swift_once(&qword_1008373A8, sub_1003AAAF8);
      v40 = type metadata accessor for Logger(0);
      sub_10001AAA8(v40, (uint64_t)qword_100847EF0);
      v41 = v39;
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.default.getter(v42);
      v59 = v37;
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v44 = 138412290;
        v63 = v41;
        v57 = v18;
        v45 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        *v56 = v41;

        v18 = v57;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDAccountInitializer: Creating SiriFoundInApps list {listChangeItem: %@}", v44, 0xCu);
        v46 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v56, 1, v46);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {

        v42 = v41;
      }

      v63 = 0;
      v51 = -[NSObject saveSynchronouslyWithError:](v14, "saveSynchronouslyWithError:", &v63);
      v52 = v63;
      if (v51)
      {
        v53 = v63;

        return;
      }
      v54 = v63;
      _convertNSErrorToError(_:)(v52);

      swift_willThrow(v55);
      v14 = v41;
    }
    else
    {
      v49 = v63;
      _convertNSErrorToError(_:)(v35);

      swift_willThrow(v50);
    }
    goto LABEL_29;
  }
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_100847EF0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "StoreController not supportsLocalInternalAccount. Skipping initializeLocalInternalAccountIfNeeded", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

}

void sub_1003AC45C()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSString v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t *v31;
  NSObject *v32;
  uint64_t v33;
  unsigned int v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  id v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  NSString v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  NSObject *v76;
  uint64_t v77;
  unsigned int v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject **v84;
  NSObject **v85;
  NSObject **v86;
  NSObject *v87;
  NSObject *v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;

  v1 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  v90 = 0;
  v3 = objc_msgSend(v2, "fetchAccountWithObjectID:error:", v1, &v90);
  v4 = v90;
  if (v3)
  {
    v5 = v3;
    v6 = v90;
    goto LABEL_3;
  }
  v15 = v90;
  v16 = _convertNSErrorToError(_:)(v4);

  swift_willThrow(v17);
  swift_errorRelease(v16);
  v18 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v2);
  v19 = (id)_REMGetLocalizedString(12);
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  v23 = -[NSObject _addLocalAccountWithName:accountObjectID:](v18, "_addLocalAccountWithName:accountObjectID:", v19, v1, v20);

  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100847EF0);
  v7 = v23;
  v25 = Logger.logObject.getter(v7);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v88 = v18;
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v84 = (NSObject **)swift_slowAlloc(8, -1);
    v87 = v1;
    *(_DWORD *)v27 = 138412290;
    v90 = v7;
    v28 = v2;
    v29 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
    *v84 = v7;

    v2 = v28;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDAccountInitializer: Creating local account {changeItem: %@}", v27, 0xCu);
    v30 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v84, 1, v30);
    v1 = v87;
    swift_slowDealloc(v84, -1, -1);
    v31 = v27;
    v18 = v88;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {

    v25 = v7;
  }

  v90 = 0;
  v34 = -[NSObject saveSynchronouslyWithError:](v18, "saveSynchronouslyWithError:", &v90);
  v35 = v90;
  if (!v34)
  {
    v40 = v90;
    _convertNSErrorToError(_:)(v35);

    swift_willThrow(v41);
    goto LABEL_20;
  }
  v90 = 0;
  v36 = v35;
  v37 = objc_msgSend(v2, "fetchAccountWithObjectID:error:", v1, &v90);
  v38 = v90;
  if (v37)
  {
    v5 = v37;
    v39 = v90;

LABEL_3:
    v7 = v5;
    v90 = 0;
    v8 = -[NSObject fetchListsWithError:](v7, "fetchListsWithError:", &v90);
    v9 = v90;
    if (v8)
    {
      v10 = v8;
      v11 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);
      v13 = v9;

      if ((unint64_t)v12 >> 62)
      {
        if (v12 < 0)
          v83 = v12;
        else
          v83 = v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v14 = _CocoaArrayWrapper.endIndex.getter(v83);
        swift_bridgeObjectRelease(v12);
      }
      else
      {
        v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v12);
      if (v14)
      {

        return;
      }
      v42 = objc_msgSend((id)objc_opt_self(REMList), "localAccountDefaultListID");
      v90 = 0;
      v43 = objc_msgSend(v2, "fetchListWithObjectID:error:", v42, &v90);
      v44 = v90;
      if (v43)
      {
        v89 = v43;
        v45 = qword_1008373A8;
        v46 = v90;
        if (v45 != -1)
          swift_once(&qword_1008373A8, sub_1003AAAF8);
        v47 = type metadata accessor for Logger(0);
        sub_10001AAA8(v47, (uint64_t)qword_100847EF0);
        v48 = v42;
        v49 = Logger.logObject.getter(v48);
        v50 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc(12, -1);
          v85 = (NSObject **)swift_slowAlloc(8, -1);
          *(_DWORD *)v51 = 138543362;
          v90 = v48;
          v52 = v48;
          v53 = v1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
          *v85 = v48;

          _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDAccountInitializer: This should never happen: the store told us there's no lists in this account but we did find a list with the default list ID {listID: %{public}@}", v51, 0xCu);
          v54 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v85, 1, v54);
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v51, -1, -1);
        }
        else
        {

          v53 = v48;
        }

        return;
      }
      v63 = v90;
      v64 = _convertNSErrorToError(_:)(v44);

      swift_willThrow(v65);
      swift_errorRelease(v64);
      v66 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v2);
      v18 = -[NSObject updateAccount:](v66, "updateAccount:", v7);
      v67 = (id)_REMGetLocalizedString(11);
      if (!v67)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v70 = v69;
        v67 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v68 = swift_bridgeObjectRelease(v70).n128_u64[0];
      }

      if (qword_1008373A8 != -1)
        swift_once(&qword_1008373A8, sub_1003AAAF8);
      v71 = type metadata accessor for Logger(0);
      sub_10001AAA8(v71, (uint64_t)qword_100847EF0);
      v72 = v1;
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v75 = 138543362;
        v90 = v72;
        v76 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
        *v86 = v72;

        _os_log_impl((void *)&_mh_execute_header, v73, v74, "RDAccountInitializer: Creating default list for local account {accountID: %{public}@}", v75, 0xCu);
        v77 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v86, 1, v77);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v75, -1, -1);
      }
      else
      {

        v73 = v72;
      }

      v90 = 0;
      v78 = -[NSObject saveSynchronouslyWithError:](v66, "saveSynchronouslyWithError:", &v90);
      v79 = v90;
      if (v78)
      {
        v80 = v90;

        return;
      }
      v81 = v90;
      _convertNSErrorToError(_:)(v79);

      swift_willThrow(v82);
      v1 = v7;
      v7 = v66;
    }
    else
    {
      v32 = v90;
      _convertNSErrorToError(_:)(v9);

      swift_willThrow(v33);
      v18 = v7;
    }
LABEL_20:

    return;
  }
  v55 = v90;
  v56 = v7;
  v57 = _convertNSErrorToError(_:)(v38);

  swift_willThrow(v58);
  swift_errorRelease(v57);

  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDAccountInitializer: No local account is found or created", v62, 2u);
    swift_slowDealloc(v62, -1, -1);
  }

}

_QWORD *sub_1003ACDDC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;

  if (!objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController), "hasPassedBuddyAndSystemDataMigrator"))
  {
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_100847EF0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDAccountInitializer: Not handling account data moves because we have not passed buddy or system data migrator", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v21 = swift_allocObject(v20, 40, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1006A7330;
    v22 = sub_10001A630(&qword_100847F88);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = Promise.init(value:)();
    *(_QWORD *)(v21 + 32) = v23;
    v31 = (_QWORD *)v21;
    specialized Array._endMutation()(v23);
    return v31;
  }
  v31 = _swiftEmptyArrayStorage;
  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities), "unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts");
  v2 = sub_1000151B0(0, &qword_100847FA0, ACAccount_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v25 = v3;
    else
      v25 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (v4)
      goto LABEL_4;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (v4)
    {
LABEL_4:
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = AAAccountClassPrimary;
        do
        {
          if ((v3 & 0xC000000000000001) != 0)
            v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
          else
            v7 = *(id *)(v3 + 8 * v5 + 32);
          v8 = v7;
          sub_1003AD970(v7);
          sub_1003AE418(v8);
          v10 = v9;
          v11 = swift_retain(v9);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
          v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v13 >= v12 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
          v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
          specialized Array._endMutation()(v14);
          if (objc_msgSend(v8, "aa_isAccountClass:", v6))
            sub_1003AE70C(v8);

          swift_release(v10);
          ++v5;
        }
        while (v4 != v5);
        swift_bridgeObjectRelease_n(v3, 2);
        return v31;
      }
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease_n(v3, 2);
  if (qword_1008373A8 != -1)
LABEL_30:
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10001AAA8(v26, (uint64_t)qword_100847EF0);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDAccountInitializer: No iCloud account signed in or not enabled Reminders.", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_1003AD1A4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  char v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  Swift::Bool v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  v2 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
  v39 = 0;
  v3 = objc_msgSend(v1, "fetchAccountWithObjectID:error:", v2, &v39);

  v4 = v39;
  if (!v3)
  {
    v26 = v39;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v27);
    return;
  }
  v39 = 0;
  v5 = v4;
  v6 = objc_msgSend(v1, "fetchAccountsWithError:", &v39);
  v7 = v39;
  if (v6)
  {
    v8 = v6;
    v9 = sub_1000151B0(0, &qword_100844408, REMAccount_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    v11 = v7;

    v38 = v3;
    if ((unint64_t)v10 >> 62)
    {
LABEL_31:
      if (v10 < 0)
        v37 = v10;
      else
        v37 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v12 = _CocoaArrayWrapper.endIndex.getter(v37);
      if (v12)
      {
LABEL_5:
        v13 = 4;
        while (1)
        {
          if ((v10 & 0xC000000000000001) != 0)
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
          else
            v14 = *(id *)(v10 + 8 * v13);
          v15 = v14;
          v16 = v13 - 3;
          if (__OFADD__(v13 - 4, 1))
          {
            __break(1u);
            goto LABEL_31;
          }
          v17 = objc_msgSend(v14, "accountTypeHost");
          v18 = objc_msgSend(v17, "isCloudBased");

          if ((v18 & 1) != 0)
            break;
          ++v13;
          if (v16 == v12)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease_n(v10, 2);
        if (qword_1008373A8 != -1)
          swift_once(&qword_1008373A8, sub_1003AAAF8);
        v30 = type metadata accessor for Logger(0);
        v31 = sub_10001AAA8(v30, (uint64_t)qword_100847EF0);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.info.getter(v32);
        v3 = v38;
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is inactive (if empty) as we have some cloud accounts.", v34, 2u);
          swift_slowDealloc(v34, -1, -1);
        }

        if (!objc_msgSend(v38, "inactive"))
        {
          v35 = REMAccount.isConsideredEmpty()();
          if (!v36 && v35)
          {
            v24 = 1;
            v25 = v38;
            goto LABEL_18;
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v12)
        goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease_n(v10, 2);
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001AAA8(v19, (uint64_t)qword_100847EF0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    v3 = v38;
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is active as there's no cloud account signed in.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    if (objc_msgSend(v38, "inactive"))
    {
      v24 = 0;
      v25 = v38;
LABEL_18:
      sub_1003AFA64(v24, v25);
    }
  }
  else
  {
    v28 = v39;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v29);
  }
LABEL_29:

}

uint64_t sub_1003AD5D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  uint64_t v14;
  NSNotification v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  __int128 v22;
  __int128 v23;

  v2 = type metadata accessor for Notification(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    *(_QWORD *)&v22 = &_swiftEmptyDictionarySingleton;
    sub_10028D8C4(a1, 0x726F727265, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    v7 = v22;
    swift_bridgeObjectRelease(0x8000000000000000);
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100847EF0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDAccountInitializer: Posting notification initialized all accounts failed.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v14 = sub_1003B1DF0(v7);
    swift_bridgeObjectRelease(v7);
    if (qword_1008373B0 != -1)
      swift_once(&qword_1008373B0, sub_1003AAB88);
    v22 = 0u;
    v23 = 0u;
    Notification.init(name:object:userInfo:)((id)qword_100871EC0, &v22, v14);
    v15.super.isa = Notification._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    objc_msgSend(v13, "postNotification:", v15.super.isa);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_100847EF0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountInitializer: Posting notification initialized all accounts done.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1008373B0 != -1)
      swift_once(&qword_1008373B0, sub_1003AAB88);
    v22 = 0u;
    v23 = 0u;
    Notification.init(name:object:userInfo:)((id)qword_100871EC0, &v22, 0);
    v15.super.isa = Notification._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    objc_msgSend(v13, "postNotification:", v15.super.isa);
  }

  return notify_post(_REMStoreDidCompleteInitializeAllAccounts);
}

void sub_1003AD970(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  NSArray v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *oslog;
  _BYTE v39[24];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults);
  v5 = objc_msgSend(v4, "acAccountIdentifiersToMigrateInactivatedCalDavData");
  if (v5)
  {
    v6 = v5;
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String);

    if (*(_QWORD *)(v7 + 16))
    {
      v8 = objc_msgSend(a1, "displayAccount");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "identifier");

        if (v10)
        {
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v13 = v12;

          v14 = sub_10011EE40(v7);
          swift_bridgeObjectRelease(v7);
          v42 = v14;
          swift_bridgeObjectRetain(v14);
          v15 = sub_1001B2278(v11, v13, v14);
          swift_bridgeObjectRelease(v14);
          if ((v15 & 1) != 0)
          {
            sub_10059BE6C(v11, v13);
            swift_bridgeObjectRelease(v16);
            if (*(_QWORD *)(v42 + 16))
            {
              v17 = sub_1001E8BAC(v42);
              swift_bridgeObjectRelease(v42);
              v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
              swift_release(v17);
            }
            else
            {
              swift_bridgeObjectRelease(v42);
              v18.super.isa = 0;
            }
            objc_msgSend(v4, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", v18.super.isa);

            if (qword_1008373A8 != -1)
              swift_once(&qword_1008373A8, sub_1003AAAF8);
            v29 = type metadata accessor for Logger(0);
            sub_10001AAA8(v29, (uint64_t)qword_100847EF0);
            v30 = swift_bridgeObjectRetain_n(v13, 2);
            v31 = Logger.logObject.getter(v30);
            v32 = static os_log_type_t.default.getter(v31);
            if (os_log_type_enabled(v31, v32))
            {
              v33 = (uint8_t *)swift_slowAlloc(12, -1);
              v34 = swift_slowAlloc(32, -1);
              v41 = v34;
              *(_DWORD *)v33 = 136446210;
              swift_bridgeObjectRetain(v13);
              v40 = sub_10001A820(v11, v13, &v41);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
              swift_bridgeObjectRelease_n(v13, 3);
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: AccountUtil has set the flag indicating we should try to 'migrate' inactivated CalDAV data to CloudKit if any {aaAccountIdentifier: %{public}s}.", v33, 0xCu);
              swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v34, -1, -1);
              swift_slowDealloc(v33, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v13, 2);
            }
            v35 = *(void **)(v2 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
            v36 = type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover();
            *(_QWORD *)(swift_initStackObject(v36, v39) + 16) = v35;
            v37 = v35;
            sub_10054FFE0(a1, 0);

            swift_bridgeObjectRelease(v13);
          }
          else
          {
            swift_bridgeObjectRelease(v14);
            if (qword_1008373A8 != -1)
              swift_once(&qword_1008373A8, sub_1003AAAF8);
            v23 = type metadata accessor for Logger(0);
            sub_10001AAA8(v23, (uint64_t)qword_100847EF0);
            swift_bridgeObjectRetain(v13);
            v25 = Logger.logObject.getter(v24);
            v26 = static os_log_type_t.default.getter(v25);
            if (os_log_type_enabled(v25, v26))
            {
              v27 = (uint8_t *)swift_slowAlloc(12, -1);
              v28 = swift_slowAlloc(32, -1);
              v41 = v28;
              *(_DWORD *)v27 = 136446210;
              swift_bridgeObjectRetain(v13);
              v40 = sub_10001A820(v11, v13, &v41);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
              swift_bridgeObjectRelease_n(v13, 3);
              _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data no signal flag is set for account %{public}s.", v27, 0xCu);
              swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v28, -1, -1);
              swift_slowDealloc(v27, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v13, 2);
            }
          }
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease(v7);
  }
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001AAA8(v19, (uint64_t)qword_100847EF0);
  oslog = Logger.logObject.getter(v20);
  v21 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v21, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data as no signal flag is set.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

void sub_1003AE418(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;

  v3 = objc_msgSend(a1, "displayAccount");
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "identifier");

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  v10 = sub_100553050(a1, v9);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v9);
    v13 = objc_msgSend(v12, "updateAccount:", v11);
    __chkstk_darwin(objc_msgSend(v13, "removeFromStore"));
    v22[2] = v12;
    v22[3] = v6;
    v22[4] = v8;
    v22[5] = v11;
    v14 = sub_10001A630(&qword_100847F88);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    Promise.init(resolver:)(sub_1003B0040, v22);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_100847EF0);
    swift_bridgeObjectRetain(v8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v24 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(v8);
      v23 = sub_10001A820(v6, v8, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: There's no inactivated CalDAV account store to remove, we're done {appleAccountIdentifier: %{public}s}.", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
    v21 = sub_10001A630(&qword_100847F88);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    Promise.init(value:)();
  }
}

void sub_1003AE70C(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __n128 v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  char v53[24];
  uint64_t v54;
  NSObject *v55;

  v3 = v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults);
  v10 = objc_msgSend(v9, "acAccountIdentifierToMergeLocalDataIntoSyncData");
  if (v10)
  {
    v11 = v10;
    v49 = v8;
    v50 = v6;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    objc_msgSend(v9, "setAcAccountIdentifierToMergeLocalDataIntoSyncData:", 0);
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v14 = sub_10001AAA8(v5, (uint64_t)qword_100847EF0);
    v15 = swift_bridgeObjectRetain_n(v13, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v51 = v14;
    if (v18)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v55 = v20;
      *(_DWORD *)v19 = 136446210;
      v2 = v19 + 12;
      swift_bridgeObjectRetain(v13);
      v54 = sub_10001A820((uint64_t)v52, v13, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(v13, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: DCO has set the merge action flag asking us to move data to cloud, let's move on... {flagged: %{public}s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
    }
    v24 = objc_msgSend(a1, "displayAccount");
    if (v24)
    {
      v25 = v24;
      v2 = objc_msgSend(v24, "identifier");

      if (v2)
      {
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
        v28 = v27;

        if (v26 == v52 && v28 == v13)
        {
          swift_bridgeObjectRelease(v13);
LABEL_18:
          v31 = *(void **)(v3 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
          v32 = type metadata accessor for RDAccountUtils.LocalDataToICloudMover();
          *(_QWORD *)(swift_initStackObject(v32, v53) + 16) = v31;
          v33 = v31;
          sub_100551364(a1);

          swift_bridgeObjectRelease(v13);
          return;
        }
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v52, v13, 0);
        v30 = swift_bridgeObjectRelease(v28);
        if ((v29 & 1) != 0)
          goto LABEL_18;
        v35 = v49;
        v34 = v50;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v50 + 16))(v49, v51, v5, v30);
        v36 = a1;
        swift_bridgeObjectRetain(v13);
        v2 = v36;
        v37 = Logger.logObject.getter(v2);
        v38 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v37, v38))
        {

          swift_bridgeObjectRelease_n(v13, 2);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v5);
          return;
        }
        v39 = swift_slowAlloc(22, -1);
        v40 = swift_slowAlloc(64, -1);
        v55 = v40;
        *(_DWORD *)v39 = 136446466;
        swift_bridgeObjectRetain(v13);
        v54 = sub_10001A820((uint64_t)v52, v13, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
        swift_bridgeObjectRelease_n(v13, 3);
        *(_WORD *)(v39 + 12) = 2082;
        v41 = objc_msgSend(v2, "displayAccount");
        if (v41)
        {
          v42 = v41;
          v52 = v40;
          v43 = objc_msgSend(v41, "identifier");

          if (v43)
          {
            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v46 = v45;

            v54 = sub_10001A820(v44, v46, (uint64_t *)&v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

            swift_bridgeObjectRelease(v46);
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: The DCO flagged identifier is not the same as that of the current primary iCloud account. Something went wrong or we've found a race condition, don't move data {flagged: %{public}s, primary: %{public}s}.", (uint8_t *)v39, 0x16u);
            v47 = v52;
            swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v47, -1, -1);
            swift_slowDealloc(v39, -1, -1);

            (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v5);
            return;
          }
          goto LABEL_27;
        }
LABEL_26:

        __break(1u);
LABEL_27:

        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v21 = sub_10001AAA8(v5, (uint64_t)qword_100847EF0);
  v52 = Logger.logObject.getter(v21);
  v22 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled(v52, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v22, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Data move not needed as no merge action flag was not set by the DCO.", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

void sub_1003AF110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  id v22;
  _QWORD v23[5];
  _QWORD *v24;

  v16 = swift_allocObject(&unk_1007F1B18, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = qword_100836F28;
  swift_retain(a2);
  if (v17 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v18 = qword_100871CE8;
  v19 = (_QWORD *)swift_allocObject(&unk_1007F1B40, 72, 7);
  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a8;
  v19[7] = sub_1000098EC;
  v19[8] = v16;
  v23[4] = sub_1003B00AC;
  v24 = v19;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_1000E18E4;
  v23[3] = &unk_1007F1B58;
  v20 = _Block_copy(v23);
  v21 = v24;
  swift_bridgeObjectRetain(a7);
  swift_retain(a4);
  v22 = a8;
  swift_release(v21);
  objc_msgSend(a5, "saveWithQueue:completion:", v18, v20);
  _Block_release(v20);
}

uint64_t sub_1003AF274(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t (*a7)(void))
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(void);
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100847EF0);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v12 = swift_errorRetain(a1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v37 = v32;
      *(_DWORD *)v15 = 136315394;
      swift_getErrorValue(a1, v35, v34);
      v16 = Error.rem_errorDescription.getter(v34[1], v34[2]);
      v18 = v17;
      v36 = sub_10001A820(v16, v17, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v15 + 12) = 2082;
      swift_bridgeObjectRetain(a3);
      v36 = sub_10001A820(a2, a3, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded save failed {error: %s, appleAccountIdentifier: %{public}s}", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      swift_bridgeObjectRelease_n(a3, 2);
    }
    a4(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_1008373A8 != -1)
      swift_once(&qword_1008373A8, sub_1003AAAF8);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100847EF0);
    v22 = a6;
    swift_bridgeObjectRetain_n(a3, 2);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v33 = swift_slowAlloc(32, -1);
      v37 = v33;
      *(_DWORD *)v26 = 138543618;
      v28 = a7;
      v29 = objc_msgSend(v23, "remObjectID");
      v36 = (uint64_t)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *v27 = v29;
      a7 = v28;

      *(_WORD *)(v26 + 12) = 2082;
      swift_bridgeObjectRetain(a3);
      v36 = sub_10001A820(a2, a3, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: Removed inactivated CalDAV account store {remAccountObjID: %{public}@, appleAccountIdentifier: %{public}s}.", (uint8_t *)v26, 0x16u);
      v30 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v27, 1, v30);
      swift_slowDealloc(v27, -1, -1);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    return a7();
  }
}

uint64_t sub_1003AF700(uint64_t a1)
{
  id v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = objc_msgSend((id)objc_opt_self(REMCDAccount), "_groundTruth_primaryActiveCloudKitAccountInContext:", a1);
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_100847EF0);
  v3 = v1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v26 = v7;
    *(_DWORD *)v6 = 136446466;
    v23 = v7;
    if (v3)
      v8 = objc_msgSend(v3, "remObjectID");
    else
      v8 = 0;
    v9 = sub_10001A630((uint64_t *)&unk_100844910);
    v10 = Optional.descriptionOrNil.getter(v9);
    v12 = v11;

    v24 = sub_10001A820(v10, v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v12).n128_u64[0];
    *(_WORD *)(v6 + 12) = 2082;
    if (v3)
      v14 = objc_msgSend(v3, "objectID", v13);
    else
      v14 = 0;
    v24 = (uint64_t)v14;
    v15 = sub_10001A630(&qword_100847FA8);
    v16 = Optional.descriptionOrNil.getter(v15);
    v18 = v17;

    v24 = sub_10001A820(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAccountInitializer: Calling updateInMemoryPrimaryActiveCKAccountCachesIfNeeded with {remObjectID: %{public}s, managedObjectID: %{public}s}", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v19 = (_QWORD *)qword_100872288;
  v20 = qword_100837960;
  swift_retain(qword_100872288);
  if (v20 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v21 = qword_100872290;
  swift_retain(qword_100872290);
  sub_100300C1C(v3, v19, v21);

  swift_release(v19);
  return swift_release(v21);
}

void sub_1003AFA64(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v3 = v2;
  if (qword_1008373A8 != -1)
    swift_once(&qword_1008373A8, sub_1003AAAF8);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_100847EF0);
  v7 = a2;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = (void *)swift_slowAlloc(32, -1);
    v27 = v24;
    *(_DWORD *)v10 = 138543618;
    v25 = v3;
    v12 = objc_msgSend(v7, "objectID");
    v26 = (uint64_t)v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    *v11 = v12;

    *(_WORD *)(v10 + 12) = 2082;
    if ((a1 & 1) != 0)
      v13 = 1702195828;
    else
      v13 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v14 = 0xE400000000000000;
    else
      v14 = 0xE500000000000000;
    v26 = sub_10001A820(v13, v14, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    v15 = v14;
    v3 = v25;
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountInitializer: Setting account inactive value {accountID: %{public}@, inactive: %{public}s}", (uint8_t *)v10, 0x16u);
    v16 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v11, 1, v16);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v17 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store));
  v18 = objc_msgSend(v17, "updateAccount:", v7);
  objc_msgSend(v18, "setInactive:", a1 & 1);
  v27 = 0;
  v19 = objc_msgSend(v17, "saveSynchronouslyWithError:", &v27);
  v20 = v27;
  if ((v19 & 1) != 0)
  {
    v21 = v27;
  }
  else
  {
    v22 = v27;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow(v23);
  }

}

uint64_t sub_1003AFD94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.utility(_:), v8);
  v12 = (void *)static OS_dispatch_queue.global(qos:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v13 = swift_allocObject(&unk_1007F1B90, 24, 7);
  *(_QWORD *)(v13 + 16) = a1;
  aBlock[4] = sub_1003B00E4;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F1BA8;
  v14 = _Block_copy(aBlock);
  v15 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_1000D3124();
  v17 = sub_10001A630((uint64_t *)&unk_100838000);
  v18 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  return swift_release(v25);
}

uint64_t sub_1003AFFF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B0018()
{
  return sub_1003AFD94(0);
}

void sub_1003B0040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1003AF110(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_1003B004C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003B0070()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1003B00AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1003AF274(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(uint64_t (**)(void))(v1 + 56));
}

uint64_t sub_1003B00C0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B00E4()
{
  uint64_t v0;

  return sub_1003AD5D8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003B00EC(uint64_t a1)
{
  return sub_1003AF700(a1);
}

uint64_t sub_1003B0104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B0178()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification(0) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16)
                                            + OBJC_IVAR___RDAccountInitializerDidCompleteInitializeAllAccountsObserver_handler))(v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1003B01C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003B01E8()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = Notification._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

uint64_t sub_1003B023C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  v9[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v9[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v9[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v9[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v9[4] = *(_QWORD *)(v2 - 8) + 64;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8));
    v6 = type metadata accessor for Optional(319, AssociatedTypeWitness);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v9[5] = *(_QWORD *)(v6 - 8) + 64;
      v9[6] = &unk_1006B8D40;
      v9[7] = &unk_1006B8D58;
      v9[8] = &unk_1006B8D70;
      return swift_initClassMetadata2(a1, 0, 9, v9, a1 + 96);
    }
  }
  return v3;
}

uint64_t sub_1003B0334(uint64_t a1)
{
  return sub_1003B035C(a1, &qword_10083FEE8, REMReminderStorage_ptr);
}

uint64_t sub_1003B0348(uint64_t a1)
{
  return sub_1003B035C(a1, &qword_10083FF70, REMAccountStorage_ptr);
}

uint64_t sub_1003B035C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;
  _OWORD v49[2];
  _OWORD v50[2];
  void *v51;
  void *v52;

  v5 = a1;
  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      goto LABEL_5;
LABEL_11:
    v8 = _swiftEmptyDictionarySingleton;
    if (v6)
      goto LABEL_6;
LABEL_12:
    v14 = -1 << *(_BYTE *)(v5 + 32);
    v11 = ~v14;
    v46 = v5 + 64;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(v5 + 64);
    v13 = v5;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v7 = __CocoaDictionary.count.getter(a1);
  if (!v7)
    goto LABEL_11;
LABEL_5:
  sub_10001A630((uint64_t *)&unk_1008443B0);
  v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v7);
  if (!v6)
    goto LABEL_12;
LABEL_6:
  if (v5 < 0)
    v9 = v5;
  else
    v9 = v5 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaDictionary.makeIterator()(v9);
  v46 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v10 | 0x8000000000000000;
LABEL_16:
  v45 = (unint64_t)(v11 + 64) >> 6;
  v17 = v8 + 8;
  swift_bridgeObjectRetain(v5);
  result = swift_retain();
  v47 = 0;
  v44 = (char *)&type metadata for Swift.AnyObject + 8;
  while ((v13 & 0x8000000000000000) != 0)
  {
    v22 = __CocoaDictionary.Iterator.next()(result);
    if (!v22)
      goto LABEL_50;
    v24 = v23;
    *(_QWORD *)&v50[0] = v22;
    v25 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_dynamicCast(&v51, v50, v44, v25, 7);
    *(_QWORD *)&v50[0] = v24;
    v26 = sub_1000151B0(0, a2, a3);
    swift_dynamicCast(&v52, v50, v44, v26, 7);
    v27 = v51;
    v28 = v52;
LABEL_41:
    v48 = v28;
    *(_QWORD *)&v49[0] = v27;
    v35 = sub_1000151B0(0, a2, a3);
    swift_dynamicCast((char *)v49 + 8, &v48, v35, (char *)&type metadata for Any + 8, 7);
    v36 = *(_QWORD *)&v49[0];
    sub_10001A6CC((_OWORD *)((char *)v49 + 8), (_OWORD *)((char *)v50 + 8));
    sub_10001A6CC((_OWORD *)((char *)v50 + 8), v49);
    sub_10001A6CC(v49, v50);
    result = NSObject._rawHashValue(seed:)(v8[5]);
    v37 = -1 << *((_BYTE *)v8 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~v17[v38 >> 6]) != 0)
    {
      v19 = __clz(__rbit64((-1 << v38) & ~v17[v38 >> 6])) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = v17[v39];
      }
      while (v43 == -1);
      v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)((char *)v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(v8[6] + 8 * v19) = v36;
    result = (uint64_t)sub_10001A6CC(v50, (_OWORD *)(v8[7] + 32 * v19));
    ++v8[2];
  }
  if (v12)
  {
    v20 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v21 = v20 | (v47 << 6);
LABEL_40:
    v27 = *(void **)(*(_QWORD *)(v13 + 48) + 8 * v21);
    v28 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v21);
    v51 = v27;
    v52 = v28;
    v33 = v27;
    v34 = v28;
    goto LABEL_41;
  }
  v29 = v47 + 1;
  if (__OFADD__(v47, 1))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v29 >= v45)
    goto LABEL_50;
  v30 = *(_QWORD *)(v46 + 8 * v29);
  v31 = v47 + 1;
  if (v30)
    goto LABEL_39;
  v31 = v47 + 2;
  if (v47 + 2 >= v45)
    goto LABEL_50;
  v30 = *(_QWORD *)(v46 + 8 * v31);
  if (v30)
    goto LABEL_39;
  v31 = v47 + 3;
  if (v47 + 3 >= v45)
    goto LABEL_50;
  v30 = *(_QWORD *)(v46 + 8 * v31);
  if (v30)
    goto LABEL_39;
  v31 = v47 + 4;
  if (v47 + 4 >= v45)
    goto LABEL_50;
  v30 = *(_QWORD *)(v46 + 8 * v31);
  if (v30)
  {
LABEL_39:
    v12 = (v30 - 1) & v30;
    v21 = __clz(__rbit64(v30)) + (v31 << 6);
    v47 = v31;
    goto LABEL_40;
  }
  v32 = v47 + 5;
  if (v47 + 5 >= v45)
  {
LABEL_50:
    v51 = 0;
    v52 = 0;
    swift_release(v8);
    sub_1000C6560(v13);
    return (uint64_t)v8;
  }
  v30 = *(_QWORD *)(v46 + 8 * v32);
  if (v30)
  {
    v31 = v47 + 5;
    goto LABEL_39;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v45)
      goto LABEL_50;
    v30 = *(_QWORD *)(v46 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_39;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1003B07B8(uint64_t a1)
{
  return sub_1003B035C(a1, (unint64_t *)&unk_100844190, REMListStorage_ptr);
}

uint64_t sub_1003B07CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_1008436B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v30)
        goto LABEL_37;
      v15 = *(_QWORD *)(v31 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v30)
          goto LABEL_37;
        v15 = *(_QWORD *)(v31 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v30)
            goto LABEL_37;
          v15 = *(_QWORD *)(v31 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v41[0] = *v18;
    *((_QWORD *)&v41[0] + 1) = v19;
    v21 = v20;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7);
    v32 = v20;
    v22 = sub_10001A630((uint64_t *)&unk_100850730);
    swift_dynamicCast(v36, &v32, v22, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_10001A6CC(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_10001A6CC(v40, v41);
    sub_10001A6CC(v41, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~v7[v24 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = v7[v25];
      }
      while (v29 == -1);
      v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_10001A6CC(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_1000C6560(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v31 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1003B0B88(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  _OWORD v49[2];
  void *v50;
  uint64_t v51;

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      goto LABEL_5;
LABEL_11:
    v4 = &_swiftEmptyDictionarySingleton;
    if (v2)
      goto LABEL_6;
LABEL_12:
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v7 = ~v10;
    v38 = v1 + 64;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(v1 + 64);
    v9 = v1;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = __CocoaDictionary.count.getter(a1);
  if (!v3)
    goto LABEL_11;
LABEL_5:
  sub_10001A630(&qword_1008436B0);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  v6 = __CocoaDictionary.makeIterator()(v5);
  v38 = 0;
  v7 = 0;
  v8 = 0;
  v9 = v6 | 0x8000000000000000;
LABEL_16:
  v37 = (unint64_t)(v7 + 64) >> 6;
  v13 = (char *)(v4 + 8);
  swift_bridgeObjectRetain(v1);
  result = swift_retain(v4);
  v39 = 0;
  while ((v9 & 0x8000000000000000) != 0)
  {
    v19 = __CocoaDictionary.Iterator.next()(result);
    if (!v19)
      goto LABEL_50;
    v21 = v20;
    *(_QWORD *)&v45 = v19;
    v22 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    swift_dynamicCast(&v50, &v45, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v51 = v21;
    v23 = v50;
LABEL_41:
    *(_QWORD *)&v49[0] = v23;
    v29 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    swift_dynamicCast(&v41, v49, v29, &type metadata for AnyHashable, 7);
    v40 = v21;
    swift_dynamicCast(v44, &v40, (char *)&type metadata for Swift.AnyObject + 8, (char *)&type metadata for Any + 8, 7);
    v45 = v41;
    v46 = v42;
    v47 = v43;
    sub_10001A6CC(v44, v48);
    v41 = v45;
    v42 = v46;
    v43 = v47;
    sub_10001A6CC(v48, v49);
    sub_10001A6CC(v49, &v45);
    result = AnyHashable._rawHashValue(seed:)(v4[5]);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)&v13[8 * (v31 >> 6)]) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)&v13[8 * (v31 >> 6)])) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)&v13[8 * v32];
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)&v13[(v15 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v15;
    v16 = v4[6] + 40 * v15;
    *(_OWORD *)v16 = v41;
    *(_OWORD *)(v16 + 16) = v42;
    *(_QWORD *)(v16 + 32) = v43;
    result = (uint64_t)sub_10001A6CC(&v45, (_OWORD *)(v4[7] + 32 * v15));
    ++v4[2];
  }
  if (v8)
  {
    v17 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v18 = v17 | (v39 << 6);
LABEL_40:
    v23 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v18);
    v21 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v18);
    v50 = v23;
    v51 = v21;
    v28 = v23;
    swift_unknownObjectRetain(v21);
    goto LABEL_41;
  }
  v24 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v24 >= v37)
    goto LABEL_50;
  v25 = *(_QWORD *)(v38 + 8 * v24);
  v26 = v39 + 1;
  if (v25)
    goto LABEL_39;
  v26 = v39 + 2;
  if (v39 + 2 >= v37)
    goto LABEL_50;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
    goto LABEL_39;
  v26 = v39 + 3;
  if (v39 + 3 >= v37)
    goto LABEL_50;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
    goto LABEL_39;
  v26 = v39 + 4;
  if (v39 + 4 >= v37)
    goto LABEL_50;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
  {
LABEL_39:
    v8 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v26 << 6);
    v39 = v26;
    goto LABEL_40;
  }
  v27 = v39 + 5;
  if (v39 + 5 >= v37)
  {
LABEL_50:
    v50 = 0;
    v51 = 0;
    swift_release(v4);
    sub_1000C6560(v9);
    return (uint64_t)v4;
  }
  v25 = *(_QWORD *)(v38 + 8 * v27);
  if (v25)
  {
    v26 = v39 + 5;
    goto LABEL_39;
  }
  while (1)
  {
    v26 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v26 >= v37)
      goto LABEL_50;
    v25 = *(_QWORD *)(v38 + 8 * v26);
    ++v27;
    if (v25)
      goto LABEL_39;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1003B101C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      goto LABEL_5;
LABEL_11:
    v4 = &_swiftEmptyDictionarySingleton;
    if (v2)
      goto LABEL_6;
LABEL_12:
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v7 = ~v10;
    v41 = v1 + 64;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(v1 + 64);
    v9 = v1;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = __CocoaDictionary.count.getter(a1);
  if (!v3)
    goto LABEL_11;
LABEL_5:
  sub_10001A630(&qword_100848280);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  v6 = __CocoaDictionary.makeIterator()(v5);
  v41 = 0;
  v7 = 0;
  v8 = 0;
  v9 = v6 | 0x8000000000000000;
LABEL_16:
  v40 = (unint64_t)(v7 + 64) >> 6;
  v13 = (char *)(v4 + 8);
  swift_bridgeObjectRetain(v1);
  result = swift_retain();
  v15 = 0;
  while ((v9 & 0x8000000000000000) != 0)
  {
    v20 = __CocoaDictionary.Iterator.next()(result);
    if (!v20)
      goto LABEL_50;
    v22 = v21;
    v42 = v20;
    v23 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v42 = v22;
    v24 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_dynamicCast(&v44, &v42, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v25 = v43;
    v26 = v44;
LABEL_41:
    result = NSObject._rawHashValue(seed:)(v4[5]);
    v33 = -1 << *((_BYTE *)v4 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)&v13[8 * (v34 >> 6)]) != 0)
    {
      v16 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)&v13[8 * (v34 >> 6)])) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)&v13[8 * v35];
      }
      while (v39 == -1);
      v16 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)&v13[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v16;
    *(_QWORD *)(v4[6] + 8 * v16) = v25;
    v17 = (_QWORD *)(v4[7] + 16 * v16);
    *v17 = v26;
    v17[1] = &off_1007F0B48;
    ++v4[2];
  }
  if (v8)
  {
    v18 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v19 = v18 | (v15 << 6);
LABEL_40:
    v25 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v19);
    v26 = *(void **)(*(_QWORD *)(v9 + 56) + 8 * v19);
    v43 = v25;
    v44 = v26;
    v31 = v25;
    v32 = v26;
    goto LABEL_41;
  }
  v27 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v27 >= v40)
    goto LABEL_50;
  v28 = *(_QWORD *)(v41 + 8 * v27);
  v29 = v15 + 1;
  if (v28)
    goto LABEL_39;
  v29 = v15 + 2;
  if (v15 + 2 >= v40)
    goto LABEL_50;
  v28 = *(_QWORD *)(v41 + 8 * v29);
  if (v28)
    goto LABEL_39;
  v29 = v15 + 3;
  if (v15 + 3 >= v40)
    goto LABEL_50;
  v28 = *(_QWORD *)(v41 + 8 * v29);
  if (v28)
    goto LABEL_39;
  v29 = v15 + 4;
  if (v15 + 4 >= v40)
    goto LABEL_50;
  v28 = *(_QWORD *)(v41 + 8 * v29);
  if (v28)
  {
LABEL_39:
    v8 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v29 << 6);
    v15 = v29;
    goto LABEL_40;
  }
  v30 = v15 + 5;
  if (v15 + 5 >= v40)
  {
LABEL_50:
    v43 = 0;
    v44 = 0;
    swift_release(v4);
    sub_1000C6560(v9);
    return (uint64_t)v4;
  }
  v28 = *(_QWORD *)(v41 + 8 * v30);
  if (v28)
  {
    v29 = v15 + 5;
    goto LABEL_39;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v40)
      goto LABEL_50;
    v28 = *(_QWORD *)(v41 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_39;
  }
LABEL_52:
  __break(1u);
  return result;
}

void sub_1003B1400(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630((uint64_t *)&unk_1008436C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  i = 0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v12 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v12 >= v28)
    goto LABEL_32;
  v13 = *(_QWORD *)(v29 + 8 * v12);
  v14 = i + 1;
  if (!v13)
  {
    v14 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (!v13)
    {
      v14 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v15 = i + 5;
          if (i + 5 < v28)
          {
            v13 = *(_QWORD *)(v29 + 8 * v15);
            if (v13)
            {
              v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v14 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_36;
              if (v14 >= v28)
                break;
              v13 = *(_QWORD *)(v29 + 8 * v14);
              ++v15;
              if (v13)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1000C6560(a1);
          return;
        }
      }
    }
  }
LABEL_26:
  v6 = (v13 - 1) & v13;
  v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; v11 = v10 | (i << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v20 = v19;
    v21 = sub_10001A6DC(v18, v17);
    v22 = v21;
    if ((v23 & 1) != 0)
    {
      v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease();
      *v8 = v18;
      v8[1] = v17;
      v9 = v3[7];

      *(_QWORD *)(v9 + 8 * v22) = v20;
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v21;
    v24 = (uint64_t *)(v3[6] + 16 * v21);
    *v24 = v18;
    v24[1] = v17;
    *(_QWORD *)(v3[7] + 8 * v21) = v20;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v3[2] = v27;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1003B16A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_1008436B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v13);
    sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41 + 8);
    *(_QWORD *)&v41[0] = v18;
    v39[0] = v41[0];
    v39[1] = v41[1];
    v40 = v42;
    *(_QWORD *)&v38[0] = v18;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v20 = v18;
    swift_dynamicCast(&v30, v38, v19, &type metadata for AnyHashable, 7);
    sub_10001A6CC((_OWORD *)((char *)v39 + 8), v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10001A6CC(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10001A6CC(v37, v38);
    sub_10001A6CC(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10001A6CC(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000C6560(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1003B1A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_1008438B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v39 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v38 = (unint64_t)(63 - v4) >> 6;
  v7 = &v45;
  v8 = &v47;
  swift_bridgeObjectRetain(v1);
  v40 = 0;
  v9 = (unint64_t *)&qword_100839DE0;
  v10 = NSNumber_ptr;
  v11 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = v40 + 1;
  if (__OFADD__(v40, 1))
    goto LABEL_35;
  if (v20 >= v38)
    goto LABEL_32;
  v21 = *(_QWORD *)(v39 + 8 * v20);
  v22 = v40 + 1;
  if (!v21)
  {
    v22 = v40 + 2;
    if (v40 + 2 >= v38)
      goto LABEL_32;
    v21 = *(_QWORD *)(v39 + 8 * v22);
    if (!v21)
    {
      v22 = v40 + 3;
      if (v40 + 3 >= v38)
        goto LABEL_32;
      v21 = *(_QWORD *)(v39 + 8 * v22);
      if (!v21)
      {
        v22 = v40 + 4;
        if (v40 + 4 >= v38)
          goto LABEL_32;
        v21 = *(_QWORD *)(v39 + 8 * v22);
        if (!v21)
        {
          v23 = v40 + 5;
          if (v40 + 5 < v38)
          {
            v21 = *(_QWORD *)(v39 + 8 * v23);
            if (v21)
            {
              v22 = v40 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v38)
                break;
              v21 = *(_QWORD *)(v39 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1000C6560(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v40 = v22;
  v41 = (v21 - 1) & v21;
  for (i = __clz(__rbit64(v21)) + (v22 << 6); ; i = __clz(__rbit64(v6)) | (v40 << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = v24[1];
    v26 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * i);
    v43 = *v24;
    v44 = v25;
    v42 = v26;
    v27 = sub_1000151B0(0, v9, v10);
    swift_bridgeObjectRetain(v25);
    v28 = v26;
    swift_dynamicCast(v7, &v42, v27, v11, 7);
    v30 = v43;
    v29 = v44;
    sub_10001A6CC(v7, v8);
    sub_10001A6CC(v8, v48);
    sub_10001A6CC(v48, &v46);
    v31 = sub_10001A6DC(v30, v29);
    v32 = v31;
    if ((v33 & 1) != 0)
    {
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v10;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v31);
      swift_bridgeObjectRelease();
      *v17 = v30;
      v17[1] = v29;
      v9 = v16;
      v10 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      v11 = (char *)&type metadata for Any + 8;
      v18 = (_QWORD *)(v3[7] + 32 * v32);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v18);
      sub_10001A6CC(&v46, v18);
      v6 = v41;
      if (!v41)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v31;
    v34 = (uint64_t *)(v3[6] + 16 * v31);
    *v34 = v30;
    v34[1] = v29;
    sub_10001A6CC(&v46, (_OWORD *)(v3[7] + 32 * v31));
    v35 = v3[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_34;
    v3[2] = v37;
    v6 = v41;
    if (!v41)
      goto LABEL_11;
LABEL_10:
    v41 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1003B1DF0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_1008436B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v40[0] = *v18;
    *((_QWORD *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_errorRetain(v20);
    swift_dynamicCast(&v32, v40, &type metadata for String, &type metadata for AnyHashable, 7);
    v31 = v20;
    v21 = sub_10001A630((uint64_t *)&unk_10083AA20);
    swift_dynamicCast(v35, &v31, v21, (char *)&type metadata for Any + 8, 7);
    v36 = v32;
    v37 = v33;
    v38 = v34;
    sub_10001A6CC(v35, v39);
    v32 = v36;
    v33 = v37;
    v34 = v38;
    sub_10001A6CC(v39, v40);
    sub_10001A6CC(v40, &v36);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(_QWORD *)(v11 + 32) = v34;
    result = (uint64_t)sub_10001A6CC(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_1000C6560(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1003B21A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A630(&qword_1008436B0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10001A6CC(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10001A6CC(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10001A6CC(v37, v38);
    sub_10001A6CC(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10001A6CC(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1000C6560(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1003B2568()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[6];

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable);
  v3[4] = &off_1007E7D50;
  v3[5] = &off_1007E7D60;
  v3[3] = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_1003B5238(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

uint64_t sub_1003B25EC(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 40))(v5);
  sub_10046F784(v5, a1, *(_QWORD *)(a2 + 8));
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v5);
}

uint64_t sub_1003B2650()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[6];

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable);
  v3[4] = &off_1007E86B8;
  v3[5] = &off_1007E86C8;
  v3[3] = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_1003B4E28(v3, &OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

uint64_t sub_1003B26DC()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD v4[6];

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable);
  v4[4] = &off_1007F08B8;
  v4[5] = &off_1007F08C8;
  v4[3] = type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  v4[0] = v1;
  v2 = v1;
  sub_1003B4E28(v4, &OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
}

uint64_t sub_1003B2764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100847FB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100847FB0);
  if (qword_100837600 != -1)
    swift_once(&qword_100837600, sub_1004A17AC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003B27F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 24);
  aBlock[4] = sub_1003B8FF4;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F1E98;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_1000D3124();
  v12 = sub_10001A630((uint64_t *)&unk_100838000);
  v13 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

id *sub_1003B29A8()
{
  id *v0;
  id *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __n128 v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v18[24];

  v1 = v0;
  v2 = *v0;
  v3 = *((_QWORD *)*v0 + 10);
  v4 = *(_QWORD *)(*((_QWORD *)*v0 + 11) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = &v18[-v7 - 8];
  v9 = (char *)v1 + v2[17];
  v10 = swift_beginAccess(v9, v18, 0, 0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v6 + 48))(v9, 1, AssociatedTypeWitness, v10))
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  v12 = *((_QWORD *)*v1 + 20);
  v13 = *(uint64_t *)((char *)v1 + v12);
  if (v13)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release(v13);
  }
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))((char *)v1 + *((_QWORD *)*v1 + 16), v3);
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v9, v14);
  swift_bridgeObjectRelease();
  v15 = (char *)v1 + *((_QWORD *)*v1 + 19);
  sub_1000178E8(*(_QWORD *)v15, *((_QWORD *)v15 + 1), *((_QWORD *)v15 + 2), *((_QWORD *)v15 + 3), *((_QWORD *)v15 + 4), *((unsigned int *)v15 + 10) | ((unint64_t)*((unsigned __int16 *)v15 + 22) << 32));
  swift_release(*(id *)((char *)v1 + v12));
  return v1;
}

uint64_t sub_1003B2B90()
{
  uint64_t v0;

  sub_1003B29A8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for RDHousekeepingActivityScheduler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDHousekeepingActivityScheduler);
}

void sub_1003B2BC0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (void *)v1[3];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v1[2] + 16))
  {
    if (qword_1008373B8 == -1)
    {
LABEL_4:
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001AAA8(v9, (uint64_t)qword_100847FB0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDHousekeepingActivityScheduler: Starting", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      v14 = sub_1003B4140();
      v15 = *(_QWORD *)(*v1 + 160);
      v16 = *(_QWORD *)((char *)v1 + v15);
      *(_QWORD *)((char *)v1 + v15) = v14;
      v17 = swift_release(v16);
      sub_1003B2DF4(v17);
      return;
    }
LABEL_13:
    swift_once(&qword_1008373B8, sub_1003B2764);
    goto LABEL_4;
  }
  if (qword_1008373B8 != -1)
    swift_once(&qword_1008373B8, sub_1003B2764);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_100847FB0);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDHousekeepingActivityScheduler: No activities registered, we are not starting", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

void sub_1003B2DF4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t AssociatedTypeWitness;
  _BYTE v53[24];
  char v54[24];

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(v6 + 88);
  v7 = *(_QWORD *)(v47 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v51 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v50 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v48 = (char *)&v45 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)*((_QWORD *)v2 + 3);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1008373B8, sub_1003B2764);
    goto LABEL_5;
  }
  v22 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 136)];
  v23 = swift_beginAccess(v22, v54, 0, 0);
  v24 = v51;
  (*(void (**)(char *, char *, uint64_t, __n128))(v51 + 16))(v14, v22, v8, v23);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v25 + 48))(v14, 1);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v8);
  if (v26 == 1)
  {
    v27 = *((_QWORD *)v2 + 2);
    v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, &v2[*(_QWORD *)(*(_QWORD *)v2 + 128)], v3);
    v46 = *((_QWORD *)v2 + 4);
    v29 = swift_allocObject(&unk_1007F1E58, 24, 7);
    swift_weakInit(v29 + 16, v2);
    v30 = (_QWORD *)swift_allocObject(&unk_1007F1E80, 48, 7);
    v45 = v25;
    v31 = v30;
    v32 = v47;
    v30[2] = v3;
    v30[3] = v32;
    v30[4] = v29;
    v30[5] = v27;
    v47 = v8;
    v33 = v4;
    v34 = *(void (**)(uint64_t, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v7 + 24);
    swift_bridgeObjectRetain(v27);
    swift_retain();
    v35 = v48;
    v34(v46, sub_1003B8FD8, v31, v3, v7);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v3);
    swift_release(v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v35, 0, 1, AssociatedTypeWitness);
    v36 = v50;
    v37 = v51;
    v38 = v47;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v35, v47);
    v39 = swift_beginAccess(v22, v53, 33, 0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v37 + 40))(v22, v36, v38, v39);
    swift_endAccess(v53);
    sub_1003B38A8();
    return;
  }
  if (qword_1008373B8 != -1)
    goto LABEL_9;
LABEL_5:
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10001AAA8(v40, (uint64_t)qword_100847FB0);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDHousekeepingActivityScheduler: Unexpectedly having an existing non-nil backgroundScheduler when trying to create and schedule a new one", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

}

uint64_t sub_1003B3208(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1003B3278(a2);
    return swift_release(v5);
  }
  return result;
}

void sub_1003B3278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v16[4];
  double v17;
  uint64_t v18;

  if (qword_1008373B8 != -1)
    swift_once(&qword_1008373B8, sub_1003B2764);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100847FB0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDHousekeepingActivityScheduler: Running scheduled background activity", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  __chkstk_darwin(v8);
  v16[2] = v1;
  v16[3] = a1;
  v10 = static os_log_type_t.info.getter(v9);
  v12 = measureTimeElapsed(_:level:block:)(0xD00000000000003CLL, 0x8000000100702500, v10, sub_1003B837C, v16);
  if (v12 > 10000.0)
  {
    v13 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDHousekeepingActivityScheduler: Running scheduled background activity took %f ms", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }

  }
}

uint64_t sub_1003B346C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31[5];
  uint64_t v32;
  uint64_t v33;

  v6 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 64))(&v29, ObjectType, v5);
  if (v30)
  {
    sub_10001BCA8(&v29, (uint64_t)v31);
    v9 = type metadata accessor for RDHousekeepingActivityScheduler.RateReducer(0, a2, a3, v8);
    sub_100018618((uint64_t)v31, (uint64_t)&v29);
    swift_allocObject(v9, 24, 7);
    v10 = sub_1003B46BC(&v29);
    v11 = sub_1003B4980();
    swift_release(v10);
    if (v11)
    {
      if (qword_1008373B8 != -1)
        swift_once(&qword_1008373B8, sub_1003B2764);
      v12 = type metadata accessor for Logger(0);
      sub_10001AAA8(v12, (uint64_t)qword_100847FB0);
      v13 = v6;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        *(_DWORD *)v16 = 136315138;
        *(_QWORD *)&v29 = v17;
        v32 = (uint64_t)v13;
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 16))(ObjectType);
        v32 = sub_10001A820(v18, v19, (uint64_t *)&v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDHousekeepingActivityScheduler: activity %s randomly disallowed by rate reducer", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);
      }
      else
      {

      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
      return 0;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
  }
  else
  {
    sub_10000882C((uint64_t)&v29, (uint64_t *)&unk_10083ECE0);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 56))(ObjectType, v5) & 1) != 0)
    return 1;
  if (qword_1008373B8 != -1)
    swift_once(&qword_1008373B8, sub_1003B2764);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100847FB0);
  v22 = v6;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v29 = v22;
    *(_DWORD *)v25 = 136315138;
    v31[0] = v26;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 16))(ObjectType);
    *(_QWORD *)&v29 = sub_10001A820(v27, v28, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDHousekeepingActivityScheduler: activity %s decided that it doesn't want to run at this moment", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1003B3870(_QWORD *a1)
{
  uint64_t v1;

  swift_allocObject(v1, 24, 7);
  return sub_1003B46BC(a1);
}

void sub_1003B38A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  double (*v61)(uint64_t, _QWORD *);
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  _QWORD v71[2];
  _QWORD *v72;
  uint64_t v73;
  os_log_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88[4];
  uint64_t v89[2];
  char v90[32];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v80 = *(_QWORD *)(v3 - 8);
  v81 = (uint64_t *)v3;
  __chkstk_darwin(v3);
  v79 = (uint64_t)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (uint64_t)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v2 + 80);
  v82 = *(_QWORD *)(v2 + 88);
  v83 = *(_QWORD *)(v82 + 8);
  v84 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v83);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v71 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v13);
  v85 = (char *)v71 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (_QWORD *)((char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)v1[3];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v22 = (char *)v1 + *(_QWORD *)(*v1 + 136);
  v23 = swift_beginAccess(v22, v90, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v9 + 16))(v11, v22, v8, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) != 1)
  {
    v29 = v12;
    v30 = v85;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v85, v11, AssociatedTypeWitness);
    v31 = v84;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v83, v84, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1) != 0)
    {
      if (qword_1008373B8 != -1)
        swift_once(&qword_1008373B8, sub_1003B2764);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10001AAA8(v33, (uint64_t)qword_100847FB0);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v35, v36))
        goto LABEL_22;
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      v38 = "RDHousekeepingActivityScheduler: Unexpectedly having pending activity on the scheduler (xpcActivity) when tr"
            "ying to create and schedule a new one";
    }
    else
    {
      v87 = v1[2];
      swift_bridgeObjectRetain_n(v87, 2);
      sub_1003B5BD4(&v87, (uint64_t (*)(_QWORD *))sub_1003B6118);
      swift_bridgeObjectRelease();
      v39 = v87;
      if (*(_QWORD *)(v87 + 16))
      {
        v40 = *(_QWORD **)(v87 + 40);
        v41 = *(id *)(v87 + 32);
        swift_release(v39);
        if (qword_1008373B8 != -1)
          swift_once(&qword_1008373B8, sub_1003B2764);
        v42 = type metadata accessor for Logger(0);
        sub_10001AAA8(v42, (uint64_t)qword_100847FB0);
        v43 = v41;
        static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
        v44 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter(v45);
        v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          v48 = swift_slowAlloc(38, -1);
          v83 = swift_slowAlloc(64, -1);
          v89[0] = v83;
          *(_DWORD *)v48 = 136446978;
          v75 = v47;
          ObjectType = swift_getObjectType();
          v87 = (uint64_t)v43;
          v50 = *(uint64_t (**)(void))(v40[2] + 16);
          v74 = v45;
          v51 = ObjectType;
          v73 = ObjectType;
          v52 = v50();
          v87 = sub_10001A820(v52, v53, v89);
          v30 = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);

          v54 = swift_bridgeObjectRelease();
          *(_WORD *)(v48 + 12) = 2082;
          v71[1] = v48 + 14;
          v86 = v43;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, __n128))(v40[4] + 16))(&v87, v51, v54);
          sub_10000A388(&v87, v88[2]);
          v55 = v76;
          sub_10047FC00(v76);
          v72 = v40;
          v56 = v79;
          sub_10047F8FC(v79);
          v57 = Date.ISO8601Format(_:)(v56);
          v59 = v58;
          (*(void (**)(uint64_t, uint64_t *))(v80 + 8))(v56, v81);
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v55, v78);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v87);
          v87 = sub_10001A820(v57, v59, v89);
          v81 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);

          swift_bridgeObjectRelease();
          *(_WORD *)(v48 + 22) = 1040;
          LODWORD(v87) = 4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 4);
          *(_WORD *)(v48 + 28) = 2048;
          v60 = v72;
          v61 = (double (*)(uint64_t, _QWORD *))v72[6];
          v87 = v61(v73, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v81);

          v62 = v74;
          _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v75, "RDHousekeepingActivityScheduler: Activity with smallest throttling interval {identifier: %{public}s, due: %{public}s, interval: %.*f}", (uint8_t *)v48, 0x26u);
          v63 = v83;
          swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1, -1);
          v64 = v48;
          v31 = v84;
          swift_slowDealloc(v64, -1, -1);

        }
        else
        {

          v61 = (double (*)(uint64_t, _QWORD *))v40[6];
          v60 = v40;
        }
        v67 = v82;
        v68 = swift_getObjectType();
        v69 = v61(v68, v60);
        v70 = swift_getAssociatedConformanceWitness(v67, v31, AssociatedTypeWitness, &unk_100787798, &unk_1007877A8);
        (*(void (**)(uint64_t, uint64_t, double))(v70 + 24))(AssociatedTypeWitness, v70, v69);
        (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);

        goto LABEL_25;
      }
      swift_release(v87);
      if (qword_1008373B8 != -1)
        swift_once(&qword_1008373B8, sub_1003B2764);
      v65 = type metadata accessor for Logger(0);
      v66 = sub_10001AAA8(v65, (uint64_t)qword_100847FB0);
      v35 = Logger.logObject.getter(v66);
      v36 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v35, v36))
      {
LABEL_22:

LABEL_25:
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, AssociatedTypeWitness);
        return;
      }
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      v38 = "RDHousekeepingActivityScheduler: Must have at least 1 activity to call q_updateBackgroundActivityCriteria()";
    }
    _os_log_impl((void *)&_mh_execute_header, v35, v36, v38, v37, 2u);
    swift_slowDealloc(v37, -1, -1);
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1008373B8 != -1)
LABEL_27:
    swift_once(&qword_1008373B8, sub_1003B2764);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_100847FB0);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDHousekeepingActivityScheduler: Unexpectedly could not get a scheduler (xpcActivity) when trying to schedule a new one", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

}

uint64_t sub_1003B4140()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v1 = v0;
  v2 = *v0;
  v35 = v2;
  v3 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_100848288);
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v37 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (char *)v1 + *(_QWORD *)(v2 + 144);
  v16 = *(void **)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v20 = sub_100398054(v18, v19, v16, v15, 0);
  v21 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v21);
  v39 = v20;
  v38 = (id)v1[3];
  v22 = v38;
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v5, 1, 1, v23);
  v24 = v22;
  v25 = sub_10001A630((uint64_t *)&unk_10084D080);
  v26 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v27 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_1000A5E70();
  Publisher.receive<A>(on:options:)(&v38, v5, v25, v26, v27, v28);
  sub_10000882C((uint64_t)v5, &qword_10083A970);

  swift_release(v39);
  v30 = type metadata accessor for RDHousekeepingActivityScheduler(0, *(_QWORD *)(v35 + 80), *(_QWORD *)(v35 + 88), v29);
  sub_1000A5F84(&qword_100848290, &qword_100848288, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = v36;
  v32 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v1, sub_1003B8378, 0, 0, 0, v36, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v31);
  return v32;
}

uint64_t sub_1003B440C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

void sub_1003B4450(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  sub_1003B4494(a1);
  objc_autoreleasePoolPop(v2);
}

double sub_1003B4494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = qword_1008373B8;
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
    if (v3 != -1)
      swift_once(&qword_1008373B8, sub_1003B2764);
    v4 = type metadata accessor for Logger(0);
    v5 = (uint64_t *)(v1 + 40);
    v19 = v4;
    do
    {
      v7 = (void *)*(v5 - 1);
      v8 = *v5;
      sub_10001AAA8(v4, (uint64_t)qword_100847FB0);
      v9 = v7;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v20 = v13;
        *(_DWORD *)v12 = 136446210;
        ObjectType = swift_getObjectType();
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 16) + 16))(ObjectType);
        *(_QWORD *)(v12 + 4) = sub_10001A820(v15, v16, &v20);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDHousekeepingActivityScheduler: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}", (uint8_t *)v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        v17 = v13;
        v4 = v19;
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

      }
      v6 = swift_getObjectType();
      sub_10046F454(0xD000000000000012, 0x8000000100701E70, v6, *(_QWORD *)(v8 + 8));
      v5 += 2;
      --v2;
    }
    while (v2);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1003B46BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char v18[24];
  char v19[24];
  double v20;
  double v21;
  uint64_t v22;
  double v23;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10000A388(a1, v4);
  v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v23 = v6;
  if (sub_1003B8360(v6, 0.0) && !sub_1003B8348(v6, 0.0))
  {
    if (qword_1008373B8 != -1)
      swift_once(&qword_1008373B8, sub_1003B2764);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_100847FB0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v11 = 134217984;
      swift_beginAccess(&v23, v18, 0, 0);
      v21 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDHousekeepingActivityScheduler: reduceFactor(=%f) is less than 0. It will set to 0.", v11, 0xCu);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_beginAccess(&v23, v19, 1, 0);
    v23 = 0.0;
    v6 = 0.0;
  }
  if (sub_1003B8360(1.0, v6) && !sub_1003B8348(v6, 1.0))
  {
    if (qword_1008373B8 != -1)
      swift_once(&qword_1008373B8, sub_1003B2764);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_100847FB0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v16 = 134217984;
      swift_beginAccess(&v23, &v21, 0, 0);
      v20 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDHousekeepingActivityScheduler: reduceFactor=(%f) is larger than 1. It will set to 1.", v16, 0xCu);
      swift_slowDealloc(v16, -1, -1);
    }

    v6 = 1.0;
  }
  *(double *)(v2 + 16) = v6;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v2;
}

BOOL sub_1003B4980()
{
  uint64_t v0;
  double v1;
  unint64_t v3;

  v1 = 1.0 - *(double *)(v0 + 16);
  if (sub_1003B8348(v1, 0.0))
    return 1;
  if (sub_1003B8348(v1, 1.0))
    return 0;
  v3 = sub_10020C9A8(0x20000000000001uLL);
  return sub_1003B8360(v1, (double)v3 * 1.11022302e-16 + 0.0);
}

uint64_t type metadata accessor for RDHousekeepingActivityScheduler.RateReducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDHousekeepingActivityScheduler.RateReducer);
}

uint64_t sub_1003B4A0C()
{
  return sub_1003B27F4();
}

void sub_1003B4A2C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  os_log_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for Logger(0);
  v44 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v11 = v10;
  sub_1001B21D4((uint64_t)v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter, (uint64_t)v46);
  v12 = v47;
  if (!v47)
  {
    sub_10000882C((uint64_t)v46, (uint64_t *)&unk_10083E300);
    goto LABEL_9;
  }
  v43 = v2;
  v13 = v48;
  sub_10000A388(v46, v47);
  v14 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(v1, v9, v11, v12, v13);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);
  if (!v14)
  {
LABEL_9:
    sub_1003B5C40(v9, v11);
    swift_willThrow(v35);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v15 = sub_10001AAA8(v4, (uint64_t)qword_10084B820);
  v16 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v6, v15, v4);
  sub_100385E40((uint64_t)a1, (uint64_t)v46);
  v17 = v1;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v18, (os_log_type_t)v19))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
    goto LABEL_11;
  }
  v40 = v19;
  v41 = v18;
  v42 = v14;
  v20 = swift_slowAlloc(22, -1);
  v39 = swift_slowAlloc(64, -1);
  v49 = v39;
  *(_DWORD *)v20 = 136446466;
  v21 = objc_msgSend(v17, "waiterID");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    v45 = sub_10001A820(v23, v25, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    v38 = v20 + 14;
    v26 = v17;
    v28 = v47;
    v27 = v48;
    sub_10000A388(v46, v47);
    v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
    v30 = v27;
    v17 = v26;
    v31 = v29(v28, v30);
    v45 = sub_10001A820(v31, v32, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);
    v33 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v20, 0x16u);
    v34 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v4);
    v14 = v42;
LABEL_11:
    v36 = a1[3];
    v37 = a1[5];
    sub_10000A388(a1, v36);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
    sub_1003B806C(v17, (uint64_t)a1);

    return;
  }

  __break(1u);
}

void sub_1003B4E28(_QWORD *a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  int v44;
  os_log_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  uint64_t v54;

  v5 = v2;
  v7 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000A388(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  v14 = v13;
  v15 = (uint64_t)v2 + *a2;
  swift_beginAccess(v15, v53, 0, 0);
  sub_1001B21D4(v15, (uint64_t)v50);
  v16 = v51;
  if (!v51)
  {
    sub_10000882C((uint64_t)v50, (uint64_t *)&unk_10083E300);
    goto LABEL_9;
  }
  v47 = v3;
  v17 = v52;
  sub_10000A388(v50, v51);
  v18 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 8))(v5, v12, v14, v16, v17);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v50);
  if (!v18)
  {
LABEL_9:
    sub_1003B5C40(v12, v14);
    swift_willThrow(v39);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v19 = sub_10001AAA8(v7, (uint64_t)qword_10084B820);
  v20 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v9, v19, v7);
  sub_100385E40((uint64_t)a1, (uint64_t)v50);
  v21 = v5;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v22, (os_log_type_t)v23))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v50);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    goto LABEL_11;
  }
  v44 = v23;
  v45 = v22;
  v46 = v18;
  v24 = swift_slowAlloc(22, -1);
  v43 = swift_slowAlloc(64, -1);
  v54 = v43;
  *(_DWORD *)v24 = 136446466;
  v25 = objc_msgSend(v21, "waiterID");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v49 = sub_10001A820(v27, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    v42[1] = v24 + 14;
    v30 = v21;
    v32 = v51;
    v31 = v52;
    sub_10000A388(v50, v51);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v34 = v31;
    v21 = v30;
    v35 = v33(v32, v34);
    v49 = sub_10001A820(v35, v36, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v50);
    v37 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v24, 0x16u);
    v38 = v43;
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v7);
    v18 = v46;
LABEL_11:
    v40 = a1[3];
    v41 = a1[5];
    sub_10000A388(a1, v40);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
    sub_1003B806C(v21, (uint64_t)a1);

    return;
  }

  __break(1u);
}

void sub_1003B5238(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  os_log_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  uint64_t v52;

  v3 = v1;
  v5 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000A388(a1, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v12 = v11;
  v13 = (uint64_t)v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter;
  swift_beginAccess(v13, v51, 0, 0);
  sub_1001B21D4(v13, (uint64_t)v48);
  v14 = v49;
  if (!v49)
  {
    sub_10000882C((uint64_t)v48, (uint64_t *)&unk_10083E300);
    goto LABEL_9;
  }
  v45 = v2;
  v15 = v50;
  sub_10000A388(v48, v49);
  v16 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 8))(v3, v10, v12, v14, v15);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
  if (!v16)
  {
LABEL_9:
    sub_1003B5C40(v10, v12);
    swift_willThrow(v37);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v17 = sub_10001AAA8(v5, (uint64_t)qword_10084B820);
  v18 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v7, v17, v5);
  sub_100385E40((uint64_t)a1, (uint64_t)v48);
  v19 = v3;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v20, (os_log_type_t)v21))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    goto LABEL_11;
  }
  v42 = v21;
  v43 = v20;
  v44 = v16;
  v22 = swift_slowAlloc(22, -1);
  v41 = swift_slowAlloc(64, -1);
  v52 = v41;
  *(_DWORD *)v22 = 136446466;
  v23 = objc_msgSend(v19, "waiterID");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

    v47 = sub_10001A820(v25, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    v40[1] = v22 + 14;
    v28 = v19;
    v30 = v49;
    v29 = v50;
    sub_10000A388(v48, v49);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
    v32 = v29;
    v19 = v28;
    v33 = v31(v30, v32);
    v47 = sub_10001A820(v33, v34, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
    v35 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v22, 0x16u);
    v36 = v41;
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v5);
    v16 = v44;
LABEL_11:
    v38 = a1[3];
    v39 = a1[5];
    sub_10000A388(a1, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
    sub_1003B806C(v19, (uint64_t)a1);

    return;
  }

  __break(1u);
}

void sub_1003B564C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  Swift::Int v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  int v33;
  __int16 v34;
  char v35;
  Swift::Int v36;

  v2 = v1;
  v3 = *(double *)(v1 + 24);
  if (*(double *)(v1 + 16) < v3)
  {
    if (qword_1008373B8 != -1)
      swift_once(&qword_1008373B8, sub_1003B2764);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_100847FB0);
    v5 = swift_retain();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      *(_DWORD *)v8 = 134218240;
      *(_QWORD *)&v21 = *(_QWORD *)(v2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8);
      *(_WORD *)(v8 + 12) = 2048;
      *(double *)&v21 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDJitteredMinimumDelayXPCActivity: Requested delay (%f) is shorter than minimumDelay (%f). The minimumDelay value will take precedence.", (uint8_t *)v8, 0x16u);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      a1 = swift_release(v2);
    }
  }
  if (*(double *)(v2 + 16) > v3)
    v3 = *(double *)(v2 + 16);
  sub_1003B7FC4(a1, 0.0, 1.0);
  v10 = v9 + 1.0;
  if (qword_1008373B8 != -1)
    swift_once(&qword_1008373B8, sub_1003B2764);
  v11 = v3 * v10;
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100847FB0);
  v13 = swift_retain();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    *(_DWORD *)v16 = 134218240;
    *(_QWORD *)&v21 = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8);
    swift_release(v2);
    *(_WORD *)(v16 + 12) = 2048;
    *(double *)&v21 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDJitteredMinimumDelayXPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, jitteredMinimumDelay: %f}", (uint8_t *)v16, 0x16u);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  v17 = *(_BYTE *)(v2 + 32);
  v18 = *(_BYTE *)(v2 + 33);
  v19 = *(_BYTE *)(v2 + 34);
  v20 = sub_1002EAFA4((uint64_t)&off_1007E0B98);
  v21 = xmmword_1006B8C90;
  v22 = v11;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  v26 = v17;
  v27 = 0;
  v28 = 0x4024000000000000;
  v29 = 0;
  v30 = v18;
  v31 = 0;
  v32 = v19;
  v33 = 0x10000;
  v34 = 513;
  v35 = 7;
  v36 = v20;
  sub_1004F53D0((uint64_t)&v21);
  swift_bridgeObjectRelease();
}

uint64_t sub_1003B596C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDJitteredMinimumDelayXPCActivity()
{
  return objc_opt_self(_TtC7remindd33RDJitteredMinimumDelayXPCActivity);
}

void sub_1003B59B0(double a1)
{
  uint64_t v1;

  *(double *)(*(_QWORD *)v1 + 16) = a1;
}

uint64_t sub_1003B59BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v4 = *(_QWORD *)(v1 + 120);
  v2 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_1000A5F08, v1, v2, &type metadata for Bool, &protocol witness table for UnfairLock);
  swift_release(v4);
  return v5;
}

void sub_1003B5A40()
{
  sub_1004F5A28();
}

void sub_1003B5A64(uint64_t a1)
{
  sub_1003B564C(a1);
}

uint64_t sub_1003B5A84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_BYTE *)(v3 + 24);
  v9 = *(_BYTE *)(v3 + 25);
  v10 = *(_BYTE *)(v3 + 26);
  v11 = type metadata accessor for RDJitteredMinimumDelayXPCActivity();
  v12 = swift_allocObject(v11, 48, 7);
  *(_QWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 32) = v8;
  *(_BYTE *)(v12 + 33) = v9;
  *(_BYTE *)(v12 + 34) = v10;
  *(_QWORD *)(v12 + 24) = v7;
  v13 = (_QWORD *)swift_allocObject(&unk_1007F1E30, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  v14 = type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject(v14, 128, 7);
  v15 = a1;
  swift_retain();
  sub_1004F69CC(3, (uint64_t)sub_1000A5B1C, (uint64_t)v13);
  *(_QWORD *)(v12 + 40) = v16;
  return v12;
}

uint64_t sub_1003B5B64()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 27, 7);
}

uint64_t type metadata accessor for RDJitteredMinimumDelayXPCActivityFactory()
{
  return objc_opt_self(_TtC7remindd40RDJitteredMinimumDelayXPCActivityFactory);
}

_UNKNOWN **sub_1003B5B94()
{
  return &off_1007F1DB8;
}

uint64_t sub_1003B5BA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = sub_1003B5A84(a1, a2, a3);
  *a4 = result;
  return result;
}

_UNKNOWN **sub_1003B5BC8()
{
  return &off_1007F1DD8;
}

uint64_t sub_1003B5BD4(_QWORD *a1, uint64_t (*a2)(_QWORD *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v4 = (_QWORD *)sub_1001D6160(v4);
  v5 = v4[2];
  v7[0] = v4 + 4;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

void sub_1003B5C40(uint64_t a1, unint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  unint64_t v14;
  id v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[56];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(REMError);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "babySatErrorWithOperationName:", v9);

  v11 = sub_10001A630((uint64_t *)&unk_10083DAB0);
  inited = swift_initStackObject(v11, v51);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  v13 = a1;
  *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
  v14 = sub_1002AFCB4(inited);
  v15 = objc_msgSend(v3, "waiterID");
  if (v15)
  {
    v17 = v15;
    type metadata accessor for Analytics(0, v16);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v49 = v18;
    v50 = v20;
    swift_bridgeObjectRetain(v20);
    v21._countAndFlagsBits = 0x646568736172632ELL;
    v21._object = (void *)0xE800000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22 = v49;
    v23 = v50;
    sub_1003B1400(v14);
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = v10;
    v27 = v10;
    v28 = v26;
    static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v22, v23, v25, v27, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (qword_100837558 != -1)
      swift_once(&qword_100837558, sub_10046FB38);
    v29 = v47;
    v30 = sub_10001AAA8(v47, (uint64_t)qword_10084B820);
    v32 = v45;
    v31 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v30, v29);
    swift_bridgeObjectRetain_n(a2, 2);
    v3 = v3;
    v33 = Logger.logObject.getter(v3);
    v34 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v33, v34))
    {

      v43 = swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t, __n128))(v31 + 8))(v32, v29, v43);
      return;
    }
    v44 = v28;
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v49 = v36;
    *(_DWORD *)v35 = 136446466;
    swift_bridgeObjectRetain(a2);
    v48 = sub_10001A820(v13, a2, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    *(_QWORD *)&v37 = swift_bridgeObjectRelease_n(a2, 3).n128_u64[0];
    *(_WORD *)(v35 + 12) = 2082;
    v38 = objc_msgSend(v3, "waiterID", v37);
    if (v38)
    {
      v39 = v38;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v42 = v41;

      v48 = sub_10001A820(v40, v42, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      return;
    }
  }
  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1003B6064(uint64_t a1)
{
  return sub_1003B25EC(a1, (uint64_t)&off_1007F96A0);
}

uint64_t sub_1003B608C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[6];

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable);
  v3[4] = &off_1007FC580;
  v3[5] = &off_1007FC590;
  v3[3] = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_1003B4E28(v3, &OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

void sub_1003B6118(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t ObjectType;
  double (*v23)(uint64_t, uint64_t);
  id v24;
  id v25;
  double v26;
  double v27;
  uint64_t v28;
  double (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  double v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  double (*v38)(uint64_t, uint64_t);
  id v39;
  id v40;
  double v41;
  uint64_t v42;
  double v43;
  __int128 *v44;
  Swift::Int v45;
  Swift::Int v46;
  __int128 *v47;
  __int128 v48;
  Swift::Int v49;
  uint64_t v50;
  Swift::Int v51;
  __int128 v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  double (*v59)(uint64_t, uint64_t);
  id v60;
  id v61;
  double v62;
  uint64_t v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  Swift::Int v130;
  char *v131;
  Swift::Int v132;
  Swift::Int v133;
  Swift::Int v134;
  uint64_t v135;
  void **__dst;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  Swift::Int v140;
  Swift::Int v141;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_131;
    if (v4)
      sub_1003B7358(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_139;
  v130 = v5;
  v124 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    __dst = (void **)&_swiftEmptyArrayStorage[4];
    v129 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
LABEL_97:
      if (v13 >= 2)
      {
        v116 = *v124;
        do
        {
          v117 = v13 - 2;
          if (v13 < 2)
            goto LABEL_126;
          if (!v116)
            goto LABEL_138;
          v118 = v10;
          v119 = v10 + 32;
          v120 = *(_QWORD *)&v10[16 * v117 + 32];
          v121 = *(_QWORD *)&v10[16 * v13 + 24];
          sub_1003B7714((void **)(v116 + 16 * v120), (void **)(v116 + 16 * *(_QWORD *)&v119[16 * v13 - 16]), v116 + 16 * v121, __dst);
          if (v2)
            break;
          if (v121 < v120)
            goto LABEL_127;
          if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
            v118 = sub_1001D52E4((uint64_t)v118);
          if (v117 >= *((_QWORD *)v118 + 2))
            goto LABEL_128;
          v122 = &v118[16 * v117 + 32];
          *(_QWORD *)v122 = v120;
          *((_QWORD *)v122 + 1) = v121;
          v123 = *((_QWORD *)v118 + 2);
          if (v13 > v123)
            goto LABEL_129;
          v10 = v118;
          memmove(&v118[16 * v13 + 16], &v118[16 * v13 + 32], 16 * (v123 - v13));
          *((_QWORD *)v118 + 2) = v123 - 1;
          v13 = v123 - 1;
        }
        while (v123 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      v129[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_10001A630(&qword_10083EFD0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v129 = (_QWORD *)v9;
    __dst = (void **)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v125 = *a1 - 16;
  v126 = *a1 + 40;
  v10 = (char *)_swiftEmptyArrayStorage;
  v133 = v4;
  v137 = *a1;
  while (1)
  {
    v14 = v11;
    v15 = v11 + 1;
    v134 = v11;
    if (v11 + 1 < v4)
    {
      v131 = v10;
      v16 = v12 + 16 * v15;
      v17 = *(void **)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v12 + 16 * v11;
      v20 = *(void **)v19;
      v21 = *(_QWORD *)(v19 + 8);
      ObjectType = swift_getObjectType();
      v23 = *(double (**)(uint64_t, uint64_t))(v18 + 48);
      v24 = v17;
      v25 = v20;
      v26 = v23(ObjectType, v18);
      v14 = v134;
      v27 = v26;
      v28 = swift_getObjectType();
      v29 = *(double (**)(uint64_t, uint64_t))(v21 + 48);
      v30 = v21;
      v4 = v133;
      v31 = v29(v28, v30);

      v15 = v134 + 2;
      if (v134 + 2 < v133)
      {
        v127 = v2;
        v32 = (uint64_t *)(v126 + 16 * v134);
        while (1)
        {
          v139 = v15;
          v33 = (void *)*(v32 - 1);
          v34 = *v32;
          v36 = (void *)*(v32 - 3);
          v35 = *(v32 - 2);
          v37 = swift_getObjectType();
          v38 = *(double (**)(uint64_t, uint64_t))(v34 + 48);
          v39 = v33;
          v40 = v36;
          v41 = v38(v37, v34);
          v42 = swift_getObjectType();
          v43 = (*(double (**)(uint64_t, uint64_t))(v35 + 48))(v42, v35);

          if (v27 < v31 == v41 >= v43)
            break;
          v15 = v139 + 1;
          v32 += 2;
          v4 = v133;
          if (v133 == v139 + 1)
          {
            v15 = v133;
            v2 = v127;
            goto LABEL_22;
          }
        }
        v2 = v127;
        v4 = v133;
        v15 = v139;
LABEL_22:
        v14 = v134;
      }
      v10 = v131;
      v12 = v137;
      if (v27 < v31)
      {
        if (v15 < v14)
          goto LABEL_132;
        if (v14 < v15)
        {
          v44 = (__int128 *)(v125 + 16 * v15);
          v45 = v15;
          v46 = v14;
          v47 = (__int128 *)(v137 + 16 * v14);
          do
          {
            if (v46 != --v45)
            {
              if (!v137)
                goto LABEL_137;
              v48 = *v47;
              *v47 = *v44;
              *v44 = v48;
            }
            ++v46;
            --v44;
            ++v47;
          }
          while (v46 < v45);
        }
      }
    }
    if (v15 < v4)
    {
      if (__OFSUB__(v15, v14))
        goto LABEL_130;
      if (v15 - v14 < v130)
        break;
    }
LABEL_49:
    if (v15 < v14)
      goto LABEL_125;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v66 = *((_QWORD *)v10 + 2);
    v65 = *((_QWORD *)v10 + 3);
    v13 = v66 + 1;
    v12 = v137;
    if (v66 >= v65 >> 1)
    {
      v115 = sub_1001D4DF0((char *)(v65 > 1), v66 + 1, 1, v10);
      v12 = v137;
      v10 = v115;
    }
    *((_QWORD *)v10 + 2) = v13;
    v67 = v10 + 32;
    v68 = &v10[16 * v66 + 32];
    *(_QWORD *)v68 = v14;
    *((_QWORD *)v68 + 1) = v15;
    v141 = v15;
    if (v66)
    {
      while (1)
      {
        v69 = v13 - 1;
        if (v13 >= 4)
        {
          v74 = &v67[16 * v13];
          v75 = *((_QWORD *)v74 - 8);
          v76 = *((_QWORD *)v74 - 7);
          v80 = __OFSUB__(v76, v75);
          v77 = v76 - v75;
          if (v80)
            goto LABEL_114;
          v79 = *((_QWORD *)v74 - 6);
          v78 = *((_QWORD *)v74 - 5);
          v80 = __OFSUB__(v78, v79);
          v72 = v78 - v79;
          v73 = v80;
          if (v80)
            goto LABEL_115;
          v81 = v13 - 2;
          v82 = &v67[16 * v13 - 32];
          v84 = *(_QWORD *)v82;
          v83 = *((_QWORD *)v82 + 1);
          v80 = __OFSUB__(v83, v84);
          v85 = v83 - v84;
          if (v80)
            goto LABEL_117;
          v80 = __OFADD__(v72, v85);
          v86 = v72 + v85;
          if (v80)
            goto LABEL_120;
          if (v86 >= v77)
          {
            v104 = &v67[16 * v69];
            v106 = *(_QWORD *)v104;
            v105 = *((_QWORD *)v104 + 1);
            v80 = __OFSUB__(v105, v106);
            v107 = v105 - v106;
            if (v80)
              goto LABEL_124;
            v97 = v72 < v107;
            goto LABEL_86;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v98 = *((_QWORD *)v10 + 4);
            v99 = *((_QWORD *)v10 + 5);
            v80 = __OFSUB__(v99, v98);
            v91 = v99 - v98;
            v92 = v80;
            goto LABEL_80;
          }
          v71 = *((_QWORD *)v10 + 4);
          v70 = *((_QWORD *)v10 + 5);
          v80 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          v73 = v80;
        }
        if ((v73 & 1) != 0)
          goto LABEL_116;
        v81 = v13 - 2;
        v87 = &v67[16 * v13 - 32];
        v89 = *(_QWORD *)v87;
        v88 = *((_QWORD *)v87 + 1);
        v90 = __OFSUB__(v88, v89);
        v91 = v88 - v89;
        v92 = v90;
        if (v90)
          goto LABEL_119;
        v93 = &v67[16 * v69];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v80 = __OFSUB__(v94, v95);
        v96 = v94 - v95;
        if (v80)
          goto LABEL_122;
        if (__OFADD__(v91, v96))
          goto LABEL_123;
        if (v91 + v96 >= v72)
        {
          v97 = v72 < v96;
LABEL_86:
          if (v97)
            v69 = v81;
          goto LABEL_88;
        }
LABEL_80:
        if ((v92 & 1) != 0)
          goto LABEL_118;
        v100 = &v67[16 * v69];
        v102 = *(_QWORD *)v100;
        v101 = *((_QWORD *)v100 + 1);
        v80 = __OFSUB__(v101, v102);
        v103 = v101 - v102;
        if (v80)
          goto LABEL_121;
        if (v103 < v91)
          goto LABEL_14;
LABEL_88:
        v108 = v69 - 1;
        if (v69 - 1 >= v13)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v12)
          goto LABEL_136;
        v109 = v10;
        v110 = &v67[16 * v108];
        v111 = *(_QWORD *)v110;
        v112 = &v67[16 * v69];
        v113 = *((_QWORD *)v112 + 1);
        sub_1003B7714((void **)(v12 + 16 * *(_QWORD *)v110), (void **)(v12 + 16 * *(_QWORD *)v112), v12 + 16 * v113, __dst);
        if (v2)
          goto LABEL_108;
        if (v113 < v111)
          goto LABEL_111;
        if (v69 > *((_QWORD *)v109 + 2))
          goto LABEL_112;
        *(_QWORD *)v110 = v111;
        *(_QWORD *)&v67[16 * v108 + 8] = v113;
        v114 = *((_QWORD *)v109 + 2);
        if (v69 >= v114)
          goto LABEL_113;
        v10 = v109;
        v13 = v114 - 1;
        memmove(&v67[16 * v69], v112 + 16, 16 * (v114 - 1 - v69));
        *((_QWORD *)v109 + 2) = v114 - 1;
        v12 = v137;
        if (v114 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v133;
    v11 = v141;
    if (v141 >= v133)
      goto LABEL_97;
  }
  if (__OFADD__(v14, v130))
    goto LABEL_133;
  if (v14 + v130 >= v4)
    v49 = v4;
  else
    v49 = v14 + v130;
  if (v49 >= v14)
  {
    if (v15 != v49)
    {
      v132 = v49;
      v128 = v2;
      v50 = v125 + 16 * v15;
      do
      {
        v52 = *(_OWORD *)(v12 + 16 * v15);
        v53 = v14;
        v135 = v50;
        v54 = v50;
        v140 = v15;
        while (1)
        {
          v138 = *((_QWORD *)&v52 + 1);
          v56 = *(void **)v54;
          v55 = *(_QWORD *)(v54 + 8);
          v57 = (void *)v52;
          v58 = swift_getObjectType();
          v59 = *(double (**)(uint64_t, uint64_t))(v138 + 48);
          v60 = v57;
          v61 = v56;
          v62 = v59(v58, v138);
          v63 = swift_getObjectType();
          v64 = (*(double (**)(uint64_t, uint64_t))(v55 + 48))(v63, v55);

          if (v62 >= v64)
            break;
          v12 = v137;
          v51 = v140;
          if (!v137)
            goto LABEL_135;
          v52 = *(_OWORD *)(v54 + 16);
          *(_OWORD *)(v54 + 16) = *(_OWORD *)v54;
          *(_OWORD *)v54 = v52;
          v54 -= 16;
          if (v140 == ++v53)
            goto LABEL_42;
        }
        v12 = v137;
        v51 = v140;
LABEL_42:
        v15 = v51 + 1;
        v14 = v134;
        v50 = v135 + 16;
      }
      while (v15 != v132);
      v15 = v132;
      v2 = v128;
    }
    goto LABEL_49;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1003B6918(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  __int128 *v60;
  Swift::Int v61;
  Swift::Int v62;
  __int128 *v63;
  __int128 v64;
  Swift::Int v65;
  void (*v66)(char *, uint64_t);
  Swift::Int v67;
  __int128 v68;
  Swift::Int v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  char v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  Swift::Int v150;
  Swift::Int v151;
  Swift::Int v152;
  Swift::Int v153;
  void (*v154)(char *, uint64_t);
  void **v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  id v166;

  v2 = v1;
  v163 = type metadata accessor for Date(0);
  v157 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v162 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v161 = (char *)&v145 - v6;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v160 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v159 = (char *)&v145 - v10;
  v11 = a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 < v11)
  {
    if (v11 >= 0)
      v13 = v11;
    else
      v13 = v11 + 1;
    if (v11 >= -1)
    {
      v150 = v12;
      v145 = a1;
      if (v11 < 2)
      {
        v17 = (char *)_swiftEmptyArrayStorage;
        v155 = (void **)&_swiftEmptyArrayStorage[4];
        v149 = _swiftEmptyArrayStorage;
        if (v11 != 1)
        {
          v20 = _swiftEmptyArrayStorage[2];
          if (v20 < 2)
            goto LABEL_113;
          goto LABEL_100;
        }
        v156 = v1;
      }
      else
      {
        v156 = v1;
        v14 = v13 >> 1;
        v15 = sub_10001A630(&qword_10083EFD0);
        v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14, v15);
        *(_QWORD *)(v16 + 16) = v14;
        v149 = (_QWORD *)v16;
        v155 = (void **)(v16 + 32);
      }
      v18 = 0;
      v19 = *a1;
      v147 = *a1 + 40;
      v146 = v19 - 16;
      v17 = (char *)_swiftEmptyArrayStorage;
      v152 = v11;
      v164 = v19;
      while (1)
      {
        v21 = v18++;
        v153 = v21;
        if (v18 < v11)
        {
          v22 = v19 + 16 * v18;
          v23 = *(void **)v22;
          v24 = *(_QWORD *)(v22 + 8);
          v25 = v19 + 16 * v21;
          v26 = *(void **)v25;
          v27 = *(_QWORD *)(v25 + 8);
          ObjectType = swift_getObjectType();
          v166 = v23;
          v29 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)&v165 = v23;
          v30 = v26;
          v31 = (uint64_t)v159;
          v32 = sub_10047F84C(ObjectType, v29);
          v33 = v161;
          Optional<A>.orDistantPast.getter(v32);
          sub_10000882C(v31, (uint64_t *)&unk_1008380D0);
          v34 = swift_getObjectType();
          v166 = v30;
          v35 = (uint64_t)v160;
          v36 = sub_10047F84C(v34, *(_QWORD *)(v27 + 16));
          v37 = v162;
          Optional<A>.orDistantPast.getter(v36);
          sub_10000882C(v35, (uint64_t *)&unk_1008380D0);
          LODWORD(v158) = static Date.< infix(_:_:)(v33, v37);
          v38 = *(void (**)(char *, uint64_t))(v157 + 8);
          v39 = v37;
          v11 = v152;
          v40 = v163;
          v38(v39, v163);
          v41 = v33;
          v21 = v153;
          v154 = v38;
          v38(v41, v40);

          v18 = v21 + 2;
          if (v21 + 2 < v11)
          {
            v148 = v17;
            v42 = (uint64_t *)(v147 + 16 * v21);
            while (1)
            {
              v43 = (void *)*(v42 - 1);
              v44 = *v42;
              v45 = (void *)*(v42 - 3);
              v46 = *(v42 - 2);
              v47 = swift_getObjectType();
              v166 = v43;
              v48 = *(_QWORD *)(v44 + 16);
              *(_QWORD *)&v165 = v43;
              v49 = v45;
              v50 = (uint64_t)v159;
              v51 = sub_10047F84C(v47, v48);
              v52 = v161;
              Optional<A>.orDistantPast.getter(v51);
              sub_10000882C(v50, (uint64_t *)&unk_1008380D0);
              v53 = swift_getObjectType();
              v166 = v49;
              v54 = (uint64_t)v160;
              v55 = sub_10047F84C(v53, *(_QWORD *)(v46 + 16));
              v56 = v162;
              Optional<A>.orDistantPast.getter(v55);
              sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
              LODWORD(v44) = static Date.< infix(_:_:)(v52, v56);
              v57 = v56;
              v58 = v163;
              v59 = v154;
              v154(v57, v163);
              v59(v52, v58);

              if (((v158 ^ v44) & 1) != 0)
                break;
              ++v18;
              v42 += 2;
              v11 = v152;
              if (v152 == v18)
              {
                v18 = v152;
                v17 = v148;
                goto LABEL_23;
              }
            }
            v17 = v148;
            v11 = v152;
LABEL_23:
            v21 = v153;
          }
          v19 = v164;
          if ((v158 & 1) != 0)
          {
            if (v18 < v21)
              goto LABEL_137;
            if (v21 < v18)
            {
              v60 = (__int128 *)(v146 + 16 * v18);
              v61 = v18;
              v62 = v21;
              v63 = (__int128 *)(v164 + 16 * v21);
              do
              {
                if (v62 != --v61)
                {
                  if (!v19)
                    goto LABEL_142;
                  v64 = *v63;
                  *v63 = *v60;
                  *v60 = v64;
                }
                ++v62;
                --v60;
                ++v63;
              }
              while (v62 < v61);
            }
          }
        }
        if (v18 < v11)
        {
          if (__OFSUB__(v18, v21))
            goto LABEL_135;
          if (v18 - v21 < v150)
          {
            if (__OFADD__(v21, v150))
              goto LABEL_138;
            if (v21 + v150 >= v11)
              v65 = v11;
            else
              v65 = v21 + v150;
            if (v65 < v21)
            {
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
              break;
            }
            if (v18 != v65)
            {
              v148 = v17;
              v66 = (void (*)(char *, uint64_t))(v146 + 16 * v18);
              v151 = v65;
              do
              {
                v68 = *(_OWORD *)(v19 + 16 * v18);
                v69 = v21;
                v154 = v66;
                v158 = v18;
                while (1)
                {
                  v165 = v68;
                  v70 = *(void **)v66;
                  v71 = *((_QWORD *)v66 + 1);
                  v72 = (void *)v68;
                  v73 = swift_getObjectType();
                  v166 = (id)v165;
                  v74 = *(_QWORD *)(*((_QWORD *)&v165 + 1) + 16);
                  v75 = v72;
                  v76 = v70;
                  v77 = (uint64_t)v159;
                  v78 = sub_10047F84C(v73, v74);
                  v79 = v161;
                  Optional<A>.orDistantPast.getter(v78);
                  sub_10000882C(v77, (uint64_t *)&unk_1008380D0);
                  v80 = swift_getObjectType();
                  v166 = v76;
                  v81 = (uint64_t)v160;
                  v82 = sub_10047F84C(v80, *(_QWORD *)(v71 + 16));
                  v83 = v162;
                  Optional<A>.orDistantPast.getter(v82);
                  sub_10000882C(v81, (uint64_t *)&unk_1008380D0);
                  LOBYTE(v70) = static Date.< infix(_:_:)(v79, v83);
                  v84 = *(void (**)(char *, uint64_t))(v157 + 8);
                  v85 = v83;
                  v86 = v163;
                  v84(v85, v163);
                  v84(v79, v86);

                  if ((v70 & 1) == 0)
                    break;
                  v19 = v164;
                  v67 = v158;
                  if (!v164)
                    goto LABEL_140;
                  v68 = *((_OWORD *)v66 + 1);
                  *((_OWORD *)v66 + 1) = *(_OWORD *)v66;
                  *(_OWORD *)v66 = v68;
                  v66 = (void (*)(char *, uint64_t))((char *)v66 - 16);
                  if (v67 == ++v69)
                    goto LABEL_44;
                }
                v19 = v164;
                v67 = v158;
LABEL_44:
                v18 = v67 + 1;
                v21 = v153;
                v66 = (void (*)(char *, uint64_t))((char *)v154 + 16);
              }
              while (v18 != v151);
              v18 = v151;
              v17 = v148;
            }
          }
        }
        if (v18 < v21)
          goto LABEL_130;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          v17 = sub_1001D4DF0(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v88 = *((_QWORD *)v17 + 2);
        v87 = *((_QWORD *)v17 + 3);
        v20 = v88 + 1;
        v19 = v164;
        if (v88 >= v87 >> 1)
        {
          v138 = sub_1001D4DF0((char *)(v87 > 1), v88 + 1, 1, v17);
          v19 = v164;
          v17 = v138;
        }
        *((_QWORD *)v17 + 2) = v20;
        v89 = v17 + 32;
        v90 = &v17[16 * v88 + 32];
        *(_QWORD *)v90 = v21;
        *((_QWORD *)v90 + 1) = v18;
        if (v88)
        {
          while (1)
          {
            v91 = v20 - 1;
            if (v20 >= 4)
            {
              v96 = &v89[16 * v20];
              v97 = *((_QWORD *)v96 - 8);
              v98 = *((_QWORD *)v96 - 7);
              v102 = __OFSUB__(v98, v97);
              v99 = v98 - v97;
              if (v102)
                goto LABEL_119;
              v101 = *((_QWORD *)v96 - 6);
              v100 = *((_QWORD *)v96 - 5);
              v102 = __OFSUB__(v100, v101);
              v94 = v100 - v101;
              v95 = v102;
              if (v102)
                goto LABEL_120;
              v103 = v20 - 2;
              v104 = &v89[16 * v20 - 32];
              v106 = *(_QWORD *)v104;
              v105 = *((_QWORD *)v104 + 1);
              v102 = __OFSUB__(v105, v106);
              v107 = v105 - v106;
              if (v102)
                goto LABEL_122;
              v102 = __OFADD__(v94, v107);
              v108 = v94 + v107;
              if (v102)
                goto LABEL_125;
              if (v108 >= v99)
              {
                v126 = &v89[16 * v91];
                v128 = *(_QWORD *)v126;
                v127 = *((_QWORD *)v126 + 1);
                v102 = __OFSUB__(v127, v128);
                v129 = v127 - v128;
                if (v102)
                  goto LABEL_129;
                v119 = v94 < v129;
                goto LABEL_88;
              }
            }
            else
            {
              if (v20 != 3)
              {
                v120 = *((_QWORD *)v17 + 4);
                v121 = *((_QWORD *)v17 + 5);
                v102 = __OFSUB__(v121, v120);
                v113 = v121 - v120;
                v114 = v102;
                goto LABEL_82;
              }
              v93 = *((_QWORD *)v17 + 4);
              v92 = *((_QWORD *)v17 + 5);
              v102 = __OFSUB__(v92, v93);
              v94 = v92 - v93;
              v95 = v102;
            }
            if ((v95 & 1) != 0)
              goto LABEL_121;
            v103 = v20 - 2;
            v109 = &v89[16 * v20 - 32];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v112 = __OFSUB__(v110, v111);
            v113 = v110 - v111;
            v114 = v112;
            if (v112)
              goto LABEL_124;
            v115 = &v89[16 * v91];
            v117 = *(_QWORD *)v115;
            v116 = *((_QWORD *)v115 + 1);
            v102 = __OFSUB__(v116, v117);
            v118 = v116 - v117;
            if (v102)
              goto LABEL_127;
            if (__OFADD__(v113, v118))
              goto LABEL_128;
            if (v113 + v118 >= v94)
            {
              v119 = v94 < v118;
LABEL_88:
              if (v119)
                v91 = v103;
              goto LABEL_90;
            }
LABEL_82:
            if ((v114 & 1) != 0)
              goto LABEL_123;
            v122 = &v89[16 * v91];
            v124 = *(_QWORD *)v122;
            v123 = *((_QWORD *)v122 + 1);
            v102 = __OFSUB__(v123, v124);
            v125 = v123 - v124;
            if (v102)
              goto LABEL_126;
            if (v125 < v113)
              goto LABEL_15;
LABEL_90:
            v130 = v91 - 1;
            if (v91 - 1 >= v20)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
              goto LABEL_139;
            }
            if (!v19)
              goto LABEL_141;
            v131 = v17;
            v132 = &v89[16 * v130];
            v133 = *(_QWORD *)v132;
            v134 = &v89[16 * v91];
            v135 = *((_QWORD *)v134 + 1);
            v136 = v156;
            sub_1003B7A9C((void **)(v19 + 16 * *(_QWORD *)v132), (void **)(v19 + 16 * *(_QWORD *)v134), (void **)(v19 + 16 * v135), v155);
            v156 = v136;
            if (v136)
            {
LABEL_98:
              swift_bridgeObjectRelease();
              v149[2] = 0;
              swift_bridgeObjectRelease();
              return;
            }
            if (v135 < v133)
              goto LABEL_116;
            if (v91 > *((_QWORD *)v131 + 2))
              goto LABEL_117;
            *(_QWORD *)v132 = v133;
            *(_QWORD *)&v89[16 * v130 + 8] = v135;
            v137 = *((_QWORD *)v131 + 2);
            if (v91 >= v137)
              goto LABEL_118;
            v17 = v131;
            v20 = v137 - 1;
            memmove(&v89[16 * v91], v134 + 16, 16 * (v137 - 1 - v91));
            *((_QWORD *)v131 + 2) = v137 - 1;
            v19 = v164;
            if (v137 <= 2)
              goto LABEL_15;
          }
        }
        v20 = 1;
LABEL_15:
        v11 = v152;
        if (v18 >= v152)
        {
          v2 = v156;
          if (v20 < 2)
          {
LABEL_113:
            swift_bridgeObjectRelease();
            v149[2] = 0;
            swift_bridgeObjectRelease();
            return;
          }
LABEL_100:
          v139 = *v145;
          while (1)
          {
            v140 = v20 - 2;
            if (v20 < 2)
              goto LABEL_131;
            if (!v139)
              goto LABEL_143;
            v141 = *(_QWORD *)&v17[16 * v140 + 32];
            v142 = *(_QWORD *)&v17[16 * v20 + 24];
            sub_1003B7A9C((void **)(v139 + 16 * v141), (void **)(v139 + 16 * *(_QWORD *)&v17[16 * v20 + 16]), (void **)(v139 + 16 * v142), v155);
            if (v2)
            {
              v156 = v2;
              goto LABEL_98;
            }
            if (v142 < v141)
              goto LABEL_132;
            if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
              v17 = sub_1001D52E4((uint64_t)v17);
            if (v140 >= *((_QWORD *)v17 + 2))
              goto LABEL_133;
            v143 = &v17[16 * v140 + 32];
            *(_QWORD *)v143 = v141;
            *((_QWORD *)v143 + 1) = v142;
            v144 = *((_QWORD *)v17 + 2);
            if (v20 > v144)
              goto LABEL_134;
            memmove(&v17[16 * v20 + 16], &v17[16 * v20 + 32], 16 * (v144 - v20));
            *((_QWORD *)v17 + 2) = v144 - 1;
            v20 = v144 - 1;
            if (v144 <= 2)
              goto LABEL_113;
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  if (v11 < 0)
    goto LABEL_136;
  if (v11)
    sub_1003B7498(0, v11, 1, a1);
}

void sub_1003B7358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t ObjectType;
  double (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 != a2)
  {
    v20 = *a4;
    v4 = *a4 + 16 * a3 - 16;
LABEL_5:
    v5 = *(_OWORD *)(v20 + 16 * a3);
    v6 = a1;
    v19 = v4;
    v22 = a3;
    while (1)
    {
      v21 = *((_QWORD *)&v5 + 1);
      v7 = *(void **)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v9 = (void *)v5;
      ObjectType = swift_getObjectType(v5);
      v11 = *(double (**)(uint64_t, uint64_t))(v21 + 48);
      v12 = v9;
      v13 = v7;
      v14 = v11(ObjectType, v21);
      v15 = swift_getObjectType(v13);
      v16 = (*(double (**)(uint64_t, uint64_t))(v8 + 48))(v15, v8);

      if (v14 >= v16)
      {
LABEL_4:
        a3 = v22 + 1;
        v4 = v19 + 16;
        if (v22 + 1 == a2)
          return;
        goto LABEL_5;
      }
      if (!v20)
        break;
      v5 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)(v4 + 16) = *(_OWORD *)v4;
      *(_OWORD *)v4 = v5;
      v4 -= 16;
      if (v22 == ++v6)
        goto LABEL_4;
    }
    __break(1u);
  }
}

void sub_1003B7498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t ObjectType;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  id v48;

  v37 = a1;
  v7 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin(v7);
  v42 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (char *)&v35 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v39 = (char *)&v35 - v14;
  v36 = a2;
  if (a3 != a2)
  {
    v45 = *a4;
    v15 = v45 + 16 * a3 - 16;
    v16 = v41;
LABEL_5:
    v17 = *(_OWORD *)(v45 + 16 * a3);
    v18 = v37;
    v38 = v15;
    v46 = a3;
    while (1)
    {
      v47 = v17;
      v19 = *(void **)v15;
      v20 = *(_QWORD *)(v15 + 8);
      v21 = (void *)v17;
      ObjectType = swift_getObjectType();
      v48 = (id)v47;
      v23 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 16);
      *(_QWORD *)&v47 = v21;
      v24 = v19;
      v25 = (uint64_t)v39;
      v26 = sub_10047F84C(ObjectType, v23);
      Optional<A>.orDistantPast.getter(v26);
      sub_10000882C(v25, (uint64_t *)&unk_1008380D0);
      v27 = swift_getObjectType();
      v48 = v24;
      v28 = (uint64_t)v40;
      v29 = sub_10047F84C(v27, *(_QWORD *)(v20 + 16));
      v30 = v42;
      Optional<A>.orDistantPast.getter(v29);
      sub_10000882C(v28, (uint64_t *)&unk_1008380D0);
      LOBYTE(v21) = static Date.< infix(_:_:)(v16, v30);
      v31 = *(void (**)(char *, uint64_t))(v43 + 8);
      v32 = v30;
      v33 = v44;
      v31(v32, v44);
      v31(v16, v33);
      v34 = v46;

      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v34 + 1;
        v15 = v38 + 16;
        if (a3 == v36)
          return;
        goto LABEL_5;
      }
      if (!v45)
        break;
      v17 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)v15;
      *(_OWORD *)v15 = v17;
      v15 -= 16;
      if (v34 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1003B7714(void **__src, void **a2, unint64_t a3, void **__dst)
{
  void **v4;
  void **v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  double (**v16)(uint64_t, void *);
  uint64_t v17;
  double (*v18)(uint64_t, _QWORD *);
  id v19;
  id v20;
  double v21;
  uint64_t v22;
  double v23;
  void **v24;
  void **v25;
  char *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t ObjectType;
  double (*v35)(uint64_t, uint64_t);
  id v36;
  id v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t result;
  void **v42;
  char *v43;
  char *v44;
  void **v45;
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  char *v52;
  void **v53;
  void **v54;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 4;
  v54 = __src;
  v53 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15)
      goto LABEL_44;
    if (__dst != a2 || &a2[2 * v12] <= __dst)
      memmove(__dst, a2, 16 * v12);
    v26 = (char *)&v4[2 * v12];
    v52 = v26;
    v54 = v5;
    if (v6 >= v5 || v10 < 16)
      goto LABEL_43;
    v27 = (void **)(a3 - 16);
    v28 = v5;
    v49 = v6;
    v51 = v4;
    while (1)
    {
      v47 = v5;
      v43 = v26;
      v45 = v27 + 2;
      v30 = (void *)*((_QWORD *)v26 - 2);
      v31 = *((_QWORD *)v26 - 1);
      v26 -= 16;
      v32 = *(v28 - 2);
      v42 = v28 - 2;
      v33 = (uint64_t)*(v28 - 1);
      ObjectType = swift_getObjectType();
      v35 = *(double (**)(uint64_t, uint64_t))(v31 + 48);
      v36 = v30;
      v37 = v32;
      v38 = v35(ObjectType, v31);
      v39 = swift_getObjectType();
      v40 = (*(double (**)(uint64_t, uint64_t))(v33 + 48))(v39, v33);

      if (v38 < v40)
        break;
      v52 = v26;
      if (v45 < (void **)v43 || v27 >= (void **)v43)
      {
        *(_OWORD *)v27 = *(_OWORD *)v26;
        v28 = v47;
        goto LABEL_31;
      }
      v29 = (unint64_t)v51;
      if (v45 != (void **)v43)
        *(_OWORD *)v27 = *(_OWORD *)v26;
      v28 = v47;
      if (v47 <= v49)
        goto LABEL_43;
LABEL_32:
      v27 -= 2;
      v5 = v28;
      if ((unint64_t)v26 <= v29)
        goto LABEL_43;
    }
    v26 = v43;
    v28 = v42;
    if (v45 != v47 || v27 >= v47)
      *(_OWORD *)v27 = *(_OWORD *)v42;
    v54 = v42;
LABEL_31:
    v29 = (unint64_t)v51;
    if (v28 <= v49)
      goto LABEL_43;
    goto LABEL_32;
  }
  if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst)
      memmove(__dst, __src, 16 * v9);
    v44 = (char *)&v4[2 * v9];
    v52 = v44;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      do
      {
        v48 = v6;
        v50 = v4;
        v13 = *v5;
        v14 = v5[1];
        v15 = *v4;
        v16 = (double (**)(uint64_t, void *))v4[1];
        v17 = swift_getObjectType();
        v18 = (double (*)(uint64_t, _QWORD *))v14[6];
        v19 = v13;
        v20 = v15;
        v21 = v18(v17, v14);
        v22 = swift_getObjectType();
        v23 = v16[6](v22, v16);

        if (v21 >= v23)
        {
          v25 = v48;
          if (v48 != v50)
            *(_OWORD *)v48 = *(_OWORD *)v50;
          v4 = v50 + 2;
          v53 = v50 + 2;
          v24 = v5;
        }
        else
        {
          v24 = v5 + 2;
          v25 = v48;
          v4 = v50;
          if (v48 < v5 || v48 >= v24 || v48 != v5)
            *(_OWORD *)v48 = *(_OWORD *)v5;
        }
        v6 = v25 + 2;
        if (v4 >= (void **)v44)
          break;
        v5 = v24;
      }
      while ((unint64_t)v24 < a3);
      v54 = v6;
    }
LABEL_43:
    sub_1001D4FB4((void **)&v54, (const void **)&v53, &v52);
    return 1;
  }
LABEL_44:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003B7A9C(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t ObjectType;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t result;
  uint64_t v63;
  void **v64;
  void **v65;
  uint64_t v66;
  id v67;
  void **v68;
  void **v69;
  void **v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void **v78;
  void **v79;
  void **v80;

  v8 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  __chkstk_darwin(v8);
  v74 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v73 = (char *)&v63 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v12);
  v72 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v71 = (char *)&v63 - v15;
  v16 = (char *)a2 - (char *)a1;
  v17 = (char *)a2 - (char *)a1 + 15;
  if ((char *)a2 - (char *)a1 >= 0)
    v17 = (char *)a2 - (char *)a1;
  v18 = v17 >> 4;
  v69 = a3;
  v19 = (char *)a3 - (char *)a2;
  v20 = v19 / 16;
  v80 = a1;
  v79 = a4;
  if (v17 >> 4 >= v19 / 16)
  {
    if (v19 < -15)
      goto LABEL_42;
    if (a4 != a2 || &a2[2 * v20] <= a4)
      memmove(a4, a2, 16 * v20);
    v40 = &a4[2 * v20];
    v78 = v40;
    v80 = a2;
    if (v19 < 16 || a1 >= a2)
      goto LABEL_41;
    v41 = v69 - 2;
    v42 = a2;
    v64 = a1;
    v65 = a4;
    while (1)
    {
      v70 = a2;
      v68 = v40;
      v69 = v41 + 2;
      v43 = *(v40 - 2);
      v44 = (uint64_t)*(v40 - 1);
      v40 -= 2;
      v46 = *(v42 - 2);
      v45 = (uint64_t)*(v42 - 1);
      v42 -= 2;
      v66 = v45;
      ObjectType = swift_getObjectType();
      v77 = v43;
      v48 = *(_QWORD *)(v44 + 16);
      v67 = v43;
      v49 = v46;
      v50 = (uint64_t)v71;
      v51 = sub_10047F84C(ObjectType, v48);
      v52 = v73;
      Optional<A>.orDistantPast.getter(v51);
      sub_10000882C(v50, (uint64_t *)&unk_1008380D0);
      v53 = swift_getObjectType();
      v77 = v49;
      v54 = (uint64_t)v72;
      v55 = sub_10047F84C(v53, *(_QWORD *)(v66 + 16));
      v56 = v74;
      Optional<A>.orDistantPast.getter(v55);
      sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
      LOBYTE(v43) = static Date.< infix(_:_:)(v52, v56);
      v57 = *(void (**)(char *, uint64_t))(v75 + 8);
      v58 = v56;
      v59 = v76;
      v57(v58, v76);
      v57(v52, v59);

      if ((v43 & 1) != 0)
      {
        v40 = v68;
        if (v69 != v70 || v41 >= v70)
          *(_OWORD *)v41 = *(_OWORD *)v42;
        v80 = v42;
      }
      else
      {
        v78 = v40;
        v42 = v70;
        if (v69 >= v68 && v41 < v68)
        {
          v61 = (unint64_t)v64;
          v60 = (unint64_t)v65;
          if (v69 != v68)
            *(_OWORD *)v41 = *(_OWORD *)v40;
          goto LABEL_39;
        }
        *(_OWORD *)v41 = *(_OWORD *)v40;
      }
      v61 = (unint64_t)v64;
      v60 = (unint64_t)v65;
LABEL_39:
      if ((unint64_t)v40 > v60)
      {
        v41 -= 2;
        a2 = v42;
        if ((unint64_t)v42 > v61)
          continue;
      }
      goto LABEL_41;
    }
  }
  if (v16 >= -15)
  {
    if (a4 != a1 || &a1[2 * v18] <= a4)
      memmove(a4, a1, 16 * v18);
    v68 = &a4[2 * v18];
    v78 = v68;
    if (v16 >= 16 && a2 < v69)
    {
      do
      {
        v22 = *a2;
        v21 = a2[1];
        v23 = *a4;
        v24 = a4[1];
        v25 = swift_getObjectType();
        v77 = v22;
        v26 = v21[2];
        v70 = v22;
        v27 = a2;
        v28 = v23;
        v29 = (uint64_t)v71;
        v30 = sub_10047F84C(v25, v26);
        v31 = v73;
        Optional<A>.orDistantPast.getter(v30);
        sub_10000882C(v29, (uint64_t *)&unk_1008380D0);
        v32 = swift_getObjectType();
        v77 = v28;
        v33 = (uint64_t)v72;
        v34 = sub_10047F84C(v32, v24[2]);
        v35 = v74;
        Optional<A>.orDistantPast.getter(v34);
        sub_10000882C(v33, (uint64_t *)&unk_1008380D0);
        LOBYTE(v22) = static Date.< infix(_:_:)(v31, v35);
        v36 = *(void (**)(char *, uint64_t))(v75 + 8);
        v37 = v35;
        v38 = v76;
        v36(v37, v76);
        v36(v31, v38);

        if ((v22 & 1) != 0)
        {
          v39 = v27 + 2;
          if (a1 < v27 || a1 >= v39 || a1 != v27)
            *(_OWORD *)a1 = *(_OWORD *)v27;
        }
        else
        {
          if (a1 != a4)
            *(_OWORD *)a1 = *(_OWORD *)a4;
          a4 += 2;
          v79 = a4;
          v39 = v27;
        }
        a1 += 2;
        v80 = a1;
        if (a4 >= v68)
          break;
        a2 = v39;
      }
      while (v39 < v69);
    }
LABEL_41:
    sub_1001D4FB4((void **)&v80, (const void **)&v79, &v78);
    return 1;
  }
LABEL_42:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003B7FC4(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_1003B7FC4(v6, a2, a3);
  return result;
}

void sub_1003B806C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v8 = sub_10001AAA8(v4, (uint64_t)qword_10084B820);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_100385E40(a2, (uint64_t)v27);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = v5;
    v12 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v26 = v23;
    *(_DWORD *)v12 = 136446466;
    v13 = objc_msgSend(v9, "waiterID");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v25 = sub_10001A820(v15, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v18 = v28;
      v19 = v29;
      sub_10000A388(v27, v28);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      v25 = sub_10001A820(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
      v22 = v23;
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
    }
    else
    {

      __break(1u);
    }
  }
  else
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1003B831C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

BOOL sub_1003B8348(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 2.22044605e-16;
}

BOOL sub_1003B8360(double a1, double a2)
{
  return a1 - a2 < 2.22044605e-16;
}

void sub_1003B837C()
{
  uint64_t v0;

  sub_1003B83AC(*(_QWORD *)(v0 + 24), *(_QWORD *)(**(_QWORD **)(v0 + 16) + 80), *(_QWORD *)(**(_QWORD **)(v0 + 16) + 88));
}

void sub_1003B83AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  void *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  __int128 v108;
  id v109;
  _QWORD v110[3];
  char v111[8];
  _QWORD v112[3];
  char v113[8];
  _QWORD v114[3];
  char v115[8];
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char v120[8];

  v107 = a2;
  v5 = 0;
  v99 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (uint64_t)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v92 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v10)
  {
    v11 = (__int128 *)(a1 + 32);
    v12 = _swiftEmptyArrayStorage;
    do
    {
      v116 = *v11;
      v108 = v116;
      v13 = (id)v116;
      if ((sub_1003B346C((uint64_t)&v116, v107, a3) & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
        v119 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001C235C(0, v12[2] + 1, 1);
          v12 = v119;
        }
        v16 = v12[2];
        v15 = v12[3];
        if (v16 >= v15 >> 1)
        {
          sub_1001C235C(v15 > 1, v16 + 1, 1);
          v12 = v119;
        }
        v12[2] = v16 + 1;
        *(_OWORD *)&v12[2 * v16 + 4] = v108;
      }
      else
      {

      }
      ++v11;
      --v10;
    }
    while (v10);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v116 = v12;
  swift_bridgeObjectRetain(v12);
  sub_1003B5BD4(&v116, (uint64_t (*)(_QWORD *))sub_1003B6918);
  swift_release(v12);
  v18 = *(_QWORD *)(v116 + 16);
  if (!v18)
  {
    swift_release(v116);
    return;
  }
  v91 = v120;
  v89 = (char *)&v116 + 8;
  v87 = v116;
  v19 = (uint64_t *)(v116 + 40);
  *(_QWORD *)&v17 = 136446466;
  v93 = v17;
  v90 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v17 = 136446210;
  v88 = v17;
  v104 = a3;
  while (1)
  {
    v20 = *v19;
    v21 = qword_1008373B8;
    v22 = (id)*(v19 - 1);
    if (v21 != -1)
      swift_once(&qword_1008373B8, sub_1003B2764);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_100847FB0);
    v25 = v22;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = v27;
    v29 = os_log_type_enabled(v26, v27);
    *(_QWORD *)&v108 = v18;
    v106 = v19;
    if (v29)
    {
      v30 = swift_slowAlloc(22, -1);
      v102 = v24;
      v31 = v30;
      v101 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v116 = v101;
      *(_DWORD *)v31 = v93;
      v103 = 0;
      ObjectType = swift_getObjectType();
      v119 = v25;
      v105 = v20;
      v33 = *(_QWORD *)(v20 + 16);
      v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 16);
      v100 = v28;
      v35 = v34(ObjectType, v33);
      v119 = (_QWORD *)sub_10001A820(v35, v36, (uint64_t *)&v116);
      v37 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v91);

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2082;
      v119 = v25;
      v38 = (uint64_t)v92;
      v39 = sub_10047F84C(ObjectType, v33);
      v40 = v94;
      Optional<A>.orDistantPast.getter(v39);
      sub_10000882C(v38, (uint64_t *)&unk_1008380D0);
      v41 = v97;
      sub_10047F8FC(v97);
      v42 = Date.ISO8601Format(_:)(v41);
      v44 = v43;
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v41, v99);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v40, v96);
      v119 = (_QWORD *)sub_10001A820(v42, v44, (uint64_t *)&v116);
      v5 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v37);

      v20 = v105;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v100, "RDHousekeepingActivityScheduler: Trying to execute activity {identifier: %{public}s, lastExecuted: %{public}s}", (uint8_t *)v31, 0x16u);
      v45 = v101;
      swift_arrayDestroy(v101, 2, v90);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

    }
    v46 = swift_getObjectType();
    v47 = *(_QWORD *)(v20 + 32);
    v117 = v46;
    v118 = v47;
    *(_QWORD *)&v116 = v25;
    type metadata accessor for RDHousekeepingActivityScheduler(0, v107, v104, v48);
    v49 = v25;
    sub_1003CCDFC(&v116);
    if (!v5)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
LABEL_32:
      swift_release(v87);
      return;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
    swift_getErrorValue(v5, v115, v114);
    if ((Error.isREMError(withErrorCode:)(-1002, v114[1], v114[2]) & 1) == 0)
      break;
    v50 = v20;
    v51 = v49;
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc(22, -1);
      v105 = swift_slowAlloc(64, -1);
      v119 = (_QWORD *)v105;
      *(_DWORD *)v54 = v93;
      *(_QWORD *)&v116 = v51;
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v50 + 16) + 16))(v46);
      *(_QWORD *)&v116 = sub_10001A820(v55, v56, (uint64_t *)&v119);
      v57 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v89);

      v58 = swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2082;
      v103 = v54 + 14;
      v109 = v51;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(v47 + 16))(&v116, v46, v47, v58);
      sub_10000A388(&v116, v117);
      v59 = v94;
      sub_10047FC00(v94);
      v60 = v97;
      sub_10047F8FC(v97);
      v61 = Date.ISO8601Format(_:)(v60);
      v63 = v62;
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v60, v99);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v59, v96);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
      *(_QWORD *)&v116 = sub_10001A820(v61, v63, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v57);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDHousekeepingActivityScheduler: Activity [%{public}s] is throttled, skipping... {resetDate: %{public}s}", (uint8_t *)v54, 0x16u);
      v64 = v105;
      swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v54, -1, -1);

LABEL_28:
      swift_errorRelease(v5);

      goto LABEL_15;
    }

    swift_errorRelease(v5);
LABEL_15:
    v5 = 0;
    v19 = v106 + 2;
    v18 = v108 - 1;
    if ((_QWORD)v108 == 1)
      goto LABEL_32;
  }
  swift_getErrorValue(v5, v113, v112);
  v65 = Error.isREMError(withErrorCode:)(-1003, v112[1], v112[2]);
  v66 = v49;
  v67 = v66;
  if ((v65 & 1) != 0)
  {
    v51 = v66;
    v68 = Logger.logObject.getter(v51);
    v69 = static os_log_type_t.error.getter(v68);
    if (!os_log_type_enabled(v68, v69))
    {

      swift_errorRelease(v5);
      goto LABEL_15;
    }
    v70 = v20;
    v71 = swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v116 = v72;
    *(_DWORD *)v71 = v88;
    v119 = v51;
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v70 + 16) + 16))(v46);
    *(_QWORD *)(v71 + 4) = sub_10001A820(v73, v74, (uint64_t *)&v116);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "RDHousekeepingActivityScheduler: Activity [%{public}s] is babysat, skipping...", (uint8_t *)v71, 0xCu);
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);

    goto LABEL_28;
  }
  v75 = v20;
  swift_errorRetain(v5);
  v76 = v67;
  v77 = swift_errorRetain(v5);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.error.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(22, -1);
    v81 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v116 = v81;
    *(_DWORD *)v80 = v93;
    v119 = v76;
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v75 + 16) + 16))(v46);
    v119 = (_QWORD *)sub_10001A820(v82, v83, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);

    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 12) = 2082;
    swift_getErrorValue(v5, v111, v110);
    v84 = Error.rem_errorDescription.getter(v110[1], v110[2]);
    v119 = (_QWORD *)sub_10001A820(v84, v85, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "RDHousekeepingActivityScheduler: Activity [%{public}s] failed with error {%{public}s}", (uint8_t *)v80, 0x16u);
    swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

    swift_errorRelease(v5);
    swift_release(v87);

  }
  else
  {

    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_release(v87);

  }
}

uint64_t sub_1003B8F88()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B8FAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003B8FD8()
{
  uint64_t v0;

  return sub_1003B3208(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1003B8FF8(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_1008482D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayGroupInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_1003B9034(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int v12;
  __n128 v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  char v32;
  uint64_t v33;

  if ((unint64_t)a1 >> 62)
    goto LABEL_35;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_30;
LABEL_11:
      REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter(&v33);
      swift_release(v6);
      v8 = v33;
      v9 = *(_QWORD *)(v33 + 16);
      v10 = v3[2];
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
        goto LABEL_31;
      v13 = swift_isUniquelyReferenced_nonNull_native(v3);
      if (v12 && v11 <= v3[3] >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_20;
      }
      else
      {
        if (v10 <= v11)
          v14 = v10 + v9;
        else
          v14 = v10;
        v3 = (_QWORD *)sub_1002C8724(v12, v14, 1, (unint64_t)v3);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_20:
          v15 = v3[2];
          v16 = (v3[3] >> 1) - v15;
          v17 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group(0, v13);
          if (v16 < v9)
            goto LABEL_33;
          v18 = *(_QWORD *)(v17 - 8);
          v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
          v20 = *(_QWORD *)(v18 + 72);
          v21 = (char *)v3 + v19 + v20 * v15;
          v22 = v8 + v19;
          v23 = v20 * v9;
          v24 = &v21[v23];
          v25 = v22 + v23;
          if (v22 < (unint64_t)v24 && (unint64_t)v21 < v25)
          {
            v32 = 2;
            result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v32, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v21);
          if (v9)
          {
            v27 = v3[2];
            v28 = __OFADD__(v27, v9);
            v29 = v27 + v9;
            if (v28)
              goto LABEL_34;
            v3[2] = v29;
          }
          goto LABEL_5;
        }
      }
      if (v9)
        goto LABEL_32;
LABEL_5:
      swift_bridgeObjectRelease();
      if (v7 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    v6 = *(_QWORD *)(a1 + 8 * i);
    swift_retain();
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (a1 < 0)
      v30 = a1;
    else
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v30);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003B9294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848298);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848298);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003B9324(void *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  char *v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  int v73;
  __n128 v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, unint64_t, uint64_t, __n128);
  __n128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, unint64_t, uint64_t, __n128);
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  __n128 v111;
  uint64_t v112;
  id v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t Configuration;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  char *v156;
  id v157;
  _QWORD *v158;
  uint64_t v159;
  id v160;
  _QWORD *v161;
  unint64_t v162;

  v158 = a3;
  v155 = a2;
  v159 = a4;
  v160 = a1;
  v141 = a5;
  v148 = type metadata accessor for REMRemindersListDataView.TodayGroupModel(0);
  v153 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v147 = (char *)&v127 - v7;
  v8 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v8);
  v137 = (uint64_t)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v152 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v149 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v151 = (char *)&v127 - v12;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v139 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v138 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v145 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v144 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v156 = (char *)&v127 - v16;
  v17 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v17);
  v143 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v127 - v20;
  v22 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group(0, v24);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v33 = (char *)&v127 - v32;
  __chkstk_darwin(v34);
  v36 = (char *)&v127 - v35;
  v37 = v157;
  v38 = sub_1003BC6C4((uint64_t)v160, v158, v159);
  if (!v37)
  {
    v131 = v23;
    v132 = v26;
    v133 = v22;
    v130 = v33;
    v129 = v30;
    v135 = v28;
    v134 = v27;
    v157 = v39;
    v40 = v38;
    v136 = v21;
    v41 = v159;
    v42 = sub_1003BF510((uint64_t)v160);
    v162 = v40;
    if (v42[2])
    {
      v43 = v132;
      (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v132, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.nearby(_:), v133);
      v44 = v36;
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v43, v42);
      swift_isUniquelyReferenced_nonNull_native(v40);
      v45 = (uint64_t)v156;
      v46 = (uint64_t)v136;
      v47 = v40;
      if ((v48 & 1) == 0)
        v47 = sub_1002C8724(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
      v49 = (uint64_t)v160;
      v51 = *(_QWORD *)(v47 + 16);
      v50 = *(_QWORD *)(v47 + 24);
      v52 = v51 + 1;
      v53 = v134;
      if (v51 >= v50 >> 1)
      {
        v128 = v51 + 1;
        v125 = sub_1002C8724(v50 > 1, v51 + 1, 1, v47);
        v52 = v128;
        v47 = v125;
      }
      *(_QWORD *)(v47 + 16) = v52;
      v54 = v47
          + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80))
          + *(_QWORD *)(v135 + 72) * v51;
      v55 = v47;
      v56 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v135 + 32))(v54, v44, v53);
      v162 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      v45 = (uint64_t)v156;
      v46 = (uint64_t)v136;
      v55 = v40;
      v49 = (uint64_t)v160;
    }
    if ((REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter(v56) & 1) != 0)
    {
      v57 = v132;
      (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v132, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.empty(_:), v133);
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v57, _swiftEmptyArrayStorage);
      swift_isUniquelyReferenced_nonNull_native(v55);
      if ((v58 & 1) == 0)
        v55 = sub_1002C8724(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
      v59 = v135;
      v61 = *(_QWORD *)(v55 + 16);
      v60 = *(_QWORD *)(v55 + 24);
      if (v61 >= v60 >> 1)
      {
        v126 = sub_1002C8724(v60 > 1, v61 + 1, 1, v55);
        v59 = v135;
        v55 = v126;
      }
      *(_QWORD *)(v55 + 16) = v61 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v55+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v61, v130, v134);
      v162 = v55;
    }
    v62 = v154;
    swift_bridgeObjectRetain_n(v55, 2);
    sub_1003B9EAC(v49, v55, v41, v46);
    v63 = objc_msgSend(v62, "fetchResultTokenToDiffAgainst", swift_bridgeObjectRelease().n128_f64[0]);
    sub_100493C24(v63, v49, v45);
    v155 = 0;
    v64 = v45;

    v65 = v138;
    v67 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v66);
    v68 = v151;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v67);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v65, Configuration);
    v69 = v152;
    v70 = (uint64_t *)v149;
    v71 = v68;
    v72 = v150;
    (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v149, v71, v150);
    v73 = (*(uint64_t (**)(uint64_t *, uint64_t))(v69 + 88))(v70, v72);
    v154 = (void *)v55;
    if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v69 + 96))(v70, v72);
      v75 = *v70;
      v76 = _swiftEmptyArrayStorage;
      v161 = _swiftEmptyArrayStorage;
      v77 = *(_QWORD *)(v55 + 16);
      if (v77)
      {
        v149 = (char *)v75;
        v78 = v135;
        v79 = v55 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
        v80 = *(_QWORD *)(v135 + 72);
        v81 = v55;
        v82 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v135 + 16);
        v83 = swift_bridgeObjectRetain(v81);
        v84 = v134;
        v85 = v129;
        do
        {
          v86 = v82(v85, v79, v84, v83);
          v87 = REMRemindersListDataView.TodayGroupModel.Group.reminders.getter(v86);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v85, v84);
          sub_1001E23F0(v87);
          v79 += v80;
          --v77;
        }
        while (v77);
        swift_bridgeObjectRelease();
        v76 = v161;
        v88 = (uint64_t)v136;
        v75 = (uint64_t)v149;
        v72 = v150;
      }
      else
      {
        v88 = v46;
      }
      v158 = sub_10049BB18(v75, (uint64_t)v76, (uint64_t)v160, v158, 0);
      v74 = swift_bridgeObjectRelease();
      v90 = _swiftEmptyArrayStorage;
      v91 = v153;
      v107 = v147;
      v108 = v144;
LABEL_29:
      v109 = (uint64_t)v143;
LABEL_33:
      (*(void (**)(char *, uint64_t, __n128))(v152 + 8))(v151, v72, v74);
      swift_beginAccess(&v162, &v161, 0, 0);
      v110 = v162;
      sub_100129028(v88, v109);
      v112 = REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter(v111);
      v113 = v157;
      v160 = v157;
      REMRemindersListDataView.TodayGroupModel.init(groups:remindersCount:currentLocation:prefetchedReminders:prefetchedDueReminders:todaySmartList:)(v110, v109, v112, v158, v90, v113);
      v114 = v146;
      v115 = v148;
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v146, v107, v148);
      v116 = v145;
      v117 = v156;
      v118 = v142;
      (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v108, v156, v142);
      v119 = sub_10009FC50(&qword_1008482D8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayGroupModel);
      v120 = sub_10009FC50(&qword_1008482E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayGroupModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v114, v108, v115, v119, v120);

      (*(void (**)(char *, uint64_t))(v153 + 8))(v107, v115);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
      sub_10000882C((uint64_t)v136, &qword_100839AA0);
      swift_bridgeObjectRelease();
      return;
    }
    if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      v88 = v46;
      v89 = (uint64_t *)v149;
      (*(void (**)(char *, uint64_t))(v69 + 96))(v149, v72);
      v158 = sub_10049C4C8(*v89, v64, v49, v158, 0);
      v90 = _swiftEmptyArrayStorage;
      v91 = v153;
    }
    else
    {
      if (v73 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
      {
        v92 = v149;
        (*(void (**)(char *, uint64_t))(v69 + 96))(v149, v72);
        v93 = *(char **)v92;
        v94 = sub_10001A630(&qword_100839AA8);
        sub_100128FE0((uint64_t)&v92[*(int *)(v94 + 48)], v137);
        v95 = _swiftEmptyArrayStorage;
        v161 = _swiftEmptyArrayStorage;
        v96 = *(_QWORD *)(v55 + 16);
        if (v96)
        {
          v149 = v93;
          v97 = v135;
          v98 = v55 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
          v99 = *(_QWORD *)(v135 + 72);
          v100 = v55;
          v101 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v135 + 16);
          v102 = swift_bridgeObjectRetain(v100);
          v103 = v134;
          v104 = v129;
          do
          {
            v105 = v101(v104, v98, v103, v102);
            v106 = REMRemindersListDataView.TodayGroupModel.Group.reminders.getter(v105);
            (*(void (**)(char *, uint64_t))(v97 + 8))(v104, v103);
            sub_1001E23F0(v106);
            v98 += v99;
            --v96;
          }
          while (v96);
          swift_bridgeObjectRelease();
          v95 = v161;
          v88 = (uint64_t)v136;
          v93 = v149;
        }
        else
        {
          v88 = v46;
        }
        v121 = v158;
        v122 = (uint64_t)v93;
        v123 = (uint64_t)v160;
        v158 = sub_10049BB18(v122, (uint64_t)v95, (uint64_t)v160, v158, 0);
        v124 = v137;
        v90 = sub_10049CB18(v137, (uint64_t)v95, v123, v121, 0);
        swift_bridgeObjectRelease();
        sub_10000882C(v124, &qword_100839A98);
        v91 = v153;
        v107 = v147;
        v108 = v144;
        v72 = v150;
        goto LABEL_29;
      }
      v91 = v153;
      if (v73 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
      {
        swift_bridgeObjectRelease();
        _diagnoseUnexpectedEnumCase<A>(type:)(v72, v72);
        __break(1u);
        return;
      }
      v88 = v46;
      v90 = _swiftEmptyArrayStorage;
      v158 = _swiftEmptyArrayStorage;
    }
    v107 = v147;
    v109 = (uint64_t)v143;
    v108 = v144;
    goto LABEL_33;
  }
}

void sub_1003B9EAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Configuration;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v70 = a2;
  v77 = a1;
  v6 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType(0);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  v7 = __chkstk_darwin(v6);
  v79 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group(0, v7);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v75 = *(_QWORD *)(v11 - 8);
  v76 = v11;
  __chkstk_darwin(v11);
  v74 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s10PredicatesOMa(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v17 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v65 - v22;
  v78 = a3;
  v24 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v21);
  LOBYTE(a3) = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v24);
  v25 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  v26 = v25(v23, Configuration);
  if ((a3 & 1) == 0)
  {
    v36 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a4, 1, 1, v36);
    return;
  }
  v72 = (void (*)(char *, uint64_t))v25;
  v69 = a4;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter(v26);
  swift_storeEnumTagMultiPayload(v15, v13, 14);
  sub_10000D2C0();
  v28 = v27;
  sub_10001C744((uint64_t)v15, _s10PredicatesOMa);
  v29 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v30 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "entity");
  objc_msgSend(v30, "setEntity:", v31);

  objc_msgSend(v30, "setAffectedStores:", 0);
  objc_msgSend(v30, "setPredicate:", v28);
  v32 = v77;
  v33 = v73;
  v34 = NSManagedObjectContext.count<A>(for:)(v30, v29);
  v35 = v33;
  if (v33)
  {

    return;
  }
  v68 = v34;

  v37 = REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter();
  if (v37)
  {
    v39 = v37;
    v40 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v38);
    v41 = (uint64_t)v74;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v40);
    v72(v19, Configuration);
    sub_1003BEBB8(v32, v39, v41, 1);
  }
  v42 = 0;
  while (2)
  {
    v43 = *(_QWORD *)(v70 + 16);
    v44 = v83;
    if (!v43)
    {
      v50 = 0;
      v60 = v68;
      goto LABEL_39;
    }
    v66 = v42;
    v67 = v28;
    v73 = v35;
    v45 = v70 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
    LODWORD(v78) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.today(_:);
    LODWORD(v77) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:);
    LODWORD(v76) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:);
    LODWORD(v75) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:);
    LODWORD(v74) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:);
    v46 = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:);
    LODWORD(v72) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.nearby(_:);
    v71 = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.empty(_:);
    v47 = *(_QWORD *)(v82 + 72);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v82 + 16);
    v49 = swift_bridgeObjectRetain(v70);
    v50 = 0;
    v23 = v79;
    while (1)
    {
      v52 = v48(v10, v45, v44, v49);
      REMRemindersListDataView.TodayGroupModel.Group.groupType.getter(v52);
      v53 = (*(uint64_t (**)(char *, uint64_t))(v80 + 88))(v23, v81);
      if (v53 != (_DWORD)v78
        && v53 != (_DWORD)v77
        && v53 != (_DWORD)v76
        && v53 != (_DWORD)v75
        && v53 != (_DWORD)v74
        && v53 != v46)
      {
        if (v53 != (_DWORD)v72 && v53 != v71)
        {
          _diagnoseUnexpectedEnumCase<A>(type:)(v81, v81);
          __break(1u);
          return;
        }
        goto LABEL_16;
      }
      v44 = *(_QWORD *)(REMRemindersListDataView.TodayGroupModel.Group.reminders.getter() + 16);
      swift_bridgeObjectRelease();
      v59 = __OFADD__(v50, v44);
      v50 += v44;
      if (v59)
        break;
LABEL_16:
      v44 = v83;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v83);
      v45 += v47;
      if (!--v43)
        goto LABEL_37;
    }
    __break(1u);
LABEL_37:
    v38 = swift_bridgeObjectRelease();
    v35 = v73;
    v28 = v67;
    v60 = v68;
    v42 = v66;
LABEL_39:
    v59 = __OFADD__(v60, v42);
    v61 = v60 + v42;
    v62 = v69;
    if (v59)
    {
      __break(1u);
      if (v44 < 0)
        v64 = v44;
      else
        v64 = v44 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v44);
      v42 = _CocoaArrayWrapper.endIndex.getter(v64);

      swift_bridgeObjectRelease();
      v38 = swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)(v61, v50, v38);

  v63 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
}

void sub_1003BA46C(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  char v19;
  id v20;
  id v21;
  id v22;
  void (*v23)(char *, uint64_t);
  char v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v50 = a2;
  v51 = a3;
  v49 = type metadata accessor for REMTimeOfDay(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v15);
  v17 = v16;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_7;
  v18 = sub_1002C6844(v16);
  if ((v19 & 1) == 0)
    goto LABEL_7;
  v20 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v18);

  v21 = objc_msgSend(v20, "displayDate");
  if (!v21)
  {
    v17 = v20;
LABEL_7:
    v25 = v51;

    v24 = 5;
    goto LABEL_8;
  }
  v42 = v20;
  v43 = v21;
  v22 = objc_msgSend(v21, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

  LOBYTE(v22) = static Date.< infix(_:_:)(v14, v50);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  if ((v22 & 1) != 0)
  {

    v24 = 0;
LABEL_11:
    v25 = v51;
    goto LABEL_8;
  }
  v26 = objc_msgSend(v43, "isAllDay");
  if ((_DWORD)v26)
  {

    v24 = 1;
    goto LABEL_11;
  }
  static Calendar.current.getter(v26);
  v27 = v45;
  v28 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v7, enum case for Calendar.Component.hour(_:), v46);
  v29 = objc_msgSend(v43, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v30 = Calendar.component(_:from:)(v7, v14);
  v23(v14, v11);
  v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v32 = v30;
  v31(v7, v28);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v44);
  v34 = v47;
  v33 = v48;
  v35 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v47 + 104);
  v36 = v49;
  v37 = v35(v48, enum case for REMTimeOfDay.morning(_:), v49);
  v38 = REMTimeOfDay.endHour.getter(v37);
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v33, v36);
  v25 = v51;
  if (v32 >= v38)
  {
    v40 = v35(v33, enum case for REMTimeOfDay.afternoon(_:), v36);
    v41 = REMTimeOfDay.endHour.getter(v40);

    v39(v33, v36);
    if (v32 < v41)
      v24 = 3;
    else
      v24 = 4;
  }
  else
  {

    v24 = 2;
  }
LABEL_8:
  *v25 = v24;
}

id sub_1003BA7EC@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  id v7;
  uint64_t v8;
  id v9;

  v3 = *a1;
  v9 = 0;
  v4 = objc_msgSend(v3, "remObjectIDWithError:", &v9);
  v5 = v9;
  if (v4)
  {
    *a2 = v4;
    return v5;
  }
  else
  {
    v7 = v9;
    _convertNSErrorToError(_:)(v5);

    return (id)swift_willThrow(v8);
  }
}

uint64_t sub_1003BA8A0(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __n128 v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  unint64_t v65;
  char v66;
  _QWORD *v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, _QWORD, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, _QWORD, uint64_t);
  unint64_t v124;
  char *v125;
  char *v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  _QWORD *v132;
  void (*v133)(char *, _QWORD, uint64_t);
  char *v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  _QWORD *v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  unint64_t v142;
  char v143;
  _QWORD *v144;
  __n128 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  _QWORD *v149;
  unint64_t v150;
  char *v151;
  char v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  id v158;
  void *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t result;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  id v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD v200[3];
  char v201[16];
  _QWORD *v202;

  v184 = a3;
  v183 = a2;
  v196 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType(0);
  v191 = *(_QWORD **)(v196 - 8);
  __chkstk_darwin(v196);
  v194 = (char *)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v192 = (char *)&v175 - v8;
  __chkstk_darwin(v9);
  v190 = (char *)&v175 - v10;
  __chkstk_darwin(v11);
  v182 = (char *)&v175 - v12;
  __chkstk_darwin(v13);
  v181 = (char *)&v175 - v14;
  __chkstk_darwin(v15);
  v195 = (char *)&v175 - v16;
  v18 = __chkstk_darwin(v17);
  v193 = (char *)&v175 - v19;
  v180 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today(0, v18);
  *(_QWORD *)&v177 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v179 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v178 = (char *)&v175 - v22;
  v23 = type metadata accessor for REMFeatureFlags(0);
  v186 = *(_QWORD *)(v23 - 8);
  v187 = v23;
  __chkstk_darwin(v23);
  v185 = (char *)&v175 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Calendar(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Date(0);
  v188 = *(_QWORD *)(v29 - 8);
  v189 = v29;
  __chkstk_darwin(v29);
  v31 = (char *)&v175 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v32);
  v197 = v31;
  Calendar.startOfDay(for:)(a1);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  v33 = (_QWORD *)sub_1002AF94C((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)a4 >> 62)
  {
LABEL_24:
    if (a4 < 0)
      v56 = a4;
    else
      v56 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v34 = _CocoaArrayWrapper.endIndex.getter(v56);
    if (v34)
      goto LABEL_3;
  }
  else
  {
    v34 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a4);
    if (v34)
    {
LABEL_3:
      v198 = (_QWORD *)(a4 & 0xC000000000000001);
      v35 = 4;
      do
      {
        if (v198)
          v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35 - 4, a4);
        else
          v37 = *(id *)(a4 + 8 * v35);
        v38 = v37;
        v39 = v35 - 3;
        if (__OFADD__(v35 - 4, 1))
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        v40 = objc_msgSend(v37, "remObjectID");
        swift_isUniquelyReferenced_nonNull_native(v33);
        v42 = v41;
        v202 = v33;
        v44 = sub_1002C6844(v40);
        v45 = v33[2];
        v46 = (v43 & 1) == 0;
        v47 = v45 + v46;
        if (__OFADD__(v45, v46))
          goto LABEL_22;
        v48 = v43;
        if (v33[3] >= v47)
        {
          if ((v42 & 1) != 0)
          {
            v33 = v202;
            if ((v43 & 1) != 0)
              goto LABEL_4;
          }
          else
          {
            sub_1002D6928();
            v33 = v202;
            if ((v48 & 1) != 0)
              goto LABEL_4;
          }
        }
        else
        {
          sub_1002CD8B0(v47, v42);
          v49 = sub_1002C6844(v40);
          if ((v48 & 1) != (v50 & 1))
          {
            v174 = sub_10001A630((uint64_t *)&unk_100844910);
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v174);
            __break(1u);
            return result;
          }
          v44 = v49;
          v33 = v202;
          if ((v48 & 1) != 0)
          {
LABEL_4:
            v36 = v33[7];

            *(_QWORD *)(v36 + 8 * v44) = v38;
            goto LABEL_5;
          }
        }
        v33[(v44 >> 6) + 8] |= 1 << v44;
        v51 = 8 * v44;
        *(_QWORD *)(v33[6] + v51) = v40;
        *(_QWORD *)(v33[7] + v51) = v38;
        v52 = v33[2];
        v53 = __OFADD__(v52, 1);
        v54 = v52 + 1;
        if (v53)
          goto LABEL_23;
        v33[2] = v54;
        v55 = v40;
LABEL_5:

        swift_bridgeObjectRelease();
        ++v35;
      }
      while (v39 != v34);
    }
  }
  swift_bridgeObjectRelease();
  __chkstk_darwin(v57);
  v58 = (uint64_t)v197;
  *(&v175 - 2) = (uint64_t)v33;
  *(&v175 - 1) = v58;
  swift_bridgeObjectRetain(v184);
  v60 = sub_100514420(v59, (void (*)(uint64_t *__return_ptr, char *))sub_1003BFC38, (uint64_t)(&v175 - 4));
  v61 = swift_bridgeObjectRelease();
  if (!v60[2])
  {
    v67 = _swiftEmptyArrayStorage;
    v64 = _swiftEmptyArrayStorage;
    goto LABEL_44;
  }
  v62 = sub_1002C67EC(0);
  if ((v63 & 1) == 0)
  {
    v64 = _swiftEmptyArrayStorage;
    if (v60[2])
      goto LABEL_31;
LABEL_36:
    v67 = _swiftEmptyArrayStorage;
    goto LABEL_44;
  }
  v64 = *(_QWORD **)(v60[7] + 8 * v62);
  v61 = swift_bridgeObjectRetain(v64);
  if (!v60[2])
    goto LABEL_36;
LABEL_31:
  v65 = sub_1002C67EC(1u);
  if ((v66 & 1) != 0)
  {
    v67 = *(_QWORD **)(v60[7] + 8 * v65);
    v61 = swift_bridgeObjectRetain(v67);
    if (!v60[2])
      goto LABEL_44;
LABEL_38:
    v68 = sub_1002C67EC(5u);
    if ((v69 & 1) != 0)
    {
      v70 = *(_QWORD *)(v60[7] + 8 * v68);
      v71 = qword_1008373C0;
      swift_bridgeObjectRetain(v70);
      if (v71 != -1)
        swift_once(&qword_1008373C0, sub_1003B9294);
      v72 = type metadata accessor for Logger(0);
      sub_10001AAA8(v72, (uint64_t)qword_100848298);
      swift_bridgeObjectRetain_n(v70, 2);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = swift_slowAlloc(22, -1);
        v198 = (_QWORD *)swift_slowAlloc(32, -1);
        v202 = v198;
        *(_DWORD *)v76 = 134218242;
        v199 = *(_QWORD *)(v70 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200);
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        v176 = v76 + 14;
        v77 = v60;
        v78 = v64;
        v79 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
        swift_bridgeObjectRetain(v70);
        v81 = Array.description.getter(v80, v79);
        v184 = v67;
        v83 = v82;
        swift_bridgeObjectRelease();
        v84 = v81;
        v64 = v78;
        v60 = v77;
        v199 = sub_10001A820(v84, v83, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200);
        swift_bridgeObjectRelease_n(v70, 2);
        v67 = v184;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "today data view unable to group %ld reminders %s", (uint8_t *)v76, 0x16u);
        v85 = v198;
        swift_arrayDestroy(v198, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        swift_slowDealloc(v76, -1, -1);

      }
      else
      {

        v61 = swift_bridgeObjectRelease_n(v70, 3);
      }
    }
    goto LABEL_44;
  }
  v67 = _swiftEmptyArrayStorage;
  if (v60[2])
    goto LABEL_38;
LABEL_44:
  v86 = v185;
  v87 = v186;
  v88 = v187;
  v89 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v186 + 104))(v185, enum case for REMFeatureFlags.todayReordering(_:), v187, v61);
  v90 = REMFeatureFlags.isEnabled.getter(v89);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
  if ((v90 & 1) != 0)
  {
    v192 = 0;
    v91 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v92 = swift_allocObject(v91, 56, 7);
    *(_OWORD *)(v92 + 16) = xmmword_1006AAD80;
    v93 = v177;
    v190 = *(char **)(v177 + 104);
    v184 = v67;
    v94 = v178;
    v95 = v180;
    v96 = ((uint64_t (*)(char *, _QWORD, uint64_t))v190)(v178, enum case for REMSmartListSection.PredefinedSectionType.Today.beforeToday(_:), v180);
    v97 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v96);
    v185 = *(char **)(v93 + 8);
    ((void (*)(char *, uint64_t))v185)(v94, v95);
    v98 = sub_10001A630(&qword_100844558);
    v194 = (char *)v98;
    v100 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group(0, v99) - 8);
    v101 = *(_QWORD *)(v100 + 72);
    v102 = *(unsigned __int8 *)(v100 + 80);
    v103 = (v102 + 32) & ~v102;
    v186 = v101;
    v187 = v103 + v101;
    v104 = v102 | 7;
    v176 = v102 | 7;
    v105 = swift_allocObject(v98, v103 + v101, v102 | 7);
    v177 = xmmword_1006A3C00;
    *(_OWORD *)(v105 + 16) = xmmword_1006A3C00;
    v198 = (_QWORD *)v191[13];
    v191 = v60;
    v106 = v193;
    ((void (*)(char *, _QWORD, uint64_t))v198)(v193, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:), v196);
    v107 = (char *)v92;
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v106, v64);
    v202 = (_QWORD *)v105;
    v108 = sub_10001A630(&qword_1008482E8);
    swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
    *(_QWORD *)(v92 + 32) = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v97, &v202);
    v109 = (uint64_t (*)(char *, _QWORD, uint64_t))v190;
    v110 = ((uint64_t (*)(char *, _QWORD, uint64_t))v190)(v94, enum case for REMSmartListSection.PredefinedSectionType.Today.todayAllDay(_:), v95);
    v175 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v110);
    v111 = v94;
    v112 = v185;
    ((void (*)(char *, uint64_t))v185)(v111, v95);
    v113 = swift_allocObject(v194, v187, v104);
    *(_OWORD *)(v113 + 16) = v177;
    v114 = v196;
    ((void (*)(char *, _QWORD, uint64_t))v198)(v106, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:), v196);
    v115 = v106;
    v116 = v191;
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v115, v184);
    v202 = (_QWORD *)v113;
    v117 = *(unsigned int *)(v108 + 48);
    v118 = *(unsigned __int16 *)(v108 + 52);
    v187 = v108;
    swift_allocObject(v108, v117, v118);
    v119 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v175, &v202);
    v193 = v107;
    *((_QWORD *)v107 + 5) = v119;
    v120 = v179;
    v121 = v109(v179, enum case for REMSmartListSection.PredefinedSectionType.Today.todayNonAllDay(_:), v95);
    v190 = (char *)REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v121);
    ((void (*)(char *, uint64_t))v112)(v120, v95);
    v122 = swift_allocObject(v194, v103 + 3 * v186, v176);
    *(_OWORD *)(v122 + 16) = xmmword_1006A3C20;
    v123 = (void (*)(char *, _QWORD, uint64_t))v198;
    ((void (*)(char *, _QWORD, uint64_t))v198)(v195, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:), v114);
    if (v116[2])
    {
      v124 = sub_1002C67EC(2u);
      v125 = v182;
      v126 = v181;
      if ((v127 & 1) != 0)
      {
        v128 = *(_QWORD **)(v116[7] + 8 * v124);
        swift_bridgeObjectRetain(v128);
      }
      else
      {
        v128 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      v128 = _swiftEmptyArrayStorage;
      v125 = v182;
      v126 = v181;
    }
    v146 = v187;
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v195, v128);
    v123(v126, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:), v114);
    if (v116[2] && (v147 = sub_1002C67EC(3u), (v148 & 1) != 0))
    {
      v149 = *(_QWORD **)(v116[7] + 8 * v147);
      swift_bridgeObjectRetain(v149);
    }
    else
    {
      v149 = _swiftEmptyArrayStorage;
    }
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v126, v149);
    v123(v125, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:), v114);
    if (v116[2])
    {
      v150 = sub_1002C67EC(4u);
      v151 = v192;
      if ((v152 & 1) != 0)
      {
        v153 = *(_QWORD **)(v116[7] + 8 * v150);
        swift_bridgeObjectRetain(v153);
      }
      else
      {
        v153 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      v153 = _swiftEmptyArrayStorage;
      v151 = v192;
    }
    swift_bridgeObjectRelease();
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v125, v153);
    v202 = (_QWORD *)v122;
    swift_allocObject(v146, *(unsigned int *)(v146 + 48), *(unsigned __int16 *)(v146 + 52));
    v154 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v190, &v202);
    v155 = (uint64_t)v193;
    *((_QWORD *)v193 + 6) = v154;
    v202 = (_QWORD *)v155;
    specialized Array._endMutation()(v154);
    v156 = (uint64_t)v202;
    if (v183)
    {
      v157 = v183;
      v158 = objc_msgSend(v157, "sectionIDsOrderingAsData");
      if (v158)
      {
        v159 = v158;
        v160 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v158);
        v162 = v161;

        sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
        static REMJSONRepresentable.fromJSONData(_:)(&v202, v160, v162);
        if (v151)
        {
          sub_1000A71C8(v160, v162);

          if (qword_1008373C0 != -1)
            swift_once(&qword_1008373C0, sub_1003B9294);
          v164 = type metadata accessor for Logger(0);
          sub_10001AAA8(v164, (uint64_t)qword_100848298);
          swift_errorRetain(v151);
          v165 = swift_errorRetain(v151);
          v166 = Logger.logObject.getter(v165);
          v167 = static os_log_type_t.error.getter(v166);
          if (os_log_type_enabled(v166, v167))
          {
            v168 = (uint8_t *)swift_slowAlloc(12, -1);
            v169 = swift_slowAlloc(32, -1);
            v202 = (_QWORD *)v169;
            *(_DWORD *)v168 = 136446210;
            swift_getErrorValue(v151, v201, v200);
            v170 = Error.rem_errorDescription.getter(v200[1], v200[2]);
            v199 = sub_10001A820(v170, v171, (uint64_t *)&v202);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200);
            swift_bridgeObjectRelease();
            swift_errorRelease(v151);
            swift_errorRelease(v151);
            _os_log_impl((void *)&_mh_execute_header, v166, v167, "today data view error upon reordering groups by user-defined sections ordering {error: %{public}s}", v168, 0xCu);
            swift_arrayDestroy(v169, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v169, -1, -1);
            swift_slowDealloc(v168, -1, -1);

            swift_errorRelease(v151);
          }
          else
          {
            swift_errorRelease(v151);
            swift_errorRelease(v151);
            swift_errorRelease(v151);

          }
        }
        else
        {
          sub_1000A71C8(v160, v162);
          v163 = v202;
          v172 = REMOrderedIdentifierMap.reorder<A>(objects:)(v156, v146);

          swift_bridgeObjectRelease();
          v156 = v172;
        }
      }
      else
      {

      }
    }
    v132 = sub_1003B9034(v156);
    v145 = swift_bridgeObjectRelease();
  }
  else
  {
    v129 = sub_10001A630(&qword_100844558);
    v131 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group(0, v130) - 8);
    v132 = (_QWORD *)swift_allocObject(v129, ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ 5 * *(_QWORD *)(v131 + 72), *(unsigned __int8 *)(v131 + 80) | 7);
    *((_OWORD *)v132 + 1) = xmmword_1006A5140;
    v133 = (void (*)(char *, _QWORD, uint64_t))v191[13];
    v134 = v193;
    v135 = v196;
    v133(v193, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:), v196);
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v134, v64);
    v133(v134, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:), v135);
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v134, v67);
    v133(v190, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:), v135);
    if (v60[2] && (v136 = sub_1002C67EC(2u), (v137 & 1) != 0))
    {
      v138 = *(_QWORD **)(v60[7] + 8 * v136);
      swift_bridgeObjectRetain(v138);
    }
    else
    {
      v138 = _swiftEmptyArrayStorage;
    }
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v190, v138);
    v133(v192, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:), v135);
    if (v60[2] && (v139 = sub_1002C67EC(3u), (v140 & 1) != 0))
    {
      v141 = *(_QWORD **)(v60[7] + 8 * v139);
      swift_bridgeObjectRetain(v141);
    }
    else
    {
      v141 = _swiftEmptyArrayStorage;
    }
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v192, v141);
    v133(v194, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:), v135);
    if (v60[2] && (v142 = sub_1002C67EC(4u), (v143 & 1) != 0))
    {
      v144 = *(_QWORD **)(v60[7] + 8 * v142);
      swift_bridgeObjectRetain(v144);
    }
    else
    {
      v144 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)(v194, v144);
  }
  (*(void (**)(char *, uint64_t, __n128))(v188 + 8))(v197, v189, v145);
  return (uint64_t)v132;
}

uint64_t sub_1003BB918(uint64_t a1, void *a2, uint64_t a3, int64_t a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  NSObject *v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, unint64_t, uint64_t, __n128);
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  unint64_t v73;
  char v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  char *v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, _QWORD, uint64_t);
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  _QWORD *v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t result;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  NSObject *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  int64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD v160[3];
  char v161[16];
  uint64_t v162[2];

  v157 = a4;
  v146 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today(0, a5);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v145 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v156 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v148 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v147 = (char *)&v137 - v11;
  __chkstk_darwin(v12);
  v150 = (char *)&v137 - v13;
  __chkstk_darwin(v14);
  v158 = (char *)&v137 - v15;
  v16 = type metadata accessor for Calendar(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v20 - 8);
  v153 = v20;
  __chkstk_darwin(v20);
  v149 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v154 = (char *)&v137 - v23;
  v24 = type metadata accessor for REMFeatureFlags(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v25 + 104))(v28, enum case for REMFeatureFlags.todayReordering(_:), v24, v26);
  v30 = REMFeatureFlags.isEnabled.getter(v29);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  if ((v30 & 1) == 0 || !a2)
    goto LABEL_60;
  v31 = a2;
  v32 = -[NSObject sectionIDsOrderingAsData](v31, "sectionIDsOrderingAsData");
  if (!v32)
    goto LABEL_59;
  v33 = v32;
  v143 = v31;
  v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v36 = v35;

  sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
  static REMJSONRepresentable.fromJSONData(_:)(v162, v34, v36);
  v138 = 0;
  v37 = sub_1000A71C8(v34, v36);
  v137 = v162[0];
  static Calendar.current.getter(v37);
  Calendar.startOfDay(for:)(a1);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v38 = (_QWORD *)sub_1002AF94C((uint64_t)_swiftEmptyArrayStorage);
  v39 = v157;
  if ((unint64_t)v157 >> 62)
  {
    if (v157 < 0)
      v134 = v157;
    else
      v134 = v157 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v157);
    v40 = _CocoaArrayWrapper.endIndex.getter(v134);
  }
  else
  {
    v40 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v157);
  }
  v139 = a3;
  if (!v40)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    a3 = v139;
    v63 = *(_QWORD *)(v139 + 16);
    v64 = _swiftEmptyArrayStorage;
    if (v63)
    {
      v141 = (*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
      v65 = v139 + v141;
      v66 = *(_QWORD *)(v156 + 72);
      v67 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v156 + 16);
      v68 = swift_bridgeObjectRetain(v139);
      v155 = _swiftEmptyArrayStorage;
      v142 = _swiftEmptyArrayStorage;
      v157 = (int64_t)_swiftEmptyArrayStorage;
      v69 = v151;
      v140 = v66;
      do
      {
        v70 = v67(v158, v65, v69, v68);
        v71 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v70);
        v72 = v71;
        if (v38[2] && (v73 = sub_1002C6844(v71), (v74 & 1) != 0))
        {
          v75 = *(id *)(v38[7] + 8 * v73);

          v76 = objc_msgSend(v75, "displayDate");
          if (v76)
          {
            v77 = v76;
            v78 = a3;
            v79 = objc_msgSend(v76, "date");
            v80 = v149;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

            LOBYTE(v79) = static Date.< infix(_:_:)(v80, v154);
            (*(void (**)(char *, uint64_t))(v152 + 8))(v80, v153);
            if ((v79 & 1) != 0)
            {
              ((void (*)(char *, char *, uint64_t))v67)(v150, v158, v69);
              swift_isUniquelyReferenced_nonNull_native(v157);
              if ((v81 & 1) != 0)
              {
                a3 = v78;
                v82 = v157;
              }
              else
              {
                v82 = sub_1002C8478(0, *(_QWORD *)(v157 + 16) + 1, 1, v157);
                a3 = v78;
              }
              v84 = *(_QWORD *)(v82 + 16);
              v83 = *(_QWORD *)(v82 + 24);
              v66 = v140;
              if (v84 >= v83 >> 1)
                v82 = sub_1002C8478(v83 > 1, v84 + 1, 1, v82);
              *(_QWORD *)(v82 + 16) = v84 + 1;
              v157 = v82;
              v85 = (char *)(v82 + v141 + v84 * v66);
              v86 = v156;
              v87 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
              v88 = v150;
            }
            else if (objc_msgSend(v77, "isAllDay"))
            {
              ((void (*)(char *, char *, uint64_t))v67)(v147, v158, v69);
              swift_isUniquelyReferenced_nonNull_native(v155);
              a3 = v78;
              if ((v89 & 1) == 0)
                v155 = (_QWORD *)sub_1002C8478(0, v155[2] + 1, 1, (unint64_t)v155);
              v66 = v140;
              v90 = v155;
              v92 = v155[2];
              v91 = v155[3];
              if (v92 >= v91 >> 1)
                v90 = (_QWORD *)sub_1002C8478(v91 > 1, v92 + 1, 1, (unint64_t)v155);
              v90[2] = v92 + 1;
              v155 = v90;
              v85 = (char *)v90 + v141 + v92 * v66;
              v86 = v156;
              v87 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
              v88 = v147;
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v67)(v148, v158, v69);
              v93 = (unint64_t)v142;
              swift_isUniquelyReferenced_nonNull_native(v142);
              a3 = v78;
              if ((v94 & 1) == 0)
                v93 = sub_1002C8478(0, *(_QWORD *)(v93 + 16) + 1, 1, v93);
              v66 = v140;
              v142 = (_QWORD *)v93;
              v96 = *(_QWORD *)(v93 + 16);
              v95 = *(_QWORD *)(v93 + 24);
              if (v96 >= v95 >> 1)
                v142 = (_QWORD *)sub_1002C8478(v95 > 1, v96 + 1, 1, (unint64_t)v142);
              v97 = v142;
              v142[2] = v96 + 1;
              v85 = (char *)v97 + v141 + v96 * v66;
              v86 = v156;
              v87 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
              v88 = v148;
            }
            v69 = v151;
            v87(v85, v88, v151);

            (*(void (**)(char *, uint64_t))(v86 + 8))(v158, v69);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v156 + 8))(v158, v69);

          }
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v156 + 8))(v158, v69);
        }
        v65 += v66;
        --v63;
      }
      while (v63);
      swift_bridgeObjectRelease();
      v64 = (_QWORD *)v157;
    }
    else
    {
      v142 = _swiftEmptyArrayStorage;
      v155 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    v98 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v99 = swift_allocObject(v98, 56, 7);
    *(_OWORD *)(v99 + 16) = xmmword_1006AAD80;
    v100 = v144;
    v101 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v144 + 104);
    v103 = v145;
    v102 = v146;
    v104 = v101(v145, enum case for REMSmartListSection.PredefinedSectionType.Today.beforeToday(_:), v146);
    v105 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v104);
    v106 = *(void (**)(char *, uint64_t))(v100 + 8);
    v106(v103, v102);
    v162[0] = (uint64_t)v64;
    v107 = sub_10001A630(&qword_1008482F0);
    swift_allocObject(v107, *(unsigned int *)(v107 + 48), *(unsigned __int16 *)(v107 + 52));
    v157 = (int64_t)v64;
    swift_bridgeObjectRetain(v64);
    *(_QWORD *)(v99 + 32) = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v105, v162);
    v108 = v101(v103, enum case for REMSmartListSection.PredefinedSectionType.Today.todayAllDay(_:), v102);
    v109 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v108);
    v106(v103, v102);
    v110 = v155;
    v162[0] = (uint64_t)v155;
    swift_allocObject(v107, *(unsigned int *)(v107 + 48), *(unsigned __int16 *)(v107 + 52));
    swift_bridgeObjectRetain(v110);
    *(_QWORD *)(v99 + 40) = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v109, v162);
    v111 = v101(v103, enum case for REMSmartListSection.PredefinedSectionType.Today.todayNonAllDay(_:), v102);
    v112 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v111);
    v106(v103, v102);
    v113 = v142;
    v162[0] = (uint64_t)v142;
    swift_allocObject(v107, *(unsigned int *)(v107 + 48), *(unsigned __int16 *)(v107 + 52));
    swift_bridgeObjectRetain(v113);
    v114 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v112, v162);
    *(_QWORD *)(v99 + 48) = v114;
    v162[0] = v99;
    specialized Array._endMutation()(v114);
    v115 = v107;
    v116 = (void *)v137;
    v38 = v138;
    v117 = REMOrderedIdentifierMap.reorder<A>(objects:)(v162[0], v115);
    if (v38)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v118 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v152 + 8))(v154, v153, v118);
      if (qword_1008373C0 != -1)
        goto LABEL_75;
      goto LABEL_56;
    }
    v128 = v117;
    swift_bridgeObjectRelease();
    v162[0] = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v128 >> 62)
    {
      if (v128 < 0)
        v135 = v128;
      else
        v135 = v128 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v128);
      v129 = _CocoaArrayWrapper.endIndex.getter(v135);
      if (!v129)
        goto LABEL_71;
    }
    else
    {
      v129 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v128);
      if (!v129)
        goto LABEL_71;
    }
    if (v129 < 1)
    {
      __break(1u);
LABEL_86:
      v136 = sub_10001A630((uint64_t *)&unk_100844910);
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v136);
      __break(1u);
      return result;
    }
    if ((v128 & 0xC000000000000001) != 0)
    {
      v130 = 0;
      do
      {
        v131 = specialized _ArrayBuffer._getElementSlowPath(_:)(v130++, v128);
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter(&v159);
        swift_unknownObjectRelease(v131);
        sub_1001E23F0(v159);
      }
      while (v129 != v130);
    }
    else
    {
      v132 = 0;
      do
      {
        v133 = *(_QWORD *)(v128 + 8 * v132++ + 32);
        swift_retain();
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter(&v159);
        swift_release(v133);
        sub_1001E23F0(v159);
      }
      while (v129 != v132);
    }
LABEL_71:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    a3 = v162[0];
    (*(void (**)(char *, uint64_t))(v152 + 8))(v154, v153);
    return a3;
  }
  v155 = (_QWORD *)(v39 & 0xC000000000000001);
  v41 = 4;
  while (1)
  {
    v44 = v155
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41 - 4, v39)
        : *(id *)(v39 + 8 * v41);
    v45 = v44;
    v46 = v41 - 3;
    if (__OFADD__(v41 - 4, 1))
      break;
    a3 = v40;
    v47 = objc_msgSend(v44, "remObjectID");
    swift_isUniquelyReferenced_nonNull_native(v38);
    v49 = v48;
    v162[0] = (uint64_t)v38;
    v51 = sub_1002C6844(v47);
    v52 = v38[2];
    v53 = (v50 & 1) == 0;
    v54 = v52 + v53;
    if (__OFADD__(v52, v53))
      goto LABEL_73;
    v55 = v50;
    if (v38[3] >= v54)
    {
      if ((v49 & 1) != 0)
      {
        v38 = (_QWORD *)v162[0];
        if ((v50 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_1002D6928();
        v38 = (_QWORD *)v162[0];
        if ((v55 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_1002CD8B0(v54, v49);
      v56 = sub_1002C6844(v47);
      if ((v55 & 1) != (v57 & 1))
        goto LABEL_86;
      v51 = v56;
      v38 = (_QWORD *)v162[0];
      if ((v55 & 1) != 0)
      {
LABEL_8:
        v42 = v38[7];
        v43 = 8 * v51;

        *(_QWORD *)(v42 + v43) = v45;
        goto LABEL_9;
      }
    }
    v38[(v51 >> 6) + 8] |= 1 << v51;
    v58 = 8 * v51;
    *(_QWORD *)(v38[6] + v58) = v47;
    *(_QWORD *)(v38[7] + v58) = v45;
    v59 = v38[2];
    v60 = __OFADD__(v59, 1);
    v61 = v59 + 1;
    if (v60)
      goto LABEL_74;
    v38[2] = v61;
    v62 = v47;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v41;
    v40 = a3;
    v39 = v157;
    if (v46 == a3)
      goto LABEL_25;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_once(&qword_1008373C0, sub_1003B9294);
LABEL_56:
  v119 = type metadata accessor for Logger(0);
  sub_10001AAA8(v119, (uint64_t)qword_100848298);
  swift_errorRetain(v38);
  v120 = swift_errorRetain(v38);
  v31 = Logger.logObject.getter(v120);
  v121 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v121))
  {
    v122 = v38;
    v123 = (uint8_t *)swift_slowAlloc(12, -1);
    v124 = swift_slowAlloc(32, -1);
    v162[0] = v124;
    *(_DWORD *)v123 = 136446210;
    swift_getErrorValue(v122, v161, v160);
    v125 = Error.rem_errorDescription.getter(v160[1], v160[2]);
    v159 = sub_10001A820(v125, v126, v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v160);
    swift_bridgeObjectRelease();
    swift_errorRelease(v122);
    swift_errorRelease(v122);
    _os_log_impl((void *)&_mh_execute_header, v31, v121, "today data view error upon reordering reminders by user-defined sections ordering {error: %{public}s}", v123, 0xCu);
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v124, -1, -1);
    swift_slowDealloc(v123, -1, -1);

    swift_errorRelease(v122);
    goto LABEL_60;
  }

  swift_errorRelease(v38);
  swift_errorRelease(v38);
  swift_errorRelease(v38);
LABEL_59:

LABEL_60:
  swift_bridgeObjectRetain(a3);
  return a3;
}

uint64_t sub_1003BC6C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Subtasks;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *Configuration;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, NSObject *);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  __n128 v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  uint64_t v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, NSObject *);
  __n128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __n128 v84;
  NSObject *v85;
  id v86;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, NSObject *);
  void *v120;
  char *v121;
  _QWORD *v122;

  v101 = a2;
  v120 = (void *)a1;
  v95 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType(0);
  v94[1] = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v96 = (char *)v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v109 = *(_QWORD *)(Subtasks - 8);
  v110 = Subtasks;
  __chkstk_darwin(Subtasks);
  v108 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = _s10PredicatesOMa(0);
  __chkstk_darwin(v103);
  v104 = (char *)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v116 = *(_QWORD *)(v9 - 8);
  v117 = v9;
  __chkstk_darwin(v9);
  v107 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v111 = (char *)v94 - v12;
  v13 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v13);
  v15 = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  isa = Configuration[-1].isa;
  __chkstk_darwin(Configuration);
  v106 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v105 = (char *)v94 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)v94 - v22;
  v24 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v24);
  v97 = (uint64_t)v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v113 = (uint64_t)v94 - v27;
  __chkstk_darwin(v28);
  v112 = (uint64_t)v94 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)v94 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)v94 - v34;
  v37 = __chkstk_darwin(v36);
  v39 = (char *)v94 - v38;
  v118 = a3;
  v40 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v37);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v40);
  v41 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
  v114 = Configuration;
  v119 = v41;
  v41(v23, Configuration);
  v42 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v43 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104);
  v44(v35, v42, v43);
  swift_storeEnumTagMultiPayload(v35, v24, 0);
  sub_1004957D0((uint64_t)v15, (uint64_t)v35, (uint64_t)v39);
  v121 = v39;
  sub_1001D8AD8((uint64_t)v39, (uint64_t)v32);
  LODWORD(v15) = swift_getEnumCaseMultiPayload(v32, v24);
  sub_10001C744((uint64_t)v32, _s9UtilitiesO12SortingStyleOMa);
  v94[0] = v24;
  v102 = v23;
  if ((_DWORD)v15)
  {
    v44(v35, v42, v43);
    swift_storeEnumTagMultiPayload(v35, v24, 0);
    v46 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v45);
    v47 = v111;
    v42 = (uint64_t)v23;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v46);
    v48 = v114;
    v119(v23, v114);
    sub_10049ADC0((uint64_t)v35, (uint64_t)v47, 0);
    v50 = v49;
    (*(void (**)(void *, uint64_t))(v116 + 8))(v47, v117);
    sub_10001C744((uint64_t)v35, _s9UtilitiesO12SortingStyleOMa);
    v51 = v120;
    v52 = (uint64_t)v121;
    v53 = v48;
  }
  else
  {
    v50 = 0;
    v51 = v120;
    v52 = (uint64_t)v121;
    v53 = v114;
  }
  v54 = (uint64_t)v115;
  v55 = v113;
  v56 = (char *)REMSmartListTypeToday;
  v57 = sub_1004961B4(v113, v51, REMSmartListTypeToday, v52);
  if (v54)
  {
    swift_bridgeObjectRelease();
    sub_10001C744(v52, _s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    v111 = v56;
    v114 = v57;
    sub_1003BFBD0(v55, v112);
    sub_10001A630(&qword_1008466B0);
    v58 = (uint64_t)v104;
    v59 = v102;
    v61 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v60);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v61);
    v62 = ((uint64_t (*)(char *, NSObject *))v119)(v59, v53);
    REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter(v62);
    swift_storeEnumTagMultiPayload(v58, v103, 13);
    sub_10000D2C0();
    v115 = (void *)v63;
    v64 = sub_10001C744(v58, _s10PredicatesOMa);
    v65 = REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter(v64);
    v113 = v50;
    if ((v65 & 1) != 0)
    {
      v67 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v68 = swift_allocObject(v67, 56, 7);
      *(_OWORD *)(v68 + 16) = xmmword_1006AAD80;
      *(_QWORD *)(v68 + 32) = swift_getKeyPath(&unk_1006B8FD0);
      *(_QWORD *)(v68 + 40) = swift_getKeyPath(&unk_1006B9018);
      KeyPath = swift_getKeyPath(&unk_1006B9058);
      *(_QWORD *)(v68 + 48) = KeyPath;
      v122 = (_QWORD *)v68;
      specialized Array._endMutation()(KeyPath);
      v70 = v122;
    }
    else
    {
      v70 = _swiftEmptyArrayStorage;
    }
    v72 = (uint64_t)v107;
    v71 = (uint64_t)v108;
    v73 = v105;
    v74 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v66);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v74);
    v75 = v119;
    v76.n128_f64[0] = ((double (*)(char *, NSObject *))v119)(v73, v53);
    v77 = v106;
    v78 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v76);
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v78);
    v75(v77, v53);
    v79 = (uint64_t)v120;
    v80 = sub_100496780((uint64_t)v120, (uint64_t)v115, v112, 0, v113, v72, v71, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v70, 0, 0);
    v82 = v81;
    v83 = v80;
    swift_bridgeObjectRelease();
    v84 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v109 + 8))(v71, v110, v84);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v72, v117);
    v85 = v114;
    v86 = sub_10049E31C(v114, v111, v79, v101);
    v88 = REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter(v86);
    v89 = v115;
    if ((v88 & 1) == 0)
    {
      v91 = v97;
      sub_1001D8AD8((uint64_t)v121, v97);
      v92 = (char *)&loc_1003BCF0C + 4 * byte_1006B8F80[swift_getEnumCaseMultiPayload(v91, v94[0])];
      __asm { BR              X10 }
    }
    v90 = (uint64_t)v98;
    REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter(v88);
    v42 = sub_1003BA8A0(v90, v85, v83, v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v90, v100);
    v93 = (uint64_t)v121;
    sub_10001C744(v112, _s9UtilitiesO12SortingStyleOMa);
    sub_10001C744(v93, _s9UtilitiesO12SortingStyleOMa);
  }
  return v42;
}

uint64_t sub_1003BD128(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  Class v18;
  id v19;
  NSString *(__cdecl **v20)(SEL);
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  Class isa;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  NSString v30;
  Class v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  Class v37;
  uint64_t v38;
  NSString v39;
  Class v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  unsigned __int8 v62;
  void *v63;
  void *v64;
  id v65;
  _QWORD *v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD *, _QWORD);
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  Class v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  Class v84;
  void *v85;
  id v86;
  id v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  id v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  Class v95;
  id v96;
  uint64_t result;
  uint64_t v98;
  id v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD v106[4];
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  _QWORD *v110;

  v104 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v105 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
    goto LABEL_2;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  v21 = (*(uint64_t (**)(uint64_t *, unint64_t))(v11 + 88))(v14, v10);
  if (v21 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t *, unint64_t))(v11 + 96))(v14, v10);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v14, v6);
    v22 = sub_10001A630((uint64_t *)&unk_100839E80);
    v23 = swift_allocObject(v22, 64, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 32) = 0xD000000000000018;
    *(_QWORD *)(v23 + 40) = 0x8000000100702540;
    v24 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v26 = (void *)objc_opt_self(NSPredicate);
    v27 = objc_msgSend(v26, "predicateWithFormat:argumentArray:", v24, isa);

    v28 = swift_allocObject(v22, 96, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 32) = 0xD00000000000001DLL;
    *(_QWORD *)(v28 + 40) = 0x8000000100702560;
    *(_QWORD *)(v28 + 88) = v6;
    v29 = sub_1000087F0((_QWORD *)(v28 + 64));
    (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v29, v9, v6);
    v30 = String._bridgeToObjectiveC()();
    v31 = Array._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(v26, "predicateWithFormat:argumentArray:", v30, v31, swift_bridgeObjectRelease().n128_f64[0]);

    v33 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v34 = swift_allocObject(v33, 48, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1006A8550;
    *(_QWORD *)(v34 + 32) = v27;
    *(_QWORD *)(v34 + 40) = v32;
    v106[0] = v34;
    specialized Array._endMutation()(v34);
    sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
    v35 = v27;
    v36 = v32;
    v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v20 = &NSStringFromSelector_ptr;
    v19 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "orPredicateWithSubpredicates:", v37);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_41;
  }
  if (v21 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, unint64_t))(v11 + 96))(v14, v10);
    v38 = *v14;
    v100 = sub_10001A630((uint64_t *)&unk_100839E80);
    v10 = swift_allocObject(v100, 64, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 32) = 0xD000000000000018;
    *(_QWORD *)(v10 + 40) = 0x8000000100702540;
    v39 = String._bridgeToObjectiveC()();
    v40 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v99 = (id)objc_opt_self(NSPredicate);
    v101 = objc_msgSend(v99, "predicateWithFormat:argumentArray:", v39, v40);

    v41 = v38 & 0xC000000000000001;
    if ((v38 & 0xC000000000000001) != 0)
    {
      if (v38 < 0)
        v42 = v38;
      else
        v42 = v38 & 0xFFFFFFFFFFFFFF8;
      v43 = __CocoaSet.count.getter(v42);
      v44 = v104;
      if (v43)
      {
        v45 = __CocoaSet.count.getter(v42);
        if (!v45)
        {
          swift_bridgeObjectRelease();
          v46 = _swiftEmptyArrayStorage;
LABEL_40:
          v75 = swift_allocObject(v100, 96, 7);
          *(_OWORD *)(v75 + 16) = xmmword_1006A3C40;
          *(_QWORD *)(v75 + 56) = &type metadata for String;
          *(_QWORD *)(v75 + 32) = 0xD000000000000019;
          *(_QWORD *)(v75 + 40) = 0x80000001006F4F50;
          *(_QWORD *)(v75 + 88) = sub_10001A630(&qword_10083DA88);
          *(_QWORD *)(v75 + 64) = v46;
          v76 = String._bridgeToObjectiveC()();
          v77 = Array._bridgeToObjectiveC()().super.isa;
          v78 = objc_msgSend(v99, "predicateWithFormat:argumentArray:", v76, v77, swift_bridgeObjectRelease().n128_f64[0]);

          v79 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v80 = swift_allocObject(v79, 48, 7);
          *(_OWORD *)(v80 + 16) = xmmword_1006A8550;
          v81 = v101;
          *(_QWORD *)(v80 + 32) = v101;
          *(_QWORD *)(v80 + 40) = v78;
          v106[0] = v80;
          specialized Array._endMutation()(v80);
          sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
          v82 = v81;
          v83 = v78;
          v84 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v20 = &NSStringFromSelector_ptr;
          v19 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "orPredicateWithSubpredicates:", v84);

          goto LABEL_41;
        }
        goto LABEL_17;
      }
    }
    else
    {
      v45 = *(_QWORD *)(v38 + 16);
      v44 = v104;
      if (v45)
      {
LABEL_17:
        v110 = _swiftEmptyArrayStorage;
        sub_1001C1BE4(0, v45 & ~(v45 >> 63), 0);
        if (v41)
        {
          if (v38 < 0)
            v47 = v38;
          else
            v47 = v38 & 0xFFFFFFFFFFFFFF8;
          v48 = __CocoaSet.startIndex.getter(v47);
          v50 = 1;
        }
        else
        {
          v48 = sub_100364E8C(v38);
          v50 = v51 & 1;
        }
        v107 = v48;
        v108 = v49;
        v109 = v50;
        if ((v45 & 0x8000000000000000) == 0)
        {
          v52 = v38 & 0xFFFFFFFFFFFFFF8;
          if (v38 < 0)
            v52 = v38;
          v102 = v4;
          v103 = v52;
          do
          {
            while (1)
            {
              sub_100364654(v107, v108, v109, v38);
              v64 = v63;
              v65 = objc_msgSend(v63, "uuid");
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v65);

              v66 = v110;
              swift_isUniquelyReferenced_nonNull_native(v110);
              if ((v67 & 1) == 0)
              {
                sub_1001C1BE4(0, v66[2] + 1, 1);
                v66 = v110;
              }
              v10 = v66[2];
              v68 = v66[3];
              if (v10 >= v68 >> 1)
              {
                sub_1001C1BE4(v68 > 1, v10 + 1, 1);
                v66 = v110;
              }
              v66[2] = v10 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v66+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v10, v105, v44);
              v110 = v66;
              if (v41)
                break;
              v53 = v107;
              v54 = v108;
              v55 = v109;
              v56 = sub_10036456C(v107, v108, v109, v38);
              v58 = v57;
              v60 = v59;
              v61 = v55;
              v44 = v104;
              sub_1000E515C(v53, v54, v61);
              v107 = v56;
              v108 = v58;
              v62 = v60 & 1;
              v41 = 0;
              v4 = v102;
              v109 = v62;
              if (!--v45)
                goto LABEL_39;
            }
            if ((v109 & 1) == 0)
              goto LABEL_49;
            v69 = __CocoaSet.Index.handleBitPattern.getter(v107, v108);
            if (v69)
            {
              swift_isUniquelyReferenced_nonNull_native(v69);
              v71 = v70;
            }
            else
            {
              v71 = 1;
            }
            v72 = sub_10001A630(&qword_10083FC38);
            v73 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v106, v72);
            __CocoaSet.formIndex(after:isUnique:)(v74, v71, v103);
            v73(v106, 0);
            --v45;
          }
          while (v45);
LABEL_39:
          sub_1000E515C(v107, v108, v109);
          swift_bridgeObjectRelease();
          v46 = v110;
          goto LABEL_40;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
        __break(1u);
        return result;
      }
    }
    swift_bridgeObjectRelease();
    v20 = &NSStringFromSelector_ptr;
    v19 = v101;
    goto LABEL_41;
  }
  if (v21 != enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    v20 = &NSStringFromSelector_ptr;
    if (v21 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      v19 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 1);
      goto LABEL_41;
    }
    goto LABEL_50;
  }
LABEL_2:
  v15 = sub_10001A630((uint64_t *)&unk_100839E80);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 32) = 0xD000000000000018;
  *(_QWORD *)(v16 + 40) = 0x8000000100702540;
  v17 = String._bridgeToObjectiveC()();
  v18 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v17, v18);

  v20 = &NSStringFromSelector_ptr;
LABEL_41:
  v85 = (void *)sub_10020A800(0x65722E6D72616C61, 0xEE007265646E696DLL, 0);
  v106[0] = _swiftEmptyArrayStorage;
  v86 = v85;
  v87 = v19;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
  v89 = *(_QWORD *)((v106[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v88 = *(_QWORD *)((v106[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v89 >= v88 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1);
  v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v87);
  specialized Array._endMutation()(v90);
  if (v85)
  {
    v91 = v86;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v91);
    v93 = *(_QWORD *)((v106[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v92 = *(_QWORD *)((v106[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v93 >= v92 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1);
    v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, v91);
    specialized Array._endMutation()(v94);
  }

  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v95 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v96 = objc_msgSend((id)objc_opt_self(v20[109]), "andPredicateWithSubpredicates:", v95);

  return (uint64_t)v96;
}

uint64_t sub_1003BDD0C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char **i;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  NSString v21;
  id v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  unint64_t v29;

  v2 = v1;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return 0;
  }
LABEL_16:
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(a1);
  if (!v4)
    return 0;
LABEL_3:
  v27 = v2;
  v5 = 0;
  v6 = &selRef_isConcealed;
  for (i = &selRef_isConcealed; ; i = &selRef_isConcealed)
  {
    v8 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1)
       : *(id *)(a1 + 8 * v5 + 32);
    v9 = v8;
    objc_msgSend(v8, v6[101], v27);
    v11 = v10;
    objc_msgSend(v9, "longitude");
    v13 = v12;
    objc_msgSend(v9, i[389]);
    v15 = v14;
    v16 = objc_msgSend(v9, "locationUID");
    if (v16)
    {
      v17 = v16;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

    }
    else
    {
      v28 = 0;
      v29 = 0xE000000000000000;
      objc_msgSend(v9, v6[101]);
      Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      objc_msgSend(v9, "longitude");
      Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      objc_msgSend(v9, i[389]);
      Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v19 = v29;
    }
    v20 = objc_allocWithZone((Class)CLCircularRegion);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v22 = objc_msgSend(v20, "initWithCenter:radius:identifier:", v21, v11, v13, v15);

    v2 = (void *)REMStructuredLocation.clCircularRegion.getter();
    v23 = CLCircularRegion.overlaps(_:)((CLCircularRegion)v2);

    if (!v23)
      break;
    v24 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    ++v5;
    v6 = &selRef_isConcealed;
    if (v24 == v4)
      return 0;
  }
  return v5;
}

uint64_t sub_1003BDF6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  char **i;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  id v22;
  NSString v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  swift_bridgeObjectRetain(*a1);
  v4 = sub_1003BDD0C(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v47 = v1;
  if (v1)
    return v4;
  if ((v6 & 1) == 0)
  {
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_61;
    v6 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_62:
      if (v6 < 0)
        v43 = v6;
      else
        v43 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v44 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease();
      if (v7 != v44)
        goto LABEL_6;
    }
    else if (v7 != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v7 = v4 + 5;
      v6 = (uint64_t)&selRef_isConcealed;
      v8 = &selRef_isConcealed;
      for (i = &selRef_isConcealed; ; i = &selRef_isConcealed)
      {
        v10 = v7 - 4;
        v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v11);
        }
        else
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          if (v10 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_52;
          v12 = *(id *)(v11 + 8 * v7);
        }
        v13 = v12;
        objc_msgSend(v12, *(SEL *)(v6 + 808), v47);
        v15 = v14;
        objc_msgSend(v13, v8[121]);
        v17 = v16;
        objc_msgSend(v13, i[389]);
        v19 = v18;
        v20 = objc_msgSend(v13, "locationUID");
        if (v20)
        {
          v21 = v20;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v20);

        }
        else
        {
          v48[0] = 0;
          v48[1] = 0xE000000000000000;
          objc_msgSend(v13, *(SEL *)(v6 + 808));
          Double.write<A>(to:)(v48, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          objc_msgSend(v13, v8[121]);
          Double.write<A>(to:)(v48, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          objc_msgSend(v13, i[389]);
          Double.write<A>(to:)(v48, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        }
        v22 = objc_allocWithZone((Class)CLCircularRegion);
        v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v24 = objc_msgSend(v22, "initWithCenter:radius:identifier:", v23, v15, v17, v19);

        v25 = (void *)REMStructuredLocation.clCircularRegion.getter();
        v6 = CLCircularRegion.overlaps(_:)((CLCircularRegion)v25);

        if ((v6 & 1) != 0)
          break;
LABEL_35:
        v36 = v7 - 3;
        if (__OFADD__(v10, 1))
          goto LABEL_53;
        v37 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v37 < 0)
            v40 = *a1;
          else
            v40 = v37 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v38 = _CocoaArrayWrapper.endIndex.getter(v40);
          swift_bridgeObjectRelease();
        }
        else
        {
          v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v7;
        v39 = v36 == v38;
        v6 = 0x100828000;
        v8 = &selRef_isConcealed;
        if (v39)
          return v4;
      }
      if (v10 == v4)
      {
LABEL_34:
        if (__OFADD__(v4++, 1))
          goto LABEL_54;
        goto LABEL_35;
      }
      v6 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *a1);
        v6 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_20:
          if ((v10 & 0x8000000000000000) != 0)
            goto LABEL_57;
          if (v10 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_58;
          v27 = *(id *)(v6 + 8 * v7);
          goto LABEL_23;
        }
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_55;
        if (v4 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_56;
        v26 = *(id *)(v6 + 8 * v4 + 32);
        if ((v6 & 0xC000000000000001) == 0)
          goto LABEL_20;
      }
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v6);
      v6 = *a1;
LABEL_23:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v6);
      *a1 = v6;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v6 < 0 || (v6 & 0x4000000000000000) != 0)
      {
        v6 = sub_1001CEBEC(v6);
        *a1 = v6;
      }
      v29 = *(void **)((v6 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v27;

      specialized Array._endMutation()(v30);
      v6 = *a1;
      v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v6;
      if (!v31 || v6 < 0 || (v6 & 0x4000000000000000) != 0)
      {
        v6 = sub_1001CEBEC(v6);
        *a1 = v6;
      }
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_59;
      v32 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v10 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_60;
      v33 = *(void **)(v32 + 8 * v7);
      *(_QWORD *)(v32 + 8 * v7) = v26;

      v6 = (uint64_t)a1;
      specialized Array._endMutation()(v34);
      goto LABEL_34;
    }
    return v4;
  }
  v41 = *a1;
  if (!((unint64_t)*a1 >> 62))
    return *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v41 < 0)
    v45 = *a1;
  else
    v45 = v41 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v46 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_1003BE3FC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *log;
  id v24;
  uint64_t v25;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return 0;
  }
LABEL_24:
  if (a1 < 0)
    v21 = a1;
  else
    v21 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
LABEL_3:
  for (i = 0; ; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v6 = *(id *)(a1 + 8 * i + 32);
    v7 = v6;
    v8 = objc_msgSend(v6, "alarm");
    v9 = v8;
    if (!v8 || (v10 = objc_msgSend(v8, "reminder"), v9, !v10))
    {

      return i;
    }
    if (!a2)
      break;
    v11 = objc_msgSend(a2, "evaluateWithObject:", v10);

    if ((v11 & 1) == 0)
      return i;
    v12 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v12 == v4)
      return 0;
  }
  if (qword_100837130 != -1)
    swift_once(&qword_100837130, sub_100303A74);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100844980);
  v14 = v10;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    log = v15;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    v24 = v14;
    v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    *v18 = v10;

    _os_log_impl((void *)&_mh_execute_header, log, v16, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", v17, 0xCu);
    v20 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1003BE6E8(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  NSObject *v46;
  id v47;

  swift_bridgeObjectRetain(*a1);
  v47 = a2;
  v6 = sub_1003BE3FC(v5, a2);
  v8 = v7;
  v9 = swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) != 0)
  {
    v8 = *a1;
    if ((unint64_t)*a1 >> 62)
      goto LABEL_77;
    return *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    if (v8 < 0)
      v41 = v8;
    else
      v41 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    v9 = swift_bridgeObjectRelease();
    if (v10 != v42)
      goto LABEL_6;
    return v6;
  }
  v8 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_66;
  if (v10 == *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    return v6;
LABEL_6:
  v11 = v6 + 5;
  v9.n128_u64[0] = 138412290;
  v45 = v9;
  while (1)
  {
    v12 = v11 - 4;
    v13 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v13);
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v14 = *(id *)(v13 + 8 * v11);
    }
    v15 = v14;
    v16 = -[NSObject alarm](v14, "alarm", *(_OWORD *)&v45);
    if (!v16)
      goto LABEL_45;
    v8 = (uint64_t)v16;
    v17 = v6;
    v18 = objc_msgSend(v16, "reminder");

    if (!v18)
    {
      v6 = v17;
LABEL_45:

      goto LABEL_46;
    }
    if (!v47)
    {
      if (qword_100837130 != -1)
        swift_once(&qword_100837130, sub_100303A74);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_100844980);
      v30 = v18;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.fault.getter();
      v8 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        v46 = v30;
        v33 = swift_slowAlloc(12, -1);
        v34 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v33 = v45.n128_u32[0];
        *(_QWORD *)(v33 + 4) = v46;
        *v34 = v18;
        v35 = v34;
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v8, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", (uint8_t *)v33, 0xCu);
        v36 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v35, 1, v36);
        swift_slowDealloc(v35, -1, -1);
        v37 = v33;
        v30 = v46;
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {

        v15 = v31;
        v31 = v30;
      }
      v6 = v17;

      v15 = v31;
      goto LABEL_45;
    }
    v8 = (uint64_t)objc_msgSend(v47, "evaluateWithObject:", v18);

    if ((v8 & 1) == 0)
    {
      v6 = v17;
      goto LABEL_46;
    }
    if (v12 == v17)
      goto LABEL_34;
    v19 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, *a1);
      v19 = *a1;
      if ((*a1 & 0xC000000000000001) == 0)
        goto LABEL_20;
      goto LABEL_57;
    }
    if ((v17 & 0x8000000000000000) != 0)
      break;
    if (v17 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_72;
    v20 = *(id *)(v19 + 8 * v17 + 32);
    if ((v19 & 0xC000000000000001) == 0)
    {
LABEL_20:
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_73;
      if (v12 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_74;
      v21 = *(id *)(v19 + 8 * v11);
      goto LABEL_23;
    }
LABEL_57:
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v19);
    v19 = *a1;
LABEL_23:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v19);
    *a1 = v19;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
    {
      v19 = sub_1001CEBEC(v19);
      *a1 = v19;
    }
    v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x20);
    *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v17 + 0x20) = v21;

    specialized Array._endMutation()(v24);
    v8 = *a1;
    v25 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
    *a1 = v8;
    if (!v25 || v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      v8 = sub_1001CEBEC(v8);
      *a1 = v8;
    }
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_75;
    v26 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v12 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_76;
    v27 = *(void **)(v26 + 8 * v11);
    *(_QWORD *)(v26 + 8 * v11) = v20;

    specialized Array._endMutation()(v28);
LABEL_34:
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_64;
LABEL_46:
    v10 = v11 - 3;
    if (__OFADD__(v12, 1))
      goto LABEL_63;
    v8 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
      if (v8 < 0)
        v39 = *a1;
      else
        v39 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a1);
      v38 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v11;
    if (v10 == v38)
      return v6;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  if (v8 < 0)
    v43 = v8;
  else
    v43 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v44 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease();
  return v44;
}

void sub_1003BEBB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v6 = _s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init", a2);
  v8 = (void *)sub_1003BD128(a3, a4);
  objc_msgSend(v7, "setPredicate:", v8);

  v9 = sub_1000151B0(0, &qword_100840C10, off_1007D6670);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v7, "setEntity:", v10);

  sub_1001C1C48(0, 4, 0);
  JUMPOUT(0x1003BED58);
}

void sub_1003BED0C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  *(_QWORD *)(v1 - 88) = &type metadata for String;
  *(_QWORD *)(v1 - 112) = 0x64757469676E6F6CLL;
  *(_QWORD *)(v1 - 104) = 0xE900000000000065;
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if (v3 >= v2 >> 1)
  {
    sub_1001C1C48(v2 > 1, v3 + 1, 1);
    v0 = *(_QWORD *)(v1 - 72);
  }
  *(_QWORD *)(v0 + 16) = v3 + 1;
  sub_10001A6CC((_OWORD *)(v1 - 112), (_OWORD *)(v0 + 32 * v3 + 32));
  JUMPOUT(0x1003BEDC0);
}

char *sub_1003BF224(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v32 = (char *)&v31 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v29))
  {
    v31 = v3;
    v34 = a1 & 0xC000000000000001;
    v13 = (char *)_swiftEmptyArrayStorage;
    v14 = 4;
    v33 = a1;
    while (1)
    {
      v15 = v34 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      v3 = v15;
      v16 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      v17 = objc_msgSend(v15, "objectID");
      v18 = v17;
      if (*(_QWORD *)(a2 + 16) && (v19 = sub_1002C6690((uint64_t)v17), (v20 & 1) != 0))
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
      else
        v21 = 0;

      sub_100495DE8(v3, v21, 0, (uint64_t)v8);
      v22 = v37;
      v23 = v36;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v8, 1, v36) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_10083FB68);
      }
      else
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
        v25 = v32;
        v24(v32, v8, v23);
        v24(v35, v25, v23);
        swift_isUniquelyReferenced_nonNull_native(v13);
        if ((v26 & 1) == 0)
          v13 = (char *)sub_1002C8478(0, *((_QWORD *)v13 + 2) + 1, 1, (unint64_t)v13);
        v28 = *((_QWORD *)v13 + 2);
        v27 = *((_QWORD *)v13 + 3);
        if (v28 >= v27 >> 1)
          v13 = (char *)sub_1002C8478(v27 > 1, v28 + 1, 1, (unint64_t)v13);
        *((_QWORD *)v13 + 2) = v28 + 1;
        v24(&v13[((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v28], v35, v36);
      }
      a1 = v33;
      ++v14;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

_QWORD *sub_1003BF510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Configuration;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[16];
  uint64_t Subtasks;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v1 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v29[13] = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v29[15] = (char *)v29 - v4;
  v5 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v29[11] = *(_QWORD *)(v5 - 8);
  v29[12] = v5;
  __chkstk_darwin(v5);
  v29[10] = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  __chkstk_darwin(v33);
  v29[14] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v29[8] = (char *)v29 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)v29 - v11;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v14 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v29[9] = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v29[7] = (char *)v29 - v17;
  __chkstk_darwin(v18);
  v29[6] = (char *)v29 - v19;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v29 - v22;
  v24 = REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter(v21);
  if (v24)
  {
    v29[5] = v1;
    v31 = v24;
    v26 = REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter(v25);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v26);
    v27 = v31;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, Configuration);
    sub_1003BEBB8(v32, v27, (uint64_t)v12, 0);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003BFBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9UtilitiesO12SortingStyleOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

const char *sub_1003BFC1C()
{
  return "displayDateTimeZone";
}

void sub_1003BFC38(char *a1@<X8>)
{
  uint64_t v1;

  sub_1003BA46C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t _s3BinOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1003BFC9C + 4 * byte_1006B8F8B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1003BFCD0 + 4 * byte_1006B8F86[v4]))();
}

uint64_t sub_1003BFCD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003BFCD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003BFCE0);
  return result;
}

uint64_t sub_1003BFCEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003BFCF4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1003BFCF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003BFD00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3BinOMa()
{
  return &_s3BinON;
}

unint64_t sub_1003BFD20()
{
  unint64_t result;

  result = qword_1008482F8;
  if (!qword_1008482F8)
  {
    result = swift_getWitnessTable(&unk_1006B90CC, &_s3BinON);
    atomic_store(result, (unint64_t *)&qword_1008482F8);
  }
  return result;
}

uint64_t sub_1003BFD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848300);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848300);
  if (qword_100837680 != -1)
    swift_once(&qword_100837680, sub_1004A196C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872160);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003BFDF4(void (**a1)(uint64_t, char *, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  void (**v4)(uint64_t, char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  void (**v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  void *v43;
  __n128 v44;
  int64_t v45;
  void (**v46)(uint64_t, char *, uint64_t);
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (**v59)(uint64_t, char *, uint64_t);
  void (**v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  _QWORD *v65;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (***)(uint64_t, char *, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_100848480);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - v11;
  v13 = sub_1003C4240((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListInZREMCDOBJECT, &qword_1008376D0, (uint64_t)&qword_1008721D8, (uint64_t)sub_1004A7024);
  if (v1)
    return;
  v14 = v13;
  v60 = a1;
  v61 = v3;
  v65 = _swiftEmptyDictionarySingleton;
  if (v13 >> 62)
    goto LABEL_50;
  v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v57 = v6;
    v59 = v4;
    if (!v15)
      break;
    v62 = v12;
    v63 = v9;
    v4 = v60;
    v12 = (char *)(v14 & 0xC000000000000001);
    v6 = 4;
    while (1)
    {
      v16 = v12
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v14)
          : (char *)*(id *)(v14 + 8 * v6);
      v9 = v16;
      v17 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v18 = objc_autoreleasePoolPush();
      sub_1003C095C(v4, v9, (id *)&v65);
      objc_autoreleasePoolPop(v18);

      ++v6;
      if (v17 == v15)
      {
        swift_bridgeObjectRelease();
        v19 = v65;
        v6 = v57;
        v12 = v62;
        v9 = v63;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v14 < 0)
      v52 = v14;
    else
      v52 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v15 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v19 = _swiftEmptyDictionarySingleton;
LABEL_13:
  v20 = v19[8];
  v55 = v19 + 8;
  v21 = 1 << *((_BYTE *)v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v14 = v22 & v20;
  v56 = (unint64_t)(v21 + 63) >> 6;
  v54 = v56 - 1;
  v58 = v19;
  v23 = swift_bridgeObjectRetain(v19);
  v24 = 0;
  v25 = &qword_100848488;
  if (v14)
  {
LABEL_16:
    v26 = __clz(__rbit64(v14));
    v27 = (v14 - 1) & v14;
    v28 = v26 | (v24 << 6);
    v4 = v59;
LABEL_17:
    v29 = v58;
    ((void (*)(char *, unint64_t, uint64_t, __n128))v4[2])(v9, v58[6] + (_QWORD)v4[9] * v28, v61, v23);
    v30 = v29[7];
    v31 = sub_10001A630(v25);
    v32 = *(_QWORD *)(v30 + 8 * v28);
    *(_QWORD *)&v9[*(int *)(v31 + 48)] = v32;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 0, 1, v31);
    swift_bridgeObjectRetain(v32);
    v6 = v57;
    goto LABEL_27;
  }
  while (1)
  {
    v33 = v24 + 1;
    v4 = v59;
    if (__OFADD__(v24, 1))
      goto LABEL_49;
    if (v33 < v56)
    {
      v34 = v55[v33];
      if (v34)
        goto LABEL_21;
      v24 += 2;
      if (v33 + 1 >= v56)
      {
        v24 = v33;
      }
      else
      {
        v34 = v55[v24];
        if (v34)
        {
          ++v33;
LABEL_21:
          v27 = (v34 - 1) & v34;
          v28 = __clz(__rbit64(v34)) + (v33 << 6);
          v24 = v33;
          goto LABEL_17;
        }
        if (v33 + 2 < v56)
        {
          v34 = v55[v33 + 2];
          if (v34)
          {
            v33 += 2;
            goto LABEL_21;
          }
          v45 = v33 + 3;
          if (v33 + 3 >= v56)
          {
            v24 = v33 + 2;
          }
          else
          {
            v34 = v55[v45];
            if (v34)
            {
              v33 += 3;
              goto LABEL_21;
            }
            while (1)
            {
              v33 = v45 + 1;
              if (__OFADD__(v45, 1))
                __break(1u);
              if (v33 >= v56)
                break;
              v34 = v55[v33];
              ++v45;
              if (v34)
                goto LABEL_21;
            }
            v24 = v54;
          }
        }
      }
    }
    v35 = sub_10001A630(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 1, 1, v35);
    v27 = 0;
LABEL_27:
    sub_1003C43A4((uint64_t)v9, (uint64_t)v12);
    v36 = sub_10001A630(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v12, 1, v36) == 1)
      break;
    v62 = (char *)v27;
    v63 = (char *)v24;
    v37 = v25;
    v38 = v9;
    v39 = *(_QWORD *)&v12[*(int *)(v36 + 48)];
    v40 = v4[4];
    v41 = v4;
    v42 = v61;
    v40(v6, v12, v61);
    v43 = objc_autoreleasePoolPush();
    sub_1003C1390(v6, v60, v39);
    objc_autoreleasePoolPop(v43);
    v44 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v41[1])(v6, v42, v44);
    v9 = v38;
    v25 = v37;
    v14 = (int64_t)v62;
    v24 = (int64_t)v63;
    if (v62)
      goto LABEL_16;
  }
  swift_release(v58);
  v46 = v60;
  if (objc_msgSend(v60, "hasChanges"))
  {
    v64 = 0;
    v47 = objc_msgSend(v46, "save:", &v64);
    v48 = v64;
    if (v47)
    {
      v49 = v64;
      objc_msgSend(v46, "refreshAllObjects");
    }
    else
    {
      v50 = v64;
      _convertNSErrorToError(_:)(v48);

      swift_willThrow(v51);
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1003C03A8(void (**a1)(uint64_t, char *, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  void (**v4)(uint64_t, char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  void (**v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  void *v43;
  __n128 v44;
  int64_t v45;
  void (**v46)(uint64_t, char *, uint64_t);
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (**v59)(uint64_t, char *, uint64_t);
  void (**v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  _QWORD *v65;

  v3 = type metadata accessor for UUID(0);
  v4 = *(void (***)(uint64_t, char *, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_100848480);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - v11;
  v13 = sub_1003C4240((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListInZREMCDOBJECT, &qword_100837900, (uint64_t)&qword_100872280, (uint64_t)sub_10058B5F8);
  if (v1)
    return;
  v14 = v13;
  v60 = a1;
  v61 = v3;
  v65 = _swiftEmptyDictionarySingleton;
  if (v13 >> 62)
    goto LABEL_50;
  v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v57 = v6;
    v59 = v4;
    if (!v15)
      break;
    v62 = v12;
    v63 = v9;
    v4 = v60;
    v12 = (char *)(v14 & 0xC000000000000001);
    v6 = 4;
    while (1)
    {
      v16 = v12
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v14)
          : (char *)*(id *)(v14 + 8 * v6);
      v9 = v16;
      v17 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v18 = objc_autoreleasePoolPush();
      sub_1003C18E0(v4, v9, (id *)&v65);
      objc_autoreleasePoolPop(v18);

      ++v6;
      if (v17 == v15)
      {
        swift_bridgeObjectRelease();
        v19 = v65;
        v6 = v57;
        v12 = v62;
        v9 = v63;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v14 < 0)
      v52 = v14;
    else
      v52 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v15 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v19 = _swiftEmptyDictionarySingleton;
LABEL_13:
  v20 = v19[8];
  v55 = v19 + 8;
  v21 = 1 << *((_BYTE *)v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v14 = v22 & v20;
  v56 = (unint64_t)(v21 + 63) >> 6;
  v54 = v56 - 1;
  v58 = v19;
  v23 = swift_bridgeObjectRetain(v19);
  v24 = 0;
  v25 = &qword_100848488;
  if (v14)
  {
LABEL_16:
    v26 = __clz(__rbit64(v14));
    v27 = (v14 - 1) & v14;
    v28 = v26 | (v24 << 6);
    v4 = v59;
LABEL_17:
    v29 = v58;
    ((void (*)(char *, unint64_t, uint64_t, __n128))v4[2])(v9, v58[6] + (_QWORD)v4[9] * v28, v61, v23);
    v30 = v29[7];
    v31 = sub_10001A630(v25);
    v32 = *(_QWORD *)(v30 + 8 * v28);
    *(_QWORD *)&v9[*(int *)(v31 + 48)] = v32;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 0, 1, v31);
    swift_bridgeObjectRetain(v32);
    v6 = v57;
    goto LABEL_27;
  }
  while (1)
  {
    v33 = v24 + 1;
    v4 = v59;
    if (__OFADD__(v24, 1))
      goto LABEL_49;
    if (v33 < v56)
    {
      v34 = v55[v33];
      if (v34)
        goto LABEL_21;
      v24 += 2;
      if (v33 + 1 >= v56)
      {
        v24 = v33;
      }
      else
      {
        v34 = v55[v24];
        if (v34)
        {
          ++v33;
LABEL_21:
          v27 = (v34 - 1) & v34;
          v28 = __clz(__rbit64(v34)) + (v33 << 6);
          v24 = v33;
          goto LABEL_17;
        }
        if (v33 + 2 < v56)
        {
          v34 = v55[v33 + 2];
          if (v34)
          {
            v33 += 2;
            goto LABEL_21;
          }
          v45 = v33 + 3;
          if (v33 + 3 >= v56)
          {
            v24 = v33 + 2;
          }
          else
          {
            v34 = v55[v45];
            if (v34)
            {
              v33 += 3;
              goto LABEL_21;
            }
            while (1)
            {
              v33 = v45 + 1;
              if (__OFADD__(v45, 1))
                __break(1u);
              if (v33 >= v56)
                break;
              v34 = v55[v33];
              ++v45;
              if (v34)
                goto LABEL_21;
            }
            v24 = v54;
          }
        }
      }
    }
    v35 = sub_10001A630(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 1, 1, v35);
    v27 = 0;
LABEL_27:
    sub_1003C43A4((uint64_t)v9, (uint64_t)v12);
    v36 = sub_10001A630(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v12, 1, v36) == 1)
      break;
    v62 = (char *)v27;
    v63 = (char *)v24;
    v37 = v25;
    v38 = v9;
    v39 = *(_QWORD *)&v12[*(int *)(v36 + 48)];
    v40 = v4[4];
    v41 = v4;
    v42 = v61;
    v40(v6, v12, v61);
    v43 = objc_autoreleasePoolPush();
    sub_1003C2314(v6, v60, v39);
    objc_autoreleasePoolPop(v43);
    v44 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v41[1])(v6, v42, v44);
    v9 = v38;
    v25 = v37;
    v14 = (int64_t)v62;
    v24 = (int64_t)v63;
    if (v62)
      goto LABEL_16;
  }
  swift_release(v58);
  v46 = v60;
  if (objc_msgSend(v60, "hasChanges"))
  {
    v64 = 0;
    v47 = objc_msgSend(v46, "save:", &v64);
    v48 = v64;
    if (v47)
    {
      v49 = v64;
      objc_msgSend(v46, "refreshAllObjects");
    }
    else
    {
      v50 = v64;
      _convertNSErrorToError(_:)(v48);

      swift_willThrow(v51);
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1003C095C(void *a1, void *a2, id *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void (*v39)(char *, char *, uint64_t);
  void *v40;
  id v41;
  id *v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  ValueMetadata *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  ValueMetadata **v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  ValueMetadata *v67;
  uint64_t v68;
  void *v69;
  void (*v70)(_QWORD *@<X8>);
  uint64_t v71;
  id v72;
  NSObject *v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  id *v86;
  _QWORD *v87;
  __n128 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  void (*v103)(char *, uint64_t, uint64_t, uint64_t);
  id v104;
  uint64_t v105;
  void (*v106)(char *, char *, void *);
  id v107;
  id v108;
  id *v109;
  void *v110;
  ValueMetadata *v111;
  id v112;

  v109 = a3;
  v107 = (id)sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v107);
  v106 = (void (*)(char *, char *, void *))((char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (char *)&v101 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v101 - v14;
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v101 - v18;
  v112 = 0;
  v110 = a1;
  v20 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v112, v17);
  v21 = v112;
  if (!v20)
  {
    v54 = v112;
    _convertNSErrorToError(_:)(v21);

    swift_willThrow(v55);
    return;
  }
  v22 = v20;
  v105 = v9;
  v23 = type metadata accessor for REMCDListInZREMCDOBJECT();
  v24 = swift_dynamicCastClass(v22, v23);
  v25 = v22;
  if (!v24)
  {
    v56 = v21;

    if (qword_1008373C8 != -1)
      swift_once(&qword_1008373C8, sub_1003BFD64);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_100848300);
    v58 = a2;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(32, -1);
      v62 = (ValueMetadata **)swift_slowAlloc(8, -1);
      v63 = (void *)swift_slowAlloc(64, -1);
      v110 = v63;
      *(_DWORD *)v61 = 136315650;
      v111 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      v112 = v63;
      v64 = sub_10001A630((uint64_t *)&unk_100848490);
      v65 = String.init<A>(describing:)(&v111, v64);
      v111 = (ValueMetadata *)sub_10001A820(v65, v66, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 12) = 2080;
      v111 = (ValueMetadata *)sub_10001A820(0xD000000000000014, 0x8000000100702A50, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *(_WORD *)(v61 + 22) = 2114;
      v111 = v58;
      v67 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *v62 = v58;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "[%s|%s] Failed to process list of {listMOIDInZREMCDOBJECT: %{public}@} since its managed object could not be fetched", (uint8_t *)v61, 0x20u);
      v68 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v62, 1, v68);
      swift_slowDealloc(v62, -1, -1);
      v69 = v110;
      swift_arrayDestroy(v110, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

    }
    return;
  }
  v26 = (void *)v24;
  v27 = type metadata accessor for REMCDListInZREMCDBASELIST();
  v28 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v27));
  v29 = v21;
  v30 = objc_msgSend(v28, "initWithContext:", v110);
  sub_1003C33B0(v26);
  v108 = v26;
  v31 = objc_msgSend(v26, "ckCloudState");
  if (v31)
  {
    v32 = v31;
    objc_msgSend(v31, "setObject:", 0);
    objc_msgSend(v32, "setSavedAttachment:", 0);
    objc_msgSend(v32, "setSavedReminder:", 0);
    objc_msgSend(v32, "setTemplate:", 0);
    objc_msgSend(v32, "setList:", v30);

  }
  v104 = v30;
  v33 = v108;
  v34 = objc_msgSend(v108, "parentList");
  v35 = v25;
  if (!v34)
  {
    v70 = 0;
    goto LABEL_26;
  }
  v36 = v34;
  v37 = objc_msgSend(v34, "identifier");
  if (!v37)
  {
    v40 = (void *)v105;
    v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v103(v8, 1, 1, v105);
    goto LABEL_20;
  }
  v38 = v37;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

  v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v40 = (void *)v105;
  v39(v8, v15, v105);
  v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v103(v8, 0, 1, (uint64_t)v40);
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v10 + 48))(v8, 1, v40) == 1)
  {
LABEL_20:
    sub_10011E85C((uint64_t)v8);
    if (qword_1008373C8 != -1)
      swift_once(&qword_1008373C8, sub_1003BFD64);
    v71 = type metadata accessor for Logger(0);
    sub_10001AAA8(v71, (uint64_t)qword_100848300);
    v72 = v35;
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter(v73);
    if (os_log_type_enabled(v73, (os_log_type_t)v74))
    {
      LODWORD(v109) = v74;
      v102 = v36;
      v75 = swift_slowAlloc(32, -1);
      v76 = (void *)swift_slowAlloc(96, -1);
      v105 = (uint64_t)v76;
      *(_DWORD *)v75 = 136315650;
      v111 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      v112 = v76;
      v77 = sub_10001A630((uint64_t *)&unk_100848490);
      v78 = String.init<A>(describing:)(&v111, v77);
      v111 = (ValueMetadata *)sub_10001A820(v78, v79, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2080;
      v111 = (ValueMetadata *)sub_10001A820(0xD000000000000014, 0x8000000100702A50, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *(_WORD *)(v75 + 22) = 2082;
      v80 = objc_msgSend(v108, "identifier");
      if (v80)
      {
        v81 = v80;
        v82 = (uint64_t)v106;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v80);

        v83 = 0;
      }
      else
      {
        v83 = 1;
        v82 = (uint64_t)v106;
      }
      v103((char *)v82, v83, 1, (uint64_t)v40);
      v97 = Optional.descriptionOrNil.getter(v107);
      v99 = v98;
      sub_10011E85C(v82);
      v111 = (ValueMetadata *)sub_10001A820(v97, v99, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v109, "[%s|%s] Failed to process parentList because parentList.identifier is nil {list.identifier: %{public}s}", (uint8_t *)v75, 0x20u);
      v100 = v105;
      swift_arrayDestroy(v105, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v70 = 0;
      goto LABEL_35;
    }

    v70 = 0;
    v33 = v108;
LABEL_26:
    v84 = v104;
    v85 = v110;
LABEL_36:
    objc_msgSend(v85, "refreshObject:mergeChanges:", v33, 0, v101);

    sub_1000A5C24((uint64_t)v70, 0);
    return;
  }
  v102 = v36;
  v39(v19, v8, (uint64_t)v40);
  v41 = objc_msgSend(v104, "ic_permanentObjectID");
  v106 = *(void (**)(char *, char *, void *))(v10 + 16);
  v106(v12, v19, v40);
  v107 = v41;
  v42 = v109;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v109);
  v112 = *v42;
  v44 = v112;
  *v42 = (id)0x8000000000000000;
  v46 = sub_1002C65F8((uint64_t)v12);
  v47 = v44[2];
  v48 = (v45 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
    __break(1u);
LABEL_38:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
LABEL_32:
    v92 = v15;
    v93 = v107;
    v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v107);
    specialized Array._endMutation()(v94);

    v95 = *(void (**)(char *, uint64_t))(v10 + 8);
    v96 = v105;
    v95(v12, v105);
    v95(v19, v96);
    v70 = sub_1000D4634;
LABEL_35:
    v85 = v110;
    v33 = v108;
    v84 = v104;
    goto LABEL_36;
  }
  v50 = v45;
  v51 = v44[3];
  v101 = v35;
  if (v51 >= v49)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002D95B4();
      v44 = v112;
    }
LABEL_29:
    v86 = v109;
    *v109 = v44;
    swift_bridgeObjectRelease();
    v87 = *v86;
    v88 = swift_bridgeObjectRetain(*v86);
    if ((v50 & 1) == 0)
    {
      ((void (*)(char *, char *, uint64_t, __n128))v106)(v15, v12, v105, v88);
      sub_10028F070(v46, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, v87);
    }
    v89 = v87[7];
    swift_bridgeObjectRelease();
    v90 = (_QWORD *)(v89 + 8 * v46);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v91);
    v15 = *(char **)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v47 = *(_QWORD *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x18);
    v35 = v101;
    if ((unint64_t)v15 < v47 >> 1)
      goto LABEL_32;
    goto LABEL_38;
  }
  sub_1002D2C88(v49, isUniquelyReferenced_nonNull_native);
  v44 = v112;
  v52 = sub_1002C65F8((uint64_t)v12);
  if ((v50 & 1) == (v53 & 1))
  {
    v46 = v52;
    goto LABEL_29;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v105);
  __break(1u);
}

void sub_1003C1390(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  ValueMetadata *v55;
  id v56;

  v7 = (_QWORD *)type metadata accessor for UUID(0);
  v8 = (id)*(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C3FD0(a1);
  if (!v3)
  {
    v52 = 0;
    v53 = v11;
    if (!v11 || (v12 = objc_msgSend(v11, "ic_permanentObjectID")) == 0)
    {
      v54 = 0;
      goto LABEL_10;
    }
    v56 = 0;
    v54 = v12;
    v13 = objc_msgSend(a2, "existingObjectWithID:error:");
    v14 = v56;
    if (v13)
    {
      v15 = v13;
      v51 = type metadata accessor for REMCDListInZREMCDBASELIST();
      v48 = swift_dynamicCastClass(v15, v51);
      if (v48)
      {
        v49 = v15;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            v45 = a3;
          else
            v45 = a3 & 0xFFFFFFFFFFFFFF8;
          v46 = v14;
          swift_bridgeObjectRetain(a3);
          v16 = _CocoaArrayWrapper.endIndex.getter(v45);
          if (v16)
          {
LABEL_8:
            v50 = a3 & 0xC000000000000001;
            a1 = 4;
            while (1)
            {
              v10 = (char *)(a1 - 4);
              v32 = v50
                  ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, a3)
                  : *(id *)(a3 + 8 * a1);
              v7 = v32;
              v33 = a1 - 3;
              if (__OFADD__(v10, 1))
                break;
              v56 = 0;
              v34 = objc_msgSend(a2, "existingObjectWithID:error:", v32, &v56);
              v35 = v56;
              if (!v34)
              {
                v42 = v56;
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)(v35);

                swift_willThrow(v43);
                goto LABEL_26;
              }
              v36 = v34;
              v37 = (void *)swift_dynamicCastClass(v34, v51);
              v38 = v35;
              if (v37)
              {
                v8 = v49;
                objc_msgSend(v37, "setParentList:", v48);

              }
              else
              {
                v8 = v7;
                v7 = v36;
              }

              ++a1;
              if (v33 == v16)
                goto LABEL_33;
            }
            __break(1u);
LABEL_28:
            swift_once(&qword_1008373C8, sub_1003BFD64);
LABEL_11:
            v18 = type metadata accessor for Logger(0);
            sub_10001AAA8(v18, (uint64_t)qword_100848300);
            v19 = (*((uint64_t (**)(char *, uint64_t, _QWORD *))v8 + 2))(v10, a1, v7);
            v20 = Logger.logObject.getter(v19);
            v21 = static os_log_type_t.error.getter(v20);
            v22 = v21;
            if (os_log_type_enabled(v20, v21))
            {
              v23 = swift_slowAlloc(32, -1);
              v24 = (void *)swift_slowAlloc(96, -1);
              *(_DWORD *)v23 = 136315650;
              LODWORD(v51) = v22;
              v55 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
              v56 = v24;
              v25 = sub_10001A630((uint64_t *)&unk_100848490);
              v26 = String.init<A>(describing:)(&v55, v25);
              v55 = (ValueMetadata *)sub_10001A820(v26, v27, (uint64_t *)&v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
              swift_bridgeObjectRelease();
              *(_WORD *)(v23 + 12) = 2080;
              v55 = (ValueMetadata *)sub_10001A820(0xD000000000000014, 0x8000000100702A50, (uint64_t *)&v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
              *(_WORD *)(v23 + 22) = 2082;
              v28 = sub_10031EA80();
              v29 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
              v55 = (ValueMetadata *)sub_10001A820(v29, v30, (uint64_t *)&v56);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
              v31 = swift_bridgeObjectRelease();
              (*((void (**)(char *, _QWORD *, __n128))v8 + 1))(v10, v7, v31);
              _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v51, "[%s|%s] Failed to process sublists of {parentListIdentifier: %{public}s} since its managed object could not be fetched", (uint8_t *)v23, 0x20u);
              swift_arrayDestroy(v24, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v24, -1, -1);
              swift_slowDealloc(v23, -1, -1);

            }
            else
            {

              (*((void (**)(char *, _QWORD *))v8 + 1))(v10, v7);
            }
            return;
          }
        }
        else
        {
          v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          v17 = v14;
          swift_bridgeObjectRetain(a3);
          if (v16)
            goto LABEL_8;
        }
LABEL_33:

        swift_bridgeObjectRelease();
        v47 = v54;

        return;
      }
      v41 = v14;

LABEL_10:
      if (qword_1008373C8 == -1)
        goto LABEL_11;
      goto LABEL_28;
    }
    v39 = v56;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v40);
LABEL_26:
    v44 = v54;

  }
}

void sub_1003C18E0(void *a1, void *a2, id *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void (*v39)(char *, char *, uint64_t);
  void *v40;
  id v41;
  id *v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  ValueMetadata *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  ValueMetadata **v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  ValueMetadata *v67;
  uint64_t v68;
  void *v69;
  void (*v70)(_QWORD *@<X8>);
  uint64_t v71;
  id v72;
  NSObject *v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  id *v86;
  _QWORD *v87;
  __n128 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  void (*v103)(char *, uint64_t, uint64_t, uint64_t);
  id v104;
  uint64_t v105;
  void (*v106)(char *, char *, void *);
  id v107;
  id v108;
  id *v109;
  void *v110;
  ValueMetadata *v111;
  id v112;

  v109 = a3;
  v107 = (id)sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v107);
  v106 = (void (*)(char *, char *, void *))((char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (char *)&v101 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v101 - v14;
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v101 - v18;
  v112 = 0;
  v110 = a1;
  v20 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v112, v17);
  v21 = v112;
  if (!v20)
  {
    v54 = v112;
    _convertNSErrorToError(_:)(v21);

    swift_willThrow(v55);
    return;
  }
  v22 = v20;
  v105 = v9;
  v23 = type metadata accessor for REMCDSmartListInZREMCDOBJECT();
  v24 = swift_dynamicCastClass(v22, v23);
  v25 = v22;
  if (!v24)
  {
    v56 = v21;

    if (qword_1008373C8 != -1)
      swift_once(&qword_1008373C8, sub_1003BFD64);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_100848300);
    v58 = a2;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(32, -1);
      v62 = (ValueMetadata **)swift_slowAlloc(8, -1);
      v63 = (void *)swift_slowAlloc(64, -1);
      v110 = v63;
      *(_DWORD *)v61 = 136315650;
      v111 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      v112 = v63;
      v64 = sub_10001A630((uint64_t *)&unk_100848490);
      v65 = String.init<A>(describing:)(&v111, v64);
      v111 = (ValueMetadata *)sub_10001A820(v65, v66, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 12) = 2080;
      v111 = (ValueMetadata *)sub_10001A820(0xD000000000000019, 0x8000000100702A30, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *(_WORD *)(v61 + 22) = 2114;
      v111 = v58;
      v67 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *v62 = v58;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "[%s|%s] Failed to process smartlist of {listMOIDInZREMCDOBJECT: %{public}@} since its managed object could not be fetched", (uint8_t *)v61, 0x20u);
      v68 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v62, 1, v68);
      swift_slowDealloc(v62, -1, -1);
      v69 = v110;
      swift_arrayDestroy(v110, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

    }
    return;
  }
  v26 = (void *)v24;
  v27 = type metadata accessor for REMCDSmartListInZREMCDBASELIST();
  v28 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v27));
  v29 = v21;
  v30 = objc_msgSend(v28, "initWithContext:", v110);
  sub_1003C3BD0(v26);
  v108 = v26;
  v31 = objc_msgSend(v26, "ckCloudState");
  if (v31)
  {
    v32 = v31;
    objc_msgSend(v31, "setObject:", 0);
    objc_msgSend(v32, "setSavedAttachment:", 0);
    objc_msgSend(v32, "setSavedReminder:", 0);
    objc_msgSend(v32, "setTemplate:", 0);
    objc_msgSend(v32, "setList:", v30);

  }
  v104 = v30;
  v33 = v108;
  v34 = objc_msgSend(v108, "parentList");
  v35 = v25;
  if (!v34)
  {
    v70 = 0;
    goto LABEL_26;
  }
  v36 = v34;
  v37 = objc_msgSend(v34, "identifier");
  if (!v37)
  {
    v40 = (void *)v105;
    v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v103(v8, 1, 1, v105);
    goto LABEL_20;
  }
  v38 = v37;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

  v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v40 = (void *)v105;
  v39(v8, v15, v105);
  v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v103(v8, 0, 1, (uint64_t)v40);
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v10 + 48))(v8, 1, v40) == 1)
  {
LABEL_20:
    sub_10011E85C((uint64_t)v8);
    if (qword_1008373C8 != -1)
      swift_once(&qword_1008373C8, sub_1003BFD64);
    v71 = type metadata accessor for Logger(0);
    sub_10001AAA8(v71, (uint64_t)qword_100848300);
    v72 = v35;
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter(v73);
    if (os_log_type_enabled(v73, (os_log_type_t)v74))
    {
      LODWORD(v109) = v74;
      v102 = v36;
      v75 = swift_slowAlloc(32, -1);
      v76 = (void *)swift_slowAlloc(96, -1);
      v105 = (uint64_t)v76;
      *(_DWORD *)v75 = 136315650;
      v111 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      v112 = v76;
      v77 = sub_10001A630((uint64_t *)&unk_100848490);
      v78 = String.init<A>(describing:)(&v111, v77);
      v111 = (ValueMetadata *)sub_10001A820(v78, v79, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 12) = 2080;
      v111 = (ValueMetadata *)sub_10001A820(0xD000000000000019, 0x8000000100702A30, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *(_WORD *)(v75 + 22) = 2082;
      v80 = objc_msgSend(v108, "identifier");
      if (v80)
      {
        v81 = v80;
        v82 = (uint64_t)v106;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v80);

        v83 = 0;
      }
      else
      {
        v83 = 1;
        v82 = (uint64_t)v106;
      }
      v103((char *)v82, v83, 1, (uint64_t)v40);
      v97 = Optional.descriptionOrNil.getter(v107);
      v99 = v98;
      sub_10011E85C(v82);
      v111 = (ValueMetadata *)sub_10001A820(v97, v99, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v109, "[%s|%s] Failed to process parentList because parentList.identifier is nil {smartList.identifier: %{public}s}", (uint8_t *)v75, 0x20u);
      v100 = v105;
      swift_arrayDestroy(v105, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v70 = 0;
      goto LABEL_35;
    }

    v70 = 0;
    v33 = v108;
LABEL_26:
    v84 = v104;
    v85 = v110;
LABEL_36:
    objc_msgSend(v85, "refreshObject:mergeChanges:", v33, 0, v101);

    sub_1000A5C24((uint64_t)v70, 0);
    return;
  }
  v102 = v36;
  v39(v19, v8, (uint64_t)v40);
  v41 = objc_msgSend(v104, "ic_permanentObjectID");
  v106 = *(void (**)(char *, char *, void *))(v10 + 16);
  v106(v12, v19, v40);
  v107 = v41;
  v42 = v109;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v109);
  v112 = *v42;
  v44 = v112;
  *v42 = (id)0x8000000000000000;
  v46 = sub_1002C65F8((uint64_t)v12);
  v47 = v44[2];
  v48 = (v45 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
    __break(1u);
LABEL_38:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
LABEL_32:
    v92 = v15;
    v93 = v107;
    v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v107);
    specialized Array._endMutation()(v94);

    v95 = *(void (**)(char *, uint64_t))(v10 + 8);
    v96 = v105;
    v95(v12, v105);
    v95(v19, v96);
    v70 = sub_1000D4634;
LABEL_35:
    v85 = v110;
    v33 = v108;
    v84 = v104;
    goto LABEL_36;
  }
  v50 = v45;
  v51 = v44[3];
  v101 = v35;
  if (v51 >= v49)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002D95B4();
      v44 = v112;
    }
LABEL_29:
    v86 = v109;
    *v109 = v44;
    swift_bridgeObjectRelease();
    v87 = *v86;
    v88 = swift_bridgeObjectRetain(*v86);
    if ((v50 & 1) == 0)
    {
      ((void (*)(char *, char *, uint64_t, __n128))v106)(v15, v12, v105, v88);
      sub_10028F070(v46, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, v87);
    }
    v89 = v87[7];
    swift_bridgeObjectRelease();
    v90 = (_QWORD *)(v89 + 8 * v46);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v91);
    v15 = *(char **)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v47 = *(_QWORD *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x18);
    v35 = v101;
    if ((unint64_t)v15 < v47 >> 1)
      goto LABEL_32;
    goto LABEL_38;
  }
  sub_1002D2C88(v49, isUniquelyReferenced_nonNull_native);
  v44 = v112;
  v52 = sub_1002C65F8((uint64_t)v12);
  if ((v50 & 1) == (v53 & 1))
  {
    v46 = v52;
    goto LABEL_29;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v105);
  __break(1u);
}

void sub_1003C2314(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  ValueMetadata *v57;
  id v58;

  v7 = (_QWORD *)type metadata accessor for UUID(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C3FD0(a1);
  if (!v3)
  {
    v54 = 0;
    v55 = v11;
    if (!v11 || (v12 = objc_msgSend(v11, "ic_permanentObjectID")) == 0)
    {
      v56 = 0;
      goto LABEL_10;
    }
    v58 = 0;
    v56 = v12;
    v13 = objc_msgSend(a2, "existingObjectWithID:error:");
    v14 = v58;
    if (v13)
    {
      v15 = v13;
      v16 = type metadata accessor for REMCDListInZREMCDBASELIST();
      v51 = swift_dynamicCastClass(v15, v16);
      if (v51)
      {
        v52 = v15;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            v47 = a3;
          else
            v47 = a3 & 0xFFFFFFFFFFFFFF8;
          v48 = v14;
          swift_bridgeObjectRetain(a3);
          v17 = _CocoaArrayWrapper.endIndex.getter(v47);
          if (v17)
          {
LABEL_8:
            v53 = a3 & 0xC000000000000001;
            a1 = 4;
            while (1)
            {
              v10 = (char *)(a1 - 4);
              v34 = v53
                  ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, a3)
                  : *(id *)(a3 + 8 * a1);
              v7 = v34;
              v35 = a1 - 3;
              if (__OFADD__(v10, 1))
                break;
              v58 = 0;
              v36 = objc_msgSend(a2, "existingObjectWithID:error:", v34, &v58);
              v37 = v58;
              if (!v36)
              {
                v44 = v58;
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)(v37);

                swift_willThrow(v45);
                goto LABEL_26;
              }
              v38 = v36;
              v39 = type metadata accessor for REMCDSmartListInZREMCDBASELIST();
              v8 = swift_dynamicCastClass(v38, v39);
              v40 = v37;
              if (v8)
              {
                v33 = v52;
                objc_msgSend((id)v8, "setParentList:", v51);

              }
              else
              {
                v33 = v7;
                v7 = v38;
              }

              ++a1;
              if (v35 == v17)
                goto LABEL_33;
            }
            __break(1u);
LABEL_28:
            swift_once(&qword_1008373C8, sub_1003BFD64);
LABEL_11:
            v19 = type metadata accessor for Logger(0);
            sub_10001AAA8(v19, (uint64_t)qword_100848300);
            v20 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v8 + 16))(v10, a1, v7);
            v21 = Logger.logObject.getter(v20);
            v22 = static os_log_type_t.error.getter(v21);
            if (os_log_type_enabled(v21, v22))
            {
              v23 = swift_slowAlloc(32, -1);
              v24 = (void *)swift_slowAlloc(96, -1);
              v53 = (unint64_t)v24;
              *(_DWORD *)v23 = 136315650;
              v57 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
              v58 = v24;
              v25 = sub_10001A630((uint64_t *)&unk_100848490);
              v26 = String.init<A>(describing:)(&v57, v25);
              v57 = (ValueMetadata *)sub_10001A820(v26, v27, (uint64_t *)&v58);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
              swift_bridgeObjectRelease();
              *(_WORD *)(v23 + 12) = 2080;
              v57 = (ValueMetadata *)sub_10001A820(0xD000000000000019, 0x8000000100702A30, (uint64_t *)&v58);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
              *(_WORD *)(v23 + 22) = 2082;
              v28 = sub_10031EA80();
              v29 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
              v57 = (ValueMetadata *)sub_10001A820(v29, v30, (uint64_t *)&v58);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
              v31 = swift_bridgeObjectRelease();
              (*(void (**)(char *, _QWORD *, __n128))(v8 + 8))(v10, v7, v31);
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s|%s] Failed to process children smartlists of {parentListIdentifier: %{public}s} since its managed object could not be fetched", (uint8_t *)v23, 0x20u);
              v32 = v53;
              swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v32, -1, -1);
              swift_slowDealloc(v23, -1, -1);

            }
            else
            {

              (*(void (**)(char *, _QWORD *))(v8 + 8))(v10, v7);
            }
            return;
          }
        }
        else
        {
          v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          v18 = v14;
          swift_bridgeObjectRetain(a3);
          if (v17)
            goto LABEL_8;
        }
LABEL_33:

        swift_bridgeObjectRelease();
        v49 = v56;

        return;
      }
      v43 = v14;

LABEL_10:
      if (qword_1008373C8 == -1)
        goto LABEL_11;
      goto LABEL_28;
    }
    v41 = v58;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v42);
LABEL_26:
    v46 = v56;

  }
}

void sub_1003C286C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  objc_class *v13;
  Class isa;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  objc_class *v18;
  Class v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  Class v30;
  id v31;
  id v32;
  objc_class *v33;
  Class v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v2, "setCkDirtyFlags:", objc_msgSend(a1, "ckDirtyFlags", v9));
  v12 = objc_msgSend(a1, "ckIdentifier");
  objc_msgSend(v2, "setCkIdentifier:", v12);

  objc_msgSend(v2, "setCkNeedsInitialFetchFromCloud:", objc_msgSend(a1, "ckNeedsInitialFetchFromCloud"));
  objc_msgSend(v2, "setCkNeedsToBeFetchedFromCloud:", objc_msgSend(a1, "ckNeedsToBeFetchedFromCloud"));
  v13 = (objc_class *)objc_msgSend(a1, "ckServerRecordData");
  isa = v13;
  if (v13)
  {
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v15, v17);
  }
  objc_msgSend(v2, "setCkServerRecordData:", isa);

  v18 = (objc_class *)objc_msgSend(a1, "ckServerShareData");
  v19 = v18;
  if (v18)
  {
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v19 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v20, v22);
  }
  objc_msgSend(v2, "setCkServerShareData:", v19);

  v23 = objc_msgSend(a1, "ckZoneOwnerName");
  objc_msgSend(v2, "setCkZoneOwnerName:", v23);

  v24 = objc_msgSend(a1, "daPushKey");
  objc_msgSend(v2, "setDaPushKey:", v24);

  v25 = objc_msgSend(a1, "daSyncToken");
  objc_msgSend(v2, "setDaSyncToken:", v25);

  objc_msgSend(v2, "setEffectiveMinimumSupportedAppVersion:", objc_msgSend(a1, "effectiveMinimumSupportedAppVersion"));
  v26 = objc_msgSend(a1, "externalIdentifier");
  objc_msgSend(v2, "setExternalIdentifier:", v26);

  v27 = objc_msgSend(a1, "externalModificationTag");
  objc_msgSend(v2, "setExternalModificationTag:", v27);

  v28 = objc_msgSend(a1, "identifier");
  if (v28)
  {
    v29 = v28;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
    {
      v30 = 0;
    }
    else
    {
      v30 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    v30 = 0;
  }
  objc_msgSend(v2, "setIdentifier:", v30);

  objc_msgSend(v2, "setMarkedForDeletion:", objc_msgSend(a1, "markedForDeletion"));
  objc_msgSend(v2, "setMinimumSupportedAppVersion:", objc_msgSend(a1, "minimumSupportedAppVersion"));
  v31 = objc_msgSend(a1, "resolutionTokenMap");
  objc_msgSend(v2, "setResolutionTokenMap:", v31);

  v32 = objc_msgSend(a1, "resolutionTokenMap_v2_JSON");
  objc_msgSend(v2, "setResolutionTokenMap_v2_JSON:", v32);

  v33 = (objc_class *)objc_msgSend(a1, "resolutionTokenMap_v3_JSONData");
  v34 = v33;
  if (v33)
  {
    v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

    v34 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v35, v37);
  }
  objc_msgSend(v2, "setResolutionTokenMap_v3_JSONData:", v34);

  v38 = objc_msgSend(a1, "account");
  objc_msgSend(v2, "setAccount:", v38);

}

id sub_1003C2DE0()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDCommonREMCDObjectPropertiesManagedObject);
}

void sub_1003C2DF0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  objc_class *v19;
  Class isa;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  int v27;
  uint64_t v28;
  Class v29;
  id v30;
  objc_class *v31;
  Class v32;
  uint64_t v33;
  char *v34;
  objc_class *v35;
  Class v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "badgeEmblem", v14);
  objc_msgSend(v2, "setBadgeEmblem:", v17);

  v18 = objc_msgSend(a1, "color");
  objc_msgSend(v2, "setColor:", v18);

  v19 = (objc_class *)objc_msgSend(a1, "membershipsOfRemindersInSectionsAsData");
  isa = v19;
  if (v19)
  {
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v21, v23);
  }
  objc_msgSend(v2, "setMembershipsOfRemindersInSectionsAsData:", isa);

  v24 = objc_msgSend(a1, "membershipsOfRemindersInSectionsChecksum");
  objc_msgSend(v2, "setMembershipsOfRemindersInSectionsChecksum:", v24);

  v25 = objc_msgSend(a1, "mostRecentTargetTemplateIdentifier");
  if (v25)
  {
    v26 = v25;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
    v28 = v48;
    if (v27 == 1)
    {
      v29 = 0;
    }
    else
    {
      v29 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v16, 1, 1, v9);
    v29 = 0;
    v28 = v48;
  }
  objc_msgSend(v2, "setMostRecentTargetTemplateIdentifier:", v29);

  v30 = objc_msgSend(a1, "name");
  objc_msgSend(v2, "setName:", v30);

  v31 = (objc_class *)objc_msgSend(a1, "pinnedDate");
  v32 = v31;
  v33 = v49;
  if (v31)
  {
    v34 = v47;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v8, v34, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v8, 0, 1, v33);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v33) == 1)
    {
      v32 = 0;
    }
    else
    {
      v32 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v33);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v8, 1, 1, v49);
  }
  objc_msgSend(v2, "setPinnedDate:", v32);

  v35 = (objc_class *)objc_msgSend(a1, "sectionIDsOrderingAsData");
  v36 = v35;
  if (v35)
  {
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

    v36 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v37, v39);
  }
  objc_msgSend(v2, "setSectionIDsOrderingAsData:", v36);

  objc_msgSend(v2, "setShowingLargeAttachments:", objc_msgSend(a1, "showingLargeAttachments"));
  v40 = objc_msgSend(a1, "sortingStyle");
  objc_msgSend(v2, "setSortingStyle:", v40);

  v41 = type metadata accessor for REMCDListInZREMCDOBJECT();
  v42 = swift_dynamicCastClass(a1, v41);
  if (v42)
  {
    v43 = (void *)v42;
    v44 = a1;
    objc_msgSend(v2, "setSpotlightIndexCount:", objc_msgSend(v43, "spotlightIndexCount"));

  }
  v45 = objc_msgSend(a1, "parentAccount");
  objc_msgSend(v2, "setParentAccount:", v45);

}

id sub_1003C3350()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDCommonBaseListPropertiesManagedObject);
}

id sub_1003C3370()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDListInZREMCDOBJECT);
}

id sub_1003C3398()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDSmartListInZREMCDOBJECT);
}

void sub_1003C33B0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  objc_class *v16;
  Class isa;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  objc_class *v22;
  Class v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  objc_class *v30;
  Class v31;
  objc_class *v32;
  Class v33;
  uint64_t v34;
  char *v35;
  objc_class *v36;
  Class v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  objc_class *v41;
  Class v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  __chkstk_darwin(v4);
  v54 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C286C(a1);
  sub_1003C2DF0(a1);
  v16 = (objc_class *)objc_msgSend(a1, "daBulkRequests");
  isa = v16;
  if (v16)
  {
    v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v18, v20);
  }
  objc_msgSend(v2, "setDaBulkRequests:", isa);

  objc_msgSend(v2, "setDaDisplayOrder:", objc_msgSend(a1, "daDisplayOrder"));
  v21 = objc_msgSend(a1, "daExternalIdentificationTag");
  objc_msgSend(v2, "setDaExternalIdentificationTag:", v21);

  objc_msgSend(v2, "setDaIsEventOnlyContainer:", objc_msgSend(a1, "daIsEventOnlyContainer"));
  objc_msgSend(v2, "setDaIsImmutable:", objc_msgSend(a1, "daIsImmutable"));
  objc_msgSend(v2, "setDaIsNotificationsCollection:", objc_msgSend(a1, "daIsNotificationsCollection"));
  objc_msgSend(v2, "setDaIsReadOnly:", objc_msgSend(a1, "daIsReadOnly"));
  v22 = (objc_class *)objc_msgSend(a1, "groceryLocalCorrectionsAsData");
  v23 = v22;
  if (v22)
  {
    v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    v23 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v24, v26);
  }
  v27 = v55;
  objc_msgSend(v2, "setGroceryLocalCorrectionsAsData:", v23);

  v28 = objc_msgSend(a1, "groceryLocalCorrectionsChecksum");
  objc_msgSend(v2, "setGroceryLocalCorrectionsChecksum:", v28);

  v29 = objc_msgSend(a1, "groceryLocaleID");
  objc_msgSend(v2, "setGroceryLocaleID:", v29);

  objc_msgSend(v2, "setIsGroup:", objc_msgSend(a1, "isGroup"));
  objc_msgSend(v2, "setIsPinnedByCurrentUser:", objc_msgSend(a1, "isPinnedByCurrentUser"));
  v30 = (objc_class *)objc_msgSend(a1, "lastUserAccessDate");
  v31 = v30;
  if (v30)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
    {
      v31 = 0;
    }
    else
    {
      v31 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  objc_msgSend(v2, "setLastUserAccessDate:", v31);

  v32 = (objc_class *)objc_msgSend(a1, "mostRecentTargetTemplateIdentifierByCurrentUser");
  v33 = v32;
  v34 = v56;
  if (v32)
  {
    v35 = v54;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v8, v35, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v34) == 1)
    {
      v33 = 0;
    }
    else
    {
      v33 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v34);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v8, 1, 1, v56);
  }
  objc_msgSend(v2, "setMostRecentTargetTemplateIdentifierByCurrentUser:", v33);

  v36 = (objc_class *)objc_msgSend(a1, "reminderIDsMergeableOrdering");
  v37 = v36;
  if (v36)
  {
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;

    v37 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v38, v40);
  }
  objc_msgSend(v2, "setReminderIDsMergeableOrdering:", v37);

  v41 = (objc_class *)objc_msgSend(a1, "reminderIDsMergeableOrdering_v2_JSON");
  v42 = v41;
  if (v41)
  {
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

    v42 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v43, v45);
  }
  objc_msgSend(v2, "setReminderIDsMergeableOrdering_v2_JSON:", v42);

  v46 = objc_msgSend(a1, "sharedOwnerAddress");
  objc_msgSend(v2, "setSharedOwnerAddress:", v46);

  v47 = objc_msgSend(a1, "sharedOwnerName");
  objc_msgSend(v2, "setSharedOwnerName:", v47);

  objc_msgSend(v2, "setSharingStatus:", objc_msgSend(a1, "sharingStatus"));
  objc_msgSend(v2, "setShouldCategorizeGroceryItems:", objc_msgSend(a1, "shouldCategorizeGroceryItems"));
  objc_msgSend(v2, "setShouldSuggestConversionToGroceryList:", objc_msgSend(a1, "shouldSuggestConversionToGroceryList"));
  v48 = objc_msgSend(a1, "calDAVNotifications");
  objc_msgSend(v2, "setCalDAVNotifications:", v48);

  v49 = objc_msgSend(a1, "reminders");
  objc_msgSend(v2, "setReminders:", v49);

  v50 = objc_msgSend(a1, "sections");
  objc_msgSend(v2, "setSections:", v50);

  v51 = objc_msgSend(a1, "sharedOwner");
  objc_msgSend(v2, "setSharedOwner:", v51);

  v52 = objc_msgSend(a1, "sharees");
  objc_msgSend(v2, "setSharees:", v52);

}

id sub_1003C3BB8()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDListInZREMCDBASELIST);
}

void sub_1003C3BD0(void *a1)
{
  void *v1;
  objc_class *v3;
  Class isa;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  id v9;

  sub_1003C286C(a1);
  sub_1003C2DF0(a1);
  v3 = (objc_class *)objc_msgSend(a1, "filterData");
  isa = v3;
  if (v3)
  {
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v5, v7);
  }
  objc_msgSend(v1, "setFilterData:", isa);

  v8 = objc_msgSend(a1, "smartListType");
  objc_msgSend(v1, "setSmartListType:", v8);

  v9 = objc_msgSend(a1, "sections");
  objc_msgSend(v1, "setSections:", v9);

}

id sub_1003C3CF0()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDSmartListInZREMCDBASELIST);
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST()
{
  return objc_opt_self(REMCDAccountV2023MinorEMigratingToZREMCDBASELIST);
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.__deallocating_deinit(uint64_t a1)
{
  return sub_1003C3F80(a1, type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST);
}

uint64_t type metadata accessor for REMCDCommonREMCDObjectPropertiesManagedObject()
{
  return objc_opt_self(_TtC7reminddP33_3E45808280CC8226B80F1B6D5DD8CFA645REMCDCommonREMCDObjectPropertiesManagedObject);
}

uint64_t type metadata accessor for REMCDCommonBaseListPropertiesManagedObject()
{
  return objc_opt_self(_TtC7reminddP33_3E45808280CC8226B80F1B6D5DD8CFA642REMCDCommonBaseListPropertiesManagedObject);
}

uint64_t type metadata accessor for REMCDListInZREMCDOBJECT()
{
  return objc_opt_self(REMCDListInZREMCDOBJECT);
}

uint64_t type metadata accessor for REMCDSmartListInZREMCDOBJECT()
{
  return objc_opt_self(REMCDSmartListInZREMCDOBJECT);
}

uint64_t type metadata accessor for REMCDListInZREMCDBASELIST()
{
  return objc_opt_self(REMCDListInZREMCDBASELIST);
}

uint64_t type metadata accessor for REMCDSmartListInZREMCDBASELIST()
{
  return objc_opt_self(REMCDSmartListInZREMCDBASELIST);
}

id sub_1003C3ED0()
{
  return sub_1003C3F80(0, type metadata accessor for REMCDReminderV2023MinorEMigratingToZREMCDBASELIST);
}

uint64_t type metadata accessor for REMCDReminderV2023MinorEMigratingToZREMCDBASELIST()
{
  return objc_opt_self(REMCDReminderV2023MinorEMigratingToZREMCDBASELIST);
}

id sub_1003C3F18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)a6(a5);
  return objc_msgSendSuper2(&v9, "initWithEntity:insertIntoManagedObjectContext:", a3, a4);
}

id sub_1003C3F70()
{
  return sub_1003C3F80(0, type metadata accessor for REMCKCloudStateV2023MinorEMigratingToZREMCDBASELIST);
}

id sub_1003C3F80(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for REMCKCloudStateV2023MinorEMigratingToZREMCDBASELIST()
{
  return objc_opt_self(REMCKCloudStateV2023MinorEMigratingToZREMCDBASELIST);
}

void sub_1003C3FD0(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSString v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  objc_msgSend(v5, "setResultType:", 0);
  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 32) = 0x696669746E656469;
  *(_QWORD *)(v7 + 40) = 0xEA00000000007265;
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 88) = v8;
  v9 = sub_1000087F0((_QWORD *)(v7 + 64));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v9, a1, v8);
  v10 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v10, isa);

  objc_msgSend(v5, "setPredicate:", v12);
  objc_msgSend(v5, "setFetchLimit:", 1);
  v13 = type metadata accessor for REMCDListInZREMCDBASELIST();
  v14 = NSManagedObjectContext.fetch<A>(_:)(v5, v13);
  if (v1)
  {

    return;
  }
  v15 = v14;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v17 = v14;
    else
      v17 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_8;
  }
  else if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    swift_bridgeObjectRelease();

    return;
  }
  if ((v15 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(v15 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1003C4240(uint64_t a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  uint64_t v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;

  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = a2(0);
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v8, "setEntity:", v10);

  objc_msgSend(v8, "setPredicate:", 0);
  objc_msgSend(v8, "setResultType:", 1);
  if (*a3 != -1)
    swift_once(a3, a5);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v8, "setSortDescriptors:", isa);

  v12 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  v13 = NSManagedObjectContext.fetch<A>(_:)(v8, v12);

  return v13;
}

uint64_t sub_1003C43A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100848480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTOMa()
{
  return &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
}

uint64_t sub_1003C43FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008484A0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008484A0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall REMCDHashtagLabel.willSave_Swift()()
{
  void *v0;
  __n128 v1;

  if ((objc_msgSend(v0, "didCleanUpManualSortHintOnDeletion") & 1) == 0)
  {
    objc_msgSend(v0, "setDidCleanUpManualSortHintOnDeletion:", 1);
    sub_1003C44CC(v1);
  }
}

void sub_1003C44CC(__n128 a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  os_log_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  Class isa;
  id v83;
  id v84;
  _QWORD v85[2];
  os_log_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  char v95[48];
  __int128 v96;
  uint64_t v97;
  uint64_t v98[6];

  v2 = v1;
  v3 = type metadata accessor for REMHashtagLabelSpecifier(0, a1);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = (char *)v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(v2, "canonicalName", v12);
  if (!v15)
  {
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10001AAA8(v36, (uint64_t)qword_1008484A0);
    v92 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.error.getter(v92);
    if (os_log_type_enabled(v92, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v38, "cleanUpManualSortHintIfNeeded: Deleted hashtag label has nil canonicalName, abort cleanup", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    return;
  }
  v16 = v15;
  v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (!objc_msgSend(v2, "isDeleted"))
    goto LABEL_24;
  if (!objc_msgSend(v2, "wasDeletedDueToUserInitiatedChanges"))
  {
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_1008484A0);
    swift_bridgeObjectRetain(v18);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v98[0] = v45;
      *(_DWORD *)v44 = 136315138;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)&v96 = sub_10001A820((uint64_t)v92, v18, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to non-user-initiated changes, cleanup is not needed {canonicalName: %s}", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
    return;
  }
  v19 = objc_msgSend(v2, "managedObjectContext");
  if (!v19)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  v20 = v19;
  v21 = objc_opt_self(RDStoreControllerManagedObjectContext);
  v22 = swift_dynamicCastObjCClass(v20, v21);
  v23 = v20;
  if (!v22)
  {

    goto LABEL_24;
  }
  v24 = v22;
  v91 = v23;
  v25 = objc_msgSend(v2, "accountIdentifier");
  if (!v25)
  {
LABEL_9:
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_1008484A0);
    swift_bridgeObjectRetain(v18);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v98[0] = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)&v96 = sub_10001A820((uint64_t)v92, v18, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "cleanUpManualSortHintIfNeeded: No accountIdentifier when the hashtag label is deleted {canonicalName: %s}", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
    return;
  }
  v26 = v25;
  v90 = v24;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v29 = v28;
  v89 = v27;
  UUID.init(uuidString:)(v27, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();

    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    goto LABEL_9;
  }
  v88 = v29;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  v46 = (void *)objc_opt_self(REMCDAccount);
  v47 = objc_msgSend(v46, "cloudKitAccountWithCKIdentifier:context:", v26, v90);

  if (v47)
  {
    v87 = v47;
    sub_1004EF780((uint64_t)&v96);
    if (v97)
    {
      swift_bridgeObjectRelease();
      sub_10001BCA8(&v96, (uint64_t)v98);
      if (qword_1008373D0 != -1)
        swift_once(&qword_1008373D0, sub_1003C43FC);
      v48 = type metadata accessor for Logger(0);
      v49 = sub_10001AAA8(v48, (uint64_t)qword_1008484A0);
      v50 = swift_bridgeObjectRetain_n(v18, 2);
      v89 = v49;
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v96 = v88;
        v86 = v51;
        *(_DWORD *)v53 = 136315138;
        v85[1] = v53 + 4;
        swift_bridgeObjectRetain(v18);
        v93 = sub_10001A820((uint64_t)v92, v18, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        swift_bridgeObjectRelease_n(v18, 3);
        v54 = v86;
        v55 = v52;
        v56 = v53;
        _os_log_impl((void *)&_mh_execute_header, v86, v55, "cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to user-initiated changes, will delete all associated sort hints for the label {canonicalName: %s}", v53, 0xCu);
        v57 = v88;
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v18, 2);
      }
      v76 = sub_10001A630((uint64_t *)&unk_10083A340);
      inited = swift_initStackObject(v76, v95);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_QWORD *)(inited + 32) = v92;
      *(_QWORD *)(inited + 40) = v18;
      swift_bridgeObjectRetain(v18);
      v78 = sub_10011EE40(inited);
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, 1, &type metadata for String);
      static REMHashtagLabelSpecifier.labels(_:)(v78);
      swift_bridgeObjectRelease();
      sub_10023F108((uint64_t)v6, v98);
      v80 = v79;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v81 = (void *)objc_opt_self(REMAccount);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v83 = objc_msgSend(v81, "objectIDWithUUID:", isa);

      swift_bridgeObjectRetain(v80);
      v84 = v83;
      sub_1000D24B8(0x4000000000000003);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n(v80, 2);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v98);
    }
    else
    {
      sub_10000882C((uint64_t)&v96, &qword_1008484C0);
      if (qword_1008373D0 != -1)
        swift_once(&qword_1008373D0, sub_1003C43FC);
      v67 = type metadata accessor for Logger(0);
      sub_10001AAA8(v67, (uint64_t)qword_1008484A0);
      swift_bridgeObjectRetain(v18);
      v68 = v88;
      swift_bridgeObjectRetain(v88);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.error.getter(v70);
      v72 = os_log_type_enabled(v70, v71);
      v73 = v92;
      if (v72)
      {
        v74 = swift_slowAlloc(22, -1);
        v90 = swift_slowAlloc(64, -1);
        v98[0] = v90;
        *(_DWORD *)v74 = 136315394;
        swift_bridgeObjectRetain(v18);
        *(_QWORD *)&v96 = sub_10001A820((uint64_t)v73, v18, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
        swift_bridgeObjectRelease_n(v18, 3);
        *(_WORD *)(v74 + 12) = 2082;
        swift_bridgeObjectRetain(v68);
        *(_QWORD *)&v96 = sub_10001A820(v89, v68, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
        swift_bridgeObjectRelease_n(v68, 3);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "cleanUpManualSortHintIfNeeded: Could not obtain manualSortIDHashKeyProvider in the CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}", (uint8_t *)v74, 0x16u);
        v75 = v90;
        swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v18, 2);
        swift_bridgeObjectRelease_n(v68, 2);
      }

    }
  }
  else
  {
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v58 = type metadata accessor for Logger(0);
    sub_10001AAA8(v58, (uint64_t)qword_1008484A0);
    swift_bridgeObjectRetain(v18);
    v59 = v88;
    swift_bridgeObjectRetain(v88);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter(v61);
    v63 = os_log_type_enabled(v61, v62);
    v64 = v92;
    if (v63)
    {
      v65 = swift_slowAlloc(22, -1);
      v90 = swift_slowAlloc(64, -1);
      v98[0] = v90;
      *(_DWORD *)v65 = 136315394;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)&v96 = sub_10001A820((uint64_t)v64, v18, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
      swift_bridgeObjectRelease_n(v18, 3);
      *(_WORD *)(v65 + 12) = 2082;
      swift_bridgeObjectRetain(v59);
      *(_QWORD *)&v96 = sub_10001A820(v89, v59, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 8);
      swift_bridgeObjectRelease_n(v59, 3);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "cleanUpManualSortHintIfNeeded: Fail to fetch CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}", (uint8_t *)v65, 0x16u);
      v66 = v90;
      swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v59, 2);
    }

  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

Swift::Void __swiftcall REMCDHashtagLabel.didSave_Swift()()
{
  void *v0;

  objc_msgSend(v0, "setDidCleanUpManualSortHintOnDeletion:", 0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDHashtagLabel.validateForInsert_Swift()()
{
  void *v0;

  if ((objc_msgSend(v0, "didEnqueueApprovalCascade") & 1) == 0)
  {
    objc_msgSend(v0, "setDidEnqueueApprovalCascade:", 1);
    sub_1003C54D0();
  }
}

void sub_1003C54D0()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *ObjCClassFromMetadata;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v72 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v72 - v14;
  v16 = type metadata accessor for Date(0);
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend(v1, "canonicalName", v17);
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = objc_msgSend(v1, "managedObjectContext");
    if (v25)
    {
      v75 = v25;
      v26 = objc_msgSend(v1, "accountIdentifier");
      if (v26)
      {
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v73 = v29;
        v74 = v28;

        Date.init()(v30);
        v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(ObjectType), "cdEntityName");
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v33 = v22;
        v35 = v34;

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v15, 1, 1, v3);
        v36 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
        v37 = sub_1001074B8(v74, v73, (uint64_t)v19, 4, 0, 0xE000000000000000, 0, 0, 0, 0, v33, v24, v32, v35, (uint64_t)v15);
        v38 = objc_msgSend(v1, "objectID");
        v39 = objc_msgSend(v38, "persistentStore");

        v40 = type metadata accessor for REMCKSharedEntitySyncActivity();
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v40);
        v42 = objc_msgSend(ObjCClassFromMetadata, "entity");
        v43 = objc_allocWithZone((Class)ObjCClassFromMetadata);
        v44 = objc_msgSend(v43, "initWithEntity:insertIntoManagedObjectContext:", v42, v75);
        if (v39)
        {
          v45 = v39;
          v46 = v44;
          objc_msgSend(v75, "assignObject:toPersistentStore:", v46, v45);

        }
        sub_10020EE70(v37);

        return;
      }
      if (qword_1008373D0 != -1)
        swift_once(&qword_1008373D0, sub_1003C43FC);
      v62 = type metadata accessor for Logger(0);
      sub_10001AAA8(v62, (uint64_t)qword_1008484A0);
      swift_bridgeObjectRetain(v24);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter(v64);
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v77 = v67;
        *(_DWORD *)v66 = 136315138;
        swift_bridgeObjectRetain(v24);
        v76 = sub_10001A820(v22, v24, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
        swift_bridgeObjectRelease_n(v24, 3);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "enqueueApprovalCascade: Failed to acquire handle to account identifier for HashtagLabel {canonicalName: %s}", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        return;
      }

      swift_bridgeObjectRelease_n(v24, 2);
LABEL_23:

      return;
    }
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v56 = type metadata accessor for Logger(0);
    sub_10001AAA8(v56, (uint64_t)qword_1008484A0);
    swift_bridgeObjectRetain(v24);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v77 = v61;
      *(_DWORD *)v60 = 136315138;
      swift_bridgeObjectRetain(v24);
      v76 = sub_10001A820(v22, v24, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease_n(v24, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "enqueueApprovalCascade: Failed to acquire handle to managedObjectContext {canonicalName: %s}", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v24, 2);
    }
  }
  else
  {
    v47 = v3;
    if (qword_1008373D0 != -1)
      swift_once(&qword_1008373D0, sub_1003C43FC);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_1008484A0);
    v75 = v1;
    v49 = Logger.logObject.getter(v75);
    v50 = static os_log_type_t.error.getter(v49);
    if (!os_log_type_enabled(v49, v50))
    {

      goto LABEL_23;
    }
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    v77 = v52;
    *(_DWORD *)v51 = 136446210;
    v53 = objc_msgSend(v75, "uuidForChangeTracking");
    if (v53)
    {
      v54 = v53;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

      v55 = 0;
    }
    else
    {
      v55 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v55, 1, v47);
    sub_1000F2CE4((uint64_t)v9, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v47))
    {
      sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
      v68 = 0xE90000000000003ELL;
      v69 = 0x64697575206F6E3CLL;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v12, v47);
      v70 = sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
      v69 = UUID.uuidString.getter(v70);
      v68 = v71;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v47);
    }
    v76 = sub_10001A820(v69, v68, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "enqueueApprovalCascade: Failed to cascade HashtagLabel approval due to nil canonicalName {uuidForChangeTracking: %{public}s}", v51, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);

  }
}

void sub_1003C5D60(void *a1, _QWORD *a2, void *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  void *v86;
  unint64_t v87;
  uint64_t ObjCClassFromMetadata;
  NSString v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  NSString v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  NSString v105;
  id v106;
  id v107;
  id v108;
  char *v109;
  Class isa;
  Class v111;
  NSString v112;
  double v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  id v120;
  unint64_t v121;
  id v122;
  id v123;
  uint64_t v124;
  void (*v125)(unint64_t, char *, char *, char *, uint64_t, uint64_t, char *, uint64_t, __n128, uint64_t, uint64_t);
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  char *v137;
  id v138;
  id v139;
  unint64_t v140;
  char *v141;
  unint64_t v142;
  void (*v143)(char *, unint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, __n128, uint64_t, uint64_t, uint64_t);
  __n128 v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(unint64_t, uint64_t);
  void *v149;
  NSString v150;
  uint64_t v151;
  void *v152;
  NSString v153;
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t, __n128);
  NSString v158;
  id v159;
  id v160;
  id v161;
  char *v162;
  Class v163;
  uint64_t v164;
  unint64_t v165;
  Class v166;
  NSString v167;
  NSString v168;
  NSString v169;
  double v170;
  __n128 v171;
  uint64_t v172;
  void (*v173)(unint64_t, uint64_t, __n128);
  NSString v174;
  id v175;
  id v176;
  id v177;
  char *v178;
  Class v179;
  unint64_t v180;
  uint64_t v181;
  Class v182;
  NSString v183;
  NSString v184;
  NSString v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD v204[3];
  uint64_t v205;

  v201 = a2;
  v197 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char *)&v189 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v189 - v10;
  v12 = type metadata accessor for UUID(0);
  v198 = *(_QWORD *)(v12 - 8);
  v199 = v12;
  __chkstk_darwin(v12);
  v193 = (unint64_t)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v194 = (char *)&v189 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v189 - v17;
  __chkstk_darwin(v19);
  v192 = (unint64_t)&v189 - v20;
  __chkstk_darwin(v21);
  v196 = (char *)&v189 - v22;
  v205 = type metadata accessor for URL(0);
  v203 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v200 = (char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v189 - v25;
  __chkstk_darwin(v27);
  v195 = (char *)&v189 - v28;
  __chkstk_darwin(v29);
  v31 = (char *)&v189 - v30;
  v32 = type metadata accessor for RDSavedAttachment.URLMetadata(0);
  __chkstk_darwin(v32);
  v34 = (char *)&v189 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4)
  {
    v55 = a3;
    v56 = objc_msgSend(v55, "url");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v57 = objc_msgSend(v55, "metadata");
    if (v57)
    {
      v58 = v57;
      v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v61 = v60;

    }
    else
    {
      v59 = 0;
      v61 = 0xF000000000000000;
    }
    (*(void (**)(char *, char *, uint64_t))(v203 + 32))(v34, v31, v205);
    v91 = (uint64_t *)&v34[*(int *)(v32 + 20)];
    *v91 = v59;
    v91[1] = v61;
    v92 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v92, *(unsigned int *)(v92 + 48), *(unsigned __int16 *)(v92 + 52));
    v93 = JSONEncoder.init()();
    v94 = sub_10009FC50(&qword_1008484F0, type metadata accessor for RDSavedAttachment.URLMetadata, (uint64_t)&unk_1006B93A4);
    v95 = v202;
    v96 = dispatch thunk of JSONEncoder.encode<A>(_:)(v34, v32, v94);
    if (v95)
    {
      sub_1003C8A84((uint64_t)v34);

      swift_release(v93);
    }
    else
    {
      v103 = v96;
      v104 = v97;
      swift_release(v93);
      v105 = String._bridgeToObjectiveC()();
      v106 = v197;
      objc_msgSend(v197, "setAttachmentTypeRawValue:", v105);

      v107 = objc_msgSend(v55, "objectID");
      v108 = objc_msgSend(v107, "uuid");

      v109 = v196;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v108);

      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v198 + 8))(v109, v199);
      objc_msgSend(v106, "setIdentifier:", isa);

      v111 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v106, "setMetadata:", v111);

      v112 = objc_msgSend(v55, "uti");
      if (!v112)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v112 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v113 = swift_bridgeObjectRelease().n128_u64[0];
      }
      objc_msgSend(v106, "setUti:", v112, v113);
      sub_1000A71C8(v103, v104);

      sub_1003C8A84((uint64_t)v34);
    }
    return;
  }
  if (a4 == 1)
  {
    v35 = a3;
    v36 = objc_msgSend(v35, "fileURL");
    if (v36)
    {
      v37 = v36;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v36);

      v38 = v203;
      v39 = *(void (**)(char *, char *, uint64_t))(v203 + 32);
      v40 = v205;
      v39(v11, v26, v205);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v11, 0, 1, v40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v11, 1, v40) != 1)
      {
        v41 = v195;
        v39(v195, v11, v40);
        v42 = v201[3];
        v43 = v201[4];
        sub_10000A388(v201, v42);
        v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 24))(v41, v42, v43);
        if (!v45)
        {
          v44 = static REMFileDigester.sha512Sum(url:)(v41);
          if (!v45)
          {
            v149 = (void *)objc_opt_self(REMError);
            v150 = String._bridgeToObjectiveC()();
            objc_msgSend(v149, "internalErrorWithDebugDescription:", v150);

            swift_willThrow(v151);
            goto LABEL_32;
          }
        }
        v46 = v44;
        v47 = v45;
        v48 = objc_msgSend(v35, "fileSize");
        v49 = type metadata accessor for JSONEncoder(0);
        swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
        v50 = JSONEncoder.init()();
        v204[0] = v48;
        v51 = sub_1003C8B40();
        v52 = v202;
        v53 = dispatch thunk of JSONEncoder.encode<A>(_:)(v204, &type metadata for RDSavedAttachment.FileMetadata, v51);
        if (v52)
        {
          swift_bridgeObjectRelease();

          swift_release(v50);
LABEL_32:
          (*(void (**)(char *, uint64_t))(v203 + 8))(v41, v40);
          return;
        }
        v191 = v53;
        v193 = v54;
        v114 = swift_release(v50);
        v200 = (char *)URL.lastPathComponent.getter(v114);
        v194 = v115;
        v116 = v201[3];
        v189 = v201[4];
        v190 = v116;
        v201 = sub_10000A388(v201, v116);
        v117 = v46;
        v118 = objc_msgSend(v35, "objectID");
        v119 = objc_msgSend(v118, "uuid");
        v202 = 0;
        v120 = v119;

        v121 = v192;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v120);

        v122 = objc_msgSend(v35, "accountID");
        v123 = objc_msgSend(v122, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v123);
        v124 = v189;
        v125 = *(void (**)(unint64_t, char *, char *, char *, uint64_t, uint64_t, char *, uint64_t, __n128, uint64_t, uint64_t))(v189 + 16);
        v126 = swift_bridgeObjectRetain(v47);
        v188 = v124;
        v187 = v190;
        v190 = v117;
        v127 = v202;
        v125(v121, v18, v200, v194, v117, v47, v41, 1, v126, v187, v188);
        if (v127)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000A71C8(v191, v193);
          swift_bridgeObjectRelease();

          v128 = v199;
          v129 = *(void (**)(char *, uint64_t))(v198 + 8);
          v129(v18, v199);
          v129((char *)v121, v128);
        }
        else
        {
          v155 = swift_bridgeObjectRelease();
          v156 = v199;
          v157 = *(void (**)(char *, uint64_t, __n128))(v198 + 8);
          v157(v18, v199, v155);
          ((void (*)(unint64_t, uint64_t))v157)(v121, v156);
          v158 = String._bridgeToObjectiveC()();
          v159 = v197;
          objc_msgSend(v197, "setAttachmentTypeRawValue:", v158);

          v160 = objc_msgSend(v35, "objectID");
          v161 = objc_msgSend(v160, "uuid");

          v162 = v196;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v161);

          v163 = UUID._bridgeToObjectiveC()().super.isa;
          ((void (*)(char *, uint64_t))v157)(v162, v156);
          objc_msgSend(v159, "setIdentifier:", v163);

          v164 = v191;
          v165 = v193;
          v166 = Data._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v159, "setMetadata:", v166);

          v167 = String._bridgeToObjectiveC()();
          objc_msgSend(v159, "setFileName:", v167, swift_bridgeObjectRelease().n128_f64[0]);

          v168 = String._bridgeToObjectiveC()();
          objc_msgSend(v159, "setSha512Sum:", v168, swift_bridgeObjectRelease().n128_f64[0]);

          v169 = objc_msgSend(v35, "uti");
          if (!v169)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0);
            v169 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v170 = swift_bridgeObjectRelease().n128_u64[0];
          }
          objc_msgSend(v159, "setUti:", v169, v170);
          sub_1000A71C8(v164, v165);

        }
        v84 = *(void (**)(char *, uint64_t))(v203 + 8);
        v85 = v195;
        goto LABEL_38;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v203 + 56))(v11, 1, 1, v205);
    }
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100839C70);
    v86 = (void *)objc_opt_self(REMError);
    v87 = sub_1003C8AC0();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v87);
    v89 = String._bridgeToObjectiveC()();
    objc_msgSend(v86, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v89);

    swift_willThrow(v90);
    return;
  }
  v62 = a3;
  v63 = objc_msgSend(v62, "fileURL");
  if (!v63)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v203 + 56))(v8, 1, 1, v205);
    goto LABEL_23;
  }
  v64 = v63;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v63);

  v65 = v203;
  v66 = *(void (**)(char *, char *, uint64_t))(v203 + 32);
  v67 = v205;
  v66(v8, v26, v205);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v8, 0, 1, v67);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v8, 1, v67) == 1)
  {
LABEL_23:
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C70);
    v98 = (void *)objc_opt_self(REMError);
    v99 = sub_1003C8AC0();
    v100 = swift_getObjCClassFromMetadata(v99);
    v101 = String._bridgeToObjectiveC()();
    objc_msgSend(v98, "unexpectedNilPropertyWithClass:property:", v100, v101);

    swift_willThrow(v102);
    return;
  }
  v68 = v200;
  v66(v200, v8, v67);
  v69 = v201[3];
  v70 = v201[4];
  sub_10000A388(v201, v69);
  v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 24))(v68, v69, v70);
  if (!v72)
  {
    v71 = static REMFileDigester.sha512Sum(url:)(v68);
    if (!v72)
    {
      v152 = (void *)objc_opt_self(REMError);
      v153 = String._bridgeToObjectiveC()();
      objc_msgSend(v152, "internalErrorWithDebugDescription:", v153);

      swift_willThrow(v154);
      v84 = *(void (**)(char *, uint64_t))(v65 + 8);
      v85 = v68;
      goto LABEL_38;
    }
  }
  v73 = (char *)v71;
  v74 = v72;
  v75 = objc_msgSend(v62, "fileSize");
  v76 = objc_msgSend(v62, "width");
  v77 = objc_msgSend(v62, "height");
  v78 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v79 = JSONEncoder.init()();
  v204[0] = v75;
  v204[1] = v76;
  v204[2] = v77;
  v80 = sub_1003C8AFC();
  v81 = v202;
  v82 = dispatch thunk of JSONEncoder.encode<A>(_:)(v204, &type metadata for RDSavedAttachment.ImageMetadata, v80);
  if (v81)
  {
    swift_bridgeObjectRelease();

    swift_release(v79);
    v84 = *(void (**)(char *, uint64_t))(v65 + 8);
    v85 = v200;
LABEL_38:
    v84(v85, v205);
    return;
  }
  v191 = v82;
  v192 = v83;
  v130 = swift_release(v79);
  v195 = v73;
  v131 = URL.lastPathComponent.getter(v130);
  v190 = v132;
  v202 = 0;
  v133 = v201[3];
  v134 = v201[4];
  v201 = sub_10000A388(v201, v133);
  v135 = objc_msgSend(v62, "objectID");
  v136 = objc_msgSend(v135, "uuid");

  v137 = v194;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v136);

  v138 = objc_msgSend(v62, "accountID");
  v139 = objc_msgSend(v138, "uuid");

  v140 = v193;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v139);

  v141 = v137;
  v142 = v140;
  v143 = *(void (**)(char *, unint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, __n128, uint64_t, uint64_t, uint64_t))(v134 + 16);
  v144 = swift_bridgeObjectRetain(v74);
  v145 = v200;
  v146 = v202;
  v143(v141, v142, v131, v190, v195, v74, v200, 1, v144, v133, v134, v131);
  if (v146)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A71C8(v191, v192);
    swift_bridgeObjectRelease();

    v147 = v199;
    v148 = *(void (**)(unint64_t, uint64_t))(v198 + 8);
    v148(v142, v199);
    v148((unint64_t)v141, v147);
    v84 = *(void (**)(char *, uint64_t))(v203 + 8);
    v85 = v145;
    goto LABEL_38;
  }
  v202 = 0;
  v171 = swift_bridgeObjectRelease();
  v172 = v199;
  v173 = *(void (**)(unint64_t, uint64_t, __n128))(v198 + 8);
  v173(v142, v199, v171);
  ((void (*)(char *, uint64_t))v173)(v141, v172);
  v174 = String._bridgeToObjectiveC()();
  v175 = v197;
  objc_msgSend(v197, "setAttachmentTypeRawValue:", v174);

  v176 = objc_msgSend(v62, "objectID");
  v177 = objc_msgSend(v176, "uuid");

  v178 = v196;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v177);

  v179 = UUID._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v173)(v178, v172);
  objc_msgSend(v175, "setIdentifier:", v179);

  v181 = v191;
  v180 = v192;
  v182 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v175, "setMetadata:", v182);

  v183 = String._bridgeToObjectiveC()();
  objc_msgSend(v175, "setFileName:", v183, swift_bridgeObjectRelease().n128_f64[0]);

  v184 = String._bridgeToObjectiveC()();
  objc_msgSend(v175, "setSha512Sum:", v184, swift_bridgeObjectRelease().n128_f64[0]);

  v185 = objc_msgSend(v62, "uti");
  if (!v185)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v185 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v186 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v175, "setUti:", v185, v186);
  sub_1000A71C8(v181, v180);

  (*(void (**)(char *, uint64_t))(v203 + 8))(v200, v205);
}

void sub_1003C6D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSString a6)
{
  void **v6;
  void *v8;
  NSUUID v9;
  NSUUID v10;
  NSString v11;
  id v12;

  v8 = *v6;
  v9.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v10.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  if (a6)
    a6 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v8, "URLForAttachmentFile:accountID:fileName:sha512Sum:", v9.super.isa, v10.super.isa, v11, a6);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);
}

id sub_1003C6E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  return sub_1003C6E84(a1, a2, a3, a4, a5, a6, a7, a8);
}

id sub_1003C6E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSString a6, uint64_t a7, char a8)
{
  NSUUID v10;
  NSUUID v11;
  NSURL *v12;
  NSString v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  id v19;
  uint64_t v20;
  id v21;
  id v22;

  v10.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v11.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  if (a6)
    a6 = String._bridgeToObjectiveC()();
  URL._bridgeToObjectiveC()(v12);
  v15 = v14;
  v22 = 0;
  v16 = objc_msgSend(v21, "updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:", v10.super.isa, v11.super.isa, v13, a6, v14, a8 & 1, &v22);

  v17 = v22;
  if (v16)
    return v22;
  v19 = v22;
  _convertNSErrorToError(_:)(v17);

  return (id)swift_willThrow(v20);
}

uint64_t sub_1003C6FF4@<X0>(NSURL *a1@<X8>)
{
  void **v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  v2 = *v1;
  URL._bridgeToObjectiveC()(a1);
  v4 = v3;
  v5 = objc_msgSend(v2, "extractSha512Sum:", v3);

  if (!v5)
    return 0;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v6;
}

uint64_t sub_1003C7074(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_10001A630(&qword_1008485C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1003C90CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.URLMetadata.CodingKeys, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys, v11, v9, v10);
  LOBYTE(v18) = 0;
  v12 = type metadata accessor for URL(0);
  v13 = sub_10009FC50(&qword_100845CB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v18 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for RDSavedAttachment.URLMetadata(0) + 20));
    v17 = 1;
    v14 = sub_1000EAC40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for Data, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003C71DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v25 = a2;
  v29 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A630(&qword_1008485A8);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDSavedAttachment.URLMetadata(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10000A388(a1, v12);
  v13 = sub_1003C90CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.URLMetadata.CodingKeys, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys, v13, v12, v11);
  if (v2)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v23 = a1;
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  LOBYTE(v30) = 0;
  v16 = sub_10009FC50(&qword_100845CA0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v18 = v27;
  v17 = v28;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, &v30, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v31 = 1;
  v20 = sub_1000EABB4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v30, &type metadata for Data, &v31, v17, &type metadata for Data, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_OWORD *)(v14 + *(int *)(v8 + 20)) = v30;
  sub_1003C9110(v14, v25);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
  return sub_1003C8A84(v14);
}

uint64_t sub_1003C7464(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[2];

  v17 = a3;
  v8 = sub_10001A630(&qword_1008485B8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000A388(a1, v12);
  v14 = sub_1003C9088();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.ImageMetadata.CodingKeys, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys, v14, v12, v13);
  v19[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v4)
  {
    v19[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v19, v8);
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a4, &v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1003C75B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C90CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C75D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C90CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C7600@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003C71DC(a1, a2);
}

uint64_t sub_1003C7614(_QWORD *a1)
{
  return sub_1003C7074(a1);
}

uint64_t sub_1003C7628()
{
  return 0x657A6953656C6966;
}

void sub_1003C7640(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  char v7;

  if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v7 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953656C6966, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v7 = v6 ^ 1;
  }
  *a3 = v7 & 1;
}

uint64_t sub_1003C76D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C8D88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C76FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C8D88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C7724@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10001A630(&qword_100848588);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1003C8D88();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.FileMetadata.CodingKeys, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_1003C7834(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v3 = sub_10001A630(&qword_1008485C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10000A388(a1, v8);
  v10 = sub_1003C8D88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.FileMetadata.CodingKeys, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1003C791C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6874646977;
  if (*v0 != 1)
    v1 = 0x746867696568;
  if (*v0)
    return v1;
  else
    return 0x657A6953656C6966;
}

uint64_t sub_1003C7970@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003C8DCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003C7994(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C9088();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C79BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C9088();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C79E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1003C8F10(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1003C7A10(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1003C7464(a1, *v1, v1[1], v1[2]);
}

id sub_1003C7A2C()
{
  id *v0;

  return *v0;
}

id sub_1003C7A54(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::Int v42;
  double v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t ObjCClassFromMetadata;
  NSString v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  uint64_t v58;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  void *v66;
  Swift::String v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  Swift::String v79;
  Swift::String v80;
  NSString v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  void *v92;
  uint64_t v93;
  id v94;
  void *v95;
  void (*v96)(char *, uint64_t, __n128);
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  int v99;
  char *v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  NSString v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSString v121;
  uint64_t v122;
  id v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  NSURL *v127;
  void *v128;
  void *v129;
  Class isa;
  id v131;
  id v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void *v138;
  NSString v139;
  uint64_t v140;
  uint64_t v141;
  __n128 v142;
  void (*v143)(char *, uint64_t, __n128);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  NSString v157;
  __n128 v158;
  NSURL *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __n128 v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  NSString v173;
  __n128 v174;
  NSURL *v175;
  void *v176;
  char *v177;
  void *v178;
  id v179;
  id v180;
  id v181;
  void *v182;
  id v183;
  id v184;
  id v185;
  unint64_t v186;
  _QWORD v187[2];
  uint64_t v188;
  uint64_t v189;
  id v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  id v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  void (*v203)(char *, uint64_t, __n128);
  id v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v4);
  v197 = (char *)v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v196 = (char *)v187 - v7;
  v8 = type metadata accessor for URL(0);
  v198 = *(_QWORD *)(v8 - 8);
  v199 = v8;
  __chkstk_darwin(v8);
  v200 = (char *)v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)v187 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v203 = *(void (**)(char *, uint64_t, __n128))(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v187 - v17;
  __chkstk_darwin(v19);
  v201 = (char *)v187 - v20;
  v21 = type metadata accessor for RDSavedAttachment.URLMetadata(0);
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = objc_msgSend(a1, "remObjectID", v22);
  if (!v25)
  {
    v32 = (id)objc_opt_self(REMError);
    v50 = type metadata accessor for REMCDSavedAttachment();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v50);
    v52 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v52);

    swift_willThrow(v53);
    v54 = a2;
    goto LABEL_17;
  }
  v195 = v13;
  v204 = v25;
  v205 = a2;
  v211 = a1;
  v26 = objc_msgSend(a1, "account");
  if (!v26
    || (v27 = v26,
        v28 = objc_msgSend(v26, "remObjectID"),
        v27,
        (v194 = v28) == 0))
  {
    v32 = (id)objc_opt_self(REMError);
    v45 = type metadata accessor for REMCDSavedAttachment();
    v46 = swift_getObjCClassFromMetadata(v45);
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v46, v47);

    swift_willThrow(v48);
    v49 = v204;
LABEL_15:

    goto LABEL_16;
  }
  v29 = objc_msgSend(v211, "reminder");
  if (!v29
    || (v30 = v29, v31 = objc_msgSend(v29, "remObjectID"), v30, !v31))
  {
    v32 = (id)objc_opt_self(REMError);
    v55 = type metadata accessor for REMCDSavedAttachment();
    v56 = swift_getObjCClassFromMetadata(v55);
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v56, v57);

    swift_willThrow(v58);
    v49 = v194;
    goto LABEL_15;
  }
  v32 = v211;
  v33 = objc_msgSend(v211, "metadata");
  if (!v33)
  {
    v60 = v31;
    v61 = v32;
    v32 = (id)objc_opt_self(REMError);
    v62 = type metadata accessor for REMCDSavedAttachment();
    v63 = swift_getObjCClassFromMetadata(v62);
    v64 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v63, v64);

    swift_willThrow(v65);
    goto LABEL_16;
  }
  v34 = v33;
  v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v192 = v36;
  v193 = v35;

  v37 = objc_msgSend(v32, "attachmentTypeRawValue");
  if (!v37)
  {
LABEL_19:
    v66 = v31;
    v206 = 0;
    v207 = 0xE000000000000000;
    _StringGuts.grow(_:)(135);
    v67._countAndFlagsBits = 0xD000000000000084;
    v67._object = (void *)0x8000000100702AB0;
    String.append(_:)(v67);
    v68 = objc_msgSend(v32, "attachmentTypeRawValue");
    if (v68)
    {
      v69 = v68;
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v72 = v71;

    }
    else
    {
      v70 = 0;
      v72 = 0;
    }
    v54 = v205;
    v73 = v192;
    v74 = (void *)objc_opt_self(REMError);
    v209 = v70;
    v210 = v72;
    v75 = sub_10001A630((uint64_t *)&unk_10083A370);
    v76 = Optional.descriptionOrNil.getter(v75);
    v78 = v77;
    swift_bridgeObjectRelease(v72);
    v79._countAndFlagsBits = v76;
    v79._object = v78;
    String.append(_:)(v79);
    swift_bridgeObjectRelease(v78);
    v80._countAndFlagsBits = 125;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    v32 = (id)v207;
    v81 = String._bridgeToObjectiveC()();
    objc_msgSend(v74, "invalidParameterErrorWithDescription:", v81, swift_bridgeObjectRelease(v32).n128_f64[0]);

    swift_willThrow(v82);
    sub_1000A71C8(v193, v73);

    goto LABEL_17;
  }
  v38 = v37;
  v190 = v31;
  v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v41._countAndFlagsBits = v191;
  v41._object = v40;
  v42 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCC70, v41);
  *(_QWORD *)&v43 = swift_bridgeObjectRelease(v40).n128_u64[0];
  if (v42)
  {
    if (v42 == 1)
    {
      v44 = 0;
      v31 = v190;
      goto LABEL_26;
    }
    v31 = v190;
    if (v42 == 2)
    {
      v44 = 1;
LABEL_26:
      v90 = objc_msgSend(v32, "uti", v43);
      if (v90)
      {
        v91 = v90;
        v92 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v191 = v93;

        v94 = objc_msgSend(v32, "identifier");
        if (v94)
        {
          v95 = v94;
          v190 = v92;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

          v96 = v203;
          v97 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v203 + 4);
          v98 = v195;
          v97(v12, v18, v195);
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v96 + 7))(v12, 0, 1, v98);
          v99 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v96 + 6))(v12, 1, v98);
          v54 = v205;
          if (v99 != 1)
          {
            v100 = v201;
            v97(v201, v12, v98);
            v32 = v211;
            v101 = objc_msgSend(v211, "fileName");
            if (!v101)
            {
              swift_bridgeObjectRelease(v191);
              v134 = v32;
              v32 = (id)objc_opt_self(REMError);
              v135 = type metadata accessor for REMCDSavedAttachment();
              v136 = swift_getObjCClassFromMetadata(v135);
              v137 = v100;
              v138 = v31;
              v139 = String._bridgeToObjectiveC()();
              objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v136, v139);

              swift_willThrow(v140);
              sub_1000A71C8(v193, v192);

              (*((void (**)(char *, uint64_t))v203 + 1))(v137, v98);
              goto LABEL_17;
            }
            v102 = v101;
            v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
            v189 = v103;

            v104 = v54[4];
            v105 = v54;
            v106 = v54[3];
            v187[1] = sub_10000A388(v105, v106);
            v107 = objc_msgSend(v194, "uuid");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v107);

            v108 = objc_msgSend(v32, "sha512Sum");
            if (v108)
            {
              v109 = v108;
              v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
              v112 = v111;

            }
            else
            {
              v110 = 0;
              v112 = 0;
            }
            v141 = v189;
            (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 8))(v201, v15, v188, v189, v110, v112, v106, v104);
            swift_bridgeObjectRelease(v141);
            v142 = swift_bridgeObjectRelease(v112);
            v143 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v203 + 1);
            v143(v15, v195, v142);
            if ((v44 & 1) != 0)
            {
              v144 = type metadata accessor for JSONDecoder(0);
              v145 = swift_allocObject(v144, *(unsigned int *)(v144 + 48), *(unsigned __int16 *)(v144 + 52));
              v146 = JSONDecoder.init()(v145);
              v147 = sub_1003C8A40();
              v148 = v192;
              v149 = v193;
              v150 = v202;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDSavedAttachment.ImageMetadata, v193, v192, &type metadata for RDSavedAttachment.ImageMetadata, v147);
              if (!v150)
              {
                v203 = v143;
                swift_release(v146);
                v151 = v207;
                v202 = v206;
                v152 = v208;
                v153 = v198;
                v154 = v199;
                v155 = v196;
                (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v196, v200, v199);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v155, 0, 1, v154);
                v156 = v191;
                v157 = String._bridgeToObjectiveC()();
                v158 = swift_bridgeObjectRelease(v156);
                v160 = v31;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v153 + 48))(v155, 1, v154, v158) == 1)
                {
                  v161 = 0;
                }
                else
                {
                  v177 = v155;
                  URL._bridgeToObjectiveC()(v159);
                  v161 = v178;
                  (*(void (**)(char *, uint64_t))(v153 + 8))(v177, v154);
                }
                v179 = objc_allocWithZone((Class)REMImageAttachment);
                v186 = v151;
                v180 = v204;
                v181 = v194;
                v32 = objc_msgSend(v179, "initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:width:height:", v204, v194, v160, v157, v202, v161, 0, v186, v152);

                sub_1000A71C8(v193, v192);
                (*(void (**)(char *, uint64_t))(v153 + 8))(v200, v154);
                ((void (*)(char *, uint64_t))v203)(v201, v195);
LABEL_53:
                v54 = v205;
                goto LABEL_17;
              }
            }
            else
            {
              v162 = type metadata accessor for JSONDecoder(0);
              v163 = swift_allocObject(v162, *(unsigned int *)(v162 + 48), *(unsigned __int16 *)(v162 + 52));
              v146 = JSONDecoder.init()(v163);
              v164 = sub_1003C89FC();
              v148 = v192;
              v149 = v193;
              v165 = v202;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDSavedAttachment.FileMetadata, v193, v192, &type metadata for RDSavedAttachment.FileMetadata, v164);
              if (!v165)
              {
                v203 = v143;
                v167 = v31;
                swift_release(v146);
                v168 = v206;
                v170 = v197;
                v169 = v198;
                v171 = v199;
                (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v197, v200, v199);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v170, 0, 1, v171);
                v172 = v191;
                v173 = String._bridgeToObjectiveC()();
                v174 = swift_bridgeObjectRelease(v172);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v169 + 48))(v170, 1, v171, v174) == 1)
                {
                  v176 = 0;
                }
                else
                {
                  URL._bridgeToObjectiveC()(v175);
                  v176 = v182;
                  (*(void (**)(char *, uint64_t))(v169 + 8))(v170, v171);
                }
                v183 = objc_allocWithZone((Class)REMFileAttachment);
                v184 = v204;
                v185 = v194;
                v32 = objc_msgSend(v183, "initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:", v204, v194, v167, v173, v168, v176, 0);

                sub_1000A71C8(v193, v192);
                (*(void (**)(char *, uint64_t))(v169 + 8))(v200, v171);
                ((void (*)(char *, uint64_t))v203)(v201, v195);
                goto LABEL_53;
              }
            }

            sub_1000A71C8(v149, v148);
            swift_release(v146);
            v166 = swift_bridgeObjectRelease(v191);
            (*(void (**)(char *, uint64_t, __n128))(v198 + 8))(v200, v199, v166);
            ((void (*)(char *, uint64_t))v143)(v201, v195);
            goto LABEL_16;
          }
        }
        else
        {
          (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v203 + 7))(v12, 1, 1, v195);
          v54 = v205;
        }
        swift_bridgeObjectRelease(v191);
        sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
        v32 = (id)objc_opt_self(REMError);
        v119 = type metadata accessor for REMCDSavedAttachment();
        v120 = swift_getObjCClassFromMetadata(v119);
        v121 = String._bridgeToObjectiveC()();
        objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v120, v121);

        swift_willThrow(v122);
        sub_1000A71C8(v193, v192);

        goto LABEL_17;
      }
      v113 = v31;
      v114 = v32;
      v32 = (id)objc_opt_self(REMError);
      v115 = type metadata accessor for REMCDSavedAttachment();
      v116 = swift_getObjCClassFromMetadata(v115);
      v117 = String._bridgeToObjectiveC()();
      objc_msgSend(v32, "unexpectedNilPropertyWithClass:property:", v116, v117);

      swift_willThrow(v118);
      sub_1000A71C8(v193, v192);

LABEL_16:
      v54 = v205;
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  v83 = type metadata accessor for JSONDecoder(0);
  v84 = swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
  v85 = JSONDecoder.init()(v84);
  v86 = sub_10009FC50(&qword_1008484D8, type metadata accessor for RDSavedAttachment.URLMetadata, (uint64_t)&unk_1006B941C);
  v87 = v192;
  v88 = v193;
  v89 = v202;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v21, v193, v192, v21, v86);
  if (v89)
  {

    sub_1000A71C8(v88, v87);
    swift_release(v85);
    goto LABEL_16;
  }
  v123 = v190;
  swift_release(v85);
  v124 = (uint64_t *)&v24[*(int *)(v21 + 20)];
  v125 = *v124;
  v126 = v124[1];
  sub_1000A70D0(*v124, v126);
  URL._bridgeToObjectiveC()(v127);
  v129 = v128;
  if (v126 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(v125, v126);
  }
  v54 = v205;
  v131 = objc_allocWithZone((Class)REMURLAttachment);
  v132 = v204;
  v133 = v194;
  v32 = objc_msgSend(v131, "initWithObjectID:accountID:reminderID:url:metadata:", v204, v194, v123, v129, isa);

  sub_1000A71C8(v193, v192);
  sub_1003C8A84((uint64_t)v24);
LABEL_17:
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v54);
  return v32;
}

uint64_t type metadata accessor for RDSavedAttachment.URLMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100848550;
  if (!qword_100848550)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSavedAttachment.URLMetadata);
  return result;
}

unint64_t sub_1003C89FC()
{
  unint64_t result;

  result = qword_1008484C8;
  if (!qword_1008484C8)
  {
    result = swift_getWitnessTable(&unk_1006B946C, &type metadata for RDSavedAttachment.FileMetadata);
    atomic_store(result, (unint64_t *)&qword_1008484C8);
  }
  return result;
}

unint64_t sub_1003C8A40()
{
  unint64_t result;

  result = qword_1008484D0;
  if (!qword_1008484D0)
  {
    result = swift_getWitnessTable(&unk_1006B9444, &type metadata for RDSavedAttachment.ImageMetadata);
    atomic_store(result, (unint64_t *)&qword_1008484D0);
  }
  return result;
}

uint64_t sub_1003C8A84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDSavedAttachment.URLMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1003C8AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008412F0;
  if (!qword_1008412F0)
  {
    v1 = objc_opt_self(REMFileAttachment);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1008412F0);
  }
  return result;
}

unint64_t sub_1003C8AFC()
{
  unint64_t result;

  result = qword_1008484E0;
  if (!qword_1008484E0)
  {
    result = swift_getWitnessTable(&unk_1006B93F4, &type metadata for RDSavedAttachment.ImageMetadata);
    atomic_store(result, (unint64_t *)&qword_1008484E0);
  }
  return result;
}

unint64_t sub_1003C8B40()
{
  unint64_t result;

  result = qword_1008484E8;
  if (!qword_1008484E8)
  {
    result = swift_getWitnessTable(&unk_1006B93CC, &type metadata for RDSavedAttachment.FileMetadata);
    atomic_store(result, (unint64_t *)&qword_1008484E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedAttachment.ImageMetadata(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment.ImageMetadata(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.ImageMetadata()
{
  return &type metadata for RDSavedAttachment.ImageMetadata;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.FileMetadata()
{
  return &type metadata for RDSavedAttachment.FileMetadata;
}

uint64_t sub_1003C8BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C8BFC);
}

uint64_t sub_1003C8BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_1003C8C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C8C90);
}

uint64_t sub_1003C8C90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_1003C8D18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006B9370;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1003C8D88()
{
  unint64_t result;

  result = qword_100848590;
  if (!qword_100848590)
  {
    result = swift_getWitnessTable(&unk_1006B9778, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100848590);
  }
  return result;
}

uint64_t sub_1003C8DCC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953656C6966, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1003C8F10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v2 = sub_10001A630(&qword_100848598);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10000A388(a1, v6);
  v8 = sub_1003C9088();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedAttachment.ImageMetadata.CodingKeys, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys, v8, v6, v7);
  v14 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v2);
  v13 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v13, v2);
  v12 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v12, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v9;
}

unint64_t sub_1003C9088()
{
  unint64_t result;

  result = qword_1008485A0;
  if (!qword_1008485A0)
  {
    result = swift_getWitnessTable(&unk_1006B9728, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485A0);
  }
  return result;
}

unint64_t sub_1003C90CC()
{
  unint64_t result;

  result = qword_1008485B0;
  if (!qword_1008485B0)
  {
    result = swift_getWitnessTable(&unk_1006B96D8, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485B0);
  }
  return result;
}

uint64_t sub_1003C9110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSavedAttachment.URLMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment.URLMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003C91A0 + 4 * byte_1006B92E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003C91D4 + 4 * asc_1006B92E0[v4]))();
}

uint64_t sub_1003C91D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C91DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C91E4);
  return result;
}

uint64_t sub_1003C91F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C91F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003C91FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C9204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.URLMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.URLMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment.ImageMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003C926C + 4 * byte_1006B92EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003C92A0 + 4 * byte_1006B92EA[v4]))();
}

uint64_t sub_1003C92A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C92A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C92B0);
  return result;
}

uint64_t sub_1003C92BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C92C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003C92C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C92D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.ImageMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t assignWithTake for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAttachment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1003C9420(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1003C9428(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment()
{
  return &type metadata for RDSavedAttachment;
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment.FileMetadata.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003C9480 + 4 * byte_1006B92F4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003C94A0 + 4 * byte_1006B92F9[v4]))();
}

_BYTE *sub_1003C9480(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003C94A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003C94A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003C94B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003C94B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003C94C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.FileMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.FileMetadata.CodingKeys;
}

unint64_t sub_1003C94E0()
{
  unint64_t result;

  result = qword_1008485D0;
  if (!qword_1008485D0)
  {
    result = swift_getWitnessTable(&unk_1006B9530, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485D0);
  }
  return result;
}

unint64_t sub_1003C9528()
{
  unint64_t result;

  result = qword_1008485D8;
  if (!qword_1008485D8)
  {
    result = swift_getWitnessTable(&unk_1006B95F8, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485D8);
  }
  return result;
}

unint64_t sub_1003C9570()
{
  unint64_t result;

  result = qword_1008485E0;
  if (!qword_1008485E0)
  {
    result = swift_getWitnessTable(&unk_1006B96B0, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485E0);
  }
  return result;
}

unint64_t sub_1003C95B8()
{
  unint64_t result;

  result = qword_1008485E8;
  if (!qword_1008485E8)
  {
    result = swift_getWitnessTable(&unk_1006B9620, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485E8);
  }
  return result;
}

unint64_t sub_1003C9600()
{
  unint64_t result;

  result = qword_1008485F0;
  if (!qword_1008485F0)
  {
    result = swift_getWitnessTable(&unk_1006B9648, &type metadata for RDSavedAttachment.URLMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485F0);
  }
  return result;
}

unint64_t sub_1003C9648()
{
  unint64_t result;

  result = qword_1008485F8;
  if (!qword_1008485F8)
  {
    result = swift_getWitnessTable(&unk_1006B9568, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008485F8);
  }
  return result;
}

unint64_t sub_1003C9690()
{
  unint64_t result;

  result = qword_100848600;
  if (!qword_100848600)
  {
    result = swift_getWitnessTable(&unk_1006B9590, &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100848600);
  }
  return result;
}

unint64_t sub_1003C96D8()
{
  unint64_t result;

  result = qword_100848608;
  if (!qword_100848608)
  {
    result = swift_getWitnessTable(&unk_1006B94A0, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100848608);
  }
  return result;
}

unint64_t sub_1003C9720()
{
  unint64_t result;

  result = qword_100848610;
  if (!qword_100848610)
  {
    result = swift_getWitnessTable(&unk_1006B94C8, &type metadata for RDSavedAttachment.FileMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100848610);
  }
  return result;
}

uint64_t sub_1003C9768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848618);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848618);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003C97F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "type", v4);
  if ((unint64_t)v7 >= 5)
  {
    if (qword_1008373D8 != -1)
      swift_once(&qword_1008373D8, sub_1003C9768);
    v10 = sub_10001AAA8(v2, (uint64_t)qword_100848618);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v10, v2);
    v11 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v11, v12);
    __break(1u);
  }
  else
  {
    v8 = (uint64_t)*(&off_1007F23E0 + (_QWORD)v7);
    sub_1001A54DC();
    KeyPath = swift_getKeyPath(v8);
    NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, objc_msgSend(v1, "ascending"));
  }
}

uint64_t sub_1003C995C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "accountID");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1003C99E0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011D420(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setAccountID:", isa);

}

void sub_1003C9ABC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t KeyPath;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  NSString v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t ObjCClassFromMetadata;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  Class isa;
  char **v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  char *v64;
  Class v65;
  id v66;
  uint64_t v67;
  Class v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  char *v75;
  uint64_t v76;
  id v77;
  _QWORD *v78;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a2, "managedObjectContext", v12);
  if (!v15)
  {
    v36 = (void *)objc_opt_self(REMError);
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "internalErrorWithDebugDescription:", v37);

    swift_willThrow(v38);
    return;
  }
  v16 = v15;
  v17 = objc_msgSend(a2, "remObjectID");
  if (!v17)
  {
    v39 = (void *)objc_opt_self(REMError);
    v40 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v40);
    v42 = String._bridgeToObjectiveC()();
    objc_msgSend(v39, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v42);

    swift_willThrow(v43);
    return;
  }
  v18 = v17;
  v74 = a3;
  v75 = v10;
  v76 = a1;
  v77 = v16;
  v78 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006B98D8);
  v20 = v18;
  v21 = objc_msgSend(v20, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
  v22 = sub_1002E746C(KeyPath, (uint64_t)v14);
  v23 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v25 = v78[2];
  v24 = v78[3];
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
  specialized Array._endMutation()(v26);

  v27 = (void *)sub_10000D2BC(v78);
  v28 = type metadata accessor for REMCDAccountListData();
  v29 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v30 = (void *)swift_getObjCClassFromMetadata(v28);
  v31 = objc_msgSend(v30, "entity");
  objc_msgSend(v29, "setEntity:", v31);

  v32 = v27;
  objc_msgSend(v29, "setAffectedStores:", 0);
  objc_msgSend(v29, "setPredicate:", v27);
  v33 = v28;
  v34 = v77;
  v35 = NSManagedObjectContext.fetch<A>(_:)(v29, v33);
  if (v3)
  {

    return;
  }
  v44 = v35;
  v72 = v20;
  v73 = v32;
  v45 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
  v46 = v76;
  swift_bridgeObjectRetain(v76);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v71 = objc_msgSend(v45, "initWithOrderedIdentifiers:", isa, swift_bridgeObjectRelease(v46).n128_f64[0]);

  if (!((unint64_t)v44 >> 62))
  {
    v48 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_11;
LABEL_22:
    v56 = objc_msgSend(v30, v48[214], swift_bridgeObjectRelease(v44).n128_f64[0]);
    v57 = objc_allocWithZone((Class)v30);
    v58 = v77;
    v59 = objc_msgSend(v57, "initWithEntity:insertIntoManagedObjectContext:", v56, v77);
    v60 = v74;
    v61 = v59;
    objc_msgSend(v58, "assignObject:toPersistentStore:", v61, v60);

    v62 = v72;
    v63 = objc_msgSend(v72, "uuid");
    v64 = v75;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v63);

    v65 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v64, v7);
    objc_msgSend(v61, "setAccountID:", v65);

    v66 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
    v67 = v76;
    swift_bridgeObjectRetain(v76);
    v68 = Array._bridgeToObjectiveC()().super.isa;
    v69 = objc_msgSend(v66, "initWithOrderedIdentifiers:", v68, swift_bridgeObjectRelease(v67).n128_f64[0]);

    objc_msgSend(v61, "setOrderedIdentifierMap:", v69);
    v52 = v77;
    v77 = v62;
    v49 = v69;
    v53 = v71;
    goto LABEL_23;
  }
  if (v44 < 0)
    v54 = v44;
  else
    v54 = v44 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v44);
  v55 = _CocoaArrayWrapper.endIndex.getter(v54);
  swift_bridgeObjectRelease(v44);
  v48 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  if (!v55)
    goto LABEL_22;
LABEL_11:
  if ((v44 & 0xC000000000000001) != 0)
  {
    v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
    v49 = v72;
    goto LABEL_14;
  }
  v49 = v72;
  if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v50 = *(id *)(v44 + 32);
LABEL_14:
    v51 = objc_msgSend(v50, "orderedIdentifierMap", swift_bridgeObjectRelease(v44).n128_f64[0]);
    if (!v51)
    {
      v53 = v71;
LABEL_24:

      return;
    }
    v52 = v51;
    sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
    v53 = v71;
    if ((static NSObject.== infix(_:_:)(v52) & 1) == 0)
    {
      v53 = v53;
      objc_msgSend(v50, "setOrderedIdentifierMap:", v53);

      v52 = v77;
      v77 = v73;
      v73 = v29;
      v29 = v53;
    }
LABEL_23:

    goto LABEL_24;
  }
  __break(1u);
}

uint64_t sub_1003CA13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848630);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848630);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1003CA1CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v2 = v1;
  v2[2] = &_swiftEmptyDictionarySingleton;
  v4 = objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
  v2[3] = v4;
  v2[5] = 0;
  swift_unknownObjectWeakInit(v2 + 4, 0);
  objc_msgSend(v4, "setCountLimit:", a1);
  if (qword_1008373E0 != -1)
    swift_once(&qword_1008373E0, sub_1003CA13C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100848630);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDManualSortIDCacheContext > initialized", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return v2;
}

uint64_t sub_1003CA2F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_100008EFC(v0 + 32);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDManualSortIDCacheContext()
{
  return objc_opt_self(_TtC7remindd26RDManualSortIDCacheContext);
}

uint64_t sub_1003CA348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848700);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848700);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003CA3E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B4C60(*a1, *a2);
}

Swift::Int sub_1003CA3EC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB00000000656D61;
  v3 = 0x4E79616C70736964;
  if (v1 != 1)
  {
    v3 = 0x73694C7472616D73;
    v2 = 0xE900000000000074;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E6F697461657263;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC00000065746144;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

double sub_1003CA4A0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double result;

  v2 = 0xEB00000000656D61;
  v3 = 0x4E79616C70736964;
  if (*v1 != 1)
  {
    v3 = 0x73694C7472616D73;
    v2 = 0xE900000000000074;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E6F697461657263;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEC00000065746144;
  String.hash(into:)(a1, v4, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_1003CA530(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB00000000656D61;
  v4 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    v4 = 0x73694C7472616D73;
    v3 = 0xE900000000000074;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E6F697461657263;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEC00000065746144;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1003CA5E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003CC21C(*a1);
  *a2 = result;
  return result;
}

void sub_1003CA60C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000065746144;
  v4 = 0xEB00000000656D61;
  v5 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    v5 = 0x73694C7472616D73;
    v4 = 0xE900000000000074;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E6F697461657263;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1003CA680(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0C78;
}

_UNKNOWN **static REMCDSmartListSection.recordTypes()()
{
  return &off_1007E0CA0;
}

uint64_t static REMCDSmartListSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDSmartListSection();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDSmartListSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v11);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_1008373E8 != -1)
        swift_once(&qword_1008373E8, sub_1003CA348);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_100848700);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDSmartListSection.recordType()()
{
  void *v0;
  uint64_t v1;
  Swift::String result;

  v0 = (void *)0x80000001006F4F70;
  v1 = 0xD000000000000010;
  result._object = v0;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall REMCDSmartListSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  NSString v4;
  id v5;
  NSString v6;
  double v7;
  NSString v8;
  double v9;
  int v10;
  int v11;
  id v12;
  objc_class *v13;
  id v14;
  void *v15;
  char v16;
  objc_super v17;

  v4 = String._bridgeToObjectiveC()();
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  objc_msgSendSuper2(&v17, "mergeDataFromRecord:accountID:", from.super.isa, v4);

  v5 = -[objc_class recordID](from.super.isa, "recordID");
  v6 = objc_msgSend(v5, "recordName");

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v7 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v8 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v6, v7);

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v8, v9);

  v10 = objc_msgSend(v2, "mergeDataRevertedLocallyMarkedForDeletion");
  v11 = objc_msgSend(v2, "mergeDataRefusedToMergeMarkedForDeletion");
  v16 = 0;
  v12 = v2;
  v13 = from.super.isa;
  sub_100449F1C(v13, v10, v11, v12, v12, v13, &v16);

  if (v16 == 1)
  {
    v14 = objc_msgSend(v12, "smartList");
    if (v14)
    {
      v15 = v14;
      if ((objc_msgSend(v14, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        _sSo14REMCDSmartListC7reminddE19sortChildrenObjectsyyF_0();

    }
  }
}

void sub_1003CAE38(_BYTE *a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  id v29;
  NSString v30;
  NSString v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  id v37;
  void *v38;
  id v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  char v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;

  v65 = a4;
  v7 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v62 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v63);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v64 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v62 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v62 - v23;
  v25 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v26 = __chkstk_darwin(v25).n128_u64[0];
  v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      v29 = objc_msgSend(a3, "encryptedValues", v26);
      v30 = String._bridgeToObjectiveC()();
      v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);
      swift_unknownObjectRelease(v29);

      if (v31)
      {
        v68 = v31;
        v32 = sub_10001A630(&qword_1008398E0);
        if ((swift_dynamicCast(&v67, &v68, v32, &type metadata for String, 6) & 1) != 0)
        {
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          v31 = 0;
        }
      }
      objc_msgSend(a2, "setDisplayName:", v31);

      return;
    }
    v37 = objc_msgSend(a2, "smartList", v26);
    if (v37)
    {
      v38 = v37;
      v39 = objc_msgSend(v37, "identifier");

      if (v39)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

        v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
        v40(v21, 0, 1, v7);
      }
      else
      {
        v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
        v40(v21, 1, 1, v7);
      }
      sub_1000A5CA8((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
      v40(v24, 1, 1, v7);
    }
    v41 = CKRecord.subscript.getter(0x73694C7472616D53, 0xE900000000000074);
    if (v41)
    {
      v42 = v41;
      v43 = objc_opt_self(CKReference);
      v44 = (void *)swift_dynamicCastObjCClass(v42, v43);
      if (!v44)
        swift_unknownObjectRelease(v42);
    }
    else
    {
      v44 = 0;
    }
    v45 = sub_1000C9670(v44);
    if (v45)
    {
      v46 = v45;
      v47 = objc_opt_self(REMCDSmartList);
      v48 = (void *)swift_dynamicCastObjCClass(v46, v47);
      if (!v48)

    }
    else
    {
      v48 = 0;
    }

    objc_msgSend(a2, "setSmartList:", v48);
    v49 = objc_msgSend(a2, "smartList");
    if (v49)
    {
      v50 = v49;
      v51 = objc_msgSend(v49, "identifier");

      if (v51)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

        v52 = 0;
      }
      else
      {
        v52 = 1;
      }
      v53 = (uint64_t)v64;
      v40(v15, v52, 1, v7);
      sub_1000A5CA8((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v40(v18, 1, 1, v7);
      v53 = (uint64_t)v64;
    }
    v54 = (uint64_t)&v10[*(int *)(v63 + 48)];
    sub_10011D420((uint64_t)v18, (uint64_t)v10);
    sub_10011D420((uint64_t)v24, v54);
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
    if (v55((uint64_t)v10, 1, v7) == 1)
    {
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
      if (v55(v54, 1, v7) == 1)
      {
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
        v56 = 0;
LABEL_38:
        *v65 = v56 & 1;
        return;
      }
    }
    else
    {
      sub_10011D420((uint64_t)v10, v53);
      if (v55(v54, 1, v7) != 1)
      {
        v57 = v66;
        v58 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v62, v54, v7);
        v59 = sub_10011D468();
        v60 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v58, v7, v59);
        v61 = *(void (**)(char *, uint64_t))(v57 + 8);
        v61(v58, v7);
        sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
        sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
        v61((char *)v53, v7);
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
        v56 = v60 ^ 1;
        goto LABEL_38;
      }
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v53, v7);
    }
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_10083B370);
    v56 = 1;
    goto LABEL_38;
  }
  v33 = sub_10011D06C();
  v34 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v33, v34, &protocol witness table for Date);
  v35 = *(_QWORD *)(v34 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v34) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v34);
  }
  objc_msgSend(a2, "setCreationDate:", isa);

}

CKRecord_optional __swiftcall REMCDSmartListSection.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  Swift::Bool v9;
  id v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  char *v20;
  char *v21;
  _UNKNOWN **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t ObjectType;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  objc_super v42;
  CKRecord_optional result;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - v6;
  v8 = (objc_class *)type metadata accessor for REMCDSmartListSection();
  v42.receiver = v0;
  v42.super_class = v8;
  v10 = objc_msgSendSuper2(&v42, "newlyCreatedRecord");
  if (v10)
  {
    v11 = 0;
    v12 = &off_1007E0D00;
    v13 = (uint64_t *)&unk_1008380D0;
    v38 = v0;
    do
    {
      if (!*((_BYTE *)v12 + v11 + 32))
      {
        v27 = objc_msgSend(v1, "creationDate");
        if (v27)
        {
          v28 = v27;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

          v29 = type metadata accessor for Date(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 0, 1, v29);
        }
        else
        {
          v29 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 1, 1, v29);
        }
        sub_1000A5CA8((uint64_t)v4, (uint64_t)v7, v13);
        type metadata accessor for Date(0);
        v35 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v7, 1, v29) == 1)
        {
          sub_10000882C((uint64_t)v7, v13);
          v39 = 0u;
          v40 = 0u;
          v41 = 0;
        }
        else
        {
          *((_QWORD *)&v40 + 1) = v29;
          v41 = &protocol witness table for Date;
          v14 = sub_1000087F0(&v39);
          (*(void (**)(_QWORD *, char *, uint64_t))(v35 + 32))(v14, v7, v29);
        }
        v15 = sub_10011D06C();
        CKRecordKeyValueSetting.subscript.setter(&v39, 0x6E6F697461657243, 0xEC00000065746144, v15);
        goto LABEL_5;
      }
      if (*((_BYTE *)v12 + v11 + 32) == 1)
      {
        v16 = objc_msgSend(v10, "encryptedValues");
        v17 = objc_msgSend(v1, "displayName");
        if (v17)
        {
          v18 = v17;
          v19 = v10;
          v20 = v7;
          v21 = v4;
          v22 = v12;
          v23 = v13;
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v26 = v25;

          *((_QWORD *)&v40 + 1) = &type metadata for String;
          v41 = &protocol witness table for String;
          *(_QWORD *)&v39 = v24;
          *((_QWORD *)&v39 + 1) = v26;
          v13 = v23;
          v12 = v22;
          v4 = v21;
          v7 = v20;
          v10 = v19;
          v1 = v38;
        }
        else
        {
          v41 = 0;
          v39 = 0u;
          v40 = 0u;
        }
        ObjectType = swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter(&v39, 0x4E79616C70736944, 0xEB00000000656D61, ObjectType);
        swift_unknownObjectRelease(v16);
        goto LABEL_5;
      }
      if ((objc_msgSend(v1, "markedForDeletion") & 1) == 0)
      {
        v31 = objc_msgSend(v1, "smartList");
        v30 = v31;
        if (!v31)
          goto LABEL_18;
        v32 = objc_msgSend(v31, "recordID");

        if (v32)
        {
          v30 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v32);

          if (v30)
            v33 = v30;
          goto LABEL_18;
        }
      }
      v30 = 0;
LABEL_18:
      CKRecord.subscript.setter(v30, 0x73694C7472616D53, 0xE900000000000074);

LABEL_5:
      ++v11;
    }
    while (v11 != 3);
  }
  v36 = (objc_class *)v10;
  result.value.super.isa = v36;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall REMCDSmartListSection.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_1008373E8 != -1)
    swift_once(&qword_1008373E8, sub_1003CA348);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100848700);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630(&qword_100847198);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDSmartListSection.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_1008373E8 != -1)
    swift_once(&qword_1008373E8, sub_1003CA348);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100848700);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = 7104878;
  v7 = swift_slowAlloc(22, -1);
  v8 = swift_slowAlloc(64, -1);
  v48 = v8;
  *(_DWORD *)v7 = 136446466;
  v9 = objc_msgSend(v2, "remObjectID");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "description");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE300000000000000;
    v12 = 7104878;
  }
  v47 = sub_10001A820(v12, v14, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  *(_WORD *)(v7 + 12) = 2082;
  v16 = objc_msgSend(v2, "smartList", v15);
  if (!v16)
    goto LABEL_12;
  v17 = v16;
  v18 = objc_msgSend(v16, "remObjectID");
  if (!v18)
  {

LABEL_12:
    v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "description");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v22 = v21;

LABEL_13:
  v5 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v47 = sub_10001A820(v6, v22, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in smart list {smartListSectionID: %{public}s, smartListID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

LABEL_14:
  v23 = objc_msgSend(v2, v5[274]);
  if (!v23)
    return;
  v24 = v23;
  if (objc_msgSend(v23, "markedForDeletion")
    && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
  {
    v25 = v2;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (!os_log_type_enabled(v26, v27))
    {

LABEL_28:
      objc_msgSend(v25, "markForDeletion");
      goto LABEL_29;
    }
    v28 = v5;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v48 = v30;
    *(_DWORD *)v29 = 136446466;
    v31 = objc_msgSend(v25, "remObjectID");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "description");

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }
    v47 = sub_10001A820(v34, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

    *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v29 + 12) = 2082;
    v38 = objc_msgSend(v25, v28[274], v37);
    v46 = v30;
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "remObjectID");
      if (v40)
      {
        v41 = v40;
        v42 = objc_msgSend(v40, "description");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

LABEL_27:
        v47 = sub_10001A820(v43, v45, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Smart List is marked for deletion but section in smart list is not {smartListSectionID: %{public}s, smartListID: %{public}s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        goto LABEL_28;
      }

    }
    v45 = 0xE300000000000000;
    v43 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  objc_msgSend(v24, "forcePushToCloud");

}

unint64_t sub_1003CC21C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E0C10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t _s7remindd21REMCDSmartListSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008373E8 != -1)
    swift_once(&qword_1008373E8, sub_1003CA348);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100848700);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100847198);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd21REMCDSmartListSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008373E8 != -1)
    swift_once(&qword_1008373E8, sub_1003CA348);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_100848700);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630(&qword_100847198);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s6FieldsOwst_4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003CC628 + 4 * byte_1006B99DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003CC65C + 4 * byte_1006B99D8[v4]))();
}

uint64_t sub_1003CC65C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CC664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003CC66CLL);
  return result;
}

uint64_t sub_1003CC678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003CC680);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003CC684(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CC68C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_4()
{
  return &_s6FieldsON_4;
}

unint64_t sub_1003CC6A8(uint64_t a1)
{
  unint64_t result;

  result = sub_1003CC6CC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003CC6CC()
{
  unint64_t result;

  result = qword_100848720;
  if (!qword_100848720)
  {
    result = swift_getWitnessTable(&unk_1006B9A28, &_s6FieldsON_4);
    atomic_store(result, (unint64_t *)&qword_100848720);
  }
  return result;
}

unint64_t sub_1003CC710(uint64_t a1)
{
  unint64_t result;

  result = sub_1003CC734();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003CC734()
{
  unint64_t result;

  result = qword_100848728;
  if (!qword_100848728)
  {
    result = swift_getWitnessTable(&unk_1006B99F0, &_s6FieldsON_4);
    atomic_store(result, (unint64_t *)&qword_100848728);
  }
  return result;
}

unint64_t sub_1003CC77C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100848730;
  if (!qword_100848730)
  {
    v1 = sub_1000A5A94(&qword_100848738);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100848730);
  }
  return result;
}

unint64_t sub_1003CC7CC()
{
  unint64_t result;

  result = qword_100848740;
  if (!qword_100848740)
  {
    result = swift_getWitnessTable(&unk_1006B9AD8, &_s6FieldsON_4);
    atomic_store(result, (unint64_t *)&qword_100848740);
  }
  return result;
}

uint64_t sub_1003CC810(uint64_t a1, uint64_t a2)
{
  return sub_1003CCC84(a1, a2, (void (*)(_QWORD *__return_ptr))sub_10019A378);
}

uint64_t sub_1003CC81C()
{
  char *v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double (*v5)(uint64_t, uint64_t);
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  ObjectType = swift_getObjectType();
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32];
  sub_10000A388(&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations], v2);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(double (**)(uint64_t, uint64_t))(v4 + 8);
  v6 = v0;
  v7 = v5(v2, v4);
  v12 = ObjectType;
  v13 = &off_1007E8708;
  *(_QWORD *)&v11 = v6;
  v8 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v9 = swift_allocObject(v8, 64, 7);
  sub_10001BCA8(&v11, v9 + 16);
  *(double *)(v9 + 56) = v7;
  v12 = v8;
  v13 = &off_1007F54C8;
  *(_QWORD *)&v11 = v9;
  sub_10000A388(&v11, v8);
  sub_1004800E4();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v11);
}

uint64_t sub_1003CC910(_QWORD *a1, _UNKNOWN **a2)
{
  char *v2;
  uint64_t ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t, uint64_t);
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  ObjectType = swift_getObjectType();
  v6 = &v2[*a1];
  v7 = *((_QWORD *)v6 + 3);
  v8 = *((_QWORD *)v6 + 4);
  sub_10000A388(v6, v7);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  v11 = v2;
  v12 = v10(v7, v9);
  v17 = ObjectType;
  v18 = a2;
  *(_QWORD *)&v16 = v11;
  v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  v14 = swift_allocObject(v13, 64, 7);
  sub_10001BCA8(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  v17 = v13;
  v18 = &off_1007F54C8;
  *(_QWORD *)&v16 = v14;
  sub_10000A388(&v16, v13);
  sub_1004800E4();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v16);
}

uint64_t sub_1003CCA00(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 16))(v3);
  sub_10000A388(v3, v3[3]);
  sub_1004800E4();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

uint64_t sub_1003CCA48(uint64_t a1, uint64_t a2)
{
  return sub_1003CCCD8(a1, a2, (void (*)(_QWORD *__return_ptr))sub_10019A378);
}

uint64_t sub_1003CCA54(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 16))(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v3);
}

uint64_t sub_1003CCA80()
{
  return sub_1003CC81C();
}

uint64_t sub_1003CCAA0(uint64_t a1)
{
  void **v1;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double (*v8)(uint64_t, uint64_t);
  id v9;
  double v10;
  _QWORD v12[6];
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v3 = *v1;
  v4 = (char *)*v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations;
  v5 = v4[3];
  v6 = v4[4];
  sub_10000A388(v4, v5);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(double (**)(uint64_t, uint64_t))(v7 + 8);
  v9 = v3;
  v10 = v8(v5, v7);
  v14 = a1;
  v15 = &off_1007E8708;
  *(_QWORD *)&v13 = v9;
  sub_10001BCA8(&v13, (uint64_t)v12);
  *(double *)&v12[5] = v10;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v12);
}

uint64_t sub_1003CCB4C(uint64_t a1, uint64_t a2)
{
  return sub_1003CCC84(a1, a2, (void (*)(_QWORD *__return_ptr))sub_100209E88);
}

uint64_t sub_1003CCB58(uint64_t a1, uint64_t a2)
{
  return sub_1003CCCD8(a1, a2, (void (*)(_QWORD *__return_ptr))sub_100209E88);
}

uint64_t sub_1003CCB64()
{
  return sub_1003CC910(&OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations, &off_1007F0908);
}

uint64_t sub_1003CCB94(uint64_t a1, uint64_t a2)
{
  return sub_1003CCD50(a1, a2, &OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations, (uint64_t)&off_1007F0908);
}

BOOL sub_1003CCBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v11[5];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v11, a1, a2);
  sub_10000A388(v11, v11[3]);
  v8 = sub_10047FC00((uint64_t)v7);
  LOBYTE(a2) = Date.isInThePast.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v11);
  return (a2 & 1) == 0;
}

uint64_t sub_1003CCC78(uint64_t a1, uint64_t a2)
{
  return sub_1003CCC84(a1, a2, (void (*)(_QWORD *__return_ptr))sub_100577494);
}

uint64_t sub_1003CCC84(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  _QWORD v4[5];

  a3(v4);
  sub_10000A388(v4, v4[3]);
  sub_1004800E4();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
}

uint64_t sub_1003CCCCC(uint64_t a1, uint64_t a2)
{
  return sub_1003CCCD8(a1, a2, (void (*)(_QWORD *__return_ptr))sub_100577494);
}

uint64_t sub_1003CCCD8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  _QWORD v4[5];

  a3(v4);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
}

uint64_t sub_1003CCD0C()
{
  return sub_1003CC910(&OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations, &off_1007FC5D0);
}

uint64_t sub_1003CCD3C(uint64_t a1, uint64_t a2)
{
  return sub_1003CCD50(a1, a2, &OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations, (uint64_t)&off_1007FC5D0);
}

uint64_t sub_1003CCD50(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  void **v4;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double (*v12)(uint64_t, uint64_t);
  id v13;
  double v14;
  _QWORD v16[6];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v4;
  v8 = (char *)*v4 + *a3;
  v9 = v8[3];
  v10 = v8[4];
  sub_10000A388(v8, v9);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(double (**)(uint64_t, uint64_t))(v11 + 8);
  v13 = v7;
  v14 = v12(v9, v11);
  v18 = a1;
  v19 = a4;
  *(_QWORD *)&v17 = v13;
  sub_10001BCA8(&v17, (uint64_t)v16);
  *(double *)&v16[5] = v14;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v16);
}

uint64_t sub_1003CCDFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  if (sub_1003CCBA8(v7, v8))
  {
    v9 = (void *)objc_opt_self(REMError);
    v10 = a1[3];
    v11 = a1[4];
    sub_10000A388(a1, v10);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v23, v10, v11);
    sub_10000A388(v23, v23[3]);
    v12 = sub_10047FC00((uint64_t)v6);
    v13 = Date.timeIntervalSinceNow.getter(v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    objc_msgSend(v9, "throttledErrorWithRemainingTimeInterval:", v13);
    v14 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v23);
    return swift_willThrow(v14);
  }
  else
  {
    v16 = a1[3];
    v17 = a1[4];
    sub_10000A388(a1, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    v19 = a1[3];
    v18 = a1[4];
    sub_10000A388(a1, v19);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 8))(v19);
    if (!v1)
    {
      v20 = a1[3];
      v21 = a1[4];
      sub_10000A388(a1, v20);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    }
  }
  return result;
}

uint64_t sub_1003CCFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848750);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848750);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003CD050(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003CD084 + 4 * a8_0[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_1003CD084()
{
  return 0x4E79616C70736964;
}

uint64_t sub_1003CD0A4()
{
  return 0x6D614E7473726966;
}

uint64_t sub_1003CD0C0()
{
  return 0x614E656C6464696DLL;
}

uint64_t sub_1003CD0DC()
{
  return 0x656D614E7473616CLL;
}

uint64_t sub_1003CD0F0()
{
  return 0x66657250656D616ELL;
}

uint64_t sub_1003CD120()
{
  return 0x656D616E6B63696ELL;
}

uint64_t sub_1003CD134()
{
  return 0x737574617473;
}

uint64_t sub_1003CD148()
{
  return 0x654C737365636361;
}

uint64_t sub_1003CD168()
{
  return 0x73736572646461;
}

uint64_t sub_1003CD180(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1003CD050(*a1);
  v5 = v4;
  v6 = sub_1003CD050(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1003CD208()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_1003CD050(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_1003CD268(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_1003CD050(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_1003CD2A8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_1003CD050(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1003CD304@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003CD6D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003CD330@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1003CD050(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1003CD358(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF5E8;
}

unint64_t sub_1003CD368@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003CD6D8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003CD38C()
{
  unsigned __int8 *v0;

  return sub_1003CD050(*v0);
}

void sub_1003CD394(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DED58, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_1003CD3F0(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0D28;
}

void sub_1003CD400(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DED58, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

uint64_t type metadata accessor for REMShareeCDIngestor()
{
  return objc_opt_self(_TtC7remindd19REMShareeCDIngestor);
}

_UNKNOWN **sub_1003CD480()
{
  return &off_1007F25F8;
}

_UNKNOWN **sub_1003CD48C()
{
  return &off_1007F25C8;
}

id sub_1003CD498(void *a1, void *a2, void *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  NSString v38;
  NSString v39;
  NSString v40;
  void *v41;
  id v42;

  if (a6)
  {
    v40 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a4 = swift_bridgeObjectRelease(a6).n128_u64[0];
    v24 = a10;
    if (a8)
      goto LABEL_3;
  }
  else
  {
    v40 = 0;
    v24 = a10;
    if (a8)
    {
LABEL_3:
      v39 = String._bridgeToObjectiveC()();
      *(_QWORD *)&a4 = swift_bridgeObjectRelease(a8).n128_u64[0];
      v25 = a12;
      if (v24)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  v39 = 0;
  v25 = a12;
  if (v24)
  {
LABEL_4:
    v38 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a4 = swift_bridgeObjectRelease(v24).n128_u64[0];
    v26 = a14;
    if (v25)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v38 = 0;
  v26 = a14;
  if (v25)
  {
LABEL_5:
    v27 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a4 = swift_bridgeObjectRelease(v25).n128_u64[0];
    v28 = a16;
    if (v26)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v27 = 0;
  v28 = a16;
  if (v26)
  {
LABEL_6:
    v29 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a4 = swift_bridgeObjectRelease(v26).n128_u64[0];
    v30 = a18;
    if (v28)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v29 = 0;
  v30 = a18;
  if (v28)
  {
LABEL_7:
    v31 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a4 = swift_bridgeObjectRelease(v28).n128_u64[0];
    v32 = a20;
    if (v30)
      goto LABEL_8;
LABEL_16:
    v33 = 0;
    v35 = a21;
    v34 = a22;
    if (v32)
      goto LABEL_9;
LABEL_17:
    v36 = 0;
    goto LABEL_18;
  }
LABEL_15:
  v31 = 0;
  v32 = a20;
  if (!v30)
    goto LABEL_16;
LABEL_8:
  v33 = String._bridgeToObjectiveC()();
  *(_QWORD *)&a4 = swift_bridgeObjectRelease(v30).n128_u64[0];
  v35 = a21;
  v34 = a22;
  if (!v32)
    goto LABEL_17;
LABEL_9:
  v36 = String._bridgeToObjectiveC()();
  *(_QWORD *)&a4 = swift_bridgeObjectRelease(v32).n128_u64[0];
LABEL_18:
  v42 = objc_msgSend(v41, "initShareeWithObjectID:accountID:listID:displayName:firstName:middleName:lastName:namePrefix:nameSuffix:nickname:address:status:accessLevel:", a1, a2, a3, v40, v39, v38, a4, v27, v29, v31, v33, v36, v35, v34);

  return v42;
}

unint64_t sub_1003CD6D8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE608, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

void sub_1003CD720(void *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  char **v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t ObjCClassFromMetadata;
  NSString v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  NSObject *v91;
  _QWORD v92[2];

  v91 = 0;
  v2 = objc_msgSend(a1, "remObjectIDWithError:", &v91);
  v3 = v91;
  if (!v2)
  {
    v17 = v91;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v18);
    return;
  }
  v4 = v2;
  v5 = v91;
  v6 = objc_msgSend(a1, "account");
  v7 = &selRef_isConcealed;
  if (v6)
  {
    v8 = v6;
    v9 = objc_msgSend(v6, "remObjectID");

    if (v9)
    {
      v10 = objc_msgSend(a1, "list");
      if (v10)
      {
        v11 = v10;
        v12 = objc_msgSend(v10, "remObjectID");

        if (v12)
        {
          v13 = objc_msgSend(a1, "displayName");
          if (v13)
          {
            v14 = v13;
            v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
            v86 = v16;
            v87 = v15;

          }
          else
          {
            v86 = 0;
            v87 = 0;
          }
          v42 = objc_msgSend(a1, "firstName");
          if (v42)
          {
            v43 = v42;
            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
            v84 = v45;
            v85 = v44;

          }
          else
          {
            v84 = 0;
            v85 = 0;
          }
          v46 = objc_msgSend(a1, "middleName");
          if (v46)
          {
            v47 = v46;
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            v82 = v49;
            v83 = v48;

          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
          v50 = objc_msgSend(a1, "lastName");
          if (v50)
          {
            v51 = v50;
            v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
            v80 = v53;
            v81 = v52;

          }
          else
          {
            v80 = 0;
            v81 = 0;
          }
          v54 = objc_msgSend(a1, "namePrefix");
          if (v54)
          {
            v55 = v54;
            v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v78 = v57;
            v79 = v56;

          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          v58 = objc_msgSend(a1, "nameSuffix");
          if (v58)
          {
            v59 = v58;
            v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
            v76 = v61;
            v77 = v60;

          }
          else
          {
            v76 = 0;
            v77 = 0;
          }
          v90 = v12;
          v62 = objc_msgSend(a1, "nickname");
          v88 = v4;
          if (v62)
          {
            v63 = v62;
            v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            v66 = v65;

          }
          else
          {
            v64 = 0;
            v66 = 0;
          }
          v67 = objc_msgSend(a1, "address");
          if (v67)
          {
            v68 = v67;
            v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
            v71 = v70;

          }
          else
          {
            v69 = 0;
            v71 = 0;
          }
          v72 = (int)objc_msgSend(a1, "status");
          v73 = (int)objc_msgSend(a1, "accessLevel");
          v74 = objc_allocWithZone((Class)REMSharee);
          sub_1003CD498(v88, v9, v90, v75, v87, v86, v85, v84, v83, v82, v81, v80, v79, v78, v77, v76, v64, v66, v69,
            v71,
            v72,
            v73);
          return;
        }
      }

    }
  }
  v19 = objc_msgSend(a1, "account");

  if (v19)
  {
    v20 = 0xE900000000000029;
  }
  else
  {
    if (qword_1008373F0 != -1)
      swift_once(&qword_1008373F0, sub_1003CCFC0);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100848750);
    v22 = v4;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v89 = (_QWORD *)swift_slowAlloc(8, -1);
      v91 = v22;
      *(_DWORD *)v25 = 138412290;
      v26 = v22;
      v7 = &selRef_isConcealed;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
      *v89 = v4;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "REMShareeCDIngestor: cdSharee.account is nil {cdSharee.remObjectID: %@}", v25, 0xCu);
      v27 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v89, 1, v27);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    v20 = 0xE700000000000000;
  }
  v28 = objc_msgSend(a1, v7[106]);

  if (!v28)
  {
    swift_bridgeObjectRelease(v20);
    if (qword_1008373F0 != -1)
      swift_once(&qword_1008373F0, sub_1003CCFC0);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_100848750);
    v30 = v4;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v91 = v30;
      v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
      *v34 = v4;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMShareeCDIngestor: cdSharee.list is nil {cdSharee.remObjectID: %@}", v33, 0xCu);
      v36 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v31 = v30;
    }

    v20 = 0xE400000000000000;
  }
  v37 = (void *)objc_opt_self(REMError);
  v38 = sub_1003CE2CC();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v38);
  v40 = String._bridgeToObjectiveC()();
  objc_msgSend(v37, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v40, swift_bridgeObjectRelease(v20).n128_f64[0]);

  swift_willThrow(v41);
}

uint64_t sub_1003CDE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = type metadata accessor for UUID(0);
  result = __chkstk_darwin(v5);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X9 }
  }
  return result;
}

void sub_1003CE184(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  Class isa;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v14 = *(void **)(v3 + 24);
    sub_1003FD930(1, v14, a3);
    if (v4)
      return;
    v16 = v15;
    objc_msgSend(a1, "setList:", v15);

    v17 = objc_msgSend(v14, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    objc_msgSend(a1, "setOwningListIdentifier:", isa);
  }
  else
  {
    sub_1003FD904(0, *(void **)(v3 + 16), a3);
    if (v4)
      return;
    isa = v12;
    objc_msgSend(a1, "setAccount:", v12);
  }

}

unint64_t sub_1003CE2CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839928;
  if (!qword_100839928)
  {
    v1 = objc_opt_self(REMCDSharee);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100839928);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMShareeCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003CE354 + 4 * byte_1006B9B50[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003CE388 + 4 * byte_1006B9B4B[v4]))();
}

uint64_t sub_1003CE388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CE390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003CE398);
  return result;
}

uint64_t sub_1003CE3A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003CE3ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003CE3B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CE3B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMShareeCDIngestor.RelationshipKey()
{
  return &type metadata for REMShareeCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMShareeCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1003CE420 + 4 * byte_1006B9B5A[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1003CE454 + 4 * byte_1006B9B55[v4]))();
}

uint64_t sub_1003CE454(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CE45C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003CE464);
  return result;
}

uint64_t sub_1003CE470(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003CE478);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1003CE47C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003CE484(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMShareeCDIngestor.ValueKey()
{
  return &type metadata for REMShareeCDIngestor.ValueKey;
}

uint64_t sub_1003CE4A0()
{
  return sub_1000BAEEC(&qword_100848958, &qword_100848960);
}

unint64_t sub_1003CE4C8()
{
  unint64_t result;

  result = qword_100848968;
  if (!qword_100848968)
  {
    result = swift_getWitnessTable(&unk_1006B9C80, &type metadata for REMShareeCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_100848968);
  }
  return result;
}

uint64_t sub_1003CE50C()
{
  return sub_1000BAEEC(&qword_100848970, &qword_100848978);
}

unint64_t sub_1003CE534()
{
  unint64_t result;

  result = qword_100848980;
  if (!qword_100848980)
  {
    result = swift_getWitnessTable(&unk_1006B9D58, &type metadata for REMShareeCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_100848980);
  }
  return result;
}

uint64_t sub_1003CE578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848990);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848990);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003CE608(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1003CE978();
  v4 = &qword_100837000;
  if (!a1[5])
  {
    if (qword_1008373F8 != -1)
      swift_once(&qword_1008373F8, sub_1003CE578);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_100848990);
    v6 = swift_retain(a1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v29 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = a1[2];
      v12 = a1[3];
      swift_bridgeObjectRetain(v12);
      v28 = sub_10001A820(v11, v12, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_release(a1);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: %{public}s}", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      v13 = v10;
      v4 = &qword_100837000;
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release(a1);
    }
    v14 = String.utf8CString.getter(a1[2], a1[3]);
    v15 = os_transaction_create(v14 + 32);
    swift_release(v14);
    v16 = a1[5];
    a1[5] = v15;
    swift_unknownObjectRelease(v16);
  }
  v17 = a1[4];
  v18 = __OFADD__(v17, a2);
  v19 = v17 + a2;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    a1[4] = v19;
    if (v4[127] == -1)
      goto LABEL_10;
  }
  swift_once(&qword_1008373F8, sub_1003CE578);
LABEL_10:
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100848990);
  v21 = swift_retain(a1);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(32, -1);
    v29 = v25;
    *(_DWORD *)v24 = 136446466;
    v26 = a1[2];
    v27 = a1[3];
    swift_bridgeObjectRetain(v27);
    v28 = sub_10001A820(v26, v27, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v24 + 12) = 2048;
    v28 = a1[4];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDTransactionRegistrar[%{public}s]: Transaction count incremented to {count: %ld}", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
}

void sub_1003CE978()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = v0[4];
  if (v2 < 0)
  {
    if (qword_1008373F8 != -1)
      swift_once(&qword_1008373F8, sub_1003CE578);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_100848990);
    v12 = swift_retain(v0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      v28 = v16;
      *(_DWORD *)v15 = 136446466;
      v17 = v1[2];
      v18 = v1[3];
      swift_bridgeObjectRetain(v18);
      v27 = sub_10001A820(v17, v18, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v15 + 12) = 2048;
      v27 = v1[4];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_release(v1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDTransactionRegistrar[%{public}s]: Transaction count is negative {count: %ld}", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_release(v1);
    }
    v2 = v1[4];
    if (v1[5])
    {
LABEL_3:
      if (v2)
        return;
      goto LABEL_4;
    }
  }
  else if (v0[5])
  {
    goto LABEL_3;
  }
  if (!v2)
    return;
  if (qword_1008373F8 != -1)
    swift_once(&qword_1008373F8, sub_1003CE578);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100848990);
  v20 = swift_retain(v1);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v28 = v24;
    *(_DWORD *)v23 = 136446466;
    v25 = v1[2];
    v26 = v1[3];
    swift_bridgeObjectRetain(v26);
    v27 = sub_10001A820(v25, v26, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v23 + 12) = 2048;
    v27 = v1[4];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDTransactionRegistrar[%{public}s]: Transaction count is not zero when osTransaction is nil {count: %ld}", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    if (!v1[5])
      return;
  }
  else
  {

    swift_release(v1);
    if (!v1[5])
      return;
  }
  if (v1[4])
    return;
LABEL_4:
  if (qword_1008373F8 != -1)
    swift_once(&qword_1008373F8, sub_1003CE578);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_100848990);
  v4 = swift_retain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v28 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = v1[2];
    v10 = v1[3];
    swift_bridgeObjectRetain(v10);
    v27 = sub_10001A820(v9, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_release(v1);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDTransactionRegistrar[%{public}s]: Transaction count is zero when osTransaction is not nil", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
}

void sub_1003CEE50(NSObject *a1, uint64_t a2)
{
  NSObject *v4;
  Class isa;
  BOOL v6;
  BOOL v7;
  objc_class *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1;
  sub_1003CE978();
  isa = a1[4].isa;
  v6 = __OFSUB__(isa, a2);
  v7 = (uint64_t)isa < a2;
  v8 = (Class)((char *)isa - a2);
  if (v7)
  {
    if (qword_1008373F8 != -1)
      swift_once(&qword_1008373F8, sub_1003CE578);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_100848990);
    v10 = swift_retain(a1);
    v4 = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v11))
    {
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(32, -1);
      v33 = v13;
      *(_DWORD *)v12 = 136446722;
      v14 = (uint64_t)a1[2].isa;
      v15 = (unint64_t)a1[3].isa;
      swift_bridgeObjectRetain(v15);
      v32 = sub_10001A820(v14, v15, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v12 + 12) = 2048;
      v32 = (uint64_t)a1[4].isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_release(a1);
      *(_WORD *)(v12 + 22) = 2048;
      v32 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      _os_log_impl((void *)&_mh_execute_header, v4, v11, "RDTransactionRegistrar[%{public}s]: Trying to decrement counter to negative, grounding to zero {count: %ld, n: %ld}", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

LABEL_11:
      v8 = 0;
      goto LABEL_12;
    }
LABEL_10:

    swift_release(a1);
    goto LABEL_11;
  }
  if (v6)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  a1[4].isa = v8;
  if (qword_1008373F8 != -1)
    swift_once(&qword_1008373F8, sub_1003CE578);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_100848990);
  v17 = swift_retain(a1);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v33 = v21;
    *(_DWORD *)v20 = 136446466;
    v22 = (uint64_t)a1[2].isa;
    v23 = (unint64_t)a1[3].isa;
    swift_bridgeObjectRetain(v23);
    v32 = sub_10001A820(v22, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2048;
    v32 = (uint64_t)a1[4].isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDTransactionRegistrar[%{public}s]: Transaction count decremented to {count: %ld}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    if (a1[4].isa)
      return;
  }
  else
  {

    swift_release(a1);
    if (a1[4].isa)
      return;
  }
  if (a1[5].isa)
  {
    v24 = swift_retain(a1);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v33 = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (uint64_t)a1[2].isa;
      v30 = (unint64_t)a1[3].isa;
      swift_bridgeObjectRetain(v30);
      v32 = sub_10001A820(v29, v30, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_release(a1);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "os_transaction RELEASE {name: %{public}s}", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_release(a1);
    }
    v31 = a1[5].isa;
    a1[5].isa = 0;
    swift_unknownObjectRelease(v31);
  }
}

uint64_t sub_1003CF30C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for RDTransactionRegistrar()
{
  return objc_opt_self(_TtC7remindd22RDTransactionRegistrar);
}

void sub_1003CF360(void *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (void *)objc_opt_self(REMCDAccount);
  v6 = objc_msgSend(v5, "fetchRequest");
  v7 = objc_msgSend(v5, "predicateForCloudKitAccountsWithKeyPathPrefix:", 0);
  objc_msgSend(v6, "setPredicate:", v7);

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 32) = 0x696669746E656469;
  *(_QWORD *)(v9 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v11 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v12 + 32) = a1;
  v20 = v12;
  specialized Array._endMutation()(v12);
  sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v13 = a1;
  v14 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setAffectedStores:", v14, swift_bridgeObjectRelease(v20).n128_f64[0]);

  v15 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v6, v15);
  if (v2)
  {

  }
  else
  {
    v17 = v16;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v19 = v16;
      else
        v19 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v18 = _CocoaArrayWrapper.endIndex.getter(v19);

      swift_bridgeObjectRelease_n(v17, 2);
    }
    else
    {
      v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease(v16);

    }
    *a2 = v18 != 0;
  }
}

uint64_t sub_1003CF5B4(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = &unk_1006B9DE0;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_1006B9DF8;
  v2[3] = &unk_1006B9E10;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 88);
}

uint64_t sub_1003CF614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848A60);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848A60);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003CF6A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_100008EFC(v0 + 40);
  sub_1000A5C24(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_1003CF6D8()
{
  uint64_t v0;

  sub_1003CF6A4();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RDChannel.Reader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDChannel.Reader);
}

uint64_t sub_1003CF704(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_1006B9DE0;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 88);
}

uint64_t sub_1003CF760()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v17 = 60;
  v18 = 0xE100000000000000;
  v1._countAndFlagsBits = sub_1004E8C68(v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0x6669746E65646920;
  v3._object = (void *)0xED0000203A726569;
  String.append(_:)(v3);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x3A74656772617420;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 40, v8);
  if (Strong)
  {
    v16 = Strong;
    v10 = String.init<A>(describing:)(&v16, (char *)&type metadata for Swift.AnyObject + 8);
    v12 = v11;
  }
  else
  {
    v12 = 0xE300000000000000;
    v10 = 7104878;
  }
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 10558;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  return v17;
}

uint64_t sub_1003CF89C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_1003CF8C8()
{
  uint64_t v0;

  sub_1003CF89C();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDChannel.Writer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDChannel.Writer);
}

uint64_t sub_1003CF8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for RDChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDChannel);
}

uint64_t sub_1003CF908()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  Swift::String v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *v0;
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_1004E8C68((uint64_t)v0);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646920;
  v4._object = (void *)0xED0000203A726569;
  String.append(_:)(v4);
  v5 = v0[2];
  v6 = (void *)v0[3];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A72656461657220;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  v15 = v0[5];
  v11 = type metadata accessor for RDChannel.Reader(0, *(_QWORD *)(v1 + 80), v9, v10);
  WitnessTable = swift_getWitnessTable(&unk_1006B9EB8, v11);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v15, v11, WitnessTable);
  v13._countAndFlagsBits = 10558;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  return v16;
}

uint64_t sub_1003CFA44()
{
  return sub_1003CF908();
}

uint64_t sub_1003CFA64()
{
  return sub_1003CF760();
}

uint64_t sub_1003CFA84(uint64_t a1)
{
  uint64_t KeyPath;
  _QWORD *v3;
  void *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1006BA1E8);
  v3 = sub_1001DF8D0(a1);
  v4 = (void *)sub_100341BA4(KeyPath, (uint64_t)v3);
  swift_release(KeyPath);
  v5 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = _swiftEmptyArrayStorage[2];
  v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
  specialized Array._endMutation()(v8);

  v9 = sub_1000153F4(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
  v11 = _swiftEmptyArrayStorage[2];
  v10 = _swiftEmptyArrayStorage[3];
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
  v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
  specialized Array._endMutation()(v12);
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

uint64_t sub_1003CFBA0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "endDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1003CFC24(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CDA2C(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setEndDate:", isa);

}

Class sub_1003CFD00(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v13;
  int64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  NSArray v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char v78[40];
  int64_t v79;
  __int128 v80;
  void *v81;
  char v82[88];
  _QWORD *v83;

  v76 = a2;
  v69 = sub_10001A630((uint64_t *)&unk_100839C80);
  v73 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v74 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v68 - v5;
  v7 = (void *)sub_1003CFA84(a1);
  v8 = sub_1003D05D8();
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v70 = v8;
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  v71 = v9;
  objc_msgSend(v9, "setPredicate:", v7);

  v75 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v75, v82);
  *(_OWORD *)(inited + 16) = xmmword_1006B9F10;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006B9F30);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006B9F68);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006B9FA0);
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1006B9FD0);
  *(_QWORD *)(inited + 64) = swift_getKeyPath(&unk_1006BA018);
  *(_QWORD *)(inited + 72) = swift_getKeyPath(&unk_1006BA050);
  *(_QWORD *)(inited + 80) = swift_getKeyPath(&unk_1006BA088);
  *(_QWORD *)(inited + 88) = swift_getKeyPath(&unk_1006BA0C0);
  *(_QWORD *)(inited + 96) = swift_getKeyPath(&unk_1006BA0F8);
  *(_QWORD *)(inited + 104) = swift_getKeyPath(&unk_1006BA130);
  KeyPath = swift_getKeyPath(&unk_1006BA168);
  *(_QWORD *)(inited + 112) = KeyPath;
  *(_QWORD *)&v80 = inited;
  specialized Array._endMutation()(KeyPath);
  v13 = v80;
  v83 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 11, 0);
  v14 = (int64_t)v83;
  for (i = 4; i != 15; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0)
    {
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v13);
      v17 = v16;
    }
    else
    {
      v17 = *(_QWORD *)(v13 + 8 * i);
      v16 = swift_retain();
    }
    v18 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v16);
    if (!v19)
    {
      *(_QWORD *)&v80 = 0;
      *((_QWORD *)&v80 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v65._object = (void *)0x80000001006F8C10;
      v65._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v65);
      v79 = v17;
      goto LABEL_53;
    }
    v20 = v18;
    v21 = v19;
    v81 = &type metadata for String;
    swift_release(v17);
    *(_QWORD *)&v80 = v20;
    *((_QWORD *)&v80 + 1) = v21;
    v83 = (_QWORD *)v14;
    v23 = *(_QWORD *)(v14 + 16);
    v22 = *(_QWORD *)(v14 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_1001C1C48(v22 > 1, v23 + 1, 1);
      v14 = (int64_t)v83;
    }
    *(_QWORD *)(v14 + 16) = v23 + 1;
    sub_10001A6CC(&v80, (_OWORD *)(v14 + 32 * v23 + 32));
  }
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v14);
  objc_msgSend(v71, "setPropertiesToFetch:", isa);

  v25 = swift_initStackObject(v75, v78);
  v72 = xmmword_1006A7330;
  *(_OWORD *)(v25 + 16) = xmmword_1006A7330;
  v26 = swift_getKeyPath(&unk_1006BA1A0);
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)&v80 = v25;
  specialized Array._endMutation()(v26);
  v27 = v80;
  v83 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v28 = v83;
  if ((v27 & 0xC000000000000001) != 0)
  {
    v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    v14 = v29;
  }
  else
  {
    v14 = *(_QWORD *)(v27 + 32);
    v29 = swift_retain();
  }
  v30 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v29);
  if (!v31)
    goto LABEL_55;
  v32 = v30;
  v33 = v31;
  swift_release(v14);
  v35 = v28[2];
  v34 = v28[3];
  v14 = v35 + 1;
  if (v35 >= v34 >> 1)
    goto LABEL_47;
  while (1)
  {
    v28[2] = v14;
    v36 = &v28[2 * v35];
    v36[4] = v32;
    v36[5] = v33;
    swift_bridgeObjectRelease();
    v37.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v28);
    v38 = v71;
    objc_msgSend(v71, "setRelationshipKeyPathsForPrefetching:", v37.super.isa);

    v39 = v77;
    v40 = NSManagedObjectContext.fetch<A>(_:)(v38, v70);
    if (v39)
    {

      return v37.super.isa;
    }
    v33 = v40;
    *(_QWORD *)&v80 = _swiftEmptyDictionarySingleton;
    if ((unint64_t)v40 >> 62)
    {
      v64 = v40 < 0 ? v40 : v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v40);
      v32 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v70 = 0;
    if (!v32)
      break;
    v77 = v33 & 0xC000000000000001;
    v37.super.isa = (Class)_swiftEmptyDictionarySingleton;
    v35 = 4;
    v76 = v32;
    while (1)
    {
      v45 = v77
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35 - 4, v33)
          : *(id *)(v33 + 8 * v35);
      v14 = (int64_t)v45;
      v46 = v35 - 3;
      if (__OFADD__(v35 - 4, 1))
        break;
      v47 = objc_msgSend(v45, "reminder");
      if (v47)
      {
        v48 = v47;
        v32 = (unint64_t)objc_msgSend(v47, "identifier");

        if (v32)
        {
          v49 = (uint64_t)v74;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

          v50 = type metadata accessor for UUID(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 0, 1, v50);
        }
        else
        {
          v52 = type metadata accessor for UUID(0);
          v49 = (uint64_t)v74;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v74, 1, 1, v52);
        }
        sub_1000F2CE4(v49, (uint64_t)v6);
      }
      else
      {
        v51 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v6, 1, 1, v51);
      }
      v54 = sub_1002C6CCC((uint64_t)v6);
      v34 = *((_QWORD *)v37.super.isa + 2);
      v55 = (v53 & 1) == 0;
      v56 = v34 + v55;
      if (__OFADD__(v34, v55))
        goto LABEL_45;
      v32 = v53;
      if (*((_QWORD *)v37.super.isa + 3) < v56)
      {
        sub_1002D103C(v56, 1);
        v37.super.isa = (Class)v80;
        v57 = sub_1002C6CCC((uint64_t)v6);
        if ((v32 & 1) != (v58 & 1))
        {
          while (1)
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v69);
            __break(1u);
LABEL_55:
            *(_QWORD *)&v80 = 0;
            *((_QWORD *)&v80 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v67._object = (void *)0x80000001006F8C10;
            v67._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v67);
            v79 = v14;
LABEL_53:
            v66 = sub_10001A630(&qword_100846740);
            _print_unlocked<A, B>(_:_:)(&v79, &v80, v66, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v80, *((_QWORD *)&v80 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
            __break(1u);
          }
        }
        v54 = v57;
      }
      if ((v32 & 1) != 0)
      {
        v41 = sub_10011E85C((uint64_t)v6);
        v37.super.isa = (Class)v80;
        v42 = (_QWORD *)(*(_QWORD *)(v80 + 56) + 8 * v54);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
        v32 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v43 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v32 >= v43 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1);
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v14);
        specialized Array._endMutation()(v44);
      }
      else
      {
        v59 = swift_allocObject(v75, 40, 7);
        *(_OWORD *)(v59 + 16) = v72;
        *(_QWORD *)(v59 + 32) = v14;
        v83 = (_QWORD *)v59;
        specialized Array._endMutation()(v59);
        v60 = v83;
        *((_QWORD *)v37.super.isa + (v54 >> 6) + 8) |= 1 << v54;
        sub_1000F2CE4((uint64_t)v6, *((_QWORD *)v37.super.isa + 6) + *(_QWORD *)(v73 + 72) * v54);
        *(_QWORD *)(*((_QWORD *)v37.super.isa + 7) + 8 * v54) = v60;
        v61 = *((_QWORD *)v37.super.isa + 2);
        v62 = __OFADD__(v61, 1);
        v34 = v61 + 1;
        if (v62)
          goto LABEL_46;
        *((_QWORD *)v37.super.isa + 2) = v34;
      }
      ++v35;
      if (v46 == v76)
        goto LABEL_42;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    sub_1001C1B0C(v34 > 1, v14, 1);
    v28 = v83;
  }
  v37.super.isa = (Class)_swiftEmptyDictionarySingleton;
LABEL_42:

  swift_bridgeObjectRelease();
  return v37.super.isa;
}

unint64_t sub_1003D05D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100841620;
  if (!qword_100841620)
  {
    v1 = objc_opt_self(REMCDRecurrenceRule);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100841620);
  }
  return result;
}

const char *sub_1003D0614()
{
  return "daysOfTheMonth";
}

void sub_1003D0620(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_daysOfTheMonth, a2);
}

void sub_1003D063C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setDaysOfTheMonth_);
}

const char *sub_1003D0658()
{
  return "daysOfTheWeek";
}

void sub_1003D0664(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_daysOfTheWeek, a2);
}

void sub_1003D0680(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setDaysOfTheWeek_);
}

const char *sub_1003D069C()
{
  return "daysOfTheYear";
}

void sub_1003D06A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_daysOfTheYear, a2);
}

void sub_1003D06C4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setDaysOfTheYear_);
}

const char *sub_1003D06E0()
{
  return "endDate";
}

const char *sub_1003D06F4()
{
  return "firstDayOfTheWeek";
}

id sub_1003D0700@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "firstDayOfTheWeek");
  *a2 = (_WORD)result;
  return result;
}

id sub_1003D0730(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setFirstDayOfTheWeek:", *a1);
}

const char *sub_1003D0744()
{
  return "frequency";
}

id sub_1003D0750@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "frequency");
  *a2 = (_WORD)result;
  return result;
}

id sub_1003D0780(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setFrequency:", *a1);
}

const char *sub_1003D0794()
{
  return "interval";
}

id sub_1003D07A0@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "interval");
  *a2 = (_WORD)result;
  return result;
}

id sub_1003D07D0(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setInterval:", *a1);
}

const char *sub_1003D07E4()
{
  return "monthsOfTheYear";
}

void sub_1003D07F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_monthsOfTheYear, a2);
}

void sub_1003D080C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setMonthsOfTheYear_);
}

const char *sub_1003D0828()
{
  return "occurrenceCount";
}

id sub_1003D0834@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "occurrenceCount");
  *a2 = result;
  return result;
}

id sub_1003D0864(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setOccurrenceCount:", *a1);
}

const char *sub_1003D0878()
{
  return "setPositions";
}

void sub_1003D0884(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_setPositions, a2);
}

void sub_1003D08A0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setSetPositions_);
}

const char *sub_1003D08BC()
{
  return "weeksOfTheYear";
}

void sub_1003D08C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_weeksOfTheYear, a2);
}

void sub_1003D08E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setWeeksOfTheYear_);
}

id sub_1003D0900@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "reminder");
  *a2 = result;
  return result;
}

id sub_1003D0938(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setReminder:", *a1);
}

uint64_t sub_1003D0954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848BF8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848BF8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003D09E4(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  id v34;
  Class isa;
  Class v36;
  Class v37;
  Class v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s10PredicatesOMa(0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(v1, "listID", v9);
  v13 = objc_msgSend(v1, "includingSubtasks");
  *(_QWORD *)v11 = v12;
  v11[8] = v13;
  swift_storeEnumTagMultiPayload(v11, v8, 2);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v14 = sub_100340EC0((uint64_t)v11, (objc_class *)qword_100871E48, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10001C744((uint64_t)v11, _s10PredicatesOMa);
    return (uint64_t)v1;
  }
  v15 = v14;
  v43 = a1;
  if (qword_100837408 != -1)
    swift_once(&qword_100837408, sub_1003D0954);
  v16 = sub_10001AAA8(v4, (uint64_t)qword_100848BF8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
  v44 = &v41;
  v42 = v15;
  v45 = (_QWORD *)v15;
  __chkstk_darwin(v17);
  v40 = v7;
  v18 = sub_10001A630(&qword_10083D590);
  v19 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v20 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
  v41 = v19;
  v21 = 0;
  v22 = Sequence.map<A>(skippingError:_:)(sub_1003D6E04, &v41 - 4, sub_10033D070, 0, v18, v19, v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v39 = v22;
    else
      v39 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v23 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v23)
  {
LABEL_17:
    v1 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    sub_10033F8B0(v42, v1, v43);
    if (v21)
    {
      sub_10001C744((uint64_t)v11, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v33 = v32;

      swift_bridgeObjectRelease();
      v45 = v33;
      sub_1001E2B34(v22);
      v34 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      v36 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v37 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v38 = Array._bridgeToObjectiveC()().super.isa;
      v1 = objc_msgSend(v34, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v36, v37, v38, swift_bridgeObjectRelease().n128_f64[0]);

      sub_10001C744((uint64_t)v11, _s10PredicatesOMa);
    }
    return (uint64_t)v1;
  }
  v45 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v23);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v44 = 0;
    v25 = 0;
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v22);
      else
        v26 = *(id *)(v22 + 8 * v25 + 32);
      v27 = v26;
      ++v25;
      v28 = objc_msgSend(v26, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v30 = v45[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
      specialized ContiguousArray._endMutation()(v31);
    }
    while (v23 != v25);
    v21 = v44;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D0F18(uint64_t a1)
{
  return sub_1003D09E4(a1);
}

void *sub_1003D0F38(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  id v8;
  char v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = _s10PredicatesOMa(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(v1, "fetchOption", v5);
  if (v8 == (id)1)
    v9 = 4;
  else
    v9 = 2;
  if (v8 == (id)2)
    v10 = 1;
  else
    v10 = v9;
  v11 = sub_10001A630(&qword_1008466D0);
  v12 = (char *)v7 + *(int *)(v11 + 48);
  v13 = *(int *)(v11 + 64);
  v14 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v15 = swift_allocObject(v14, 40, 7);
  v27 = xmmword_1006A7330;
  *(_OWORD *)(v15 + 16) = xmmword_1006A7330;
  v16 = objc_msgSend(v2, "parentReminderID");
  *(_QWORD *)(v15 + 32) = v16;
  v29 = v15;
  specialized Array._endMutation()(v16);
  *v7 = v29;
  *((_BYTE *)v7 + v13) = v10;
  v17 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload(v12, v17, 5);
  swift_storeEnumTagMultiPayload(v7, v4, 3);
  v18 = objc_msgSend(v2, "accountID");
  v19 = objc_msgSend(a1, "persistentStoreOfAccountWithAccountID:", v18);

  if (v19)
  {
    v20 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v20 + 16) = v27;
    *(_QWORD *)(v20 + 32) = v19;
    v29 = v20;
    specialized Array._endMutation()(v20);
    v21 = v29;
  }
  else
  {
    v21 = 0;
  }
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v22 = v28;
  v23 = sub_100340EC0((uint64_t)v7, (objc_class *)qword_100871E48, (uint64_t)a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v21);
  if (v22)
  {
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v23;
    swift_bridgeObjectRelease();
    v25 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    a1 = (void *)sub_1003D5F00(v24, v25, (uint64_t)a1);
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

  }
  return a1;
}

void *sub_1003D11F8(void *a1)
{
  return sub_1003D0F38(a1);
}

uint64_t sub_1003D1218(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;

  v3 = v1;
  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630(&qword_1008466D0);
  v9 = (char *)v7 + *(int *)(v8 + 48);
  v10 = *(int *)(v8 + 64);
  v11 = objc_msgSend(v3, "parentReminderIDs");
  v12 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  *v7 = v13;
  v14 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload(v9, v14, 5);
  *((_BYTE *)v7 + v10) = 2;
  swift_storeEnumTagMultiPayload(v7, v5, 3);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v15 = sub_100340EC0((uint64_t)v7, (objc_class *)qword_100871E48, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
  }
  else
  {
    v16 = v15;
    v17 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    a1 = sub_1003D5F00(v16, v17, a1);
    sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

  }
  return a1;
}

uint64_t sub_1003D140C(uint64_t a1)
{
  return sub_1003D1218(a1);
}

id sub_1003D142C(int64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  id v30;
  NSString v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  Class v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  Class v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  Class isa;
  Class v69;
  Class v70;
  Class v71;
  id v72;
  Class v73;
  Class v74;
  Class v75;
  Class v76;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  _QWORD *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[2];
  _QWORD v94[5];
  unint64_t v95;

  v3 = v1;
  v89 = a1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v92 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  v91 = v7;
  __chkstk_darwin(v6);
  v85 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s10PredicatesOMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s10PredicatesO19CompletionPredicateOMa(0);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(v3, "includeIncomplete", v13);
  v17 = objc_msgSend(v3, "includeCompleted");
  if (v16)
  {
    v83 = v2;
    v18 = v11;
    if (v17)
      v19 = 5;
    else
      v19 = 3;
  }
  else
  {
    if ((v17 & 1) == 0)
    {
      v67 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      v69 = Array._bridgeToObjectiveC()().super.isa;
      sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
      v70 = Array._bridgeToObjectiveC()().super.isa;
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v71 = Array._bridgeToObjectiveC()().super.isa;
      v26 = objc_msgSend(v67, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v69, v70, v71);

      return v26;
    }
    v83 = v2;
    v18 = v11;
    v19 = 4;
  }
  swift_storeEnumTagMultiPayload(v15, v12, v19);
  v20 = sub_10001A630(&qword_1008466D0);
  v21 = (char *)v18 + *(int *)(v20 + 48);
  v22 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1006A7330;
  v24 = objc_msgSend(v3, "parentReminderID");
  *(_QWORD *)(v23 + 32) = v24;
  v94[0] = v23;
  specialized Array._endMutation()(v24);
  *v18 = v94[0];
  v25 = (uint64_t)v21;
  v26 = (id)0xEA00000000007265;
  sub_1003D6DC0((uint64_t)v15, v25);
  if (objc_msgSend(v3, "isUnsupported"))
    v27 = 6;
  else
    v27 = 2;
  *((_BYTE *)v18 + *(int *)(v20 + 64)) = v27;
  swift_storeEnumTagMultiPayload(v18, v9, 3);
  v28 = (void *)objc_opt_self(REMReminder);
  v29 = objc_msgSend(v28, "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v30 = objc_allocWithZone((Class)NSFetchRequest);
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "initWithEntityName:", v31, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v32, "setResultType:", 2);
  sub_10000D2C0();
  v34 = v33;
  objc_msgSend(v32, "setPredicate:", v33);

  v35 = sub_10001A630((uint64_t *)&unk_100839E80);
  v36 = swift_allocObject(v35, 64, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  *(_QWORD *)(v36 + 32) = 0x696669746E656469;
  *(_QWORD *)(v36 + 40) = 0xEA00000000007265;
  v37 = (char *)&type metadata for Any;
  v38 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v32, "setPropertiesToFetch:", v38, swift_bridgeObjectRelease().n128_f64[0]);

  v39 = v32;
  v40 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v41 = v83;
  v42 = NSManagedObjectContext.fetch<A>(_:)(v32, v40);
  v43 = v41;
  if (v41)
  {

    sub_10001C744((uint64_t)v18, _s10PredicatesOMa);
    sub_10001C744((uint64_t)v15, _s10PredicatesO19CompletionPredicateOMa);
    return v26;
  }
  v44 = v42;
  v88 = v28;
  v81 = v39;
  v82 = v15;
  v95 = (unint64_t)_swiftEmptyArrayStorage;
  if (v42 >> 62)
    goto LABEL_38;
  v45 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v42);
LABEL_14:
  v46 = (uint64_t)v82;
  if (v45)
  {
    v80 = v18;
    v83 = v43;
    v89 = v44;
    v47 = v44 & 0xC000000000000001;
    v43 = 4;
    v44 = (int64_t)&unk_10083D5B0;
    v86 = v37 + 8;
    v87 = (char *)v45;
    v84 = v47;
    while (1)
    {
      if (v47)
        v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43 - 4, v89);
      else
        v48 = *(id *)(v89 + 8 * v43);
      v49 = v48;
      v37 = (char *)(v43 - 3);
      if (__OFADD__(v43 - 4, 1))
      {
        __break(1u);
LABEL_38:
        if (v44 < 0)
          v78 = v44;
        else
          v78 = v44 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v44);
        v45 = _CocoaArrayWrapper.endIndex.getter(v78);
        goto LABEL_14;
      }
      *(_QWORD *)&v93[0] = 0x696669746E656469;
      *((_QWORD *)&v93[0] + 1) = 0xEA00000000007265;
      v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v93, &type metadata for String);
      v51 = objc_msgSend(v49, "__swift_objectForKeyedSubscript:", v50);
      swift_unknownObjectRelease(v50);
      if (v51)
      {
        _bridgeAnyObjectToAny(_:)(v93, v51);
        swift_unknownObjectRelease(v51);
      }
      else
      {
        memset(v93, 0, sizeof(v93));
      }
      v18 = v88;
      sub_1000A5CA8((uint64_t)v93, (uint64_t)v94, (uint64_t *)v44);
      if (v94[3])
      {
        v52 = v92;
        v53 = (uint64_t *)v44;
        v54 = v90;
        v55 = swift_dynamicCast(v92, v94, v86, v90, 6);
        v56 = v91;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v52, v55 ^ 1u, 1, v54);
        v57 = v54;
        v44 = (int64_t)v53;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v52, 1, v57) != 1)
        {
          v58 = v91;
          v59 = v85;
          v60 = v90;
          (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v85, v92, v90);
          v61 = UUID._bridgeToObjectiveC()().super.isa;
          v18 = objc_msgSend(v18, "objectIDWithUUID:", v61);

          v44 = (int64_t)v53;
          v62 = v60;
          v47 = v84;
          (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v62);

          if (v18)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
            v65 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v64 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v65 >= v64 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1);
            v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v18);
            specialized Array._endMutation()(v66);
          }
          goto LABEL_18;
        }
      }
      else
      {
        sub_10000882C((uint64_t)v94, (uint64_t *)v44);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v92, 1, 1, v90);
      }
      sub_10000882C(v92, (uint64_t *)&unk_100839C80);

LABEL_18:
      ++v43;
      if (v37 == v87)
      {
        swift_bridgeObjectRelease();
        v46 = (uint64_t)v82;
        v18 = v80;
        goto LABEL_35;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  v72 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
  sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v73 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v74 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v75 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v76 = Array._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v72, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", v73, v74, v75, v76, swift_bridgeObjectRelease().n128_f64[0]);

  sub_10001C744((uint64_t)v18, _s10PredicatesOMa);
  sub_10001C744(v46, _s10PredicatesO19CompletionPredicateOMa);
  return v26;
}

id sub_1003D1D28(int64_t a1)
{
  return sub_1003D142C(a1);
}

id sub_1003D1D48(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  NSString v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  double v53;
  char v54;
  id v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  id v69;
  id v70;
  id v71;
  Swift::String v72;
  Swift::Bool v73;
  double v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  double v106;
  id v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  void *ObjCClassFromMetadata;
  Class v117;
  id v118;
  objc_class *v119;
  objc_class *v120;
  id v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  void (*v128)(_BYTE *, uint64_t);
  uint64_t v129;
  void *v130;
  void (*v131)(_BYTE *, uint64_t);
  id v132;
  void *v133;
  id v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  Class isa;
  Class v140;
  Class v141;
  Class v142;
  _BYTE v144[4];
  unsigned int v145;
  uint64_t v146;
  id v147;
  id v148;
  uint64_t v149;
  id v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v3 = v2;
  v4 = v1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v153 = &v144[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v154 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v151 = &v144[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v152 = &v144[-v11];
  v12 = _s10PredicatesOMa(0);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = &v144[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = objc_msgSend(v1, "objectIDs", v13);
  v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if (!((unint64_t)v18 >> 62))
  {
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_45:
    swift_bridgeObjectRelease();
    v138 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v140 = Array._bridgeToObjectiveC()().super.isa;
    sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    v141 = Array._bridgeToObjectiveC()().super.isa;
    v142 = Array._bridgeToObjectiveC()().super.isa;
    a1 = objc_msgSend(v138, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v140, v141, v142);

    return a1;
  }
  if (v18 < 0)
    v136 = v18;
  else
    v136 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v137 = _CocoaArrayWrapper.endIndex.getter(v136);
  swift_bridgeObjectRelease();
  if (!v137)
    goto LABEL_45;
LABEL_3:
  v149 = v8;
  v150 = a1;
  if ((v18 & 0xC000000000000001) != 0)
  {
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_49;
    }
    v19 = *(id *)(v18 + 32);
  }
  v20 = v19;
  v21 = objc_msgSend(v4, "objectIDs", swift_bridgeObjectRelease().n128_f64[0]);
  v22 = v4;
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v17);

  a1 = v20;
  LOBYTE(v20) = sub_1003D5D48(v23, a1);
  swift_bridgeObjectRelease();

  if ((v20 & 1) != 0)
  {
    if (qword_100837408 == -1)
    {
LABEL_8:
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001AAA8(v24, (uint64_t)qword_100848BF8);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with multiple entity names.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      v29 = (void *)objc_opt_self(REMError);
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "invalidParameterErrorWithDescription:", v30);

      swift_willThrow(v31);
      return a1;
    }
LABEL_49:
    swift_once(&qword_100837408, sub_1003D0954);
    goto LABEL_8;
  }
  v146 = v3;
  v147 = v22;
  v32 = objc_msgSend(v22, "fetchOptions");
  v145 = objc_msgSend(v32, "includeConcealed");

  v148 = a1;
  v33 = objc_msgSend(a1, "entityName");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "cdEntityName");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  if (v39 == v34 && v41 == v36)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
    v44 = v147;
    v45 = objc_msgSend(v147, "objectIDs", v43);
    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v17);

    *(_QWORD *)v15 = v46;
    v15[8] = v145;
    swift_storeEnumTagMultiPayload(v15, v12, 0);
    if (qword_100837260 != -1)
      swift_once(&qword_100837260, sub_10033CFDC);
    a1 = v150;
    v47 = v146;
    v48 = sub_100340EC0((uint64_t)v15, (objc_class *)qword_100871E48, (uint64_t)v150, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
    v49 = v148;
    if (v47)
    {
      sub_10001C744((uint64_t)v15, _s10PredicatesOMa);
    }
    else
    {
      v50 = v48;
      v51 = objc_msgSend(v44, "fetchOptions");
      a1 = (id)sub_1003D5F00(v50, v51, (uint64_t)a1);
      sub_10001C744((uint64_t)v15, _s10PredicatesOMa);
      swift_bridgeObjectRelease();

    }
    return a1;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v34, v36, 0);
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
    goto LABEL_15;
  v52 = v147;
  if (v34 == 0xD000000000000012 && v36 == 0x80000001006FA060)
  {
    *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_25;
  }
  v54 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001006FA060, v34, v36, 0);
  *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v54 & 1) != 0)
  {
LABEL_25:
    v55 = objc_msgSend(v52, "objectIDs", v53);
    v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v17);

    v57 = v145 ^ 1;
    swift_bridgeObjectRetain(v56);
    sub_1004B2BC8(v58, v57);
    v60 = v59;
    v61 = type metadata accessor for REMCDSavedReminder();
    v62 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    a1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v61), "entity");
    objc_msgSend(v62, "setEntity:", a1);

    objc_msgSend(v62, "setAffectedStores:", 0);
    objc_msgSend(v62, "setPredicate:", v60);

    objc_msgSend(v62, "setPropertiesToFetch:", 0);
    objc_msgSend(v62, "setRelationshipKeyPathsForPrefetching:", 0);
    v63 = v61;
    v64 = (uint64_t)v150;
    v65 = v146;
    v66 = NSManagedObjectContext.fetch<A>(_:)(v62, v63);
    v67 = v148;
    if (v65)
    {

      swift_bridgeObjectRelease_n(v56, 2);
    }
    else
    {
      v68 = v66;
      swift_bridgeObjectRelease_n(v56, 2);

      v69 = objc_msgSend(v52, "fetchOptions");
      a1 = (id)sub_1003D630C(v68, v69, v64);

      swift_bridgeObjectRelease();
    }
    return a1;
  }
  v70 = v148;
  v71 = objc_msgSend(v148, "entityName", v53);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v71);

  v72._countAndFlagsBits = 0xD00000000000001DLL;
  v72._object = (void *)0x80000001006F67D0;
  v73 = String.hasPrefix(_:)(v72);
  *(_QWORD *)&v74 = swift_bridgeObjectRelease().n128_u64[0];
  if (v73)
  {
    v75 = objc_msgSend(v70, "entityName", v74);
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
    v78 = v77;

    v79 = String.count.getter(0xD00000000000001DLL, 0x80000001006F67D0);
    v80 = sub_1003D5CAC(v79, v76, v78);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v87 = swift_bridgeObjectRelease();
    v88 = static String._fromSubstring(_:)(v80, v82, v84, v86, v87);
    v90 = v89;
    swift_bridgeObjectRelease();
    v91 = v153;
    UUID.init(uuidString:)(v88, v90);
    v92 = swift_bridgeObjectRelease();
    v93 = v154;
    v94 = v149;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v154 + 48))(v91, 1, v149, v92) != 1)
    {
      v114 = v152;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 32))(v152, v91, v94);
      v115 = type metadata accessor for REMCDTemplate();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v115);
      v117 = UUID._bridgeToObjectiveC()().super.isa;
      v118 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", v117);

      sub_1003692F8();
      v120 = v119;
      v121 = objc_msgSend(v118, "uuid");
      v122 = v151;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v121);

      v123 = v122;
      v124 = (uint64_t)v122;
      a1 = v150;
      v125 = v146;
      sub_100369478(v124, (uint64_t)v150, v120);
      v153 = v126;
      if (v125)
      {
        v127 = v123;
        v128 = *(void (**)(_BYTE *, uint64_t))(v154 + 8);
        v128(v127, v94);
        v128(v114, v94);

        swift_bridgeObjectRelease();
      }
      else
      {
        v129 = v94;
        v130 = v52;
        v131 = *(void (**)(_BYTE *, uint64_t))(v154 + 8);
        v131(v123, v129);
        v132 = objc_msgSend(v130, "objectIDs", swift_bridgeObjectRelease().n128_f64[0]);
        v133 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v132, v17);

        v134 = objc_msgSend(v130, "fetchOptions");
        v135 = v153;
        a1 = sub_1003D6718(v133, (uint64_t)v153, (uint64_t)v134);
        v131(v152, v129);

        swift_bridgeObjectRelease();
      }

      return a1;
    }
    sub_10000882C((uint64_t)v91, (uint64_t *)&unk_100839C80);
  }
  if (qword_100837408 != -1)
    swift_once(&qword_100837408, sub_1003D0954);
  v95 = type metadata accessor for Logger(0);
  sub_10001AAA8(v95, (uint64_t)qword_100848BF8);
  v96 = v70;
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(12, -1);
    v154 = swift_slowAlloc(32, -1);
    v155 = v154;
    *(_DWORD *)v99 = 136446210;
    v153 = v99 + 4;
    v100 = objc_msgSend(v96, "entityName");
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v103 = v102;

    v157 = sub_10001A820(v101, v103, &v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with unexpected entity name {entityName: %{public}s}", v99, 0xCu);
    v104 = v154;
    swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v99, -1, -1);

  }
  else
  {

  }
  v105 = (void *)objc_opt_self(REMError);
  v155 = 0;
  v156 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  *(_QWORD *)&v106 = swift_bridgeObjectRelease().n128_u64[0];
  v155 = 0xD000000000000024;
  v156 = 0x8000000100702D10;
  v107 = objc_msgSend(v96, "entityName", v106);
  v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
  v110 = v109;

  v111._countAndFlagsBits = v108;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 125;
  v112._object = (void *)0xE100000000000000;
  String.append(_:)(v112);
  a1 = String._bridgeToObjectiveC()();
  objc_msgSend(v105, "invalidParameterErrorWithDescription:", a1, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v113);
  return a1;
}

id sub_1003D2B3C(void *a1)
{
  return sub_1003D1D48(a1);
}

void sub_1003D2B5C(_UNKNOWN **a1)
{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _UNKNOWN **v49;
  char *v50;
  void *v51;
  id v52;
  objc_class *v53;

  v3 = v2;
  v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v1;
  v13 = objc_msgSend(v1, "predicateDescriptor", v10);
  v14 = sub_100144708(a1, 0);

  if (v2)
    return;
  v15 = (void *)v5;
  v50 = v7;
  v51 = (void *)v14;
  v16 = objc_msgSend(v52, "sortDescriptors");
  if (!v16)
  {
    v32 = 0;
    v33 = (uint64_t)a1;
    v34 = (uint64_t)v50;
    v21 = v51;
    v35 = v15;
    goto LABEL_21;
  }
  v17 = v16;
  v45 = v9;
  v46 = v8;
  v47 = v12;
  v52 = v15;
  v18 = sub_1000151B0(0, (unint64_t *)&unk_100848C10, REMReminderSortDescriptor_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
    goto LABEL_16;
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  v21 = v51;
  if (!v20)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    v32 = (objc_class *)_swiftEmptyArrayStorage;
    v35 = v52;
    v33 = (uint64_t)a1;
    v34 = (uint64_t)v50;
LABEL_21:
    *(_QWORD *)v34 = v21;
    *(_BYTE *)(v34 + 8) = 0;
    swift_storeEnumTagMultiPayload(v34, v35, 1);
    v37 = v21;
    v38 = sub_100340EC0(v34, v32, v33, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
    if (v3)
    {
      sub_10001C744(v34, _s10PredicatesOMa);

      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = v38;
      swift_bridgeObjectRelease();
      v40 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
      sub_1003D5F00(v39, v40, v33);
      sub_10001C744(v34, _s10PredicatesOMa);
      swift_bridgeObjectRelease();

    }
    return;
  }
  while (1)
  {
    v48 = v3;
    v49 = a1;
    v53 = (objc_class *)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v20);
    if (v20 < 0)
      break;
    v22 = 0;
    v3 = v19 & 0xC000000000000001;
    a1 = NSSortDescriptor_ptr;
    while (v20 != v22)
    {
      if (v3)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v19);
      else
        v23 = *(id *)(v19 + 8 * v22 + 32);
      v24 = v23;
      v25 = objc_msgSend(v23, "type");
      if ((unint64_t)v25 >= 5)
        goto LABEL_26;
      ++v22;
      v26 = (uint64_t)*(&off_1007F2A28 + (_QWORD)v25);
      sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
      KeyPath = swift_getKeyPath(v26);
      v28 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, objc_msgSend(v24, "ascending"));

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v30 = *((_QWORD *)v53 + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
      specialized ContiguousArray._endMutation()(v31);
      if (v20 == v22)
      {
        v32 = v53;
        swift_bridgeObjectRelease();
        v33 = (uint64_t)v49;
        v34 = (uint64_t)v50;
        v3 = v48;
        v21 = v51;
        v35 = v52;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_16:
    if (v19 < 0)
      v36 = v19;
    else
      v36 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease();
    v21 = v51;
    if (!v20)
      goto LABEL_20;
  }
  __break(1u);
LABEL_26:
  if (qword_1008373D8 != -1)
    swift_once(&qword_1008373D8, sub_1003C9768);
  v41 = v46;
  v42 = sub_10001AAA8(v46, (uint64_t)qword_100848618);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v47, v42, v41);
  v43 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v44 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v43, v44);
  __break(1u);
}

void sub_1003D2FD0(_UNKNOWN **a1)
{
  sub_1003D2B5C(a1);
}

uint64_t sub_1003D2FF0(uint64_t a1)
{
  return sub_1003D301C(a1, (SEL *)&selRef_externalIdentifiers, 24);
}

uint64_t sub_1003D301C(uint64_t a1, SEL *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;

  v7 = v4;
  v8 = v3;
  v10 = _s10PredicatesOMa(0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = objc_msgSend(v8, *a2, v11);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);

  v16 = objc_msgSend(v8, "listObjectID");
  *v13 = v15;
  v13[1] = (uint64_t)v16;
  swift_storeEnumTagMultiPayload(v13, v10, a3);
  v17 = objc_msgSend(v8, "listObjectID");
  v18 = v17;
  if (v17)
  {
    v19 = v17;
    v20 = sub_1005CCB64(v19);
    if (v4)
    {
      v21 = v19;
LABEL_5:

      goto LABEL_11;
    }
    v21 = v20;
    sub_1004BB19C(v20, 0);
    v7 = 0;
    v23 = v22;

    if (!v23)
    {
      v28 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v19);
      swift_willThrow(v28);

      v18 = v19;
      goto LABEL_5;
    }

  }
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  v24 = sub_100340EC0((uint64_t)v13, (objc_class *)qword_100871E48, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (!v7)
  {
    v26 = v24;

    v27 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
    a1 = sub_1003D5F00(v26, v27, a1);
    sub_10001C744((uint64_t)v13, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

    return a1;
  }
LABEL_11:
  sub_10001C744((uint64_t)v13, _s10PredicatesOMa);

  return a1;
}

uint64_t sub_1003D3298(uint64_t a1)
{
  return sub_1003D301C(a1, (SEL *)&selRef_daCalendarItemUniqueIdentifiers, 25);
}

id sub_1003D32C4()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v2 = v1;
  v3 = _s10PredicatesOMa(0);
  *(_QWORD *)&v4 = __chkstk_darwin(v3).n128_u64[0];
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = objc_msgSend(v0, "listID", v4);
  v6[8] = 1;
  swift_storeEnumTagMultiPayload(v6, v3, 2);
  sub_10000D2C0();
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);

  v12 = NSManagedObjectContext.count<A>(for:)(v10, v9);
  if (v1)
  {
    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);

  }
  else
  {
    v13 = v12;
    v2 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v13);
    objc_msgSend(v2, "storeProperty:forKey:", v14, REMRemindersDataViewFetchRemindersCountResultKey);

    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_1003D34C4()
{
  return sub_1003D32C4();
}

id sub_1003D34E4()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001A630(&qword_1008466D0);
  v7 = (char *)v5 + *(int *)(v6 + 48);
  v8 = *(int *)(v6 + 64);
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  v11 = objc_msgSend(v0, "parentReminderID");
  *(_QWORD *)(v10 + 32) = v11;
  v23 = v10;
  specialized Array._endMutation()(v11);
  *v5 = v23;
  v12 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload(v7, v12, 5);
  *((_BYTE *)v5 + v8) = 2;
  swift_storeEnumTagMultiPayload(v5, v3, 3);
  sub_10000D2C0();
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "entity");
  objc_msgSend(v16, "setEntity:", v17);

  objc_msgSend(v16, "setAffectedStores:", 0);
  objc_msgSend(v16, "setPredicate:", v14);

  v18 = NSManagedObjectContext.count<A>(for:)(v16, v15);
  if (v1)
  {
    sub_10001C744((uint64_t)v5, _s10PredicatesOMa);

  }
  else
  {
    v19 = v18;
    v2 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v19);
    objc_msgSend(v2, "storeProperty:forKey:", v20, REMRemindersDataViewFetchRemindersCountResultKey);

    sub_10001C744((uint64_t)v5, _s10PredicatesOMa);
  }
  return v2;
}

id sub_1003D3754()
{
  return sub_1003D34E4();
}

id sub_1003D3774()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char **v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  unint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  id v36;
  uint64_t v38;
  int v39;
  char **v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v2 = v1;
  v3 = v0;
  v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A630(&qword_1008466D0);
  v8 = (char *)v6 + *(int *)(v7 + 48);
  v9 = *(int *)(v7 + 64);
  v10 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A7330;
  v12 = objc_msgSend(v3, "parentReminderID");
  *(_QWORD *)(v11 + 32) = v12;
  v44 = v11;
  specialized Array._endMutation()(v12);
  *v6 = v44;
  v13 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload(v8, v13, 5);
  *((_BYTE *)v6 + v9) = objc_msgSend(v3, "includingConcealed");
  swift_storeEnumTagMultiPayload(v6, v4, 3);
  sub_10000D2C0();
  v15 = v14;
  v16 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v17 = &selRef_subscriptionOwnerUserRecordID;
  v18 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "entity");
  objc_msgSend(v18, "setEntity:", v19);

  objc_msgSend(v18, "setAffectedStores:", 0);
  objc_msgSend(v18, "setPredicate:", v15);

  v20 = sub_10001A630((uint64_t *)&unk_100839E80);
  v21 = swift_allocObject(v20, 64, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 32) = 0x6574656C706D6F63;
  *(_QWORD *)(v21 + 40) = 0xE900000000000064;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v23 = NSManagedObjectContext.fetch<A>(_:)(v18, v16);
  v24 = (char **)v1;
  if (v1)
  {
    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);

  }
  else
  {
    v25 = v23;
    if (v23 >> 62)
      goto LABEL_28;
    v26 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v23);
    for (; v26; v26 = _CocoaArrayWrapper.endIndex.getter(v35))
    {
      v40 = v24;
      v41 = v6;
      v27 = 0;
      v28 = 0;
      v39 = 0;
      v29 = v25 & 0xC000000000000001;
      v42 = v25 + 32;
      v24 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      while (1)
      {
        v43 = v28;
        if (v29)
          v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
        else
          v30 = *(id *)(v42 + 8 * (_QWORD)v27);
        v31 = v30;
        v6 = (uint64_t *)((char *)v27 + 1);
        if (__OFADD__(v27, 1))
          goto LABEL_27;
        v17 = (char **)objc_msgSend(v30, "completed");

        if ((_DWORD)v17)
          break;
LABEL_7:
        v28 = 1;
        v27 = v6;
        if (v6 == (uint64_t *)v26)
        {
          swift_bridgeObjectRelease_n(v25, 2);
          if ((v39 & 1) != 0)
            v26 = 3;
          else
            v26 = 1;
LABEL_23:
          v6 = v41;
          v17 = &selRef_subscriptionOwnerUserRecordID;
          goto LABEL_33;
        }
      }
      if (v6 == (uint64_t *)v26)
      {
LABEL_21:
        v26 = 2;
        swift_bridgeObjectRelease_n(v25, 2);
        if ((v43 & 1) != 0)
          v26 = 3;
        goto LABEL_23;
      }
      v17 = (char **)((char *)v27 + 5);
      while (1)
      {
        v32 = v29
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)((char *)v17 - 4, v25)
            : *(id *)(v25 + 8 * (_QWORD)v17);
        v33 = v32;
        v6 = (uint64_t *)((char *)v17 - 3);
        if (__OFADD__((char *)v17 - 4, 1))
          break;
        v34 = objc_msgSend(v32, "completed");

        if (!v34)
        {
          v39 = 1;
          goto LABEL_7;
        }
        v17 = (char **)((char *)v17 + 1);
        if (v6 == (uint64_t *)v26)
          goto LABEL_21;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      if (v25 < 0)
        v35 = v25;
      else
        v35 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
    }
    swift_bridgeObjectRelease_n(v25, 2);
LABEL_33:
    v2 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), v17[484]);
    v36 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v26);
    objc_msgSend(v2, "storeProperty:forKey:", v36, REMRemindersDataViewFetchReminderSubtasksMasksResultKey);

    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_1003D3BF8()
{
  return sub_1003D3774();
}

Class sub_1003D3C18(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  Class isa;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t inited;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  NSArray v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  id v82;
  Class v83;
  Class result;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  char *v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t KeyPath;
  uint64_t v94;
  id v95;
  void **v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  _QWORD *v100;
  char v101[48];
  _QWORD *v102;

  v4 = v2;
  v5 = v1;
  v94 = a1;
  v6 = type metadata accessor for Logger(0);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v90 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  v96 = *(void ***)(v8 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = _swiftEmptyArrayStorage;
  v12 = sub_10001CC08(objc_msgSend(v1, "allowConcealedObjects", v9));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
  v14 = v102[2];
  v13 = v102[3];
  if (v14 >= v13 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1);
  v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
  specialized Array._endMutation()(v15);
  KeyPath = swift_getKeyPath(&unk_1006BA6F0);
  v16 = objc_msgSend(v1, "objectIDs");
  v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v85 = v18;
    else
      v85 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v89 = v1;
  v95 = v4;
  if (v19)
  {
    v98 = _swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_43;
    }
    v20 = 0;
    v21 = v98;
    v22 = v18 & 0xC000000000000001;
    v23 = v18;
    do
    {
      if (v22)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      else
        v24 = *(id *)(v18 + 8 * v20 + 32);
      v25 = v24;
      v26 = objc_msgSend(v24, "uuid", v89);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 0, 1, v27);

      v98 = v21;
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
      {
        sub_1001C1BB8(v28 > 1, v29 + 1, 1);
        v21 = v98;
      }
      ++v20;
      v21[2] = v29 + 1;
      sub_1000A5CA8((uint64_t)v11, (uint64_t)v21+ ((*((unsigned __int8 *)v96 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v96 + 80))+ (_QWORD)v96[9] * v29, (uint64_t *)&unk_100839C80);
      v18 = v23;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = _swiftEmptyArrayStorage;
  }
  v30 = sub_10001A630((uint64_t *)&unk_100839E80);
  v31 = swift_allocObject(v30, 96, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1006A3C40;
  v32 = KeyPath;
  v33 = sub_10026BE00(v31);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 32) = v33;
  *(_QWORD *)(v31 + 40) = v34;
  *(_QWORD *)(v31 + 88) = sub_10001A630(&qword_1008466F8);
  *(_QWORD *)(v31 + 64) = v21;
  v35 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v37 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v35, isa);
  swift_release(v32);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
  v40 = v102[2];
  v39 = v102[3];
  if (v40 >= v39 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1);
  v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
  specialized Array._endMutation()(v41);
  v42 = v102;
  swift_bridgeObjectRetain(v102);
  v44 = (void *)sub_10000D2BC(v43);
  v45 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v46 = objc_msgSend((id)swift_getObjCClassFromMetadata(v45), "entity");
  objc_msgSend(v4, "setEntity:", v46);

  objc_msgSend(v4, "setAffectedStores:", 0);
  objc_msgSend(v4, "setPredicate:", v44);

  v47 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v47, v101);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006BA718);
  v49 = swift_getKeyPath(&unk_1006BA740);
  *(_QWORD *)(inited + 40) = v49;
  v98 = (_QWORD *)inited;
  specialized Array._endMutation()(v49);
  v50 = (unint64_t)v98;
  v100 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 2, 0);
  v51 = v100;
  v96 = (void **)v45;
  KeyPath = (uint64_t)v42;
  if ((v50 & 0xC000000000000001) != 0)
  {
    v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50);
    v53 = v52;
  }
  else
  {
    v53 = *(_QWORD *)(v50 + 32);
    v52 = swift_retain();
  }
  v54 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v52);
  if (v55)
  {
    v56 = v54;
    v57 = v55;
    swift_release(v53);
    v59 = v51[2];
    v58 = v51[3];
    if (v59 >= v58 >> 1)
    {
      sub_1001C1B0C(v58 > 1, v59 + 1, 1);
      v51 = v100;
    }
    v51[2] = v59 + 1;
    v60 = &v51[2 * v59];
    v60[4] = v56;
    v60[5] = v57;
    if ((v50 & 0xC000000000000001) != 0)
    {
      v61 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v50);
      v53 = v61;
    }
    else
    {
      v53 = *(_QWORD *)(v50 + 40);
      v61 = swift_retain();
    }
    v62 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v61);
    if (v63)
    {
      v64 = v62;
      v65 = v63;
      swift_release(v53);
      v100 = v51;
      v67 = v51[2];
      v66 = v51[3];
      if (v67 >= v66 >> 1)
      {
        sub_1001C1B0C(v66 > 1, v67 + 1, 1);
        v51 = v100;
      }
      v51[2] = v67 + 1;
      v68 = &v51[2 * v67];
      v68[4] = v64;
      v68[5] = v65;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v51);
      objc_msgSend(v4, "setRelationshipKeyPathsForPrefetching:", v69.super.isa);

      v70 = v95;
      v71 = NSManagedObjectContext.fetch<A>(_:)(v4, v96);
      v3 = v70;
      if (v70)
      {

        return v69.super.isa;
      }
      v5 = (_QWORD *)v71;
      if (qword_100837408 == -1)
      {
LABEL_33:
        v72 = v92;
        v73 = sub_10001AAA8(v92, (uint64_t)qword_100848BF8);
        v74 = v90;
        v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v73, v72);
        v96 = &v89;
        __chkstk_darwin(v75);
        v98 = v5;
        __chkstk_darwin(v76);
        v88 = v74;
        v77 = sub_10001A630(&qword_100841340);
        v78 = sub_1000151B0(0, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
        v79 = sub_1000C4C0C(&qword_100841348, &qword_100841340);
        v80 = Sequence.map<A>(skippingError:_:)(sub_1003D6D8C, &v89 - 4, sub_1003D6D74, &v89 - 4, v77, v78, v79);
        if (v3)
        {
          swift_errorRelease(v3);
          v81 = _swiftEmptyArrayStorage;
        }
        else
        {
          v81 = (_QWORD *)v80;
        }
        (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
        swift_bridgeObjectRelease();
        sub_10011F4A4((uint64_t)v81);
        swift_bridgeObjectRelease();
        v82 = objc_allocWithZone((Class)REMAssignmentsDataViewInvocationResult);
        sub_1000EC524(&qword_10083A250, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr);
        v83 = Set._bridgeToObjectiveC()().super.isa;
        v69.super.isa = (Class)objc_msgSend(v82, "initWithAssignments:", v83, swift_bridgeObjectRelease().n128_f64[0]);

        return v69.super.isa;
      }
LABEL_43:
      swift_once(&qword_100837408, sub_1003D0954);
      goto LABEL_33;
    }
  }
  v98 = 0;
  v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v86._object = (void *)0x80000001006F8C10;
  v86._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v86);
  v97 = v53;
  v87 = sub_10001A630((uint64_t *)&unk_1008443D0);
  _print_unlocked<A, B>(_:_:)(&v97, &v98, v87, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = (Class)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v98, v99, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

void sub_1003D4554(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011D420(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setIdentifier:", isa);

}

void sub_1003D4630(id *a1@<X0>, void *a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  NSString v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  void *v40;
  Class isa;
  id v42;
  id v43;
  id v44;
  id v45;
  int v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  id v50;
  NSObject **v51;
  uint64_t v52;
  char *v53;
  id v54;

  v51 = a3;
  v54 = a2;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v53 = (char *)&v50 - v16;
  v17 = *a1;
  v18 = objc_msgSend(*a1, "account", v15);
  if (!v18
    || (v19 = v18,
        v20 = objc_msgSend(v18, "remObjectID"),
        v19,
        (v50 = v20) == 0))
  {
    v24 = (void *)objc_opt_self(REMError);
    v25 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v27);

    swift_willThrow(v28);
    return;
  }
  if ((objc_msgSend(v54, "allowConcealedObjects") & 1) != 0)
  {
    v21 = -[NSObject owningReminderIdentifier](v17, "owningReminderIdentifier");
    if (v21)
    {
      v22 = v21;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v23 = 0;
    }
    else
    {
      v23 = 1;
    }
    v33 = v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v23, 1, v10);
    sub_1000A5CA8((uint64_t)v6, (uint64_t)v9, (uint64_t *)&unk_100839C80);
  }
  else
  {
    v29 = -[NSObject reminder](v17, "reminder");
    if (!v29
      || (v30 = v29, v31 = objc_msgSend(v29, "remObjectID"), v30, !v31))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      v33 = v50;
LABEL_14:
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
      v35 = (void *)objc_opt_self(REMError);
      v36 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
      v37 = swift_getObjCClassFromMetadata(v36);
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v35, "unexpectedNilPropertyWithClass:property:", v37, v38);

      swift_willThrow(v39);
      return;
    }
    v32 = objc_msgSend(v31, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    v33 = v50;
  }
  v34 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    goto LABEL_14;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v34, v9, v10);
  v40 = (void *)objc_opt_self(REMAssignment);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v42 = objc_msgSend(v40, "objectIDWithUUID:", isa);

  v43 = v33;
  v44 = v42;
  v45 = v54;
  LODWORD(v42) = objc_msgSend(v54, "allowConcealedObjects");
  v46 = objc_msgSend(v45, "allowConcealedObjects");
  v47 = v52;
  v48 = sub_10026CF88(v17, (int)v42, v46);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);

  }
  else
  {
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);

    *v51 = v49;
  }
}

Class sub_1003D4AD0(uint64_t a1)
{
  return sub_1003D3C18(a1);
}

Class sub_1003D4AF0(uint64_t a1)
{
  void *v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  NSArray v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  Class isa;
  Class result;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  char v92[48];
  _QWORD *v93;

  v3 = v2;
  v86 = a1;
  v4 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  __chkstk_darwin(v4);
  v81 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = _swiftEmptyArrayStorage;
  v11 = sub_10001CC08(objc_msgSend(v1, "allowConcealedObjects", v8));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = v93[2];
  v12 = v93[3];
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
  specialized Array._endMutation()(v14);
  KeyPath = swift_getKeyPath(&unk_1006BA660);
  v16 = objc_msgSend(v1, "objectIDs");
  v17 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v76 = v18;
    else
      v76 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v76);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v80 = v1;
  v87 = v3;
  if (v19)
  {
    v89 = _swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_43;
    }
    v85 = KeyPath;
    v20 = 0;
    v21 = v89;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      else
        v22 = *(id *)(v18 + 8 * v20 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, "uuid", v80);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v25 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 0, 1, v25);

      v89 = v21;
      v27 = v21[2];
      v26 = v21[3];
      if (v27 >= v26 >> 1)
      {
        sub_1001C1BB8(v26 > 1, v27 + 1, 1);
        v21 = v89;
      }
      ++v20;
      v21[2] = v27 + 1;
      sub_1000A5CA8((uint64_t)v10, (uint64_t)v21+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v27, (uint64_t *)&unk_100839C80);
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
    KeyPath = v85;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = _swiftEmptyArrayStorage;
  }
  v28 = sub_100341B90(KeyPath, (uint64_t)v21);
  v29 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
  v31 = v93[2];
  v30 = v93[3];
  if (v31 >= v30 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
  v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
  specialized Array._endMutation()(v32);
  v33 = v93;
  swift_bridgeObjectRetain(v93);
  v35 = (void *)sub_10000D2BC(v34);
  v36 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v10 = (char *)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "entity");
  objc_msgSend(v10, "setEntity:", v37);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v35);

  v38 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v38, v92);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006BA690);
  v40 = swift_getKeyPath(&unk_1006BA6C8);
  *(_QWORD *)(inited + 40) = v40;
  v89 = (_QWORD *)inited;
  specialized Array._endMutation()(v40);
  v41 = (unint64_t)v89;
  v91 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 2, 0);
  v42 = v91;
  v84 = v33;
  v85 = v36;
  if ((v41 & 0xC000000000000001) != 0)
  {
    v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
    v44 = v43;
  }
  else
  {
    v44 = *(_QWORD *)(v41 + 32);
    v43 = swift_retain();
  }
  v45 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v43);
  if (v46)
  {
    v47 = v45;
    v48 = v46;
    swift_release(v44);
    v50 = v42[2];
    v49 = v42[3];
    if (v50 >= v49 >> 1)
    {
      sub_1001C1B0C(v49 > 1, v50 + 1, 1);
      v42 = v91;
    }
    v42[2] = v50 + 1;
    v51 = &v42[2 * v50];
    v51[4] = v47;
    v51[5] = v48;
    if ((v41 & 0xC000000000000001) != 0)
    {
      v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v41);
      v44 = v52;
    }
    else
    {
      v44 = *(_QWORD *)(v41 + 40);
      v52 = swift_retain();
    }
    v53 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v52);
    if (v54)
    {
      v55 = v53;
      v56 = v54;
      swift_release(v44);
      v91 = v42;
      v58 = v42[2];
      v57 = v42[3];
      if (v58 >= v57 >> 1)
      {
        sub_1001C1B0C(v57 > 1, v58 + 1, 1);
        v42 = v91;
      }
      v42[2] = v58 + 1;
      v59 = &v42[2 * v58];
      v59[4] = v55;
      v59[5] = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v42);
      objc_msgSend(v10, "setRelationshipKeyPathsForPrefetching:", v60.super.isa);

      v61 = v87;
      v62 = NSManagedObjectContext.fetch<A>(_:)(v10, v85);
      v19 = (uint64_t)v61;
      if (v61)
      {

        return v60.super.isa;
      }
      v3 = (void **)v62;
      if (qword_100837408 == -1)
      {
LABEL_33:
        v63 = v83;
        v64 = sub_10001AAA8(v83, (uint64_t)qword_100848BF8);
        v65 = v81;
        v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v64, v63);
        v87 = &v80;
        __chkstk_darwin(v66);
        v89 = v3;
        __chkstk_darwin(v67);
        v79 = v65;
        v68 = sub_10001A630(&qword_10083DAE0);
        v69 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
        v70 = sub_1000C4C0C((unint64_t *)&unk_10083DAE8, &qword_10083DAE0);
        v71 = Sequence.map<A>(skippingError:_:)(sub_1003D6D54, &v80 - 4, sub_1003D6D3C, &v80 - 4, v68, v69, v70);
        if (v19)
        {
          swift_errorRelease(v19);
          v72 = _swiftEmptyArrayStorage;
        }
        else
        {
          v72 = (_QWORD *)v71;
        }
        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
        swift_bridgeObjectRelease();
        sub_10011F4C8((uint64_t)v72);
        swift_bridgeObjectRelease();
        v73 = objc_allocWithZone((Class)REMHashtagsDataViewInvocationResult);
        sub_1000EC524((unint64_t *)&qword_10083B670, &qword_10083DAC0, REMHashtag_ptr);
        isa = Set._bridgeToObjectiveC()().super.isa;
        v60.super.isa = (Class)objc_msgSend(v73, "initWithHashtags:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        return v60.super.isa;
      }
LABEL_43:
      swift_once(&qword_100837408, sub_1003D0954);
      goto LABEL_33;
    }
  }
  v89 = 0;
  v90 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v77._object = (void *)0x80000001006F8C10;
  v77._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v77);
  v88 = v44;
  v78 = sub_10001A630(&qword_10083DAA0);
  _print_unlocked<A, B>(_:_:)(&v88, &v89, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = (Class)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v89, v90, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

void sub_1003D5364(id *a1@<X0>, void *a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  NSString v19;
  uint64_t v20;
  void *v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  NSObject **v28;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = objc_msgSend(*a1, "account", v9);
  if (v13
    && (v14 = v13, v15 = objc_msgSend(v13, "remObjectID"), v14, v15))
  {
    sub_1003D55AC((char)objc_msgSend(a2, "allowConcealedObjects"), (uint64_t)v11);
    if (v3)
    {

    }
    else
    {
      v28 = a3;
      v21 = (void *)objc_opt_self(REMReminder);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v23 = objc_msgSend(v21, "objectIDWithUUID:", isa);

      v24 = v15;
      v25 = v23;
      v26 = sub_1003042BC(v12, (char)objc_msgSend(a2, "allowConcealedObjects"));
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

      *v28 = v26;
    }
  }
  else
  {
    v16 = (void *)objc_opt_self(REMError);
    v17 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v19);

    swift_willThrow(v20);
  }
}

uint64_t sub_1003D55AC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  id v22;
  void *v23;
  id v24;
  id v25;
  void (*v26)(char *, char *, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t ObjCClassFromMetadata;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  _QWORD v33[2];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)v33 - v15;
  if ((a1 & 1) != 0 && (objc_msgSend(v3, "markedForDeletion", v14) & 1) != 0)
    goto LABEL_5;
  v17 = objc_msgSend(v3, "sharedToMeReminderCKIdentifier", v14);
  if (v17)
  {

LABEL_5:
    v18 = objc_msgSend(v3, "reminderIdentifier");
    if (v18)
    {
      v19 = v18;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v20(v16, v9, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) != 1)
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(a2, v16, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v16, 1, 1, v6);
    }
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
    v27 = (void *)objc_opt_self(REMError);
    v28 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v28);
    goto LABEL_16;
  }
  v22 = objc_msgSend(v3, "reminder");
  if (v22
    && (v23 = v22, v24 = objc_msgSend(v22, "remObjectID"), v23, v24))
  {
    v25 = objc_msgSend(v24, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v26(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(a2, v12, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_10000882C((uint64_t)v12, (uint64_t *)&unk_100839C80);
  v27 = (void *)objc_opt_self(REMError);
  v30 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v30);
LABEL_16:
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v31);

  return swift_willThrow(v32);
}

Class sub_1003D5928(uint64_t a1)
{
  return sub_1003D4AF0(a1);
}

void sub_1003D5948(void **a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v4;
  void *v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t inited;
  id v14;
  unint64_t v15;
  Class isa;
  uint64_t v17;
  char v18[40];

  v8 = *a1;
  v9 = sub_100223CB4(*a1);
  if (!v4)
  {
    v10 = v9;
    if (objc_msgSend(a2, "includeDueDateDeltaAlerts"))
    {
      v11 = objc_msgSend(a2, "includeConcealed");
      v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
      inited = swift_initStackObject(v12, v18);
      *(_OWORD *)(inited + 16) = xmmword_1006A7330;
      *(_QWORD *)(inited + 32) = v8;
      v17 = inited;
      specialized Array._endMutation()(inited);
      v14 = v8;
      v15 = sub_1001A483C(v17, v11, a3);
      swift_bridgeObjectRelease();
      sub_10027BA18(v15);
      swift_bridgeObjectRelease();
      sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v10, "setFetchedDueDateDeltaAlerts:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    }
    *a4 = v10;
  }
}

void sub_1003D5AA8(_QWORD *a1, void **a2, uint64_t a3, void *a4, void (**a5)(uint64_t, uint64_t, uint64_t, id))
{
  uint64_t v5;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *context;

  v9 = *a2;
  v10 = objc_autoreleasePoolPush();
  v11 = objc_msgSend(a4, "objectID");
  v12 = sub_1000D33D8(v9, v11, a5);
  if (v5)
  {

    objc_autoreleasePoolPop(v10);
  }
  else
  {
    v13 = v12;

    objc_autoreleasePoolPop(v10);
    v14 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v16 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v15 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v15 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
    v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
    specialized Array._endMutation()(v17);
    v18 = objc_msgSend(v14, "parentReminderID");
    if (v18)
    {
      v19 = v18;
      context = objc_autoreleasePoolPush();
      v20 = objc_msgSend(a4, "objectID");
      v21 = sub_1000D33D8(v19, v20, a5);

      objc_autoreleasePoolPop(context);
      v22 = v21;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      specialized Array._endMutation()(v25);

    }
  }
}

uint64_t sub_1003D5C94(uint64_t a1, uint64_t a2)
{
  return sub_10037ED60(a2);
}

uint64_t sub_1003D5CA0(uint64_t a1, uint64_t a2)
{
  return sub_100380050(a2);
}

unint64_t sub_1003D5CAC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v8 & 1) != 0)
      result = v7;
    if (4 * v5 >= result >> 14)
      return String.subscript.getter(result, v7, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D5D48(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v22 = v2;
    v23 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v5 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = v3;
      v9 = objc_msgSend(v5, "entityName");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = objc_msgSend(a2, "entityName");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = v10 == v14 && v12 == v16;
      if (v17)
      {

        swift_bridgeObjectRelease_n(v12, 2);
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0);

        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v16);
        if ((v18 & 1) == 0)
        {
          v19 = 1;
          v2 = v22;
          goto LABEL_23;
        }
      }
      ++v4;
      v3 = v8;
      v17 = v7 == v8;
      v2 = v22;
      if (v17)
      {
        v19 = 0;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v2 < 0)
      v20 = v2;
    else
      v20 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  v19 = 0;
LABEL_23:
  swift_bridgeObjectRelease(v2);
  return v19;
}

uint64_t sub_1003D5F00(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  Class isa;
  Class v33;
  Class v34;
  Class v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837408 != -1)
    swift_once(&qword_100837408, sub_1003D0954);
  v10 = sub_10001AAA8(v6, (uint64_t)qword_100848BF8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v40 = &v38;
  __chkstk_darwin(v11);
  v42 = a2;
  v43 = a3;
  *(&v38 - 2) = (uint64_t)a2;
  *(&v38 - 1) = a3;
  v39 = a1;
  v44 = (_QWORD *)a1;
  __chkstk_darwin(v12);
  *(&v38 - 2) = (uint64_t)v9;
  v13 = sub_10001A630(&qword_10083D590);
  v14 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v15 = sub_1000C4C0C((unint64_t *)&qword_10083FB70, &qword_10083D590);
  v38 = v14;
  v16 = v41;
  v17 = Sequence.map<A>(skippingError:_:)(sub_1003D6AD0, &v38 - 4, sub_1003D6AB8, &v38 - 4, v13, v14, v15);
  if (v16)
  {
    swift_errorRelease(v16);
    v18 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v18 = v17;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20 = v42;
  v19 = v43;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v37 = v18;
    else
      v37 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v21 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v21)
    goto LABEL_16;
  v44 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v21);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
      else
        v24 = *(id *)(v18 + 8 * v23 + 32);
      v25 = v24;
      ++v23;
      v26 = objc_msgSend(v24, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v44[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized ContiguousArray._endMutation()(v29);
    }
    while (v21 != v23);
    v20 = v42;
    v19 = v43;
LABEL_16:
    sub_10033F8B0(v39, v20, v19);
    v44 = v30;
    sub_1001E2B34(v18);
    v31 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v35 = Array._bridgeToObjectiveC()().super.isa;
    v36 = objc_msgSend(v31, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v33, v34, v35, swift_bridgeObjectRelease().n128_f64[0]);

    return (uint64_t)v36;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D630C(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  Class isa;
  Class v32;
  Class v33;
  Class v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  _BYTE v42[24];
  _QWORD *v43;

  v40 = a3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMSavedReminderStorageCDIngestor();
  inited = (_QWORD *)swift_initStackObject(v9, v42);
  inited[2] = a2;
  v11 = qword_100837408;
  v38 = a2;
  if (v11 != -1)
    swift_once(&qword_100837408, sub_1003D0954);
  v12 = sub_10001AAA8(v5, (uint64_t)qword_100848BF8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
  v39 = a1;
  v43 = (_QWORD *)a1;
  __chkstk_darwin(v13);
  *(&v37 - 2) = (uint64_t)v8;
  v14 = sub_10001A630(&qword_1008519F0);
  v15 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v16 = sub_1000C4C0C(&qword_10083FB60, &qword_1008519F0);
  v37 = v15;
  v17 = v41;
  v18 = Sequence.map<A>(skippingError:_:)(sub_1003D6CFC, &v37 - 4, sub_1003D6CD0, inited, v14, v15, v16);
  if (v17)
  {
    swift_errorRelease(v17);
    v19 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v19 = v18;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v36 = v19;
    else
      v36 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v20)
    goto LABEL_16;
  v43 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v20);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v41 = inited;
    v22 = 0;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v19);
      else
        v23 = *(id *)(v19 + 8 * v22 + 32);
      v24 = v23;
      ++v22;
      v25 = objc_msgSend(v23, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v27 = v43[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized ContiguousArray._endMutation()(v28);
    }
    while (v20 != v22);
    inited = v41;
LABEL_16:
    sub_1004B3700(v39, v38, v40);
    v43 = v29;
    sub_1001E2B34(v19);
    v41 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v30 = inited;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v32 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v34 = Array._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v41, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v32, v33, v34, swift_bridgeObjectRelease().n128_f64[0]);

    swift_setDeallocating(v30);
    return (uint64_t)v35;
  }
  __break(1u);
  return result;
}

id sub_1003D6718(id a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Class isa;
  Class v24;
  Class v25;
  Class v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  void *v30;
  uint64_t v31;

  v6 = type metadata accessor for RDPublicTemplate(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v9 = qword_100872288;
  v10 = (void *)swift_retain();
  v11 = sub_1003011F8(v10);
  swift_release(v9);
  if (v11)
  {
    v12 = sub_100259474(v11);
    if (v3)
    {

    }
    else
    {
      v14 = v12;
      v15 = objc_msgSend(v12, "objectID", sub_10057B4DC(v8));
      v16 = sub_1000D31C8(v15);

      __chkstk_darwin(v17);
      *(&v27 - 4) = (uint64_t)v8;
      *(&v27 - 3) = (uint64_t)v14;
      *(&v27 - 2) = a3;
      v30 = sub_10027BDE4(_swiftEmptyArrayStorage, (void (*)(void **, id *))sub_1003D6D08, (uint64_t)(&v27 - 6), (uint64_t)a1);
      v19 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v20 = swift_allocObject(v19, 40, 7);
      v29 = xmmword_1006A7330;
      *(_OWORD *)(v20 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v20 + 32) = v14;
      v31 = v20;
      specialized Array._endMutation()(v20);
      v21 = swift_allocObject(v19, 40, 7);
      *(_OWORD *)(v21 + 16) = v29;
      *(_QWORD *)(v21 + 32) = v16;
      v31 = v21;
      specialized Array._endMutation()(v21);
      v28 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      *(_QWORD *)&v29 = v14;
      v22 = v16;
      swift_bridgeObjectRetain(a1);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      v24 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
      v25 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v26 = Array._bridgeToObjectiveC()().super.isa;
      a1 = objc_msgSend(v28, "initWithAccountStorages:listStorages:reminderStorages:objectIDs:", isa, v24, v25, v26, swift_bridgeObjectRelease().n128_f64[0]);

      sub_10001C744((uint64_t)v8, type metadata accessor for RDPublicTemplate);
    }
  }
  else
  {
    v13 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    swift_willThrow(v13);
  }
  return a1;
}

void sub_1003D6AB8(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;

  sub_1003D5948(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1003D6AD0(uint64_t a1, uint64_t a2)
{
  return sub_10037ED60(a2);
}

void sub_1003D6ADC(uint64_t a1, unint64_t a2)
{
  sub_1003D6AF4(a1, a2, (void (*)(_QWORD))type metadata accessor for DueDateVerifiableAlarm);
}

void sub_1003D6AE8(uint64_t a1, unint64_t a2)
{
  sub_1003D6AF4(a1, a2, (void (*)(_QWORD))type metadata accessor for DueDateNonVerifiableAlarm);
}

void sub_1003D6AF4(uint64_t a1, unint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a3;
    v3 = a2;
    v4 = a1;
    v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v3 < 0)
    v17 = v3;
  else
    v17 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v7 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v3);
LABEL_4:
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if (v7 < 0)
    v8 = v4;
  if (v4)
    v9 = v8;
  else
    v9 = 0;
  if (v7 < v9)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v6)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v10 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9)
    goto LABEL_45;
  if (v9 < 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v6)
  {
    if (v3 < 0)
      v13 = v3;
    else
      v13 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v12 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 < v7)
    goto LABEL_47;
  if ((v3 & 0xC000000000000001) != 0 && v9 != v7)
  {
    if (v9 < (unint64_t)v7)
    {
      v5(0);
      v14 = v9;
      do
      {
        v15 = v14 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v14);
        v14 = v15;
      }
      while (v7 != v15);
      goto LABEL_33;
    }
LABEL_48:
    __break(1u);
    return;
  }
LABEL_33:
  if (v6)
  {
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    _CocoaArrayWrapper.subscript.getter(v9, v7, v16);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    swift_bridgeObjectRetain(v3);
  }
}

char *sub_1003D6CD0@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = sub_100473020(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1003D6CFC(uint64_t a1, uint64_t a2)
{
  return sub_100380050(a2);
}

void sub_1003D6D08(_QWORD *a1, void **a2)
{
  uint64_t v2;

  sub_1003D5AA8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void (***)(uint64_t, uint64_t, uint64_t, id))(v2 + 32));
}

void sub_1003D6D3C(id *a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;

  sub_1003D5364(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1003D6D54(uint64_t a1, uint64_t a2)
{
  return sub_1002222A0(a1, a2);
}

void sub_1003D6D74(id *a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;

  sub_1003D4630(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1003D6D8C(uint64_t a1, uint64_t a2)
{
  return sub_10038153C(a2);
}

uint64_t sub_1003D6DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D6E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848C20);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848C20);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD00000000000003ALL;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006BA850;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000F4294((uint64_t)v13);
LABEL_9:
    sub_1003D7094(_.super.isa, metadata.super.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD00000000000003ALL;
    v13[1] = 0x80000001006BA850;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

void sub_1003D7094(void *a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t aBlock[3];
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  _QWORD v40[2];
  _OWORD v41[2];

  v3 = v2;
  if (qword_100837410 != -1)
    swift_once(&qword_100837410, sub_1003D6E08);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_100848C20);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    aBlock[0] = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_1002AEF14();
    *(_QWORD *)&v41[0] = sub_10001A820((uint64_t)v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnsetCKDirtyFlagsInNonCKAccounts BEGIN {store: %{public}s}", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    v14 = v10;
    v3 = v2;
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)&v41[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerAccountIdentifier"));
  *((_QWORD *)&v41[0] + 1) = v15;
  swift_bridgeObjectRetain(v15);
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v41, &type metadata for String);
  v17 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v16);
  swift_unknownObjectRelease(v16);
  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v41, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v41, 0, sizeof(v41));
  }
  sub_10001A5E8((uint64_t)v41, (uint64_t)aBlock);
  if (!v37)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1000F4294((uint64_t)aBlock);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(v40, aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v18 = v40[0];
    v19 = v40[1];
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
    v21 = objc_msgSend(v7, "persistentStoreCoordinator");
    objc_msgSend(v20, "setPersistentStoreCoordinator:", v21);

    objc_msgSend(v20, "setTransactionAuthor:", RDStoreControllerUnsetCKDirtyFlagsInNonCKAccountsMigrationAuthor);
    v22 = (_QWORD *)swift_allocObject(&unk_1007F2A68, 56, 7);
    v22[2] = v3;
    v22[3] = v7;
    v22[4] = v20;
    v22[5] = v18;
    v22[6] = v19;
    v23 = swift_allocObject(&unk_1007F2A90, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_1003D7CE4;
    *(_QWORD *)(v23 + 24) = v22;
    v38 = sub_1000098E4;
    v39 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000098C4;
    v37 = &unk_1007F2AA8;
    v24 = _Block_copy(aBlock);
    v25 = v39;
    v26 = v7;
    v27 = v3;
    v28 = v20;
    swift_retain();
    swift_release(v25);
    objc_msgSend(v28, "performBlockAndWait:", v24);

    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 130, 42, 28, 1);
    swift_release(v22);
    swift_release(v23);
    if ((v24 & 1) == 0)
      return;
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  v29 = v7;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    aBlock[0] = v33;
    *(_DWORD *)v32 = 136446210;
    v34 = sub_1002AEF14();
    *(_QWORD *)&v41[0] = sub_10001A820((uint64_t)v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 8);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} accountIdentifier is nil, skip migration", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
}

void sub_1003D75D0(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  char *v26;
  _BYTE v27[16];
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31[2];

  v28 = a2;
  v29 = a3;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(v31, sub_1000D9BBC, v27, &type metadata for Bool);
  if ((v31[0] & 1) != 0)
  {
    if (qword_100837410 != -1)
      swift_once(&qword_100837410, sub_1003D6E08);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_100848C20);
    v10 = a2;
    swift_bridgeObjectRetain_n(a5, 2);
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v31[0] = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = sub_1002AEF14();
      v30 = sub_10001A820((uint64_t)v16, v17, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v30 = sub_10001A820(a4, a5, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} with {account: %s} is not a CK account, skip migration", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      v18 = v15;
LABEL_10:
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n(a5, 2);
  }
  else
  {
    v26 = sub_1003D7D04(a3, a2);
    if (qword_100837410 != -1)
      swift_once(&qword_100837410, sub_1003D6E08);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_100848C20);
    v20 = a2;
    swift_bridgeObjectRetain_n(a5, 2);
    v21 = v20;
    v12 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v22))
    {
      v14 = swift_slowAlloc(32, -1);
      v23 = swift_slowAlloc(64, -1);
      v31[0] = v23;
      *(_DWORD *)v14 = 136446722;
      v24 = sub_1002AEF14();
      v30 = sub_10001A820((uint64_t)v24, v25, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v30 = sub_10001A820(a4, a5, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v14 + 22) = 2048;
      v30 = (uint64_t)v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v12, v22, "UnsetCKDirtyFlagsInNonCKAccounts END {store: %{public}s, migrated ckDirtyFlagsInNonCKAccounts, accountIdentifier = %s, count = %ld}", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      v18 = v23;
      goto LABEL_10;
    }

    swift_bridgeObjectRelease_n(a5, 2);
  }
}

id RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts()
{
  return objc_opt_self(_TtC7remindd58RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts);
}

id RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1003D7CA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1003D7CE4()
{
  uint64_t v0;

  sub_1003D75D0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1003D7CF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

char *sub_1003D7D04(void *a1, void *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint32_t *p_ivar_base_size;
  void *ObjCClassFromMetadata;
  id v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  __n128 v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  NSNumber v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  __int128 v49;
  __int128 v50;
  char v51[104];

  v3 = objc_msgSend((id)objc_opt_self(REMCDObject), "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
  v4 = sub_10001A630(&qword_100847A00);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v41 = *(_QWORD *)(v5 + 16);
  if (v41)
  {
    v6 = 0;
    v7 = 0;
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    v42 = v5;
    while (1)
    {
      v45 = v7;
      v46 = v6;
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(*(_QWORD *)(v5 + 8 * v7 + 32));
      if ((objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", *((_QWORD *)p_ivar_base_size + 478)) & 1) == 0)goto LABEL_17;
      v10 = objc_msgSend(ObjCClassFromMetadata, *((SEL *)p_ivar_base_size + 478));
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      v11 = objc_allocWithZone((Class)NSBatchUpdateRequest);
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(v11, "initWithEntityName:", v12, swift_bridgeObjectRelease().n128_f64[0]);

      sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
      v14 = sub_10001A630((uint64_t *)&unk_10083A270);
      v15 = swift_allocObject(v14, 112, 7);
      *(_OWORD *)(v15 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v15 + 56) = &type metadata for String;
      *(_QWORD *)(v15 + 64) = sub_1000184F8();
      strcpy((char *)(v15 + 32), "ckDirtyFlags");
      *(_BYTE *)(v15 + 45) = 0;
      *(_WORD *)(v15 + 46) = -5120;
      v16 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      *(_QWORD *)(v15 + 96) = v16;
      *(_QWORD *)(v15 + 104) = sub_1003D82C4();
      *(_QWORD *)(v15 + 72) = isa;
      v19 = (void *)NSPredicate.init(format:_:)(0x4025203E204B25, 0xE700000000000000, v15, v18);
      objc_msgSend(v13, "setPredicate:", v19);

      v20 = sub_10001A630(&qword_10083ADC0);
      inited = swift_initStackObject(v20, v51);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      strcpy((char *)&v49, "ckDirtyFlags");
      BYTE13(v49) = 0;
      HIWORD(v49) = -5120;
      AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v49, &type metadata for String, &protocol witness table for String);
      v22.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      *(_QWORD *)(inited + 96) = v16;
      *(NSNumber *)(inited + 72) = v22;
      sub_1002B007C(inited);
      v23 = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v13, "setPropertiesToUpdate:", v23, swift_bridgeObjectRelease().n128_f64[0]);

      objc_msgSend(v13, "setIncludesSubentities:", 1);
      objc_msgSend(v13, "setResultType:", 2);
      v24 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v25 + 32) = a2;
      *(_QWORD *)&v49 = v25;
      specialized Array._endMutation()(v25);
      sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      v6 = (char *)v13;
      v26 = a2;
      v27 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "setAffectedStores:", v27, swift_bridgeObjectRelease().n128_f64[0]);

      v47 = 0;
      v28 = objc_msgSend(a1, "executeRequest:error:", v6, &v47);
      v29 = v47;
      if (!v28)
      {
        v38 = v47;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)(v29);

        swift_willThrow(v39);
        return v6;
      }
      v30 = v28;
      *((_QWORD *)&v50 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
      *(_QWORD *)&v49 = v30;
      v31 = sub_1000151B0(0, &qword_1008431A0, NSBatchUpdateResult_ptr);
      v32 = v29;
      throwingCast<A>(_:as:failureMessage:)(&v48, &v49, v31, 0, 0, v31);
      if (v2)
        break;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v49);
      v33 = v48;
      v34 = objc_msgSend(v48, "result");
      if (v34)
      {
        v35 = v34;
        _bridgeAnyObjectToAny(_:)(&v49, v34);
        swift_unknownObjectRelease(v35);
      }
      else
      {
        v49 = 0u;
        v50 = 0u;
      }
      throwingCast<A>(_:as:failureMessage:)(&v48, &v49, v16, 0, 0, v16);
      sub_1000F4294((uint64_t)&v49);
      v36 = v48;
      v37 = (char *)objc_msgSend(v48, "integerValue");

      v6 = &v37[(_QWORD)v46];
      if (__OFADD__(v46, v37))
      {
        __break(1u);
LABEL_17:
        __break(1u);
      }
      v7 = v45 + 1;
      v5 = v42;
      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
      if (v41 == v45 + 1)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }

    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v49);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

unint64_t sub_1003D82C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100848C60;
  if (!qword_100848C60)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100848C60);
  }
  return result;
}

uint64_t sub_1003D831C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848C68);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848C68);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1003D83AC()
{
  void **v0;
  void *v1;
  NSString v2;
  id v3;

  v1 = *v0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "fileExistsAtPath:", v2);

  return v3;
}

id sub_1003D83F0(uint64_t a1, char a2, objc_class *a3)
{
  return sub_1003D8410(a1, a2, a3);
}

id sub_1003D8410(uint64_t a1, char a2, Class isa)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v12;
  uint64_t v13;
  id v14;

  v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v8 = v7;
  if (isa)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_10009FC50(&qword_1008382B8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4FBC);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14 = 0;
  v9 = objc_msgSend(v4, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, a2 & 1, isa, &v14);

  v10 = v14;
  if (v9)
    return v14;
  v12 = v14;
  _convertNSErrorToError(_:)(v10);

  return (id)swift_willThrow(v13);
}

id sub_1003D8538(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class a5)
{
  void **v5;
  void *v8;
  NSString v9;
  Class isa;
  id v11;

  v8 = *v5;
  v9 = String._bridgeToObjectiveC()();
  if (a4 >> 60 == 15)
  {
    isa = 0;
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
LABEL_5:
    type metadata accessor for FileAttributeKey(0);
    sub_10009FC50(&qword_1008382B8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1006A4FBC);
    a5 = Dictionary._bridgeToObjectiveC()().super.isa;
  }
LABEL_6:
  v11 = objc_msgSend(v8, "createFileAtPath:contents:attributes:", v9, isa, a5);

  return v11;
}

uint64_t sub_1003D861C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v1 = v0;
  v2 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v38 - v9;
  v44[0] = 0x73656C6946;
  v44[1] = 0xE500000000000000;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v3 + 104))(v5, enum case for URL.DirectoryHint.isDirectory(_:), v2, v8);
  v11 = sub_1000E525C();
  URL.appending<A>(path:directoryHint:)(v44, v5, &type metadata for String, v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_10000A388(v12, v12[3]);
  (*(void (**)(char *, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(v10, 1, 0, v13, v14);
  v15 = sub_1003D8E44();
  v17 = v16;
  v18 = v12[3];
  v19 = v12[4];
  sub_10000A388(v12, v18);
  if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t))(v19 + 24))(v15, v17, 0, 0xF000000000000000, 0, v18, v19) & 1) != 0)
  {
    if (qword_100837418 != -1)
      swift_once(&qword_100837418, sub_1003D831C);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_100848C68);
    swift_retain_n(v0);
    swift_bridgeObjectRetain(v17);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v44[0] = v25;
      *(_DWORD *)v24 = 136446466;
      v39 = v6;
      v40 = v10;
      v27 = *(_QWORD *)(v1 + 16);
      v26 = *(_QWORD *)(v1 + 24);
      swift_bridgeObjectRetain(v26);
      v42 = sub_10001A820(v27, v26, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      swift_release_n(v1);
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain(v17);
      v42 = sub_10001A820(v15, v17, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] Created sentinel file at %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v40, v39);
    }
    goto LABEL_10;
  }
  if (qword_100837418 != -1)
    swift_once(&qword_100837418, sub_1003D831C);
  v29 = type metadata accessor for Logger(0);
  sub_10001AAA8(v29, (uint64_t)qword_100848C68);
  swift_retain_n(v0);
  swift_bridgeObjectRetain(v17);
  v22 = Logger.logObject.getter(v30);
  v31 = static os_log_type_t.error.getter(v22);
  if (!os_log_type_enabled(v22, v31))
  {
LABEL_10:
    swift_release_n(v1);
    swift_bridgeObjectRelease_n(v17, 2);

    v37 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
    v36 = v10;
    return v37(v36, v6);
  }
  v32 = swift_slowAlloc(22, -1);
  v39 = swift_slowAlloc(64, -1);
  v44[0] = v39;
  *(_DWORD *)v32 = 136446466;
  v40 = v10;
  v33 = *(_QWORD *)(v1 + 16);
  v34 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v34);
  v42 = sub_10001A820(v33, v34, v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
  swift_release_n(v1);
  swift_bridgeObjectRelease();
  *(_WORD *)(v32 + 12) = 2080;
  swift_bridgeObjectRetain(v17);
  v42 = sub_10001A820(v15, v17, v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
  swift_bridgeObjectRelease_n(v17, 3);
  _os_log_impl((void *)&_mh_execute_header, v22, v31, "[%{public}s] Cannot create sentinel file at %s", (uint8_t *)v32, 0x16u);
  v35 = v39;
  swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1, -1);
  swift_slowDealloc(v32, -1, -1);

  v36 = v40;
  v37 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
  return v37(v36, v6);
}

uint64_t sub_1003D8E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, _QWORD, uint64_t);
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  void (*v18)(char *, uint64_t, __n128);
  uint64_t countAndFlagsBits;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v21 - v10;
  v23 = 0x73656C6946;
  v24 = 0xE500000000000000;
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v12(v5, enum case for URL.DirectoryHint.isDirectory(_:), v2);
  v13 = sub_1000E525C();
  URL.appending<A>(path:directoryHint:)(&v23, v5, &type metadata for String, v13);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  v15 = swift_bridgeObjectRelease(v24);
  v16 = *(_QWORD *)(v0 + 24);
  v23 = *(_QWORD *)(v1 + 16);
  v24 = v16;
  ((void (*)(char *, _QWORD, uint64_t, __n128))v12)(v5, enum case for URL.DirectoryHint.notDirectory(_:), v2, v15);
  swift_bridgeObjectRetain(v16);
  URL.appending<A>(path:directoryHint:)(&v23, v5, &type metadata for String, v13);
  v14(v5, v2);
  v17 = swift_bridgeObjectRelease(v24);
  v18 = *(void (**)(char *, uint64_t, __n128))(v22 + 8);
  v18(v9, v6, v17);
  countAndFlagsBits = URL.path(percentEncoded:)(0)._countAndFlagsBits;
  ((void (*)(char *, uint64_t))v18)(v11, v6);
  return countAndFlagsBits;
}

uint64_t sub_1003D9028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003D9090()
{
  return type metadata accessor for RDSentinelFileLocation(0);
}

uint64_t type metadata accessor for RDSentinelFileLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_100848CB8;
  if (!qword_100848CB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSentinelFileLocation);
  return result;
}

uint64_t sub_1003D90D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1006BA908;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1006BA920;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1003D9154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848D78);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848D78);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003D91E4(NSObject *a1)
{
  id *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  NSObject *v48;
  char *v49;
  os_log_type_t v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t MetatypeMetadata;
  uint64_t v55;
  unint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  double v63;
  char *v64;
  void *v65;
  char *v66;
  os_log_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  NSObject *v75;
  void *v76;
  void *v77;
  char *v78;
  id v79;
  char *v80;
  id v81;
  unint64_t v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  id *p_isa;
  id v88;
  id v89;
  uint64_t v90;
  void *v91;
  id v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  id v97;
  void *v98;
  char *v99;
  uint64_t v100;
  id *v101;
  uint64_t v102;
  os_log_t v103;
  char *v104;
  Class isa;
  void *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  __n128 v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  void *v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  char *v130;
  char *v131;
  double v132;
  char *v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  unsigned int v136;
  id v137;
  char *v138;
  NSObject *v139;
  os_log_type_t v140;
  int v141;
  uint64_t v142;
  _QWORD *v143;
  void *v144;
  uint64_t v145;
  void *v146;
  id v147;
  uint64_t v148;
  id v149;
  id v150;
  uint64_t v151;
  char *v152;
  char *v153;
  double v154;
  char *v155;
  uint64_t v156;
  void *v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  void *v162;
  char *v163;
  char *v164;
  id v165;
  char *v166;
  char *v167;
  uint64_t v168;
  id v169;
  void (*v170)(id, char *, uint64_t);
  os_log_t v171;
  char *v172;
  uint64_t Subtasks;
  void *v174;
  char *v175;
  _QWORD *v176;
  NSObject *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  unint64_t v183;

  v2 = (char *)v1;
  v165 = *v1;
  v174 = (void *)_s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v174);
  v172 = (char *)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v171 = *(os_log_t *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v170 = (void (*)(id, char *, uint64_t))((char *)&v160 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Date(0);
  v175 = *(char **)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v160 - v10;
  __chkstk_darwin(v12);
  v167 = (char *)&v160 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v160 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v160 - v18;
  if (qword_100837420 != -1)
    swift_once(&qword_100837420, sub_1003D9154);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001AAA8(v20, (uint64_t)qword_100848D78);
  v22 = swift_retain_n(v2);
  v168 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = os_log_type_enabled(v23, v24);
  v178 = v6;
  v179 = v19;
  v164 = v8;
  v163 = v11;
  v169 = v16;
  if (v25)
  {
    v26 = swift_slowAlloc(32, -1);
    v27 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v26 = 138543874;
    v28 = (void *)*((_QWORD *)v2 + 3);
    v177 = a1;
    v181 = (uint64_t)v28;
    v29 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    *v27 = v28;
    swift_release_n(v2);
    *(_WORD *)(v26 + 12) = 2114;
    v30 = (void *)*((_QWORD *)v2 + 4);
    v181 = (uint64_t)v30;
    v31 = v30;
    v32 = v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    v27[1] = v30;
    swift_release_n(v2);
    *(_WORD *)(v26 + 22) = 2048;
    swift_release(v2);
    v181 = 50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v26, 0x20u);
    v33 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v27, 2, v33);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    v34 = swift_release_n(v2);
    v32 = a1;
  }
  Date.init()(v34);
  v35 = (void *)*((_QWORD *)v2 + 3);
  v36 = (uint64_t)v170;
  v37 = v171;
  v38 = Subtasks;
  ((void (*)(_QWORD, _QWORD, uint64_t))v171[13].isa)(v170, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  v39 = (uint64_t)v172;
  swift_storeEnumTagMultiPayload(v172, v174, 5);
  v40 = v176;
  v41 = sub_1001D6E14((uint64_t)v35, v32, v36, v39);
  v42 = v175;
  v174 = v40;
  if (v40)
  {
    sub_10001C744(v39, _s9UtilitiesO12SortingStyleOMa);
    ((void (*)(uint64_t, uint64_t))v37[1].isa)(v36, v38);
    (*((void (**)(char *, uint64_t))v42 + 1))(v179, v178);
    return;
  }
  v43 = v41;
  v177 = v32;
  sub_10001C744(v39, _s9UtilitiesO12SortingStyleOMa);
  ((void (*)(uint64_t, uint64_t))v37[1].isa)(v36, v38);
  v44 = v169;
  v45 = v178;
  v170 = (void (*)(id, char *, uint64_t))*((_QWORD *)v42 + 2);
  v170(v169, v179, v178);
  swift_retain_n(v2);
  v46 = v43;
  v47 = swift_bridgeObjectRetain_n(v43, 2);
  v48 = Logger.logObject.getter(v47);
  v49 = v42;
  v50 = static os_log_type_t.default.getter(v48);
  v51 = os_log_type_enabled(v48, v50);
  v162 = v35;
  v176 = v46;
  if (v51)
  {
    v52 = swift_slowAlloc(42, -1);
    v53 = (_QWORD *)swift_slowAlloc(8, -1);
    v161 = v53;
    Subtasks = swift_slowAlloc(32, -1);
    v183 = Subtasks;
    *(_DWORD *)v52 = 136446978;
    v171 = v48;
    v181 = (uint64_t)v165;
    MetatypeMetadata = swift_getMetatypeMetadata(v165);
    v55 = String.init<A>(describing:)(&v181, MetatypeMetadata);
    v181 = sub_10001A820(v55, v56, (uint64_t *)&v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2114;
    v181 = (uint64_t)v35;
    v57 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    *v53 = v35;
    swift_release_n(v2);
    *(_WORD *)(v52 + 22) = 2048;
    v58 = v2;
    v59 = v176[2];
    swift_bridgeObjectRelease();
    v181 = v59;
    v2 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 32) = 2048;
    v60 = v167;
    Date.init()(v61);
    v62 = v169;
    v63 = Date.timeIntervalSince(_:)(v169);
    v64 = (char *)*((_QWORD *)v175 + 1);
    v172 = v64;
    ((void (*)(char *, uint64_t))v64)(v60, v178);
    v181 = *(_QWORD *)&v63;
    v65 = v174;
    v45 = v178;
    v66 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
    ((void (*)(id, uint64_t))v64)(v62, v45);
    v67 = v171;
    _os_log_impl((void *)&_mh_execute_header, v171, v50, "%{public}s: Fetched reminders in template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v52, 0x2Au);
    v68 = sub_10001A630((uint64_t *)&unk_100839E70);
    v69 = v161;
    swift_arrayDestroy(v161, 1, v68);
    swift_slowDealloc(v69, -1, -1);
    v70 = Subtasks;
    swift_arrayDestroy(Subtasks, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    v71 = v52;
    v46 = v176;
    swift_slowDealloc(v71, -1, -1);

  }
  else
  {
    swift_release_n(v2);
    v72 = swift_bridgeObjectRelease_n(v46, 2);
    v172 = (char *)*((_QWORD *)v49 + 1);
    ((void (*)(id, uint64_t, __n128))v172)(v44, v45, v72);

    v66 = v179;
    v65 = v174;
  }
  v181 = (uint64_t)v46;
  v73 = sub_10001A630(&qword_100842308);
  v74 = sub_1003DBF48();
  v75 = BidirectionalCollection<>.slices(by:)(50, v73, v74);
  v77 = (void *)*((_QWORD *)v2 + 4);
  v76 = (void *)*((_QWORD *)v2 + 5);
  v181 = 0;
  v78 = (char *)objc_msgSend(v76, "fetchListWithObjectID:error:", v77, &v181);
  v79 = (id)v181;
  if (!v78)
  {
    v89 = (id)v181;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v79);

    swift_willThrow(v90);
    ((void (*)(char *, uint64_t))v172)(v66, v45);
    return;
  }
  v171 = v75;
  v165 = v77;
  v181 = 0;
  v80 = v78;
  v81 = v79;
  v82 = sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v182 = 0;
  v183 = v82;
  v83 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v76);
  v175 = v80;
  v84 = objc_msgSend(v83, "updateList:", v80);
  v85 = objc_msgSend(v84, "sectionsContextChangeItem");
  v166 = v2;
  if (v85)
  {
    v86 = v85;
    p_isa = (id *)&v177->isa;
    v88 = sub_1002A6E28(v162, (uint64_t)v177, 0, 0);
    if (v65)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v99 = v66;
LABEL_20:
      v100 = v45;
LABEL_21:
      ((void (*)(char *, uint64_t))v172)(v99, v100);

      swift_bridgeObjectRelease();
      return;
    }
    v91 = v88;
    v169 = v84;
    v174 = v83;
    v92 = objc_msgSend(v88, "membershipsOfRemindersInSectionsAsData");
    if (v92)
    {
      v93 = v92;
      v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v96 = v95;

      sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
      static REMJSONRepresentable.fromJSONData(_:)(&v180, v94, v96);
      sub_1000A71C8(v94, v96);
      v97 = (id)v180;
      p_isa = (id *)&v177->isa;
    }
    else
    {
      v97 = 0;
    }
    v182 = v97;
    v98 = v174;
    v101 = sub_1003DC224((uint64_t)v162, v174, p_isa, v86);
    swift_bridgeObjectRelease();

    v183 = (unint64_t)v101;
    v82 = (unint64_t)v101;
    v2 = v166;
    v83 = v98;
    v84 = v169;
  }
  v169 = v84;
  v102 = *(_QWORD *)(v82 + 16);
  v174 = v83;
  if (v102 && !v176[2])
  {
    v180 = 0;
    v136 = objc_msgSend(v83, "saveSynchronouslyWithError:", &v180);
    v137 = (id)v180;
    if (!v136)
    {
      v157 = v83;
      v158 = (id)v180;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v137);

      swift_willThrow(v159);
      v99 = v179;
      goto LABEL_20;
    }
    v138 = v163;
    v170(v163, v179, v45);
    swift_retain_n(v2);
    v139 = Logger.logObject.getter(v137);
    v140 = static os_log_type_t.default.getter(v139);
    v141 = v140;
    if (os_log_type_enabled(v139, v140))
    {
      v142 = swift_slowAlloc(42, -1);
      v143 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v142 = 134349826;
      v180 = v102;
      LODWORD(v161) = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
      v144 = v65;
      v145 = v45;
      *(_WORD *)(v142 + 12) = 2114;
      Subtasks = (uint64_t)v139;
      v146 = v162;
      v180 = (uint64_t)v162;
      v147 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
      *v143 = v146;
      swift_release_n(v2);
      *(_WORD *)(v142 + 22) = 2114;
      v148 = v145;
      v65 = v144;
      v149 = v165;
      v180 = (uint64_t)v165;
      v150 = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
      v143[1] = v149;
      v151 = swift_release_n(v2);
      *(_WORD *)(v142 + 32) = 2048;
      v152 = v167;
      Date.init()(v151);
      v153 = v163;
      v154 = Date.timeIntervalSince(_:)(v163);
      v155 = v152;
      v139 = Subtasks;
      ((void (*)(char *, uint64_t))v172)(v155, v148);
      v180 = *(_QWORD *)&v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
      ((void (*)(char *, uint64_t))v172)(v153, v148);
      _os_log_impl((void *)&_mh_execute_header, v139, (os_log_type_t)v161, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %{public}ld sections to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v142, 0x2Au);
      v156 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v143, 2, v156);
      swift_slowDealloc(v143, -1, -1);
      v104 = v172;
      swift_slowDealloc(v142, -1, -1);
    }
    else
    {
      swift_release_n(v2);
      v104 = v172;
      ((void (*)(char *, uint64_t))v172)(v138, v45);
    }

    LODWORD(Subtasks) = 0;
    v103 = v171;
  }
  else
  {
    LODWORD(Subtasks) = 1;
    v103 = v171;
    v104 = v172;
  }
  v172 = v104;
  isa = v103[2].isa;
  if (isa)
  {
    v106 = v65;
    v107 = 0;
    v108 = (unint64_t *)&v103[7];
    while (1)
    {
      v110 = *(v108 - 1);
      v109 = *v108;
      v111 = *(v108 - 3);
      v112 = *(v108 - 2);
      swift_unknownObjectRetain(v111);
      v113 = objc_autoreleasePoolPush();
      sub_1003DA234(Subtasks, v107, v174, v166, v175, v111, v112, v110, v109, v177, (double *)&v181, &v182, (uint64_t *)&v183, (uint64_t)v176, v179);
      if (v106)
        break;
      v106 = 0;
      ++v107;
      objc_autoreleasePoolPop(v113);
      swift_unknownObjectRelease(v111);
      v108 += 4;
      if (isa == (Class)v107)
        goto LABEL_29;
    }
    objc_autoreleasePoolPop(v113);

    swift_unknownObjectRelease(v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v100 = v178;
    v99 = v179;
    goto LABEL_21;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  v114 = swift_bridgeObjectRelease();
  v115 = v164;
  v116 = v178;
  v117 = v179;
  ((void (*)(char *, char *, uint64_t, __n128))v170)(v164, v179, v178, v114);
  v118 = v166;
  v119 = swift_retain_n(v166);
  v120 = Logger.logObject.getter(v119);
  v121 = static os_log_type_t.default.getter(v120);
  v122 = v121;
  if (os_log_type_enabled(v120, v121))
  {
    v123 = swift_slowAlloc(42, -1);
    v124 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v123 = 138544130;
    LODWORD(v176) = v122;
    v177 = v120;
    v125 = v162;
    v180 = (uint64_t)v162;
    v126 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    *v124 = v125;
    swift_release_n(v118);
    *(_WORD *)(v123 + 12) = 2114;
    v127 = v165;
    v180 = (uint64_t)v165;
    v128 = v165;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    v124[1] = v127;
    v120 = v177;
    swift_release_n(v118);
    *(_WORD *)(v123 + 22) = 2048;
    swift_release(v118);
    v180 = 50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    v129 = swift_release(v118);
    *(_WORD *)(v123 + 32) = 2048;
    v130 = v167;
    Date.init()(v129);
    v131 = v164;
    v132 = Date.timeIntervalSince(_:)(v164);
    v133 = v130;
    v134 = (void (*)(char *, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v133, v116);
    v180 = *(_QWORD *)&v132;
    v117 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    v134(v131, v116);
    _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v176, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v123, 0x2Au);
    v135 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v124, 2, v135);
    swift_slowDealloc(v124, -1, -1);
    swift_slowDealloc(v123, -1, -1);
  }
  else
  {
    swift_release_n(v118);
    v134 = (void (*)(char *, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v115, v116);
  }

  v134(v117, v116);
  swift_bridgeObjectRelease();
}

void sub_1003DA234(char a1, uint64_t a2, void *a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10, double *a11, id *a12, uint64_t *a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  void *v40;
  double *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  NSString v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char isUniquelyReferenced_nonNull_native;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  char *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  NSString v87;
  id v88;
  uint64_t v89;
  void *v90;
  double v91;
  unsigned int v92;
  id v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  int v102;
  uint64_t v103;
  char *v104;
  void *v105;
  id v106;
  uint64_t v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  double v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  __n128 v122;
  _QWORD v123[2];
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t, __n128);
  char *v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  NSObject *v154;
  uint64_t v155;
  double v156;
  id v157;
  id v158;
  char v159[8];

  v137 = a7;
  v129 = a6;
  v141 = a11;
  v22 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v22);
  v128 = (uint64_t)v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v136 = (char *)v123 - v25;
  v135 = type metadata accessor for UUID(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v127 = (char *)v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v133 = (char *)v123 - v28;
  v151 = type metadata accessor for RDSavedReminder(0);
  __chkstk_darwin(v151);
  v144 = (uint64_t)v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v140 = (uint64_t)v123 - v31;
  v152 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v155 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v148 = (char *)v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v143 = (char *)v123 - v34;
  v125 = type metadata accessor for Date(0);
  v126 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123[0] = (char *)v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)v123 - v37;
  if ((a1 & 1) == 0 || a2)
    v39 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", *((_QWORD *)a4 + 5));
  else
    v39 = a3;
  v40 = v39;
  v149 = objc_msgSend(v39, "updateList:", a5);
  v131 = objc_msgSend(v149, "sectionsContextChangeItem");
  v157 = (id)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v41 = v141;
  v124 = v38;
  v42 = v143;
  if (a9 >> 1 != a8)
  {
    v153 = a10;
    v132 = a9 >> 1;
    v150 = type metadata accessor for REMCDSavedReminder();
    swift_unknownObjectRetain(v129);
    v46 = swift_beginAccess(v41, v159, 1, 0);
    v47 = v132;
    v48 = v152;
    v49 = v140;
    v142 = a4;
    v130 = v40;
    while (a8 < v47)
    {
      v50 = *(_QWORD *)(v155 + 72);
      v139 = a8;
      v145 = v50;
      v147 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v155 + 16);
      v51 = v147(v42, v137 + v50 * a8, v48, v46);
      v52 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v51);
      v53 = (uint64_t)v153;
      sub_1004B33B8(v52, (uint64_t)v153);
      if (v15)
      {

        (*(void (**)(char *, uint64_t))(v155 + 8))(v143, v48);
        swift_unknownObjectRelease(v129);
        swift_bridgeObjectRelease();
        return;
      }

      v146 = (id)objc_opt_self(REMReminder);
      v54 = objc_msgSend(v146, "newObjectID");
      v55 = String._bridgeToObjectiveC()();
      v56 = v49;
      v57 = objc_msgSend(v40, "addReminderWithTitle:toListChangeItem:reminderObjectID:", v55, v149, v54);

      sub_10048DAE0(v56, v57);
      v42 = v143;
      v59 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v58);
      sub_1003DB174(v59, v53, v57);

      v61 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v60);
      v62 = objc_msgSend(v61, "uuid");

      v63 = (uint64_t)v133;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v62);

      v64 = objc_msgSend(v57, "objectID");
      v65 = objc_msgSend(v64, "uuid");

      v66 = (uint64_t)v136;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v65);

      v67 = v134;
      v68 = v135;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v134 + 56))(v66, 0, 1, v135);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v66, 1, v68) == 1)
      {
        v138 = v57;
        sub_10000882C(v66, (uint64_t *)&unk_100839C80);
        v69 = v128;
        sub_1002CB27C(v63, v128);
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v63, v68);
        v57 = v138;
        sub_10000882C(v69, (uint64_t *)&unk_100839C80);
      }
      else
      {
        v70 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v127, v66, v68);
        v71 = v157;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v157);
        v158 = v71;
        sub_10028C430(v70, v63, isUniquelyReferenced_nonNull_native);
        v157 = v158;
        v73 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, __n128))(v67 + 8))(v63, v68, v73);
      }
      v48 = v152;
      objc_msgSend(v149, "insertReminderChangeItem:afterReminderChangeItem:", v57, 0);
      a5 = v42;
      v74 = REMRemindersListDataView.ReminderLite.subtasks.getter(objc_msgSend(v153, "reset"));
      v40 = v130;
      if (v74)
      {
        v75 = v74;
        v76 = objc_msgSend(v57, "subtaskContext");
        v77 = v148;
        v154 = v76;
        if (v76)
        {
          v138 = v57;
          v78 = v40;
          v79 = *(_QWORD *)(v75 + 16);
          v123[1] = v75;
          if (v79)
          {
            v80 = v75 + ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
            v81 = v144;
            v82 = v153;
            do
            {
              v83 = ((uint64_t (*)(char *, unint64_t, uint64_t))v147)(v77, v80, v48);
              v84 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v83);
              sub_1004B33B8(v84, (uint64_t)v82);
              v85 = v81;

              v86 = objc_msgSend(v146, "newObjectID");
              v87 = String._bridgeToObjectiveC()();
              v88 = objc_msgSend(v78, "addReminderWithTitle:toReminderSubtaskContextChangeItem:reminderObjectID:", v87, v154, v86);

              sub_10048DAE0(v85, v88);
              v77 = v148;
              v90 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v89);
              v82 = v153;
              a5 = v142;
              sub_1003DB174(v90, (uint64_t)v153, v88);

              -[NSObject insertReminderChangeItem:afterReminderChangeItem:](v154, "insertReminderChangeItem:afterReminderChangeItem:", v88, 0);
              objc_msgSend(v82, "reset");

              v81 = v144;
              sub_10001C744(v144, type metadata accessor for RDSavedReminder);
              v48 = v152;
              (*(void (**)(char *, uint64_t))(v155 + 8))(v77, v152);
              v80 += v145;
              --v79;
            }
            while (v79);
          }

          swift_bridgeObjectRelease();
          a4 = v142;
          v42 = v143;
          v40 = v78;
        }
        else
        {
          swift_bridgeObjectRelease();

          a4 = v142;
        }
      }
      else
      {

      }
      v49 = v140;
      sub_10001C744(v140, type metadata accessor for RDSavedReminder);
      (*(void (**)(char *, uint64_t))(v155 + 8))(v42, v48);
      v41 = v141;
      if (__OFADD__(*(_QWORD *)v141, 1))
        goto LABEL_36;
      a8 = v139 + 1;
      ++*(_QWORD *)v141;
      v47 = v132;
      if (a8 == v132)
      {
        swift_unknownObjectRelease(v129);
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once(&qword_100837420, sub_1003D9154);
    goto LABEL_29;
  }
LABEL_6:
  if (*a12)
  {
    v43 = *a13;
    v44 = (uint64_t)v157;
    if (*(_QWORD *)(*a13 + 16))
    {
      if (*((_QWORD *)v157 + 2))
      {
        v45 = *a12;
        swift_bridgeObjectRetain(v43);
        sub_1003DC8EC(v45, v43, v44, v131);

        swift_bridgeObjectRelease();
      }
    }
  }
  *(_QWORD *)&v91 = swift_bridgeObjectRelease().n128_u64[0];
  v158 = 0;
  v92 = objc_msgSend(v40, "saveSynchronouslyWithError:", &v158, v91);
  v93 = v158;
  if (!v92)
  {
    v120 = v158;
    _convertNSErrorToError(_:)(v93);

    swift_willThrow(v121);
    return;
  }
  v49 = a14;
  a5 = a15;
  v94 = qword_100837420;
  v95 = v158;
  if (v94 != -1)
    goto LABEL_37;
LABEL_29:
  v96 = type metadata accessor for Logger(0);
  sub_10001AAA8(v96, (uint64_t)qword_100848D78);
  v97 = v124;
  v98 = v125;
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v124, a5, v125);
  swift_retain_n(a4);
  swift_bridgeObjectRetain(v49);
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.default.getter(v100);
  v102 = v101;
  if (os_log_type_enabled(v100, v101))
  {
    v103 = swift_slowAlloc(52, -1);
    v155 = swift_slowAlloc(16, -1);
    *(_DWORD *)v103 = 134219010;
    v154 = v100;
    swift_beginAccess(v41, &v158, 0, 0);
    v156 = *v41;
    v104 = a4;
    LODWORD(v153) = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    *(_WORD *)(v103 + 12) = 2048;
    v156 = *(double *)(v49 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease();
    *(_WORD *)(v103 + 22) = 2114;
    v105 = (void *)*((_QWORD *)a4 + 3);
    v156 = *(double *)&v105;
    v106 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    v107 = v155;
    *(_QWORD *)v155 = v105;
    swift_release_n(v104);
    *(_WORD *)(v103 + 32) = 2114;
    v108 = (void *)*((_QWORD *)v104 + 4);
    v156 = *(double *)&v108;
    v109 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    *(_QWORD *)(v107 + 8) = v108;
    v110 = v131;
    v111 = swift_release_n(v104);
    *(_WORD *)(v103 + 42) = 2048;
    v112 = v123[0];
    Date.init()(v111);
    v113 = v124;
    v114 = Date.timeIntervalSince(_:)(v124);
    v115 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
    v116 = v112;
    v117 = v125;
    v115(v116, v125);
    v156 = v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    v115((uint64_t)v113, v117);
    v100 = v154;
    _os_log_impl((void *)&_mh_execute_header, v154, (os_log_type_t)v153, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v103, 0x34u);
    v118 = sub_10001A630((uint64_t *)&unk_100839E70);
    v119 = v155;
    swift_arrayDestroy(v155, 2, v118);
    swift_slowDealloc(v119, -1, -1);
    swift_slowDealloc(v103, -1, -1);
  }
  else
  {
    swift_release_n(a4);
    v122 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v126 + 8))(v97, v98, v122);
    v110 = v131;
  }

}

void sub_1003DB174(void *a1, uint64_t a2, id a3)
{
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v8;
  id v9;
  void *v10;
  Class v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t ObjCClassFromMetadata;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  char v28;
  id v29;
  Class *v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t MetatypeMetadata;
  uint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  NSString v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  NSString v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  void *v83;
  id v84;
  id v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];
  uint64_t v92;

  v5 = a3;
  v8 = *v3;
  v9 = objc_msgSend(a3, "attachmentContext");
  if (!v9)
  {
    v13 = (void *)objc_opt_self(REMError);
    v14 = sub_1000151B0(0, &qword_1008452B8, REMReminderChangeItem_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v14);
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v16);

    swift_willThrow(v17);
    return;
  }
  v10 = v9;
  sub_10050E618();
  v12 = sub_10050EA48(a1, a2, v11);
  if (v4)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v18 = v12;
  swift_bridgeObjectRelease();
  if ((unint64_t)v18 >> 62)
    goto LABEL_36;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
LABEL_40:
    swift_bridgeObjectRelease();

    return;
  }
  while (1)
  {
    v86 = v18 & 0xC000000000000001;
    v77 = v8;
    if ((v18 & 0xC000000000000001) == 0)
      break;
    swift_bridgeObjectRetain(v18);
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
    swift_bridgeObjectRelease();
LABEL_10:
    v21 = type metadata accessor for REMCDSavedAttachment();
    v22 = objc_msgSend(v20, "storeControllerManagedObjectContext");
    if (!v22)
    {
      swift_bridgeObjectRelease();
      v65 = v20;
      v66 = (void *)objc_opt_self(REMError);
      v67 = swift_getObjCClassFromMetadata(v21);
      v68 = String._bridgeToObjectiveC()();
      objc_msgSend(v66, "unexpectedNilPropertyWithClass:property:", v67, v68);

      swift_willThrow(v69);
      return;
    }
    v76 = v20;
    v23 = v22;
    v85 = objc_msgSend(v22, "storeController");
    if (!v85)
    {
      swift_bridgeObjectRelease();
      v70 = (void *)objc_opt_self(REMError);
      v71 = swift_getObjCClassFromMetadata(v21);
      v72 = String._bridgeToObjectiveC()();
      objc_msgSend(v70, "unexpectedNilPropertyWithClass:property:", v71, v72);

      swift_willThrow(v73);
      return;
    }
    v75 = v23;
    v24 = 4;
    v82 = v18;
    v83 = v10;
    v80 = v19;
    v81 = v5;
    while (1)
    {
      v8 = v24 - 4;
      v25 = v86
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v18)
          : *(id *)(v18 + 8 * v24);
      v26 = v25;
      if (__OFADD__(v8, 1))
        break;
      v91[2] = sub_1000151B0(0, (unint64_t *)&qword_10083E538, &off_1007D65B0);
      v91[3] = (char *)&_sMXM.Parent + 3;
      v90 = (uint64_t)v85;
      v27 = v26;
      v84 = v85;
      v29 = sub_1003C7A54(v27, &v90);
      v89 = v24;
      v87 = v29;
      v88 = v24 - 3;
      if (v28)
      {
        if (v28 == 1)
        {
          v30 = (Class *)REMFileAttachment_ptr;
          v31 = sub_1000151B0(0, (unint64_t *)&qword_1008412F0, REMFileAttachment_ptr);
        }
        else
        {
          v30 = (Class *)REMImageAttachment_ptr;
          v31 = sub_1000151B0(0, &qword_100841300, REMImageAttachment_ptr);
        }
        v32 = (void *)swift_getObjCClassFromMetadata(v31);
        v33 = v29;
        v34 = objc_msgSend(v32, "newObjectID");
        v35 = objc_msgSend(v5, "accountID");
        v36 = objc_msgSend(v5, "objectID");
      }
      else
      {
        v30 = (Class *)REMURLAttachment_ptr;
        v37 = sub_1000151B0(0, &qword_100841308, REMURLAttachment_ptr);
        v38 = (void *)swift_getObjCClassFromMetadata(v37);
        v33 = v29;
        v34 = objc_msgSend(v38, "newObjectID");
        v35 = objc_msgSend(v5, "accountID");
        v36 = objc_msgSend(v5, "objectID");
      }
      v39 = v36;
      v40 = objc_msgSend(objc_allocWithZone(*v30), "initWithAttachment:objectID:accountID:reminderID:", v33, v34, v35, v39);

      objc_msgSend(v10, "addAttachment:", v40);
      if (qword_100837420 != -1)
        swift_once(&qword_100837420, sub_1003D9154);
      v41 = type metadata accessor for Logger(0);
      sub_10001AAA8(v41, (uint64_t)qword_100848D78);
      v42 = v27;
      v43 = v5;
      v44 = v40;
      v45 = v42;
      v46 = v43;
      v47 = v44;
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v78 = v49;
        v50 = swift_slowAlloc(42, -1);
        v51 = (_QWORD *)swift_slowAlloc(16, -1);
        v79 = swift_slowAlloc(64, -1);
        v92 = v79;
        *(_DWORD *)v50 = 136446978;
        v90 = v77;
        MetatypeMetadata = swift_getMetatypeMetadata(v77);
        v53 = String.init<A>(describing:)(&v90, MetatypeMetadata);
        v90 = sub_10001A820(v53, v54, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        *(_QWORD *)&v55 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v50 + 12) = 2114;
        v56 = objc_msgSend(v46, "objectID", v55);
        v90 = (uint64_t)v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        *v51 = v56;

        *(_WORD *)(v50 + 22) = 2082;
        v57 = objc_msgSend(v45, "remObjectID");
        if (v57)
        {
          v58 = v57;
          v59 = objc_msgSend(v57, "description");

          v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v62 = v61;

        }
        else
        {
          v62 = 0xE300000000000000;
          v60 = 7104878;
        }
        v90 = sub_10001A820(v60, v62, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);

        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 32) = 2114;
        v90 = (uint64_t)v47;
        v63 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        v51[1] = v47;

        _os_log_impl((void *)&_mh_execute_header, v48, v78, "%{public}s: Copied attachment into reminderChangeItem {reminderChangeItem.remObjectID: %{public}@, cdSavedAttachment.remObjectID: %{public}s, copiedAttachment: %{public}@}", (uint8_t *)v50, 0x2Au);
        v64 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v51, 2, v64);
        swift_slowDealloc(v51, -1, -1);
        swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

      }
      v5 = v81;
      v24 = v89 + 1;
      v18 = v82;
      v10 = v83;
      if (v88 == v80)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_36:
    if (v18 < 0)
      v74 = v18;
    else
      v74 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_40;
  }
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v18 + 32);
    goto LABEL_10;
  }
  __break(1u);
}

id sub_1003DBAC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  id v37;
  void *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  uint64_t v50;
  NSUUID v51;
  Class isa;
  id v53;
  char *v54;
  Class v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t, unint64_t, uint64_t);
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;

  v63 = a4;
  v68 = a2;
  v6 = type metadata accessor for Date(0);
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  __chkstk_darwin(v6);
  v67 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v66 = (uint64_t)&v57 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v57 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v57 - v17;
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v57 - v24;
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v57 - v28;
  if (!*(_QWORD *)(a3 + 16) || (v30 = sub_1002C65F8(a1), (v31 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v18, 1, 1, v19, v27);
    goto LABEL_10;
  }
  v61 = v10;
  v62 = v25;
  v32 = *(_QWORD *)(v20 + 72);
  v33 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
  v33(v18, *(_QWORD *)(a3 + 56) + v32 * v30, v19);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v34(v18, 0, 1, v19);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v35(v18, 1, v19) == 1)
  {
LABEL_10:
    v46 = (uint64_t)v18;
LABEL_11:
    sub_10000882C(v46, (uint64_t *)&unk_100839C80);
    return 0;
  }
  v57 = v32;
  v58 = (void (*)(uint64_t, unint64_t, uint64_t))v33;
  v59 = v35;
  v60 = v34;
  v36 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v36(v29, v18, v19);
  v37 = objc_msgSend(v68, "groupIdentifier");
  if (!v37)
  {
    v60(v15, 1, 1, v19);
    goto LABEL_14;
  }
  v38 = v37;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

  v36(v15, v22, v19);
  v39 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60;
  v60(v15, 0, 1, v19);
  if (v59(v15, 1, v19) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
    v46 = (uint64_t)v15;
    goto LABEL_11;
  }
  v40 = (uint64_t)v62;
  v36(v62, v15, v19);
  v41 = v63;
  if (*(_QWORD *)(v63 + 16) && (v42 = sub_1002C65F8(v40), (v43 & 1) != 0))
  {
    v44 = v66;
    v58(v66, *(_QWORD *)(v41 + 56) + v42 * v57, v19);
    v45 = 0;
  }
  else
  {
    v45 = 1;
    v44 = v66;
  }
  v49 = (uint64_t)v61;
  v39(v44, v45, 1, v19);
  v50 = sub_10011D420(v44, v49);
  static Date.now.getter(v50);
  v51.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v59((char *)v49, 1, v19) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v49, v19);
  }
  v53 = objc_allocWithZone((Class)REMMembership);
  v54 = v67;
  v55 = Date._bridgeToObjectiveC()().super.isa;
  v47 = objc_msgSend(v53, "initWithMemberIdentifier:groupIdentifier:isObsolete:modifiedOn:", v51.super.isa, isa, 0, v55);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v54, v65);
  sub_10000882C(v66, (uint64_t *)&unk_100839C80);
  v56 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v56(v40, v19);
  v56((uint64_t)v29, v19);
  return v47;
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromTemplateToREMList()
{
  return objc_opt_self(_TtC7remindd53RDTemplateOperationCopyRemindersFromTemplateToREMList);
}

void sub_1003DBF28(NSObject *a1)
{
  sub_1003D91E4(a1);
}

unint64_t sub_1003DBF48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100848E50;
  if (!qword_100848E50)
  {
    v1 = sub_1000A5A94(&qword_100842308);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100848E50);
  }
  return result;
}

void sub_1003DBF94(uint64_t a1, uint64_t (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;

  v29 = a3;
  v5 = sub_10001A630(&qword_100848E58);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (unint64_t)_swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v28 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  while (v11)
  {
    v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v14 = v13 | (v12 << 6);
LABEL_22:
    v18 = *(_QWORD *)(a1 + 48);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v7, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v14, v19);
    v20 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v14);
    *(_QWORD *)&v7[*(int *)(v5 + 48)] = v20;
    v21 = a2(v7, v20);
    v22 = sub_10000882C((uint64_t)v7, &qword_100848E58);
    if (v21)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
      specialized Array._endMutation()(v25);
    }
  }
  v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v15 >= v28)
    goto LABEL_26;
  v16 = *(_QWORD *)(v27 + 8 * v15);
  ++v12;
  if (v16)
    goto LABEL_21;
  v12 = v15 + 1;
  if (v15 + 1 >= v28)
    goto LABEL_26;
  v16 = *(_QWORD *)(v27 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 2;
  if (v15 + 2 >= v28)
    goto LABEL_26;
  v16 = *(_QWORD *)(v27 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 3;
  if (v15 + 3 >= v28)
    goto LABEL_26;
  v16 = *(_QWORD *)(v27 + 8 * v12);
  if (v16)
  {
LABEL_21:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_22;
  }
  v17 = v15 + 4;
  if (v17 >= v28)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v28)
      goto LABEL_26;
    v16 = *(_QWORD *)(v27 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

id *sub_1003DC224(uint64_t a1, void *a2, id *a3, void *a4)
{
  id *v4;
  id *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  __n128 v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  NSString v40;
  id v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  char v53;
  __n128 v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  Class isa;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  _QWORD *v83;
  id v84;
  unint64_t v85;

  v5 = v4;
  v76 = a2;
  v77 = a4;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v70 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v72 = (char *)&v66 - v11;
  v78 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v69 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v66 - v14;
  v85 = (unint64_t)_swiftEmptyArrayStorage;
  v83 = (_QWORD *)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v16 = qword_1008372C0;
  v17 = (id)a1;
  if (v16 != -1)
    goto LABEL_29;
  while (1)
  {
    v18 = (objc_class *)qword_100871E70;
    sub_1003746B0();
    v20 = v19;
    v21 = (objc_class *)sub_100374B40();
    v22 = sub_100374DD8(a1, 1, (uint64_t)a3, v18, v20, v21);
    a3 = v5;
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
    a1 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((unint64_t)a1 >> 62)
      break;
    v24 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = (uint64_t)v72;
    if (!v24)
      goto LABEL_34;
LABEL_7:
    v66 = 0;
    v67 = v17;
    v74 = a1;
    v75 = a1 & 0xC000000000000001;
    v26 = 4;
    v17 = (id)v71;
    v68 = v15;
    v73 = v24;
    while (1)
    {
      v5 = (id *)(v26 - 4);
      v32 = v75 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, a1) : *(id *)(a1 + 8 * v26);
      v33 = v32;
      if (__OFADD__(v5, 1))
        break;
      v82 = v26 - 3;
      v84 = 0;
      v34 = objc_msgSend(v32, "remObjectIDWithError:", &v84);
      v35 = v84;
      if (!v34)
      {
        v5 = (id *)v84;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)(v35);

        swift_willThrow(v63);
        return v5;
      }
      v36 = v34;
      v37 = v84;
      v81 = v33;
      v38 = objc_msgSend(v33, "displayName");
      if (v38)
      {
        v39 = v38;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v38);

      }
      v40 = String._bridgeToObjectiveC()();
      v41 = objc_msgSend(v76, "addListSectionWithDisplayName:toListSectionContextChangeItem:", v40, v77, swift_bridgeObjectRelease().n128_f64[0]);

      v80 = v41;
      v42 = objc_msgSend(v41, "objectID");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
      v44 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v43 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v44 >= v43 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1);
      v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
      specialized Array._endMutation()(v45);
      v46 = objc_msgSend(v36, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v79 = v42;
      v47 = objc_msgSend(v42, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v48 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v17 + 7);
      v49 = v78;
      v48(v25, 0, 1, v78);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v17 + 6))(v25, 1, v49) == 1)
      {
        sub_10000882C(v25, (uint64_t *)&unk_100839C80);
        v50 = v83;
        swift_bridgeObjectRetain(v83);
        v51 = sub_1002C65F8((uint64_t)v15);
        v53 = v52;
        v54 = swift_bridgeObjectRelease();
        if ((v53 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
          v84 = v50;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002D712C();
            v50 = v84;
          }
          v17 = (id)v71;
          v56 = *(_QWORD *)(v71 + 72) * v51;
          v57 = v50[6] + v56;
          a3 = *(id **)(v71 + 8);
          v58 = v78;
          ((void (*)(unint64_t, uint64_t))a3)(v57, v78);
          v59 = v84;
          v60 = *((_QWORD *)v84 + 7) + v56;
          v61 = (uint64_t)v70;
          (*((void (**)(char *, unint64_t, uint64_t))v17 + 4))(v70, v60, v58);
          v83 = v59;
          sub_10028A1C4(v51, (uint64_t)v59);
          v62 = swift_bridgeObjectRelease();
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v48)(v61, 0, 1, v58, v62);
        }
        else
        {
          v61 = (uint64_t)v70;
          v58 = v78;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v48)(v70, 1, 1, v78, v54);
          v17 = (id)v71;
          a3 = *(id **)(v71 + 8);
        }
        v15 = v68;
        ((void (*)(char *, uint64_t))a3)(v68, v58);
        sub_10000882C(v61, (uint64_t *)&unk_100839C80);
        v25 = (uint64_t)v72;
      }
      else
      {
        v27 = (uint64_t)v69;
        (*((void (**)(char *, uint64_t, uint64_t))v17 + 4))(v69, v25, v49);
        v28 = v83;
        v29 = swift_isUniquelyReferenced_nonNull_native(v83);
        v84 = v28;
        a3 = &v84;
        sub_10028C430(v27, (uint64_t)v15, v29);
        v83 = v84;
        v30 = swift_bridgeObjectRelease();
        (*((void (**)(char *, uint64_t, __n128))v17 + 1))(v15, v49, v30);
      }
      v31 = v73;
      a1 = v74;

      ++v26;
      if (v82 == v31)
      {
        swift_bridgeObjectRelease();
        sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v77, "setUnsavedSectionIDsOrdering:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        return (id *)v83;
      }
    }
    __break(1u);
LABEL_29:
    swift_once(&qword_1008372C0, sub_100374590);
  }
  if (a1 < 0)
    v65 = a1;
  else
    v65 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease();
  v25 = (uint64_t)v72;
  if (v24)
    goto LABEL_7;
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (id *)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);

  return v5;
}

double sub_1003DC8EC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Class isa;
  id v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];

  v7 = objc_msgSend(a1, "membershipByMemberIdentifier");
  v8 = type metadata accessor for UUID(0);
  v9 = sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
  v10 = sub_100133108();
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9, v10);

  v20[2] = a3;
  v20[3] = a2;
  sub_1003DBF94(v11, (uint64_t (*)(char *, void *))sub_1003DCA5C, (uint64_t)v20);
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v18 = v13;
    else
      v18 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_9;
  }
  else if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (a4)
  {
    v14 = objc_allocWithZone((Class)REMMemberships);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v16 = objc_msgSend(v14, "initWithMemberships:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(a4, "setUnsavedMembershipsOfRemindersInSections:", v16);
    return result;
  }
LABEL_9:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

id sub_1003DCA5C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1003DBAC0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1003DCA64(unint64_t a1)
{
  return sub_1003DCE08(a1, sub_1001CEBEC);
}

uint64_t sub_1003DCA70@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  char v14;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1001CEC04(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    v14 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack(v11);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

void *sub_1003DCBAC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *result;
  char v16;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1001CEC40(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = &v5[6 * a1];
      v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      v12 = v9[4];
      v11 = v9[5];
      v13 = *((_DWORD *)v9 + 6);
      v14 = v9[2];
      result = memmove(v9, v9 + 6, 48 * v8);
      v5[2] = v7;
      *v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_QWORD *)(a2 + 16) = v14;
      *(_DWORD *)(a2 + 24) = v13;
      *(_QWORD *)(a2 + 32) = v12;
      *(_QWORD *)(a2 + 40) = v11;
      return result;
    }
  }
  v16 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v16, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003DCCC0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1001CEC7C(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(sub_10001A630(&qword_1008447E8) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = sub_1000A5CA8(v10, a2, &qword_1008447E8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack(v10);
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront(v10);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_1003DCE08(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  char v15;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()(v13);
      return v12;
    }
  }
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003DCEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848E60);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848E60);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1003DCFA0(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  objc_super v9;

  v2 = v1;
  if (a1 != 2)
  {
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_100848E60);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDMergePolicy: Merge policy type is not compatible with this merge policy, please use defaultMergePolicy() instead.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for RDMergePolicy();
  return objc_msgSendSuper2(&v9, "initWithMergeType:", 2);
}

id sub_1003DD0C0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  __int128 v40;
  Class v41;
  Class v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  int v95;
  NSObject *v96;
  unint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  NSString v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  os_log_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  NSObject *v129;
  NSObject *v130;
  os_log_type_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  id v139;
  void *v140;
  double v141;
  id v142;
  NSObject *v143;
  id v144;
  NSObject *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  NSString v154;
  uint64_t v155;
  id v156;
  NSObject *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  const char *v167;
  uint64_t v168;
  os_log_type_t v169;
  id v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  id v175;
  NSObject *v176;
  os_log_type_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  id v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  Class v185;
  objc_class *v186;
  unsigned __int8 v187;
  id v188;
  id v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  NSObject *v194;
  os_log_type_t v195;
  int v196;
  char **v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  double v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  id v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  id v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  NSString v228;
  Class isa;
  double v230;
  uint64_t v231;
  NSObject *v232;
  uint64_t v233;
  NSObject *v234;
  os_log_type_t v235;
  uint64_t v236;
  uint64_t v237;
  NSObject *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t ObjCClassFromMetadata;
  NSString v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  os_log_t v248;
  NSObject *v249;
  uint64_t v250;
  id v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  const __CFString *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  id v269;
  const __CFString *v270;
  uint64_t v271;
  __n128 v272;
  id v273;
  uint64_t v274;
  __n128 v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  NSObject *v279;
  uint64_t v280;
  id v281;
  char *v282;
  uint64_t v283;
  objc_super v284;
  NSObject *v285;
  unint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  id v293;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  v283 = *(_QWORD *)(a1 + 16);
  if (!v283)
    goto LABEL_164;
  v266 = v1;
  v260 = v11;
  v261 = (uint64_t)&v245 - v10;
  v274 = v2;
  v263 = v7;
  v264 = v5;
  v265 = v4;
  v12 = a1 + 32;
  v270 = CFSTR("resolutionTokenMap_v3_JSONData");
  v252 = (char *)&v287 + 8;
  v258 = CFSTR("reminderIDsMergeableOrdering_v2_JSON");
  v256 = &v286;
  v268 = a1;
  v13 = swift_bridgeObjectRetain(a1);
  v14 = 0;
  v282 = (char *)&type metadata for Any + 8;
  v13.n128_u64[0] = 136315138;
  v275 = v13;
  v13.n128_u64[0] = 136315394;
  v272 = v13;
  v253 = 0x8000000100702EB0;
  v257 = (unint64_t)"lete";
  v259 = 0x80000001006F3F10;
  v254 = (unint64_t)"smartListIDsToUndelete";
  v255 = 0x80000001006F4290;
  v276 = a1 + 32;
  while (1)
  {
    sub_10001A670(v12 + 32 * v14, (uint64_t)&v293);
    sub_10001A670((uint64_t)&v293, (uint64_t)&v291);
    v15 = sub_1000151B0(0, &qword_100848EA0, NSConstraintConflict_ptr);
    if (swift_dynamicCast(&v289, &v291, v282, v15, 6))
    {
      v16 = (void *)v289;
      if ((sub_1003E0B5C((void *)v289) & 1) == 0)
      {
        if (qword_100837428 != -1)
          swift_once(&qword_100837428, sub_1003DCEEC);
        v192 = type metadata accessor for Logger(0);
        sub_10001AAA8(v192, (uint64_t)qword_100848E60);
        v193 = v16;
        v194 = Logger.logObject.getter(v193);
        v195 = static os_log_type_t.fault.getter();
        v196 = v195;
        v197 = &selRef_rd_isExcludedFromBackup;
        if (os_log_type_enabled(v194, v195))
        {
          v198 = swift_slowAlloc(22, -1);
          LODWORD(v283) = v196;
          v199 = v198;
          v282 = (char *)swift_slowAlloc(64, -1);
          *(_QWORD *)&v291 = v282;
          *(_DWORD *)v199 = v272.n128_u32[0];
          v200 = objc_msgSend(v193, "constraint");
          v201 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v200, &type metadata for String);

          v202 = Array.description.getter(v201, &type metadata for String);
          v204 = v203;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v289 = sub_10001A820(v202, v204, (uint64_t *)&v291);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v289, (char *)&v289 + 8);

          *(_QWORD *)&v205 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v199 + 12) = 2080;
          v281 = (id)(v199 + 14);
          v206 = objc_msgSend(v193, "constraintValues", v205);
          v207 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v206, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

          v208 = Dictionary.description.getter(v207, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v210 = v209;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v289 = sub_10001A820(v208, v210, (uint64_t *)&v291);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v289, (char *)&v289 + 8);

          swift_bridgeObjectRelease();
          v197 = &selRef_rd_isExcludedFromBackup;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v194, (os_log_type_t)v283, "RDMergePolicy: Constraint conflict is not handled by remindd, and expect some confusing error message from CoreData {constraint: %s, constraintValues: %s}", (uint8_t *)v199, 0x16u);
          v211 = v282;
          swift_arrayDestroy(v282, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v211, -1, -1);
          swift_slowDealloc(v199, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease();

        }
        v212 = v265;
        v213 = v264;
        v214 = v263;
        v215 = objc_msgSend(v193, "databaseObject");
        if (v215)
        {
          v216 = v215;
          v217 = objc_opt_self(REMCDObject);
          v218 = (void *)swift_dynamicCastObjCClass(v216, v217);
          v219 = v218;
          if (v218)
          {
            v220 = objc_msgSend(v218, "identifier");
            if (v220)
            {
              v221 = v220;
              v222 = v260;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v220);

              v223 = 0;
            }
            else
            {
              v223 = 1;
              v222 = v260;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v213 + 56))(v222, v223, 1, v212);
            v224 = (void *)objc_opt_self(REMError);
            v225 = v222;
            v226 = v261;
            sub_1000A5CA8(v225, v261, (uint64_t *)&unk_100839C80);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v226, 1, v212))
            {
              sub_10000882C(v226, (uint64_t *)&unk_100839C80);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v213 + 16))(v214, v226, v212);
              v227 = sub_10000882C(v226, (uint64_t *)&unk_100839C80);
              UUID.uuidString.getter(v227);
              (*(void (**)(char *, uint64_t))(v213 + 8))(v214, v212);
            }
          }
          else
          {

            v224 = (void *)objc_opt_self(REMError);
          }
        }
        else
        {
          v224 = (void *)objc_opt_self(REMError);
          v219 = 0;
        }
        v228 = String._bridgeToObjectiveC()();
        isa = (Class)objc_msgSend(v193, v197[500], swift_bridgeObjectRelease().n128_f64[0]);
        if (!isa)
        {
          static Array._unconditionallyBridgeFromObjectiveC(_:)(0, &type metadata for String);
          isa = Array._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)&v230 = swift_bridgeObjectRelease().n128_u64[0];
        }
        objc_msgSend(v224, "constraintConflictWithIdentifier:constraint:", v228, isa, v230);

        swift_willThrow(v231);
        return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);

      goto LABEL_5;
    }
    sub_10001A670((uint64_t)&v293, (uint64_t)&v291);
    v17 = sub_1000151B0(0, &qword_100848EA8, NSMergeConflict_ptr);
    if ((swift_dynamicCast(&v289, &v291, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
      goto LABEL_14;
    v18 = (id)v289;
    v19 = objc_msgSend((id)v289, "sourceObject");
    v20 = objc_opt_self(REMCDObject);
    v281 = (id)swift_dynamicCastObjCClass(v19, v20);
    if (!v281)
    {

LABEL_14:
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_100848E60);
      v24 = sub_10001A670((uint64_t)&v293, (uint64_t)&v291);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.info.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v287 = v28;
        *(_DWORD *)v27 = v275.n128_u32[0];
        sub_10001A670((uint64_t)&v291, (uint64_t)&v289);
        v29 = String.init<A>(describing:)(&v289, (char *)&type metadata for Any + 8);
        *(_QWORD *)(v27 + 4) = sub_10001A820(v29, v30, (uint64_t *)&v287);
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v291);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDMergePolicy: Unknown conflict or non-REMCDObject merge conflict is not handled by remindd {conflict: %s}", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        v31 = v28;
        v12 = v276;
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v291);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);
      goto LABEL_5;
    }
    v278 = v19;
    v21 = objc_msgSend(v18, "persistedSnapshot");
    if (v21)
    {

      v22 = objc_msgSend(v18, "persistedSnapshot");
    }
    else
    {
      v22 = objc_msgSend(v18, "cachedSnapshot");
    }
    v32 = v22;
    v33 = v32;
    if (v32)
      break;
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v155 = type metadata accessor for Logger(0);
    sub_10001AAA8(v155, (uint64_t)qword_100848E60);
    v156 = v18;
    v157 = Logger.logObject.getter(v156);
    v158 = static os_log_type_t.error.getter(v157);
    if (!os_log_type_enabled(v157, v158))
    {
LABEL_154:

      goto LABEL_155;
    }
    v159 = swift_slowAlloc(12, -1);
    v160 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v291 = v160;
    *(_DWORD *)v159 = v275.n128_u32[0];
    v156 = v156;
    v161 = objc_msgSend(v156, "description");
    v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
    v164 = v163;

    *(_QWORD *)(v159 + 4) = sub_10001A820(v162, v164, (uint64_t *)&v291);
    swift_bridgeObjectRelease();
    v165 = v157;
    v166 = v158;
    v167 = "RDMergePolicy: Neither persisted or cached snapshot is defined {conflict: %s}";
LABEL_153:
    _os_log_impl((void *)&_mh_execute_header, v165, v166, v167, (uint8_t *)v159, 0xCu);
    swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v160, -1, -1);
    swift_slowDealloc(v159, -1, -1);
LABEL_155:

LABEL_156:
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);
    v12 = v276;
LABEL_5:
    if (++v14 == v283)
    {
      swift_bridgeObjectRelease();
      v1 = v266;
LABEL_164:
      v185 = Array._bridgeToObjectiveC()().super.isa;
      v293 = 0;
      v186 = (objc_class *)type metadata accessor for RDMergePolicy();
      v284.receiver = v1;
      v284.super_class = v186;
      v187 = objc_msgSendSuper2(&v284, "resolveConflicts:error:", v185, &v293);

      v188 = v293;
      if ((v187 & 1) != 0)
        return v293;
      v190 = v293;
      _convertNSErrorToError(_:)(v188);

      return (id)swift_willThrow(v191);
    }
  }
  v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
  v37 = *(_QWORD *)(v34 + 16);
  v277 = v34;
  if (v37 && (v38 = sub_10001A6DC(v35, v36), (v39 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v34 + 56) + 32 * v38, (uint64_t)&v291);
  }
  else
  {
    v291 = 0u;
    v292 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v292 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
LABEL_149:
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v168 = type metadata accessor for Logger(0);
    sub_10001AAA8(v168, (uint64_t)qword_100848E60);
    v156 = v18;
    v157 = Logger.logObject.getter(v156);
    v169 = static os_log_type_t.error.getter(v157);
    if (!os_log_type_enabled(v157, v169))
      goto LABEL_154;
    v159 = swift_slowAlloc(12, -1);
    v160 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v291 = v160;
    *(_DWORD *)v159 = v275.n128_u32[0];
    v156 = v156;
    v170 = objc_msgSend(v156, "description");
    v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
    v173 = v172;

    *(_QWORD *)(v159 + 4) = sub_10001A820(v171, v173, (uint64_t *)&v291);
    swift_bridgeObjectRelease();
    v165 = v157;
    v166 = v169;
    v167 = "RDMergePolicy: Resolution token map missing from the CDObject snapshot, don't know how to resolve conflict {conflict: %s";
    goto LABEL_153;
  }
  if ((swift_dynamicCast(&v289, &v291, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_149;
  }
  v40 = v289;
  sub_1000A70E4(v289, *((unint64_t *)&v289 + 1));
  v41 = Data._bridgeToObjectiveC()().super.isa;
  v262 = v40;
  sub_1000A71C8(v40, *((unint64_t *)&v40 + 1));
  v42 = Dictionary._bridgeToObjectiveC()().super.isa;
  v43 = objc_msgSend((id)objc_opt_self(REMResolutionTokenMap), "resolutionTokenMapWithJSONData:keyMap:", v41, v42);

  if (!v43)
  {
    swift_bridgeObjectRelease();
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v174 = type metadata accessor for Logger(0);
    sub_10001AAA8(v174, (uint64_t)qword_100848E60);
    v175 = v18;
    v176 = Logger.logObject.getter(v175);
    v177 = static os_log_type_t.error.getter(v176);
    if (os_log_type_enabled(v176, v177))
    {
      v178 = swift_slowAlloc(12, -1);
      v179 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v291 = v179;
      *(_DWORD *)v178 = v275.n128_u32[0];
      v180 = v175;
      v181 = objc_msgSend(v180, "description");
      v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
      v184 = v183;

      *(_QWORD *)(v178 + 4) = sub_10001A820(v182, v184, (uint64_t *)&v291);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "RDMergePolicy: Cannot decode data to resolution token map from the CDObject snapshot, don't know how to resolve conflict {conflict: %s", (uint8_t *)v178, 0xCu);
      swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v179, -1, -1);
      swift_slowDealloc(v178, -1, -1);

      sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));
    }
    else
    {

      sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));
    }
    goto LABEL_156;
  }
  v251 = objc_msgSend(v281, "createResolutionTokenMapIfNecessary");
  v269 = v43;
  v44 = objc_msgSend(v43, "getTokenKeys");
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String);

  v46 = *(_QWORD *)(v45 + 16);
  v47 = v277;
  v250 = v45;
  if (!v46)
  {
LABEL_157:

    swift_bridgeObjectRelease();
    sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));
    swift_bridgeObjectRelease();

    goto LABEL_156;
  }
  v48 = (unint64_t *)(v45 + 40);
  v273 = v18;
  while (1)
  {
    v49 = *(v48 - 1);
    v50 = *v48;
    *(_QWORD *)&v51 = swift_bridgeObjectRetain(*v48).n128_u64[0];
    *(_QWORD *)&v291 = objc_msgSend(v281, "remObjectID", v51);
    v52 = sub_10001A630((uint64_t *)&unk_100844910);
    v279 = String.init<A>(describing:)(&v291, v52);
    v54 = v53;
    v55 = *(_QWORD *)(v47 + 16);
    v280 = v49;
    if (!v55
      || (swift_bridgeObjectRetain(v47), sub_10001A6DC(v49, v50), v57 = v56, swift_bridgeObjectRelease(), (v57 & 1) == 0))
    {
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v60 = type metadata accessor for Logger(0);
      sub_10001AAA8(v60, (uint64_t)qword_100848E60);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v54);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.info.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc(22, -1);
        v65 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v291 = v65;
        *(_DWORD *)v64 = v272.n128_u32[0];
        swift_bridgeObjectRetain(v50);
        *(_QWORD *)(v64 + 4) = sub_10001A820(v280, v50, (uint64_t *)&v291);
        swift_bridgeObjectRelease_n(v50, 3);
        *(_WORD *)(v64 + 12) = 2080;
        swift_bridgeObjectRetain(v54);
        *(_QWORD *)(v64 + 14) = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v291);
        swift_bridgeObjectRelease_n(v54, 3);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "RDMergePolicy: skip merging key because it does not exist in the snapshot {key: %s, remObjectID: %s}", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
        v66 = v65;
        v47 = v277;
        swift_slowDealloc(v66, -1, -1);
        v67 = v64;
        v18 = v273;
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v54, 2);
        swift_bridgeObjectRelease_n(v50, 2);
      }
      goto LABEL_30;
    }
    if (*(_QWORD *)(v47 + 16))
    {
      swift_bridgeObjectRetain(v50);
      v58 = sub_10001A6DC(v280, v50);
      if ((v59 & 1) != 0)
      {
        sub_10001A670(*(_QWORD *)(v47 + 56) + 32 * v58, (uint64_t)&v289);
      }
      else
      {
        v289 = 0u;
        v290 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v289 = 0u;
      v290 = 0u;
    }
    sub_1000E6B28((uint64_t)&v289, (uint64_t)&v287);
    if (*((_QWORD *)&v288 + 1))
    {
      v68 = sub_1000151B0(0, &qword_100848EB0, NSNull_ptr);
      if ((swift_dynamicCast(&v285, &v287, (char *)&type metadata for Any + 8, v68, 6) & 1) != 0)
      {

        sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
        v291 = 0u;
        v292 = 0u;
        goto LABEL_48;
      }
    }
    else
    {
      sub_10000882C((uint64_t)&v287, (uint64_t *)&unk_10083D5B0);
    }
    sub_1000A5CA8((uint64_t)&v289, (uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
LABEL_48:
    v271 = v46;
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10001AAA8(v69, (uint64_t)qword_100848E60);
    swift_bridgeObjectRetain_n(v50, 2);
    v71 = swift_bridgeObjectRetain_n(v54, 2);
    v267 = v70;
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.info.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = swift_slowAlloc(22, -1);
      v75 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v289 = v75;
      *(_DWORD *)v74 = v272.n128_u32[0];
      swift_bridgeObjectRetain(v50);
      v76 = v280;
      *(_QWORD *)(v74 + 4) = sub_10001A820(v280, v50, (uint64_t *)&v289);
      swift_bridgeObjectRelease_n(v50, 3);
      *(_WORD *)(v74 + 12) = 2080;
      swift_bridgeObjectRetain(v54);
      *(_QWORD *)(v74 + 14) = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v289);
      swift_bridgeObjectRelease_n(v54, 3);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDMergePolicy: let's check if we need to merge this key: {key: %s, remObjectID: %s}", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      v77 = v74;
      v18 = v273;
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v54, 2);
      swift_bridgeObjectRelease_n(v50, 2);
      v76 = v280;
    }
    v46 = v271;
    if ((v76 != 0x636F44656C746974 || v50 != 0xED0000746E656D75)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x636F44656C746974, 0xED0000746E656D75, v76, v50, 0) & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
    *((_QWORD *)&v290 + 1) = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    *(_QWORD *)&v289 = v281;
    v78 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v79 = v278;
    v80 = v274;
    throwingCast<A>(_:as:failureMessage:)(&v287, &v289, v78, 0, 0, v78);
    v274 = v80;
    if (v80)
      goto LABEL_178;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v289);
    v81 = (void *)v287;
    sub_1000E6B28((uint64_t)&v291, (uint64_t)&v289);
    if (*((_QWORD *)&v290 + 1))
    {
      v82 = swift_dynamicCast(&v287, &v289, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v82)
        v83 = v287;
      else
        v83 = 0;
      if (v82)
        v84 = *((_QWORD *)&v287 + 1);
      else
        v84 = 0xF000000000000000;
      goto LABEL_65;
    }
LABEL_64:
    sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
    v83 = 0;
    v84 = 0xF000000000000000;
LABEL_65:
    sub_1003E144C(v81, v83, v84, (uint64_t)v269, v280, v50);
    sub_1000A71B4(v83, v84);
    swift_bridgeObjectRelease();

    sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
    v18 = v273;
LABEL_66:
    v47 = v277;
LABEL_30:
    v48 += 2;
    if (!--v46)
      goto LABEL_157;
  }
  if (v76 == 0x636F447365746F6ELL && v50 == 0xED0000746E656D75
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x636F447365746F6ELL, 0xED0000746E656D75, v76, v50, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *((_QWORD *)&v290 + 1) = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    *(_QWORD *)&v289 = v281;
    v85 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v79 = v278;
    v86 = v274;
    throwingCast<A>(_:as:failureMessage:)(&v287, &v289, v85, 0, 0, v85);
    v274 = v86;
    if (v86)
      goto LABEL_178;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v289);
    v81 = (void *)v287;
    sub_1000E6B28((uint64_t)&v291, (uint64_t)&v289);
    if (*((_QWORD *)&v290 + 1))
    {
      v87 = swift_dynamicCast(&v287, &v289, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v87)
        v83 = v287;
      else
        v83 = 0;
      if (v87)
        v84 = *((_QWORD *)&v287 + 1);
      else
        v84 = 0xF000000000000000;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v76 == 0xD00000000000001CLL && v50 == v259
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, v257 | 0x8000000000000000, v76, v50, 0) & 1) != 0)
  {
    *((_QWORD *)&v290 + 1) = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    *(_QWORD *)&v289 = v281;
    v88 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v79 = v278;
    v89 = v274;
    throwingCast<A>(_:as:failureMessage:)(&v287, &v289, v88, 0, 0, v88);
    v274 = v89;
    if (v89)
    {
      swift_bridgeObjectRelease();
LABEL_178:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));

      sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);
      swift_bridgeObjectRelease();
      return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v289);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v289);
    v249 = v287;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
    v92 = v277;
    if (*(_QWORD *)(v277 + 16) && (v93 = sub_10001A6DC(v90, v91), (v94 & 1) != 0))
    {
      sub_10001A670(*(_QWORD *)(v92 + 56) + 32 * v93, (uint64_t)&v289);
    }
    else
    {
      v289 = 0u;
      v290 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000E6B28((uint64_t)&v289, (uint64_t)&v287);
    if (*((_QWORD *)&v288 + 1))
    {
      v95 = swift_dynamicCast(&v285, &v287, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v95)
        v96 = v285;
      else
        v96 = 0;
      if (v95)
        v97 = v286;
      else
        v97 = 0xF000000000000000;
    }
    else
    {
      sub_10000882C((uint64_t)&v287, (uint64_t *)&unk_10083D5B0);
      v96 = 0;
      v97 = 0xF000000000000000;
    }
    v98 = v249;
    v99 = v274;
    sub_1003E1D7C(v249, v96, v97, (uint64_t)v269, v280, v50);
    v274 = v99;
    if (v99)
    {
      sub_1000A71B4((uint64_t)v96, v97);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v54);
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.error.getter(v101);
      v103 = v102;
      if (os_log_type_enabled(v101, v102))
      {
        v104 = swift_slowAlloc(22, -1);
        v248 = v101;
        v105 = v104;
        v267 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v287 = v267;
        *(_DWORD *)v105 = v272.n128_u32[0];
        v247 = v103;
        swift_bridgeObjectRetain(v50);
        v285 = sub_10001A820(v280, v50, (uint64_t *)&v287);
        v106 = v256;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, v256);
        swift_bridgeObjectRelease_n(v50, 3);
        *(_WORD *)(v105 + 12) = 2080;
        swift_bridgeObjectRetain(v54);
        v285 = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v287);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, v106);
        swift_bridgeObjectRelease_n(v54, 3);
        v107 = v248;
        _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v247, "RDMergePolicy: Error occured while trying to merge ordered set for: {key: %s, remObjectID: %s}", (uint8_t *)v105, 0x16u);
        v108 = v267;
        swift_arrayDestroy(v267, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v108, -1, -1);
        swift_slowDealloc(v105, -1, -1);

        swift_errorRelease(v274);
      }
      else
      {

        swift_errorRelease(v274);
        swift_bridgeObjectRelease_n(v50, 2);
        swift_bridgeObjectRelease_n(v54, 2);

      }
      sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
      sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
      v274 = 0;
    }
    else
    {
      sub_1000A71B4((uint64_t)v96, v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
      sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
    }
    goto LABEL_66;
  }
  if (v76 == 0xD000000000000018 && v50 == v255
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, v254 | 0x8000000000000000, v76, v50, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *((_QWORD *)&v290 + 1) = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    *(_QWORD *)&v289 = v281;
    v109 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v79 = v278;
    v110 = v274;
    throwingCast<A>(_:as:failureMessage:)(&v287, &v289, v109, 0, 0, v109);
    v274 = v110;
    if (v110)
      goto LABEL_178;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v289);
    v279 = v287;
    v111 = v277;
    if (*(_QWORD *)(v277 + 16) && (v112 = sub_10001A6DC(0xD00000000000001BLL, v253), (v113 & 1) != 0))
    {
      sub_10001A670(*(_QWORD *)(v111 + 56) + 32 * v112, (uint64_t)&v287);
    }
    else
    {
      v287 = 0u;
      v288 = 0u;
    }
    sub_1000E6B28((uint64_t)&v287, (uint64_t)&v289);
    if (*((_QWORD *)&v290 + 1))
    {
      v114 = sub_1000151B0(0, &qword_100848EB0, NSNull_ptr);
      if ((swift_dynamicCast(&v285, &v289, (char *)&type metadata for Any + 8, v114, 6) & 1) != 0)
      {

        sub_10000882C((uint64_t)&v287, (uint64_t *)&unk_10083D5B0);
        v289 = 0u;
        v290 = 0u;
        goto LABEL_123;
      }
    }
    else
    {
      sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
    }
    sub_1000A5CA8((uint64_t)&v287, (uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
    if (*((_QWORD *)&v290 + 1))
    {
      v126 = swift_dynamicCast(&v287, &v289, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
      if (v126)
        v127 = v287;
      else
        v127 = 0;
      if (v126)
        v128 = *((_QWORD *)&v287 + 1);
      else
        v128 = 0xF000000000000000;
    }
    else
    {
LABEL_123:
      sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
      v127 = 0;
      v128 = 0xF000000000000000;
    }
    v129 = v279;
    sub_1003E27B8(v279, v127, v128, (uint64_t)v269, v280, v50);
    sub_1000A71B4(v127, v128);
    swift_bridgeObjectRelease();
LABEL_125:

    goto LABEL_126;
  }
  v115 = String._bridgeToObjectiveC()();
  v116 = objc_msgSend(v251, "mergeWithMap:forKey:", v269, v115);

  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v54);
  if (!v116)
  {
    v130 = Logger.logObject.getter(v117);
    v131 = static os_log_type_t.info.getter(v130);
    v132 = v131;
    if (os_log_type_enabled(v130, v131))
    {
      v133 = swift_slowAlloc(22, -1);
      v249 = v130;
      v134 = v133;
      v267 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v289 = v267;
      *(_DWORD *)v134 = v272.n128_u32[0];
      v248 = (os_log_t)(v134 + 4);
      swift_bridgeObjectRetain(v50);
      *(_QWORD *)&v287 = sub_10001A820(v280, v50, (uint64_t *)&v289);
      LODWORD(v280) = v132;
      v135 = v252;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v252);
      swift_bridgeObjectRelease_n(v50, 3);
      *(_WORD *)(v134 + 12) = 2080;
      swift_bridgeObjectRetain(v54);
      *(_QWORD *)&v287 = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v289);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v135);
      swift_bridgeObjectRelease_n(v54, 3);
      v129 = v249;
      _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v280, "RDMergePolicy: Resolution token map says we shouldn't merge key: {key: %s, remObjectID: %s}", (uint8_t *)v134, 0x16u);
      v136 = v267;
      swift_arrayDestroy(v267, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v134, -1, -1);
      goto LABEL_125;
    }
    swift_bridgeObjectRelease_n(v50, 2);
    swift_bridgeObjectRelease_n(v54, 2);

LABEL_126:
    sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
    goto LABEL_66;
  }
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v54);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.default.getter(v119);
  v121 = v120;
  if (os_log_type_enabled(v119, v120))
  {
    v122 = swift_slowAlloc(22, -1);
    v249 = v119;
    v123 = v122;
    v248 = (os_log_t)swift_slowAlloc(64, -1);
    *(_QWORD *)&v289 = v248;
    *(_DWORD *)v123 = v272.n128_u32[0];
    v246 = v123 + 4;
    swift_bridgeObjectRetain(v50);
    *(_QWORD *)&v287 = sub_10001A820(v280, v50, (uint64_t *)&v289);
    v247 = v121;
    v124 = v252;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v252);
    swift_bridgeObjectRelease_n(v50, 3);
    *(_WORD *)(v123 + 12) = 2080;
    v246 = v123 + 14;
    swift_bridgeObjectRetain(v54);
    *(_QWORD *)&v287 = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v289);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, v124);
    swift_bridgeObjectRelease_n(v54, 3);
    _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v247, "RDMergePolicy: Going to merge key: {key: %s, remObjectID: %s}", (uint8_t *)v123, 0x16u);
    v125 = v248;
    swift_arrayDestroy(v248, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v123, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v54, 2);
    swift_bridgeObjectRelease_n(v50, 2);
  }
  sub_1000E6B28((uint64_t)&v291, (uint64_t)&v287);
  if (!*((_QWORD *)&v288 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)&v287, (uint64_t *)&unk_10083D5B0);
LABEL_138:
    sub_1000E6B28((uint64_t)&v291, (uint64_t)&v289);
LABEL_139:
    sub_1000E6B28((uint64_t)&v289, (uint64_t)&v287);
    v146 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1))
    {
      v147 = sub_10000A388(&v287, *((uint64_t *)&v288 + 1));
      v148 = *(_QWORD *)(v146 - 8);
      v149 = __chkstk_darwin(v147);
      v151 = (char *)&v245 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v148 + 16))(v151, v149);
      v152 = _bridgeAnythingToObjectiveC<A>(_:)(v151, v146);
      v153 = *(void (**)(char *, uint64_t))(v148 + 8);
      v18 = v273;
      v153(v151, v146);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v287);
    }
    else
    {
      v152 = 0;
    }
    v154 = String._bridgeToObjectiveC()();
    objc_msgSend(v281, "setValue:forKey:", v152, v154, swift_bridgeObjectRelease().n128_f64[0]);
    swift_unknownObjectRelease(v152);

    sub_10000882C((uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
    goto LABEL_126;
  }
  v137 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  if ((swift_dynamicCast(&v285, &v287, (char *)&type metadata for Any + 8, v137, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_138;
  }
  v138 = v285;
  v139 = objc_msgSend(v281, "managedObjectContext");
  if (v139)
  {
    v140 = v139;
    *(_QWORD *)&v141 = swift_bridgeObjectRelease().n128_u64[0];
    v285 = 0;
    v142 = objc_msgSend(v140, "existingObjectWithID:error:", v138, &v285, v141);
    v279 = v138;
    v143 = v285;
    if (!v142)
    {
      v238 = v285;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v143);

      swift_willThrow(v239);
      sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));

      goto LABEL_193;
    }
    v144 = v142;
    *((_QWORD *)&v288 + 1) = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
    v145 = v143;

    *(_QWORD *)&v287 = v144;
    sub_1000A5CA8((uint64_t)&v287, (uint64_t)&v289, (uint64_t *)&unk_10083D5B0);
    goto LABEL_139;
  }
  v232 = v138;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v54);
  v234 = Logger.logObject.getter(v233);
  v235 = static os_log_type_t.error.getter(v234);
  if (os_log_type_enabled(v234, v235))
  {
    v236 = swift_slowAlloc(22, -1);
    v237 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v287 = v237;
    *(_DWORD *)v236 = v272.n128_u32[0];
    swift_bridgeObjectRetain(v50);
    v285 = sub_10001A820(v280, v50, (uint64_t *)&v287);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, &v286);
    swift_bridgeObjectRelease_n(v50, 3);
    *(_WORD *)(v236 + 12) = 2080;
    swift_bridgeObjectRetain(v54);
    v285 = sub_10001A820((uint64_t)v279, v54, (uint64_t *)&v287);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, &v286);
    swift_bridgeObjectRelease_n(v54, 3);
    _os_log_impl((void *)&_mh_execute_header, v234, v235, "RDMergePolicy: Missing managed object context for resolving merge conflict {key: %s, remObjectID: %s}", (uint8_t *)v236, 0x16u);
    swift_arrayDestroy(v237, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v237, -1, -1);
    swift_slowDealloc(v236, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v54, 2);
    swift_bridgeObjectRelease_n(v50, 2);
  }
  v240 = (void *)objc_opt_self(REMError);
  v241 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v241);
  v243 = String._bridgeToObjectiveC()();
  objc_msgSend(v240, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v243);

  swift_willThrow(v244);
  sub_1000A71C8(v262, *((unint64_t *)&v262 + 1));

LABEL_193:
  sub_10000882C((uint64_t)&v291, (uint64_t *)&unk_10083D5B0);
  return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v293);
}

id sub_1003DFB28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDMergePolicy();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDMergePolicy()
{
  return objc_opt_self(_TtC7remindd13RDMergePolicy);
}

void sub_1003DFB78(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = objc_msgSend(a1, "conflictingObjects");
  v5 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_3;
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    if (qword_100837428 == -1)
      goto LABEL_35;
    goto LABEL_42;
  }
  if (v6 < 0)
    v25 = v6;
  else
    v25 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v25);
  if (!v7)
    goto LABEL_33;
LABEL_3:
  v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
  }
  else if ((v6 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = *(id *)(v6 + 8 * v8 + 32);
      goto LABEL_8;
    }
    __break(1u);
LABEL_42:
    swift_once(&qword_100837428, sub_1003DCEEC);
LABEL_35:
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_100848E60);
    v27 = a1;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v39 = v31;
      *(_DWORD *)v30 = 136446210;
      v32 = v27;
      v33 = objc_msgSend(v32, "description");
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v38 = sub_10001A820(v34, v36, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDMergePolicy: Missing managed object context for resolving sharee constraint conflict {conflict: %{public}s}", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    return;
  }
  v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_8:
  v10 = v9;
  v11 = objc_msgSend(v9, "managedObjectContext", swift_bridgeObjectRelease().n128_f64[0]);

  if (!v11)
    goto LABEL_34;
  objc_msgSend(v11, "deleteObject:", a2);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v13 = v6;
    else
      v13 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v12)
  {
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    if (v6 < 0)
      v37 = v6;
    else
      v37 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v21 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_23;
LABEL_49:

    swift_bridgeObjectRelease();
    return;
  }
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v6);
  v39 = v6;
  if (!(_DWORD)isUniquelyReferenced_nonNull_bridgeObject || v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_bridgeObject = sub_1001CEBEC(v6);
    v6 = isUniquelyReferenced_nonNull_bridgeObject;
    v39 = isUniquelyReferenced_nonNull_bridgeObject;
  }
  v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
    goto LABEL_44;
  v16 = v15 - 1;
  v17 = *(void **)((v6 & 0xFFFFFFFFFFFFFF8) + 8 * v16 + 0x20);
  *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  specialized Array._endMutation()(isUniquelyReferenced_nonNull_bridgeObject);

  v38 = v39;
  v18 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
  v19 = sub_10001A630(&qword_100848EB8);
  v20 = sub_1003E31E8();
  v6 = Sequence.elements<A>(ofType:)(v18, v19, v18, v20);
  swift_bridgeObjectRelease();
  if ((unint64_t)v6 >> 62)
    goto LABEL_45;
  v21 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
    goto LABEL_49;
LABEL_23:
  if (v21 >= 1)
  {
    for (i = 0; i != v21; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v23 = *(id *)(v6 + 8 * i + 32);
      v24 = v23;
      objc_msgSend(v11, "deleteObject:", v23, v38);

    }
    goto LABEL_49;
  }
  __break(1u);
}

uint64_t sub_1003E000C(void *a1)
{
  void *v1;
  char **v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  Swift::String v41;
  Swift::Bool v42;
  void *v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  id v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t j;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v1 = a1;
  v2 = &selRef_rd_isExcludedFromBackup;
  v3 = objc_msgSend(a1, "conflictingObjects");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v94 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v17 = v5;
    else
      v17 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
    if (v6)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    v16 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v5);
  if (!v6)
    goto LABEL_19;
LABEL_3:
  if (v6 < 1)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    swift_once(&qword_100837428, sub_1003DCEEC);
LABEL_51:
    v44 = type metadata accessor for Logger(0);
    sub_10001AAA8(v44, (uint64_t)qword_100848E60);
    v45 = v1;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v94 = v49;
      *(_DWORD *)v48 = 136446210;
      v50 = v45;
      v51 = objc_msgSend(v50, "description");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v93 = sub_10001A820(v52, v54, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);

      swift_bridgeObjectRelease();
      v55 = "RDMergePolicy: Some conflicting objects are not hashtag for resolving hashtag constraint conflict {conflict: %{public}s}";
LABEL_61:
      _os_log_impl((void *)&_mh_execute_header, v46, v47, v55, v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      return 0;
    }
LABEL_62:

    return 0;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v8 = *(id *)(v5 + 8 * i + 32);
    v9 = v8;
    v10 = objc_opt_self(REMCDHashtag);
    v11 = swift_dynamicCastObjCClass(v9, v10);
    if (v11)
    {
      v12 = v11;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v14 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v13 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= v13 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1);
      v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized Array._endMutation()(v15);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v16 = v94;
  v2 = &selRef_rd_isExcludedFromBackup;
LABEL_20:
  *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
  v19 = (unint64_t)v16 >> 62;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v87 = v16;
    else
      v87 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v20 = _CocoaArrayWrapper.endIndex.getter(v87);
    *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v20 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = objc_msgSend(v1, v2[503], v18);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v4);

  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v88 = v22;
    else
      v88 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v23 = _CocoaArrayWrapper.endIndex.getter(v88);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v20 != v23)
  {
    swift_bridgeObjectRelease();
    if (qword_100837428 == -1)
      goto LABEL_51;
    goto LABEL_93;
  }
  if (!v19)
  {
    v24 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (v24)
      goto LABEL_27;
LABEL_57:
    swift_bridgeObjectRelease();
LABEL_58:
    swift_bridgeObjectRelease();
    if (qword_100837428 == -1)
      goto LABEL_59;
    goto LABEL_98;
  }
  if (v16 < 0)
    v56 = v16;
  else
    v56 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v24 = _CocoaArrayWrapper.endIndex.getter(v56);
  if (!v24)
    goto LABEL_57;
LABEL_27:
  v25 = v24 - 1;
  if (__OFSUB__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    v19 = v16 & 0xC000000000000001;
    if ((v16 & 0xC000000000000001) == 0)
    {
      if ((v25 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v25 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v26 = *(id *)(v16 + 8 * v25 + 32);
        goto LABEL_32;
      }
      __break(1u);
LABEL_98:
      swift_once(&qword_100837428, sub_1003DCEEC);
LABEL_59:
      v57 = type metadata accessor for Logger(0);
      sub_10001AAA8(v57, (uint64_t)qword_100848E60);
      v45 = v1;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = swift_slowAlloc(32, -1);
        v94 = v49;
        *(_DWORD *)v48 = 136446210;
        v58 = v45;
        v59 = objc_msgSend(v58, "description");
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v93 = sub_10001A820(v60, v62, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);

        swift_bridgeObjectRelease();
        v55 = "RDMergePolicy: Missing managed object context for resolving hashtag constraint conflict {conflict: %{public}s}";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v16);
LABEL_32:
  v27 = v26;
  v28 = objc_msgSend(v26, "managedObjectContext", swift_bridgeObjectRelease().n128_f64[0]);

  if (!v28)
    goto LABEL_58;
  v29 = objc_msgSend(v1, "databaseObject");

  if (!v29)
  {
    swift_bridgeObjectRelease();
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v64 = type metadata accessor for Logger(0);
    sub_10001AAA8(v64, (uint64_t)qword_100848E60);
    v65 = v1;
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      v94 = v69;
      *(_DWORD *)v68 = 136446210;
      v70 = v65;
      v71 = v28;
      v72 = objc_msgSend(v70, "description");
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      v75 = v74;

      v93 = sub_10001A820(v73, v75, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);

      swift_bridgeObjectRelease();
      v76 = "RDMergPolicy: context-level constraint conflict is unexpected and not handled for resolving hashtag constrai"
            "nt conflict {conflict: %{public}s}";
LABEL_72:
      _os_log_impl((void *)&_mh_execute_header, v66, v67, v76, v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      return 0;
    }
LABEL_73:

    return 0;
  }
  v94 = v16;
  v30 = objc_msgSend(v1, "databaseObject", swift_bridgeObjectRetain(v16).n128_f64[0]);
  if (!v30)
  {
LABEL_69:
    swift_bridgeObjectRelease_n(v16, 2);
    if (qword_100837428 != -1)
LABEL_101:
      swift_once(&qword_100837428, sub_1003DCEEC);
    v77 = type metadata accessor for Logger(0);
    sub_10001AAA8(v77, (uint64_t)qword_100848E60);
    v65 = v1;
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      v93 = v69;
      *(_DWORD *)v68 = 136446210;
      v78 = v65;
      v71 = v28;
      v79 = objc_msgSend(v78, "description");
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v82 = v81;

      v92 = sub_10001A820(v80, v82, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);

      swift_bridgeObjectRelease();
      v76 = "RDMergPolicy: databaseObject is not a REMCDHashtag for resolving hashtag constraint conflict {conflict: %{public}s}";
      goto LABEL_72;
    }
    goto LABEL_73;
  }
  v31 = v30;
  v32 = objc_opt_self(REMCDHashtag);
  v33 = swift_dynamicCastObjCClass(v31, v32);
  if (!v33)
  {

    goto LABEL_69;
  }
  v90 = v33;
  v91 = v28;
  v1 = (void *)RDStoreControllerICCloudContextAuthor;
  while (1)
  {
    if (__OFSUB__(v24--, 1))
    {
      __break(1u);
      goto LABEL_92;
    }
    if (v19)
    {
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v16);
    }
    else
    {
      if ((v24 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      if (v24 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_100;
      v35 = *(id *)(v16 + 32 + 8 * v24);
    }
    v36 = v35;
    v37 = objc_msgSend(v35, "managedObjectContext");
    if (v37
      && (v38 = v37,
          v39 = objc_msgSend(v37, "transactionAuthor"),
          v38,
          v39))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v28 = v40;

    }
    else
    {
      v28 = (id)0xE000000000000000;
    }
    v41._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v42 = String.hasPrefix(_:)(v41);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42)
      break;
    if (!v24)
    {
      swift_bridgeObjectRelease();
      v43 = v91;
      goto LABEL_75;
    }
  }
  v43 = v91;
  objc_msgSend(v91, "deleteObject:", v90, swift_bridgeObjectRelease().n128_f64[0]);

  v16 = v94;
LABEL_75:
  if (!((unint64_t)v16 >> 62))
  {
    v83 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v16, 2);
    if (v83)
      goto LABEL_77;
LABEL_106:

    swift_bridgeObjectRelease_n(v16, 3);
    return 1;
  }
  if (v16 < 0)
    v89 = v16;
  else
    v89 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v16, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v89);
  v83 = result;
  if (!result)
    goto LABEL_106;
LABEL_77:
  if (v83 >= 1)
  {
    for (j = 0; j != v83; ++j)
    {
      if ((v16 & 0xC000000000000001) != 0)
        v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v16);
      else
        v85 = *(id *)(v16 + 8 * j + 32);
      v86 = v85;
      objc_msgSend(v43, "deleteObject:", v85);

    }
    goto LABEL_106;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E0B5C(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v2 = objc_msgSend(a1, "conflictingObjects");
  v3 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  v5 = &selRef_rd_isExcludedFromBackup;
  v6 = objc_msgSend(a1, "constraint");
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
  if (v8 != 1)
    goto LABEL_38;
  v10 = objc_msgSend(a1, "constraint", v9);
  v11 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String);

  if (!v11[2])
    goto LABEL_33;
  v13 = v11[4];
  v12 = v11[5];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  if (v13 == 0x696669746E656469 && v12 == 0xEA00000000007265)
  {
    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, 0x696669746E656469, 0xEA00000000007265, 0);
    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v15 & 1) == 0)
      goto LABEL_38;
  }
  v5 = (char **)((unint64_t)v4 >> 62);
  if ((unint64_t)v4 >> 62)
    goto LABEL_34;
  if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    v17 = objc_msgSend(a1, "databaseObject", v16);
    if (v17)
    {
      v18 = objc_opt_self(REMCDSharee);
      v19 = swift_dynamicCastObjCClass(v17, v18);
      if (v19)
        break;
    }
    if (v5)
    {
      if (v4 < 0)
        v24 = v4;
      else
        v24 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v23 = _CocoaArrayWrapper.endIndex.getter(v24);
      if (!v23)
      {
LABEL_29:
        swift_bridgeObjectRelease_n(v4, 2);

        return 0;
      }
    }
    else
    {
      v23 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v4);
      if (!v23)
        goto LABEL_29;
    }
    v25 = 4;
    while (1)
    {
      v26 = (v4 & 0xC000000000000001) != 0
          ? (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v4)
          : (char **)*(id *)(v4 + 8 * v25);
      v5 = v26;
      v27 = v25 - 3;
      if (__OFADD__(v25 - 4, 1))
        break;
      v28 = objc_opt_self(REMCDHashtag);
      if (swift_dynamicCastObjCClass(v5, v28))
      {
        swift_bridgeObjectRelease_n(v4, 2);

        v22 = sub_1003E000C(a1);
        goto LABEL_31;
      }

      ++v25;
      if (v27 == v23)
        goto LABEL_29;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    if (v4 < 0)
      v30 = v4;
    else
      v30 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
    if (v31 < 1)
      goto LABEL_38;
  }
  v20 = v19;
  v17 = v17;
  swift_bridgeObjectRelease();
  sub_1003DFB78(a1, v20);
  v22 = v21;

LABEL_31:
  return v22 & 1;
}

id sub_1003E0E74(void *a1, uint64_t a2, unint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = objc_msgSend(a1, "remObjectID");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(a1, "account");
    if (!v8
      || (v9 = v8, v10 = objc_msgSend(v8, "remObjectID"), v9, !v10))
    {
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v12 = type metadata accessor for Logger(0);
      sub_10001AAA8(v12, (uint64_t)qword_100848E60);
      v13 = a1;
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v16 = 138412290;
        v36 = (uint64_t)v13;
        v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        *v17 = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDMergePolicy: Failed to get the account remObjectID from the CDReminder {cdReminder: %@}", v16, 0xCu);
        v19 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v17, 1, v19);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

      }
      return 0;
    }
    if (a2 == 0x636F44656C746974 && a3 == 0xED0000746E656D75
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x636F44656C746974, 0xED0000746E656D75, a2, a3, 0) & 1) != 0)
    {
      v11 = objc_msgSend((id)objc_opt_self(REMReminderStorage), "titleReplicaIDSourceWithAccountID:reminderID:", v10, v7);
LABEL_24:
      v27 = v11;

      return v27;
    }
    if (a2 == 0x636F447365746F6ELL && a3 == 0xED0000746E656D75
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x636F447365746F6ELL, 0xED0000746E656D75, a2, a3, 0) & 1) != 0)
    {
      v11 = objc_msgSend((id)objc_opt_self(REMReminderStorage), "notesReplicaIDSourceWithAccountID:reminderID:", v10, v7);
      goto LABEL_24;
    }
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_100848E60);
    v30 = swift_bridgeObjectRetain_n(a3, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v36 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_bridgeObjectRetain(a3);
      v35 = sub_10001A820(a2, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDMergePolicy: Unexpected reminder property key to get a replicaIDSource for it {key: %s}", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    goto LABEL_18;
  }
  if (qword_100837428 != -1)
    swift_once(&qword_100837428, sub_1003DCEEC);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100848E60);
  v10 = a1;
  v21 = Logger.logObject.getter(v10);
  v22 = static os_log_type_t.error.getter(v21);
  if (!os_log_type_enabled(v21, v22))
  {

LABEL_18:
    return 0;
  }
  v23 = (uint8_t *)swift_slowAlloc(12, -1);
  v24 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v23 = 138412290;
  v36 = (uint64_t)v10;
  v25 = v10;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
  *v24 = v10;

  _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDMergePolicy: Failed to get the reminder remObjectID from the CDReminder {cdReminder: %@}", v23, 0xCu);
  v26 = sub_10001A630((uint64_t *)&unk_100839E70);
  swift_arrayDestroy(v24, 1, v26);
  swift_slowDealloc(v24, -1, -1);
  swift_slowDealloc(v23, -1, -1);

  return 0;
}

void sub_1003E144C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  NSData v52;
  id v53;
  id v54;
  NSString v55;
  id v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  Class isa;
  NSString v64;
  NSString v65;
  NSString v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;

  v12 = objc_msgSend(a1, "remObjectID");
  if (v12)
  {
    v13 = v12;
    v14 = sub_1003E0E74(a1, a5, a6);
    if (v14)
    {
      v15 = v14;
      v70 = a1;
      v16 = objc_msgSend(a1, "account");
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v16, "type"));
        v19 = v13;
        v20 = a5;
        v21 = v15;
        v22 = a4;
        v23 = objc_msgSend(v18, "supportsCRDTs");

        v24 = v23 ^ 1;
        a4 = v22;
        v15 = v21;
        a5 = v20;
        v13 = v19;
      }
      else
      {
        v24 = 0;
      }
      if (a3 >> 60 == 15)
      {
        v69 = a4;
        if (qword_100837428 != -1)
          swift_once(&qword_100837428, sub_1003DCEEC);
        v43 = type metadata accessor for Logger(0);
        sub_10001AAA8(v43, (uint64_t)qword_100848E60);
        swift_bridgeObjectRetain_n(a6, 2);
        v44 = v13;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.info.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22, -1);
          v67 = (_QWORD *)swift_slowAlloc(8, -1);
          v68 = swift_slowAlloc(32, -1);
          v73 = v68;
          *(_DWORD *)v47 = 136315394;
          swift_bridgeObjectRetain(a6);
          v72 = sub_10001A820(a5, a6, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
          swift_bridgeObjectRelease_n(a6, 3);
          *(_WORD *)(v47 + 12) = 2112;
          v72 = (uint64_t)v44;
          v48 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
          *v67 = v13;

          _os_log_impl((void *)&_mh_execute_header, v45, v46, "RDMergePolicy: Store snapshot document data is nil for the mergeable string document key {key: %s, remObjectID: %@}", (uint8_t *)v47, 0x16u);
          v49 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v67, 1, v49);
          swift_slowDealloc(v67, -1, -1);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v47, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a6, 2);
        }
        a4 = v69;
        swift_bridgeObjectRetain(a6);
        v53 = v44;
        v54 = v15;
        v52.super.isa = 0;
      }
      else
      {
        swift_bridgeObjectRetain(a6);
        v50 = v13;
        v51 = v15;
        sub_1000A70D0(a2, a3);
        v52.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000A71B4(a2, a3);
      }
      v55 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v56 = objc_msgSend((id)objc_opt_self(REMCRMergeableStringDocument), "documentFromSerializedData:replicaIDSource:forKey:ofObjectID:", v52.super.isa, v15, v55, v13);

      v57 = sub_10021FE88(v56, a5, a6, a4, v24);
      if (v59 == 1)
      {

      }
      else
      {
        v60 = (uint64_t)v57;
        v61 = v58;
        v62 = v59;
        if (v58 >> 60 == 15)
        {
          isa = 0;
        }
        else
        {
          sub_1000A70E4((uint64_t)v57, v58);
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71B4(v60, v61);
        }
        v64 = String._bridgeToObjectiveC()();
        objc_msgSend(v70, "setValue:forKey:", isa, v64);
        swift_unknownObjectRelease(isa);

        if (v62)
        {
          v65 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v66 = String._bridgeToObjectiveC()();
          objc_msgSend(v70, "setValue:forKey:", v65, v66);

          sub_1000A71B4(v60, v61);
        }
        else
        {

          sub_1000A71B4(v60, v61);
        }
      }
    }
    else
    {
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_100848E60);
      swift_bridgeObjectRetain_n(a6, 2);
      v71 = v13;
      v36 = Logger.logObject.getter(v71);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(22, -1);
        v39 = (_QWORD *)swift_slowAlloc(8, -1);
        v40 = swift_slowAlloc(32, -1);
        v73 = v40;
        *(_DWORD *)v38 = 136315394;
        swift_bridgeObjectRetain(a6);
        v72 = sub_10001A820(a5, a6, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
        swift_bridgeObjectRelease_n(a6, 3);
        *(_WORD *)(v38 + 12) = 2112;
        v72 = (uint64_t)v71;
        v41 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
        *v39 = v13;

        _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDMergePolicy: Could not get a replicaIDSource for reminder for key {key: %s, remObjectID: %@}", (uint8_t *)v38, 0x16u);
        v42 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v39, 1, v42);
        swift_slowDealloc(v39, -1, -1);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
    }
  }
  else
  {
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100848E60);
    swift_bridgeObjectRetain_n(a6, 2);
    v26 = a1;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = (_QWORD *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(32, -1);
      v73 = v31;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain(a6);
      v72 = sub_10001A820(a5, a6, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      *(_QWORD *)&v32 = swift_bridgeObjectRelease_n(a6, 3).n128_u64[0];
      *(_WORD *)(v29 + 12) = 2112;
      v33 = objc_msgSend(v26, "objectID", v32);
      v72 = (uint64_t)v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      *v30 = v33;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDMergePolicy: cdReminder has no remObjectID {key: %s, cdReminder.objectID: %@}", (uint8_t *)v29, 0x16u);
      v34 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v30, 1, v34);
      swift_slowDealloc(v30, -1, -1);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
    }
  }
}

void sub_1003E1D7C(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v12;
  id v13;
  void *v14;
  id v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  Class isa;
  id v48;
  id v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  Class v54;
  NSString v55;
  void *v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v68;
  id v69;

  v7 = v6;
  v12 = a1;
  v13 = objc_msgSend(a1, "account");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(v13, "type"));
    v16 = objc_msgSend(v15, "supportsCRDTs");

    if (a3 >> 60 == 15)
    {
      v17 = v16 ^ 1;
LABEL_6:
      v62 = v17;
      v18 = a5;
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_100848E60);
      swift_bridgeObjectRetain_n(a6, 2);
      v65 = v12;
      v20 = v12;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.info.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc(22, -1);
        v58 = (void *)swift_slowAlloc(64, -1);
        v69 = v58;
        *(_DWORD *)v23 = 136315394;
        swift_bridgeObjectRetain(a6);
        v63 = v18;
        v68 = sub_10001A820(v18, a6, (uint64_t *)&v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
        *(_QWORD *)&v24 = swift_bridgeObjectRelease_n(a6, 3).n128_u64[0];
        *(_WORD *)(v23 + 12) = 2080;
        v60 = a2;
        v25 = a6;
        v26 = objc_msgSend(v20, "remObjectID", v24);
        v68 = (uint64_t)v26;
        v27 = sub_10001A630((uint64_t *)&unk_100844910);
        v28 = Optional.descriptionOrNil.getter(v27);
        v30 = v29;

        a6 = v25;
        v68 = sub_10001A820(v28, v30, (uint64_t *)&v69);
        a2 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDMergePolicy: Store snapshot reminderIDs ordering data is nil for key {key: %s, remObjectID: %s}", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        v31 = v23;
        v7 = v6;
        swift_slowDealloc(v31, -1, -1);

        a5 = v63;
        v12 = v65;
        v32 = 0;
      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
        v32 = 0;
        v12 = v65;
        a5 = v18;
      }
      v33 = v62;
      goto LABEL_24;
    }
    if ((v16 & 1) == 0)
    {
      v32 = 0;
      v33 = 1;
      goto LABEL_24;
    }
  }
  else if (a3 >> 60 == 15)
  {
    v17 = 0;
    goto LABEL_6;
  }
  v64 = a5;
  sub_1000A70E4((uint64_t)a2, a3);
  if (qword_100837428 != -1)
    swift_once(&qword_100837428, sub_1003DCEEC);
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100848E60);
  v35 = v12;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter(v36);
  v59 = a6;
  if (os_log_type_enabled(v36, v37))
  {
    v61 = a2;
    v66 = v12;
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (void *)swift_slowAlloc(32, -1);
    v69 = v39;
    *(_DWORD *)v38 = 136315138;
    v40 = objc_msgSend(v35, "remObjectID");
    if (v40)
    {
      v41 = v40;
      v42 = objc_msgSend(v40, "description");

      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

    }
    else
    {
      v45 = 0xE300000000000000;
      v43 = 7104878;
    }
    v68 = sub_10001A820(v43, v45, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDMergePolicy: Deserialized reminderIDsMergeableOrdering from data {remObjectID: %s}", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    v7 = v6;
    a2 = v61;
    v12 = v66;
  }
  else
  {

  }
  v46 = (void *)objc_opt_self(REMListStorage);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v69 = 0;
  v32 = objc_msgSend(v46, "reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:", isa, &v69);

  v48 = v69;
  a5 = v64;
  if (!v32)
  {
    v56 = v48;
    _convertNSErrorToError(_:)(v48);

    swift_willThrow(v57);
    sub_1000A71B4((uint64_t)a2, a3);
    return;
  }
  sub_1000A71B4((uint64_t)a2, a3);
  v33 = 0;
  a6 = v59;
LABEL_24:
  sub_1000A70D0((uint64_t)a2, a3);
  v49 = v32;
  v50 = sub_10052E2F8(a2, a3, v32, a4, a5, a6, v33);
  if (v7 || (v52 = v51, v51 >> 60 == 15))
  {

  }
  else
  {
    v53 = (uint64_t)v50;
    sub_1000A70E4((uint64_t)v50, v51);
    v54 = Data._bridgeToObjectiveC()().super.isa;
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setValue:forKey:", v54, v55);

    sub_1000A71B4(v53, v52);
    sub_1000A71B4(v53, v52);

  }
  sub_1000A71B4((uint64_t)a2, a3);

}

id sub_1003E241C(void *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = objc_msgSend(a1, "remObjectID");
  if (!v6)
  {
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_100848E60);
    v10 = a1;
    v7 = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled(v7, v11))
    {

      return 0;
    }
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    v24 = (uint64_t)v10;
    v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    *v13 = v10;

    _os_log_impl((void *)&_mh_execute_header, v7, v11, "RDMergePolicy: Failed to get the account remObjectID from the CDAccount {cdAccount: %@}", v12, 0xCu);
    v15 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
LABEL_16:

    return 0;
  }
  v7 = v6;
  if ((a2 != 0xD000000000000018 || a3 != 0x80000001006F4290)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006F4290, a2, a3, 0) & 1) == 0)
  {
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100848E60);
    v17 = swift_bridgeObjectRetain_n(a3, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v24 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(a3);
      v23 = sub_10001A820(a2, a3, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDMergePolicy: Unexpected account property key to get a replicaIDSource for it {key: %s}", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    goto LABEL_16;
  }
  v8 = objc_msgSend((id)objc_opt_self(REMAccountStorage), "listIDsMergeableOrderingReplicaIDSourceWithAccountID:", v7);

  return v8;
}

void sub_1003E27B8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char **v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  unsigned int v45;
  id v46;
  char **v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  uint8_t *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  Class isa;
  NSString v66;
  os_log_t log;
  os_log_t v68;
  NSObject *v69;
  void *v70;
  os_log_type_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;

  v12 = &selRef_isConcealed;
  v13 = objc_msgSend(a1, "remObjectID");
  if (v13)
  {
    v14 = v13;
    v15 = sub_1003E241C(a1, a5, a6);
    if (v15)
    {
      v16 = v15;
      v74 = a4;
      v75 = v15;
      if (a3 >> 60 == 15)
      {
        v17 = a5;
        if (qword_100837428 != -1)
          swift_once(&qword_100837428, sub_1003DCEEC);
        v18 = type metadata accessor for Logger(0);
        sub_10001AAA8(v18, (uint64_t)qword_100848E60);
        swift_bridgeObjectRetain_n(a6, 2);
        v19 = v14;
        v20 = Logger.logObject.getter(v19);
        v21 = static os_log_type_t.info.getter(v20);
        if (os_log_type_enabled(v20, v21))
        {
          v22 = swift_slowAlloc(22, -1);
          v68 = (os_log_t)swift_slowAlloc(8, -1);
          v72 = swift_slowAlloc(32, -1);
          v78 = v72;
          *(_DWORD *)v22 = 136315394;
          swift_bridgeObjectRetain(a6);
          v77 = sub_10001A820(v17, a6, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
          swift_bridgeObjectRelease_n(a6, 3);
          *(_WORD *)(v22 + 12) = 2112;
          v77 = (uint64_t)v19;
          v23 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
          v68->isa = (Class)v14;

          a5 = v17;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDMergePolicy: Store snapshot listIDs ordering data is nil for key {key: %s, remObjectID: %@}", (uint8_t *)v22, 0x16u);
          v24 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v68, 1, v24);
          swift_slowDealloc(v68, -1, -1);
          swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          v25 = v22;
          v12 = &selRef_isConcealed;
          swift_slowDealloc(v25, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a6, 2);
          a5 = v17;
        }
        v16 = v75;
      }
      v44 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend(a1, "type"));
      v45 = objc_msgSend(v44, "supportsCRDTs");

      v46 = 0;
      v73 = v45 ^ 1;
      if (a3 >> 60 != 15 && v45)
      {
        v47 = v12;
        sub_1000A70E4(a2, a3);
        if (qword_100837428 != -1)
          swift_once(&qword_100837428, sub_1003DCEEC);
        v48 = type metadata accessor for Logger(0);
        sub_10001AAA8(v48, (uint64_t)qword_100848E60);
        v49 = a1;
        v50 = Logger.logObject.getter(v49);
        v71 = static os_log_type_t.info.getter(v50);
        if (os_log_type_enabled(v50, v71))
        {
          v69 = v50;
          v70 = v14;
          log = (os_log_t)a5;
          v51 = (uint8_t *)swift_slowAlloc(12, -1);
          v52 = swift_slowAlloc(32, -1);
          v78 = v52;
          *(_DWORD *)v51 = 136315138;
          v53 = objc_msgSend(v49, v47[432]);
          if (v53)
          {
            v54 = v53;
            v55 = objc_msgSend(v53, "description");

            v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
            v58 = v57;

          }
          else
          {
            v58 = 0xE300000000000000;
            v56 = 7104878;
          }
          v77 = sub_10001A820(v56, v58, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v71, "RDMergePolicy: Deserialized listIDsMergeableOrdering ordering from data {remObjectID: %s}", v51, 0xCu);
          swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v52, -1, -1);
          swift_slowDealloc(v51, -1, -1);

          a5 = (uint64_t)log;
          v14 = v70;
          v16 = v75;
        }
        else
        {

        }
        sub_1000A70E4(a2, a3);
        v46 = sub_10025F938(a2, a3, v16, a5, a6, v14);
        sub_1000A71B4(a2, a3);
        sub_1000A71B4(a2, a3);
      }
      sub_1000A70D0(a2, a3);
      v59 = v46;
      v60 = sub_100257DE0(a2, a3, v46, a5, a6, v16, v74, v73);
      if (v61 >> 60 == 15)
      {

        sub_1000A71B4(a2, a3);
      }
      else
      {
        v62 = v60;
        v63 = v61;
        sub_1000A70E4(v60, v61);
        v64 = v14;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v66 = String._bridgeToObjectiveC()();
        objc_msgSend(a1, "setValue:forKey:", isa, v66);

        sub_1000A71B4(v62, v63);
        sub_1000A71B4(v62, v63);

        sub_1000A71B4(a2, a3);
      }

    }
    else
    {
      if (qword_100837428 != -1)
        swift_once(&qword_100837428, sub_1003DCEEC);
      v36 = type metadata accessor for Logger(0);
      sub_10001AAA8(v36, (uint64_t)qword_100848E60);
      swift_bridgeObjectRetain_n(a6, 2);
      v76 = v14;
      v37 = Logger.logObject.getter(v76);
      v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        v40 = (_QWORD *)swift_slowAlloc(8, -1);
        v41 = swift_slowAlloc(32, -1);
        v78 = v41;
        *(_DWORD *)v39 = 136315394;
        swift_bridgeObjectRetain(a6);
        v77 = sub_10001A820(a5, a6, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
        swift_bridgeObjectRelease_n(a6, 3);
        *(_WORD *)(v39 + 12) = 2112;
        v77 = (uint64_t)v76;
        v42 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
        *v40 = v14;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDMergePolicy: Could not get a replicaIDSource for account for key {key: %s, remObjectID: %@}", (uint8_t *)v39, 0x16u);
        v43 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v40, 1, v43);
        swift_slowDealloc(v40, -1, -1);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a6, 2);
      }
    }
  }
  else
  {
    if (qword_100837428 != -1)
      swift_once(&qword_100837428, sub_1003DCEEC);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_100848E60);
    swift_bridgeObjectRetain_n(a6, 2);
    v27 = a1;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = (_QWORD *)swift_slowAlloc(8, -1);
      v32 = swift_slowAlloc(32, -1);
      v78 = v32;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain(a6);
      v77 = sub_10001A820(a5, a6, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      *(_QWORD *)&v33 = swift_bridgeObjectRelease_n(a6, 3).n128_u64[0];
      *(_WORD *)(v30 + 12) = 2112;
      v34 = objc_msgSend(v27, "objectID", v33);
      v77 = (uint64_t)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      *v31 = v34;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDMergePolicy: cdAccount has no remObjectID {key: %s, cdAccount.objectID: %@}", (uint8_t *)v30, 0x16u);
      v35 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v31, 1, v35);
      swift_slowDealloc(v31, -1, -1);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
    }
  }
}

unint64_t sub_1003E31E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100848EC0;
  if (!qword_100848EC0)
  {
    v1 = sub_1000A5A94(&qword_100848EB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100848EC0);
  }
  return result;
}

uint64_t sub_1003E3234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848EC8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848EC8);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1003E32C4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(REMLog), "alarmEngine");
  qword_100848EE0 = (uint64_t)result;
  return result;
}

void sub_1003E3380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837430 != -1)
    swift_once(&qword_100837430, sub_1003E3234);
  v6 = type metadata accessor for Logger(0);
  v30 = sub_10001AAA8(v6, (uint64_t)qword_100848EC8);
  v7 = Logger.logObject.getter(v30);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.RDDueDateDeltaAlarmProducer.reload}", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v29 = os_transaction_create("com.apple.remindd.RDDueDateDeltaAlarmProducer.reload");
  v10 = static os_signpost_type_t.begin.getter(v29);
  if (qword_100837438 != -1)
    swift_once(&qword_100837438, sub_1003E32C4);
  v11 = qword_100848EE0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "RDDueDateDeltaAlarmProducer.reload", 34, 2, v5);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  v13 = sub_10000A388((_QWORD *)(v1 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource + 24));
  v14 = *v13;
  v15 = static os_signpost_type_t.begin.getter(v13);
  if (qword_100837290 != -1)
    swift_once(&qword_100837290, sub_10035A7C8);
  v16 = qword_100846A58;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "RDAlarmProducerDataSource.fetchAllDueDateDeltaDataSourceAlarms", 62, 2, v5);
  v12(v5, v2);
  v17 = swift_retain();
  v18 = (_QWORD *)sub_1003662AC(v17);
  swift_release(v14);
  v20 = static os_signpost_type_t.end.getter(v19);
  v21 = qword_100846A58;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v20, &_mh_execute_header, v21, "RDAlarmProducerDataSource.fetchAllDueDateDeltaDataSourceAlarms", 62, 2, v5);
  v12(v5, v2);
  sub_1003E36FC((uint64_t)v18);
  sub_1003E3B90(v18);
  v22 = swift_bridgeObjectRelease();
  v23 = static os_signpost_type_t.end.getter(v22);
  v24 = qword_100848EE0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v24, "RDDueDateDeltaAlarmProducer.reload", 34, 2, v5);
  v25 = ((uint64_t (*)(char *, uint64_t))v12)(v5, v2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "os_transaction RELEASE {name: com.apple.remindd.RDDueDateDeltaAlarmProducer.reload}", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }
  swift_unknownObjectRelease(v29);

}

void sub_1003E36FC(uint64_t a1)
{
  char *v1;
  char *v2;
  NSObject *v4;
  Class isa;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  __n128 v26;
  uint64_t Strong;
  char *v28;
  _QWORD *v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  NSObject *v40;
  uint64_t v41;
  char v42[16];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  isa = v4[-1].isa;
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started] == 1)
  {
    v40 = v4;
    v13 = static os_signpost_type_t.begin.getter(v10);
    if (qword_100837438 != -1)
      swift_once(&qword_100837438, sub_1003E32C4);
    v14 = qword_100848EE0;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v13, &_mh_execute_header, v14, "RDDueDateDeltaAlarmProducer.produceExpiredAlarms", 48, 2, v12);
    v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v12, v8);
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_100848EC8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDDueDateDeltaAlarmProducer is firing expired dueDateDelta alarms", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v21 = Date.init(timeIntervalSinceNow:)(v20, 3.0);
    __chkstk_darwin(v21);
    *(&v38 - 2) = (uint64_t)v7;
    v22 = sub_100351A84((void (*)(_QWORD, __n128))sub_1003E5D44, (uint64_t)(&v38 - 4), a1);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v25 = 134217984;
      v41 = v22[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDDueDateDeltaAlarmProducer is firing expired dueDateDelta alarms, count = %ld", v25, 0xCu);
      swift_slowDealloc(v25, -1, -1);
    }

    Strong = swift_unknownObjectUnownedLoadStrong(&v2[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_delegate], v26);
    __chkstk_darwin(Strong);
    *(&v38 - 2) = (uint64_t)v7;
    v28 = v2;
    v29 = sub_100200C48((void (*)(uint64_t *__return_ptr, uint64_t))sub_1003E5D5C, (uint64_t)(&v38 - 4), (uint64_t)v22);
    swift_bridgeObjectRelease();
    sub_1002036F8(v28, (uint64_t)v29, Strong);
    swift_unknownObjectRelease(Strong);
    v30 = swift_bridgeObjectRelease();
    (*((void (**)(char *, NSObject *, __n128))isa + 1))(v7, v40, v30);

    v32 = static os_signpost_type_t.end.getter(v31);
    v33 = qword_100848EE0;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v32, &_mh_execute_header, v33, "RDDueDateDeltaAlarmProducer.produceExpiredAlarms", 48, 2, v12);
    v39(v12, v8);
  }
  else
  {
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001AAA8(v34, (uint64_t)qword_100848EC8);
    v40 = Logger.logObject.getter(v35);
    v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v36, "RDDueDateDeltaAlarmProducer.start() must be called before fireExpiredAlarms", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

void sub_1003E3B90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void (*v70)(void);
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, uint64_t, uint64_t);
  id v80;
  char *v81;
  void (*v82)(char *, uint64_t, __n128);
  char *v83;
  uint64_t v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  __n128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  os_log_t v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __n128 v126;
  uint8_t *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  os_log_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  void (*v137)(char *, char *, uint64_t);
  _QWORD *v138;
  char *v139;
  void (*v140)(char *, NSObject *);
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  NSObject *v153;
  uint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;

  v151 = a1;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_1008464F8);
  __chkstk_darwin(v5);
  v7 = (void **)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630((uint64_t *)&unk_100843790);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v142 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v132 - v12;
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v132 - v15);
  __chkstk_darwin(v17);
  v146 = (char *)&v132 - v18;
  __chkstk_darwin(v19);
  v147 = (uint64_t *)((char *)&v132 - v20);
  v148 = type metadata accessor for Date(0);
  v150 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v141 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v143 = (char *)&v132 - v23;
  __chkstk_darwin(v24);
  v144 = (char *)&v132 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v132 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v132 - v30;
  v153 = type metadata accessor for OSSignpostID(0);
  isa = v153[-1].isa;
  __chkstk_darwin(v153);
  v152 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started) == 1)
  {
    v139 = v4;
    v145 = v31;
    v149 = v1;
    v35 = static os_signpost_type_t.begin.getter(v33);
    if (qword_100837438 != -1)
      swift_once(&qword_100837438, sub_1003E32C4);
    v138 = v13;
    v36 = qword_100848EE0;
    v37 = v152;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v35, &_mh_execute_header, v36, "RDDueDateDeltaAlarmProducer.addNextAlarmTimeEvent", 49, 2, v37);
    v140 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
    v140(v37, v153);
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001AAA8(v38, (uint64_t)qword_100848EC8);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = v149;
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDDueDateDeltaAlarmProducer is setting up the timers", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v45 = (uint64_t)v145;
    Date.init()(v46);
    sub_10000A388((_QWORD *)(v43 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource), *(_QWORD *)(v43 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource + 24));
    sub_1003604EC(v45, (uint64_t)v151, (uint64_t)v7);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      v47 = sub_10000882C((uint64_t)v7, &qword_1008464F8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      v50 = os_log_type_enabled(v48, v49);
      v51 = v148;
      v52 = (uint64_t)v139;
      if (v50)
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "No dueDateDelta alarm with future fireDate -- Done", v53, 2u);
        v54 = v53;
        v45 = (uint64_t)v145;
        swift_slowDealloc(v54, -1, -1);
      }

      v55 = v150;
      if (*(_QWORD *)(v149 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56))(v52, 1, 1, v51);
        sub_100263D90(v52);
        sub_10000882C(v52, (uint64_t *)&unk_1008380D0);
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v45, v51);
    }
    else
    {
      v135 = v39;
      v61 = *(int *)(v8 + 48);
      v62 = v147;
      v63 = v148;
      v64 = (char *)v147 + v61;
      v65 = (char *)v7 + v61;
      v66 = v45;
      v68 = *v7;
      v67 = v7[1];
      *v147 = v68;
      v62[1] = v67;
      v69 = v150;
      v70 = *(void (**)(void))(v150 + 32);
      ((void (*)(char *, char *, uint64_t))v70)((char *)v62 + v61, v65, v63);
      v71 = v68;
      v72 = v67;
      Date.init()(v72);
      v136 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v136(v66, v63);
      ((void (*)(uint64_t, char *, uint64_t))v70)(v66, v28, v63);
      v134 = v8;
      v73 = &v146[*(int *)(v8 + 48)];
      v137 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v137(v73, v64, v63);
      v74 = (uint64_t)v144;
      v70();
      if ((static Date.> infix(_:_:)(v74, v66) & 1) != 0)
      {
        v75 = v134;
        v76 = *(int *)(v134 + 48);
        v77 = v146;
        v78 = &v146[v76];
        *(_QWORD *)v146 = v71;
        *((_QWORD *)v77 + 1) = v72;
        v79 = (void (*)(char *, uint64_t, uint64_t))v137;
        v137(&v77[v76], v64, v63);
        v80 = v71;
        v81 = v78;
        v82 = (void (*)(char *, uint64_t, __n128))v136;
        v136((uint64_t)v81, v63);
        v79(v143, v74, v63);
        v83 = (char *)v16 + *(int *)(v75 + 48);
        *v16 = v80;
        v16[1] = v72;
        v79(v83, (uint64_t)v64, v63);
        sub_1003379E4((uint64_t)v16, (uint64_t)v138);
        v84 = v142;
        sub_100337A2C((uint64_t)v16, v142);
        v85 = v80;
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.default.getter(v86);
        v88 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          v89 = swift_slowAlloc(52, -1);
          v151 = (_QWORD *)swift_slowAlloc(8, -1);
          v141 = (char *)swift_slowAlloc(128, -1);
          v156 = v141;
          *(_DWORD *)v89 = 136447234;
          LODWORD(v135) = v88;
          v90 = sub_1002040FC((unint64_t *)&qword_100846B70, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v133 = v86;
          v91 = v143;
          v92 = dispatch thunk of CustomStringConvertible.description.getter(v63, v90);
          v154 = sub_10001A820(v92, v93, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          v94 = swift_bridgeObjectRelease();
          v82(v91, v63, v94);
          *(_WORD *)(v89 + 12) = 2080;
          v95 = *(int *)(v134 + 48);
          v96 = v146;
          v97 = &v146[v95];
          v98 = v138;
          v99 = (char *)v138 + v95;
          v100 = (void *)*v138;
          v101 = (void *)v138[1];
          *(_QWORD *)v146 = *v138;
          *((_QWORD *)v96 + 1) = v101;
          v137(&v96[v95], v99, v63);
          v154 = (uint64_t)v100;
          v155 = v101;
          v102 = v100;
          v103 = v101;
          v104 = String.init<A>(describing:)(&v154, &type metadata for RDDataSourceAlarm);
          v106 = v105;
          v136((uint64_t)v97, v63);
          v154 = sub_10001A820(v104, v106, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          swift_bridgeObjectRelease();
          sub_10000882C(v84, (uint64_t *)&unk_100843790);
          sub_10000882C((uint64_t)v98, (uint64_t *)&unk_100843790);
          *(_WORD *)(v89 + 22) = 2114;
          v107 = objc_msgSend(v85, "objectID");
          v154 = (uint64_t)v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
          *v151 = v107;

          *(_WORD *)(v89 + 32) = 2082;
          if (objc_msgSend(v85, "isRecurrent"))
            v108 = 89;
          else
            v108 = 78;
          v154 = sub_10001A820(v108, 0xE100000000000000, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);

          *(_QWORD *)&v109 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v89 + 42) = 2082;
          v82 = (void (*)(char *, uint64_t, __n128))v136;
          v110 = v149;
          if (objc_msgSend(v85, "isOverdue", v109))
            v111 = 89;
          else
            v111 = 78;
          v74 = (uint64_t)v144;
          v154 = sub_10001A820(v111, 0xE100000000000000, (uint64_t *)&v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);

          swift_bridgeObjectRelease();
          v112 = v133;
          _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v135, "Scheduling next dueDateDelta alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}", (uint8_t *)v89, 0x34u);
          v113 = sub_10001A630((uint64_t *)&unk_100839E70);
          v114 = v151;
          swift_arrayDestroy(v151, 1, v113);
          swift_slowDealloc(v114, -1, -1);
          v115 = v141;
          swift_arrayDestroy(v141, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v115, -1, -1);
          swift_slowDealloc(v89, -1, -1);

          v116 = v145;
          v117 = (uint64_t)v139;
        }
        else
        {
          ((void (*)(char *, uint64_t))v82)(v143, v63);
          sub_10000882C(v84, (uint64_t *)&unk_100843790);
          sub_10000882C((uint64_t)v138, (uint64_t *)&unk_100843790);

          v116 = v145;
          v117 = (uint64_t)v139;
          v110 = v149;
        }
        if (*(_QWORD *)(v110 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine))
        {
          v137((char *)v117, (char *)v74, v63);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v117, 0, 1, v63);
          sub_100263D90(v117);
          sub_10000882C(v117, (uint64_t *)&unk_1008380D0);
        }
        sub_100310AA0(v74);

        ((void (*)(uint64_t, uint64_t))v82)(v74, v63);
        sub_10000882C((uint64_t)v147, (uint64_t *)&unk_100843790);
        v128 = v116;
      }
      else
      {
        v82 = (void (*)(char *, uint64_t, __n128))v136;

        v118 = v141;
        v119 = ((uint64_t (*)(char *, uint64_t, uint64_t))v137)(v141, v74, v63);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.error.getter(v120);
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          v154 = v123;
          *(_DWORD *)v122 = 136446210;
          v124 = Date.description.getter(v123);
          v156 = (char *)sub_10001A820(v124, v125, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
          v126 = swift_bridgeObjectRelease();
          v82(v118, v63, v126);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Next dueDateDelta alarm is in the past -- Not adding event {fireDate: %{public}s}", v122, 0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          v127 = v122;
          v74 = (uint64_t)v144;
          swift_slowDealloc(v127, -1, -1);
        }
        else
        {
          ((void (*)(char *, uint64_t))v82)(v118, v63);
        }

        sub_1003E36FC((uint64_t)v151);
        ((void (*)(uint64_t, uint64_t))v82)(v74, v63);
        sub_10000882C((uint64_t)v147, (uint64_t *)&unk_100843790);
        v128 = v145;
      }
      v56.n128_f64[0] = ((double (*)(char *, uint64_t))v82)(v128, v63);
    }
    v129 = static os_signpost_type_t.end.getter(v56);
    v130 = qword_100848EE0;
    v131 = v152;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v129, &_mh_execute_header, v130, "RDDueDateDeltaAlarmProducer.addNextAlarmTimeEvent", 49, 2, v131);
    v140(v131, v153);
  }
  else
  {
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_10001AAA8(v57, (uint64_t)qword_100848EC8);
    v153 = Logger.logObject.getter(v58);
    v59 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v153, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v59, "RDDueDateDeltaAlarmProducer.start() must be called before setupTimers", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

  }
}

uint64_t sub_1003E48E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (*v21)(char *, __n128);
  void (*v22)(char *, uint64_t);
  id v23;
  id v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  double v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  char *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t result;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  os_log_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;

  v75 = a3;
  v73 = a2;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v71 = (char *)&v67 - v8;
  __chkstk_darwin(v9);
  v76 = (char *)&v67 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100843790);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v15 + 48);
  v17 = &v14[v16];
  v70 = (os_log_t)(a1 + v16);
  v18 = *(void **)a1;
  v19 = *(void **)(a1 + 8);
  *(_QWORD *)v14 = *(_QWORD *)a1;
  *((_QWORD *)v14 + 1) = v19;
  v20 = v5;
  v21 = *(void (**)(char *, __n128))(v5 + 16);
  v21(&v14[v16], v12);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23 = v18;
  v24 = v19;
  v25 = v76;
  v74 = v24;
  v22(v17, v4);
  v26 = &v14[*(int *)(v11 + 48)];
  v27 = v4;
  ((void (*)(char *, os_log_t, uint64_t))v21)(v26, v70, v4);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v26, v4);
  sub_100337AA8();
  v28 = v23;
  v74 = v74;
  v29 = static NSDateInterval.remNotificationFireDateGracePeriod.getter();
  v31 = v71;
  Date.addingTimeInterval(_:)(v29, -v30);
  v32 = v31;
  v33 = static Date.> infix(_:_:)(v25, v31);
  v22(v32, v4);
  if (qword_100837430 != -1)
    swift_once(&qword_100837430, sub_1003E3234);
  LODWORD(v73) = v33;
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100848EC8);
  v35 = v72;
  ((void (*)(char *, char *, uint64_t))v21)(v72, v76, v4);
  v36 = v28;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    v40 = swift_slowAlloc(42, -1);
    v41 = swift_slowAlloc(8, -1);
    v70 = v37;
    v42 = (_QWORD *)v41;
    v68 = v41;
    v71 = (char *)swift_slowAlloc(96, -1);
    v79 = v71;
    *(_DWORD *)v40 = 138544130;
    v69 = v39;
    v43 = objc_msgSend(v36, "objectID");
    v77 = (uint64_t)v43;
    v44 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    *v42 = v43;
    *(_WORD *)(v40 + 12) = 2082;
    v45 = Date.description.getter(v44);
    v77 = sub_10001A820(v45, v46, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    v47 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v22)(v35, v27, v47);
    *(_WORD *)(v40 + 22) = 2082;
    v48 = v73;
    if ((v73 & 1) != 0)
      v49 = 0x657669746361;
    else
      v49 = 0x65766973736170;
    if ((v73 & 1) != 0)
      v50 = 0xE600000000000000;
    else
      v50 = 0xE700000000000000;
    v77 = sub_10001A820(v49, v50, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v40 + 32) = 2082;
    if (objc_msgSend(v36, "isRecurrent", v51))
      v52 = 89;
    else
      v52 = 78;
    v77 = sub_10001A820(v52, 0xE100000000000000, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

    swift_bridgeObjectRelease();
    v53 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "RDDueDateDeltaAlarmProducer expired dueDateDelta Alarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}", (uint8_t *)v40, 0x2Au);
    v54 = sub_10001A630((uint64_t *)&unk_100839E70);
    v55 = v68;
    swift_arrayDestroy(v68, 1, v54);
    swift_slowDealloc(v55, -1, -1);
    v56 = v71;
    swift_arrayDestroy(v71, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {
    v22(v35, v27);

    v48 = v73;
  }
  v57 = v74;
  v58 = sub_1005BB458(v74);
  v60 = v59;
  v62 = v61;
  v64 = v63;

  result = ((uint64_t (*)(char *, uint64_t))v22)(v76, v27);
  v66 = v75;
  *v75 = v36;
  v66[1] = v58;
  v66[2] = v60;
  v66[3] = v62;
  *((_BYTE *)v66 + 32) = v64;
  *((_BYTE *)v66 + 33) = (v48 & 1) == 0;
  *((_BYTE *)v66 + 34) = 1;
  return result;
}

void sub_1003E4E84()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_queue];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started] & 1) != 0)
  {
    if (qword_100837430 == -1)
    {
LABEL_4:
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10001AAA8(v8, (uint64_t)qword_100848EC8);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDDueDateDeltaAlarmProducer.start() must be called exactly once", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      return;
    }
LABEL_14:
    swift_once(&qword_100837430, sub_1003E3234);
    goto LABEL_4;
  }
  v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started] = 1;
  if (qword_100837430 != -1)
    swift_once(&qword_100837430, sub_1003E3234);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100848EC8);
  v14 = v0;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v27 = 60;
    v28 = 0xE100000000000000;
    v29 = v18;
    v19._countAndFlagsBits = sub_1004E8C68((uint64_t)v14);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 62;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v27 = sub_10001A820(v27, v28, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting due date delta alarm producer {producer: %s}", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_timeEventStream + 8];
  ObjectType = swift_getObjectType();
  v23 = swift_allocObject(&unk_1007F2B70, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v14);
  v24 = *(_QWORD *)(v21 + 8);
  v25 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  v25(sub_1003E5D9C, v23, ObjectType, v24);
  swift_release(v23);
  sub_1003E3380();
}

void sub_1003E521C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = Strong;
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_100848EC8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received RDTimeEventHandler event on RDDueDateDeltaAlarmProducer, reloading alarms.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_1003E3380();
  }
  else
  {
    if (qword_100837430 != -1)
      swift_once(&qword_100837430, sub_1003E3234);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001AAA8(v10, (uint64_t)qword_100848EC8);
    v4 = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v12, "Received RDTimeEventHandler event on deallocated RDDueDateDeltaAlarmProducer", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }

}

unint64_t sub_1003E53C8()
{
  return 0xD00000000000001BLL;
}

void sub_1003E53E4()
{
  sub_1003E4E84();
}

void sub_1003E5404()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100837430 != -1)
    swift_once(&qword_100837430, sub_1003E3234);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848EC8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Alarm trigger did change for RDDueDateDeltaAlarmProducer", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1003E3380();
}

uint64_t sub_1003E54DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  unsigned int v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class isa;
  id v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v37 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16 = __chkstk_darwin(v15).n128_u64[0];
  v18 = (char *)v37 - v17;
  if (objc_msgSend(a1, "allDay", v16))
  {
    sub_100455538(a1, (uint64_t)v7);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v19(v7, 1, v11) == 1)
    {
      sub_10000882C((uint64_t)v7, (uint64_t *)&unk_1008380D0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v7, v11);
    sub_10045698C((uint64_t)v14, (uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v20 = v19(v10, 1, v11);
  }
  else
  {
    sub_100455538(a1, (uint64_t)v10);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  }
  if (v20 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
    v33 = objc_msgSend(v2, "dueDateDelta");
    isa = Date._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v33, "addedTo:", isa);

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v31, 1, v11);
  }
LABEL_7:
  sub_10000882C((uint64_t)v10, (uint64_t *)&unk_1008380D0);
  if (qword_100837430 != -1)
    swift_once(&qword_100837430, sub_1003E3234);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100848EC8);
  v22 = a1;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v41 = v38;
    *(_DWORD *)v25 = 136315138;
    v37[1] = v25 + 4;
    v26 = v12;
    v27 = objc_msgSend(v22, "description");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v39 = a2;
    v30 = v29;

    v12 = v26;
    v40 = sub_10001A820(v28, v30, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

    a2 = v39;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Tried to fire dueDateDelta alarm with nil dueDate {reminder: %s}", v25, 0xCu);
    v31 = 1;
    v32 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    v31 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v31, 1, v11);
}

uint64_t sub_1003E58E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  id v28;
  void *v29;
  id v30;
  void (*v31)(char *, char *, uint64_t);
  unsigned int v32;
  char *v34;
  id v35;
  Class isa;
  id v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  char *v44;
  void (*v45)(void *, uint64_t, uint64_t);

  v45 = a3;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - v20;
  *(_QWORD *)&v23 = __chkstk_darwin(v22).n128_u64[0];
  v25 = (char *)&v40 - v24;
  if (objc_msgSend(a1, "allDay", v23))
  {
    v41 = a1;
    v42 = a2;
    v26 = a4;
    sub_100455538(a1, (uint64_t)v11);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    if (v27(v11, 1, v15) == 1)
    {
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
      a4 = v26;
LABEL_6:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_9:
      sub_10000882C((uint64_t)v14, (uint64_t *)&unk_1008380D0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a4, 1, 1, v15);
    }
    v31 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v31(v21, v11, v15);
    sub_10045698C((uint64_t)v21, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    v32 = v27(v14, 1, v15);
  }
  else
  {
    v28 = objc_msgSend(a1, "displayDate");
    if (!v28)
      goto LABEL_6;
    v29 = v28;
    v41 = a1;
    v42 = a2;
    v26 = a4;
    v30 = objc_msgSend(v28, "date");

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v31 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v31(v14, v18, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  }
  a4 = v26;
  if (v32 == 1)
    goto LABEL_9;
  v34 = v25;
  v31(v25, v14, v15);
  v35 = objc_msgSend(v43, "dueDateDelta");
  isa = Date._bridgeToObjectiveC()().super.isa;
  v37 = objc_msgSend(v35, "addedTo:", isa);

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v38 = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v44, v18, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v38, 0, 1, v15);
  v45(v41, v42, v38);
  sub_10000882C(v38, (uint64_t *)&unk_1008380D0);
  v39 = *(void (**)(char *, uint64_t))(v16 + 8);
  v39(v18, v15);
  return ((uint64_t (*)(char *, uint64_t))v39)(v34, v15);
}

uint64_t sub_1003E5C78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E54DC(a1, a2);
}

uint64_t sub_1003E5C98@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1003E58E4(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_1004552F4, a3);
}

uint64_t sub_1003E5CC0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1003E58E4(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_100454FEC, a3);
}

uint64_t type metadata accessor for RDDueDateDeltaAlarmProducer()
{
  return objc_opt_self(_TtC7remindd27RDDueDateDeltaAlarmProducer);
}

uint64_t sub_1003E5D08(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002040FC(&qword_100848F40, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003E5D44@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100361688(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1003E5D5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1003E48E0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1003E5D78()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003E5D9C()
{
  uint64_t v0;

  sub_1003E521C(v0);
}

uint64_t sub_1003E5DA4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_100848F80, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.Invocation, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.Invocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1003E5DE0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, id);
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v5 = v4;
  v48 = a3;
  v49 = a4;
  v47 = type metadata accessor for REMAccountsListDataView.Model.Account(0);
  v8 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v10 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v46 = (char *)&v39 - v12;
  v42 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  while (1)
  {
    if (a1 < 0)
      v37 = a1;
    else
      v37 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
LABEL_3:
    v51 = (unint64_t)a2 >> 62;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v38 = a2;
      else
        v38 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v14 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v14 >= v13)
      v14 = v13;
    v55 = _swiftEmptyArrayStorage;
    v44 = v14 & ~(v14 >> 63);
    sub_1001C1CBC(0, v44, 0);
    if (v14 < 0)
    {
      __break(1u);
LABEL_90:

      __break(1u);
      return;
    }
    v15 = v55;
    v53 = a1;
    v45 = v14;
    if (!v14)
      break;
    if (v42)
    {
      v40 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v18 = a1;
      else
        v18 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a1, 2);
      swift_bridgeObjectRetain(a2);
      v43 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = a1 & 0xFFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a2);
    }
    v19 = a1;
    a1 = 0;
    v52 = v19 & 0xC000000000000001;
    v17 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    v41 = v20;
    v50 = a2 & 0xC000000000000001;
    v54 = a2 & 0xFFFFFFFFFFFFFF8;
    while (v44 != a1)
    {
      if (v43 == a1)
        goto LABEL_73;
      if (v52)
      {
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v53);
      }
      else
      {
        if ((unint64_t)a1 >= *(_QWORD *)(v40 + 16))
          goto LABEL_80;
        v21 = *(id *)(v53 + 8 * a1 + 32);
      }
      v14 = (uint64_t)v21;
      if (v51)
      {
        swift_bridgeObjectRetain(a2);
        v22 = _CocoaArrayWrapper.endIndex.getter(v41);
        swift_bridgeObjectRelease();
      }
      else
      {
        v22 = *(_QWORD *)(v17 + 16);
      }
      if (a1 == v22)
        goto LABEL_90;
      if (v50)
      {
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
      }
      else
      {
        if ((unint64_t)a1 >= *(_QWORD *)(v17 + 16))
          goto LABEL_74;
        v23 = *(id *)(a2 + 8 * a1 + 32);
      }
      v24 = v23;
      v48(v14, v23);
      if (v5)
      {

        swift_release(v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

      v55 = v15;
      v26 = v15[2];
      v25 = v15[3];
      if (v26 >= v25 >> 1)
      {
        sub_1001C1CBC(v25 > 1, v26 + 1, 1);
        v15 = v55;
      }
      ++a1;
      v15[2] = v26 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v26, v10, v47);
      v17 = v54;
      if (v45 == a1)
      {
        a1 = v53;
        v16 = v40;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
  }
  v16 = a1 & 0xFFFFFFFFFFFFFF8;
  v52 = a1 & 0xC000000000000001;
  v17 = a2 & 0xFFFFFFFFFFFFFF8;
  v50 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
LABEL_40:
  if (a1 < 0)
    v27 = a1;
  else
    v27 = v16;
  v54 = v17;
  if (a2 < 0)
    v28 = a2;
  else
    v28 = v17;
  v43 = v28;
  v44 = v27;
  v10 = v45 + 4;
  if (v42)
  {
LABEL_47:
    swift_bridgeObjectRetain(a1);
    v29 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  while (1)
  {
    v29 = *(_QWORD *)(v16 + 16);
LABEL_48:
    v30 = v10 - 4;
    if (v10 - 4 == v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v52)
    {
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1);
    }
    else
    {
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_75;
      if (v30 >= *(_QWORD *)(v16 + 16))
        goto LABEL_76;
      v31 = *(id *)(a1 + 8 * v10);
    }
    v32 = v31;
    if (__OFADD__(v30, 1))
      goto LABEL_77;
    if (v51)
    {
      swift_bridgeObjectRetain(a2);
      a1 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease();
      if (v30 == a1)
      {
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
    }
    else
    {
      a1 = *(_QWORD *)(v54 + 16);
      if (v30 == a1)
        goto LABEL_70;
    }
    if (v50)
    {
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a2);
    }
    else
    {
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_78;
      if (v30 >= *(_QWORD *)(v54 + 16))
        goto LABEL_79;
      v33 = *(id *)(a2 + 8 * v10);
    }
    v34 = v33;
    v48((uint64_t)v32, v33);
    if (v5)
      break;

    v55 = v15;
    v36 = v15[2];
    v35 = v15[3];
    if (v36 >= v35 >> 1)
    {
      sub_1001C1CBC(v35 > 1, v36 + 1, 1);
      v15 = v55;
    }
    v15[2] = v36 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v36, v46, v47);
    ++v10;
    a1 = v53;
    if (v42)
      goto LABEL_47;
  }
  swift_release(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_1003E63B4(uint64_t a1, void *a2, void *a3, void **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v5 = a1;
  if (!a2)
    goto LABEL_9;
  if (!((unint64_t)a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = a2;
    if (v9 > 1)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRetain(v5);

    return v5;
  }
  if (a1 < 0)
    v17 = a1;
  else
    v17 = a1 & 0xFFFFFFFFFFFFFF8;
  v18 = a2;
  swift_bridgeObjectRetain(v5);
  v19 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  if (v19 <= 1)
    goto LABEL_17;
LABEL_4:
  v11 = *a4;
  if (!*a4)
  {
    sub_100204328(a2, a3);
    if (v4)
    {

      swift_errorRelease(v4);
    }
    else
    {
      v16 = v15;
      if (v15)
      {
        *a4 = v15;
        v12 = _s19PolymorphicListItemCMa();
        v13 = v16;
        goto LABEL_6;
      }

    }
LABEL_9:
    swift_bridgeObjectRetain(v5);
    return v5;
  }
  v12 = _s19PolymorphicListItemCMa();
  v13 = v11;
LABEL_6:
  v14 = v13;
  v5 = REMOrderedIdentifierMap.reorder<A>(objects:)(v5, v12);

  return v5;
}

uint64_t sub_1003E64FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100848F48);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100848F48);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1003E658C(NSObject *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  id v36;
  uint64_t v37;
  char v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  objc_class *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  id *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  void *v69;
  id v70;
  char v71;
  __n128 v72;
  char *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  NSObject *v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  char *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  void *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;

  v162 = a2;
  v147 = a5;
  v8 = type metadata accessor for REMAccountsListDataView.Diff(0);
  v150 = *(_QWORD *)(v8 - 8);
  v151 = v8;
  __chkstk_darwin(v8);
  v149 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v156 = (char *)&v139 - v11;
  v12 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v153 = *(_QWORD *)(v12 - 8);
  v154 = v12;
  v13 = __chkstk_darwin(v12);
  v152 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for REMAccountsListDataView.Model(0, v13);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v148 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v158 = (char *)&v139 - v17;
  v18 = sub_10001A630(&qword_1008422D8);
  v19 = __chkstk_darwin(v18);
  v159 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = (_QWORD *)type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters(0, v19);
  v21 = *(v160 - 1);
  __chkstk_darwin(v160);
  v23 = (char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A630(&qword_100849050);
  __chkstk_darwin(v24);
  v26 = (char *)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v139 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v139 - v31;
  v161 = a4;
  v33 = v163;
  v34 = sub_1003E71D8((uint64_t)a1, a3);
  if (!v33)
  {
    v144 = (uint64_t)v29;
    v141 = v23;
    v140 = v21;
    v139 = v26;
    v145 = a1;
    v146 = a3;
    v163 = 0;
    v142 = v32;
    v166 = v34;
    v36 = (id)v161;
    v37 = v34;
    v38 = REMAccountsListDataView.FetchOptions.fetchAccounts.getter(v35);
    v143 = v37;
    if ((v38 & 1) != 0)
    {
      v39 = v145;
      v40 = v145;
      swift_bridgeObjectRetain(v37);
      v41 = v163;
      v43 = (objc_class *)sub_1003F341C(v42, v40);
      v163 = v41;
      swift_bridgeObjectRelease();

      v44 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
      v45 = -[NSObject persistentStoreOfAccountWithAccountID:](v40, "persistentStoreOfAccountWithAccountID:", v44);

      if (v45)
      {
        v165 = (uint64_t)v43;
        v46 = v45;
        swift_bridgeObjectRetain(v43);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        v49 = *(_QWORD *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v48 = *(_QWORD *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v49 >= v48 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1);
        v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
        specialized Array._endMutation()(v50);
        v51 = (objc_class *)v165;

      }
      else
      {
        swift_bridgeObjectRetain(v43);
        v51 = v43;
      }
    }
    else
    {
      v51 = 0;
      v43 = 0;
      v39 = v145;
    }
    v52 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v53 = v144;
    v54 = v163;
    v55 = sub_1003E76A8(v144, v39, v162, v146, (uint64_t)v36, (uint64_t)v52, (uint64_t)&off_1007F2BA8, v51);
    if (v54)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v56 = v55;

    swift_bridgeObjectRelease();
    sub_1000A5CA8(v53, (uint64_t)v142, &qword_100849050);
    sub_10015E1F0(v39, (void *)2, 0, (uint64_t)v43);
    v58 = (uint64_t)v57;
    LODWORD(v144) = v56;
    swift_bridgeObjectRelease();
    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0)
        v135 = v58;
      else
        v135 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      v59 = _CocoaArrayWrapper.endIndex.getter(v135);
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v60 = v146;
    v61 = v160;
    if (!v59)
    {
      v68 = swift_bridgeObjectRelease();
      v69 = 0;
LABEL_28:
      v71 = REMAccountsListDataView.FetchOptions.fetchHashtagLabels.getter(v68);
      v73 = v141;
      if ((v71 & 1) != 0)
      {
        v74 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation(0, v72);
        v75 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v74)), "init");
        v76 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
        v77 = v159;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v159, 1, 1, v76);
        REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.init(sortingStyle:)(v77);
        v78 = sub_1004D6808();
        v79 = v73;
        v80 = (_QWORD *)v78;
        (*(void (**)(char *, _QWORD *))(v140 + 8))(v79, v61);

      }
      else
      {
        v80 = _swiftEmptyArrayStorage;
      }
      v81 = v145;
      v82 = sub_1003F3C68((uint64_t)v145, v162, v72);
      LOBYTE(v52) = v83;
      sub_1003F3ED4(v81, v146, (uint64_t)v36, (uint64_t)&v166);
      v85 = v84;
      v163 = 0;
      if ((REMAccountsListDataView.FetchOptions.fetchUserDefinedVisibilityOfPredefinedSmartLists.getter() & 1) != 0
        && (v86 = (void *)sub_100300818()) != 0)
      {
        v87 = v86;
        v88 = v163;
        v89 = sub_10058EDB4(v145, v86);
        v163 = v88;
        v90 = (uint64_t)v139;
        if (v88)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          sub_10000882C((uint64_t)v142, &qword_100849050);
          swift_bridgeObjectRelease();
          return;
        }
        v161 = v89;
        v162 = v85;

      }
      else
      {
        v162 = v85;
        v161 = sub_1002AF704((uint64_t)_swiftEmptyArrayStorage);
        v90 = (uint64_t)v139;
      }
      v91 = v166;
      sub_1003F5474((uint64_t)v142, v90);
      v92 = v153;
      v93 = v154;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v90, 1, v154) == 1)
      {
        v94 = v152;
        static REMAccountsListDataView.ReminderCounts.zero.getter();
        sub_10000882C(v90, &qword_100849050);
      }
      else
      {
        v95 = v93;
        v94 = v152;
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v152, v90, v95);
      }
      v36 = v69;
      REMAccountsListDataView.Model.init(accounts:defaultList:reminderCounts:hashtagLabels:smartListHashtagLabels:userDefinedVisibilityOfPredefinedSmartLists:orderedPinnedLists:)(v91, v69, v94, v80, v82, v161, v162);
      v96 = objc_msgSend(v164, "fetchResultTokenToDiffAgainst");
      if (v96)
      {
        v97 = v96;
        v98 = v163;
        sub_1003F54BC(v96, v145);
        v163 = v98;
        v101 = v157;
        if (v98)
        {

          (*(void (**)(char *, uint64_t))(v155 + 8))(v158, v101);
LABEL_52:
          sub_10000882C((uint64_t)v142, &qword_100849050);
          return;
        }
        v103 = v99;
        v102 = v100;

        goto LABEL_45;
      }
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      {
        v102 = &_swiftEmptySetSingleton;
        v103 = &_swiftEmptySetSingleton;
        goto LABEL_45;
      }
LABEL_67:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
        v103 = v137;
      }
      else
      {
        v103 = &_swiftEmptySetSingleton;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
        {
          v102 = &_swiftEmptySetSingleton;
          goto LABEL_45;
        }
      }
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
        v102 = v138;
      }
      else
      {
        v102 = &_swiftEmptySetSingleton;
      }
LABEL_45:
      v104 = v158;
      v105 = (char)v52;
      REMAccountsListDataView.Diff.init(updatedAccountObjectIDs:updatedListObjectIDs:)(v103, v102);
      v106 = sub_10001A630(&qword_100849058);
      v107 = *(_QWORD *)(sub_10001A630(&qword_100849060) - 8);
      v108 = *(_QWORD *)(v107 + 72);
      v109 = *(unsigned __int8 *)(v107 + 80);
      v110 = (v109 + 32) & ~v109;
      v111 = swift_allocObject(v106, v110 + 2 * v108, v109 | 7);
      *(_OWORD *)(v111 + 16) = xmmword_1006A3C40;
      v112 = v111 + v110;
      if ((v144 & 1) != 0)
      {
        v113 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v112, 1, 1, v113);
      }
      else
      {
        v114 = enum case for REMAccountsListDataView.CachableProperty.reminderCounts(_:);
        v115 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
        v116 = *(_QWORD *)(v115 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 104))(v112, v114, v115);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v112, 0, 1, v115);
      }
      v117 = v151;
      v118 = v112 + v108;
      v160 = v36;
      if ((v105 & 1) != 0)
      {
        v119 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v118, 1, 1, v119);
      }
      else
      {
        v120 = enum case for REMAccountsListDataView.CachableProperty.smartListHashtagLabels(_:);
        v119 = type metadata accessor for REMAccountsListDataView.CachableProperty(0);
        v121 = *(_QWORD *)(v119 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 104))(v118, v120, v119);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v119);
      }
      v165 = v111;
      v122 = sub_10001A630(&qword_100849068);
      type metadata accessor for REMAccountsListDataView.CachableProperty(0);
      v123 = sub_1000A5F84(&qword_100849070, &qword_100849068, (uint64_t)&protocol conformance descriptor for [A]);
      v124 = Sequence.removingNils<A>()(v122, v119, v123);
      swift_bridgeObjectRelease();
      v125 = sub_10011F194(v124);
      v126 = swift_bridgeObjectRelease();
      v127 = v148;
      v128 = v104;
      v129 = v104;
      v130 = v155;
      v131 = v157;
      (*(void (**)(char *, char *, uint64_t, __n128))(v155 + 16))(v148, v128, v157, v126);
      v133 = v149;
      v132 = v150;
      v134 = v156;
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v149, v156, v117);
      REMAccountsListDataView.Invocation.Result.init(model:outdatedProperties:diff:)(v127, v125, v133);

      (*(void (**)(char *, uint64_t))(v132 + 8))(v134, v117);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v131);
      goto LABEL_52;
    }
    if ((v58 & 0xC000000000000001) != 0)
    {
      v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
    }
    else
    {
      if (!*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_60;
      }
      v62 = *(id *)(v58 + 32);
    }
    v63 = v62;
    swift_bridgeObjectRelease();
    v64 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v65 = swift_allocObject(v64, 40, 7);
    *(_OWORD *)(v65 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v65 + 32) = v63;
    v165 = v65;
    specialized Array._endMutation()(v65);
    v66 = v165;
    v58 = v63;
    sub_1004A87E4(v66, v60);
    v59 = v67;
    swift_bridgeObjectRelease();
    if (!((unint64_t)v59 >> 62))
    {
      v69 = *(void **)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      v61 = v160;
      if (v69)
      {
LABEL_23:
        if ((v59 & 0xC000000000000001) != 0)
        {
          v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v59);
        }
        else
        {
          if (!*(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_67;
          }
          v70 = *(id *)(v59 + 32);
        }
        v69 = v70;
      }
LABEL_27:
      swift_bridgeObjectRelease();

      goto LABEL_28;
    }
LABEL_60:
    if (v59 < 0)
      v136 = v59;
    else
      v136 = v59 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v59);
    v69 = (void *)_CocoaArrayWrapper.endIndex.getter(v136);
    swift_bridgeObjectRelease();
    v61 = v160;
    if (v69)
      goto LABEL_23;
    goto LABEL_27;
  }
}

uint64_t sub_1003E71D8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  char v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t *v54;
  id v55;
  uint64_t v56;
  id v57;
  char v58[16];
  uint64_t v59;

  v4 = v2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = REMAccountsListDataView.FetchOptions.fetchAccounts.getter(v9);
  v13 = _swiftEmptyArrayStorage;
  if ((v12 & 1) == 0)
    return (uint64_t)v13;
  v57 = a2;
  sub_10034B07C(6, 0, 7);
  v15 = v14;
  if (qword_100837280 != -1)
    swift_once(&qword_100837280, sub_10034CAF8);
  v16 = (void *)sub_100357FC0(qword_100871E50, 0, 0, (uint64_t)v15);
  v17 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v18 = NSManagedObjectContext.fetch<A>(_:)(v16, v17);

  if (v3)
    return (uint64_t)v13;
  if (v18 < 0 || (v18 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v18);
    v19 = (uint64_t)sub_1001E8BA0(v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
  }
  v59 = v19;
  sub_1005C29C0(&v59);
  v55 = 0;
  v56 = v4;
  v53 = a1;
  swift_bridgeObjectRelease();
  v20 = v59;
  v21 = type metadata accessor for REMAccountStorageCDIngestor();
  inited = swift_initStackObject(v21, v58);
  if (qword_100837278 != -1)
    swift_once(&qword_100837278, sub_10034C0CC);
  v23 = sub_10001AAA8(v7, (uint64_t)qword_100846A10);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
  v54 = &v53;
  v59 = v20;
  __chkstk_darwin(v24);
  *(&v53 - 2) = (uint64_t)v11;
  v25 = sub_10001A630(&qword_10083FE60);
  v26 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v27 = sub_1000A5F84((unint64_t *)&qword_100843190, &qword_10083FE60, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = v55;
  v29 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v53 - 4, sub_1003F6730, inited, v25, v26, v27);
  if (v28)
  {
    swift_errorRelease(v28);
    v30 = _swiftEmptyArrayStorage;
  }
  else
  {
    v30 = (_QWORD *)v29;
  }
  v31 = v56;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v32 = v57;
  v33 = sub_1003F2100((uint64_t)v30, (uint64_t)v32);
  v34 = 0;
  swift_bridgeObjectRelease();
  swift_release(inited);

  v59 = (uint64_t)_swiftEmptyArrayStorage;
  if ((v20 & 0x8000000000000000) == 0 && (v20 & 0x4000000000000000) == 0)
  {
    v35 = *(_QWORD *)(v20 + 16);
    swift_retain();
    if (v35)
      goto LABEL_16;
LABEL_29:
    v45 = swift_release(v20);
    v46 = _swiftEmptyArrayStorage;
LABEL_30:
    __chkstk_darwin(v45);
    *(&v53 - 4) = v31;
    *(&v53 - 3) = v49;
    *(&v53 - 2) = (uint64_t)v32;
    *(&v53 - 1) = (uint64_t)v46;
    sub_1003E5DE0(v20, (uint64_t)v33, (void (*)(uint64_t, id))sub_1003F6748, (uint64_t)(&v53 - 6));
    v51 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v20);
    if (!v34)
      return v51;
    return (uint64_t)v13;
  }
  v48 = swift_retain();
  v35 = _CocoaArrayWrapper.endIndex.getter(v48);
  if (!v35)
    goto LABEL_29;
LABEL_16:
  v54 = 0;
  v55 = v32;
  v57 = v33;
  if (v35 >= 1)
  {
    for (i = 0; i != v35; ++i)
    {
      if ((v20 & 0xC000000000000001) != 0)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
      else
        v38 = *(id *)(v20 + 8 * i + 32);
      v39 = v38;
      v40 = objc_msgSend(v38, "objectID");
      v41 = objc_msgSend(v40, "persistentStore");

      if (v41)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
        v44 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v43 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v44 >= v43 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1);
        v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
        specialized Array._endMutation()(v37);
      }
    }
    v45 = swift_release(v20);
    v46 = (_QWORD *)v59;
    v31 = v56;
    v33 = v57;
    v34 = v54;
    v32 = v55;
    goto LABEL_30;
  }
  __break(1u);
  result = swift_release(v59);
  __break(1u);
  return result;
}

uint64_t sub_1003E76A8(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, objc_class *a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t Style;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  int v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t result;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  _QWORD *v35;
  void *v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  v37 = a8;
  v39 = a6;
  v40 = a7;
  v35 = a2;
  v36 = a4;
  v41 = (void *)a3;
  v9 = sub_10001A630(&qword_100849088);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v34 = (char *)&v34 - v18;
  Style = type metadata accessor for REMAccountsListDataView.CachablePropertyFetchStyle(0, v17);
  v20 = *(_QWORD *)(Style - 8);
  v21 = __chkstk_darwin(Style);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMAccountsListDataView.FetchOptions.fetchReminderCounts.getter(v21);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v23, Style);
  if (v24 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.doNotFetch(_:))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
    v25 = 0;
    return v25 & 1;
  }
  if (v24 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.cachedOrStore(_:))
  {
    sub_1003E79A8(v40, (uint64_t)v11);
    v26 = sub_10001A630(&qword_100849090);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v11, 1, v26) != 1)
    {
      v30 = *(void **)&v11[*(int *)(v26 + 48)];
      v31 = v13;
      v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v33 = v34;
      v32(v34, v11, v12);
      (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(a1, v33, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a1, 0, 1, v12);
      sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      v25 = static NSObject.== infix(_:_:)(v30);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v12);
      return v25 & 1;
    }
    sub_10000882C((uint64_t)v11, &qword_100849088);
LABEL_7:
    v27 = v41;
    v25 = v38;
    v28 = v42;
    sub_1003E7D8C(v35, (uint64_t)v41, v36, v37, (uint64_t)v15);
    if (!v28)
    {
      sub_1003EAFB0(v27, v39, v40);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v15, v12);
      v25 = 1;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    return v25 & 1;
  }
  if (v24 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.store(_:))
    goto LABEL_7;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(Style, Style);
  __break(1u);
  return result;
}

uint64_t sub_1003E79A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];

  v4 = sub_10001A630(&qword_100849098);
  __chkstk_darwin(v4);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = _s5CacheVMa(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(ObjectType, a1);
  if (v13 >> 60 == 15)
  {
    if (qword_100837440 != -1)
      swift_once(&qword_100837440, sub_1003E64FC);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_100848F48);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "REMAccountsListDataView.Invocation no cache", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_10001A630(&qword_100849090);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
  else
  {
    v22 = v12;
    v23 = v13;
    v24 = type metadata accessor for PropertyListDecoder(0, v14);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = PropertyListDecoder.init()();
    v26 = sub_10009FC50(&qword_1008490A0, _s5CacheVMa, (uint64_t)&unk_1006BAB98);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, v22, v23, v7, v26);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    swift_release(v25);
    sub_1000A71B4(v22, v23);
    sub_1003F669C((uint64_t)v6, (uint64_t)v10);
    v27 = sub_10001A630(&qword_100849090);
    v28 = *(int *)(v27 + 48);
    v29 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a2, v10, v29);
    *(_QWORD *)(a2 + v28) = *(_QWORD *)&v10[*(int *)(v7 + 20)];
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 0, 1, v27);
  }
}

uint64_t sub_1003E7D8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, objc_class *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t PredicateType;
  void (*v73)(_QWORD *@<X8>);
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t Predicate;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  NSArray v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  Class v131;
  _QWORD *v132;
  Class v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  Class isa;
  uint64_t v151;
  _QWORD *v152;
  Class v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  uint8_t *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t result;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(id, uint64_t, __n128);
  char *v172;
  char *v173;
  uint64_t v174;
  id v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  id v193;
  id v194;
  __int128 v195;
  uint64_t i;
  void (*v197)(char *, uint64_t, __n128);
  uint64_t v198;
  char *v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  Class v216;
  char IsAll;
  void *v218;
  BOOL v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BOOL8 v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  __n128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t (*v239)(uint64_t, uint64_t, __n128);
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  _BOOL8 v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  unint64_t v252;
  void (*v253)(_QWORD *@<X8>);
  char *v254;
  unint64_t v255;
  __n128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __n128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __n128 v264;
  void (*v265)(_QWORD *@<X8>);
  uint64_t v266;
  id v267;
  id v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(char *, uint64_t);
  uint64_t v273;
  void (*v274)(_QWORD *@<X8>);
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  __n128 v283;
  void (*v284)(char *, uint64_t);
  uint64_t v285;
  __n128 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __n128 v290;
  unint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  int64_t v296;
  unint64_t v297;
  uint64_t v298;
  void (*v299)(_QWORD *@<X8>);
  char *v300;
  uint64_t v301;
  void (*v302)(char *, unint64_t, uint64_t);
  uint64_t v303;
  Class v304;
  id v305;
  uint64_t v306;
  void *v307;
  char *v308;
  unint64_t v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  _BOOL8 v315;
  uint64_t v316;
  unint64_t v317;
  char v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  id v322;
  int64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  __n128 v327;
  uint64_t v328;
  __n128 v329;
  unint64_t v330;
  unint64_t v331;
  int64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  Class v340;
  id v341;
  uint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  _BOOL8 v351;
  uint64_t v352;
  unint64_t v353;
  char v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  id v358;
  char *v359;
  uint64_t v360;
  char *v361;
  char *v362;
  char *v363;
  void (*v364)(char *, uint64_t);
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  _QWORD **v381;
  char *v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  id v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  char *v408;
  uint64_t v409;
  char *v410;
  char *v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void (*v416)(_QWORD *@<X8>);
  char *v417;
  char *v418;
  uint64_t v419;
  char *v420;
  char *v421;
  uint64_t v422;
  char *v423;
  id v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  char *v434;
  void (*v435)(_QWORD *@<X8>);
  uint64_t v436;
  uint64_t v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  uint64_t v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  id v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  int64_t v451;
  char *v452;
  void (*v453)(_QWORD *@<X8>);
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _QWORD v459[3];
  char v460[8];
  char v461;
  char v462;
  unint64_t v463;
  _QWORD *v464;
  char v465[8];
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;

  v395 = a2;
  v391 = a5;
  v9 = type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer(0);
  v455 = *(_QWORD *)(v9 - 8);
  v456 = v9;
  __chkstk_darwin(v9);
  v390 = (char *)&v384 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v389 = (char *)&v384 - v12;
  __chkstk_darwin(v13);
  v388 = (char *)&v384 - v14;
  __chkstk_darwin(v15);
  v387 = (char *)&v384 - v16;
  __chkstk_darwin(v17);
  v444 = (char *)&v384 - v18;
  __chkstk_darwin(v19);
  v426 = (char *)&v384 - v20;
  __chkstk_darwin(v21);
  v446 = (char *)&v384 - v22;
  __chkstk_darwin(v23);
  v428 = (char *)&v384 - v24;
  v25 = sub_10001A630(&qword_1008490B0);
  __chkstk_darwin(v25);
  v430 = (char *)&v384 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v429 = (uint64_t)&v384 - v28;
  __chkstk_darwin(v29);
  v434 = (char *)&v384 - v30;
  __chkstk_darwin(v31);
  v441 = (char *)&v384 - v32;
  v394 = type metadata accessor for REMFeatureFlags(0);
  v393 = *(_QWORD *)(v394 - 8);
  __chkstk_darwin(v394);
  v392 = (char *)&v384 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v422 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v422);
  v421 = (char *)&v384 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v423 = (char *)&v384 - v36;
  v449 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder(0);
  v451 = *(_QWORD *)(v449 - 8);
  __chkstk_darwin(v449);
  v438 = (char *)&v384 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v450 = (char *)&v384 - v39;
  v40 = type metadata accessor for UUID(0);
  v457 = *(_QWORD *)(v40 - 8);
  v458 = v40;
  __chkstk_darwin(v40);
  v443 = (char *)&v384 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v445 = (char *)&v384 - v43;
  __chkstk_darwin(v44);
  v425 = (uint64_t)&v384 - v45;
  __chkstk_darwin(v46);
  v442 = (uint64_t)&v384 - v47;
  __chkstk_darwin(v48);
  v452 = (char *)&v384 - v49;
  __chkstk_darwin(v50);
  v439 = (char *)&v384 - v51;
  v406 = type metadata accessor for Calendar.SearchDirection(0);
  v405 = *(_QWORD *)(v406 - 8);
  __chkstk_darwin(v406);
  v404 = (char *)&v384 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v416 = (void (*)(_QWORD *@<X8>))type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v415 = *((_QWORD *)v416 - 1);
  __chkstk_darwin(v416);
  v403 = (char *)&v384 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v414 = type metadata accessor for Calendar.MatchingPolicy(0);
  v413 = *(_QWORD *)(v414 - 8);
  __chkstk_darwin(v414);
  v402 = (char *)&v384 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v55);
  v397 = (char *)&v384 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10001A630(&qword_1008466E0);
  __chkstk_darwin(v57);
  v396 = (char *)&v384 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v400 = type metadata accessor for DateComponents(0);
  v399 = *(_QWORD *)(v400 - 8);
  __chkstk_darwin(v400);
  *(_QWORD *)&v412 = (char *)&v384 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v411 = (char *)type metadata accessor for Calendar(0);
  v409 = *((_QWORD *)v411 - 1);
  __chkstk_darwin(v411);
  v408 = (char *)&v384 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v61);
  v420 = (char *)&v384 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  v401 = (char *)&v384 - v64;
  v437 = type metadata accessor for Date(0);
  v419 = *(_QWORD *)(v437 - 8);
  __chkstk_darwin(v437);
  v410 = (char *)&v384 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  v398 = (char *)&v384 - v67;
  __chkstk_darwin(v68);
  v417 = (char *)&v384 - v69;
  __chkstk_darwin(v70);
  v418 = (char *)&v384 - v71;
  PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType(0);
  v73 = *(void (**)(_QWORD *@<X8>))(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  v440 = (char *)&v384 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = _s10PredicatesOMa(0);
  __chkstk_darwin(v75);
  v431 = (uint64_t)&v384 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v447 = a1;
  v448 = (uint64_t)a4;
  v77 = sub_10034D638(0, a1, a4);
  v78 = v5;
  v453 = v73;
  v386 = a3;
  v454 = (_QWORD *)PredicateType;
  if (v5)
  {
    v436 = 0;
    if (qword_100837440 == -1)
      goto LABEL_4;
    goto LABEL_222;
  }
  v266 = (uint64_t)sub_10058CE80(v77, a3);
  v436 = 0;
  swift_bridgeObjectRelease();
  while (2)
  {
    swift_storeEnumTagMultiPayload(v431, v75, 53);
    v88 = sub_10001A630(&qword_1008490B8);
    v89 = *((_QWORD *)v73 + 9);
    v90 = *((unsigned __int8 *)v73 + 80);
    v73 = (void (*)(_QWORD *@<X8>))v88;
    v91 = (v90 + 32) & ~v90;
    v92 = (_QWORD *)(v90 | 7);
    v93 = swift_allocObject(v88, v91 + 3 * v89, v90 | 7);
    *(_OWORD *)(v93 + 16) = xmmword_1006A3C20;
    Predicate = static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter(v93);
    v95 = static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter(Predicate);
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter(v95);
    v75 = sub_10011F14C(v93);
    swift_setDeallocating(v93);
    swift_arrayDestroy(v93 + v91, 3, PredicateType);
    swift_deallocClassInstance(v93, 32, 7);
    v469 = v75;
    if ((unint64_t)v266 >> 62)
      goto LABEL_213;
    v96 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
    v97 = v91 + v89;
    v98 = (void *)v436;
    v435 = (void (*)(_QWORD *@<X8>))v91;
    v433 = v92;
    v432 = v97;
    v424 = v73;
    if (v96)
    {
      v99 = swift_allocObject(v73, v97, v92);
      *(_OWORD *)(v99 + 16) = xmmword_1006A3C00;
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter(v99);
      sub_1002E8628(v99);
      swift_setDeallocating(v99);
      swift_arrayDestroy(v99 + v91, 1, PredicateType);
      swift_deallocClassInstance(v99, 32, 7);
      v75 = v469;
    }
    swift_bridgeObjectRetain(v266);
    v100 = v447;
    swift_bridgeObjectRetain(v75);
    v101 = v98;
    v103 = sub_1003F3568(v102, v266, v100);
    swift_bridgeObjectRelease();

    sub_1001A8790(v103);
    v466 = v104;
    v105 = sub_10001A630(&qword_1008490C0);
    v106 = sub_1000A5F84(&qword_1008490C8, &qword_1008490C0, (uint64_t)&protocol conformance descriptor for Set<A>);
    v107 = Sequence.mapToSet<A>(_:)(sub_1003EB440, 0, v105, &type metadata for String, v106, &protocol witness table for String);
    swift_bridgeObjectRelease();
    v468 = v107;
    v436 = v107;
    swift_bridgeObjectRetain(v107);
    sub_1001A879C(v103);
    v466 = v108;
    v109 = Sequence.mapToSet<A>(_:)(sub_1003EB440, 0, v105, &type metadata for String, v106, &protocol witness table for String);
    swift_bridgeObjectRelease();
    v467 = v109;
    swift_bridgeObjectRetain(v109);
    v110 = (void *)sub_1002AF2FC((uint64_t)_swiftEmptyArrayStorage);
    v111 = (uint64_t *)v100;
    v112 = sub_1003F3760(v110, v266, v111);
    v447 = v101;
    swift_bridgeObjectRelease();

    v113 = (uint64_t)v440;
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter(v114);
    LOBYTE(v107) = sub_1001B26B4(v113, v103);
    v115 = v454;
    (*((void (**)(uint64_t, _QWORD *))v453 + 1))(v113, v454);
    v116 = swift_allocObject(v424, v432, v433);
    *(_OWORD *)(v116 + 16) = xmmword_1006A3C00;
    v117 = (char *)v435 + v116;
    swift_bridgeObjectRetain(v103);
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter(v118);
    v119 = sub_10059FD5C(v116, v103);
    swift_setDeallocating(v116);
    swift_arrayDestroy(v117, 1, v115);
    swift_deallocClassInstance(v116, 32, 7);
    v427 = (uint64_t)v112;
    v453 = (void (*)(_QWORD *@<X8>))v119;
    if ((v107 & 1) != 0)
    {
      v120 = v436;
      swift_bridgeObjectRelease();
      sub_1002DB0E4((uint64_t *)&v466, 1953720684, 0xE400000000000000);
      swift_bridgeObjectRelease();
      if (v112[2])
      {
        sub_1002DB0E4((uint64_t *)&v466, 0x746E756F636361, 0xE700000000000000);
        swift_bridgeObjectRelease();
      }
      sub_10000D2C0();
      v122 = v121;
      v123 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v124 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v440 = (char *)v123;
      v125 = objc_msgSend((id)swift_getObjCClassFromMetadata(v123), "entity");
      objc_msgSend(v124, "setEntity:", v125);

      if (v448)
      {
        sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
        v126.super.isa = Array._bridgeToObjectiveC()().super.isa;
      }
      else
      {
        v126.super.isa = 0;
      }
      objc_msgSend(v124, "setAffectedStores:", v126.super.isa);

      objc_msgSend(v124, "setPredicate:", v122);
      objc_msgSend(v124, "setReturnsDistinctResults:", 0);
      v149 = sub_1001E8BAC(v120);
      swift_bridgeObjectRelease();
      sub_1001DFBD0((uint64_t)v149);
      swift_release(v149);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v124, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      swift_bridgeObjectRetain(v467);
      v152 = sub_1001E8BAC(v151);
      swift_bridgeObjectRelease();
      v153 = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v152);
      objc_msgSend(v124, "setRelationshipKeyPathsForPrefetching:", v153);

      if (qword_100837440 != -1)
        swift_once(&qword_100837440, sub_1003E64FC);
      v154 = type metadata accessor for Logger(0);
      sub_10001AAA8(v154, (uint64_t)qword_100848F48);
      swift_bridgeObjectRetain(v103);
      v156 = Logger.logObject.getter(v155);
      v157 = static os_log_type_t.default.getter(v156);
      if (os_log_type_enabled(v156, v157))
      {
        v158 = (uint8_t *)swift_slowAlloc(12, -1);
        v159 = (_QWORD *)swift_slowAlloc(32, -1);
        v407 = v111;
        v160 = v159;
        v466 = v159;
        *(_DWORD *)v158 = 136315138;
        v448 = (uint64_t)(v158 + 4);
        v161 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
        swift_bridgeObjectRetain(v103);
        v163 = Set.description.getter(v162, v454, v161);
        v165 = v164;
        swift_bridgeObjectRelease();
        v464 = (_QWORD *)sub_10001A820(v163, v165, (uint64_t *)&v466);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, v465);
        swift_bridgeObjectRelease_n(v103, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "Computing reminders count in every list by fetching reminders as an array of REMCDReminder {postFetchPredicateTypes: %s}", v158, 0xCu);
        swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
        v111 = v407;
        swift_slowDealloc(v160, -1, -1);
        swift_slowDealloc(v158, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v103, 2);
      }
      v89 = v457;
      v166 = v447;
      v167 = NSManagedObjectContext.fetch<A>(_:)(v124, v440);
      if (v166)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      v169 = v167;
      v407 = v111;
      v170 = (uint64_t)v453;
      swift_bridgeObjectRetain(v453);
      v171 = (void (*)(id, uint64_t, __n128))sub_1004E1940;
      v172 = &v461;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1002DB0E4((uint64_t *)&v466, 0x6564692E7473696CLL, 0xEF7265696669746ELL);
      swift_bridgeObjectRelease();
      if (v112[2])
      {
        sub_1002DB0E4((uint64_t *)&v466, 0xD000000000000012, 0x80000001006FBDE0);
        swift_bridgeObjectRelease();
      }
      sub_10000D2C0();
      v128 = (void *)v127;
      v124 = sub_100495248((Class)v448, v127);

      objc_msgSend(v124, "setReturnsDistinctResults:", 0);
      swift_bridgeObjectRetain(v468);
      v130 = sub_1001E8BAC(v129);
      swift_bridgeObjectRelease();
      sub_1001DFBD0((uint64_t)v130);
      swift_release(v130);
      v131 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v124, "setPropertiesToFetch:", v131, swift_bridgeObjectRelease().n128_f64[0]);

      v132 = sub_1001E8BAC(v109);
      swift_bridgeObjectRelease();
      v133 = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v132);
      objc_msgSend(v124, "setRelationshipKeyPathsForPrefetching:", v133);

      if (qword_100837440 != -1)
        swift_once(&qword_100837440, sub_1003E64FC);
      v134 = type metadata accessor for Logger(0);
      sub_10001AAA8(v134, (uint64_t)qword_100848F48);
      swift_bridgeObjectRetain(v103);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.default.getter(v136);
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v139 = (_QWORD *)swift_slowAlloc(32, -1);
        v407 = v111;
        v140 = v139;
        v466 = v139;
        *(_DWORD *)v138 = 136315138;
        v448 = (uint64_t)(v138 + 4);
        v141 = sub_10009FC50(&qword_100840EB0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
        swift_bridgeObjectRetain(v103);
        v143 = Set.description.getter(v142, v454, v141);
        v145 = v144;
        swift_bridgeObjectRelease();
        v464 = (_QWORD *)sub_10001A820(v143, v145, (uint64_t *)&v466);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v464, v465);
        swift_bridgeObjectRelease_n(v103, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Computing reminders count in every list by fetching reminders as dictionaries {postFetchPredicateTypes: %s}", v138, 0xCu);
        swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
        v111 = v407;
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v138, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v103, 2);
      }
      v89 = v457;
      v146 = v447;
      v147 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
      v148 = NSManagedObjectContext.fetch<A>(_:)(v124, v147);
      if (v146)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10001C744(v431, _s10PredicatesOMa);
      }
      v169 = v148;
      v407 = v111;
      v170 = (uint64_t)v453;
      swift_bridgeObjectRetain(v453);
      v171 = (void (*)(id, uint64_t, __n128))REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(dictionary:forEvaluatingAgainst:);
      v172 = v465;
    }
    v385 = sub_1003F2260(v169, v170, (uint64_t)v172, v171);
    v436 = 0;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n(v170, 2);
    v173 = v418;
    Date.init()(v174);
    v175 = objc_msgSend((id)objc_opt_self(NSCalendar), "currentCalendar");
    static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

    v176 = v396;
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v409 + 56))(v396, 1, 1, v411);
    v177 = type metadata accessor for TimeZone(0);
    v178 = v397;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 56))(v397, 1, 1, v177);
    LOBYTE(v383) = 1;
    LOBYTE(v381) = 1;
    LOBYTE(v379) = 1;
    LOBYTE(v378) = 1;
    LOBYTE(v377) = 1;
    LOBYTE(v376) = 1;
    LOBYTE(v375) = 1;
    LOBYTE(v374) = 0;
    LOBYTE(v373) = 0;
    LOBYTE(v372) = 0;
    LOBYTE(v371) = 1;
    v179 = v412;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v176, v178, 0, 1, 0, 1, 0, 1, 0, v371, 0, v372, 0, v373, 0, v374, 0, v375, 0,
      v376,
      0,
      v377,
      0,
      v378,
      0,
      v379,
      0,
      (_DWORD)v381,
      0,
      (_DWORD)v383);
    v180 = v402;
    (*(void (**)(char *, _QWORD, uint64_t))(v413 + 104))(v402, enum case for Calendar.MatchingPolicy.nextTime(_:), v414);
    v181 = v403;
    (*(void (**)(char *, _QWORD, void (*)(_QWORD *@<X8>)))(v415 + 104))(v403, enum case for Calendar.RepeatedTimePolicy.first(_:), v416);
    v182 = v405;
    v183 = v404;
    v184 = v406;
    (*(void (**)(char *, _QWORD, uint64_t))(v405 + 104))(v404, enum case for Calendar.SearchDirection.forward(_:), v406);
    v185 = (uint64_t)v401;
    v186 = v179;
    v187 = v408;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v173, v186, v180, v181, v183);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v183, v184);
    (*(void (**)(char *, void (*)(_QWORD *@<X8>)))(v415 + 8))(v181, v416);
    (*(void (**)(char *, uint64_t))(v413 + 8))(v180, v414);
    (*(void (**)(_QWORD, uint64_t))(v399 + 8))(v412, v400);
    (*(void (**)(char *, char *))(v409 + 8))(v187, v411);
    v188 = v419;
    v189 = v398;
    v190 = v437;
    (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v398, v173, v437);
    v413 = *(_QWORD *)(v188 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v413)(v185, 1, v190) == 1)
    {
      v404 = *(char **)(v188 + 32);
      ((void (*)(char *, char *, uint64_t))v404)(v417, v189, v190);
      sub_10000882C(v185, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v190);
      v404 = *(char **)(v188 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v404)(v417, v185, v190);
    }
    v78 = v449;
    v91 = (uint64_t)v450;
    PredicateType = (unint64_t)v423;
    v191 = v385;
    v424 = (id)objc_opt_self(REMList);
    v192 = objc_msgSend(v424, "siriFoundInAppsListID");
    v193 = objc_msgSend(v192, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v193);
    v194 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    LODWORD(v403) = objc_msgSend(v194, "showRemindersAsOverdue");

    v466 = _swiftEmptyDictionarySingleton;
    v464 = _swiftEmptyDictionarySingleton;
    v73 = *(void (**)(_QWORD *@<X8>))(v191 + 16);
    if (!v73)
    {
      swift_bridgeObjectRelease();
      v264 = swift_bridgeObjectRelease();
      v265 = 0;
      v433 = 0;
      v402 = 0;
      v409 = 0;
      v405 = 0;
      v432 = 0;
      v406 = 0;
      v414 = 0;
      v408 = 0;
      v415 = 0;
      v440 = (char *)_swiftEmptyDictionarySingleton;
      v454 = _swiftEmptyDictionarySingleton;
      PredicateType = (unint64_t)v434;
      goto LABEL_107;
    }
    v435 = 0;
    v416 = 0;
    v433 = 0;
    v402 = 0;
    v409 = 0;
    v405 = 0;
    v432 = 0;
    v406 = 0;
    v414 = 0;
    v408 = 0;
    v415 = 0;
    v75 = v191 + ((*(unsigned __int8 *)(v451 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v451 + 80));
    v448 = *(_QWORD *)(v451 + 72);
    v454 = *(_QWORD **)(v451 + 16);
    v92 = _swiftEmptyDictionarySingleton;
    *(_QWORD *)&v195 = 136446210;
    v412 = v195;
    v411 = (char *)&type metadata for Any + 8;
    v440 = (char *)_swiftEmptyDictionarySingleton;
    for (i = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v454)(v91, v75, v78);
          ;
          i = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v454)(v91, v75, v78))
    {
      REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.listIdentifier.getter(i);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v89 + 48))(PredicateType, 1, v458) == 1)
      {
        v453 = (void (*)(_QWORD *@<X8>))v75;
        v447 = v73;
        sub_10000882C(PredicateType, (uint64_t *)&unk_100839C80);
        if (qword_100837440 != -1)
          swift_once(&qword_100837440, sub_1003E64FC);
        v198 = type metadata accessor for Logger(0);
        sub_10001AAA8(v198, (uint64_t)qword_100848F48);
        v199 = v438;
        v200 = ((uint64_t (*)(char *, uint64_t, uint64_t))v454)(v438, v91, v78);
        v201 = Logger.logObject.getter(v200);
        v202 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v201, v202))
        {
          v203 = swift_slowAlloc(12, -1);
          v204 = swift_slowAlloc(32, -1);
          v463 = v204;
          *(_DWORD *)v203 = v412;
          v205 = v421;
          REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.identifier.getter();
          PredicateType = (unint64_t)v423;
          v206 = String.init<A>(describing:)(v205, v422);
          *(_QWORD *)(v203 + 4) = sub_10001A820(v206, v207, (uint64_t *)&v463);
          v208 = swift_bridgeObjectRelease();
          v197 = *(void (**)(char *, uint64_t, __n128))(v451 + 8);
          v197(v199, v449, v208);
          _os_log_impl((void *)&_mh_execute_header, v201, v202, "Reminder missing list identifier. Skipping {reminder.identifier: %{public}s}", (uint8_t *)v203, 0xCu);
          swift_arrayDestroy(v204, 1, v411);
          v209 = v204;
          v89 = v457;
          swift_slowDealloc(v209, -1, -1);
          v210 = v203;
          v78 = v449;
          swift_slowDealloc(v210, -1, -1);
        }
        else
        {
          v197 = *(void (**)(char *, uint64_t, __n128))(v451 + 8);
          ((void (*)(char *, uint64_t))v197)(v199, v78);
        }

        v91 = (uint64_t)v450;
        ((void (*)(char *, uint64_t))v197)(v450, v78);
        v73 = (void (*)(_QWORD *@<X8>))v447;
        goto LABEL_44;
      }
      v266 = (uint64_t)v452;
      v211 = v458;
      (*(void (**)(char *, unint64_t, uint64_t))(v89 + 32))(v452, PredicateType, v458);
      v212 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v266, v439, v211, v212) & 1) == 0)
        break;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v266, v458);
      if (__OFADD__(v433, 1))
        goto LABEL_206;
      v433 = (_QWORD *)((char *)v433 + 1);
      (*(void (**)(uint64_t, uint64_t))(v451 + 8))(v91, v78);
LABEL_45:
      v75 += v448;
      v73 = (void (*)(_QWORD *@<X8>))((char *)v73 - 1);
      if (!v73)
      {
        v454 = v92;
        swift_bridgeObjectRelease();
        v264 = swift_bridgeObjectRelease();
        PredicateType = (unint64_t)v434;
        v265 = v416;
        v73 = v435;
LABEL_107:
        v267 = objc_allocWithZone((Class)type metadata accessor for REMRemindersListDataView.AssignedInvocation(0, v264));
        v268 = objc_msgSend(v267, "initWithFetchResultTokenToDiffAgainst:", v395);
        v269 = v407;
        v270 = v436;
        v271 = sub_1005C79A8(v407, 0);
        v449 = v270;
        if (v270)
        {
          swift_bridgeObjectRelease();

          (*(void (**)(char *, uint64_t))(v89 + 8))(v439, v458);
          v272 = *(void (**)(char *, uint64_t))(v419 + 8);
          v273 = v437;
          v272(v417, v437);
          v272(v418, v273);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001C744(v431, _s10PredicatesOMa);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000A5C24((uint64_t)v73, 0);
          v274 = v265;
          return sub_1000A5C24((uint64_t)v274, 0);
        }
        v442 = v271;
        v447 = v268;
        v416 = v265;
        v275 = v393;
        v276 = v392;
        v277 = v394;
        v278 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v393 + 104))(v392, enum case for REMFeatureFlags.recentlyDeletedList(_:), v394);
        v279 = REMFeatureFlags.isEnabled.getter(v278);
        v280 = (*(uint64_t (**)(char *, uint64_t))(v275 + 8))(v276, v277);
        if ((v279 & 1) == 0)
        {
          v435 = v73;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v438 = (char *)_swiftEmptyDictionarySingleton;
          v78 = (uint64_t)v454;
          goto LABEL_113;
        }
        __chkstk_darwin(v280);
        LOWORD(v382) = 258;
        v383 = v269;
        v281 = sub_10001A630(&qword_10083DFA8);
        v282 = (_QWORD *)v449;
        NSManagedObjectContext.rem_performAndWait<A>(_:)(&v463, sub_100268FAC, &v380, v281);
        v92 = v282;
        if (v282)
        {

          v283 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v457 + 8))(v439, v458, v283);
          v284 = *(void (**)(char *, uint64_t))(v419 + 8);
          v285 = v437;
          v284(v417, v437);
          v284(v418, v285);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001C744(v431, _s10PredicatesOMa);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000A5C24((uint64_t)v73, 0);
          return sub_1000A5C24((uint64_t)v416, 0);
        }
        v215 = v463;
        v78 = (uint64_t)v454;
        v435 = v73;
        if (v463 >> 62)
          goto LABEL_229;
        v89 = v457;
        if (!*(_QWORD *)((v463 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_233;
        goto LABEL_202;
      }
    }
    v462 = 0;
    if (__OFADD__(v432, 1))
      goto LABEL_205;
    v453 = (void (*)(_QWORD *@<X8>))v75;
    ++v432;
    v78 = (uint64_t)v420;
    REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.displayDateDate.getter();
    v75 = v437;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v413)(v78, 1, v437) == 1)
    {
      v213 = sub_10000882C(v78, (uint64_t *)&unk_1008380D0);
      goto LABEL_69;
    }
    v266 = (uint64_t)v410;
    ((void (*)(char *, uint64_t, unint64_t))v404)(v410, v78, v75);
    if (__OFADD__(v415, 1))
    {
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      swift_once(&qword_100837440, sub_1003E64FC);
LABEL_4:
      v79 = type metadata accessor for Logger(0);
      sub_10001AAA8(v79, (uint64_t)qword_100848F48);
      swift_errorRetain(v78);
      v80 = swift_errorRetain(v78);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = (_QWORD *)swift_slowAlloc(32, -1);
        v466 = v84;
        *(_DWORD *)v83 = 136315138;
        swift_getErrorValue(v78, v460, v459);
        v85 = Error.rem_errorDescription.getter(v459[1], v459[2]);
        v469 = sub_10001A820(v85, v86, (uint64_t *)&v466);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v469, &v470);
        swift_bridgeObjectRelease();
        swift_errorRelease(v78);
        swift_errorRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "REMAccountsListDataView.Invocation fetchCounts() failed to fetch custom smart lists {error: %s}", v83, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        v87 = v84;
        v73 = v453;
        PredicateType = (unint64_t)v454;
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v83, -1, -1);
      }
      else
      {
        swift_errorRelease(v78);
        swift_errorRelease(v78);
      }

      swift_errorRelease(v78);
      v266 = (uint64_t)_swiftEmptyArrayStorage;
      continue;
    }
    break;
  }
  ++v415;
  v214 = static Date.< infix(_:_:)(v266, v417);
  v78 = (uint64_t)Date._bridgeToObjectiveC()().super.isa;
  v215 = v91;
  v216 = Date._bridgeToObjectiveC()().super.isa;
  IsAll = REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.displayDateIsAllDay.getter();
  v218 = (void *)objc_opt_self(REMReminderStorage);
  v75 = (unint64_t)objc_msgSend(v218, "isDate:overdueAtReferenceDate:allDay:showAllDayRemindersAsOverdue:", v78, v216, IsAll & 1, v403);

  v213 = (*(uint64_t (**)(uint64_t, uint64_t))(v419 + 8))(v266, v437);
  v462 = v75;
  if ((v214 & 1) == 0)
  {
    v89 = v457;
    v91 = (uint64_t)v450;
    if ((_DWORD)v75)
      goto LABEL_66;
    goto LABEL_69;
  }
  if (!__OFADD__(v409, 1))
  {
    ++v409;
    if ((_DWORD)v75)
    {
      v219 = __OFADD__(v402++, 1);
      v89 = v457;
      v91 = (uint64_t)v450;
      if (v219)
        goto LABEL_228;
LABEL_66:
      if (__OFADD__(v408, 1))
        goto LABEL_224;
      ++v408;
    }
    else
    {
      v89 = v457;
      v91 = (uint64_t)v450;
    }
LABEL_69:
    v215 = v91;
    if ((REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.flagged.getter(v213) & 1) != 0)
    {
      v220 = v452;
      if (__OFADD__(v414, 1))
        goto LABEL_218;
      ++v414;
      if (v462 == 1)
      {
        if (__OFADD__(v406, 1))
          goto LABEL_225;
        ++v406;
      }
    }
    else
    {
      v220 = v452;
    }
    v89 = *(_QWORD *)(v89 + 16);
    v221 = v442;
    ((void (*)(uint64_t, char *, uint64_t))v89)(v442, v220, v458);
    sub_1000A5C24((uint64_t)v435, 0);
    swift_isUniquelyReferenced_nonNull_native(v92);
    v91 = v222;
    v463 = (unint64_t)v92;
    v75 = sub_1002C65F8(v221);
    v224 = v92[2];
    v225 = (v223 & 1) == 0;
    v226 = v224 + v225;
    if (__OFADD__(v224, v225))
      goto LABEL_207;
    v78 = v223;
    if (v92[3] >= v226)
    {
      if ((v91 & 1) == 0)
        sub_1002D6344();
    }
    else
    {
      sub_1002CCB6C(v226, v91);
      v227 = sub_1002C65F8(v442);
      if ((v78 & 1) != (v228 & 1))
        goto LABEL_237;
      v75 = v227;
    }
    v92 = (_QWORD *)v463;
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      swift_bridgeObjectRetain(v92);
    }
    else
    {
      v92[(v75 >> 6) + 8] |= 1 << v75;
      v229 = v92[6] + *(_QWORD *)(v457 + 72) * v75;
      v230 = swift_bridgeObjectRetain(v92);
      ((void (*)(unint64_t, uint64_t, uint64_t, __n128))v89)(v229, v442, v458, v230);
      *(_QWORD *)(v92[7] + 8 * v75) = 0;
      v231 = v92[2];
      v219 = __OFADD__(v231, 1);
      v232 = v231 + 1;
      if (v219)
        goto LABEL_219;
      v92[2] = v232;
    }
    v233 = v92[7];
    v234 = swift_bridgeObjectRelease();
    v235 = *(_QWORD *)(v233 + 8 * v75);
    v219 = __OFADD__(v235, 1);
    v236 = v235 + 1;
    v78 = v449;
    if (v219)
      goto LABEL_208;
    *(_QWORD *)(v233 + 8 * v75) = v236;
    v237 = v458;
    v215 = *(_QWORD *)(v457 + 8);
    v238 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v215)(v442, v458, v234);
    if ((v462 & 1) != 0)
    {
      v239 = (uint64_t (*)(uint64_t, uint64_t, __n128))v215;
      v240 = v425;
      ((void (*)(uint64_t, char *, uint64_t))v89)(v425, v452, v237);
      sub_1000A5C24((uint64_t)v416, 0);
      v241 = (unint64_t)v440;
      swift_isUniquelyReferenced_nonNull_native(v440);
      v243 = v242;
      v463 = v241;
      v244 = sub_1002C65F8(v240);
      v246 = v241;
      v75 = v244;
      v247 = *(_QWORD *)(v246 + 16);
      v248 = (v245 & 1) == 0;
      v249 = v247 + v248;
      if (__OFADD__(v247, v248))
        goto LABEL_220;
      v78 = v245;
      if (*(_QWORD *)(v246 + 24) >= v249)
      {
        if ((v243 & 1) == 0)
          sub_1002D6344();
      }
      else
      {
        sub_1002CCB6C(v249, v243);
        v250 = sub_1002C65F8(v425);
        if ((v78 & 1) != (v251 & 1))
          goto LABEL_237;
        v75 = v250;
      }
      v91 = (uint64_t)v450;
      v215 = v463;
      swift_bridgeObjectRelease();
      if ((v78 & 1) != 0)
      {
        swift_bridgeObjectRetain(v215);
      }
      else
      {
        *(_QWORD *)(v215 + 8 * (v75 >> 6) + 64) |= 1 << v75;
        v255 = *(_QWORD *)(v215 + 48) + *(_QWORD *)(v457 + 72) * v75;
        v256 = swift_bridgeObjectRetain(v215);
        ((void (*)(unint64_t, uint64_t, uint64_t, __n128))v89)(v255, v425, v458, v256);
        *(_QWORD *)(*(_QWORD *)(v215 + 56) + 8 * v75) = 0;
        v257 = *(_QWORD *)(v215 + 16);
        v219 = __OFADD__(v257, 1);
        v258 = v257 + 1;
        if (v219)
          goto LABEL_226;
        v254 = (char *)v215;
        *(_QWORD *)(v215 + 16) = v258;
      }
      v259 = *((_QWORD *)v254 + 7);
      v440 = v254;
      v260 = swift_bridgeObjectRelease();
      v261 = *(_QWORD *)(v259 + 8 * v75);
      v219 = __OFADD__(v261, 1);
      v262 = v261 + 1;
      v89 = v457;
      v78 = v449;
      if (v219)
        goto LABEL_221;
      *(_QWORD *)(v259 + 8 * v75) = v262;
      v215 = (uint64_t)v239;
      v238 = v239(v425, v458, v260);
      if (v462 == 1)
      {
        if (__OFADD__(v405, 1))
          goto LABEL_227;
        v252 = PredicateType;
        v253 = v73;
        ++v405;
      }
      else
      {
        v252 = PredicateType;
        v253 = v73;
      }
      v416 = sub_1003EB540;
    }
    else
    {
      v252 = PredicateType;
      v253 = v73;
      v89 = v457;
      v91 = (uint64_t)v450;
    }
    __chkstk_darwin(v238);
    v380 = v91;
    v381 = &v466;
    v382 = &v462;
    v383 = (uint64_t *)&v464;
    v263 = v436;
    sub_1003F1ECC(v427, (void (*)(char *, uint64_t, __n128))sub_1003F66E0);
    v436 = v263;
    ((void (*)(char *, uint64_t))v215)(v452, v458);
    (*(void (**)(uint64_t, uint64_t))(v451 + 8))(v91, v78);
    v435 = sub_1003EB540;
    v73 = v253;
    PredicateType = v252;
LABEL_44:
    v75 = (unint64_t)v453;
    goto LABEL_45;
  }
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  if (v215 < 0)
    v368 = v215;
  else
    v368 = v215 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v215);
  v369 = _CocoaArrayWrapper.endIndex.getter(v368);
  swift_bridgeObjectRelease();
  v89 = v457;
  if (v369)
  {
LABEL_202:
    v366 = (char *)v386;
    v438 = (char *)sub_1003F3B38((uint64_t)_swiftEmptyDictionarySingleton, v215, v366);
    v449 = (uint64_t)v92;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_113;
  }
LABEL_233:
  v449 = (uint64_t)v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v438 = (char *)_swiftEmptyDictionarySingleton;
LABEL_113:
  v286 = swift_bridgeObjectRelease();
  v91 = 0;
  v287 = *(_QWORD *)(v78 + 64);
  v450 = (char *)(v78 + 64);
  v288 = 1 << *(_BYTE *)(v78 + 32);
  v289 = -1;
  if (v288 < 64)
    v289 = ~(-1 << v288);
  v266 = v289 & v287;
  v92 = _swiftEmptyDictionarySingleton;
  v451 = (unint64_t)(v288 + 63) >> 6;
  v448 = v451 - 1;
  v75 = (unint64_t)v441;
  while (2)
  {
    if (v266)
    {
      v291 = __clz(__rbit64(v266));
      v266 &= v266 - 1;
      v292 = v291 | (v91 << 6);
      goto LABEL_120;
    }
    v296 = v91 + 1;
    if (__OFADD__(v91, 1))
      goto LABEL_211;
    if (v296 >= v451)
    {
LABEL_129:
      v298 = sub_10001A630(&qword_1008490D0);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v298 - 8) + 56))(PredicateType, 1, 1, v298);
      v266 = 0;
      goto LABEL_130;
    }
    v297 = *(_QWORD *)&v450[8 * v296];
    if (!v297)
    {
      v91 += 2;
      if (v296 + 1 >= v451)
      {
        v91 = v296;
      }
      else
      {
        v297 = *(_QWORD *)&v450[8 * v91];
        if (v297)
        {
          ++v296;
          goto LABEL_124;
        }
        if (v296 + 2 < v451)
        {
          v297 = *(_QWORD *)&v450[8 * v296 + 16];
          if (v297)
          {
            v296 += 2;
            goto LABEL_124;
          }
          v323 = v296 + 3;
          if (v296 + 3 >= v451)
          {
            v91 = v296 + 2;
          }
          else
          {
            v297 = *(_QWORD *)&v450[8 * v323];
            if (v297)
            {
              v296 += 3;
              goto LABEL_124;
            }
            while (1)
            {
              v296 = v323 + 1;
              if (__OFADD__(v323, 1))
              {
                __break(1u);
                goto LABEL_235;
              }
              if (v296 >= v451)
                break;
              v297 = *(_QWORD *)&v450[8 * v296];
              ++v323;
              if (v297)
                goto LABEL_124;
            }
            v91 = v448;
          }
        }
      }
      goto LABEL_129;
    }
LABEL_124:
    v266 = (v297 - 1) & v297;
    v292 = __clz(__rbit64(v297)) + (v296 << 6);
    v91 = v296;
LABEL_120:
    v293 = v454;
    (*(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v89 + 16))(PredicateType, v454[6] + *(_QWORD *)(v89 + 72) * v292, v458, v286);
    v294 = v293[7];
    v295 = sub_10001A630(&qword_1008490D0);
    *(_QWORD *)(PredicateType + *(int *)(v295 + 48)) = *(_QWORD *)(v294 + 8 * v292);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v295 - 8) + 56))(PredicateType, 0, 1, v295);
    v75 = (unint64_t)v441;
LABEL_130:
    sub_1000A5CA8(PredicateType, v75, &qword_1008490B0);
    PredicateType = sub_10001A630(&qword_1008490D0);
    v299 = *(void (**)(_QWORD *@<X8>))(PredicateType - 8);
    v300 = (char *)*((_QWORD *)v299 + 6);
    if (((unsigned int (*)(unint64_t, uint64_t, unint64_t))v300)(v75, 1, PredicateType) != 1)
    {
      v301 = *(_QWORD *)(v75 + *(int *)(PredicateType + 48));
      v302 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 32);
      v303 = (uint64_t)v445;
      v302(v445, v75, v458);
      v304 = UUID._bridgeToObjectiveC()().super.isa;
      v305 = objc_msgSend(v424, "objectIDWithUUID:", v304);

      v307 = (void *)REMObjectID.codable.getter(v306);
      v308 = v440;
      if (*((_QWORD *)v440 + 2) && (v309 = sub_1002C65F8(v303), (v310 & 1) != 0))
        v311 = *(_QWORD *)(*((_QWORD *)v308 + 7) + 8 * v309);
      else
        v311 = 0;
      v75 = (unint64_t)v428;
      REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v301, v311);
      v73 = *(void (**)(_QWORD *@<X8>))(v455 + 32);
      ((void (*)(char *, unint64_t, uint64_t))v73)(v446, v75, v456);
      swift_isUniquelyReferenced_nonNull_native(v92);
      v89 = v312;
      v463 = (unint64_t)v92;
      PredicateType = sub_1002C6730((uint64_t)v307);
      v314 = v92[2];
      v315 = (v313 & 1) == 0;
      v316 = v314 + v315;
      if (__OFADD__(v314, v315))
      {
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        if (v266 < 0)
          v367 = v266;
        else
          v367 = v266 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v266);
        v96 = _CocoaArrayWrapper.endIndex.getter(v367);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      v75 = v313;
      if (v92[3] >= v316)
      {
        if ((v89 & 1) == 0)
          sub_1002D6330();
      }
      else
      {
        sub_1002CCB58(v316, v89);
        v317 = sub_1002C6730((uint64_t)v307);
        if ((v75 & 1) != (v318 & 1))
          goto LABEL_236;
        PredicateType = v317;
      }
      v89 = v457;
      v319 = (_QWORD *)v463;
      if ((v75 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v455 + 40))(*(_QWORD *)(v463 + 56) + *(_QWORD *)(v455 + 72) * PredicateType, v446, v456);
      }
      else
      {
        *(_QWORD *)(v463 + 8 * (PredicateType >> 6) + 64) |= 1 << PredicateType;
        *(_QWORD *)(v319[6] + 8 * PredicateType) = v307;
        ((void (*)(unint64_t, char *, uint64_t))v73)(v319[7] + *(_QWORD *)(v455 + 72) * PredicateType, v446, v456);
        v320 = v319[2];
        v219 = __OFADD__(v320, 1);
        v321 = v320 + 1;
        if (v219)
          goto LABEL_209;
        v319[2] = v321;
        v322 = v307;
      }
      v92 = (_QWORD *)v463;

      v290 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v89 + 8))(v445, v458, v290);
      PredicateType = (unint64_t)v434;
      v75 = (unint64_t)v441;
      continue;
    }
    break;
  }
  swift_release(v454);
  v324 = v466[8];
  v448 = (uint64_t)(v466 + 8);
  v325 = 1 << *((_BYTE *)v466 + 32);
  v326 = -1;
  if (v325 < 64)
    v326 = ~(-1 << v325);
  v266 = v326 & v324;
  v450 = (char *)((unint64_t)(v325 + 63) >> 6);
  v446 = v450 - 1;
  v451 = (int64_t)v466;
  v327 = swift_bridgeObjectRetain(v466);
  v328 = 0;
  v91 = (uint64_t)v430;
  v452 = v300;
  v453 = v299;
  while (2)
  {
    if (v266)
    {
      v330 = __clz(__rbit64(v266));
      v266 &= v266 - 1;
      v454 = (_QWORD *)v328;
      v331 = v330 | (v328 << 6);
      goto LABEL_163;
    }
    v334 = v328 + 1;
    if (__OFADD__(v328, 1))
      goto LABEL_212;
    if (v334 >= (uint64_t)v450)
      goto LABEL_175;
    v335 = *(_QWORD *)(v448 + 8 * v334);
    if (v335)
    {
LABEL_167:
      v266 = (v335 - 1) & v335;
      v331 = __clz(__rbit64(v335)) + (v334 << 6);
      v454 = (_QWORD *)v334;
LABEL_163:
      v332 = v451;
      (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v89 + 16))(v91, *(_QWORD *)(v451 + 48) + *(_QWORD *)(v89 + 72) * v331, v458, v327);
      v333 = 0;
      *(_QWORD *)(v91 + *(int *)(PredicateType + 48)) = *(_QWORD *)(*(_QWORD *)(v332 + 56) + 8 * v331);
LABEL_176:
      (*((void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v299 + 7))(v91, v333, 1, PredicateType);
      v336 = v429;
      sub_1000A5CA8(v91, v429, &qword_1008490B0);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v300)(v336, 1, PredicateType) == 1)
      {
        swift_release(v451);
        v359 = v387;
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v415, v408);
        v360 = v89;
        v361 = v388;
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v414, v406);
        v362 = v389;
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v432, v405);
        v363 = v390;
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v409, v402);
        REMAccountsListDataView.ReminderCounts.init(scheduled:flagged:all:today:siriFoundInAppsRemindersCount:assignedToMeRemindersCount:recentlyDeletedRemindersCountByAccountObjectID:byObjectID:)(v359, v361, v362, v363, v433, v442, v438, v92);

        (*(void (**)(char *, uint64_t))(v360 + 8))(v439, v458);
        v364 = *(void (**)(char *, uint64_t))(v419 + 8);
        v365 = v437;
        v364(v417, v437);
        v364(v418, v365);
        sub_10001C744(v431, _s10PredicatesOMa);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000A5C24((uint64_t)v435, 0);
        v274 = v416;
        return sub_1000A5C24((uint64_t)v274, 0);
      }
      v337 = *(_QWORD *)(v336 + *(int *)(PredicateType + 48));
      v338 = (uint64_t)v443;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v443, v336, v458);
      v339 = (void *)objc_opt_self(REMSmartList);
      v340 = UUID._bridgeToObjectiveC()().super.isa;
      v341 = objc_msgSend(v339, "objectIDWithUUID:", v340);

      v89 = REMObjectID.codable.getter(v342);
      v343 = v464;
      if (v464[2] && (v344 = sub_1002C65F8(v338), (v345 & 1) != 0))
        v346 = *(_QWORD *)(v343[7] + 8 * v344);
      else
        v346 = 0;
      v75 = (unint64_t)v426;
      REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)(v337, v346);
      v73 = *(void (**)(_QWORD *@<X8>))(v455 + 32);
      ((void (*)(char *, unint64_t, uint64_t))v73)(v444, v75, v456);
      swift_isUniquelyReferenced_nonNull_native(v92);
      v91 = v347;
      v463 = (unint64_t)v92;
      v349 = sub_1002C6730(v89);
      v350 = v92[2];
      v351 = (v348 & 1) == 0;
      v352 = v350 + v351;
      if (__OFADD__(v350, v351))
        goto LABEL_204;
      v75 = v348;
      if (v92[3] >= v352)
      {
        if ((v91 & 1) == 0)
          sub_1002D6330();
      }
      else
      {
        sub_1002CCB58(v352, v91);
        v353 = sub_1002C6730(v89);
        if ((v75 & 1) != (v354 & 1))
          goto LABEL_236;
        v349 = v353;
      }
      v91 = (uint64_t)v430;
      v355 = (_QWORD *)v463;
      if ((v75 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v455 + 40))(*(_QWORD *)(v463 + 56) + *(_QWORD *)(v455 + 72) * v349, v444, v456);
      }
      else
      {
        *(_QWORD *)(v463 + 8 * (v349 >> 6) + 64) |= 1 << v349;
        *(_QWORD *)(v355[6] + 8 * v349) = v89;
        ((void (*)(unint64_t, char *, uint64_t))v73)(v355[7] + *(_QWORD *)(v455 + 72) * v349, v444, v456);
        v356 = v355[2];
        v219 = __OFADD__(v356, 1);
        v357 = v356 + 1;
        if (v219)
          goto LABEL_210;
        v355[2] = v357;
        v358 = (id)v89;
      }
      v92 = (_QWORD *)v463;

      v329 = swift_bridgeObjectRelease();
      v89 = v457;
      (*(void (**)(char *, uint64_t, __n128))(v457 + 8))(v443, v458, v329);
      v300 = v452;
      v299 = v453;
      v328 = (uint64_t)v454;
      continue;
    }
    break;
  }
  v328 += 2;
  if (v334 + 1 >= (uint64_t)v450)
  {
    v266 = 0;
    v333 = 1;
    v454 = (_QWORD *)v334;
    goto LABEL_176;
  }
  v335 = *(_QWORD *)(v448 + 8 * v328);
  if (v335)
  {
LABEL_170:
    v334 = v328;
    goto LABEL_167;
  }
  if (v334 + 2 >= (uint64_t)v450)
  {
LABEL_175:
    v454 = (_QWORD *)v328;
    v266 = 0;
    v333 = 1;
    goto LABEL_176;
  }
  v335 = *(_QWORD *)(v448 + 8 * (v334 + 2));
  if (v335)
  {
    v334 += 2;
    goto LABEL_167;
  }
  v328 = v334 + 3;
  if (v334 + 3 >= (uint64_t)v450)
  {
    v266 = 0;
    v333 = 1;
    v454 = (_QWORD *)(v334 + 2);
    goto LABEL_176;
  }
  v335 = *(_QWORD *)(v448 + 8 * v328);
  if (v335)
    goto LABEL_170;
  while (1)
  {
    v334 = v328 + 1;
    if (__OFADD__(v328, 1))
      break;
    if (v334 >= (uint64_t)v450)
    {
      v266 = 0;
      v333 = 1;
      v454 = v446;
      goto LABEL_176;
    }
    v335 = *(_QWORD *)(v448 + 8 * v334);
    ++v328;
    if (v335)
      goto LABEL_167;
  }
LABEL_235:
  __break(1u);
LABEL_236:
  v370 = type metadata accessor for REMObjectID_Codable(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v370);
  __break(1u);
LABEL_237:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v458);
  __break(1u);
  return result;
}

uint64_t sub_1003EAFB0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t ObjectType;
  void (*v22)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v4 = v3;
  v7 = _s5CacheVMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v4, v10);
  *(_QWORD *)&v9[*(int *)(v7 + 20)] = a1;
  v11 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = PropertyListEncoder.init()(a1);
  v13 = sub_10009FC50(&qword_1008490A8, _s5CacheVMa, (uint64_t)&unk_1006BAB70);
  v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v9, v7, v13);
  v16 = v15;
  if (qword_100837440 != -1)
    swift_once(&qword_100837440, sub_1003E64FC);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_100848F48);
  v18 = sub_1000A70E4(v14, v16);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_1000A71C8(v14, v16);

  ObjectType = swift_getObjectType();
  v22 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 16);
  sub_1000A70E4(v14, v16);
  v22(v14, v16, ObjectType, a3);
  swift_release(v12);
  sub_1000A71C8(v14, v16);
  return sub_10001C744((uint64_t)v9, _s5CacheVMa);
}

uint64_t sub_1003EB440@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003EB454(a1, a2);
}

uint64_t sub_1003EB454@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a1;
  result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(a1);
  if (v5)
  {
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v6._object = (void *)0x80000001006F8C10;
    v6._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v6);
    v8 = v3;
    v7 = sub_10001A630((uint64_t *)&unk_10083AEC0);
    _print_unlocked<A, B>(_:_:)(&v8, &v9, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v10, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

void sub_1003EB540(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1003EB548(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, __n128);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  _BYTE *v64;
  uint64_t v65;

  v64 = a5;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v63 = (char *)&v60 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v60 - v18;
  v65 = a2;
  v20 = sub_10001A630(&qword_100846700);
  v21 = sub_1000A5F84(&qword_100846708, &qword_100846700, (uint64_t)&protocol conformance descriptor for [A]);
  result = Sequence<>.evaluate(with:)(a3, v20, v21);
  if ((result & 1) == 0)
    return result;
  v60 = a1;
  v61 = a6;
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v62(v19, a1, v11);
  swift_isUniquelyReferenced_nonNull_native(*a4);
  v24 = v23;
  v65 = *a4;
  v25 = v65;
  *a4 = 0x8000000000000000;
  v27 = sub_1002C65F8((uint64_t)v19);
  v28 = *(_QWORD *)(v25 + 16);
  v29 = (v26 & 1) == 0;
  v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v20) = v26;
  if (*(_QWORD *)(v25 + 24) >= v30)
  {
    if ((v24 & 1) == 0)
      goto LABEL_23;
  }
  else
  {
    sub_1002CCB6C(v30, v24);
    v25 = v65;
    v31 = sub_1002C65F8((uint64_t)v19);
    if ((v20 & 1) != (v32 & 1))
      goto LABEL_27;
    v27 = v31;
  }
  while (1)
  {
    *a4 = v25;
    swift_bridgeObjectRelease();
    v33 = (_QWORD *)*a4;
    v34 = swift_bridgeObjectRetain(*a4);
    if ((v20 & 1) == 0)
    {
      v35 = (uint64_t)v63;
      ((void (*)(char *, char *, uint64_t, __n128))v62)(v63, v19, v11, v34);
      sub_10028F07C(v27, v35, 0, v33);
    }
    v36 = v33[7];
    v37 = swift_bridgeObjectRelease();
    v38 = *(_QWORD *)(v36 + 8 * v27);
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (!v39)
      break;
LABEL_22:
    __break(1u);
LABEL_23:
    sub_1002D6344();
    v25 = v65;
  }
  *(_QWORD *)(v36 + 8 * v27) = v40;
  v41 = *(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8);
  result = v41(v19, v11, v37);
  v42 = v61;
  if ((*v64 & 1) != 0)
  {
    v62(v14, v60, v11);
    swift_isUniquelyReferenced_nonNull_native(*v42);
    v44 = v43;
    v65 = *v42;
    v45 = v65;
    *v42 = 0x8000000000000000;
    v47 = sub_1002C65F8((uint64_t)v14);
    v48 = *(_QWORD *)(v45 + 16);
    v49 = (v46 & 1) == 0;
    v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
      goto LABEL_25;
    }
    LOBYTE(v20) = v46;
    if (*(_QWORD *)(v45 + 24) >= v50)
    {
      if ((v44 & 1) == 0)
        goto LABEL_26;
      goto LABEL_16;
    }
    sub_1002CCB6C(v50, v44);
    v45 = v65;
    v51 = sub_1002C65F8((uint64_t)v14);
    if ((v20 & 1) == (v52 & 1))
    {
      v47 = v51;
      while (1)
      {
LABEL_16:
        *v42 = v45;
        swift_bridgeObjectRelease();
        v53 = (_QWORD *)*v42;
        v54 = swift_bridgeObjectRetain(*v42);
        if ((v20 & 1) == 0)
        {
          v55 = (uint64_t)v63;
          ((void (*)(char *, char *, uint64_t, __n128))v62)(v63, v14, v11, v54);
          sub_10028F07C(v47, v55, 0, v53);
        }
        v56 = v53[7];
        v57 = swift_bridgeObjectRelease();
        v58 = *(_QWORD *)(v56 + 8 * v47);
        v39 = __OFADD__(v58, 1);
        v59 = v58 + 1;
        if (!v39)
          break;
LABEL_25:
        __break(1u);
LABEL_26:
        sub_1002D6344();
        v45 = v65;
      }
      *(_QWORD *)(v56 + 8 * v47) = v59;
      return v41(v14, v11, v57);
    }
LABEL_27:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
  }
  return result;
}

void sub_1003EB8B0(uint64_t *a1, void **a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  __n128 v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64[8];
  uint64_t v65;

  v60 = a3;
  v52 = a1;
  v53 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v54 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630(&qword_100839AA0);
  v6 = __chkstk_darwin(v5);
  v57 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v6);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630(&qword_1008490E0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v58 = *(_QWORD *)(v19 - 8);
  v59 = v19;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a2;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v12 + 104))(v14, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v11, v20);
  v24 = v61;
  static REMRemindersListDataView.fetchRecentlyDeleted(store:accountID:deletedDaysFromNow:countCompleted:remindersPrefetch:diffingAgainst:)(v60, v23, 30, 0, v14, 0);
  v61 = v24;
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (qword_100837440 != -1)
      swift_once(&qword_100837440, sub_1003E64FC);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_100848F48);
    v26 = v61;
    swift_errorRetain(v61);
    v27 = swift_errorRetain(v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v65 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_getErrorValue(v26, v64, v63);
      v32 = Error.rem_errorDescription.getter(v63[1], v63[2]);
      v62 = sub_10001A820(v32, v33, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
      swift_bridgeObjectRelease();
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to fetch recently deleted reminders count {error: %s}", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease(v26);
    }
    else
    {
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      swift_errorRelease(v26);

    }
  }
  else
  {
    v50 = v23;
    v60 = v22;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    REMRemindersListDataView.Result.model.getter(v15);
    v34 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v35 = (uint64_t)v57;
    REMRemindersListDataView.FlatModel.remindersCount.getter(v34);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v56);
    v37 = v58;
    v36 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v35, 1, v59) == 1)
    {
      sub_10000882C(v35, &qword_100839AA0);
    }
    else
    {
      v38 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v60, v35, v36);
      v39 = objc_msgSend(v50, "uuid");
      v40 = (uint64_t)v54;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

      v41 = REMRemindersListDataView.CountByCompleted.completed.getter();
      v43 = REMRemindersListDataView.CountByCompleted.incomplete.getter(v42);
      v44 = __OFADD__(v41, v43);
      v45 = v41 + v43;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        v46 = v52;
        swift_isUniquelyReferenced_nonNull_native(*v52);
        v65 = *v46;
        *v46 = 0x8000000000000000;
        sub_10028C2B8(v45, v40, v47);
        *v46 = v65;
        v48 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, __n128))(v51 + 8))(v40, v53, v48);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
      }
    }
  }
}

void sub_1003EBDB0(void *a1, void *a2, void *a3, void *a4, void *a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;

  sub_1003F6764((uint64_t)a1, (uint64_t)a4, a5);
  if (!v6)
  {
    v14 = v12;
    v15 = v13;
    v21 = a2;
    v22 = v13;
    v16 = a4;
    v17 = a5;
    swift_bridgeObjectRetain(a6);
    v18 = a3;
    v19 = a1;
    v20 = sub_1003F3220(v14, (uint64_t)v18, (uint64_t)v19, v15, (uint64_t)v16, v17, a6);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    REMAccountsListDataView.Model.Account.init(account:children:)(v21, v20);

  }
}

void sub_1003EBF00(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, unint64_t a6@<X6>, _QWORD *a7@<X7>, unint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  NSString v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  _QWORD *v62;

  v58 = a7;
  v60 = a6;
  v14 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v16 = __chkstk_darwin(v14).n128_u64[0];
  v18 = (unint64_t *)((char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 16);
  if ((v20 & 0x8000000000000000) != 0)
  {
    *a8 = v20 & 0x7FFFFFFFFFFFFFFFLL;
    v36 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
    v37 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(a8, v36, v37);
    v38 = (id)(v20 & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  v55 = v19;
  v56 = a8;
  if ((objc_msgSend((id)v20, "isGroup", v16) & 1) == 0)
  {
    v39 = (id)v20;
    if (!objc_msgSend(v39, "isGroup"))
    {
      v43 = v56;
      *v56 = (unint64_t)v39;
      v44 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
      v45 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
      (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
      return;
    }
    v40 = (void *)objc_opt_self(REMError);
    v41 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v40, "internalErrorWithDebugDescription:", v41);

    swift_willThrow(v42);
    goto LABEL_33;
  }
  v21 = objc_msgSend((id)v20, "remObjectID");
  v22 = v61;
  v23 = (uint64_t)sub_1003F2434(v21, a2, a3, a4, a5, v60);
  v24 = v22;

  if (v22)
  {
LABEL_33:
    *v58 = v24;
    return;
  }
  v61 = 0;
  if ((unint64_t)v23 >> 62)
    goto LABEL_25;
  v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = (uint64_t)v56;
  if (!v25)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    v28 = _swiftEmptyArrayStorage;
LABEL_31:
    v53 = v61;
    sub_1003ED5C0((uint64_t)v28, v26);
    v24 = v53;
    if (!v53)
    {
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  while (1)
  {
    v62 = _swiftEmptyArrayStorage;
    sub_1001C23B4(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
      break;
    v27 = 0;
    v28 = v62;
    v60 = v23 & 0xC000000000000001;
    HIDWORD(v54) = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
    v57 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
    v59 = v23;
    while (v25 != v27)
    {
      if (v60)
      {
        v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v23);
        v30 = *(_QWORD *)(v29 + 16);
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_14;
      }
      else
      {
        v29 = *(_QWORD *)(v23 + 8 * v27 + 32);
        swift_retain();
        v30 = *(_QWORD *)(v29 + 16);
        if ((v30 & 0x8000000000000000) != 0)
        {
LABEL_14:
          v32 = (void *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
          *v18 = v30 & 0x7FFFFFFFFFFFFFFFLL;
          (*(void (**)(unint64_t *, _QWORD, uint64_t))(v15 + 104))(v18, HIDWORD(v54), v14);
          v33 = v32;
          goto LABEL_15;
        }
      }
      v31 = (id)v30;
      if ((objc_msgSend(v31, "isGroup") & 1) != 0)
      {
        v46 = (void *)objc_opt_self(REMError);
        v47 = String._bridgeToObjectiveC()();
        v48 = objc_msgSend(v46, "internalErrorWithDebugDescription:", v47);

        swift_willThrow(v49);
        swift_bridgeObjectRelease();
        swift_release(v28);
        v50 = v29;
        v24 = v48;
        swift_release(v50);

        goto LABEL_33;
      }
      *v18 = (unint64_t)v31;
      (*(void (**)(unint64_t *, _QWORD, uint64_t))(v15 + 104))(v18, v57, v14);
LABEL_15:
      swift_release(v29);
      v62 = v28;
      v35 = v28[2];
      v34 = v28[3];
      if (v35 >= v34 >> 1)
      {
        sub_1001C23B4(v34 > 1, v35 + 1, 1);
        v28 = v62;
      }
      ++v27;
      v28[2] = v35 + 1;
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(v15 + 32))((unint64_t)v28+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v35, v18, v14);
      v23 = v59;
      if (v25 == v27)
      {
        swift_bridgeObjectRelease();
        v26 = (uint64_t)v56;
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_25:
    if (v23 < 0)
      v51 = v23;
    else
      v51 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v52 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease();
    v26 = (uint64_t)v56;
    if (v52)
    {
      swift_bridgeObjectRetain(v23);
      v25 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
      if (v25)
        continue;
    }
    goto LABEL_30;
  }
  __break(1u);
}

id sub_1003EC3AC(unint64_t a1)
{
  void *v1;
  unint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 v66;
  _QWORD *v67;

  result = objc_msgSend(v1, "updatedProperties");
  if (!result)
    return result;
  v4 = result;
  v5 = sub_1000151B0(0, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
  v6 = sub_1003F6608();
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  v60 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (v7 < 0)
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
    if (v9)
      goto LABEL_7;
LABEL_13:
    swift_bridgeObjectRelease();
    v14 = _swiftEmptyArrayStorage;
LABEL_31:
    v41 = a1;
    if (a1 >> 62)
      goto LABEL_47;
    v42 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v43 = _swiftEmptyArrayStorage;
      if (!v42)
        break;
      v64 = _swiftEmptyArrayStorage;
      v41 = sub_1001C1B0C(0, v42 & ~(v42 >> 63), 0);
      if (v42 < 0)
        goto LABEL_52;
      v44 = 0;
      v43 = v64;
      v45 = a1;
      while (v42 != v44)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v45);
          v2 = v46;
        }
        else
        {
          v2 = *(_QWORD *)(v45 + 8 * v44 + 32);
          v46 = swift_retain();
        }
        v47 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v46);
        if (!v48)
          goto LABEL_54;
        v49 = v47;
        v50 = v48;
        v41 = swift_release(v2);
        v64 = v43;
        v2 = v43[2];
        v51 = v43[3];
        if (v2 >= v51 >> 1)
        {
          v41 = sub_1001C1B0C(v51 > 1, v2 + 1, 1);
          v43 = v64;
        }
        ++v44;
        v43[2] = v2 + 1;
        v52 = &v43[2 * v2];
        v52[4] = v49;
        v52[5] = v50;
        v45 = a1;
        if (v42 == v44)
          goto LABEL_44;
      }
      __break(1u);
LABEL_47:
      if (v41 < 0)
        v56 = v41;
      else
        v56 = v41 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v41);
      v42 = _CocoaArrayWrapper.endIndex.getter(v56);
      swift_bridgeObjectRelease();
    }
LABEL_44:
    v53 = sub_10011EE40((uint64_t)v43);
    swift_bridgeObjectRelease();
    v54 = sub_1003F171C((uint64_t)v14, v53, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1003F18A8);
    swift_bridgeObjectRelease();
    v55 = *(_QWORD *)(v54 + 16);
    swift_release(v54);
    return (id)(v55 != 0);
  }
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
    goto LABEL_13;
LABEL_7:
  v67 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v9 & ~(v9 >> 63), 0);
  if (v60)
  {
    if (v7 < 0)
      v10 = v7;
    else
      v10 = v7 & 0xFFFFFFFFFFFFFF8;
    v11 = (_QWORD *)__CocoaSet.startIndex.getter(v10);
    v13 = 1;
  }
  else
  {
    v11 = (_QWORD *)sub_100364E8C(v7);
    v13 = v15 & 1;
  }
  v64 = v11;
  v65 = v12;
  v66 = v13;
  if ((v9 & 0x8000000000000000) == 0)
  {
    v16 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v7 < 0)
      v16 = v7;
    v59 = v16;
    do
    {
      while (1)
      {
        v22 = v64;
        v2 = v65;
        v23 = v66;
        sub_1003648E8((uint64_t)v64, v65, v66, v7);
        v25 = v24;
        v26 = objc_msgSend(v24, "name");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v30 = v67;
        swift_isUniquelyReferenced_nonNull_native(v67);
        if ((v31 & 1) == 0)
        {
          sub_1001C1B0C(0, v30[2] + 1, 1);
          v30 = v67;
        }
        v33 = v30[2];
        v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          sub_1001C1B0C(v32 > 1, v33 + 1, 1);
          v30 = v67;
        }
        v30[2] = v33 + 1;
        v34 = &v30[2 * v33];
        v34[4] = v27;
        v34[5] = v29;
        if (v60)
          break;
        v17 = (_QWORD *)sub_10036456C(v22, v2, v23, v7);
        v19 = v18;
        v21 = v20;
        sub_1000E515C((uint64_t)v22, v2, v23);
        v64 = v17;
        v65 = v19;
        v66 = v21 & 1;
        if (!--v9)
          goto LABEL_30;
      }
      if ((v23 & 1) == 0)
        goto LABEL_53;
      v35 = __CocoaSet.Index.handleBitPattern.getter(v22, v2);
      if (v35)
      {
        swift_isUniquelyReferenced_nonNull_native(v35);
        v37 = v36;
      }
      else
      {
        v37 = 1;
      }
      v38 = sub_10001A630(&qword_100849080);
      v39 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v62, v38);
      __CocoaSet.formIndex(after:isUnique:)(v40, v37, v59);
      v39(&v62, 0);
      --v9;
    }
    while (v9);
LABEL_30:
    sub_1000E515C((uint64_t)v64, v65, v66);
    swift_bridgeObjectRelease();
    v14 = v67;
    goto LABEL_31;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v57._object = (void *)0x80000001006F8C10;
  v57._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v57);
  v67 = (_QWORD *)v2;
  v58 = sub_10001A630(&qword_10083FCA0);
  _print_unlocked<A, B>(_:_:)(&v67, &v62, v58, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v62, v63, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

void sub_1003EC88C(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  void (*v25)(unint64_t, void **, uint64_t);
  void **v26;
  uint64_t v27;
  int v28;
  void *v29;
  unint64_t v30;
  id v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  int v46;
  void *v47;
  id v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  char v54;
  unint64_t v55;
  __n128 v56;
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  int v62;
  void **v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  void **v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  void **v80;
  void **v81;
  void (*v82)(void **, unint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v3 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v84 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (void **)&v57[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for REMAccountsListDataView.Model.Group(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  v7 = __chkstk_darwin(v6);
  v64 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v80 = (void **)&v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v81 = (void **)&v57[-v13];
  __chkstk_darwin(v14);
  v63 = (void **)&v57[-v15];
  __chkstk_darwin(v16);
  v73 = (void **)&v57[-v17];
  v18 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v74 = (void **)&v57[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_1003ECF80();
  v72 = *(_QWORD *)(v21 + 16);
  if (!v72)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return;
  }
  v22 = 0;
  v69 = v21 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v68 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
  v62 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
  v58 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
  v79 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
  v76 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
  v77 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
  v78 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
  v85 = v9;
  v67 = v18;
  v71 = v19;
  v23 = v74;
  v59 = v1;
  v61 = a1;
  v70 = v21;
  while (v22 < *(_QWORD *)(v21 + 16))
  {
    v27 = *(_QWORD *)(v19 + 72);
    v75 = v22;
    (*(void (**)(void **, unint64_t, unint64_t))(v19 + 16))(v23, v69 + v27 * v22, v18);
    v28 = (*(uint64_t (**)(void **, unint64_t))(v19 + 88))(v23, v18);
    if (v28 == v68)
    {
      (*(void (**)(void **, unint64_t))(v19 + 96))(v23, v18);
      v29 = *v23;
      *v73 = *v23;
      (*(void (**)(void))(v10 + 104))();
      v30 = *a1;
      v31 = v29;
      swift_isUniquelyReferenced_nonNull_native(v30);
      if ((v32 & 1) == 0)
        v30 = sub_1002C84A0(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
      v34 = *(_QWORD *)(v30 + 16);
      v33 = *(_QWORD *)(v30 + 24);
      if (v34 >= v33 >> 1)
        v30 = sub_1002C84A0(v33 > 1, v34 + 1, 1, v30);
      *(_QWORD *)(v30 + 16) = v34 + 1;
      v24 = v30
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + *(_QWORD *)(v10 + 72) * v34;
      v25 = *(void (**)(unint64_t, void **, uint64_t))(v10 + 32);
      v26 = v73;
LABEL_4:
      v25(v24, v26, v85);

      *a1 = v30;
      v18 = v67;
      goto LABEL_5;
    }
    if (v28 == v62)
    {
      (*(void (**)(void **, unint64_t))(v19 + 96))(v23, v18);
      v35 = *v23;
      *v63 = *v23;
      (*(void (**)(void))(v10 + 104))();
      v30 = *a1;
      v31 = v35;
      swift_isUniquelyReferenced_nonNull_native(v30);
      if ((v36 & 1) == 0)
        v30 = sub_1002C84A0(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
      v38 = *(_QWORD *)(v30 + 16);
      v37 = *(_QWORD *)(v30 + 24);
      if (v38 >= v37 >> 1)
        v30 = sub_1002C84A0(v37 > 1, v38 + 1, 1, v30);
      *(_QWORD *)(v30 + 16) = v38 + 1;
      v24 = v30
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + *(_QWORD *)(v10 + 72) * v38;
      v25 = *(void (**)(unint64_t, void **, uint64_t))(v10 + 32);
      v26 = v63;
      goto LABEL_4;
    }
    if (v28 != v58)
      goto LABEL_41;
    (*(void (**)(void **, unint64_t))(v19 + 96))(v23, v18);
    (*(void (**)(_BYTE *, void **, uint64_t))(v65 + 32))(v64, v23, v66);
    v39 = sub_1003ED260();
    v40 = *(_QWORD *)(v39 + 16);
    v41 = v84;
    if (v40)
    {
      v18 = *v61;
      v42 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      v60 = v39;
      v43 = v39 + v42;
      v44 = *(_QWORD *)(v84 + 72);
      v82 = *(void (**)(void **, unint64_t, uint64_t))(v84 + 16);
      v83 = v44;
      v82(v5, v39 + v42, v3);
      while (1)
      {
        v46 = (*(uint64_t (**)(void **, uint64_t))(v41 + 88))(v5, v3);
        if (v46 == v79)
        {
          (*(void (**)(void **, uint64_t))(v41 + 96))(v5, v3);
          v47 = *v5;
          *v81 = *v5;
          (*(void (**)(void))(v10 + 104))();
          v48 = v47;
          swift_isUniquelyReferenced_nonNull_native(v18);
          if ((v49 & 1) == 0)
            v18 = sub_1002C84A0(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
          v51 = *(_QWORD *)(v18 + 16);
          v50 = *(_QWORD *)(v18 + 24);
          v52 = v51 + 1;
          if (v51 >= v50 >> 1)
            v18 = sub_1002C84A0(v50 > 1, v51 + 1, 1, v18);
          v45 = v81;
        }
        else
        {
          if (v46 != v76)
            goto LABEL_40;
          (*(void (**)(void **, uint64_t))(v41 + 96))(v5, v3);
          v53 = *v5;
          *v80 = *v5;
          (*(void (**)(void))(v10 + 104))();
          v48 = v53;
          swift_isUniquelyReferenced_nonNull_native(v18);
          if ((v54 & 1) == 0)
            v18 = sub_1002C84A0(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
          v51 = *(_QWORD *)(v18 + 16);
          v55 = *(_QWORD *)(v18 + 24);
          v52 = v51 + 1;
          if (v51 >= v55 >> 1)
            v18 = sub_1002C84A0(v55 > 1, v51 + 1, 1, v18);
          v45 = v80;
        }
        *(_QWORD *)(v18 + 16) = v52;
        (*(void (**)(unint64_t, void **, uint64_t))(v10 + 32))(v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v51, v45, v85);

        v41 = v84;
        v43 += v83;
        if (!--v40)
          break;
        v82(v5, v43, v3);
      }
      v56 = swift_bridgeObjectRelease();
      a1 = v61;
      *v61 = v18;
      v18 = v67;
    }
    else
    {
      v56 = swift_bridgeObjectRelease();
      a1 = v61;
    }
    (*(void (**)(_BYTE *, uint64_t, __n128))(v65 + 8))(v64, v66, v56);
LABEL_5:
    v19 = v71;
    v23 = v74;
    v22 = v75 + 1;
    v21 = v70;
    if (v75 + 1 == v72)
      goto LABEL_38;
  }
  __break(1u);
LABEL_40:
  _diagnoseUnexpectedEnumCase<A>(type:)(v3, v3);
  __break(1u);
LABEL_41:
  _diagnoseUnexpectedEnumCase<A>(type:)(v18, v18);
  __break(1u);
}

uint64_t sub_1003ECF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char *v17;
  int v18;
  id v19;
  unsigned int v20;
  id v21;
  unsigned __int8 v22;
  void (*v23)(char *, char *, uint64_t);
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;

  v0 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (id *)((char *)&v30 - v5);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v30 - v9;
  v10 = REMAccountsListDataView.Model.Account.children.getter(v8);
  v11 = v10;
  v12 = _swiftEmptyArrayStorage;
  v38 = _swiftEmptyArrayStorage;
  v36 = *(_QWORD *)(v10 + 16);
  if (!v36)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  v13 = 0;
  v35 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
  v32 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
  v31 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
  v33 = v10;
  v34 = v3;
  while (v13 < *(_QWORD *)(v11 + 16))
  {
    v14 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v15 = *(_QWORD *)(v1 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    v17 = v37;
    v16(v37, v11 + v14 + v15 * v13, v0);
    v16((char *)v6, (unint64_t)v17, v0);
    v18 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v6, v0);
    if (v18 == v35)
    {
      (*(void (**)(id *, uint64_t))(v1 + 96))(v6, v0);
      v19 = *v6;
      v20 = objc_msgSend(*v6, "isPinned");

      if (v20)
        goto LABEL_14;
    }
    else
    {
      if (v18 != v32)
      {
        if (v18 != v31)
          goto LABEL_22;
        (*(void (**)(id *, uint64_t))(v1 + 8))(v6, v0);
LABEL_14:
        v23 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
        v23(v3, v37, v0);
        v24 = v38;
        swift_isUniquelyReferenced_nonNull_native(v38);
        if ((v25 & 1) == 0)
        {
          sub_1001C2388(0, v24[2] + 1, 1);
          v24 = v38;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          sub_1001C2388(v26 > 1, v27 + 1, 1);
          v24 = v38;
        }
        v24[2] = v27 + 1;
        v28 = (unint64_t)v24 + v14 + v27 * v15;
        v3 = v34;
        v23((char *)v28, v34, v0);
        v38 = v24;
        v11 = v33;
        goto LABEL_4;
      }
      (*(void (**)(id *, uint64_t))(v1 + 96))(v6, v0);
      v21 = *v6;
      v22 = objc_msgSend(*v6, "isPinned");

      if ((v22 & 1) != 0)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v37, v0);
LABEL_4:
    if (v36 == ++v13)
    {
      v12 = v38;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v0, v0);
  __break(1u);
  return result;
}

uint64_t sub_1003ED260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(id *, unint64_t, uint64_t);
  _BYTE *v17;
  int v18;
  id v19;
  unsigned int v20;
  id v21;
  unsigned __int8 v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;

  v0 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v6 = (id *)&v30[-v5];
  __chkstk_darwin(v7);
  v36 = &v30[-v8];
  v10 = REMAccountsListDataView.Model.Group.lists.getter(v9);
  v11 = v10;
  v12 = _swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(v10 + 16);
  if (!v35)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  v13 = 0;
  v34 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
  v31 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
  v32 = v10;
  v33 = v3;
  while (v13 < *(_QWORD *)(v11 + 16))
  {
    v14 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v15 = *(_QWORD *)(v1 + 72);
    v16 = *(void (**)(id *, unint64_t, uint64_t))(v1 + 16);
    v17 = v36;
    v16((id *)v36, v11 + v14 + v15 * v13, v0);
    v16(v6, (unint64_t)v17, v0);
    v18 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v6, v0);
    if (v18 == v34)
    {
      (*(void (**)(id *, uint64_t))(v1 + 96))(v6, v0);
      v19 = *v6;
      v20 = objc_msgSend(*v6, "isPinned");

      if (v20)
        goto LABEL_11;
    }
    else
    {
      if (v18 != v31)
        goto LABEL_19;
      (*(void (**)(id *, uint64_t))(v1 + 96))(v6, v0);
      v21 = *v6;
      v22 = objc_msgSend(*v6, "isPinned");

      if ((v22 & 1) != 0)
      {
LABEL_11:
        v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 32);
        v23(v3, v36, v0);
        v24 = v37;
        swift_isUniquelyReferenced_nonNull_native(v37);
        if ((v25 & 1) == 0)
        {
          sub_1001C23B4(0, v24[2] + 1, 1);
          v24 = v37;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          sub_1001C23B4(v26 > 1, v27 + 1, 1);
          v24 = v37;
        }
        v24[2] = v27 + 1;
        v28 = (unint64_t)v24 + v14 + v27 * v15;
        v3 = v33;
        v23((_BYTE *)v28, v33, v0);
        v37 = v24;
        v11 = v32;
        goto LABEL_4;
      }
    }
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v36, v0);
LABEL_4:
    if (v35 == ++v13)
    {
      v12 = v37;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v0, v0);
  __break(1u);
  return result;
}

void sub_1003ED510(unint64_t *a1, __n128 a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7[2];

  v3 = *(_QWORD *)(type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, a2) - 8);
  v4 = *a1;
  swift_isUniquelyReferenced_nonNull_native(*a1);
  if ((v5 & 1) == 0)
    v4 = sub_1001CEBF0(v4);
  v6 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v7[1] = v6;
  sub_1003EE074(v7);
  *a1 = v4;
}

void sub_1003ED5C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  uint64_t v14;

  v4 = *(_QWORD *)(v2 + 16);
  if ((v4 & 0x8000000000000000) != 0)
  {
    v9 = (void *)objc_opt_self(REMError);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "internalErrorWithDebugDescription:", v10);

    swift_willThrow(v11);
  }
  else
  {
    v6 = (id)v4;
    if ((objc_msgSend(v6, "isGroup") & 1) != 0)
    {
      swift_bridgeObjectRetain(a1);
      REMAccountsListDataView.Model.Group.init(list:lists:)(v6, a1);
      v7 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
      v8 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(a2, v7, v8);
    }
    else
    {
      v12 = (void *)objc_opt_self(REMError);
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "internalErrorWithDebugDescription:", v13);

      swift_willThrow(v14);
    }
  }
}

uint64_t sub_1003ED724()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1003ED74C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656B6F74;
  else
    return 0x7265646E696D6572;
}

uint64_t sub_1003ED790@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003F7648(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003ED7B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003F7604();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003ED7DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003F7604();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003ED804@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  NSString v29;
  uint64_t v30;
  _QWORD *v31;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  _QWORD v44[2];
  char v45;

  v39 = a2;
  v3 = sub_10001A630(&qword_100849050);
  __chkstk_darwin(v3);
  v42 = (void (**)(uint64_t, char *, uint64_t))((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v5 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_1008491A8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10000A388(a1, v13);
  v14 = sub_1003F7604();
  v41 = v11;
  v15 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s5CacheV10CodingKeysON, &_s5CacheV10CodingKeysON, v14, v13, v12);
  if (!v15)
  {
    v38 = v7;
    v43 = a1;
    v16 = v9;
    LOBYTE(v44[0]) = 0;
    v17 = sub_10009FC50(&qword_1008491B8, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.ReminderCounts, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.ReminderCounts);
    v18 = v41;
    v19 = (char *)v42;
    v20 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)((char *)v42, v40, v44, v8, v40, v17);
    v21 = v8;
    v22 = v5;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v20);
    v23 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
    v23((uint64_t)v38, v19, v20);
    v45 = 1;
    v24 = sub_1000EABB4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, &type metadata for Data, &v45, v21, &type metadata for Data, v24);
    v25 = v18;
    v36 = v23;
    v26 = v44[0];
    v27 = (_QWORD *)v44[1];
    sub_1000151B0(0, &qword_1008491C0, REMFetchResultToken_ptr);
    v37 = v26;
    v42 = v27;
    v33 = sub_100579FD4();
    sub_1000A71C8(v37, (unint64_t)v42);
    v34 = v16;
    if (v33)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v21);
      v35 = v39;
      v36(v39, v38, v20);
      *(_QWORD *)(v35 + *(int *)(_s5CacheVMa(0) + 20)) = v33;
      v31 = v43;
      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v38, v20);
    v28 = (void *)objc_opt_self(REMError);
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "internalErrorWithDebugDescription:", v29);

    swift_willThrow(v30);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v21);
    a1 = v43;
  }
  v31 = a1;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
}

uint64_t sub_1003EDBB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25[2];

  v3 = v1;
  v5 = sub_10001A630(&qword_1008491C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_1003F7604();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s5CacheV10CodingKeysON, &_s5CacheV10CodingKeysON, v11, v9, v10);
  LOBYTE(v25[0]) = 0;
  v12 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v13 = sub_10009FC50(&qword_1008491D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.ReminderCounts, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.ReminderCounts);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v25, v5, v12, v13);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = *(void **)(v3 + *(int *)(_s5CacheVMa(0) + 20));
  v25[0] = 0;
  v16 = objc_msgSend(v15, "dataRepresentationWithError:", v25);
  v17 = v25[0];
  if (!v16)
  {
    v22 = v17;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v23);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v18 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  v25[0] = v18;
  v25[1] = v20;
  HIBYTE(v24) = 1;
  v21 = sub_1000EAC40();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, (char *)&v24 + 7, v5, &type metadata for Data, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_1000A71C8((uint64_t)v18, (unint64_t)v20);
}

uint64_t sub_1003EDDC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003ED804(a1, a2);
}

uint64_t sub_1003EDDD4(_QWORD *a1)
{
  return sub_1003EDBB0(a1);
}

uint64_t sub_1003EDDE8()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "accountsListCategorizedCountsCache");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1003EDE4C(uint64_t a1, unint64_t a2)
{
  void *v2;
  Class isa;

  if (a2 >> 60 == 15)
  {
    isa = 0;
    objc_msgSend(v2, "setAccountsListCategorizedCountsCache:", 0);
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71B4(a1, a2);
    objc_msgSend(v2, "setAccountsListCategorizedCountsCache:", isa);
  }

}

uint64_t _s19PolymorphicListItemCMa()
{
  return objc_opt_self(_TtCE7reminddCC19ReminderKitInternal23REMAccountsListDataView10InvocationP33_F1336D37D702B2C1BEEF72784365A11019PolymorphicListItem);
}

_QWORD *_s19PolymorphicListItemC5ModelOwCP(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void _s19PolymorphicListItemC5ModelOwxx(_QWORD *a1)
{

}

uint64_t *_s19PolymorphicListItemC5ModelOwca(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  v4 = *a1;
  *a1 = *a2;
  v5 = (void *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
  v6 = v3;

  return a1;
}

uint64_t *_s19PolymorphicListItemC5ModelOwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s19PolymorphicListItemC5ModelOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s19PolymorphicListItemC5ModelOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1003EE034(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *sub_1003EE040(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1003EE050(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa()
{
  return &_s19PolymorphicListItemC5ModelON;
}

void sub_1003EE074(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::Int v85;
  Swift::Int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  Swift::Int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  char *v102;
  uint64_t v103;
  id *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  void *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  int v129;
  void **v130;
  void *v131;
  id v132;
  void *v133;
  uint64_t v134;
  void **v135;
  void *v136;
  id v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  void (*v144)(char *, uint64_t);
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t);
  id *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  void *v160;
  uint64_t *v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  int v167;
  void (*v168)(char *, uint64_t, uint64_t);
  char *v169;
  uint64_t v170;
  int v171;
  id *v172;
  id v173;
  id v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id *v179;
  id v180;
  id v181;
  void *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  void (*v187)(char *, uint64_t);
  char *v188;
  uint64_t v189;
  void (*v190)(char *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  Swift::Int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t, char *);
  char *v200;
  uint64_t v201;
  unsigned int (*v202)(uint64_t, uint64_t, uint64_t);
  Swift::Int v203;
  _QWORD *v204;
  void (*v205)(char *, unint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  Swift::Int v209;
  char *v210;
  void (*v211)(char *, uint64_t, unint64_t);
  void **v212;
  void **v213;
  uint64_t (*v214)(void **, unint64_t);
  int v215;
  void (*v216)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v217;
  id v218;
  uint64_t v219;
  void *v220;
  id v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int (*v224)(uint64_t, uint64_t, uint64_t);
  void (*v225)(char *, unint64_t);
  void (*v226)(char *, uint64_t, uint64_t);
  id *v227;
  int v228;
  uint64_t v229;
  id *v230;
  id v231;
  id v232;
  void *v233;
  char *v234;
  id *v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char v243;
  void (*v244)(char *, uint64_t);
  char *v245;
  void (*v246)(char *, unint64_t);
  uint64_t v247;
  Swift::Int v248;
  char *v249;
  void (*v250)(char *, Swift::Int, unint64_t);
  char v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  BOOL v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  char v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  BOOL v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  int64_t v305;
  uint64_t v306;
  char v307;
  unint64_t *v308;
  unint64_t v309;
  _QWORD *v310;
  char *v311;
  char *v312;
  Swift::Int v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  id *v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  Swift::Int v330;
  char *v331;
  char *v332;
  id *v333;
  uint64_t v334;
  char *v335;
  Swift::Int v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  unint64_t v344;
  char *v345;
  uint64_t v346;
  int v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  id *v351;
  uint64_t v352;
  _BYTE v353[4];
  int v354;
  void **v355;
  char *v356;
  uint64_t v357;
  Swift::Int v358;
  char *v359;
  unsigned int (*v360)(uint64_t, uint64_t, uint64_t);
  int v361;
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t (*v365)(id *, uint64_t);
  void (*v366)(char *, uint64_t, uint64_t);
  void (*v367)(id *, uint64_t);
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  char v372;
  char *v373;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v310 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v310 - v6;
  __chkstk_darwin(v8);
  v349 = (uint64_t)&v310 - v9;
  __chkstk_darwin(v10);
  v12 = (unint64_t)&v310 - v11;
  __chkstk_darwin(v13);
  v345 = (char *)&v310 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v310 - v16;
  __chkstk_darwin(v18);
  v320 = (char *)&v310 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v310 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v310 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v310 - v27;
  __chkstk_darwin(v29);
  v324 = (char *)&v310 - v30;
  __chkstk_darwin(v31);
  v334 = (uint64_t)&v310 - v32;
  __chkstk_darwin(v33);
  v312 = (char *)&v310 - v34;
  __chkstk_darwin(v35);
  v341 = (char *)&v310 - v36;
  __chkstk_darwin(v37);
  v343 = (char *)&v310 - v38;
  __chkstk_darwin(v39);
  v316 = (char *)&v310 - v40;
  __chkstk_darwin(v41);
  v315 = (char *)&v310 - v42;
  __chkstk_darwin(v43);
  v322 = (uint64_t)&v310 - v44;
  v369 = type metadata accessor for Date(0);
  v350 = *(_QWORD *)(v369 - 8);
  __chkstk_darwin(v369);
  v348 = (char *)&v310 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v356 = (char *)&v310 - v47;
  __chkstk_darwin(v48);
  v325 = (char *)&v310 - v49;
  __chkstk_darwin(v50);
  v328 = (char *)&v310 - v51;
  __chkstk_darwin(v52);
  v314 = (char *)&v310 - v53;
  v55 = __chkstk_darwin(v54);
  v319 = (char *)&v310 - v56;
  v352 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, v55);
  v362 = *(_QWORD *)(v352 - 8);
  __chkstk_darwin(v352);
  v332 = (char *)&v310 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v364 = (char *)&v310 - v59;
  __chkstk_darwin(v60);
  v62 = (id *)((char *)&v310 - v61);
  __chkstk_darwin(v63);
  v355 = (void **)((char *)&v310 - v64);
  __chkstk_darwin(v65);
  v373 = (char *)&v310 - v66;
  __chkstk_darwin(v67);
  v368 = (char *)&v310 - v68;
  __chkstk_darwin(v69);
  v329 = (char *)&v310 - v70;
  __chkstk_darwin(v71);
  v333 = (id *)((char *)&v310 - v72);
  __chkstk_darwin(v73);
  v342 = (char *)&v310 - v74;
  __chkstk_darwin(v75);
  v340 = (char *)&v310 - v76;
  __chkstk_darwin(v77);
  v317 = (char *)&v310 - v78;
  __chkstk_darwin(v79);
  v318 = (id *)((char *)&v310 - v80);
  __chkstk_darwin(v81);
  v326 = (char *)&v310 - v82;
  __chkstk_darwin(v83);
  v323 = (char *)&v310 - v84;
  v371 = a1;
  v85 = a1[1];
  v86 = _minimumMergeRunLength(_:)(v85);
  if (v86 >= v85)
  {
    if ((v85 & 0x8000000000000000) == 0)
    {
      if (v85)
        sub_1003EFE04(0, v85, 1, v371);
      return;
    }
    goto LABEL_237;
  }
  if (v85 >= 0)
    v87 = v85;
  else
    v87 = v85 + 1;
  if (v85 < -1)
    goto LABEL_247;
  v351 = v62;
  v363 = v17;
  v335 = v25;
  v313 = v86;
  v339 = v4;
  v338 = v7;
  if (v85 < 2)
  {
    v92 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v362 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v362 + 80));
    if (v85 != 1)
    {
      v97 = _swiftEmptyArrayStorage[2];
      v94 = (char *)_swiftEmptyArrayStorage;
      v301 = _swiftEmptyArrayStorage;
      if (v97 < 2)
      {
LABEL_214:
        swift_bridgeObjectRelease();
        v301[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
LABEL_201:
      v302 = *v371;
      while (1)
      {
        v303 = v97 - 2;
        if (v97 < 2)
          goto LABEL_232;
        if (!v302)
          goto LABEL_244;
        v304 = v94;
        v12 = *(_QWORD *)&v94[16 * v303 + 32];
        v305 = *(_QWORD *)&v94[16 * v97 + 24];
        v306 = v346;
        sub_1003F06A0(v302 + *(_QWORD *)(v362 + 72) * v12, v302 + *(_QWORD *)(v362 + 72) * *(_QWORD *)&v94[16 * v97 + 16], v302 + *(_QWORD *)(v362 + 72) * v305, (unint64_t)v92);
        if (v306)
          goto LABEL_199;
        if (v305 < (uint64_t)v12)
          goto LABEL_233;
        v346 = 0;
        swift_isUniquelyReferenced_nonNull_native(v304);
        if ((v307 & 1) == 0)
          v304 = sub_1001D52E4((uint64_t)v304);
        if (v303 >= *((_QWORD *)v304 + 2))
          goto LABEL_234;
        v308 = (unint64_t *)&v304[16 * v303 + 32];
        *v308 = v12;
        v308[1] = v305;
        v309 = *((_QWORD *)v304 + 2);
        if (v97 > v309)
          goto LABEL_235;
        v12 = v309 - 1;
        memmove(&v304[16 * v97 + 16], &v304[16 * v97 + 32], 16 * (v309 - v97));
        v94 = v304;
        *((_QWORD *)v304 + 2) = v309 - 1;
        v97 = v309 - 1;
        if (v309 <= 2)
          goto LABEL_214;
      }
    }
    v310 = _swiftEmptyArrayStorage;
    v91 = (unint64_t)v92;
  }
  else
  {
    v88 = v87 >> 1;
    v89 = static Array._allocateBufferUninitialized(minimumCapacity:)(v87 >> 1, v352);
    *(_QWORD *)(v89 + 16) = v88;
    v90 = (*(unsigned __int8 *)(v362 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v362 + 80);
    v310 = (_QWORD *)v89;
    v91 = v89 + v90;
  }
  v93 = 0;
  v361 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
  v354 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
  v347 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
  v94 = (char *)_swiftEmptyArrayStorage;
  v344 = v12;
  v311 = v22;
  v321 = v28;
  v12 = (unint64_t)v341;
  v95 = (uint64_t)v343;
  v96 = v369;
  v337 = (char *)v91;
  while (2)
  {
    v358 = v85;
    v331 = v94;
    v336 = v93;
    if (v93 + 1 >= v85)
    {
      v109 = v362;
      v108 = (uint64_t)v363;
      v110 = (char *)v93++;
      goto LABEL_101;
    }
    v98 = *v371;
    v99 = v362;
    v100 = *(_QWORD *)(v362 + 72);
    v330 = v93 + 1;
    v101 = *(void (**)(char *, uint64_t, uint64_t))(v362 + 16);
    v102 = v323;
    v103 = v352;
    v101(v323, v98 + v100 * (v93 + 1), v352);
    v327 = v98;
    v370 = v100;
    v101(v326, v98 + v100 * v93, v103);
    v104 = v318;
    v366 = v101;
    v101((char *)v318, (uint64_t)v102, v103);
    v365 = *(uint64_t (**)(id *, uint64_t))(v99 + 88);
    v105 = v365(v104, v103);
    if (v105 == v361)
    {
      (*(void (**)(id *, uint64_t))(v99 + 8))(v104, v103);
      v106 = v350;
      v107 = v322;
      v96 = v369;
      v359 = *(char **)(v350 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v322, 1, 1, v369);
      v108 = (uint64_t)v363;
    }
    else
    {
      v107 = v322;
      if (v105 == v354)
      {
        (*(void (**)(id *, uint64_t))(v362 + 96))(v104, v352);
        v111 = *v104;
        v112 = objc_msgSend(*v104, "pinnedDate");
        if (v112)
        {
          v113 = v112;
          v114 = (uint64_t)v315;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v112);

          v115 = *(char **)(v350 + 56);
          v116 = (char *)v114;
          v117 = 0;
        }
        else
        {

          v115 = *(char **)(v350 + 56);
          v114 = (uint64_t)v315;
          v116 = v315;
          v117 = 1;
        }
        v359 = v115;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v115)(v116, v117, 1, v369);
        v108 = (uint64_t)v363;
        v107 = v322;
        sub_1000A5CA8(v114, v322, (uint64_t *)&unk_1008380D0);
        v96 = v369;
      }
      else
      {
        v118 = (uint64_t)v316;
        if (v105 != v347)
          goto LABEL_246;
        (*(void (**)(id *, uint64_t))(v362 + 96))(v104, v352);
        v119 = *v104;
        v120 = objc_msgSend(*v104, "pinnedDate");
        if (v120)
        {
          v121 = v120;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v120);

          v122 = *(char **)(v350 + 56);
          v123 = v118;
          v124 = 0;
        }
        else
        {

          v122 = *(char **)(v350 + 56);
          v123 = v118;
          v124 = 1;
        }
        v96 = v369;
        v359 = v122;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v122)(v123, v124, 1, v369);
        v108 = (uint64_t)v363;
        sub_1000A5CA8(v118, v107, (uint64_t *)&unk_1008380D0);
      }
      v106 = v350;
    }
    v360 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
    if (v360(v107, 1, v96) == 1)
    {
      sub_10000882C(v107, (uint64_t *)&unk_1008380D0);
      LODWORD(v357) = 1;
    }
    else
    {
      v125 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 32);
      v125(v319, v107, v96);
      v126 = v96;
      v127 = v317;
      v128 = v352;
      v366(v317, (uint64_t)v326, v352);
      v129 = v365((id *)v127, v128);
      if (v129 == v361)
      {
        (*(void (**)(char *, uint64_t))(v362 + 8))(v127, v128);
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v95, 1, 1, v126);
        v96 = v126;
      }
      else
      {
        if (v129 == v354)
        {
          v130 = (void **)v317;
          (*(void (**)(char *, uint64_t))(v362 + 96))(v317, v352);
          v131 = *v130;
          v132 = objc_msgSend(v131, "pinnedDate");
          if (v132)
          {
            v133 = v132;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v132);

            v134 = 0;
          }
          else
          {
            v134 = 1;
          }

          v96 = v369;
          ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v359)(v12, v134, 1, v369);
          v141 = v12;
        }
        else
        {
          v135 = (void **)v317;
          if (v129 != v347)
            goto LABEL_246;
          (*(void (**)(char *, uint64_t))(v362 + 96))(v317, v352);
          v136 = *v135;
          v137 = objc_msgSend(v136, "pinnedDate");
          if (v137)
          {
            v138 = v137;
            v139 = v312;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v137);

            v140 = 0;
          }
          else
          {
            v140 = 1;
            v139 = v312;
          }

          v96 = v369;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v139, v140, 1, v369);
          v141 = (uint64_t)v139;
        }
        sub_1000A5CA8(v141, v95, (uint64_t *)&unk_1008380D0);
        v108 = (uint64_t)v363;
      }
      if (v360(v95, 1, v96) == 1)
      {
        (*(void (**)(char *, uint64_t))(v350 + 8))(v319, v96);
        sub_10000882C(v95, (uint64_t *)&unk_1008380D0);
        LODWORD(v357) = 0;
      }
      else
      {
        v142 = v314;
        v125(v314, v95, v96);
        v143 = v319;
        LODWORD(v357) = static Date.< infix(_:_:)(v319, v142);
        v144 = *(void (**)(char *, uint64_t))(v350 + 8);
        v144(v142, v96);
        v144(v143, v96);
      }
    }
    v145 = *(void (**)(char *, uint64_t))(v362 + 8);
    v146 = v352;
    v145(v326, v352);
    v367 = (void (*)(id *, uint64_t))v145;
    v145(v323, v146);
    v93 = v336 + 2;
    if (v336 + 2 >= v358)
      goto LABEL_87;
    v330 *= v370;
    v147 = v327;
    v148 = v370 * v93;
    v149 = v328;
    while (1)
    {
      v150 = v96;
      v151 = v340;
      v152 = v352;
      v153 = v366;
      v366(v340, v147 + v148, v352);
      v153(v342, v147 + v330, v152);
      v154 = v333;
      v153((char *)v333, (uint64_t)v151, v152);
      v155 = v365(v154, v152);
      if (v155 == v361)
      {
        v367(v154, v152);
        v156 = v334;
        v96 = v150;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v334, 1, 1, v150);
        v157 = (uint64_t)v335;
        goto LABEL_64;
      }
      if (v155 != v354)
      {
        if (v155 != v347)
          goto LABEL_246;
        (*(void (**)(id *, uint64_t))(v362 + 96))(v154, v352);
        v158 = *v154;
        v162 = objc_msgSend(*v154, "pinnedDate");
        if (v162)
        {
          v160 = v162;
          v161 = (uint64_t *)v353;
          goto LABEL_59;
        }

        v166 = (uint64_t *)v353;
LABEL_62:
        v163 = *(v166 - 32);
        v164 = v163;
        v165 = 1;
        goto LABEL_63;
      }
      (*(void (**)(id *, uint64_t))(v362 + 96))(v154, v352);
      v158 = *v154;
      v159 = objc_msgSend(*v154, "pinnedDate");
      if (!v159)
      {

        v166 = &v357;
        goto LABEL_62;
      }
      v160 = v159;
      v161 = &v357;
LABEL_59:
      v163 = *(v161 - 32);
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v160);

      v164 = v163;
      v165 = 0;
LABEL_63:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v164, v165, 1, v369);
      v157 = (uint64_t)v335;
      v156 = v334;
      sub_1000A5CA8(v163, v334, (uint64_t *)&unk_1008380D0);
      v96 = v369;
LABEL_64:
      if (v360(v156, 1, v96) == 1)
      {
        sub_10000882C(v156, (uint64_t *)&unk_1008380D0);
        v167 = 1;
        v95 = (uint64_t)v343;
      }
      else
      {
        v168 = *(void (**)(char *, uint64_t, uint64_t))(v350 + 32);
        v168(v149, v156, v96);
        v169 = v329;
        v170 = v352;
        v366(v329, (uint64_t)v342, v352);
        v171 = v365((id *)v169, v170);
        if (v171 == v361)
        {
          v367((id *)v169, v170);
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v157, 1, 1, v96);
          v95 = (uint64_t)v343;
        }
        else
        {
          v95 = (uint64_t)v343;
          if (v171 == v354)
          {
            v172 = (id *)v329;
            (*(void (**)(char *, uint64_t))(v362 + 96))(v329, v352);
            v173 = *v172;
            v174 = objc_msgSend(*v172, "pinnedDate");
            if (v174)
            {
              v175 = v174;
              v176 = (uint64_t)v311;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v174);

              v177 = v176;
              v178 = 0;
            }
            else
            {

              v176 = (uint64_t)v311;
              v177 = (uint64_t)v311;
              v178 = 1;
            }
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v177, v178, 1, v369);
            v157 = (uint64_t)v335;
            sub_1000A5CA8(v176, (uint64_t)v335, (uint64_t *)&unk_1008380D0);
            v95 = (uint64_t)v343;
          }
          else
          {
            v179 = (id *)v329;
            if (v171 != v347)
              goto LABEL_246;
            (*(void (**)(char *, uint64_t))(v362 + 96))(v329, v352);
            v180 = *v179;
            v181 = objc_msgSend(*v179, "pinnedDate");
            if (v181)
            {
              v182 = v181;
              v183 = (uint64_t)v320;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v181);

              v184 = (char *)v183;
              v185 = 0;
            }
            else
            {

              v183 = (uint64_t)v320;
              v184 = v320;
              v185 = 1;
            }
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v184, v185, 1, v369);
            v157 = (uint64_t)v335;
            sub_1000A5CA8(v183, (uint64_t)v335, (uint64_t *)&unk_1008380D0);
          }
          v96 = v369;
        }
        if (v360(v157, 1, v96) == 1)
        {
          (*(void (**)(char *, uint64_t))(v350 + 8))(v149, v96);
          sub_10000882C(v157, (uint64_t *)&unk_1008380D0);
          v167 = 0;
        }
        else
        {
          v186 = v325;
          v168(v325, v157, v96);
          v167 = static Date.< infix(_:_:)(v328, v186);
          v187 = *(void (**)(char *, uint64_t))(v350 + 8);
          v188 = v186;
          v149 = v328;
          v187(v188, v96);
          v187(v149, v96);
        }
      }
      v189 = v352;
      v190 = (void (*)(char *, uint64_t))v367;
      v367((id *)v342, v352);
      v190(v340, v189);
      if (((v357 ^ v167) & 1) != 0)
        break;
      ++v93;
      v147 += v370;
      v108 = (uint64_t)v363;
      if (v358 == v93)
      {
        v93 = v358;
        goto LABEL_86;
      }
    }
    v108 = (uint64_t)v363;
LABEL_86:
    v12 = (unint64_t)v341;
LABEL_87:
    v109 = v362;
    v94 = v331;
    v110 = (char *)v336;
    if ((v357 & 1) != 0)
    {
      if (v93 >= v336)
      {
        if (v336 < v93)
        {
          v191 = 0;
          v192 = v370 * (v93 - 1);
          v12 = v93 * v370;
          v193 = v336;
          v194 = v336 * v370;
          v359 = (char *)v93;
          do
          {
            if (v193 != v93 + v191 - 1)
            {
              if (!v327)
                goto LABEL_243;
              v196 = v327 + v194;
              v197 = v327 + v192;
              v198 = v327;
              v199 = *(void (**)(char *, uint64_t, uint64_t, char *))(v362 + 32);
              v199(v332, v327 + v194, v352, v94);
              if (v194 < v192 || v196 >= v198 + v12)
              {
                v195 = v352;
                swift_arrayInitWithTakeFrontToBack(v196);
              }
              else
              {
                v195 = v352;
                if (v194 != v192)
                  swift_arrayInitWithTakeBackToFront(v196);
              }
              ((void (*)(uint64_t, char *, uint64_t))v199)(v197, v332, v195);
              v108 = (uint64_t)v363;
              v96 = v369;
              v94 = v331;
              v93 = (Swift::Int)v359;
            }
            ++v193;
            --v191;
            v192 -= v370;
            v12 -= v370;
            v194 += v370;
          }
          while (v193 < v93 + v191);
          v109 = v362;
          v12 = (unint64_t)v341;
          v95 = (uint64_t)v343;
          v110 = (char *)v336;
        }
        goto LABEL_101;
      }
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
      goto LABEL_240;
    }
LABEL_101:
    if (v93 >= v358)
      goto LABEL_149;
    if (__OFSUB__(v93, v110))
      goto LABEL_236;
    if (v93 - (uint64_t)v110 >= v313)
      goto LABEL_149;
    if (__OFADD__(v110, v313))
      goto LABEL_239;
    v200 = (char *)v358;
    if ((uint64_t)&v110[v313] < v358)
      v200 = &v110[v313];
    if ((uint64_t)v200 < (uint64_t)v110)
    {
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      _diagnoseUnexpectedEnumCase<A>(type:)(v12, v12);
      __break(1u);
LABEL_246:
      _diagnoseUnexpectedEnumCase<A>(type:)(v352, v352);
      __break(1u);
LABEL_247:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if ((char *)v93 == v200)
      goto LABEL_149;
    v201 = *(_QWORD *)(v109 + 72);
    v202 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 16);
    v359 = (char *)v93;
    v360 = v202;
    v370 = v201 * (v93 - 1);
    v357 = v201;
    v203 = v93 * v201;
    v204 = (_QWORD *)v350;
    v12 = v352;
    v330 = (Swift::Int)v200;
    while (2)
    {
      v206 = 0;
      v358 = v203;
      while (2)
      {
        v207 = v96;
        v208 = *v371;
        v366 = (void (*)(char *, uint64_t, uint64_t))v110;
        v367 = (void (*)(id *, uint64_t))(v203 + v206);
        v209 = v203 + v206 + v208;
        v210 = v368;
        v211 = (void (*)(char *, uint64_t, unint64_t))v360;
        v360((uint64_t)v368, v209, v12);
        v365 = (uint64_t (*)(id *, uint64_t))(v370 + v206);
        v211(v373, v370 + v206 + v208, v12);
        v212 = v355;
        v211((char *)v355, (uint64_t)v210, v12);
        v213 = v212;
        v214 = *(uint64_t (**)(void **, unint64_t))(v109 + 88);
        v215 = v214(v213, v12);
        if (v215 == v361)
        {
          (*(void (**)(void **, unint64_t))(v109 + 8))(v213, v12);
          v216 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v204[7];
          v96 = v207;
          v216(v108, 1, 1, v207);
          goto LABEL_128;
        }
        if (v215 == v354)
        {
          (*(void (**)(void **, unint64_t))(v109 + 96))(v213, v12);
          v217 = *v213;
          v218 = objc_msgSend(v217, "pinnedDate");
          v219 = (uint64_t)v345;
          if (v218)
          {
            v220 = v218;
            goto LABEL_123;
          }

          v216 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v204[7];
LABEL_126:
          v222 = v219;
          v223 = 1;
        }
        else
        {
          if (v215 != v347)
            goto LABEL_245;
          (*(void (**)(void **, unint64_t))(v109 + 96))(v213, v12);
          v217 = *v213;
          v221 = objc_msgSend(v217, "pinnedDate");
          if (!v221)
          {

            v216 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v204[7];
            v219 = v344;
            goto LABEL_126;
          }
          v220 = v221;
          v219 = v344;
LABEL_123:
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v220);

          v216 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v204[7];
          v222 = v219;
          v223 = 0;
        }
        v96 = v369;
        v216(v222, v223, 1, v369);
        v108 = (uint64_t)v363;
        sub_1000A5CA8(v219, (uint64_t)v363, (uint64_t *)&unk_1008380D0);
LABEL_128:
        v224 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v204[6];
        if (v224(v108, 1, v96) == 1)
        {
          sub_10000882C(v108, (uint64_t *)&unk_1008380D0);
          v109 = v362;
          v225 = *(void (**)(char *, unint64_t))(v362 + 8);
          v225(v373, v12);
          v225(v368, v12);
LABEL_145:
          v247 = *v371;
          if (!*v371)
            goto LABEL_241;
          v203 = v358;
          v248 = v247 + v358 + v206;
          v249 = (char *)(v247 + v370 + v206);
          v250 = *(void (**)(char *, Swift::Int, unint64_t))(v109 + 32);
          v250(v364, v248, v12);
          swift_arrayInitWithTakeFrontToBack(v248);
          v250(v249, (Swift::Int)v364, v12);
          v206 -= v357;
          v110 = (char *)v366 + 1;
          v108 = (uint64_t)v363;
          v96 = v369;
          if (v359 == (char *)v366 + 1)
            goto LABEL_112;
          continue;
        }
        break;
      }
      v226 = (void (*)(char *, uint64_t, uint64_t))v204[4];
      v226(v356, v108, v96);
      v227 = v351;
      v360((uint64_t)v351, (uint64_t)v373, v12);
      v228 = v214(v227, v12);
      if (v228 == v361)
      {
        (*(void (**)(id *, unint64_t))(v362 + 8))(v227, v12);
        v229 = v349;
        v216(v349, 1, 1, v96);
        goto LABEL_143;
      }
      if (v228 == v354)
      {
        v230 = v351;
        (*(void (**)(id *, unint64_t))(v362 + 96))(v351, v12);
        v231 = *v230;
        v232 = objc_msgSend(*v230, "pinnedDate");
        if (v232)
        {
          v233 = v232;
          v234 = (char *)&v371;
          goto LABEL_138;
        }
        v238 = 1;
        v239 = (char *)&v371;
LABEL_141:
        v237 = *((_QWORD *)v239 - 32);
      }
      else
      {
        if (v228 != v347)
          goto LABEL_245;
        v235 = v351;
        (*(void (**)(id *, unint64_t))(v362 + 96))(v351, v12);
        v231 = *v235;
        v236 = objc_msgSend(*v235, "pinnedDate");
        if (!v236)
        {
          v238 = 1;
          v239 = &v372;
          goto LABEL_141;
        }
        v233 = v236;
        v234 = &v372;
LABEL_138:
        v237 = *((_QWORD *)v234 - 32);
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v233);

        v238 = 0;
      }

      v96 = v369;
      v216(v237, v238, 1, v369);
      v240 = v237;
      v229 = v349;
      sub_1000A5CA8(v240, v349, (uint64_t *)&unk_1008380D0);
      v108 = (uint64_t)v363;
LABEL_143:
      if (v224(v229, 1, v96) == 1)
      {
        v204 = (_QWORD *)v350;
        (*(void (**)(char *, uint64_t))(v350 + 8))(v356, v96);
        sub_10000882C(v229, (uint64_t *)&unk_1008380D0);
        v109 = v362;
        v205 = *(void (**)(char *, unint64_t))(v362 + 8);
        v205(v373, v12);
        v205(v368, v12);
        goto LABEL_111;
      }
      v241 = v348;
      v226(v348, v229, v96);
      v242 = v356;
      v243 = static Date.< infix(_:_:)(v356, v241);
      v204 = (_QWORD *)v350;
      v244 = *(void (**)(char *, uint64_t))(v350 + 8);
      v244(v241, v96);
      v245 = v242;
      v12 = v352;
      v244(v245, v96);
      v109 = v362;
      v246 = *(void (**)(char *, unint64_t))(v362 + 8);
      v246(v373, v12);
      v246(v368, v12);
      if ((v243 & 1) != 0)
        goto LABEL_145;
      v96 = v369;
LABEL_111:
      v203 = v358;
LABEL_112:
      v370 += v357;
      v203 += v357;
      ++v359;
      v110 = (char *)v336;
      if (v359 != (char *)v330)
        continue;
      break;
    }
    v12 = (unint64_t)v341;
    v95 = (uint64_t)v343;
    v94 = v331;
    v93 = v330;
LABEL_149:
    if (v93 < (uint64_t)v110)
    {
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
      goto LABEL_238;
    }
    swift_isUniquelyReferenced_nonNull_native(v94);
    if ((v251 & 1) != 0)
      v94 = v331;
    else
      v94 = sub_1001D4DF0(0, *((_QWORD *)v331 + 2) + 1, 1, v331);
    v253 = *((_QWORD *)v94 + 2);
    v252 = *((_QWORD *)v94 + 3);
    v97 = v253 + 1;
    if (v253 >= v252 >> 1)
      v94 = sub_1001D4DF0((char *)(v252 > 1), v253 + 1, 1, v94);
    *((_QWORD *)v94 + 2) = v97;
    v254 = v94 + 32;
    v255 = &v94[16 * v253 + 32];
    *(_QWORD *)v255 = v336;
    *((_QWORD *)v255 + 1) = v93;
    if (!v253)
    {
      v97 = 1;
      v96 = v369;
LABEL_15:
      v85 = v371[1];
      if (v93 >= v85)
      {
        v301 = v310;
        v92 = v337;
        if (v97 < 2)
          goto LABEL_214;
        goto LABEL_201;
      }
      continue;
    }
    break;
  }
  v96 = v369;
  while (1)
  {
    v256 = v97 - 1;
    if (v97 >= 4)
    {
      v261 = &v254[16 * v97];
      v262 = *((_QWORD *)v261 - 8);
      v263 = *((_QWORD *)v261 - 7);
      v267 = __OFSUB__(v263, v262);
      v264 = v263 - v262;
      if (v267)
        goto LABEL_220;
      v266 = *((_QWORD *)v261 - 6);
      v265 = *((_QWORD *)v261 - 5);
      v267 = __OFSUB__(v265, v266);
      v259 = v265 - v266;
      v260 = v267;
      if (v267)
        goto LABEL_221;
      v268 = v97 - 2;
      v269 = &v254[16 * v97 - 32];
      v271 = *(_QWORD *)v269;
      v270 = *((_QWORD *)v269 + 1);
      v267 = __OFSUB__(v270, v271);
      v272 = v270 - v271;
      if (v267)
        goto LABEL_223;
      v267 = __OFADD__(v259, v272);
      v273 = v259 + v272;
      if (v267)
        goto LABEL_226;
      if (v273 >= v264)
      {
        v291 = &v254[16 * v256];
        v293 = *(_QWORD *)v291;
        v292 = *((_QWORD *)v291 + 1);
        v267 = __OFSUB__(v292, v293);
        v294 = v292 - v293;
        if (v267)
          goto LABEL_230;
        v284 = v259 < v294;
        goto LABEL_187;
      }
    }
    else
    {
      if (v97 != 3)
      {
        v285 = *((_QWORD *)v94 + 4);
        v286 = *((_QWORD *)v94 + 5);
        v267 = __OFSUB__(v286, v285);
        v278 = v286 - v285;
        v279 = v267;
        goto LABEL_181;
      }
      v258 = *((_QWORD *)v94 + 4);
      v257 = *((_QWORD *)v94 + 5);
      v267 = __OFSUB__(v257, v258);
      v259 = v257 - v258;
      v260 = v267;
    }
    if ((v260 & 1) != 0)
      goto LABEL_222;
    v268 = v97 - 2;
    v274 = &v254[16 * v97 - 32];
    v276 = *(_QWORD *)v274;
    v275 = *((_QWORD *)v274 + 1);
    v277 = __OFSUB__(v275, v276);
    v278 = v275 - v276;
    v279 = v277;
    if (v277)
      goto LABEL_225;
    v280 = &v254[16 * v256];
    v282 = *(_QWORD *)v280;
    v281 = *((_QWORD *)v280 + 1);
    v267 = __OFSUB__(v281, v282);
    v283 = v281 - v282;
    if (v267)
      goto LABEL_228;
    if (__OFADD__(v278, v283))
      goto LABEL_229;
    if (v278 + v283 >= v259)
    {
      v284 = v259 < v283;
LABEL_187:
      if (v284)
        v256 = v268;
      goto LABEL_189;
    }
LABEL_181:
    if ((v279 & 1) != 0)
      goto LABEL_224;
    v287 = &v254[16 * v256];
    v289 = *(_QWORD *)v287;
    v288 = *((_QWORD *)v287 + 1);
    v267 = __OFSUB__(v288, v289);
    v290 = v288 - v289;
    if (v267)
      goto LABEL_227;
    if (v290 < v278)
      goto LABEL_15;
LABEL_189:
    v12 = v256 - 1;
    if (v256 - 1 >= v97)
    {
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
      goto LABEL_231;
    }
    if (!*v371)
      goto LABEL_242;
    v295 = v94;
    v296 = &v254[16 * v12];
    v297 = *(_QWORD *)v296;
    v298 = &v254[16 * v256];
    v299 = *((_QWORD *)v298 + 1);
    v300 = v346;
    sub_1003F06A0(*v371 + *(_QWORD *)(v362 + 72) * *(_QWORD *)v296, *v371 + *(_QWORD *)(v362 + 72) * *(_QWORD *)v298, *v371 + *(_QWORD *)(v362 + 72) * v299, (unint64_t)v337);
    if (v300)
      break;
    if (v299 < v297)
      goto LABEL_217;
    if (v256 > *((_QWORD *)v295 + 2))
      goto LABEL_218;
    *(_QWORD *)v296 = v297;
    *(_QWORD *)&v254[16 * v12 + 8] = v299;
    v12 = *((_QWORD *)v295 + 2);
    if (v256 >= v12)
      goto LABEL_219;
    v346 = 0;
    v97 = v12 - 1;
    memmove(&v254[16 * v256], v298 + 16, 16 * (v12 - 1 - v256));
    v94 = v295;
    *((_QWORD *)v295 + 2) = v12 - 1;
    v284 = v12 > 2;
    v12 = (unint64_t)v341;
    v95 = (uint64_t)v343;
    v96 = v369;
    if (!v284)
      goto LABEL_15;
  }
  v301 = v310;
LABEL_199:
  swift_bridgeObjectRelease();
  v301[2] = 0;
  swift_bridgeObjectRelease();
}

void sub_1003EFE04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(id *, uint64_t);
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void (*v48)(id *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(id *, uint64_t);
  int v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  id v60;
  unsigned int (*v61)(_BYTE *, uint64_t, uint64_t);
  void (*v62)(id *, uint64_t);
  uint64_t v63;
  void (*v64)(_BYTE *, _BYTE *, uint64_t);
  id *v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  char v82;
  void (*v83)(_BYTE *, uint64_t);
  void (*v84)(id *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  void (*v88)(_BYTE *, uint64_t, uint64_t);
  _BYTE v89[16];
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  int v95;
  _BYTE *v96;
  id *v97;
  _BYTE *v98;
  int v99;
  void (*v100)(_BYTE *, _BYTE *, uint64_t);
  id *v101;
  _QWORD *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  int v108;
  void (*v109)(id *, uint64_t, uint64_t);
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  id *v119;
  uint64_t v120;
  uint64_t v121;

  v91 = a1;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = &v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v89[-v11];
  __chkstk_darwin(v13);
  v98 = &v89[-v14];
  __chkstk_darwin(v15);
  v94 = &v89[-v16];
  __chkstk_darwin(v17);
  v19 = &v89[-v18];
  __chkstk_darwin(v20);
  v111 = &v89[-v21];
  v110 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v96 = &v89[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __chkstk_darwin(v23);
  v103 = &v89[-v25];
  v26 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, v24);
  v120 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v112 = &v89[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v28);
  v97 = (id *)&v89[-v29];
  __chkstk_darwin(v30);
  v32 = (id *)&v89[-v31];
  __chkstk_darwin(v33);
  v119 = (id *)&v89[-v34];
  v36 = __chkstk_darwin(v35);
  v117 = &v89[-v37];
  v105 = a3;
  v90 = a2;
  if (a3 == a2)
    return;
  v38 = *(_QWORD *)(v120 + 72);
  v109 = *(void (**)(id *, uint64_t, uint64_t))(v120 + 16);
  v108 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
  v99 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
  v95 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
  v118 = v38 * (v105 - 1);
  v104 = v38;
  v39 = v38 * v105;
  v92 = v12;
  v106 = v19;
  v107 = v26;
  v101 = v32;
  v102 = a4;
  v93 = v9;
LABEL_6:
  v121 = 0;
  v41 = v91;
  v42 = v111;
  while (1)
  {
    v115 = v41;
    v43 = *a4;
    v44 = v39;
    v45 = v121;
    v114 = v39 + v121;
    v46 = v39 + v121 + v43;
    v47 = v117;
    v48 = v109;
    ((void (*)(_BYTE *, uint64_t, uint64_t, __n128))v109)(v117, v46, v26, v36);
    v49 = v118 + v45;
    v48(v119, v49 + v43, v26);
    v48(v32, (uint64_t)v47, v26);
    v50 = v120;
    v51 = *(uint64_t (**)(id *, uint64_t))(v120 + 88);
    v52 = v51(v32, v26);
    v113 = v49;
    if (v52 == v108)
    {
      (*(void (**)(id *, uint64_t))(v50 + 8))(v32, v26);
      v53 = v116;
      v54 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v55 = v110;
      v54(v42, 1, 1, v110);
      v39 = v44;
      goto LABEL_21;
    }
    v39 = v44;
    if (v52 == v99)
    {
      (*(void (**)(id *, uint64_t))(v50 + 96))(v32, v107);
      v56 = *v32;
      v57 = objc_msgSend(*v32, "pinnedDate");
      if (!v57)
      {

        v54 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56);
        v54(v19, 1, 1, v110);
        goto LABEL_20;
      }
      v58 = v57;
    }
    else
    {
      v59 = v107;
      if (v52 != v95)
        goto LABEL_41;
      (*(void (**)(id *, uint64_t))(v50 + 96))(v32, v107);
      v56 = *v32;
      v60 = objc_msgSend(*v32, "pinnedDate");
      if (!v60)
      {

        v54 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56);
        v19 = v94;
        v54(v94, 1, 1, v110);
        goto LABEL_20;
      }
      v58 = v60;
      v19 = v94;
    }
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v54 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56);
    v54(v19, 0, 1, v110);
LABEL_20:
    v42 = v111;
    sub_1000A5CA8((uint64_t)v19, (uint64_t)v111, (uint64_t *)&unk_1008380D0);
    v53 = v116;
    v55 = v110;
LABEL_21:
    v61 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48);
    if (v61(v42, 1, v55) == 1)
    {
      sub_10000882C((uint64_t)v42, (uint64_t *)&unk_1008380D0);
      v62 = *(void (**)(id *, uint64_t))(v120 + 8);
      v26 = v107;
      v62(v119, v107);
      v62((id *)v117, v26);
      v32 = v101;
      a4 = v102;
      v63 = v115;
    }
    else
    {
      v64 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 32);
      v64(v103, v42, v55);
      v65 = v97;
      v26 = v107;
      v109(v97, (uint64_t)v119, v107);
      v66 = v51(v65, v26);
      v67 = v55;
      v100 = v64;
      if (v66 == v108)
      {
        (*(void (**)(id *, uint64_t))(v120 + 8))(v65, v26);
        v68 = v98;
        v54(v98, 1, 1, v55);
      }
      else
      {
        if (v66 == v99)
        {
          (*(void (**)(id *, uint64_t))(v120 + 96))(v65, v26);
          v69 = *v65;
          v70 = objc_msgSend(*v65, "pinnedDate");
          if (v70)
          {
            v71 = v70;
            v72 = (uint64_t)v92;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

            v73 = 0;
          }
          else
          {
            v73 = 1;
            v72 = (uint64_t)v92;
          }

          v54((_BYTE *)v72, v73, 1, v67);
          v79 = v72;
        }
        else
        {
          v74 = (uint64_t)v93;
          if (v66 != v95)
            goto LABEL_42;
          (*(void (**)(id *, uint64_t))(v120 + 96))(v65, v26);
          v75 = *v65;
          v76 = objc_msgSend(*v65, "pinnedDate");
          if (v76)
          {
            v77 = v76;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

            v78 = 0;
          }
          else
          {
            v78 = 1;
          }

          v54((_BYTE *)v74, v78, 1, v55);
          v79 = v74;
        }
        v68 = v98;
        sub_1000A5CA8(v79, (uint64_t)v98, (uint64_t *)&unk_1008380D0);
      }
      if (v61(v68, 1, v67) == 1)
      {
        (*(void (**)(_BYTE *, uint64_t))(v116 + 8))(v103, v67);
        sub_10000882C((uint64_t)v68, (uint64_t *)&unk_1008380D0);
        v40 = *(void (**)(id *, uint64_t))(v120 + 8);
        v40(v119, v26);
        v40((id *)v117, v26);
        v32 = v101;
        a4 = v102;
        v19 = v106;
LABEL_5:
        v118 += v104;
        v39 += v104;
        if (++v105 == v90)
          return;
        goto LABEL_6;
      }
      v80 = v96;
      v100(v96, v68, v67);
      v81 = v103;
      v82 = static Date.< infix(_:_:)(v103, v80);
      v83 = *(void (**)(_BYTE *, uint64_t))(v116 + 8);
      v83(v80, v67);
      v83(v81, v67);
      v84 = *(void (**)(id *, uint64_t))(v120 + 8);
      v84(v119, v26);
      v84((id *)v117, v26);
      v32 = v101;
      a4 = v102;
      v19 = v106;
      v63 = v115;
      if ((v82 & 1) == 0)
        goto LABEL_5;
    }
    v85 = *a4;
    if (!*a4)
      break;
    v86 = v85 + v39 + v121;
    v87 = (_BYTE *)(v85 + v118 + v121);
    v88 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v120 + 32);
    v88(v112, v86, v26);
    swift_arrayInitWithTakeFrontToBack(v86);
    v88(v87, (uint64_t)v112, v26);
    v121 -= v104;
    v41 = v63 + 1;
    v19 = v106;
    v42 = v111;
    if (v105 == v41)
      goto LABEL_5;
  }
  __break(1u);
LABEL_41:
  _diagnoseUnexpectedEnumCase<A>(type:)(v59, v59);
  __break(1u);
LABEL_42:
  _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
  __break(1u);
}

uint64_t sub_1003F06A0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, unint64_t, uint64_t);
  id *v68;
  uint64_t (*v69)(id *, uint64_t);
  int v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  void (*v85)(char *, uint64_t);
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  void **v91;
  int v92;
  uint64_t v93;
  void *v94;
  id v95;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  char *v103;
  char v104;
  void (*v105)(char *, uint64_t);
  void (*v106)(char *, uint64_t);
  unint64_t v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, unint64_t, uint64_t);
  unint64_t v114;
  id *v115;
  uint64_t (*v116)(id *, uint64_t);
  int v117;
  void (*v118)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  void *v123;
  uint64_t *v124;
  id v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  char v129;
  unint64_t v130;
  id *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  void *v137;
  char *v138;
  id v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  char *v145;
  char v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  char *v149;
  void (*v150)(char *, uint64_t);
  unint64_t v151;
  unint64_t v152;
  uint64_t result;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  void **v165;
  id *v166;
  uint64_t v167;
  unint64_t v168;
  void (*v169)(char *, uint64_t, uint64_t);
  unint64_t v170;
  id *v171;
  id *v172;
  char *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(char *, unint64_t, uint64_t);
  char *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v158 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v157 = (char *)&v154 - v11;
  __chkstk_darwin(v12);
  v168 = (unint64_t)&v154 - v13;
  __chkstk_darwin(v14);
  v164 = (char *)&v154 - v15;
  __chkstk_darwin(v16);
  v163 = (char *)&v154 - v17;
  __chkstk_darwin(v18);
  v175 = (unint64_t)&v154 - v19;
  __chkstk_darwin(v20);
  v156 = (char *)&v154 - v21;
  __chkstk_darwin(v22);
  v155 = (char *)&v154 - v23;
  __chkstk_darwin(v24);
  v167 = (uint64_t)&v154 - v25;
  __chkstk_darwin(v26);
  v162 = (char *)&v154 - v27;
  __chkstk_darwin(v28);
  v161 = (char *)&v154 - v29;
  __chkstk_darwin(v30);
  v169 = (void (*)(char *, uint64_t, uint64_t))((char *)&v154 - v31);
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v160 = (char *)&v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v174 = (char *)&v154 - v36;
  __chkstk_darwin(v37);
  v159 = (char *)&v154 - v38;
  v40 = __chkstk_darwin(v39);
  v173 = (char *)&v154 - v41;
  v42 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, v40);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v166 = (id *)((char *)&v154 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v45);
  v172 = (id *)((char *)&v154 - v46);
  __chkstk_darwin(v47);
  v181 = (char *)&v154 - v48;
  __chkstk_darwin(v49);
  v177 = (char *)&v154 - v50;
  __chkstk_darwin(v51);
  v165 = (void **)((char *)&v154 - v52);
  __chkstk_darwin(v53);
  v171 = (id *)((char *)&v154 - v54);
  __chkstk_darwin(v55);
  v180 = (void (*)(char *, unint64_t, uint64_t))((char *)&v154 - v56);
  __chkstk_darwin(v57);
  v176 = (char *)&v154 - v58;
  v179 = *(_QWORD *)(v43 + 72);
  if (!v179)
  {
    __break(1u);
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (a2 - a1 == 0x8000000000000000 && v179 == -1)
    goto LABEL_122;
  v59 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v179 == -1)
  {
LABEL_123:
    __break(1u);
LABEL_124:
    _diagnoseUnexpectedEnumCase<A>(type:)(v42, v42);
    __break(1u);
    goto LABEL_125;
  }
  v60 = (uint64_t)(a2 - a1) / v179;
  v187 = a1;
  v186 = a4;
  v61 = v59 / v179;
  v183 = v32;
  v184 = v43;
  v178 = v33;
  if (v60 >= v59 / v179)
  {
    if (v61 < 0)
      goto LABEL_125;
    v63 = v61 * v179;
    if (a4 < a2 || a2 + v63 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v108 = a4 + v63;
    v185 = a4 + v63;
    v187 = a2;
    v176 = (char *)a1;
    if (v63 < 1 || a1 >= a2)
    {
LABEL_120:
      sub_1001D4FA8(&v187, &v186, (uint64_t *)&v185);
      return 1;
    }
    v110 = -v179;
    v180 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    LODWORD(v179) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
    LODWORD(v171) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
    LODWORD(v167) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
    v170 = a4;
    v111 = v110;
    v173 = (char *)v110;
    while (1)
    {
      v182 = a3;
      v112 = v177;
      v113 = v180;
      v180(v177, v108 + v111, v42);
      v114 = a2 + v111;
      v113(v181, a2 + v111, v42);
      v115 = v172;
      v113((char *)v172, (unint64_t)v112, v42);
      v116 = *(uint64_t (**)(id *, uint64_t))(v43 + 88);
      v117 = v116(v115, v42);
      if (v117 == (_DWORD)v179)
      {
        (*(void (**)(id *, uint64_t))(v43 + 8))(v115, v42);
        v118 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
        v119 = v175;
        v120 = v183;
        v118(v175, 1, 1, v183);
        goto LABEL_87;
      }
      if (v117 == (_DWORD)v171)
      {
        (*(void (**)(id *, uint64_t))(v43 + 96))(v115, v42);
        v121 = *v115;
        v122 = objc_msgSend(*v115, "pinnedDate");
        if (!v122)
        {

          v33 = v178;
          v118 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
          v127 = &v190;
LABEL_85:
          v126 = *(v127 - 32);
          v118(v126, 1, 1, v183);
          goto LABEL_86;
        }
        v123 = v122;
        v124 = &v190;
      }
      else
      {
        if (v117 != (_DWORD)v167)
          goto LABEL_124;
        (*(void (**)(id *, uint64_t))(v43 + 96))(v115, v42);
        v121 = *v115;
        v125 = objc_msgSend(*v115, "pinnedDate");
        if (!v125)
        {

          v33 = v178;
          v118 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
          v127 = &v191;
          goto LABEL_85;
        }
        v123 = v125;
        v124 = &v191;
      }
      v126 = *(v124 - 32);
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v123);

      v33 = v178;
      v118 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v178 + 56);
      v118(v126, 0, 1, v183);
LABEL_86:
      v119 = v175;
      sub_1000A5CA8(v126, v175, (uint64_t *)&unk_1008380D0);
      v120 = v183;
LABEL_87:
      v128 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      if (v128(v119, 1, v120) != 1)
      {
        v169 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
        v169(v174, v119, v120);
        v131 = v166;
        v180((char *)v166, (unint64_t)v181, v42);
        v132 = v116(v131, v42);
        if (v132 == (_DWORD)v179)
        {
          (*(void (**)(id *, uint64_t))(v184 + 8))(v131, v42);
          v133 = v168;
          v118(v168, 1, 1, v120);
          v134 = v133;
          goto LABEL_101;
        }
        if (v132 == (_DWORD)v171)
        {
          (*(void (**)(id *, uint64_t))(v184 + 96))(v131, v42);
          v135 = *v131;
          v136 = objc_msgSend(*v131, "pinnedDate");
          if (v136)
          {
            v137 = v136;
            v138 = v157;
            goto LABEL_97;
          }
          v140 = 1;
          v138 = v157;
        }
        else
        {
          v138 = v158;
          if (v132 != (_DWORD)v167)
            goto LABEL_124;
          (*(void (**)(id *, uint64_t))(v184 + 96))(v131, v42);
          v135 = *v131;
          v139 = objc_msgSend(*v131, "pinnedDate");
          if (v139)
          {
            v137 = v139;
LABEL_97:
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v137);

            v140 = 0;
          }
          else
          {
            v140 = 1;
          }
        }

        v141 = v138;
        v142 = (uint64_t)v138;
        v120 = v183;
        v118((unint64_t)v141, v140, 1, v183);
        v134 = v168;
        sub_1000A5CA8(v142, v168, (uint64_t *)&unk_1008380D0);
        v33 = v178;
LABEL_101:
        v143 = v128(v134, 1, v120);
        v130 = v182;
        if (v143 == 1)
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v174, v120);
          sub_10000882C(v134, (uint64_t *)&unk_1008380D0);
          v129 = 0;
        }
        else
        {
          v144 = v160;
          v169(v160, v134, v120);
          v145 = v174;
          v146 = static Date.< infix(_:_:)(v174, v144);
          v147 = v33;
          v129 = v146;
          v148 = *(void (**)(char *, uint64_t))(v147 + 8);
          v148(v144, v120);
          v148(v145, v120);
        }
        goto LABEL_104;
      }
      sub_10000882C(v119, (uint64_t *)&unk_1008380D0);
      v129 = 1;
      v130 = v182;
LABEL_104:
      v111 = (uint64_t)v173;
      v149 = &v173[v130];
      v43 = v184;
      v150 = *(void (**)(char *, uint64_t))(v184 + 8);
      v150(v181, v42);
      v150(v177, v42);
      if ((v129 & 1) != 0)
      {
        if (v130 < a2 || (unint64_t)v149 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack(v130 + v111);
          v33 = v178;
          v151 = v170;
        }
        else
        {
          v33 = v178;
          v151 = v170;
          if (v130 != a2)
            swift_arrayInitWithTakeBackToFront(v130 + v111);
        }
        v187 += v111;
      }
      else
      {
        v152 = v185;
        v185 += v111;
        if (v130 < v152 || (unint64_t)v149 >= v152)
        {
          swift_arrayInitWithTakeFrontToBack(v130 + v111);
          v114 = a2;
          v33 = v178;
        }
        else
        {
          v33 = v178;
          if (v130 != v152)
            swift_arrayInitWithTakeBackToFront(v130 + v111);
          v114 = a2;
        }
        v151 = v170;
      }
      v108 = v185;
      if (v185 > v151)
      {
        a2 = v114;
        a3 = v130 + v111;
        if (v114 > (unint64_t)v176)
          continue;
      }
      goto LABEL_120;
    }
  }
  if ((v60 & 0x8000000000000000) == 0)
  {
    v62 = v60 * v179;
    if (a4 < a1 || a1 + v62 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v175 = a4 + v62;
    v185 = a4 + v62;
    v64 = v62 < 1 || a2 >= a3;
    v65 = (uint64_t)v169;
    if (!v64)
    {
      v181 = *(char **)(v43 + 16);
      LODWORD(v177) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
      LODWORD(v174) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
      LODWORD(v172) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
      v182 = a3;
      while (1)
      {
        v66 = v176;
        v67 = (void (*)(char *, unint64_t, uint64_t))v181;
        ((void (*)(char *, unint64_t, uint64_t))v181)(v176, a2, v42);
        v67((char *)v180, a4, v42);
        v68 = v171;
        v67((char *)v171, (unint64_t)v66, v42);
        v69 = *(uint64_t (**)(id *, uint64_t))(v43 + 88);
        v70 = v69(v68, v42);
        if (v70 == (_DWORD)v177)
        {
          (*(void (**)(id *, uint64_t))(v43 + 8))(v68, v42);
          v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
          v72 = v183;
          v71(v65, 1, 1, v183);
          goto LABEL_36;
        }
        if (v70 == (_DWORD)v174)
        {
          (*(void (**)(id *, uint64_t))(v43 + 96))(v68, v42);
          v73 = *v68;
          v74 = objc_msgSend(*v68, "pinnedDate");
          if (!v74)
          {

            v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
            v82 = &v188;
LABEL_34:
            v79 = *(v82 - 32);
            v80 = v79;
            v81 = 1;
            goto LABEL_35;
          }
          v75 = v74;
          v76 = &v188;
        }
        else
        {
          if (v70 != (_DWORD)v172)
            goto LABEL_124;
          (*(void (**)(id *, uint64_t))(v43 + 96))(v68, v42);
          v73 = *v68;
          v77 = objc_msgSend(*v68, "pinnedDate");
          if (!v77)
          {

            v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
            v82 = &v189;
            goto LABEL_34;
          }
          v75 = v77;
          v76 = &v189;
        }
        v78 = *(v76 - 32);
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        v79 = v78;
        v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
        v80 = v79;
        v81 = 0;
LABEL_35:
        v72 = v183;
        v71(v80, v81, 1, v183);
        sub_1000A5CA8(v79, v65, (uint64_t *)&unk_1008380D0);
LABEL_36:
        v83 = v33;
        v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
        if (v84(v65, 1, v72) == 1)
        {
          sub_10000882C(v65, (uint64_t *)&unk_1008380D0);
          v43 = v184;
          v85 = *(void (**)(char *, uint64_t))(v184 + 8);
          v85((char *)v180, v42);
          v85(v176, v42);
          v86 = v182;
          v33 = v83;
          goto LABEL_38;
        }
        v89 = v65;
        v90 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
        v90(v173, v89, v72);
        v91 = v165;
        ((void (*)(void **, _QWORD, uint64_t))v181)(v165, v180, v42);
        v92 = v69(v91, v42);
        if (v92 != (_DWORD)v177)
        {
          v86 = v182;
          if (v92 == (_DWORD)v174)
          {
            (*(void (**)(void **, uint64_t))(v184 + 96))(v91, v42);
            v94 = *v91;
            v95 = objc_msgSend(v94, "pinnedDate");
            if (v95)
            {
              v96 = v95;
              v97 = (uint64_t)v155;
              goto LABEL_51;
            }
            v99 = 1;
            v97 = (uint64_t)v155;
          }
          else
          {
            v97 = (uint64_t)v156;
            if (v92 != (_DWORD)v172)
              goto LABEL_124;
            (*(void (**)(void **, uint64_t))(v184 + 96))(v91, v42);
            v94 = *v91;
            v98 = objc_msgSend(v94, "pinnedDate");
            if (v98)
            {
              v96 = v98;
LABEL_51:
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

              v99 = 0;
            }
            else
            {
              v99 = 1;
            }
          }

          v100 = v99;
          v72 = v183;
          v71(v97, v100, 1, v183);
          v93 = v167;
          sub_1000A5CA8(v97, v167, (uint64_t *)&unk_1008380D0);
          goto LABEL_56;
        }
        (*(void (**)(void **, uint64_t))(v184 + 8))(v91, v42);
        v93 = v167;
        v71(v167, 1, 1, v72);
        v86 = v182;
LABEL_56:
        if (v84(v93, 1, v72) == 1)
        {
          v33 = v178;
          (*(void (**)(char *, uint64_t))(v178 + 8))(v173, v72);
          sub_10000882C(v93, (uint64_t *)&unk_1008380D0);
          v43 = v184;
          v101 = *(void (**)(char *, uint64_t))(v184 + 8);
          v101((char *)v180, v42);
          v101(v176, v42);
          v65 = (uint64_t)v169;
LABEL_59:
          v87 = v187;
          v107 = v186 + v179;
          if (v187 < v186 || v187 >= v107)
          {
            swift_arrayInitWithTakeFrontToBack(v187);
          }
          else if (v187 != v186)
          {
            swift_arrayInitWithTakeBackToFront(v187);
          }
          v186 = v107;
          v88 = a2;
          goto LABEL_65;
        }
        v102 = v159;
        v90(v159, v93, v72);
        v103 = v173;
        v104 = static Date.< infix(_:_:)(v173, v102);
        v33 = v178;
        v105 = *(void (**)(char *, uint64_t))(v178 + 8);
        v105(v102, v72);
        v105(v103, v72);
        v43 = v184;
        v106 = *(void (**)(char *, uint64_t))(v184 + 8);
        v106((char *)v180, v42);
        v106(v176, v42);
        v65 = (uint64_t)v169;
        if ((v104 & 1) == 0)
          goto LABEL_59;
LABEL_38:
        v87 = v187;
        v88 = a2 + v179;
        if (v187 < a2 || v187 >= v88)
        {
          swift_arrayInitWithTakeFrontToBack(v187);
        }
        else if (v187 == a2)
        {
          v87 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v187);
        }
LABEL_65:
        v187 = v87 + v179;
        a4 = v186;
        if (v186 < v175)
        {
          a2 = v88;
          if (v88 < v86)
            continue;
        }
        goto LABEL_120;
      }
    }
    goto LABEL_120;
  }
LABEL_125:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003F16D0(uint64_t a1, uint64_t a2)
{
  return sub_1003F171C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1003F1AB8);
}

uint64_t sub_1003F171C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = isStackAllocationSafe;
  v6 = *(_BYTE *)(a2 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = a3((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, v5, a2);
    swift_release(a2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v10, -1);
    bzero(v12, v10);
    v11 = a3((char *)v12, v9, v5, a2);
    swift_release(a2);
    swift_slowDealloc(v12, -1, -1);
  }
  return v11;
}

void sub_1003F18A8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t j;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[9];
  uint64_t v34;

  v5 = a2;
  v32 = *(_QWORD *)(a3 + 16);
  if (!v32)
  {
    v27 = 0;
    goto LABEL_27;
  }
  v34 = a4 + 56;
  v31 = a3 + 32;
  swift_bridgeObjectRetain(a3);
  v29 = 0;
  for (i = 0; i != v32; ++i)
  {
    v7 = (uint64_t *)(v31 + 16 * i);
    v9 = *v7;
    v8 = v7[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(a4 + 40));
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v33, v9, v8);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(a4 + 32);
    v12 = v10 & ~v11;
    v13 = v12 >> 6;
    v14 = 1 << v12;
    if (((1 << v12) & *(_QWORD *)(v34 + 8 * (v12 >> 6))) == 0)
      goto LABEL_3;
    v15 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(v15 + 16 * v12);
    v17 = v16[1];
    v18 = *v16 == v9 && v17 == v8;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v9, v8, 0) & 1) == 0)
    {
      v21 = ~v11;
      for (j = v12 + 1; ; j = v23 + 1)
      {
        v23 = j & v21;
        if (((*(_QWORD *)(v34 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0)
          break;
        v24 = (_QWORD *)(v15 + 16 * v23);
        v25 = v24[1];
        v26 = *v24 == v9 && v25 == v8;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v9, v8, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v13 = v23 >> 6;
          v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v29++, 1))
    {
      __break(1u);
      return;
    }
  }
  swift_bridgeObjectRelease();
  v5 = a2;
  v27 = v29;
LABEL_27:
  swift_retain();
  sub_1002185C8(a1, v5, v27, a4);
}

void sub_1003F1AB8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  unint64_t i;
  unint64_t v36;
  id v37;
  char v38;
  unint64_t v39;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  _QWORD v50[5];
  void *v51;

  v4 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v5 = a3;
    else
      v5 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = type metadata accessor for REMObjectID_Codable(0);
    v8 = sub_10009FC50((unint64_t *)&unk_100840EC0, (uint64_t (*)(uint64_t))&type metadata accessor for REMObjectID_Codable, (uint64_t)&protocol conformance descriptor for NSObject);
    v9 = Set.Iterator.init(_cocoa:)(v50, v6, v7, v8);
    v4 = v50[0];
    v44 = v50[1];
    v10 = v50[2];
    v11 = v50[3];
    v12 = v50[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a3 + 32);
    v44 = a3 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v11 = 0;
  }
  v42 = 0;
  v43 = (unint64_t)(v10 + 64) >> 6;
  v47 = a4 + 56;
  v46 = v4;
LABEL_11:
  v16 = v11;
  v17 = v12;
  while (v4 < 0)
  {
    v20 = __CocoaSet.Iterator.next()(v9);
    if (!v20)
      goto LABEL_48;
    v21 = v20;
    v49 = v20;
    v22 = type metadata accessor for REMObjectID_Codable(0);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v51, &v49, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v51;
    swift_unknownObjectRelease(v21);
    v11 = v16;
    v18 = v17;
    if (!v23)
      goto LABEL_48;
LABEL_36:
    v27 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
    v28 = -1 << *(_BYTE *)(a4 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    v31 = 1 << v29;
    if (((1 << v29) & *(_QWORD *)(v47 + 8 * (v29 >> 6))) == 0)
      goto LABEL_12;
    type metadata accessor for REMObjectID_Codable(0);
    v32 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v29);
    v33 = static NSObject.== infix(_:_:)(v32);

    if ((v33 & 1) != 0)
    {

LABEL_44:
      v4 = v46;
      v39 = a1[v30];
      a1[v30] = v31 | v39;
      v16 = v11;
      v12 = v18;
      v17 = v18;
      if ((v31 & v39) == 0)
      {
        if (!__OFADD__(v42++, 1))
          goto LABEL_11;
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      v34 = ~v28;
      for (i = v29 + 1; ; i = v36 + 1)
      {
        v36 = i & v34;
        if (((*(_QWORD *)(v47 + (((i & v34) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v34)) & 1) == 0)
          break;
        v37 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v36);
        v38 = static NSObject.== infix(_:_:)(v37);

        if ((v38 & 1) != 0)
        {

          v30 = v36 >> 6;
          v31 = 1 << v36;
          goto LABEL_44;
        }
      }
LABEL_12:

      v16 = v11;
      v4 = v46;
      v17 = v18;
    }
  }
  if (v17)
  {
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
    v11 = v16;
LABEL_35:
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v19);
    if (!v23)
      goto LABEL_48;
    goto LABEL_36;
  }
  v24 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v24 >= v43)
      goto LABEL_48;
    v25 = *(_QWORD *)(v44 + 8 * v24);
    v11 = v16 + 1;
    if (!v25)
    {
      v11 = v16 + 2;
      if (v16 + 2 >= v43)
        goto LABEL_48;
      v25 = *(_QWORD *)(v44 + 8 * v11);
      if (!v25)
      {
        v11 = v16 + 3;
        if (v16 + 3 >= v43)
          goto LABEL_48;
        v25 = *(_QWORD *)(v44 + 8 * v11);
        if (!v25)
        {
          v11 = v16 + 4;
          if (v16 + 4 >= v43)
            goto LABEL_48;
          v25 = *(_QWORD *)(v44 + 8 * v11);
          if (!v25)
          {
            v11 = v16 + 5;
            if (v16 + 5 >= v43)
              goto LABEL_48;
            v25 = *(_QWORD *)(v44 + 8 * v11);
            if (!v25)
            {
              v26 = v16 + 6;
              while (v43 != v26)
              {
                v25 = *(_QWORD *)(v44 + 8 * v26++);
                if (v25)
                {
                  v11 = v26 - 1;
                  goto LABEL_34;
                }
              }
LABEL_48:
              sub_1000C6560(v4);
              swift_retain();
              sub_10021885C(a1, a2, v42, a4);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v18 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v11 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

void sub_1003F1ECC(uint64_t a1, void (*a2)(char *, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = sub_10001A630(&qword_1008490D8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v23)
        goto LABEL_23;
      v19 = *(_QWORD *)(v22 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v23)
          goto LABEL_23;
        v19 = *(_QWORD *)(v22 + 8 * v11);
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v23)
            goto LABEL_23;
          v19 = *(_QWORD *)(v22 + 8 * v11);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v6, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13, v15);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v6[*(int *)(v4 + 48)] = v16;
    v17 = swift_bridgeObjectRetain(v16);
    a2(v6, v16, v17);
    sub_10000882C((uint64_t)v6, &qword_1008490D8);
  }
  v20 = v18 + 4;
  if (v20 >= v23)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v23)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

_QWORD *sub_1003F2100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for REMAccount_Codable(0)), "initWithStore:storage:", a2, v7);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1003F2260(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t, __n128))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(id, uint64_t, __n128);
  _QWORD *v26;

  v25 = a4;
  v5 = v4;
  v24 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder(0);
  v8 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v12 = _swiftEmptyArrayStorage;
    if (!v11)
      return (uint64_t)v12;
    v26 = _swiftEmptyArrayStorage;
    result = sub_1001C1CE8(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
      break;
    v14 = 0;
    v12 = v26;
    v22 = v5;
    v23 = a1 & 0xC000000000000001;
    v15 = a1;
    while (v11 != v14)
    {
      if (v23)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a1);
      else
        v16 = *(id *)(a1 + 8 * v14 + 32);
      v17 = v16;
      v18 = swift_bridgeObjectRetain(a2);
      v25(v17, a2, v18);
      v26 = v12;
      v20 = v12[2];
      v19 = v12[3];
      v5 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        sub_1001C1CE8(v19 > 1, v20 + 1, 1);
        v12 = v26;
      }
      ++v14;
      v12[2] = v5;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20, v10, v24);
      a1 = v15;
      if (v11 == v14)
        return (uint64_t)v12;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *sub_1003F2434(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  Class isa;
  Class v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  _QWORD *v121;
  objc_class *v122;
  _QWORD *v123;
  unint64_t v124;
  _QWORD v125[6];
  void *v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;

  v122 = (objc_class *)a6;
  v119 = a3;
  v120 = a5;
  v123 = (_QWORD *)a4;
  v8 = type metadata accessor for Logger(0);
  v117 = *(_QWORD *)(v8 - 8);
  v118 = v8;
  __chkstk_darwin(v8);
  v115 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v116 = (char *)&v114 - v11;
  __chkstk_darwin(v12);
  v114 = (char *)&v114 - v13;
  v14 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v23 = (char *)&v114 - v22;
  v24 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend((id)a2, "type", v21));
  v25 = objc_msgSend(v24, "supportsCustomSmartLists");

  if (v25)
  {
    *(_QWORD *)v23 = a1;
    v23[8] = 1;
    swift_storeEnumTagMultiPayload(v23, v17, 3);
    v26 = qword_1008376D8;
    v27 = a1;
    if (v26 == -1)
      goto LABEL_3;
    goto LABEL_45;
  }
  *(_QWORD *)v19 = a1;
  v19[8] = 1;
  swift_storeEnumTagMultiPayload(v19, v17, 3);
  v38 = a1;
  sub_10000A3AC();
  v40 = v39;
  v41 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v42 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v43 = objc_msgSend((id)swift_getObjCClassFromMetadata(v41), "entity");
  objc_msgSend(v42, "setEntity:", v43);

  isa = v122;
  if (v122)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  v34 = (uint64_t)v123;
  objc_msgSend(v42, "setAffectedStores:", isa);

  objc_msgSend(v42, "setPredicate:", v40);
  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v45 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v42, "setSortDescriptors:", v45);

  v46 = (unint64_t)v121;
  v47 = (void *)NSManagedObjectContext.fetch<A>(_:)(v42, v41);
  v48 = v46;
  if (v46)
  {

    v37 = (uint64_t)v19;
LABEL_13:
    sub_10001C744(v37, _s10PredicatesOMa_1);
    return (_QWORD *)v34;
  }
  v126[0] = v47;
  v27 = (_QWORD *)sub_10001A630(&qword_10083FF50);
  v58 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v59 = Sequence.elements<A>(ofType:)(v41, v27, v41, v58);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v19, _s10PredicatesOMa_1);
  sub_1004A87E4(v59, v120);
  a2 = v60;
  swift_bridgeObjectRelease();
  if ((unint64_t)a2 >> 62)
    goto LABEL_47;
  v61 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v61)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    v122 = (objc_class *)v48;
    v130 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v61);
    if (v61 < 0)
      break;
    v16 = 0;
    v14 = a2 & 0xC000000000000001;
    v23 = (char *)&type metadata accessor for REMList_Codable;
    while (v61 != v16)
    {
      if (v14)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a2);
      else
        v65 = *(id *)(a2 + 8 * v16 + 32);
      v66 = v65;
      v67 = _s19PolymorphicListItemCMa();
      v68 = swift_allocObject(v67, 24, 7);
      v69 = type metadata accessor for REMList_Codable(0);
      v127 = v69;
      v128 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
      v129 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
      v126[0] = v66;
      sub_100385E40((uint64_t)v126, (uint64_t)v125);
      v70 = sub_10001A630(&qword_100849100);
      if (swift_dynamicCast(&v124, v125, v70, v69, 0))
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v62 = v124;
      }
      else
      {
        v71 = type metadata accessor for REMSmartList_Codable(0);
        if ((swift_dynamicCast(&v124, v125, v70, v71, 0) & 1) == 0)
          goto LABEL_81;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v62 = v124 | 0x8000000000000000;
      }
      *(_QWORD *)(v68 + 16) = v62;
      ++v16;
      v63 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v125);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v63);
      v27 = (_QWORD *)v130[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v64 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v68);
      specialized ContiguousArray._endMutation()(v64);
      if (v61 == v16)
      {
        v34 = (uint64_t)v130;
        swift_bridgeObjectRelease();
        return (_QWORD *)v34;
      }
    }
    __break(1u);
LABEL_45:
    swift_once(&qword_1008376D8, sub_1004A7104);
LABEL_3:
    v115 = (char *)a2;
    v28 = qword_1008721E0;
    sub_10000A3AC();
    v30 = (void *)v29;
    v31 = (void *)sub_100358F8C(0, v28, (uint64_t)v122, v29);

    if (qword_1008376D0 != -1)
      swift_once(&qword_1008376D0, sub_1004A7024);
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v32 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v31, "setSortDescriptors:", v32);

    v33 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v34 = (uint64_t)v123;
    v35 = v121;
    v36 = (void *)NSManagedObjectContext.fetch<A>(_:)(v31, v33);
    if (v35)
    {

      v37 = (uint64_t)v23;
      goto LABEL_13;
    }
    v121 = v27;
    v126[0] = v36;
    v50 = sub_10001A630(&qword_10083FF50);
    v51 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
    v52 = Sequence.elements<A>(ofType:)(v33, v50, v33, v51);
    swift_bridgeObjectRelease();

    sub_10001C744((uint64_t)v23, _s10PredicatesOMa_1);
    v53 = v120;
    sub_1004A87E4(v52, v120);
    v17 = v54;
    swift_bridgeObjectRelease();
    v55 = v121;
    *(_QWORD *)v16 = v121;
    *(_BYTE *)(v16 + 8) = 1;
    swift_storeEnumTagMultiPayload(v16, v14, 4);
    v56 = v55;
    v27 = v123;
    v57 = sub_10058C44C(v16, (uint64_t)v123, (uint64_t)v122);
    sub_10001C744(v16, _s10PredicatesOMa_3);
    v48 = 0;
    v41 = (uint64_t)sub_10058CE80(v57, v53);
    swift_bridgeObjectRelease();
    if ((unint64_t)v17 >> 62)
      goto LABEL_53;
    a2 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v122 = 0;
    if (!a2)
      goto LABEL_57;
LABEL_32:
    v121 = (_QWORD *)v41;
    v130 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(a2);
    if (a2 < 0)
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      if (qword_100837440 != -1)
        swift_once(&qword_100837440, sub_1003E64FC);
      v106 = v118;
      v107 = sub_10001AAA8(v118, (uint64_t)qword_100848F48);
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v115, v107, v106);
      while (1)
      {
LABEL_84:
        v108 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v109 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2uLL, v108, v109);
        __break(1u);
LABEL_85:
        if (qword_100837440 != -1)
          swift_once(&qword_100837440, sub_1003E64FC);
        v110 = v118;
        v111 = sub_10001AAA8(v118, (uint64_t)qword_100848F48);
        (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v114, v111, v110);
      }
    }
    v72 = 0;
    v48 = v17 & 0xC000000000000001;
    v41 = (uint64_t)&type metadata accessor for REMList_Codable;
    while (a2 != v72)
    {
      if (v48)
        v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v17);
      else
        v76 = *(id *)(v17 + 8 * v72 + 32);
      v77 = v76;
      v78 = _s19PolymorphicListItemCMa();
      v79 = swift_allocObject(v78, 24, 7);
      v80 = type metadata accessor for REMList_Codable(0);
      v127 = v80;
      v128 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
      v129 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
      v126[0] = v77;
      sub_100385E40((uint64_t)v126, (uint64_t)v125);
      v81 = sub_10001A630(&qword_100849100);
      if (swift_dynamicCast(&v124, v125, v81, v80, 0))
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v73 = v124;
      }
      else
      {
        v82 = type metadata accessor for REMSmartList_Codable(0);
        if ((swift_dynamicCast(&v124, v125, v81, v82, 0) & 1) == 0)
          goto LABEL_85;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v73 = v124 | 0x8000000000000000;
      }
      *(_QWORD *)(v79 + 16) = v73;
      ++v72;
      v74 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v125);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v74);
      v27 = (_QWORD *)v130[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v75 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v79);
      specialized ContiguousArray._endMutation()(v75);
      if (a2 == v72)
      {
        v83 = v130;
        swift_bridgeObjectRelease();
        v27 = v123;
        v41 = (uint64_t)v121;
        goto LABEL_58;
      }
    }
    __break(1u);
LABEL_47:
    if (a2 < 0)
      v84 = a2;
    else
      v84 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v61 = _CocoaArrayWrapper.endIndex.getter(v84);
    swift_bridgeObjectRelease();
    if (!v61)
      goto LABEL_51;
  }
  __break(1u);
LABEL_53:
  if (v17 < 0)
    v85 = v17;
  else
    v85 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  a2 = _CocoaArrayWrapper.endIndex.getter(v85);
  swift_bridgeObjectRelease();
  v122 = (objc_class *)v48;
  if (a2)
    goto LABEL_32;
LABEL_57:
  swift_bridgeObjectRelease();
  v83 = _swiftEmptyArrayStorage;
LABEL_58:
  if ((unint64_t)v41 >> 62)
    goto LABEL_73;
  v86 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v86)
  {
    v121 = v83;
    v130 = _swiftEmptyArrayStorage;
    v83 = &v130;
    specialized ContiguousArray.reserveCapacity(_:)(v86);
    if (v86 < 0)
      goto LABEL_80;
    v87 = 0;
    v88 = v41;
    v89 = v41 & 0xC000000000000001;
    v41 = (uint64_t)&type metadata accessor for REMSmartList_Codable;
    while (v86 != v87)
    {
      if (v89)
        v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v88);
      else
        v93 = *(id *)(v88 + 8 * v87 + 32);
      v94 = v93;
      v95 = _s19PolymorphicListItemCMa();
      v96 = swift_allocObject(v95, 24, 7);
      v97 = type metadata accessor for REMSmartList_Codable(0);
      v127 = v97;
      v128 = sub_10009FC50(&qword_100849108, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
      v129 = sub_10009FC50(&qword_100849110, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
      v126[0] = v94;
      sub_100385E40((uint64_t)v126, (uint64_t)v125);
      v98 = sub_10001A630(&qword_100849100);
      v99 = type metadata accessor for REMList_Codable(0);
      if (swift_dynamicCast(&v124, v125, v98, v99, 0))
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v90 = v124;
      }
      else
      {
        if ((swift_dynamicCast(&v124, v125, v98, v97, 0) & 1) == 0)
        {
          if (qword_100837440 != -1)
            swift_once(&qword_100837440, sub_1003E64FC);
          v112 = v118;
          v113 = sub_10001AAA8(v118, (uint64_t)qword_100848F48);
          (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v116, v113, v112);
          goto LABEL_84;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v126);
        v90 = v124 | 0x8000000000000000;
      }
      *(_QWORD *)(v96 + 16) = v90;
      ++v87;
      v91 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v125);
      v83 = &v130;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v91);
      v27 = (_QWORD *)v130[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v92 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v96);
      specialized ContiguousArray._endMutation()(v92);
      if (v86 == v87)
      {
        v100 = v130;
        swift_bridgeObjectRelease();
        v27 = v123;
        v83 = v121;
        goto LABEL_78;
      }
    }
    __break(1u);
LABEL_73:
    if (v41 < 0)
      v101 = v41;
    else
      v101 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v86 = _CocoaArrayWrapper.endIndex.getter(v101);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v100 = _swiftEmptyArrayStorage;
LABEL_78:
  v126[0] = v83;
  sub_1001E3658((uint64_t)v100);
  v102 = v126[0];
  v126[0] = v119;
  v103 = v119;
  v104 = objc_msgSend(v115, "remObjectID");
  v34 = sub_1003E63B4((uint64_t)v102, v104, v27, v126);
  v105 = v126[0];
  swift_bridgeObjectRelease();

  return (_QWORD *)v34;
}

uint64_t sub_1003F3220(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v8 = v7;
  v27 = a6;
  v28 = a7;
  v25 = a4;
  v26 = a5;
  v23 = a2;
  v24 = a3;
  v22 = type metadata accessor for REMAccountsListDataView.Model.AccountChild(0);
  v10 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (unint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v14 = _swiftEmptyArrayStorage;
    if (!v13)
      return (uint64_t)v14;
    v31 = _swiftEmptyArrayStorage;
    result = sub_1001C2388(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0)
      break;
    v16 = 0;
    v14 = v31;
    v21 = a1 & 0xC000000000000001;
    while (v13 != v16)
    {
      if (v21)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a1);
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_retain();
      }
      v30 = v17;
      sub_1003EBF00(&v30, v24, v25, v26, v27, v28, &v29, v12);
      if (v8)
      {
        swift_release(v14);
        swift_release(v17);
        return (uint64_t)v14;
      }
      v8 = 0;
      swift_release(v17);
      v31 = v14;
      v19 = v14[2];
      v18 = v14[3];
      if (v19 >= v18 >> 1)
      {
        sub_1001C2388(v18 > 1, v19 + 1, 1);
        v14 = v31;
      }
      ++v16;
      v14[2] = v19 + 1;
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(v10 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v19, v12, v22);
      if (v13 == v16)
        return (uint64_t)v14;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *sub_1003F341C(uint64_t a1, void *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(type metadata accessor for REMAccountsListDataView.Model.Account(0) - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    v9 = swift_bridgeObjectRetain(a1);
    do
    {
      v11 = (void *)REMAccountsListDataView.Model.Account.account.getter(v9);
      v12 = objc_msgSend(v11, "objectID");

      v13 = objc_msgSend(a2, "persistentStoreOfAccountWithAccountID:", v12);
      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        v9 = specialized Array._endMutation()(v10);
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1003F3568(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Predicate;
  uint64_t v23;
  uint64_t v25;
  _QWORD v27[5];
  uint64_t v28;

  v28 = a1;
  v3 = a2;
  v4 = a1;
  if (a2 >> 62)
    goto LABEL_14;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v25 = v3;
    v6 = v3 & 0xC000000000000001;
    v7 = 4;
    v8 = &selRef_showRemindersAsOverdue;
    while (1)
    {
      v4 = v7 - 4;
      v9 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v3) : *(id *)(v3 + 8 * v7);
      v10 = v9;
      v11 = v7 - 3;
      if (__OFADD__(v4, 1))
        break;
      v12 = objc_msgSend(v9, v8[2]);
      if (v12)
      {
        v13 = v12;
        v14 = (void *)REMSmartListCustomContext.filter.getter();

        if (v14)
        {
          v15 = v6;
          v16 = v5;
          v17 = static Set<>.typesSupportedByCustomSmartList.getter();
          v27[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
          v27[4] = sub_1003F66EC();
          v27[0] = a3;
          v18 = a3;
          v19 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v17, v27);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);

          v5 = v16;
          v6 = v15;
          v3 = v25;
          swift_bridgeObjectRelease();
          v27[0] = v19;
          v20 = sub_10001A630(&qword_100846700);
          v21 = sub_1000A5F84(&qword_100846708, &qword_100846700, (uint64_t)&protocol conformance descriptor for [A]);
          Predicate = Sequence<>.postFetchPredicateTypes.getter(v20, v21);
          v8 = &selRef_showRemindersAsOverdue;
          swift_bridgeObjectRelease();
          sub_1002B72AC(Predicate);
        }
      }

      ++v7;
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v28;
      }
    }
    __break(1u);
LABEL_14:
    if (v3 < 0)
      v23 = v3;
    else
      v23 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_1003F3760(void *a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t i;
  __n128 v8;
  uint64_t v9;
  uint64_t Predicate;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  char v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];

  v4 = v3;
  v43 = a3;
  i = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(i - 8);
  v8 = __chkstk_darwin(i);
  v44 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Predicate = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate(0, v8);
  v11 = *(_QWORD *)(Predicate - 8);
  v47 = Predicate;
  v48 = v11;
  __chkstk_darwin(Predicate);
  v46 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a2 >> 62)
  {
LABEL_16:
    if (a2 < 0)
      v34 = a2;
    else
      v34 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (!v13)
      goto LABEL_20;
  }
  else
  {
    v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v13)
      goto LABEL_20;
  }
  v41 = v4;
  v14 = 0;
  v39 = enum case for REMCustomSmartListFilterDescriptor.PostFetchPredicate.account(_:);
  v38 = xmmword_1006A3C00;
  v40 = i;
  while (2)
  {
    v45 = a1;
    for (i = v14; ; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      else
        v15 = *(id *)(a2 + 8 * i + 32);
      v4 = v15;
      v14 = i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
        goto LABEL_16;
      }
      v16 = objc_msgSend(v15, "customContext");
      if (v16)
      {
        a1 = v16;
        v17 = (void *)REMSmartListCustomContext.filter.getter();

        if (v17)
          break;
      }

      if (v14 == v13)
      {
        swift_bridgeObjectRelease();
        return v45;
      }
    }
    v18 = objc_msgSend(v4, "accountID");
    v19 = objc_msgSend(v18, "uuid");

    v20 = v46;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v21 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v48 + 104))(v20, v39, v47);
    v22 = static Set<>.typesSupportedByCustomSmartList.getter(v21);
    v49[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v49[4] = sub_1003F66EC();
    v49[0] = v43;
    v23 = v43;
    v37 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v22, v49);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v49);
    swift_bridgeObjectRelease();
    v24 = sub_10001A630(&qword_100844488);
    v25 = *(unsigned __int8 *)(v48 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject(v24, v26 + *(_QWORD *)(v48 + 72), v25 | 7);
    *(_OWORD *)(v27 + 16) = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v27 + v26, v46, v47);
    v49[0] = v37;
    sub_1001E34C8(v27);
    v37 = v49[0];
    v28 = objc_msgSend(v4, "objectID");
    v29 = objc_msgSend(v28, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v30 = v45;
    swift_isUniquelyReferenced_nonNull_native(v45);
    v49[0] = v30;
    v31 = v44;
    sub_10028DA64(v37, v44, v32);
    a1 = (void *)v49[0];
    v33 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v42 + 8))(v31, v40, v33);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
    if (v14 != v13)
      continue;
    break;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003F3B38(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;

  v4 = v3;
  v7 = (void *)a1;
  v15 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    for (i = 4; ; ++i)
    {
      v10 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v7 = v10;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v14 = v10;
      sub_1003EB8B0(&v15, &v14, a3);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v12 = a2;
    else
      v12 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v7;
}

_QWORD *sub_1003F3C68(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t Style;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  int v18;
  id v19;
  unsigned int *v20;
  __n128 v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v29 = a1;
  v4 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result(0, a3);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Style = type metadata accessor for REMAccountsListDataView.CachablePropertyFetchStyle(0, v5);
  v9 = *(_QWORD *)(Style - 8);
  v10 = __chkstk_darwin(Style);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMAccountsListDataView.FetchOptions.fetchSmartListHashtagLabels.getter(v15);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, Style);
  if (v18 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.doNotFetch(_:))
    return _swiftEmptyArrayStorage;
  if (v18 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.cachedOrStore(_:))
  {
    v20 = (unsigned int *)&enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.cachedOrStore(_:);
    goto LABEL_7;
  }
  if (v18 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.store(_:))
  {
    v20 = (unsigned int *)&enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.store(_:);
LABEL_7:
    v21.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, *v20, v13);
    v22 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation(0, v21);
    v23 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v22)), "init");
    v19 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    sub_1004D4F20((uint64_t)v19, &off_1007F7278, v30, (uint64_t)v17, (uint64_t)v7);

    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);

    }
    else
    {
      v19 = (id)REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.labels.getter(v24);
      REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.isUpToDate.getter();

      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    }
    return v19;
  }
  result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(Style, Style);
  __break(1u);
  return result;
}

void sub_1003F3ED4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, __n128);
  __n128 v60;
  void *v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  void (*v74)(char *, char *, char *);
  id v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t *v144;
  void (*v145)(char *, uint64_t *, char *);
  unint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  __n128 v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  void (*v158)(char *, uint64_t *, char *);
  char v159;
  unint64_t v160;
  unint64_t v161;
  void **v162;
  char *v163;
  void **v164;
  void *v165;
  void (*v166)(char *, void **, char *);
  id v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  void **v173;
  char *v174;
  void **v175;
  void *v176;
  void (*v177)(char *, void **, char *);
  id v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __n128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  void **v196;
  void **v197;
  char *v198;
  char *v199;
  uint64_t *v200;
  uint64_t *v201;
  char *v202;
  void *v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char v216[24];
  uint64_t v217;
  _QWORD v218[3];
  char v219[8];
  _QWORD *v220;
  uint64_t v221;
  char v222[8];
  _QWORD v223[5];
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;

  v210 = a4;
  v203 = a2;
  v208 = type metadata accessor for REMManualOrdering.Predefined(0);
  v207 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v206 = (char *)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, v9);
  v215 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v198 = (char *)&v186 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v196 = (void **)((char *)&v186 - v14);
  __chkstk_darwin(v15);
  v199 = (char *)&v186 - v16;
  __chkstk_darwin(v17);
  v197 = (void **)((char *)&v186 - v18);
  __chkstk_darwin(v19);
  v213 = (char *)&v186 - v20;
  __chkstk_darwin(v21);
  v212 = (uint64_t *)((char *)&v186 - v22);
  __chkstk_darwin(v23);
  v193 = (char *)&v186 - v24;
  __chkstk_darwin(v25);
  v200 = (uint64_t *)((char *)&v186 - v26);
  __chkstk_darwin(v27);
  v202 = (char *)&v186 - v28;
  __chkstk_darwin(v29);
  v201 = (uint64_t *)((char *)&v186 - v30);
  v194 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v194);
  v195 = (char *)&v186 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = (_QWORD *)_s10PredicatesOMa_1(0);
  __chkstk_darwin(v204);
  v205 = (char *)&v186 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for REMAccountsListDataView.Model.Account(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v186 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v186 - v39;
  if ((REMAccountsListDataView.FetchOptions.fetchOrderedPinnedLists.getter(v38) & 1) == 0)
    return;
  v192 = a3;
  if ((REMAccountsListDataView.FetchOptions.fetchAccounts.getter(v41) & 1) != 0)
  {
    v191 = v8;
    v42 = *(_QWORD *)v210;
    v43 = *(_QWORD *)(*(_QWORD *)v210 + 16);
    if (!v43)
      return;
    v190 = a1;
    v189 = v11;
    v188 = v7;
    v44 = v42 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    v211 = *(_QWORD *)(v34 + 72);
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16);
    v187 = v42;
    v46 = swift_bridgeObjectRetain_n(v42, 2);
    while (1)
    {
      v47 = v45(v40, v44, v33, v46);
      v48 = (void *)REMAccountsListDataView.Model.Account.account.getter(v47);
      v49 = objc_msgSend(v48, "capabilities");

      LODWORD(v48) = objc_msgSend(v49, "supportsPinnedLists");
      (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
      if ((_DWORD)v48)
        break;
      v44 += v211;
      if (!--v43)
      {
        swift_bridgeObjectRelease_n(v187, 2);
        return;
      }
    }
    v51 = swift_bridgeObjectRelease_n(v187, 2);
    v52 = v209;
    v7 = v188;
    v11 = v189;
    v8 = v191;
    a1 = v190;
  }
  else
  {
    v50 = (void *)sub_100300818();

    v52 = v209;
    if (!v50)
      return;
  }
  if ((REMAccountsListDataView.FetchOptions.fetchAccounts.getter(v51) & 1) != 0)
  {
    v190 = a1;
    v188 = v7;
    v54 = *(_QWORD *)v210;
    v55 = _swiftEmptyArrayStorage;
    v220 = _swiftEmptyArrayStorage;
    v56 = *(_QWORD *)(v54 + 16);
    if (v56)
    {
      v191 = v8;
      v189 = v11;
      v57 = v54 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
      v58 = *(_QWORD *)(v34 + 72);
      v59 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16);
      v60 = swift_bridgeObjectRetain_n(v54, 2);
      while (1)
      {
        v59(v36, v57, v33, v60);
        sub_1003EC88C((unint64_t *)&v220);
        if (v52)
          goto LABEL_106;
        v52 = 0;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        v57 += v58;
        if (!--v56)
        {
          v53 = swift_bridgeObjectRelease_n(v54, 2);
          v55 = v220;
          v11 = v189;
          v8 = v191;
          break;
        }
      }
    }
    v61 = v190;
    v36 = (char *)v214;
    goto LABEL_19;
  }
  v82 = (uint64_t)v205;
  swift_storeEnumTagMultiPayload(v205, v204, 22);
  sub_10000A3AC();
  v84 = v83;
  sub_10001C744(v82, _s10PredicatesOMa_1);
  if (qword_1008376D8 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v85 = (void *)sub_100358F8C(0, qword_1008721E0, 0, (uint64_t)v84);
  v86 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v87 = NSManagedObjectContext.fetch<A>(_:)(v85, v86);

  if (!v52)
  {
    sub_1004A87E4(v87, v203);
    v89 = v88;
    swift_bridgeObjectRelease();
    v211 = v89;
    v90 = (uint64_t)v195;
    swift_storeEnumTagMultiPayload(v195, v194, 9);
    sub_1000069D8();
    v92 = v91;
    sub_10001C744(v90, _s10PredicatesOMa_3);
    v93 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v94 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v95 = objc_msgSend((id)swift_getObjCClassFromMetadata(v93), "entity");
    v190 = a1;
    v96 = v95;
    objc_msgSend(v94, "setEntity:", v95);

    objc_msgSend(v94, "setAffectedStores:", 0);
    objc_msgSend(v94, "setPredicate:", v92);
    v97 = NSManagedObjectContext.fetch<A>(_:)(v94, v93);

    v123 = sub_10058CE80(v97, v203);
    v124 = v211;
    v34 = (uint64_t)v123;
    swift_bridgeObjectRelease();
    v210 = v34;
    if ((unint64_t)v124 >> 62)
    {
      if (v124 < 0)
        v183 = v124;
      else
        v183 = v124 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v124);
      v33 = _CocoaArrayWrapper.endIndex.getter(v183);
    }
    else
    {
      v33 = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10);
      v137 = swift_bridgeObjectRetain(v124);
    }
    v36 = (char *)v214;
    v209 = 0;
    v188 = v7;
    v189 = v11;
    v191 = v8;
    if (v33)
    {
      v138 = v215;
      if (v33 < 1)
      {
        __break(1u);
        goto LABEL_105;
      }
      if ((v211 & 0xC000000000000001) != 0)
      {
        v139 = 0;
        v140 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
        v141 = (char *)_swiftEmptyArrayStorage;
        v142 = v202;
        do
        {
          v143 = specialized _ArrayBuffer._getElementSlowPath(_:)(v139, v211);
          v144 = v201;
          *v201 = v143;
          (*(void (**)(uint64_t *, uint64_t, char *))(v138 + 104))(v144, v140, v36);
          v145 = *(void (**)(char *, uint64_t *, char *))(v138 + 32);
          v145(v142, v144, v36);
          v146 = (unint64_t)v141;
          swift_isUniquelyReferenced_nonNull_native(v141);
          if ((v147 & 1) == 0)
            v146 = sub_1002C84A0(0, *((_QWORD *)v141 + 2) + 1, 1, (unint64_t)v141);
          v141 = (char *)v146;
          v149 = *(_QWORD *)(v146 + 16);
          v148 = *(_QWORD *)(v146 + 24);
          if (v149 >= v148 >> 1)
            v141 = (char *)sub_1002C84A0(v148 > 1, v149 + 1, 1, v146);
          ++v139;
          *((_QWORD *)v141 + 2) = v149 + 1;
          v142 = v202;
          v145(&v141[((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(_QWORD *)(v138 + 72) * v149], (uint64_t *)v202, v36);
        }
        while (v33 != v139);
      }
      else
      {
        v162 = (void **)(v211 + 32);
        LODWORD(v205) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
        v204 = *(_QWORD **)(v215 + 104);
        v141 = (char *)_swiftEmptyArrayStorage;
        v163 = v199;
        v164 = v197;
        do
        {
          v165 = *v162;
          *v164 = *v162;
          ((void (*)(void **, _QWORD, char *, __n128))v204)(v164, v205, v36, v137);
          v166 = *(void (**)(char *, void **, char *))(v138 + 32);
          v166(v163, v164, v36);
          v167 = v165;
          v168 = (unint64_t)v141;
          swift_isUniquelyReferenced_nonNull_native(v141);
          if ((v169 & 1) == 0)
            v168 = sub_1002C84A0(0, *((_QWORD *)v141 + 2) + 1, 1, (unint64_t)v141);
          v141 = (char *)v168;
          v171 = *(_QWORD *)(v168 + 16);
          v170 = *(_QWORD *)(v168 + 24);
          if (v171 >= v170 >> 1)
            v141 = (char *)sub_1002C84A0(v170 > 1, v171 + 1, 1, v168);
          *((_QWORD *)v141 + 2) = v171 + 1;
          v172 = (unint64_t)&v141[((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80))
                                       + *(_QWORD *)(v215 + 72) * v171];
          v138 = v215;
          v163 = v199;
          v166((char *)v172, (void **)v199, v36);
          ++v162;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      v141 = (char *)_swiftEmptyArrayStorage;
      v138 = v215;
    }
    v204 = v141;
    swift_bridgeObjectRelease_n(v211, 2);
    v34 = v210;
    if ((unint64_t)v210 >> 62)
    {
      if (v210 < 0)
        v184 = v210;
      else
        v184 = v210 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v210);
      v33 = _CocoaArrayWrapper.endIndex.getter(v184);
    }
    else
    {
      v33 = *(_QWORD *)((v210 & 0xFFFFFFFFFFFFF8) + 0x10);
      v150 = swift_bridgeObjectRetain(v210);
    }
    v151 = v193;
    if (!v33)
    {
      v154 = (char *)_swiftEmptyArrayStorage;
LABEL_81:
      swift_bridgeObjectRelease_n(v210, 2);
      v220 = v204;
      sub_1001E1C0C((uint64_t)v154);
      v55 = v220;
      v52 = v209;
      v11 = v189;
      v8 = v191;
      v61 = v190;
LABEL_19:
      v221 = (uint64_t)v55;
      sub_1003ED510((unint64_t *)&v221, v53);
      v63 = static REMSmartListType.manualOrderablePredefinedSmartListTypes.getter(v62);
      v64 = v63;
      v65 = *(_QWORD *)(v63 + 16);
      v191 = v8;
      if (v65)
      {
        v190 = v61;
        v189 = v11;
        v209 = v52;
        LODWORD(v211) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
        v66 = v215;
        v210 = *(_QWORD *)(v215 + 104);
        v67 = swift_bridgeObjectRetain(v63);
        v68 = 0;
        v69 = _swiftEmptyArrayStorage;
        v70 = v213;
        do
        {
          v71 = v64;
          v72 = *(void **)(v64 + 8 * v68 + 32);
          v73 = (char *)v212;
          *v212 = v72;
          ((void (*)(char *, _QWORD, char *, __n128))v210)(v73, v211, v36, v67);
          v74 = *(void (**)(char *, char *, char *))(v66 + 32);
          v74(v70, v73, v36);
          v75 = v72;
          swift_isUniquelyReferenced_nonNull_native(v69);
          if ((v76 & 1) == 0)
            v69 = (_QWORD *)sub_1002C84A0(0, v69[2] + 1, 1, (unint64_t)v69);
          v78 = v69[2];
          v77 = v69[3];
          v70 = v213;
          v64 = v71;
          if (v78 >= v77 >> 1)
          {
            v81 = sub_1002C84A0(v77 > 1, v78 + 1, 1, (unint64_t)v69);
            v70 = v213;
            v69 = (_QWORD *)v81;
          }
          ++v68;
          v69[2] = v78 + 1;
          v79 = v215;
          v80 = (unint64_t)v69
              + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))
              + *(_QWORD *)(v215 + 72) * v78;
          v36 = (char *)v214;
          v74((char *)v80, v70, (char *)v214);
          v66 = v79;
        }
        while (v65 != v68);
        swift_bridgeObjectRelease();
        v52 = v209;
        v11 = v189;
        v8 = v191;
        v61 = v190;
      }
      else
      {
        v69 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      v220 = v69;
      sub_1001E1C0C(v221);
      v221 = (uint64_t)v220;
      v98 = v207;
      v99 = v206;
      v100 = v208;
      v101 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, enum case for REMManualOrdering.Predefined.pinned(_:), v208);
      REMManualOrdering.Predefined.manualOrderingID.getter(v101);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
      if (qword_100837958 != -1)
        swift_once(&qword_100837958, sub_1005B83A8);
      v102 = qword_100872288;
      v103 = (void *)swift_retain();
      v104 = sub_1003011F8(v103);
      swift_release(v102);
      if (v104)
      {
        v105 = objc_msgSend(v104, "remObjectID");
        if (v105)
        {
          v106 = v105;
          v107 = v61;
          v108 = (void *)REMManualOrdering.ManualOrderingID.listType.getter(v105);
          v109 = REMManualOrdering.ManualOrderingID.listID.getter();
          v111 = v110;
          if (qword_100837960 != -1)
            swift_once(&qword_100837960, sub_1005B8A54);
          v112 = qword_100872290;
          swift_retain();
          v113 = sub_1000D19A0(v108, v109, v111, v106, v107, 1, v112);
          if (v52)
          {
            (*(void (**)(char *, uint64_t))(v191 + 8))(v11, v188);

            swift_bridgeObjectRelease();
            swift_release(v112);
            if (qword_100837440 != -1)
              swift_once(&qword_100837440, sub_1003E64FC);
            v114 = type metadata accessor for Logger(0);
            sub_10001AAA8(v114, (uint64_t)qword_100848F48);
            swift_errorRetain(v52);
            v115 = swift_errorRetain(v52);
            v116 = Logger.logObject.getter(v115);
            v117 = static os_log_type_t.error.getter(v116);
            if (os_log_type_enabled(v116, v117))
            {
              v118 = (uint8_t *)swift_slowAlloc(12, -1);
              v119 = (_QWORD *)swift_slowAlloc(32, -1);
              v220 = v119;
              *(_DWORD *)v118 = 136315138;
              swift_getErrorValue(v52, v219, v218);
              v120 = Error.rem_errorDescription.getter(v218[1], v218[2]);
              v217 = sub_10001A820(v120, v121, (uint64_t *)&v220);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218);
              swift_bridgeObjectRelease();
              swift_errorRelease(v52);
              swift_errorRelease(v52);
              _os_log_impl((void *)&_mh_execute_header, v116, v117, "Failed to fetch manual sort hint of pinned lists {error: %s}", v118, 0xCu);
              swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v119, -1, -1);
              swift_slowDealloc(v118, -1, -1);

              swift_errorRelease(v52);
            }
            else
            {
              swift_errorRelease(v52);
              swift_errorRelease(v52);
              swift_errorRelease(v52);

            }
          }
          else
          {
            v122 = v113;
            swift_bridgeObjectRelease();
            swift_release(v112);
            if (v122)
            {
              sub_10019CD04((uint64_t)v222);
              sub_1000A5CA8((uint64_t)v222, (uint64_t)v223, (uint64_t *)&unk_1008458E0);
              v125 = v223[0];
              if (v223[0])
              {
                v189 = v11;
                v209 = 0;
                v126 = v223[1];
                v213 = (char *)v223[2];
                v214 = v223[3];
                v215 = v223[4];
                v127 = v104;
                v128 = sub_10053CA80();
                v129 = type metadata accessor for RDManualSortIDCache();
                v130 = v129;
                if (qword_1008376B8 != -1)
                  v129 = swift_once(&qword_1008376B8, sub_1004A3E44);
                v131 = qword_10084C438;
                __chkstk_darwin(v129);
                *(&v186 - 4) = v130;
                *(&v186 - 3) = (uint64_t)v128;
                *(&v186 - 2) = v131;
                OS_dispatch_queue.sync<A>(execute:)(&v220, sub_1001D8BB0);
                v132 = (uint64_t)v220;
                v133 = type metadata accessor for RDManualSortIDAdapter();
                swift_initStackObject(v133, v216);
                v134 = sub_10018C174(v132, (uint64_t)v128, 0);

                v136 = sub_100421890(v125, v106, v135, v134, v221);
                swift_release(v134);
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                v224 = v126;
                sub_1000F4320(&v224);
                v225 = v213;
                sub_1000F4320(&v225);
                v226 = v214;
                sub_1000F4320(&v226);
                v227 = v215;
                sub_1000F4320(&v227);

                (*(void (**)(char *, uint64_t))(v191 + 8))(v189, v188);
                v221 = v136;
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v191 + 8))(v11, v188);

              }
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v191 + 8))(v11, v188);

            }
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v188);

        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v188);
      }
      return;
    }
    if (v33 >= 1)
    {
      if ((v34 & 0xC000000000000001) != 0)
      {
        v152 = 0;
        v153 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
        v154 = (char *)_swiftEmptyArrayStorage;
        v155 = v138;
        do
        {
          v156 = specialized _ArrayBuffer._getElementSlowPath(_:)(v152, v210);
          v157 = v200;
          *v200 = v156;
          (*(void (**)(uint64_t *, uint64_t, char *))(v155 + 104))(v157, v153, v36);
          v158 = *(void (**)(char *, uint64_t *, char *))(v155 + 32);
          v158(v151, v157, v36);
          swift_isUniquelyReferenced_nonNull_native(v154);
          if ((v159 & 1) == 0)
            v154 = (char *)sub_1002C84A0(0, *((_QWORD *)v154 + 2) + 1, 1, (unint64_t)v154);
          v161 = *((_QWORD *)v154 + 2);
          v160 = *((_QWORD *)v154 + 3);
          if (v161 >= v160 >> 1)
            v154 = (char *)sub_1002C84A0(v160 > 1, v161 + 1, 1, (unint64_t)v154);
          ++v152;
          *((_QWORD *)v154 + 2) = v161 + 1;
          v155 = v215;
          v158(&v154[((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80))+ *(_QWORD *)(v215 + 72) * v161], (uint64_t *)v151, v36);
        }
        while (v33 != v152);
      }
      else
      {
        v173 = (void **)(v34 + 32);
        LODWORD(v211) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
        v205 = *(char **)(v138 + 104);
        v154 = (char *)_swiftEmptyArrayStorage;
        v174 = v198;
        v175 = v196;
        do
        {
          v176 = *v173;
          *v175 = *v173;
          ((void (*)(void **, _QWORD, char *, __n128))v205)(v175, v211, v36, v150);
          v177 = *(void (**)(char *, void **, char *))(v138 + 32);
          v177(v174, v175, v36);
          v178 = v176;
          swift_isUniquelyReferenced_nonNull_native(v154);
          if ((v179 & 1) == 0)
            v154 = (char *)sub_1002C84A0(0, *((_QWORD *)v154 + 2) + 1, 1, (unint64_t)v154);
          v181 = *((_QWORD *)v154 + 2);
          v180 = *((_QWORD *)v154 + 3);
          if (v181 >= v180 >> 1)
            v154 = (char *)sub_1002C84A0(v180 > 1, v181 + 1, 1, (unint64_t)v154);
          *((_QWORD *)v154 + 2) = v181 + 1;
          v138 = v215;
          v182 = (unint64_t)&v154[((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))
                                       + *(_QWORD *)(v215 + 72) * v181];
          v174 = v198;
          v36 = (char *)v214;
          v177((char *)v182, (void **)v198, (char *)v214);
          ++v173;
          --v33;
        }
        while (v33);
      }
      goto LABEL_81;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    v185 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v36, v33, v185);
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

uint64_t sub_1003F5474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100849050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1003F54BC(void *a1, NSObject *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char **v8;
  unint64_t v9;
  id v10;
  BOOL v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  void *ObjCClassFromMetadata;
  id v25;
  id v26;
  char **v27;
  char v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  char v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  os_log_type_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  id v80;
  os_log_type_t v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  os_log_type_t v85;
  const char *v86;
  uint64_t v87;
  id v88;
  os_log_type_t v89;
  uint64_t v90;
  _QWORD *v91;
  NSObject *v92;
  os_log_type_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  _DWORD *v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  os_log_type_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  os_log_type_t v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  id v135;
  NSObject *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  unint64_t v140;
  _BYTE v141[40];
  id v142;
  _QWORD v143[2];
  void *v144;

  sub_100502B8C(a1);
  if (!v2)
  {
    v5 = v4;
    v125 = 0;
    v144 = &_swiftEmptySetSingleton;
    v143[0] = &_swiftEmptySetSingleton;
    if (v4 >> 62)
      goto LABEL_112;
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v133 = v5 & 0xC000000000000001;
      v129 = v5 + 32;
      v130 = v5 & 0xFFFFFFFFFFFFFF8;
      v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      v8 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      v136 = a2;
      v131 = v5;
      v132 = v6;
      v9 = 0;
      while (1)
      {
        if (v133)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        }
        else
        {
          if (v9 >= *(_QWORD *)(v130 + 16))
            goto LABEL_111;
          v10 = *(id *)(v129 + 8 * v9);
        }
        v135 = v10;
        v11 = __OFADD__(v9, 1);
        v12 = v9 + 1;
        if (v11)
        {
          __break(1u);
          goto LABEL_110;
        }
        v13 = objc_msgSend(v10, "changes");
        v134 = v12;
        if (!v13)
        {
          if (qword_100837440 != -1)
            swift_once(&qword_100837440, sub_1003E64FC);
          v116 = type metadata accessor for Logger(0);
          sub_10001AAA8(v116, (uint64_t)qword_100848F48);
          v117 = v135;
          a2 = Logger.logObject.getter(v117);
          v118 = static os_log_type_t.info.getter(a2);
          if (os_log_type_enabled(a2, v118))
          {
            v119 = swift_slowAlloc(12, -1);
            v120 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v119 = 138412290;
            *(_QWORD *)(v119 + 4) = v117;
            *v120 = v117;
            _os_log_impl((void *)&_mh_execute_header, a2, v118, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v119, 0xCu);
            v121 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v120, 1, v121);
            v122 = v120;
            v5 = v131;
            swift_slowDealloc(v122, -1, -1);
            swift_slowDealloc(v119, -1, -1);

          }
          else
          {

          }
          goto LABEL_6;
        }
        a2 = v13;
        v14 = sub_1000151B0(0, &qword_10083FB80, NSPersistentHistoryChange_ptr);
        v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v14);

        if (!((unint64_t)v15 >> 62))
        {
          v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v16)
            break;
          goto LABEL_107;
        }
        v123 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        v16 = _CocoaArrayWrapper.endIndex.getter(v123);
        swift_bridgeObjectRelease();
        if (v16)
          break;
LABEL_107:

        swift_bridgeObjectRelease();
LABEL_6:
        v9 = v134;
        if (v134 == v132)
          goto LABEL_116;
      }
      if (v16 >= 1)
      {
        v17 = 0;
        v140 = v15 & 0xC000000000000001;
        v137 = v16;
        while (1)
        {
          if (v140)
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
          else
            v18 = *(id *)(v15 + 8 * v17 + 32);
          v19 = v18;
          if (objc_msgSend(v18, v7[465], v125) != (id)1)
          {
            if (qword_100837440 != -1)
              swift_once(&qword_100837440, sub_1003E64FC);
            v42 = type metadata accessor for Logger(0);
            sub_10001AAA8(v42, (uint64_t)qword_100848F48);
            v43 = v19;
            a2 = Logger.logObject.getter(v43);
            v44 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(a2, v44))
            {
              v45 = swift_slowAlloc(12, -1);
              v46 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v45 = 138412290;
              *(_QWORD *)(v45 + 4) = v43;
              *v46 = v43;
              _os_log_impl((void *)&_mh_execute_header, a2, v44, "Skipping change because it's not update {change: %@}", (uint8_t *)v45, 0xCu);
              v47 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v46, 1, v47);
              v48 = v46;
              v8 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
              swift_slowDealloc(v48, -1, -1);
              swift_slowDealloc(v45, -1, -1);

            }
            else
            {

            }
            goto LABEL_18;
          }
          v20 = v15;
          v21 = objc_msgSend(v19, "changedObjectID");
          v22 = objc_msgSend(v21, v8[214]);
          v23 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
          ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v23);
          v25 = v22;
          v26 = objc_msgSend(ObjCClassFromMetadata, v8[214]);
          sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
          v27 = v8;
          v28 = static NSObject.== infix(_:_:)(v26);

          if ((v28 & 1) != 0)
          {

            a2 = v136;
            v29 = sub_100500E7C(v21);
            if (v29)
            {
              v30 = v29;
              v31 = objc_opt_self(REMCDAccount);
              v32 = swift_dynamicCastObjCClass(v30, v31);
              v15 = v20;
              if (!v32)
              {
                v16 = v137;
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v79 = type metadata accessor for Logger(0);
                sub_10001AAA8(v79, (uint64_t)qword_100848F48);
                v80 = v21;
                a2 = Logger.logObject.getter(v80);
                v81 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(a2, v81))
                {

                  goto LABEL_97;
                }
                v138 = v19;
                v82 = swift_slowAlloc(12, -1);
                v83 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v82 = 138412290;
                *(_QWORD *)(v82 + 4) = v80;
                *v83 = v80;

                v84 = a2;
                v85 = v81;
                v86 = "Failed to cast managedObject to REMCDAccount {objectID: %@}";
                goto LABEL_89;
              }
              v33 = (void *)v32;
              v34 = v30;
              v35 = objc_msgSend(v33, "remObjectID");
              v16 = v137;
              if (v35)
              {
                v36 = v35;
                v37 = sub_10001A630((uint64_t *)&unk_10083AD90);
                inited = swift_initStackObject(v37, v141);
                *(_OWORD *)(inited + 16) = xmmword_1006A7330;
                KeyPath = swift_getKeyPath(&unk_1006BAB40);
                *(_QWORD *)(inited + 32) = KeyPath;
                v142 = (id)inited;
                specialized Array._endMutation()(KeyPath);
                LOBYTE(inited) = sub_1003EC3AC((unint64_t)v142);
                swift_bridgeObjectRelease();
                if ((inited & 1) != 0)
                {
                  v41 = (void *)REMObjectID.codable.getter(v40);
                  a2 = &v144;
LABEL_38:
                  sub_1002DB304((Swift::Int *)&v142, v41);

                  goto LABEL_39;
                }
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v95 = type metadata accessor for Logger(0);
                v96 = sub_10001AAA8(v95, (uint64_t)qword_100848F48);
                a2 = Logger.logObject.getter(v96);
                v97 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(a2, v97))
                {
                  v139 = v19;
                  v98 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v98 = 0;
                  _os_log_impl((void *)&_mh_execute_header, a2, v97, "Ignoring account change because it didn't update the name", v98, 2u);
                  swift_slowDealloc(v98, -1, -1);

                  goto LABEL_97;
                }

              }
              else
              {
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v87 = type metadata accessor for Logger(0);
                sub_10001AAA8(v87, (uint64_t)qword_100848F48);
                v88 = v21;
                a2 = Logger.logObject.getter(v88);
                v89 = static os_log_type_t.error.getter(a2);
                if (os_log_type_enabled(a2, v89))
                {
                  v138 = v19;
                  v90 = swift_slowAlloc(12, -1);
                  v91 = (_QWORD *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v90 = 138412290;
                  *(_QWORD *)(v90 + 4) = v88;
                  *v91 = v88;

                  v92 = a2;
                  v93 = v89;
                  v94 = "Failed to get remObjectID from REMCDAccount {objectID: %@}";
                  goto LABEL_76;
                }

              }
              goto LABEL_97;
            }

            v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
            v8 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
            v15 = v20;
            v16 = v137;
          }
          else
          {
            v138 = v19;
            v49 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
            v50 = (void *)swift_getObjCClassFromMetadata(v49);
            v51 = v25;
            v52 = objc_msgSend(v50, v27[214]);
            v53 = static NSObject.== infix(_:_:)(v52);

            v8 = v27;
            if ((v53 & 1) != 0)
            {

              a2 = v136;
              v54 = sub_100500E7C(v21);
              v15 = v20;
              if (v54)
              {
                v30 = v54;
                v55 = objc_opt_self(REMCDList);
                v56 = swift_dynamicCastObjCClass(v30, v55);
                v16 = v137;
                v19 = v138;
                if (!v56)
                {
                  if (qword_100837440 != -1)
                    swift_once(&qword_100837440, sub_1003E64FC);
                  v99 = type metadata accessor for Logger(0);
                  sub_10001AAA8(v99, (uint64_t)qword_100848F48);
                  v80 = v21;
                  a2 = Logger.logObject.getter(v80);
                  v100 = static os_log_type_t.fault.getter();
                  if (os_log_type_enabled(a2, v100))
                  {
                    v82 = swift_slowAlloc(12, -1);
                    v83 = (_QWORD *)swift_slowAlloc(8, -1);
                    *(_DWORD *)v82 = 138412290;
                    *(_QWORD *)(v82 + 4) = v80;
                    *v83 = v80;
                    v84 = a2;
                    v85 = v100;
                    v86 = "Failed to cast managedObject to REMCDList {objectID: %@}";
LABEL_89:
                    _os_log_impl((void *)&_mh_execute_header, v84, v85, v86, (uint8_t *)v82, 0xCu);
                    v115 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v83, 1, v115);
                    swift_slowDealloc(v83, -1, -1);
                    swift_slowDealloc(v82, -1, -1);

                    goto LABEL_96;
                  }
                  goto LABEL_90;
                }
                v57 = (void *)v56;
                v34 = v30;
                v58 = objc_msgSend(v57, "remObjectID");
                if (v58)
                {
                  v36 = v58;
                  v41 = (void *)REMObjectID.codable.getter(v58);
                  a2 = v143;
                  goto LABEL_38;
                }
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v101 = type metadata accessor for Logger(0);
                sub_10001AAA8(v101, (uint64_t)qword_100848F48);
                v88 = v21;
                a2 = Logger.logObject.getter(v88);
                v102 = static os_log_type_t.error.getter(a2);
                if (!os_log_type_enabled(a2, v102))
                {

                  goto LABEL_97;
                }
                v90 = swift_slowAlloc(12, -1);
                v91 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v90 = 138412290;
                *(_QWORD *)(v90 + 4) = v88;
                *v91 = v88;
                v92 = a2;
                v93 = v102;
                v94 = "Failed to get remObjectID from REMCDList {objectID: %@}";
LABEL_76:
                _os_log_impl((void *)&_mh_execute_header, v92, v93, v94, (uint8_t *)v90, 0xCu);
                v103 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v91, 1, v103);
                swift_slowDealloc(v91, -1, -1);
                swift_slowDealloc(v90, -1, -1);

                goto LABEL_95;
              }

              v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
              v16 = v137;
            }
            else
            {
              v59 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
              v60 = objc_msgSend((id)swift_getObjCClassFromMetadata(v59), v27[214]);
              v61 = static NSObject.== infix(_:_:)(v60);

              v15 = v20;
              if ((v61 & 1) == 0)
              {
                v16 = v137;
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v72 = type metadata accessor for Logger(0);
                sub_10001AAA8(v72, (uint64_t)qword_100848F48);
                v73 = v21;
                a2 = Logger.logObject.getter(v73);
                v74 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(a2, v74))
                {
                  v75 = swift_slowAlloc(12, -1);
                  v76 = (_QWORD *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v75 = 138412290;
                  *(_QWORD *)(v75 + 4) = v73;
                  *v76 = v73;
                  _os_log_impl((void *)&_mh_execute_header, a2, v74, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v75, 0xCu);
                  v77 = sub_10001A630((uint64_t *)&unk_100839E70);
                  swift_arrayDestroy(v76, 1, v77);
                  v78 = v76;
                  v8 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
                  swift_slowDealloc(v78, -1, -1);
                  swift_slowDealloc(v75, -1, -1);

                }
                else
                {

                }
                v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
                goto LABEL_18;
              }
              a2 = v136;
              v62 = sub_100500E7C(v21);
              v16 = v137;
              v19 = v138;
              if (v62)
              {
                v30 = v62;
                v63 = objc_opt_self(REMCDReminder);
                v64 = swift_dynamicCastObjCClass(v30, v63);
                if (v64)
                {
                  v65 = (void *)v64;
                  v66 = v30;
                  v67 = objc_msgSend(v65, "list");
                  if (v67)
                  {
                    v68 = v67;
                    v69 = objc_msgSend(v67, "remObjectID");

                    if (v69)
                    {
                      v71 = (void *)REMObjectID.codable.getter(v70);
                      a2 = v143;
                      sub_1002DB304((Swift::Int *)&v142, v71);

LABEL_39:
LABEL_97:
                      v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
                      v8 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
                      goto LABEL_18;
                    }
                  }
                  if (qword_100837440 != -1)
                    swift_once(&qword_100837440, sub_1003E64FC);
                  v104 = type metadata accessor for Logger(0);
                  sub_10001AAA8(v104, (uint64_t)qword_100848F48);
                  v34 = v66;
                  a2 = Logger.logObject.getter(v34);
                  v105 = static os_log_type_t.info.getter(a2);
                  if (!os_log_type_enabled(a2, v105))
                  {

                    goto LABEL_97;
                  }
                  v127 = v105;
                  v106 = (_DWORD *)swift_slowAlloc(12, -1);
                  v126 = (void *)swift_slowAlloc(32, -1);
                  v142 = v126;
                  v128 = v106;
                  *v106 = 136315138;
                  v107 = objc_msgSend(v65, "remObjectID");
                  if (v107)
                  {
                    v108 = v107;
                    v109 = objc_msgSend(v107, "description");

                    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
                    v112 = v111;

                    v19 = v138;
                  }
                  else
                  {
                    v112 = 0xE300000000000000;
                    v110 = 7104878;
                  }
                  *(_QWORD *)(v128 + 1) = sub_10001A820(v110, v112, (uint64_t *)&v142);

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, a2, v127, "Updated reminder has no list -- skipping {reminder: %s}", (uint8_t *)v128, 0xCu);
                  swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v126, -1, -1);
                  swift_slowDealloc(v128, -1, -1);

LABEL_95:
LABEL_96:

                  goto LABEL_97;
                }
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v113 = type metadata accessor for Logger(0);
                sub_10001AAA8(v113, (uint64_t)qword_100848F48);
                v80 = v21;
                a2 = Logger.logObject.getter(v80);
                v114 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(a2, v114))
                {
                  v82 = swift_slowAlloc(12, -1);
                  v83 = (_QWORD *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v82 = 138412290;
                  *(_QWORD *)(v82 + 4) = v80;
                  *v83 = v80;
                  v84 = a2;
                  v85 = v114;
                  v86 = "Failed to cast managedObject to REMCDReminder {objectID: %@}";
                  goto LABEL_89;
                }
LABEL_90:

                goto LABEL_97;
              }

              v7 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
            }
          }
LABEL_18:
          if (v16 == ++v17)
          {

            swift_bridgeObjectRelease();
            v5 = v131;
            goto LABEL_6;
          }
        }
      }
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      if (v5 < 0)
        v124 = v5;
      else
        v124 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v124);
      swift_bridgeObjectRelease();
    }
LABEL_116:
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1003F6608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100849078;
  if (!qword_100849078)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100849078);
  }
  return result;
}

uint64_t _s5CacheVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100849170;
  if (!qword_100849170)
    return swift_getSingletonMetadata(a1, &_s5CacheVMn);
  return result;
}

uint64_t sub_1003F669C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s5CacheVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003F66E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1003EB548(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(_BYTE **)(v2 + 32), *(_QWORD **)(v2 + 40));
}

unint64_t sub_1003F66EC()
{
  unint64_t result;

  result = qword_1008490E8;
  if (!qword_1008490E8)
  {
    result = swift_getWitnessTable(&unk_1006ACF74, &type metadata for ReminderIDsWithMatchingHashtagsProvider);
    atomic_store(result, (unint64_t *)&qword_1008490E8);
  }
  return result;
}

id sub_1003F6730@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002A6DFC(a1, a2);
}

void sub_1003F6748(void *a1, void *a2)
{
  uint64_t v2;

  sub_1003EBDB0(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_1003F6764(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD v93[6];
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;

  v7 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  __chkstk_darwin(v7);
  v9 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v84 - v11;
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v84 - v15;
  v17 = objc_msgSend(objc_allocWithZone((Class)REMAccountCapabilities), "initWithAccountType:", (int)objc_msgSend((id)a1, "type", v14));
  v18 = (uint64_t)objc_msgSend(v17, "supportsCustomSmartLists");

  v19 = sub_10034C174(a2);
  if (!(_DWORD)v18)
  {
    if (v3)
      return;
    sub_1004A87E4(v19, a3);
    a2 = v22;
    v33 = 0;
    swift_bridgeObjectRelease();
    if ((unint64_t)a2 >> 62)
    {
LABEL_36:
      if (a2 < 0)
        v46 = a2;
      else
        v46 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      a1 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease();
      if (a1)
        goto LABEL_7;
    }
    else
    {
      a1 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (a1)
      {
LABEL_7:
        v89 = v33;
        v98 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(a1);
        if ((a1 & 0x8000000000000000) == 0)
        {
          v12 = 0;
          v33 = a2 & 0xC000000000000001;
          v16 = (char *)&type metadata accessor for REMList_Codable;
          while (1)
          {
            if ((char *)a1 == v12)
            {
              __break(1u);
              goto LABEL_35;
            }
            if (v33)
              v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
            else
              v26 = *(id *)(a2 + 8 * (_QWORD)v12 + 32);
            v27 = v26;
            v28 = _s19PolymorphicListItemCMa();
            v29 = swift_allocObject(v28, 24, 7);
            v30 = type metadata accessor for REMList_Codable(0);
            v95 = v30;
            v96 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
            v97 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
            v94[0] = v27;
            sub_100385E40((uint64_t)v94, (uint64_t)v93);
            v31 = sub_10001A630(&qword_100849100);
            if (swift_dynamicCast(&v92, v93, v31, v30, 0))
            {
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
              v23 = v92;
            }
            else
            {
              v32 = type metadata accessor for REMSmartList_Codable(0);
              if ((swift_dynamicCast(&v92, v93, v31, v32, 0) & 1) == 0)
              {
                if (qword_100837440 != -1)
                  swift_once(&qword_100837440, sub_1003E64FC);
                v72 = v91;
                v73 = sub_10001AAA8(v91, (uint64_t)qword_100848F48);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v9, v73, v72);
                v74 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
                v75 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
                sub_1004A14D8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2uLL, v74, v75);
                __break(1u);
                goto LABEL_86;
              }
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
              v23 = v92 | 0x8000000000000000;
            }
            *(_QWORD *)(v29 + 16) = v23;
            ++v12;
            v24 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v93);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
            v18 = v98[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
            v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v29);
            specialized ContiguousArray._endMutation()(v25);
            if ((char *)a1 == v12)
            {
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
        __break(1u);
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRelease();
    return;
  }
  if (v3)
    return;
  sub_1004A87E4(v19, a3);
  v9 = v20;
  swift_bridgeObjectRelease();
  v21 = sub_10034D638(a1, (_QWORD *)a2, 0);
  v33 = 0;
  v18 = (uint64_t)sub_10058CE80(v21, a3);
  swift_bridgeObjectRelease();
  if ((unint64_t)v9 >> 62)
  {
LABEL_42:
    if (v9 < 0)
      v47 = v9;
    else
      v47 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v34 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease();
    v89 = v18;
    if (v34)
      goto LABEL_22;
    goto LABEL_46;
  }
  v34 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v89 = v18;
  if (v34)
  {
LABEL_22:
    v98 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v34);
    if ((v34 & 0x8000000000000000) == 0)
    {
      v18 = 0;
      v86 = (_QWORD *)(v9 & 0xC000000000000001);
      v87 = v34;
      v88 = v9;
      v85 = a2;
      while (1)
      {
        if (v34 == v18)
        {
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if (v86)
          v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v9);
        else
          v38 = *(id *)(v9 + 8 * v18 + 32);
        v39 = v38;
        v40 = _s19PolymorphicListItemCMa();
        v41 = swift_allocObject(v40, 24, 7);
        v42 = type metadata accessor for REMList_Codable(0);
        v95 = v42;
        v96 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
        v97 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
        v94[0] = v39;
        sub_100385E40((uint64_t)v94, (uint64_t)v93);
        v43 = sub_10001A630(&qword_100849100);
        if (swift_dynamicCast(&v92, v93, v43, v42, 0))
        {
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
          *(_QWORD *)(v41 + 16) = v92;
          a2 = v85;
        }
        else
        {
          v44 = type metadata accessor for REMSmartList_Codable(0);
          v45 = swift_dynamicCast(&v92, v93, v43, v44, 0);
          a2 = v85;
          if ((v45 & 1) == 0)
          {
LABEL_86:
            if (qword_100837440 != -1)
              swift_once(&qword_100837440, sub_1003E64FC);
            v76 = v91;
            v77 = sub_10001AAA8(v91, (uint64_t)qword_100848F48);
            (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v16, v77, v76);
            v78 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            v79 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            sub_1004A14D8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2uLL, v78, v79);
            __break(1u);
LABEL_89:
            if (qword_100837440 != -1)
              swift_once(&qword_100837440, sub_1003E64FC);
            v80 = v91;
            v81 = sub_10001AAA8(v91, (uint64_t)qword_100848F48);
            (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v12, v81, v80);
            v82 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            v83 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            sub_1004A14D8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2uLL, v82, v83);
            __break(1u);
            return;
          }
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
          *(_QWORD *)(v41 + 16) = v92 | 0x8000000000000000;
        }
        ++v18;
        v35 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v93);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        v36 = v98[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v41);
        specialized ContiguousArray._endMutation()(v37);
        v34 = v87;
        v9 = v88;
        if (v87 == v18)
        {
          v86 = v98;
          swift_bridgeObjectRelease();
          v18 = v89;
          goto LABEL_47;
        }
      }
    }
    __break(1u);
    goto LABEL_77;
  }
LABEL_46:
  swift_bridgeObjectRelease();
  v86 = _swiftEmptyArrayStorage;
LABEL_47:
  if ((unint64_t)v18 >> 62)
    goto LABEL_62;
  v34 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v34)
  {
    while (1)
    {
      v98 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v34);
      if (v34 < 0)
        break;
      v48 = 0;
      v87 = v34;
      v88 = v18 & 0xC000000000000001;
      while (v34 != v48)
      {
        if (v88)
          v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v18);
        else
          v53 = *(id *)(v18 + 8 * v48 + 32);
        v54 = v53;
        v55 = _s19PolymorphicListItemCMa();
        v56 = swift_allocObject(v55, 24, 7);
        v57 = type metadata accessor for REMSmartList_Codable(0);
        v95 = v57;
        v96 = sub_10009FC50(&qword_100849108, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
        v97 = sub_10009FC50(&qword_100849110, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
        v94[0] = v54;
        sub_100385E40((uint64_t)v94, (uint64_t)v93);
        v58 = sub_10001A630(&qword_100849100);
        v59 = type metadata accessor for REMList_Codable(0);
        if (swift_dynamicCast(&v92, v93, v58, v59, 0))
        {
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
          v49 = v92;
        }
        else
        {
          if ((swift_dynamicCast(&v92, v93, v58, v57, 0) & 1) == 0)
            goto LABEL_89;
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v94);
          v49 = v92 | 0x8000000000000000;
        }
        *(_QWORD *)(v56 + 16) = v49;
        ++v48;
        v50 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v93);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
        v51 = v98[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
        v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v56);
        specialized ContiguousArray._endMutation()(v52);
        v34 = v87;
        v18 = v89;
        if (v87 == v48)
        {
          v60 = v98;
          swift_bridgeObjectRelease();
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_62:
      if (v18 < 0)
        v61 = v18;
      else
        v61 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v34 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease();
      if (!v34)
        goto LABEL_66;
    }
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  v60 = _swiftEmptyArrayStorage;
LABEL_67:
  v94[0] = v86;
  sub_1001E3658((uint64_t)v60);
  v34 = v94[0];
  v62 = objc_msgSend((id)a1, "remObjectID");
  if (v62)
  {
    a1 = (uint64_t)v62;
    if (!((unint64_t)v34 >> 62))
    {
      v63 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      v64 = v62;
      if (v63 <= 1)
      {
LABEL_82:

        return;
      }
LABEL_70:
      sub_100204328((void *)a1, (void *)a2);
      if (v33)
      {

        swift_errorRelease(v33);
        return;
      }
      v66 = v65;
      if (v65)
      {
        v67 = _s19PolymorphicListItemCMa();
        v68 = v66;
        REMOrderedIdentifierMap.reorder<A>(objects:)(v34, v67);
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_82;
    }
LABEL_78:
    if (v34 < 0)
      v69 = v34;
    else
      v69 = v34 & 0xFFFFFFFFFFFFFF8;
    v70 = (id)a1;
    swift_bridgeObjectRetain(v34);
    v71 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease();
    if (v71 <= 1)
      goto LABEL_82;
    goto LABEL_70;
  }
}

uint64_t *sub_1003F722C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_1003F72B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1003F72FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_1003F735C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_1003F73C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003F7420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_1003F7484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F7490);
}

uint64_t sub_1003F7490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1003F750C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F7518);
}

uint64_t sub_1003F7518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for REMAccountsListDataView.ReminderCounts(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1003F7590(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for REMAccountsListDataView.ReminderCounts(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1003F7604()
{
  unint64_t result;

  result = qword_1008491B0;
  if (!qword_1008491B0)
  {
    result = swift_getWitnessTable(&unk_1006BAC84, &_s5CacheV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1008491B0);
  }
  return result;
}

uint64_t sub_1003F7648(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7265646E696D6572 && a2 == 0xEE0073746E756F43)
  {
    v5 = 0xEE0073746E756F43;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEE0073746E756F43, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F74, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t _s5CacheV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003F77A0 + 4 * byte_1006BAA85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003F77D4 + 4 * byte_1006BAA80[v4]))();
}

uint64_t sub_1003F77D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F77DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003F77E4);
  return result;
}

uint64_t sub_1003F77F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003F77F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003F77FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F7804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s5CacheV10CodingKeysOMa()
{
  return &_s5CacheV10CodingKeysON;
}

unint64_t sub_1003F7824()
{
  unint64_t result;

  result = qword_1008491D8;
  if (!qword_1008491D8)
  {
    result = swift_getWitnessTable(&unk_1006BAC5C, &_s5CacheV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1008491D8);
  }
  return result;
}

unint64_t sub_1003F786C()
{
  unint64_t result;

  result = qword_1008491E0;
  if (!qword_1008491E0)
  {
    result = swift_getWitnessTable(&unk_1006BABCC, &_s5CacheV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1008491E0);
  }
  return result;
}

unint64_t sub_1003F78B4()
{
  unint64_t result;

  result = qword_1008491E8;
  if (!qword_1008491E8)
  {
    result = swift_getWitnessTable(&unk_1006BABF4, &_s5CacheV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1008491E8);
  }
  return result;
}

ValueMetadata *_s34PersistentHistoryTruncationHandlerOMa()
{
  return &_s34PersistentHistoryTruncationHandlerON;
}

void sub_1003F790C(char a1, void *a2, uint64_t a3)
{
  sub_1003F7954(a1, a2, a3, off_1007D6658, &qword_10083AA30);
}

void sub_1003F7930(char a1, void *a2, uint64_t a3)
{
  sub_1003F7954(a1, a2, a3, off_1007D6660, (unint64_t *)&unk_1008398F0);
}

void sub_1003F7954(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  id v6;
  id v10;
  unint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  NSString v54;
  uint64_t v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  NSString v72;
  uint64_t v73;
  NSObject *log;
  os_log_type_t type;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;

  LODWORD(v6) = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v10 = a2;
    v11 = sub_1002C66DC((uint64_t)v10);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v11);

      v14 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v13, v14))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v15 = type metadata accessor for Logger(0);
        sub_10001AAA8(v15, (uint64_t)qword_100847400);
        v16 = v13;
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.fault.getter();
        v19 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v17, v18))
        {
          v20 = swift_slowAlloc(32, -1);
          v76 = swift_slowAlloc(96, -1);
          v80 = v76;
          *(_DWORD *)v20 = 136315650;
          if ((_DWORD)v6)
            v21 = 0x44496D72616C61;
          else
            v21 = 0x49746E756F636361;
          if ((_DWORD)v6)
            v22 = 0xE700000000000000;
          else
            v22 = 0xE900000000000044;
          v78 = (char)v6;
          v82 = sub_10001A820(v21, v22, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          v23 = sub_1000151B0(0, a5, a4);
          v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "description");
          log = v17;
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          type = v18;
          v26 = v16;
          v28 = v27;

          v82 = sub_10001A820(v25, v28, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
          *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v20 + 22) = 2080;
          v30 = objc_msgSend(v26, "description", v29);
          v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v32 = v31;

          v16 = v26;
          v33 = (uint64_t)v6;
          LOBYTE(v6) = v78;
          v82 = sub_10001A820(v33, v32, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

          v19 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          swift_slowDealloc(v20, -1, -1);

        }
        else
        {

        }
        v56 = (void *)objc_opt_self(REMError);
        v80 = 0;
        v81 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v57._countAndFlagsBits = 0xD000000000000029;
        v57._object = (void *)0x8000000100703300;
        String.append(_:)(v57);
        LOBYTE(v82) = (_BYTE)v6;
        _print_unlocked<A, B>(_:_:)(&v82, &v80, &type metadata for REMAlarmTriggerCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v58._object = (void *)0x8000000100703330;
        v58._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v58);
        v59 = sub_1000151B0(0, a5, a4);
        v60 = objc_msgSend((id)swift_getObjCClassFromMetadata(v59), v19[152]);
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v64._countAndFlagsBits = v61;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._object = (void *)0xE900000000000020;
        v65._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v65);
        v66 = objc_msgSend(v16, v19[152]);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        v70._countAndFlagsBits = v67;
        v70._object = v69;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        v71._countAndFlagsBits = 125;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        v72 = String._bridgeToObjectiveC()();
        objc_msgSend(v56, "internalErrorWithDebugDescription:", v72, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v73);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100847400);
  v35 = a2;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v77 = swift_slowAlloc(64, -1);
    v80 = v77;
    *(_DWORD *)v38 = 136315394;
    if ((_DWORD)v6)
      v39 = 0x44496D72616C61;
    else
      v39 = 0x49746E756F636361;
    if ((_DWORD)v6)
      v40 = 0xE700000000000000;
    else
      v40 = 0xE900000000000044;
    v79 = (char)v6;
    v82 = sub_10001A820(v39, v40, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v38 + 12) = 2080;
    v6 = objc_msgSend(v35, "description", v41);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v44 = v43;

    LOBYTE(v6) = v79;
    v82 = sub_10001A820(v42, v44, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
  v45 = (void *)objc_opt_self(REMError);
  v80 = 0;
  v81 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  v46._object = (void *)0x80000001007032E0;
  String.append(_:)(v46);
  LOBYTE(v82) = (_BYTE)v6;
  _print_unlocked<A, B>(_:_:)(&v82, &v80, &type metadata for REMAlarmTriggerCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v47._countAndFlagsBits = 0x7463656A626F202CLL;
  v47._object = (void *)0xEC000000203A4449;
  String.append(_:)(v47);
  v48 = objc_msgSend(v35, "description");
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  v52._countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 125;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  v54 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "internalErrorWithDebugDescription:", v54, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v55);
}

void sub_1003F8160(void *a1, uint64_t a2)
{
  sub_1003FF6CC(a1, a2, (uint64_t)&type metadata for REMManualOrderingCDIngestor.RelationshipKey);
}

void sub_1003F817C(char a1, void *a2, uint64_t a3)
{
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  NSString v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  NSString v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = objc_opt_self(REMCDAccount);
      if (!swift_dynamicCastObjCClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc(32, -1);
          v69 = swift_slowAlloc(96, -1);
          v73 = v69;
          *(_DWORD *)v15 = 136315650;
          v71 = a1;
          if (a1)
          {
            if (a1 == 1)
              v16 = 0x6341746E65726170;
            else
              v16 = 0xD000000000000014;
            if (a1 == 1)
              v17 = 0xEF4449746E756F63;
            else
              v17 = 0x80000001006F3EE0;
          }
          else
          {
            v16 = 0x49746E756F636361;
            v17 = 0xE900000000000044;
          }
          v75 = sub_10001A820(v16, v17, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          v41 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
          v42 = objc_msgSend((id)swift_getObjCClassFromMetadata(v41), "description");
          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v45 = v44;

          v75 = sub_10001A820(v43, v45, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
          *(_QWORD *)&v46 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v15 + 22) = 2080;
          v47 = objc_msgSend(v12, "description", v46);
          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v50 = v49;

          v75 = sub_10001A820(v48, v50, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy(v69, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v15, -1, -1);

          a1 = v71;
        }
        else
        {

        }
        v51 = (void *)objc_opt_self(REMError);
        v73 = 0;
        v74 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v52._countAndFlagsBits = 0xD000000000000029;
        v52._object = (void *)0x8000000100703300;
        String.append(_:)(v52);
        LOBYTE(v75) = a1;
        _print_unlocked<A, B>(_:_:)(&v75, &v73, &type metadata for REMTemplateStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v53._countAndFlagsBits = 0xD000000000000010;
        v53._object = (void *)0x8000000100703330;
        String.append(_:)(v53);
        v54 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
        v55 = objc_msgSend((id)swift_getObjCClassFromMetadata(v54), "description");
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
        v58 = v57;

        v59._countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._object = (void *)0xE900000000000020;
        v60._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v60);
        v61 = objc_msgSend(v12, "description");
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v64 = v63;

        v65._countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._countAndFlagsBits = 125;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        v67 = String._bridgeToObjectiveC()();
        objc_msgSend(v51, "internalErrorWithDebugDescription:", v67, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v68);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_100847400);
  v19 = a2;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v70 = swift_slowAlloc(64, -1);
    v73 = v70;
    *(_DWORD *)v22 = 136315394;
    v72 = a1;
    if (a1)
    {
      if (a1 == 1)
        v23 = 0x6341746E65726170;
      else
        v23 = 0xD000000000000014;
      if (a1 == 1)
        v24 = 0xEF4449746E756F63;
      else
        v24 = 0x80000001006F3EE0;
    }
    else
    {
      v23 = 0x49746E756F636361;
      v24 = 0xE900000000000044;
    }
    v75 = sub_10001A820(v23, v24, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);
    *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v22 + 12) = 2080;
    v26 = objc_msgSend(v19, "description", v25);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v75 = sub_10001A820(v27, v29, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    a1 = v72;
  }
  else
  {

  }
  v30 = (void *)objc_opt_self(REMError);
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  v31._object = (void *)0x80000001007032E0;
  String.append(_:)(v31);
  LOBYTE(v75) = a1;
  _print_unlocked<A, B>(_:_:)(&v75, &v73, &type metadata for REMTemplateStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32._countAndFlagsBits = 0x7463656A626F202CLL;
  v32._object = (void *)0xEC000000203A4449;
  String.append(_:)(v32);
  v33 = objc_msgSend(v19, "description");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 125;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "internalErrorWithDebugDescription:", v39, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v40);
}

void sub_1003F89E0(char a1, void *a2, uint64_t a3)
{
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  NSString v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  NSString v65;
  uint64_t v66;
  uint64_t v67;
  os_log_t log;
  char v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = type metadata accessor for REMCDTemplateSection();
      if (!swift_dynamicCastClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc(32, -1);
          v67 = swift_slowAlloc(96, -1);
          v71 = v67;
          *(_DWORD *)v15 = 136315650;
          v69 = a1;
          if (a1)
          {
            if (a1 == 1)
              v16 = 0x6341746E65726170;
            else
              v16 = 0xD000000000000014;
            if (a1 == 1)
              v17 = 0xEF4449746E756F63;
            else
              v17 = 0x80000001006F3EE0;
          }
          else
          {
            v16 = 0x49746E756F636361;
            v17 = 0xE900000000000044;
          }
          v73 = sub_10001A820(v16, v17, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          v41 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v44 = v43;

          v73 = sub_10001A820(v42, v44, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          *(_QWORD *)&v45 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v15 + 22) = 2080;
          v46 = objc_msgSend(v12, "description", v45);
          v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          v49 = v48;

          v73 = sub_10001A820(v47, v49, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v15, -1, -1);

          a1 = v69;
        }
        else
        {

        }
        v50 = (void *)objc_opt_self(REMError);
        v71 = 0;
        v72 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x8000000100703300;
        String.append(_:)(v51);
        LOBYTE(v73) = a1;
        _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMTemplateStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v52._countAndFlagsBits = 0xD000000000000010;
        v52._object = (void *)0x8000000100703330;
        String.append(_:)(v52);
        v53 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._object = (void *)0xE900000000000020;
        v58._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v58);
        v59 = objc_msgSend(v12, "description");
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        v65 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "internalErrorWithDebugDescription:", v65, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v66);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_100847400);
  v19 = a2;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    log = (os_log_t)swift_slowAlloc(64, -1);
    v71 = (uint64_t)log;
    *(_DWORD *)v22 = 136315394;
    v70 = a1;
    if (a1)
    {
      if (a1 == 1)
        v23 = 0x6341746E65726170;
      else
        v23 = 0xD000000000000014;
      if (a1 == 1)
        v24 = 0xEF4449746E756F63;
      else
        v24 = 0x80000001006F3EE0;
    }
    else
    {
      v23 = 0x49746E756F636361;
      v24 = 0xE900000000000044;
    }
    v73 = sub_10001A820(v23, v24, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v22 + 12) = 2080;
    v26 = objc_msgSend(v19, "description", v25);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v73 = sub_10001A820(v27, v29, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(log, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    a1 = v70;
  }
  else
  {

  }
  v30 = (void *)objc_opt_self(REMError);
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  v31._object = (void *)0x80000001007032E0;
  String.append(_:)(v31);
  LOBYTE(v73) = a1;
  _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMTemplateStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32._countAndFlagsBits = 0x7463656A626F202CLL;
  v32._object = (void *)0xEC000000203A4449;
  String.append(_:)(v32);
  v33 = objc_msgSend(v19, "description");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 125;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "internalErrorWithDebugDescription:", v39, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v40);
}

void sub_1003F9224(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMAlarmCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003F9250(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMAlarmCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003F927C(char a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t *a6)
{
  int v8;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  unint64_t v58;
  NSString v59;
  uint64_t v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v67;
  void *v68;
  Swift::String v69;
  Swift::String v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  unint64_t v77;
  NSString v78;
  uint64_t v79;
  NSObject *log;
  os_log_type_t type;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v8 = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v12 = a2;
    v13 = sub_1002C66DC((uint64_t)v12);
    if ((v14 & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v13);

      v16 = objc_opt_self(*a5);
      if (!swift_dynamicCastObjCClass(v15, v16))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_100847400);
        v18 = v15;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v19, v20))
        {
          type = v20;
          v21 = swift_slowAlloc(32, -1);
          v82 = swift_slowAlloc(96, -1);
          v86 = v82;
          *(_DWORD *)v21 = 136315650;
          if (v8)
            v22 = 0x7265646E696D6572;
          else
            v22 = 0x49746E756F636361;
          log = v19;
          if (v8)
            v23 = 0xEA00000000004449;
          else
            v23 = 0xE900000000000044;
          v84 = a4;
          v88 = sub_10001A820(v22, v23, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
          swift_bridgeObjectRelease(v23);
          *(_WORD *)(v21 + 12) = 2080;
          v24 = sub_1000151B0(0, a6, a5);
          v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "description");
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v27 = v18;
          v29 = v28;

          v88 = sub_10001A820(v26, v29, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
          *(_QWORD *)&v30 = swift_bridgeObjectRelease(v29).n128_u64[0];
          *(_WORD *)(v21 + 22) = 2080;
          v31 = objc_msgSend(v27, "description", v30);
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v34 = v33;

          v35 = v32;
          v18 = v27;
          v88 = sub_10001A820(v35, v34, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

          v36 = v34;
          a4 = v84;
          swift_bridgeObjectRelease(v36);
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v21, 0x20u);
          swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v82, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

        }
        v61 = (void *)objc_opt_self(REMError);
        v86 = 0;
        v87 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v62._countAndFlagsBits = 0xD000000000000029;
        v62._object = (void *)0x8000000100703300;
        String.append(_:)(v62);
        LOBYTE(v88) = v8;
        _print_unlocked<A, B>(_:_:)(&v88, &v86, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v63._object = (void *)0x8000000100703330;
        v63._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v63);
        v64 = sub_1000151B0(0, a6, a5);
        v65 = objc_msgSend((id)swift_getObjCClassFromMetadata(v64), "description");
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        v68 = v67;

        v69._countAndFlagsBits = v66;
        v69._object = v68;
        String.append(_:)(v69);
        swift_bridgeObjectRelease(v68);
        v70._object = (void *)0xE900000000000020;
        v70._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v70);
        v71 = objc_msgSend(v18, "description");
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        v74 = v73;

        v75._countAndFlagsBits = v72;
        v75._object = v74;
        String.append(_:)(v75);
        swift_bridgeObjectRelease(v74);
        v76._countAndFlagsBits = 125;
        v76._object = (void *)0xE100000000000000;
        String.append(_:)(v76);
        v77 = v87;
        v78 = String._bridgeToObjectiveC()();
        objc_msgSend(v61, "internalErrorWithDebugDescription:", v78, swift_bridgeObjectRelease(v77).n128_f64[0]);

        swift_willThrow(v79);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v37 = type metadata accessor for Logger(0);
  sub_10001AAA8(v37, (uint64_t)qword_100847400);
  v38 = a2;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v83 = swift_slowAlloc(64, -1);
    v86 = v83;
    *(_DWORD *)v41 = 136315394;
    if (v8)
      v42 = 0x7265646E696D6572;
    else
      v42 = 0x49746E756F636361;
    if (v8)
      v43 = 0xEA00000000004449;
    else
      v43 = 0xE900000000000044;
    v85 = a4;
    v88 = sub_10001A820(v42, v43, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    *(_QWORD *)&v44 = swift_bridgeObjectRelease(v43).n128_u64[0];
    *(_WORD *)(v41 + 12) = 2080;
    v45 = objc_msgSend(v38, "description", v44);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    a4 = v85;
    v88 = sub_10001A820(v46, v48, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

  }
  v49 = (void *)objc_opt_self(REMError);
  v86 = 0;
  v87 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v50._countAndFlagsBits = 0xD00000000000001BLL;
  v50._object = (void *)0x80000001007032E0;
  String.append(_:)(v50);
  LOBYTE(v88) = v8;
  _print_unlocked<A, B>(_:_:)(&v88, &v86, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v51._countAndFlagsBits = 0x7463656A626F202CLL;
  v51._object = (void *)0xEC000000203A4449;
  String.append(_:)(v51);
  v52 = objc_msgSend(v38, "description");
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v55 = v54;

  v56._countAndFlagsBits = v53;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v55);
  v57._countAndFlagsBits = 125;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58 = v87;
  v59 = String._bridgeToObjectiveC()();
  objc_msgSend(v49, "internalErrorWithDebugDescription:", v59, swift_bridgeObjectRelease(v58).n128_f64[0]);

  swift_willThrow(v60);
}

void sub_1003F9A9C(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMSavedAttachmentCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003F9AC8(char a1, void *a2, uint64_t a3)
{
  id v4;
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  NSString v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  NSString v65;
  uint64_t v66;
  os_log_type_t type;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  LODWORD(v4) = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = type metadata accessor for REMCDSavedReminder();
      if (!swift_dynamicCastClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v13, v14))
        {
          v16 = swift_slowAlloc(32, -1);
          v68 = swift_slowAlloc(96, -1);
          v71 = v68;
          *(_DWORD *)v16 = 136315650;
          if ((_DWORD)v4)
            v17 = 0x7265646E696D6572;
          else
            v17 = 0x49746E756F636361;
          if ((_DWORD)v4)
            v18 = 0xEA00000000004449;
          else
            v18 = 0xE900000000000044;
          v73 = sub_10001A820(v17, v18, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_bridgeObjectRelease();
          *(_WORD *)(v16 + 12) = 2080;
          v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
          v20 = (char)v4;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          type = v14;
          v23 = v22;

          v73 = sub_10001A820(v21, v23, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v16 + 22) = 2080;
          v4 = objc_msgSend(v12, "description", v24);
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
          v27 = v26;

          LOBYTE(v4) = v20;
          v73 = sub_10001A820(v25, v27, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

          v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v16, 0x20u);
          swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        v50 = (void *)objc_opt_self(REMError);
        v71 = 0;
        v72 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x8000000100703300;
        String.append(_:)(v51);
        LOBYTE(v73) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMSavedAttachmentCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v52._object = (void *)0x8000000100703330;
        v52._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v52);
        v53 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), v15[152]);
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._object = (void *)0xE900000000000020;
        v58._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v58);
        v59 = objc_msgSend(v12, v15[152]);
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        v65 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "internalErrorWithDebugDescription:", v65, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v66);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_100847400);
  v29 = a2;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(64, -1);
    v71 = v69;
    *(_DWORD *)v32 = 136315394;
    if ((_DWORD)v4)
      v33 = 0x7265646E696D6572;
    else
      v33 = 0x49746E756F636361;
    v70 = (char)v4;
    if ((_DWORD)v4)
      v4 = (id)0xEA00000000004449;
    else
      v4 = (id)0xE900000000000044;
    v73 = sub_10001A820(v33, (unint64_t)v4, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v32 + 12) = 2080;
    v35 = objc_msgSend(v29, "description", v34);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v73 = sub_10001A820(v36, v38, &v71);
    LOBYTE(v4) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  v39 = (void *)objc_opt_self(REMError);
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x80000001007032E0;
  String.append(_:)(v40);
  LOBYTE(v73) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMSavedAttachmentCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 0x7463656A626F202CLL;
  v41._object = (void *)0xEC000000203A4449;
  String.append(_:)(v41);
  v42 = objc_msgSend(v29, "description");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 125;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "internalErrorWithDebugDescription:", v48, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v49);
}

void sub_1003FA2C0(char a1, void *a2, uint64_t a3)
{
  sub_1003FABD4(a1, a2, a3, off_1007D6658, &qword_10083AA30);
}

void sub_1003FA2E4(char a1, void *a2, uint64_t a3)
{
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _DWORD *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _DWORD *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  NSString v30;
  uint64_t v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = type metadata accessor for REMCDSmartListSection();
      if (!swift_dynamicCastClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (_DWORD *)swift_slowAlloc(32, -1);
          v49 = swift_slowAlloc(96, -1);
          *v15 = 136315650;
          v51 = v49;
          __asm { BR              X10 }
        }

        v32 = (void *)objc_opt_self(REMError);
        v51 = 0;
        v52 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v33._countAndFlagsBits = 0xD000000000000029;
        v33._object = (void *)0x8000000100703300;
        String.append(_:)(v33);
        LOBYTE(v53) = a1;
        _print_unlocked<A, B>(_:_:)(&v53, &v51, &type metadata for REMSmartListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v34._countAndFlagsBits = 0xD000000000000010;
        v34._object = (void *)0x8000000100703330;
        String.append(_:)(v34);
        v35 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

        v39._countAndFlagsBits = v36;
        v39._object = v38;
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._object = (void *)0xE900000000000020;
        v40._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v40);
        v41 = objc_msgSend(v12, "description");
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v44 = v43;

        v45._countAndFlagsBits = v42;
        v45._object = v44;
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = 125;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        v47 = String._bridgeToObjectiveC()();
        objc_msgSend(v32, "internalErrorWithDebugDescription:", v47, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v48);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_100847400);
  v17 = a2;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (_DWORD *)swift_slowAlloc(22, -1);
    v50 = swift_slowAlloc(64, -1);
    *v20 = 136315394;
    v51 = v50;
    __asm { BR              X10 }
  }

  v21 = (void *)objc_opt_self(REMError);
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v22._countAndFlagsBits = 0xD00000000000001BLL;
  v22._object = (void *)0x80000001007032E0;
  String.append(_:)(v22);
  LOBYTE(v53) = a1;
  _print_unlocked<A, B>(_:_:)(&v53, &v51, &type metadata for REMSmartListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23._countAndFlagsBits = 0x7463656A626F202CLL;
  v23._object = (void *)0xEC000000203A4449;
  String.append(_:)(v23);
  v24 = objc_msgSend(v17, "description");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "internalErrorWithDebugDescription:", v30, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v31);
}

void sub_1003FABB0(char a1, void *a2, uint64_t a3)
{
  sub_1003FABD4(a1, a2, a3, off_1007D66E0, (unint64_t *)&qword_100839900);
}

void sub_1003FABD4(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  id v10;
  unint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _DWORD *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  NSString v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  os_log_t log;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  if (*(_QWORD *)(a3 + 16))
  {
    v10 = a2;
    v11 = sub_1002C66DC((uint64_t)v10);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v11);

      v14 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v13, v14))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v15 = type metadata accessor for Logger(0);
        sub_10001AAA8(v15, (uint64_t)qword_100847400);
        v16 = v13;
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (_DWORD *)swift_slowAlloc(32, -1);
          v54 = swift_slowAlloc(96, -1);
          *v19 = 136315650;
          v56 = v54;
          __asm { BR              X10 }
        }

        v36 = (void *)objc_opt_self(REMError);
        v56 = 0;
        v57 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v37._countAndFlagsBits = 0xD000000000000029;
        v37._object = (void *)0x8000000100703300;
        String.append(_:)(v37);
        LOBYTE(v58) = a1;
        _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for REMSmartListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v38._countAndFlagsBits = 0xD000000000000010;
        v38._object = (void *)0x8000000100703330;
        String.append(_:)(v38);
        v39 = sub_1000151B0(0, a5, a4);
        v40 = objc_msgSend((id)swift_getObjCClassFromMetadata(v39), "description");
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        v44._countAndFlagsBits = v41;
        v44._object = v43;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._object = (void *)0xE900000000000020;
        v45._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v45);
        v46 = objc_msgSend(v16, "description");
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

        v50._countAndFlagsBits = v47;
        v50._object = v49;
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        v51._countAndFlagsBits = 125;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        v52 = String._bridgeToObjectiveC()();
        objc_msgSend(v36, "internalErrorWithDebugDescription:", v52, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v53);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100847400);
  v21 = a2;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (_DWORD *)swift_slowAlloc(22, -1);
    log = (os_log_t)swift_slowAlloc(64, -1);
    *v24 = 136315394;
    v56 = (uint64_t)log;
    __asm { BR              X10 }
  }

  v25 = (void *)objc_opt_self(REMError);
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  v26._object = (void *)0x80000001007032E0;
  String.append(_:)(v26);
  LOBYTE(v58) = a1;
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for REMSmartListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 0x7463656A626F202CLL;
  v27._object = (void *)0xEC000000203A4449;
  String.append(_:)(v27);
  v28 = objc_msgSend(v21, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 125;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v25, "internalErrorWithDebugDescription:", v34, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v35);
}

#error "1003FB4D8: call analysis failed (funcsize=7)"

#error "1003FB4FC: call analysis failed (funcsize=7)"

void sub_1003FB508(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, os_log_t log, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  id v22;
  unint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _DWORD *v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  NSString v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;

  if (*(_QWORD *)(a3 + 16))
  {
    v22 = a2;
    v23 = sub_1002C66DC((uint64_t)v22);
    if ((v24 & 1) != 0)
    {
      v25 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v23);

      v26 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v25, v26))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v27 = type metadata accessor for Logger(0);
        sub_10001AAA8(v27, (uint64_t)qword_100847400);
        v28 = v25;
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (_DWORD *)swift_slowAlloc(32, -1);
          v66 = swift_slowAlloc(96, -1);
          *v31 = 136315650;
          v68 = v66;
          __asm { BR              X10 }
        }

        v48 = (void *)objc_opt_self(REMError);
        v68 = 0;
        v69 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v49._countAndFlagsBits = 0xD000000000000029;
        v49._object = (void *)0x8000000100703300;
        String.append(_:)(v49);
        LOBYTE(v70) = a1;
        _print_unlocked<A, B>(_:_:)(&v70, &v68, &type metadata for REMReminderStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v50._countAndFlagsBits = 0xD000000000000010;
        v50._object = (void *)0x8000000100703330;
        String.append(_:)(v50);
        v51 = sub_1000151B0(0, a5, a4);
        v52 = objc_msgSend((id)swift_getObjCClassFromMetadata(v51), "description");
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v55 = v54;

        v56._countAndFlagsBits = v53;
        v56._object = v55;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v57._object = (void *)0xE900000000000020;
        v57._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v57);
        v58 = objc_msgSend(v28, "description");
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v61 = v60;

        v62._countAndFlagsBits = v59;
        v62._object = v61;
        String.append(_:)(v62);
        swift_bridgeObjectRelease();
        v63._countAndFlagsBits = 125;
        v63._object = (void *)0xE100000000000000;
        String.append(_:)(v63);
        v64 = String._bridgeToObjectiveC()();
        objc_msgSend(v48, "internalErrorWithDebugDescription:", v64, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v65);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v32 = type metadata accessor for Logger(0);
  sub_10001AAA8(v32, (uint64_t)qword_100847400);
  v33 = a2;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (_DWORD *)swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    *v36 = 136315394;
    v68 = v67;
    __asm { BR              X10 }
  }

  v37 = (void *)objc_opt_self(REMError);
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  v38._object = (void *)0x80000001007032E0;
  String.append(_:)(v38);
  LOBYTE(v70) = a1;
  _print_unlocked<A, B>(_:_:)(&v70, &v68, &type metadata for REMReminderStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v39._countAndFlagsBits = 0x7463656A626F202CLL;
  v39._object = (void *)0xEC000000203A4449;
  String.append(_:)(v39);
  v40 = objc_msgSend(v33, "description");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = 125;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v37, "internalErrorWithDebugDescription:", v46, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v47);
}

#error "1003FBE34: call analysis failed (funcsize=7)"

#error "1003FBE58: call analysis failed (funcsize=7)"

void sub_1003FBE64(char a1, void *a2, uint64_t a3)
{
  sub_1003FBEAC(a1, a2, a3, off_1007D66E0, (unint64_t *)&qword_100839900);
}

void sub_1003FBE88(char a1, void *a2, uint64_t a3)
{
  sub_1003FBEAC(a1, a2, a3, off_1007D6720, (unint64_t *)&unk_100840000);
}

void sub_1003FBEAC(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  id v6;
  id v10;
  unint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  NSString v54;
  uint64_t v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  NSString v72;
  uint64_t v73;
  NSObject *log;
  os_log_type_t type;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;

  LODWORD(v6) = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v10 = a2;
    v11 = sub_1002C66DC((uint64_t)v10);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v11);

      v14 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v13, v14))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v15 = type metadata accessor for Logger(0);
        sub_10001AAA8(v15, (uint64_t)qword_100847400);
        v16 = v13;
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.fault.getter();
        v19 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v17, v18))
        {
          v20 = swift_slowAlloc(32, -1);
          v76 = swift_slowAlloc(96, -1);
          v80 = v76;
          *(_DWORD *)v20 = 136315650;
          if ((_DWORD)v6)
            v21 = 0xD000000000000016;
          else
            v21 = 0xD000000000000011;
          if ((_DWORD)v6)
            v22 = 0x80000001006F4270;
          else
            v22 = 0x80000001006F4250;
          v78 = (char)v6;
          v82 = sub_10001A820(v21, v22, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          v23 = sub_1000151B0(0, a5, a4);
          v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "description");
          type = v18;
          v25 = v16;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          log = v17;
          v28 = v27;

          v82 = sub_10001A820(v26, v28, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
          *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v20 + 22) = 2080;
          v30 = objc_msgSend(v25, "description", v29);
          v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v32 = v31;

          v16 = v25;
          v33 = (uint64_t)v6;
          LOBYTE(v6) = v78;
          v82 = sub_10001A820(v33, v32, &v80);
          v19 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          swift_slowDealloc(v20, -1, -1);

        }
        else
        {

        }
        v56 = (void *)objc_opt_self(REMError);
        v80 = 0;
        v81 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v57._countAndFlagsBits = 0xD000000000000029;
        v57._object = (void *)0x8000000100703300;
        String.append(_:)(v57);
        LOBYTE(v82) = (_BYTE)v6;
        _print_unlocked<A, B>(_:_:)(&v82, &v80, &type metadata for REMAccountStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v58._countAndFlagsBits = 0xD000000000000010;
        v58._object = (void *)0x8000000100703330;
        String.append(_:)(v58);
        v59 = sub_1000151B0(0, a5, a4);
        v60 = objc_msgSend((id)swift_getObjCClassFromMetadata(v59), v19[152]);
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v64._countAndFlagsBits = v61;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._countAndFlagsBits = 0x3A646E756F66202CLL;
        v65._object = (void *)0xE900000000000020;
        String.append(_:)(v65);
        v66 = objc_msgSend(v16, v19[152]);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        v70._countAndFlagsBits = v67;
        v70._object = v69;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        v71._countAndFlagsBits = 125;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        v72 = String._bridgeToObjectiveC()();
        objc_msgSend(v56, "internalErrorWithDebugDescription:", v72, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v73);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100847400);
  v35 = a2;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v77 = swift_slowAlloc(64, -1);
    v80 = v77;
    *(_DWORD *)v38 = 136315394;
    if ((_DWORD)v6)
      v39 = 0xD000000000000016;
    else
      v39 = 0xD000000000000011;
    if ((_DWORD)v6)
      v40 = 0x80000001006F4270;
    else
      v40 = 0x80000001006F4250;
    v79 = (char)v6;
    v82 = sub_10001A820(v39, v40, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v38 + 12) = 2080;
    v6 = objc_msgSend(v35, "description", v41);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v44 = v43;

    LOBYTE(v6) = v79;
    v82 = sub_10001A820(v42, v44, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
  v45 = (void *)objc_opt_self(REMError);
  v80 = 0;
  v81 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  v46._object = (void *)0x80000001007032E0;
  String.append(_:)(v46);
  LOBYTE(v82) = (_BYTE)v6;
  _print_unlocked<A, B>(_:_:)(&v82, &v80, &type metadata for REMAccountStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v47._countAndFlagsBits = 0x7463656A626F202CLL;
  v47._object = (void *)0xEC000000203A4449;
  String.append(_:)(v47);
  v48 = objc_msgSend(v35, "description");
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  v52._countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 125;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  v54 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "internalErrorWithDebugDescription:", v54, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v55);
}

void sub_1003FC6AC(char a1, void *a2, uint64_t a3)
{
  sub_1003FC6F4(a1, a2, a3, off_1007D6658, &qword_10083AA30);
}

void sub_1003FC6D0(char a1, void *a2, uint64_t a3)
{
  sub_1003FC6F4(a1, a2, a3, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FC6F4(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  id v10;
  unint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _DWORD *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  NSString v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  os_log_t log;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  if (*(_QWORD *)(a3 + 16))
  {
    v10 = a2;
    v11 = sub_1002C66DC((uint64_t)v10);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v11);

      v14 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v13, v14))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v15 = type metadata accessor for Logger(0);
        sub_10001AAA8(v15, (uint64_t)qword_100847400);
        v16 = v13;
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (_DWORD *)swift_slowAlloc(32, -1);
          v54 = swift_slowAlloc(96, -1);
          *v19 = 136315650;
          v56 = v54;
          __asm { BR              X10 }
        }

        v36 = (void *)objc_opt_self(REMError);
        v56 = 0;
        v57 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v37._countAndFlagsBits = 0xD000000000000029;
        v37._object = (void *)0x8000000100703300;
        String.append(_:)(v37);
        LOBYTE(v58) = a1;
        _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for REMAssignmentCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v38._object = (void *)0x8000000100703330;
        v38._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v38);
        v39 = sub_1000151B0(0, a5, a4);
        v40 = objc_msgSend((id)swift_getObjCClassFromMetadata(v39), "description");
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        v44._countAndFlagsBits = v41;
        v44._object = v43;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._object = (void *)0xE900000000000020;
        v45._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v45);
        v46 = objc_msgSend(v16, "description");
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

        v50._countAndFlagsBits = v47;
        v50._object = v49;
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        v51._countAndFlagsBits = 125;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        v52 = String._bridgeToObjectiveC()();
        objc_msgSend(v36, "internalErrorWithDebugDescription:", v52, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v53);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100847400);
  v21 = a2;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (_DWORD *)swift_slowAlloc(22, -1);
    log = (os_log_t)swift_slowAlloc(64, -1);
    *v24 = 136315394;
    v56 = (uint64_t)log;
    __asm { BR              X10 }
  }

  v25 = (void *)objc_opt_self(REMError);
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  v26._object = (void *)0x80000001007032E0;
  String.append(_:)(v26);
  LOBYTE(v58) = a1;
  _print_unlocked<A, B>(_:_:)(&v58, &v56, &type metadata for REMAssignmentCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 0x7463656A626F202CLL;
  v27._object = (void *)0xEC000000203A4449;
  String.append(_:)(v27);
  v28 = objc_msgSend(v21, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 125;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v25, "internalErrorWithDebugDescription:", v34, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v35);
}

void sub_1003FCFC0(char a1, void *a2, uint64_t a3)
{
  sub_1003FC6F4(a1, a2, a3, off_1007D6718, (unint64_t *)&qword_100839928);
}

void sub_1003FCFE4(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMHashtagCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FD010(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMHashtagCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FD03C(char a1, void *a2, uint64_t a3)
{
  sub_1003FD094(a1, a2, a3, (uint64_t)&type metadata for REMListSectionStorageCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FD068(char a1, void *a2, uint64_t a3)
{
  sub_1003FD094(a1, a2, a3, (uint64_t)&type metadata for REMListSectionStorageCDIngestor.RelationshipKey, off_1007D66E0, (unint64_t *)&qword_100839900);
}

void sub_1003FD094(char a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t *a6)
{
  int v8;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  NSString v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  Swift::String v74;
  NSString v75;
  uint64_t v76;
  NSObject *log;
  os_log_type_t type;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v12 = a2;
    v13 = sub_1002C66DC((uint64_t)v12);
    if ((v14 & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v13);

      v16 = objc_opt_self(*a5);
      if (!swift_dynamicCastObjCClass(v15, v16))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_100847400);
        v18 = v15;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v19, v20))
        {
          type = v20;
          v21 = swift_slowAlloc(32, -1);
          v79 = swift_slowAlloc(96, -1);
          v83 = v79;
          *(_DWORD *)v21 = 136315650;
          if (v8)
            v22 = 0x4449746E65726170;
          else
            v22 = 0x49746E756F636361;
          log = v19;
          if (v8)
            v23 = 0xE800000000000000;
          else
            v23 = 0xE900000000000044;
          v81 = a4;
          v85 = sub_10001A820(v22, v23, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 12) = 2080;
          v24 = sub_1000151B0(0, a6, a5);
          v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "description");
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v27 = v18;
          v29 = v28;

          v85 = sub_10001A820(v26, v29, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          *(_QWORD *)&v30 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 22) = 2080;
          v31 = objc_msgSend(v27, "description", v30);
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v34 = v33;

          v35 = v32;
          v18 = v27;
          v85 = sub_10001A820(v35, v34, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

          a4 = v81;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v21, 0x20u);
          swift_arrayDestroy(v79, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

        }
        v59 = (void *)objc_opt_self(REMError);
        v83 = 0;
        v84 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v60._countAndFlagsBits = 0xD000000000000029;
        v60._object = (void *)0x8000000100703300;
        String.append(_:)(v60);
        LOBYTE(v85) = v8;
        _print_unlocked<A, B>(_:_:)(&v85, &v83, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v61._object = (void *)0x8000000100703330;
        v61._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v61);
        v62 = sub_1000151B0(0, a6, a5);
        v63 = objc_msgSend((id)swift_getObjCClassFromMetadata(v62), "description");
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        v67._countAndFlagsBits = v64;
        v67._object = v66;
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        v68._object = (void *)0xE900000000000020;
        v68._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v68);
        v69 = objc_msgSend(v18, "description");
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        v73._countAndFlagsBits = v70;
        v73._object = v72;
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        v74._countAndFlagsBits = 125;
        v74._object = (void *)0xE100000000000000;
        String.append(_:)(v74);
        v75 = String._bridgeToObjectiveC()();
        objc_msgSend(v59, "internalErrorWithDebugDescription:", v75, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v76);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v36 = type metadata accessor for Logger(0);
  sub_10001AAA8(v36, (uint64_t)qword_100847400);
  v37 = a2;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v80 = swift_slowAlloc(64, -1);
    v83 = v80;
    *(_DWORD *)v40 = 136315394;
    if (v8)
      v41 = 0x4449746E65726170;
    else
      v41 = 0x49746E756F636361;
    if (v8)
      v42 = 0xE800000000000000;
    else
      v42 = 0xE900000000000044;
    v82 = a4;
    v85 = sub_10001A820(v41, v42, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v40 + 12) = 2080;
    v44 = objc_msgSend(v37, "description", v43);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    a4 = v82;
    v85 = sub_10001A820(v45, v47, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
  v48 = (void *)objc_opt_self(REMError);
  v83 = 0;
  v84 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v49._countAndFlagsBits = 0xD00000000000001BLL;
  v49._object = (void *)0x80000001007032E0;
  String.append(_:)(v49);
  LOBYTE(v85) = v8;
  _print_unlocked<A, B>(_:_:)(&v85, &v83, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v50._countAndFlagsBits = 0x7463656A626F202CLL;
  v50._object = (void *)0xEC000000203A4449;
  String.append(_:)(v50);
  v51 = objc_msgSend(v37, "description");
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v54 = v53;

  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 125;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(v48, "internalErrorWithDebugDescription:", v57, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v58);
}

void sub_1003FD8AC(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMRecurrenceRuleCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FD8D8(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMRecurrenceRuleCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FD904(char a1, void *a2, uint64_t a3)
{
  sub_1003FD95C(a1, a2, a3, (uint64_t)&type metadata for REMShareeCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FD930(char a1, void *a2, uint64_t a3)
{
  sub_1003FD95C(a1, a2, a3, (uint64_t)&type metadata for REMShareeCDIngestor.RelationshipKey, off_1007D66E0, (unint64_t *)&qword_100839900);
}

void sub_1003FD95C(char a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t *a6)
{
  int v8;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  NSString v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  Swift::String v74;
  NSString v75;
  uint64_t v76;
  NSObject *log;
  os_log_type_t type;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v12 = a2;
    v13 = sub_1002C66DC((uint64_t)v12);
    if ((v14 & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v13);

      v16 = objc_opt_self(*a5);
      if (!swift_dynamicCastObjCClass(v15, v16))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_100847400);
        v18 = v15;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v19, v20))
        {
          type = v20;
          v21 = swift_slowAlloc(32, -1);
          v79 = swift_slowAlloc(96, -1);
          v83 = v79;
          *(_DWORD *)v21 = 136315650;
          if (v8)
            v22 = 0x44497473696CLL;
          else
            v22 = 0x49746E756F636361;
          log = v19;
          if (v8)
            v23 = 0xE600000000000000;
          else
            v23 = 0xE900000000000044;
          v81 = a4;
          v85 = sub_10001A820(v22, v23, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 12) = 2080;
          v24 = sub_1000151B0(0, a6, a5);
          v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "description");
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v27 = v18;
          v29 = v28;

          v85 = sub_10001A820(v26, v29, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          *(_QWORD *)&v30 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 22) = 2080;
          v31 = objc_msgSend(v27, "description", v30);
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v34 = v33;

          v35 = v32;
          v18 = v27;
          v85 = sub_10001A820(v35, v34, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

          a4 = v81;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v21, 0x20u);
          swift_arrayDestroy(v79, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

        }
        v59 = (void *)objc_opt_self(REMError);
        v83 = 0;
        v84 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v60._countAndFlagsBits = 0xD000000000000029;
        v60._object = (void *)0x8000000100703300;
        String.append(_:)(v60);
        LOBYTE(v85) = v8;
        _print_unlocked<A, B>(_:_:)(&v85, &v83, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v61._object = (void *)0x8000000100703330;
        v61._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v61);
        v62 = sub_1000151B0(0, a6, a5);
        v63 = objc_msgSend((id)swift_getObjCClassFromMetadata(v62), "description");
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        v67._countAndFlagsBits = v64;
        v67._object = v66;
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        v68._object = (void *)0xE900000000000020;
        v68._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v68);
        v69 = objc_msgSend(v18, "description");
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        v73._countAndFlagsBits = v70;
        v73._object = v72;
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        v74._countAndFlagsBits = 125;
        v74._object = (void *)0xE100000000000000;
        String.append(_:)(v74);
        v75 = String._bridgeToObjectiveC()();
        objc_msgSend(v59, "internalErrorWithDebugDescription:", v75, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v76);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v36 = type metadata accessor for Logger(0);
  sub_10001AAA8(v36, (uint64_t)qword_100847400);
  v37 = a2;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v80 = swift_slowAlloc(64, -1);
    v83 = v80;
    *(_DWORD *)v40 = 136315394;
    if (v8)
      v41 = 0x44497473696CLL;
    else
      v41 = 0x49746E756F636361;
    if (v8)
      v42 = 0xE600000000000000;
    else
      v42 = 0xE900000000000044;
    v82 = a4;
    v85 = sub_10001A820(v41, v42, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v40 + 12) = 2080;
    v44 = objc_msgSend(v37, "description", v43);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    a4 = v82;
    v85 = sub_10001A820(v45, v47, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
  v48 = (void *)objc_opt_self(REMError);
  v83 = 0;
  v84 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v49._countAndFlagsBits = 0xD00000000000001BLL;
  v49._object = (void *)0x80000001007032E0;
  String.append(_:)(v49);
  LOBYTE(v85) = v8;
  _print_unlocked<A, B>(_:_:)(&v85, &v83, a4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v50._countAndFlagsBits = 0x7463656A626F202CLL;
  v50._object = (void *)0xEC000000203A4449;
  String.append(_:)(v50);
  v51 = objc_msgSend(v37, "description");
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v54 = v53;

  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 125;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(v48, "internalErrorWithDebugDescription:", v57, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v58);
}

#error "1003FE184: call analysis failed (funcsize=7)"

#error "1003FE1A8: call analysis failed (funcsize=7)"

void sub_1003FE1B4(char a1, void *a2, uint64_t a3, _QWORD *a4, unint64_t *a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, int a12, int a13, os_log_t log, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  id v24;
  unint64_t v25;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _DWORD *v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  _DWORD *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  NSString v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  if (*(_QWORD *)(a3 + 16))
  {
    v24 = a2;
    v25 = sub_1002C66DC((uint64_t)v24);
    if ((v26 & 1) != 0)
    {
      v27 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v25);

      v28 = objc_opt_self(*a4);
      if (!swift_dynamicCastObjCClass(v27, v28))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v29 = type metadata accessor for Logger(0);
        sub_10001AAA8(v29, (uint64_t)qword_100847400);
        v30 = v27;
        v31 = Logger.logObject.getter(v30);
        v32 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (_DWORD *)swift_slowAlloc(32, -1);
          v68 = swift_slowAlloc(96, -1);
          *v33 = 136315650;
          v70 = v68;
          __asm { BR              X10 }
        }

        v50 = (void *)objc_opt_self(REMError);
        v70 = 0;
        v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x8000000100703300;
        String.append(_:)(v51);
        LOBYTE(v72) = a1;
        _print_unlocked<A, B>(_:_:)(&v72, &v70, &type metadata for REMListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v52._countAndFlagsBits = 0xD000000000000010;
        v52._object = (void *)0x8000000100703330;
        String.append(_:)(v52);
        v53 = sub_1000151B0(0, a5, a4);
        v54 = objc_msgSend((id)swift_getObjCClassFromMetadata(v53), "description");
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

        v58._countAndFlagsBits = v55;
        v58._object = v57;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._object = (void *)0xE900000000000020;
        v59._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v59);
        v60 = objc_msgSend(v30, "description");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v64._countAndFlagsBits = v61;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._countAndFlagsBits = 125;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        v66 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "internalErrorWithDebugDescription:", v66, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v67);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v34 = type metadata accessor for Logger(0);
  sub_10001AAA8(v34, (uint64_t)qword_100847400);
  v35 = a2;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (_DWORD *)swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(64, -1);
    *v38 = 136315394;
    v70 = v69;
    __asm { BR              X10 }
  }

  v39 = (void *)objc_opt_self(REMError);
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v40._object = (void *)0x80000001007032E0;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  LOBYTE(v72) = a1;
  _print_unlocked<A, B>(_:_:)(&v72, &v70, &type metadata for REMListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 0x7463656A626F202CLL;
  v41._object = (void *)0xEC000000203A4449;
  String.append(_:)(v41);
  v42 = objc_msgSend(v35, "description");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 125;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "internalErrorWithDebugDescription:", v48, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v49);
}

#error "1003FEBA4: call analysis failed (funcsize=7)"

#error "1003FEBC8: call analysis failed (funcsize=7)"

void sub_1003FEBD4(char a1, void *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, int a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v19;
  unint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  _DWORD *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _DWORD *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  NSString v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  if (*(_QWORD *)(a3 + 16))
  {
    v19 = a2;
    v20 = sub_1002C66DC((uint64_t)v19);
    if ((v21 & 1) != 0)
    {
      v22 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v20);

      v23 = type metadata accessor for REMCDListSection();
      if (!swift_dynamicCastClass(v22, v23))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v24 = type metadata accessor for Logger(0);
        sub_10001AAA8(v24, (uint64_t)qword_100847400);
        v25 = v22;
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (_DWORD *)swift_slowAlloc(32, -1);
          v62 = swift_slowAlloc(96, -1);
          *v28 = 136315650;
          v64 = v62;
          __asm { BR              X10 }
        }

        v45 = (void *)objc_opt_self(REMError);
        v64 = 0;
        v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v46._countAndFlagsBits = 0xD000000000000029;
        v46._object = (void *)0x8000000100703300;
        String.append(_:)(v46);
        LOBYTE(v66) = a1;
        _print_unlocked<A, B>(_:_:)(&v66, &v64, &type metadata for REMListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v47._countAndFlagsBits = 0xD000000000000010;
        v47._object = (void *)0x8000000100703330;
        String.append(_:)(v47);
        v48 = objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "description");
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v51 = v50;

        v52._countAndFlagsBits = v49;
        v52._object = v51;
        String.append(_:)(v52);
        swift_bridgeObjectRelease();
        v53._object = (void *)0xE900000000000020;
        v53._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v53);
        v54 = objc_msgSend(v25, "description");
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

        v58._countAndFlagsBits = v55;
        v58._object = v57;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._countAndFlagsBits = 125;
        v59._object = (void *)0xE100000000000000;
        String.append(_:)(v59);
        v60 = String._bridgeToObjectiveC()();
        objc_msgSend(v45, "internalErrorWithDebugDescription:", v60, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v61);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v29 = type metadata accessor for Logger(0);
  sub_10001AAA8(v29, (uint64_t)qword_100847400);
  v30 = a2;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (_DWORD *)swift_slowAlloc(22, -1);
    v63 = swift_slowAlloc(64, -1);
    *v33 = 136315394;
    v64 = v63;
    __asm { BR              X10 }
  }

  v34 = (void *)objc_opt_self(REMError);
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v35._object = (void *)0x80000001007032E0;
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  LOBYTE(v66) = a1;
  _print_unlocked<A, B>(_:_:)(&v66, &v64, &type metadata for REMListStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v36._countAndFlagsBits = 0x7463656A626F202CLL;
  v36._object = (void *)0xEC000000203A4449;
  String.append(_:)(v36);
  v37 = objc_msgSend(v30, "description");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 125;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  v43 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "internalErrorWithDebugDescription:", v43, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v44);
}

#error "1003FF59C: call analysis failed (funcsize=7)"

void sub_1003FF5A8(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMURLAttachmentCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FF5D4(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMURLAttachmentCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FF600(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMFileAttachmentCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FF62C(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMFileAttachmentCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FF658(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMImageAttachmentCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FF684(char a1, void *a2, uint64_t a3)
{
  sub_1003F927C(a1, a2, a3, (uint64_t)&type metadata for REMImageAttachmentCDIngestor.RelationshipKey, off_1007D6708, (unint64_t *)&qword_10083AE90);
}

void sub_1003FF6B0(void *a1, uint64_t a2)
{
  sub_1003FF6CC(a1, a2, (uint64_t)&type metadata for REMDueDateDeltaAlertCDIngestor.RelationshipKey);
}

void sub_1003FF6CC(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  NSString v49;
  uint64_t v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  id v62;
  uint64_t v63;
  void *v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  NSString v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = a1;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a2 + 56) + 16 * v7);

      v10 = objc_opt_self(REMCDAccount);
      if (!swift_dynamicCastObjCClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v13, v14))
        {
          v16 = swift_slowAlloc(32, -1);
          v70 = swift_slowAlloc(96, -1);
          v72 = v70;
          *(_DWORD *)v16 = 136315650;
          v74 = sub_10001A820(0x49746E756F636361, 0xE900000000000044, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
          *(_WORD *)(v16 + 12) = 2080;
          v17 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
          v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          v20 = a3;
          v22 = v21;

          v74 = sub_10001A820(v19, v22, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
          *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v16 + 22) = 2080;
          v24 = objc_msgSend(v12, "description", v23);
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          v27 = v26;

          a3 = v20;
          v28 = v25;
          v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          v74 = sub_10001A820(v28, v27, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v16, 0x20u);
          swift_arrayDestroy(v70, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        v51 = (void *)objc_opt_self(REMError);
        v72 = 0;
        v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v52._countAndFlagsBits = 0xD000000000000029;
        v52._object = (void *)0x8000000100703300;
        String.append(_:)(v52);
        _print_unlocked<A, B>(_:_:)(v53, &v72, a3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v54._object = (void *)0x8000000100703330;
        v54._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v54);
        v55 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
        v56 = objc_msgSend((id)swift_getObjCClassFromMetadata(v55), v15[152]);
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v59 = v58;

        v60._countAndFlagsBits = v57;
        v60._object = v59;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        v61._object = (void *)0xE900000000000020;
        v61._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v61);
        v62 = objc_msgSend(v12, v15[152]);
        v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        v65 = v64;

        v66._countAndFlagsBits = v63;
        v66._object = v65;
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        v67._countAndFlagsBits = 125;
        v67._object = (void *)0xE100000000000000;
        String.append(_:)(v67);
        v68 = String._bridgeToObjectiveC()();
        objc_msgSend(v51, "internalErrorWithDebugDescription:", v68, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v69);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v29 = type metadata accessor for Logger(0);
  sub_10001AAA8(v29, (uint64_t)qword_100847400);
  v30 = a1;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v71 = swift_slowAlloc(64, -1);
    v72 = v71;
    *(_DWORD *)v33 = 136315394;
    v74 = sub_10001A820(0x49746E756F636361, 0xE900000000000044, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = objc_msgSend(v30, "description");
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v36 = a3;
    v38 = v37;

    v74 = sub_10001A820(v35, v38, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

    a3 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

  }
  v39 = (void *)objc_opt_self(REMError);
  v72 = 0;
  v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x80000001007032E0;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)(v41, &v72, a3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v42._countAndFlagsBits = 0x7463656A626F202CLL;
  v42._object = (void *)0xEC000000203A4449;
  String.append(_:)(v42);
  v43 = objc_msgSend(v30, "description");
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 125;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  v49 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "internalErrorWithDebugDescription:", v49, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v50);
}

void sub_1003FFE68(char a1, void *a2, uint64_t a3)
{
  sub_1003FD95C(a1, a2, a3, (uint64_t)&type metadata for REMCalDAVNotificationCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FFE94(char a1, void *a2, uint64_t a3)
{
  sub_1003FD95C(a1, a2, a3, (uint64_t)&type metadata for REMCalDAVNotificationCDIngestor.RelationshipKey, off_1007D66E0, (unint64_t *)&qword_100839900);
}

void sub_1003FFEC0(char a1, void *a2, uint64_t a3)
{
  sub_1003FD95C(a1, a2, a3, (uint64_t)&type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_1003FFEEC(char a1, void *a2, uint64_t a3)
{
  id v4;
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  NSString v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  NSString v65;
  uint64_t v66;
  os_log_type_t type;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  LODWORD(v4) = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = type metadata accessor for REMCDTemplate();
      if (!swift_dynamicCastClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v13, v14))
        {
          v16 = swift_slowAlloc(32, -1);
          v68 = swift_slowAlloc(96, -1);
          v71 = v68;
          *(_DWORD *)v16 = 136315650;
          if ((_DWORD)v4)
            v17 = 0x44497473696CLL;
          else
            v17 = 0x49746E756F636361;
          if ((_DWORD)v4)
            v18 = 0xE600000000000000;
          else
            v18 = 0xE900000000000044;
          v73 = sub_10001A820(v17, v18, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_bridgeObjectRelease();
          *(_WORD *)(v16 + 12) = 2080;
          v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
          v20 = (char)v4;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          type = v14;
          v23 = v22;

          v73 = sub_10001A820(v21, v23, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v16 + 22) = 2080;
          v4 = objc_msgSend(v12, "description", v24);
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
          v27 = v26;

          LOBYTE(v4) = v20;
          v73 = sub_10001A820(v25, v27, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

          v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v16, 0x20u);
          swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        v50 = (void *)objc_opt_self(REMError);
        v71 = 0;
        v72 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x8000000100703300;
        String.append(_:)(v51);
        LOBYTE(v73) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v52._object = (void *)0x8000000100703330;
        v52._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v52);
        v53 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), v15[152]);
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._object = (void *)0xE900000000000020;
        v58._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v58);
        v59 = objc_msgSend(v12, v15[152]);
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        v65 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "internalErrorWithDebugDescription:", v65, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v66);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_100847400);
  v29 = a2;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(64, -1);
    v71 = v69;
    *(_DWORD *)v32 = 136315394;
    if ((_DWORD)v4)
      v33 = 0x44497473696CLL;
    else
      v33 = 0x49746E756F636361;
    v70 = (char)v4;
    if ((_DWORD)v4)
      v4 = (id)0xE600000000000000;
    else
      v4 = (id)0xE900000000000044;
    v73 = sub_10001A820(v33, (unint64_t)v4, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v32 + 12) = 2080;
    v35 = objc_msgSend(v29, "description", v34);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v73 = sub_10001A820(v36, v38, &v71);
    LOBYTE(v4) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  v39 = (void *)objc_opt_self(REMError);
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x80000001007032E0;
  String.append(_:)(v40);
  LOBYTE(v73) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 0x7463656A626F202CLL;
  v41._object = (void *)0xEC000000203A4449;
  String.append(_:)(v41);
  v42 = objc_msgSend(v29, "description");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 125;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "internalErrorWithDebugDescription:", v48, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v49);
}

void sub_1004006D4(char a1, void *a2, uint64_t a3)
{
  id v4;
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  NSString v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  NSString v65;
  uint64_t v66;
  os_log_type_t type;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  LODWORD(v4) = a1 & 1;
  if (*(_QWORD *)(a3 + 16))
  {
    v6 = a2;
    v7 = sub_1002C66DC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(id *)(*(_QWORD *)(a3 + 56) + 16 * v7);

      v10 = type metadata accessor for REMCDTemplate();
      if (!swift_dynamicCastClass(v9, v10))
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_100847400);
        v12 = v9;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.fault.getter();
        v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (os_log_type_enabled(v13, v14))
        {
          v16 = swift_slowAlloc(32, -1);
          v68 = swift_slowAlloc(96, -1);
          v71 = v68;
          *(_DWORD *)v16 = 136315650;
          if ((_DWORD)v4)
            v17 = 0x4449746E65726170;
          else
            v17 = 0x49746E756F636361;
          if ((_DWORD)v4)
            v18 = 0xE800000000000000;
          else
            v18 = 0xE900000000000044;
          v73 = sub_10001A820(v17, v18, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_bridgeObjectRelease();
          *(_WORD *)(v16 + 12) = 2080;
          v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "description");
          v20 = (char)v4;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          type = v14;
          v23 = v22;

          v73 = sub_10001A820(v21, v23, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v16 + 22) = 2080;
          v4 = objc_msgSend(v12, "description", v24);
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
          v27 = v26;

          LOBYTE(v4) = v20;
          v73 = sub_10001A820(v25, v27, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

          v15 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v16, 0x20u);
          swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

        }
        v50 = (void *)objc_opt_self(REMError);
        v71 = 0;
        v72 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x8000000100703300;
        String.append(_:)(v51);
        LOBYTE(v73) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v52._object = (void *)0x8000000100703330;
        v52._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v52);
        v53 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), v15[152]);
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._object = (void *)0xE900000000000020;
        v58._countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v58);
        v59 = objc_msgSend(v12, v15[152]);
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        v65 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "internalErrorWithDebugDescription:", v65, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v66);
      }
      return;
    }

  }
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_100847400);
  v29 = a2;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(64, -1);
    v71 = v69;
    *(_DWORD *)v32 = 136315394;
    if ((_DWORD)v4)
      v33 = 0x4449746E65726170;
    else
      v33 = 0x49746E756F636361;
    v70 = (char)v4;
    if ((_DWORD)v4)
      v4 = (id)0xE800000000000000;
    else
      v4 = (id)0xE900000000000044;
    v73 = sub_10001A820(v33, (unint64_t)v4, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v32 + 12) = 2080;
    v35 = objc_msgSend(v29, "description", v34);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v73 = sub_10001A820(v36, v38, &v71);
    LOBYTE(v4) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  v39 = (void *)objc_opt_self(REMError);
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x80000001007032E0;
  String.append(_:)(v40);
  LOBYTE(v73) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)(&v73, &v71, &type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 0x7463656A626F202CLL;
  v41._object = (void *)0xEC000000203A4449;
  String.append(_:)(v41);
  v42 = objc_msgSend(v29, "description");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 125;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "internalErrorWithDebugDescription:", v48, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v49);
}

void sub_100400EC4(char a1, void *a2, uint64_t a3)
{
  sub_1003FD094(a1, a2, a3, (uint64_t)&type metadata for REMSmartListSectionStorageCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
}

void sub_100400EF0(char a1, void *a2, uint64_t a3)
{
  sub_1003FD094(a1, a2, a3, (uint64_t)&type metadata for REMSmartListSectionStorageCDIngestor.RelationshipKey, off_1007D6720, (unint64_t *)&unk_100840000);
}

NSString sub_100400F1C(void *a1)
{
  NSString *v1;
  uint64_t v2;
  NSString v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  id v9;
  void *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t ObjCClassFromMetadata;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  objc_class *v49;
  Class isa;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;

  v4 = *v1;
  v62 = 0;
  v5 = objc_msgSend(a1, "remObjectIDWithError:", &v62);
  v6 = v62;
  if (!v5)
  {
    v27 = v62;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v28);
    return v4;
  }
  v7 = v5;
  v8 = v62;
  v9 = objc_msgSend(a1, "account");
  if (!v9
    || (v10 = v9, v11 = objc_msgSend(v9, "remObjectID"), v10, !v11))
  {
    if (qword_100837450 != -1)
      swift_once(&qword_100837450, sub_10040166C);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_100849208);
    v11 = v7;
    v18 = Logger.logObject.getter(v11);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      v59 = swift_slowAlloc(32, -1);
      v62 = v4;
      v63 = v59;
      *(_DWORD *)v20 = 136315394;
      MetatypeMetadata = swift_getMetatypeMetadata(v4);
      v23 = String.init<A>(describing:)(&v62, MetatypeMetadata);
      v62 = (id)sub_10001A820(v23, v24, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      v62 = v11;
      v25 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      *v21 = v7;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: cdTemplateSection.account is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v21, 1, v26);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
    v29 = (void *)objc_opt_self(REMError);
    v30 = type metadata accessor for REMCDTemplateSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v30);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v4);

    swift_willThrow(v32);
    goto LABEL_14;
  }
  v12 = objc_msgSend(a1, "displayName");
  if (!v12)
  {
    if (qword_100837450 != -1)
      swift_once(&qword_100837450, sub_10040166C);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_100849208);
    v35 = v7;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v58 = (_QWORD *)swift_slowAlloc(8, -1);
      v60 = swift_slowAlloc(32, -1);
      v62 = v4;
      v63 = v60;
      *(_DWORD *)v38 = 136315394;
      v39 = swift_getMetatypeMetadata(v4);
      v61 = v7;
      v40 = String.init<A>(describing:)(&v62, v39);
      v62 = (id)sub_10001A820(v40, v41, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2112;
      v62 = v35;
      v42 = v36;
      v43 = v35;
      v44 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      *v58 = v61;

      v35 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, v37, "%s: cdTemplateSection.displayName is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v38, 0x16u);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v58, 1, v45);
      swift_slowDealloc(v58, -1, -1);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    v54 = (void *)objc_opt_self(REMError);
    v55 = type metadata accessor for REMCDTemplateSection();
    v56 = swift_getObjCClassFromMetadata(v55);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v54, "unexpectedNilPropertyWithClass:property:", v56, v4);

    swift_willThrow(v57);
LABEL_14:

    return v4;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v4 = v15;

  v16 = sub_100401F2C(a1, v7, v11, v14, (uint64_t)v4);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = v16;
    swift_bridgeObjectRelease();
    v47 = v46;
    objc_msgSend(v47, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));

    v48 = v47;
    objc_msgSend(v48, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));

    objc_msgSend(v48, "setResolutionTokenMap:", 0);
    v4 = v48;
    v49 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
    isa = v49;
    if (v49)
    {
      v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v51, v53);
    }
    objc_msgSend(v4, "setResolutionTokenMapData:", isa);

  }
  return v4;
}

uint64_t sub_100401648(uint64_t a1)
{
  return sub_1001489A4(a1, qword_1008491F0, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10040166C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100849208, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_100401690(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B2D6C(*a1, *a2);
}

uint64_t sub_10040169C()
{
  unsigned __int8 *v0;

  return sub_1004F4F1C(*v0);
}

void sub_1004016A4()
{
  __asm { BR              X10 }
}

double sub_1004016E0(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 0xD000000000000017, 0x80000001006F4060);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x80000001006F4060).n128_u64[0];
  return result;
}

uint64_t sub_100401750(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1002B2BEC(a1, *v1);
}

unint64_t sub_100401758@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100402428(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100401784()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1004017B4 + 4 * byte_1006BAD14[*v0]))();
}

void sub_1004017B4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001006F4060;
}

void sub_1004017D4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creationDate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1004017F8(_QWORD *a1@<X8>)
{
  *a1 = 0x4E79616C70736964;
  a1[1] = 0xEB00000000656D61;
}

void sub_10040181C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0D50;
}

unint64_t sub_10040182C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100402428(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100401850()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100401880 + 4 * byte_1006BAD18[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_100401880()
{
  return 0xD000000000000017;
}

uint64_t sub_10040189C()
{
  return 0x6E6F697461657263;
}

uint64_t sub_1004018BC()
{
  return 0x4E79616C70736964;
}

void sub_1004018DC(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCAD0, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_100401938(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0D78;
}

void sub_100401948(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCAD0, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_1004019A8()
{
  sub_1004019C4();
}

void sub_1004019C4()
{
  JUMPOUT(0x100401AD4);
}

_QWORD *sub_100401F2C(void *a1, _QWORD *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t MetatypeMetadata;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t ObjCClassFromMetadata;
  NSString v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a4;
  v49 = *v5;
  v51 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "template", v14);
  if (v17
    && (v18 = v17, v19 = objc_msgSend(v17, "remObjectID"), v18, v19))
  {
    v49 = v10;
    v20 = objc_allocWithZone((Class)REMTemplateSectionStorage);
    v21 = a2;
    v22 = a3;
    swift_bridgeObjectRetain(a5);
    v23 = v19;
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v20, "initWithObjectID:accountID:parentID:displayName:", v21, v22, v23, v24, swift_bridgeObjectRelease().n128_f64[0]);

    a2 = v25;
    v26 = objc_msgSend(a1, "creationDate");
    if (v26)
    {
      v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = v49;
      v29 = v51;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v16, v12, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v16, 0, 1, v29);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v16, 1, v29) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v16, 1, 1, v51);
      isa = 0;
    }
    objc_msgSend(a2, "setCreationDate:", isa);

  }
  else
  {
    if (qword_100837450 != -1)
      swift_once(&qword_100837450, sub_10040166C);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_100849208);
    v32 = a2;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      a2 = (_QWORD *)swift_slowAlloc(8, -1);
      v51 = swift_slowAlloc(32, -1);
      v52 = v51;
      *(_DWORD *)v35 = 136315394;
      v53 = v49;
      MetatypeMetadata = swift_getMetatypeMetadata(v49);
      v37 = String.init<A>(describing:)(&v53, MetatypeMetadata);
      v53 = sub_10001A820(v37, v38, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2112;
      v53 = (uint64_t)v32;
      v39 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *a2 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s: cdTemplateSection.template is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v35, 0x16u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(a2, 1, v40);
      swift_slowDealloc(a2, -1, -1);
      v41 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    v42 = (void *)objc_opt_self(REMError);
    v43 = type metadata accessor for REMCDTemplateSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v43);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v45);

    swift_willThrow(v46);
  }
  return a2;
}

uint64_t type metadata accessor for REMTemplateSectionStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd35REMTemplateSectionStorageCDIngestor);
}

_UNKNOWN **sub_100402410()
{
  return &off_1007F2E00;
}

char *sub_10040241C()
{
  return (char *)&_sMXM_0.Parent + 3;
}

unint64_t sub_100402428(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCB20, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

id sub_100402470(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

uint64_t sub_100402900(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_100836DB8 != -1)
    swift_once(&qword_100836DB8, sub_10014D2F4);
  v2 = qword_100871C58;
  v3 = sub_10014C9C4(a1);
  v5 = v4;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_100847400);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v21 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_10014C9C4(a1);
      v20 = sub_10001A820(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unknown ingestable key {key: %s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    __asm { BR              X10 }
  }
  v6 = v3;
  swift_bridgeObjectRetain(v2);
  v7 = sub_10001A6DC(v6, v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v7);
  v10 = *v9;
  swift_bridgeObjectRetain(v9[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100402C60(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_100836DB8 != -1)
    swift_once(&qword_100836DB8, sub_10014D2F4);
  v2 = 0x49746E756F636361;
  v3 = qword_100871C58;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6341746E65726170;
    else
      v4 = 0xD000000000000014;
    if (a1 == 1)
      v5 = 0xEF4449746E756F63;
    else
      v5 = 0x80000001006F3EE0;
    if (!*(_QWORD *)(qword_100871C58 + 16))
      goto LABEL_16;
  }
  else
  {
    v4 = 0x49746E756F636361;
    v5 = 0xE900000000000044;
    if (!*(_QWORD *)(qword_100871C58 + 16))
      goto LABEL_16;
  }
  swift_bridgeObjectRetain(qword_100871C58);
  v6 = sub_10001A6DC(v4, v5);
  if ((v7 & 1) != 0)
  {
    v8 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
    v2 = *v8;
    swift_bridgeObjectRetain(v8[1]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_100847400);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136315138;
    if (a1)
    {
      if (a1 == 1)
        v15 = 0x6341746E65726170;
      else
        v15 = 0xD000000000000014;
      if (a1 == 1)
        v16 = 0xEF4449746E756F63;
      else
        v16 = 0x80000001006F3EE0;
    }
    else
    {
      v15 = 0x49746E756F636361;
      v16 = 0xE900000000000044;
    }
    v18 = sub_10001A820(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  if (a1)
  {
    if (a1 == 1)
      return 0x6341746E65726170;
    else
      return 0xD000000000000014;
  }
  return v2;
}

uint64_t sub_100402F98(char a1)
{
  return sub_100404470(a1, &qword_100837458, &qword_100871EC8, (uint64_t)sub_1004019A8);
}

uint64_t sub_100402FB4(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_100836E68 != -1)
    swift_once(&qword_100836E68, sub_10019EC40);
  v2 = qword_100871CA0;
  v3 = sub_10019E5E4(a1);
  v5 = v4;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_100847400);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v21 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_10019E5E4(a1);
      v20 = sub_10001A820(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unknown ingestable key {key: %s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    __asm { BR              X10 }
  }
  v6 = v3;
  swift_bridgeObjectRetain(v2);
  v7 = sub_10001A6DC(v6, v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v9 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v7);
  v10 = *v9;
  swift_bridgeObjectRetain(v9[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_10040335C(char a1)
{
  if (qword_100836E68 != -1)
    swift_once(&qword_100836E68, sub_10019EC40);
  __asm { BR              X10 }
}

uint64_t sub_10040371C(char a1)
{
  return sub_100404470(a1, &qword_100837538, &qword_100871F48, (uint64_t)sub_100463B5C);
}

uint64_t sub_100403738(uint64_t a1)
{
  return sub_1004046C4(a1, &qword_100837010, &qword_100871D40, (uint64_t (*)(uint64_t))sub_10021E440, (uint64_t)sub_10021EF78);
}

void sub_10040375C(char a1)
{
  if (qword_100837010 != -1)
    swift_once(&qword_100837010, sub_10021EF78);
  __asm { BR              X10 }
}

uint64_t sub_100403B30(uint64_t a1)
{
  return sub_1004046C4(a1, &qword_100837060, &qword_100871D60, (uint64_t (*)(uint64_t))sub_100256DEC, (uint64_t)sub_10025765C);
}

void sub_100403B54(char a1)
{
  if (qword_100837860 != -1)
    swift_once(&qword_100837860, sub_10052F1AC);
  __asm { BR              X10 }
}

void sub_100404040(char a1)
{
  if (qword_100837170 != -1)
    swift_once(&qword_100837170, sub_10030E904);
  __asm { BR              X10 }
}

uint64_t sub_100404454(char a1)
{
  return sub_100404470(a1, &qword_100837170, &qword_100871D88, (uint64_t)sub_10030E904);
}

uint64_t sub_100404470(char a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (*a2 != -1)
    swift_once(a2, a4);
  v6 = *a3;
  if ((a1 & 1) != 0)
    v7 = 0x4449746E65726170;
  else
    v7 = 0x49746E756F636361;
  if ((a1 & 1) != 0)
    v8 = 0xE800000000000000;
  else
    v8 = 0xE900000000000044;
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v6);
    v9 = sub_10001A6DC(v7, v8);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v9);
      v7 = *v11;
      swift_bridgeObjectRetain(v11[1]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001AAA8(v12, (uint64_t)qword_100847400);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v20 = v17;
    *(_DWORD *)v16 = 136315138;
    v19 = sub_10001A820(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unknown ingestable key {key: %s}", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  return v7;
}

uint64_t sub_1004046A0(uint64_t a1)
{
  return sub_1004046C4(a1, &qword_100837860, &qword_100872248, (uint64_t (*)(uint64_t))sub_10052E580, (uint64_t)sub_10052F1AC);
}

uint64_t sub_1004046C4(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (*a2 != -1)
    swift_once(a2, a5);
  v8 = *a3;
  v9 = a4(a1);
  v11 = v10;
  if (*(_QWORD *)(v8 + 16))
  {
    v12 = v9;
    swift_bridgeObjectRetain(v8);
    v13 = sub_10001A6DC(v12, v11);
    if ((v14 & 1) != 0)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v13);
      v16 = *v15;
      swift_bridgeObjectRetain(v15[1]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_100847400);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v27 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = a4(a1);
    v26 = sub_10001A820(v23, v24, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unknown ingestable key {key: %s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }

  return a4(a1);
}

void sub_1004048EC(char a1)
{
  sub_100404908(a1, &qword_100837538, (uint64_t)&qword_100871F48, (uint64_t)sub_100463B5C);
}

void sub_100404908(char a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != -1)
    swift_once(a2, a4);
  __asm { BR              X10 }
}

uint64_t sub_100404C9C(char a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_100837578 != -1)
    swift_once(&qword_100837578, sub_100475C00);
  v2 = qword_100871F50;
  v3 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v4 = 0x44497473696CLL;
  else
    v4 = 0x49746E756F636361;
  if (v3)
    v5 = 0xE900000000000044;
  else
    v5 = 0xE600000000000000;
  if (*(_QWORD *)(qword_100871F50 + 16))
  {
    swift_bridgeObjectRetain(qword_100871F50);
    v6 = sub_10001A6DC(v4, v5);
    if ((v7 & 1) != 0)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v6);
      v4 = *v8;
      swift_bridgeObjectRetain(v8[1]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100837310 != -1)
    swift_once(&qword_100837310, sub_10038B34C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_100847400);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = sub_10001A820(v4, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  return v4;
}

id sub_100404ED4(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100405200(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  NSString v6;
  char v7;
  NSString v8;
  id v9;
  NSString v10;
  char **v11;
  id v12;
  id v13;
  id v16;

  v16 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a2);
    v4 = 0;
    v5 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    do
    {
      v7 = *(_BYTE *)(a2 + v4++ + 32);
      v8 = String._bridgeToObjectiveC()();
      v9 = objc_msgSend(a1, v5[327], v8, swift_bridgeObjectRelease().n128_f64[0]);

      if (v9)
      {
        sub_100402C60(v7);
        v10 = String._bridgeToObjectiveC()();
        v11 = v5;
        v12 = objc_msgSend(v16, v5[327], v10);

        if (!v12 || (v13 = objc_msgSend(v12, "compare:", v9), v12, v13 == (id)-1))
        {
          v6 = String._bridgeToObjectiveC()();
          objc_msgSend(v16, "setToken:forKey:", v9, v6, swift_bridgeObjectRelease().n128_f64[0]);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v5 = v11;
      }
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  return v16;
}

id sub_1004053F0(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100405764(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100405990(void *a1, uint64_t a2)
{
  return sub_10040630C(a1, a2, (uint64_t (*)(uint64_t))sub_10021E440, &qword_100837010, &qword_100871D40, (uint64_t)sub_10021EF78);
}

id sub_1004059B4(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100405C18(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100406080(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_1004062CC(void *a1, uint64_t a2)
{
  return sub_100406B8C(a1, a2, &qword_100837170, &qword_100871D88, (uint64_t)sub_10030E904);
}

id sub_1004062E8(void *a1, uint64_t a2)
{
  return sub_10040630C(a1, a2, (uint64_t (*)(uint64_t))sub_10052E580, &qword_100837860, &qword_100872248, (uint64_t)sub_10052F1AC);
}

id sub_10040630C(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), _QWORD *a4, uint64_t *a5, uint64_t a6)
{
  id v8;
  uint64_t v9;
  __n128 v10;
  uint64_t i;
  NSString v12;
  uint64_t v13;
  NSString v14;
  id v15;
  NSString v16;
  id v17;
  id v18;

  v8 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = swift_bridgeObjectRetain(a2);
    for (i = 0; i != v9; ++i)
    {
      v13 = *(unsigned __int8 *)(a2 + i + 32);
      ((void (*)(uint64_t, __n128))a3)(v13, v10);
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(a1, "getTokenForKey:", v14, swift_bridgeObjectRelease().n128_f64[0]);

      if (v15)
      {
        sub_1004046C4(v13, a4, a5, a3, a6);
        v16 = String._bridgeToObjectiveC()();
        v17 = objc_msgSend(v8, "getTokenForKey:", v16);

        if (!v17 || (v18 = objc_msgSend(v17, "compare:", v15), v17, v18 == (id)-1))
        {
          v12 = String._bridgeToObjectiveC()();
          objc_msgSend(v8, "setToken:forKey:", v15, v12, swift_bridgeObjectRelease().n128_f64[0]);

        }
        else
        {

          v10 = swift_bridgeObjectRelease();
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return v8;
}

id sub_1004064B0(uint64_t a1, uint64_t a2)
{
  return sub_1004064CC(a1, a2);
}

id sub_1004064CC(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_100406700(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X8 }
  }
  return result;
}

id sub_1004069D0(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  NSString v7;
  char v8;
  NSString v9;
  id v10;
  NSString v11;
  char **v12;
  id v13;
  id v14;

  v3 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a2);
    v5 = 0;
    v6 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    do
    {
      v8 = *(_BYTE *)(a2 + v5 + 32);
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(a1, v6[327], v9, swift_bridgeObjectRelease().n128_f64[0]);

      if (v10)
      {
        sub_100404C9C(v8);
        v11 = String._bridgeToObjectiveC()();
        v12 = v6;
        v13 = objc_msgSend(v3, v6[327], v11);

        if (!v13 || (v14 = objc_msgSend(v13, "compare:", v10), v13, v14 == (id)-1))
        {
          v7 = String._bridgeToObjectiveC()();
          objc_msgSend(v3, "setToken:forKey:", v10, v7, swift_bridgeObjectRelease().n128_f64[0]);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v6 = v12;
      }
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_100406B8C(void *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  NSString v10;
  char v11;
  NSString v12;
  id v13;
  NSString v14;
  char **v15;
  id v16;
  id v17;

  v6 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain(a2);
    v8 = 0;
    v9 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    do
    {
      v11 = *(_BYTE *)(a2 + v8 + 32);
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(a1, v9[327], v12, swift_bridgeObjectRelease().n128_f64[0]);

      if (v13)
      {
        sub_100404470(v11, a3, a4, a5);
        v14 = String._bridgeToObjectiveC()();
        v15 = v9;
        v16 = objc_msgSend(v6, v9[327], v14);

        if (!v16 || (v17 = objc_msgSend(v16, "compare:", v13), v16, v17 == (id)-1))
        {
          v10 = String._bridgeToObjectiveC()();
          objc_msgSend(v6, "setToken:forKey:", v13, v10, swift_bridgeObjectRelease().n128_f64[0]);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v9 = v15;
      }
      ++v8;
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  return v6;
}

id sub_100406D5C(void *a1, uint64_t a2)
{
  return sub_100406B8C(a1, a2, &qword_100837538, &qword_100871F48, (uint64_t)sub_100463B5C);
}

void sub_100406D78(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t MetatypeMetadata;
  uint64_t v25;
  unint64_t v26;
  double v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t ObjCClassFromMetadata;
  NSString v39;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t *v42;
  char *v43;
  NSObject *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v8 = (_QWORD *)*v3;
  v45 = type metadata accessor for Date(0);
  v9 = *(NSObject **)(v45 - 8);
  __chkstk_darwin(v45);
  v43 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v46 = *(_QWORD **)(v14 - 8);
  v47 = v14;
  v48 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", __chkstk_darwin(v14).n128_f64[0]);
  v15 = objc_msgSend(a1, "resolutionTokenMap");
  if (v15)
  {
    v44 = v9;
    v16 = v15;
    v17 = sub_1004064CC((uint64_t)v15, a3);
    if (*(_QWORD *)(a3 + 16))
    {
      v41[0] = v16;
      v41[1] = v4;
      v42 = (uint64_t *)v13;
      swift_bridgeObjectRetain(a3);
      v41[2] = a2;
      v41[3] = a3;
      __asm { BR              X9 }
    }

  }
  else
  {
    if (qword_100837448 != -1)
      swift_once(&qword_100837448, sub_100401648);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_1008491F0);
    swift_bridgeObjectRetain_n(a3, 2);
    v19 = a1;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      LODWORD(v45) = v21;
      v22 = swift_slowAlloc(32, -1);
      v23 = (_QWORD *)swift_slowAlloc(8, -1);
      v47 = swift_slowAlloc(64, -1);
      v49 = v47;
      *(_DWORD *)v22 = 136315650;
      v50 = v8;
      MetatypeMetadata = swift_getMetatypeMetadata(v8);
      v25 = String.init<A>(describing:)(&v50, MetatypeMetadata);
      v50 = (_QWORD *)sub_10001A820(v25, v26, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v22 + 12) = 2114;
      v28 = objc_msgSend(v19, "objectID", v27);
      v50 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      v46 = v23;
      *v23 = v28;

      *(_WORD *)(v22 + 22) = 2082;
      v29 = *(_QWORD *)(a3 + 16);
      if (v29)
      {
        v42 = &v51;
        v43 = (char *)v22;
        v44 = v20;
        v50 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v29, 0);
        __asm { BR              X9 }
      }
      v30 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v32 = v31;
      swift_bridgeObjectRelease();
      v50 = (_QWORD *)sub_10001A820(v30, v32, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v45, "%s: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v22, 0x20u);
      v33 = sub_10001A630((uint64_t *)&unk_100839E70);
      v34 = v46;
      swift_arrayDestroy(v46, 1, v33);
      swift_slowDealloc(v34, -1, -1);
      v35 = v47;
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v36 = (void *)objc_opt_self(REMError);
    v37 = sub_1000151B0(0, &qword_1008431C8, REMTemplateSectionStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v37);
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v39);

    swift_willThrow(v40);
  }

}

void sub_100407680(id a1, id a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t MetatypeMetadata;
  uint64_t v50;
  unint64_t v51;
  double v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t ObjCClassFromMetadata;
  NSString v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  double v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  NSObject *v83;
  id v84;
  void *type;
  os_log_type_t typea;
  NSObject *log;
  void *v88;
  uint64_t v89;
  char v90[40];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if ((a3 & 1) != 0)
  {
    v11 = *v4;
    v12 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary");
    v13 = objc_msgSend(a1, "resolutionTokenMap");
    v88 = v12;
    if (v13)
    {
      v14 = v13;
      v15 = sub_10001A630(&qword_1008439B0);
      inited = swift_initStackObject(v15, v90);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_BYTE *)(inited + 32) = 1;
      v17 = sub_100406B8C(v14, inited, &qword_100837458, &qword_100871EC8, (uint64_t)sub_1004019A8);
      swift_setDeallocating(inited);
      v18 = objc_msgSend(a1, "parentTemplateID");
      sub_100404470(1, &qword_100837458, &qword_100871EC8, (uint64_t)sub_1004019A8);
      v19 = String._bridgeToObjectiveC()();
      LODWORD(inited) = objc_msgSend(v12, "mergeWithMap:forKey:", v17, v19, swift_bridgeObjectRelease().n128_f64[0]);

      if ((_DWORD)inited)
      {
        type = v14;
        if (v18)
        {
          v20 = v17;
          v21 = v18;
          sub_1004006D4(1, v21, a4);
          if (v5)
          {

            return;
          }
          v60 = v22;

          v17 = v20;
        }
        else
        {
          v60 = 0;
        }
        if (qword_100837448 != -1)
          swift_once(&qword_100837448, sub_100401648);
        v61 = type metadata accessor for Logger(0);
        sub_10001AAA8(v61, (uint64_t)qword_1008491F0);
        v62 = v60;
        v63 = v60;
        v64 = a2;
        v65 = v63;
        v66 = v64;
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.info.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          v82 = v68;
          v83 = v67;
          v84 = v17;
          v69 = swift_slowAlloc(22, -1);
          v81 = swift_slowAlloc(64, -1);
          v93 = v81;
          *(_DWORD *)v69 = 136446466;
          v70 = objc_msgSend(v66, "remObjectID");
          v91 = (uint64_t)v70;
          v80 = sub_10001A630((uint64_t *)&unk_100844910);
          v71 = Optional.descriptionOrNil.getter(v80);
          v73 = v72;

          v91 = sub_10001A820(v71, v73, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          *(_QWORD *)&v74 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v69 + 12) = 2082;
          if (v62)
          {
            v75 = objc_msgSend(v65, "remObjectID", v74);
            v91 = (uint64_t)v75;
            v76 = Optional.descriptionOrNil.getter(v80);
            v78 = v77;

          }
          else
          {
            v78 = 0xED00003E6574616CLL;
            v76 = 0x706D6574206F6E3CLL;
          }
          v79 = v88;
          v91 = sub_10001A820(v76, v78, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v83, v82, "Updating cdTemplateSection.template {cdTemplateSection: %{public}s, template: %{public}s}", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1, -1);
          swift_slowDealloc(v69, -1, -1);

          v17 = v84;
        }
        else
        {

          v79 = v88;
        }
        objc_msgSend(v66, "setTemplate:", v65);

      }
      else
      {

      }
    }
    else
    {
      if (qword_100837448 != -1)
        swift_once(&qword_100837448, sub_100401648);
      v42 = type metadata accessor for Logger(0);
      sub_10001AAA8(v42, (uint64_t)qword_1008491F0);
      v43 = a1;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc(32, -1);
        v47 = (_QWORD *)swift_slowAlloc(8, -1);
        v48 = swift_slowAlloc(64, -1);
        v91 = v48;
        *(_DWORD *)v46 = 136315650;
        v93 = v11;
        MetatypeMetadata = swift_getMetatypeMetadata(v11);
        v50 = String.init<A>(describing:)(&v93, MetatypeMetadata);
        v93 = sub_10001A820(v50, v51, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *(_QWORD *)&v52 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v46 + 12) = 2114;
        v53 = objc_msgSend(v43, "objectID", v52);
        v93 = (uint64_t)v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *v47 = v53;

        *(_WORD *)(v46 + 22) = 2082;
        v93 = sub_10001A820(0x4449746E65726170, 0xE800000000000000, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s: establishRelationship(onStorage:into cdTemplateSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v46, 0x20u);
        v54 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v47, 1, v54);
        swift_slowDealloc(v47, -1, -1);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {

      }
      v55 = (void *)objc_opt_self(REMError);
      v56 = sub_1000151B0(0, &qword_1008431C8, REMTemplateSectionStorage_ptr);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v56);
      v58 = String._bridgeToObjectiveC()();
      objc_msgSend(v55, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v58);

      swift_willThrow(v59);
    }
  }
  else
  {
    v9 = objc_msgSend(a1, "accountID");
    sub_1003FD094(0, v9, a4, (uint64_t)&type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey, off_1007D6658, &qword_10083AA30);
    if (v5)
    {

    }
    else
    {
      v23 = v10;
      if (qword_100837448 != -1)
        swift_once(&qword_100837448, sub_100401648);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_1008491F0);
      v25 = a2;
      v26 = v23;
      v27 = v25;
      v28 = v26;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v89 = swift_slowAlloc(64, -1);
        v93 = v89;
        *(_DWORD *)v31 = 136446466;
        v32 = objc_msgSend(v27, "remObjectID");
        v33 = sub_10001A630((uint64_t *)&unk_100844910);
        log = v29;
        v34 = Optional.descriptionOrNil.getter(v33);
        typea = v30;
        v36 = v35;

        v91 = sub_10001A820(v34, v36, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v31 + 12) = 2082;
        v38 = objc_msgSend(v28, "remObjectID", v37);
        v91 = (uint64_t)v38;
        v39 = Optional.descriptionOrNil.getter(v33);
        v41 = v40;

        v91 = sub_10001A820(v39, v41, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, typea, "Updating cdTemplateSection.account {cdTemplateSection: %{public}s, account: %{public}s}", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v89, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v27, "setAccount:", v28);

    }
  }
}

uint64_t storeEnumTagSinglePayload for REMTemplateSectionStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004080CC + 4 * byte_1006BAD8C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100408100 + 4 * byte_1006BAD87[v4]))();
}

uint64_t sub_100408100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100408108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100408110);
  return result;
}

uint64_t sub_10040811C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100408124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100408128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100408130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMTemplateSectionStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100408198 + 4 * byte_1006BAD96[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004081CC + 4 * byte_1006BAD91[v4]))();
}

uint64_t sub_1004081CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004081D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004081DCLL);
  return result;
}

uint64_t sub_1004081E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004081F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1004081F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004081FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMTemplateSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_100408218()
{
  return sub_1000BAEEC(&qword_1008493C0, &qword_1008493C8);
}

unint64_t sub_100408240()
{
  unint64_t result;

  result = qword_1008493D0;
  if (!qword_1008493D0)
  {
    result = swift_getWitnessTable(&unk_1006BAEC0, &type metadata for REMTemplateSectionStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_1008493D0);
  }
  return result;
}

uint64_t sub_100408284()
{
  return sub_1000BAEEC(&qword_1008493D8, &qword_1008493E0);
}

unint64_t sub_1004082AC()
{
  unint64_t result;

  result = qword_1008493E8;
  if (!qword_1008493E8)
  {
    result = swift_getWitnessTable(&unk_1006BAF98, &type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_1008493E8);
  }
  return result;
}

uint64_t sub_1004082F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008493F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008493F0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100408380(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSString v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  id v37;
  uint8_t *v38;
  uint8_t *v39;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;

  v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
  v11 = objc_msgSend(a1, "storeController");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "inMemoryPrimaryActiveCKAccountREMObjectID");
    if (v13)
    {
      v46 = a1;
      v47 = v10;
      v48 = v1;
      v14 = v13;
      v15 = objc_msgSend(v13, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      UUID.uuidString.getter(v16);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v12, "storeForAccountIdentifier:", v17, swift_bridgeObjectRelease().n128_f64[0]);

      if (v18)
      {
        v45 = v14;
        sub_10001A630(&qword_100846688);
        v19 = v49;
        v20 = objc_msgSend(v49, "fromDate");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

        v21 = objc_msgSend(v19, "toDate");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

        swift_storeEnumTagMultiPayload(v5, v3, 27);
        sub_10000D2C0();
        v23 = v22;
        v24 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
        v25 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
        v26 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "entity");
        objc_msgSend(v25, "setEntity:", v26);

        objc_msgSend(v25, "setAffectedStores:", 0);
        objc_msgSend(v25, "setPredicate:", v23);

        v27 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v28 = swift_allocObject(v27, 40, 7);
        *(_OWORD *)(v28 + 16) = xmmword_1006A7330;
        *(_QWORD *)(v28 + 32) = v18;
        v50 = v28;
        specialized Array._endMutation()(v28);
        sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
        v29 = v18;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v25, "setAffectedStores:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        v31 = v48;
        v32 = NSManagedObjectContext.count<A>(for:)(v25, v24);
        if (v31)
        {
          sub_1000CACA8((uint64_t)v5);
          v10 = v47;

        }
        else
        {
          v41 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v32);
          v42 = REMAppStoreCreatedOrCompletedRemindersLastMonthCountFetchResultKey;
          v43 = v47;
          objc_msgSend(v47, "storeProperty:forKey:", v41, v42);

          v10 = v43;
          sub_1000CACA8((uint64_t)v5);
        }
        return v10;
      }

      v10 = v47;
    }
    else
    {

    }
  }
  if (qword_100837460 != -1)
    swift_once(&qword_100837460, sub_1004082F0);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001AAA8(v33, (uint64_t)qword_1008493F0);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = v10;
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "REMAppStoreDataViewInvocation: No primary CloudKit account signed in. Returning no results", v38, 2u);
    v39 = v38;
    v10 = v37;
    swift_slowDealloc(v39, -1, -1);
  }

  return v10;
}

id sub_10040885C(void *a1)
{
  return sub_100408380(a1);
}

id sub_10040887C()
{
  return sub_100408890();
}

id sub_100408890()
{
  id v0;
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;

  v0 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v1 = objc_msgSend(v0, "appStoreReviewCreatedOrCompletedRemindersCountThreshold");
  v2 = objc_msgSend(v0, "appStoreReviewNumberOfForegroundsThreshold");
  objc_msgSend(v0, "appStoreReviewTimeIntervalOfInterest");
  v4 = v3;
  objc_msgSend(v0, "appStoreReviewTimeIntervalSinceInitialForeground");
  v6 = v5;
  objc_msgSend(v0, "appStoreReviewTimeIntervalSinceLastPrompt");
  v8 = v7;
  objc_msgSend(v0, "appStoreReviewTimeIntervalSinceLastFetch");
  v10 = objc_msgSend(objc_allocWithZone((Class)REMAppStoreDataViewConfigurationsInvocationResult), "initWithCreatedOrCompletedRemindersCountThreshold:numberOfForegroundsThreshold:timeIntervalOfInterest:timeIntervalSinceInitialForeground:timeIntervalSinceLastPrompt:timeIntervalSinceLastFetch:", v1, v2, v4, v6, v8, v9);

  return v10;
}

uint64_t sub_10040899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100849408);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100849408);
  if (qword_100837658 != -1)
    swift_once(&qword_100837658, sub_1004A18E0);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

double sub_100408A2C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_BYTE *, char *, uint64_t);
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  double result;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint8_t *v44;
  NSObject *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v1 = v0;
  v2 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v50 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (void *)v1[2];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_100837468, sub_10040899C);
LABEL_4:
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100849408);
    v14 = swift_bridgeObjectRetain_n(v8, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v52 = v48;
      *(_DWORD *)v17 = 136446210;
      v18 = v8[2];
      v19 = _swiftEmptyArrayStorage;
      if (v18)
      {
        v43 = v16;
        v44 = v17;
        v45 = v15;
        v47 = v1;
        v51 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v18, 0);
        v20 = *(unsigned __int8 *)(v50 + 80);
        v46 = v8;
        v21 = (char *)v8 + ((v20 + 32) & ~v20);
        v49 = *(_QWORD *)(v50 + 72);
        v22 = *(uint64_t (**)(_BYTE *, char *, uint64_t))(v50 + 16);
        do
        {
          v23 = v22(v4, v21, v2);
          v24 = (void *)REMAccountsListDataView.Model.GroupChild.objectID.getter(v23);
          v25 = objc_msgSend(v24, "stringRepresentation");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

          (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v4, v2);
          v19 = v51;
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          {
            sub_1001C1B0C(0, v19[2] + 1, 1);
            v19 = v51;
          }
          v30 = v19[2];
          v29 = v19[3];
          if (v30 >= v29 >> 1)
          {
            sub_1001C1B0C(v29 > 1, v30 + 1, 1);
            v19 = v51;
          }
          v19[2] = v30 + 1;
          v31 = &v19[2 * v30];
          v31[4] = v26;
          v31[5] = v28;
          v21 += v49;
          --v18;
        }
        while (v18);
        v8 = v46;
        v1 = v47;
        v17 = v44;
        v15 = v45;
        LOBYTE(v16) = v43;
      }
      v38 = Array.description.getter(v19, &type metadata for String);
      v40 = v39;
      swift_bridgeObjectRelease(v19);
      v51 = (_QWORD *)sub_10001A820(v38, v40, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v16, "Updating application shortcuts from RDApplicationShortcutEngine {lists: %{public}s}", v17, 0xCu);
      v41 = v48;
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      if (!v1[5])
        goto LABEL_22;
    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
      if (!v1[5])
        goto LABEL_22;
    }
    sub_100120638((uint64_t)v8);
LABEL_22:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
    return result;
  }
  v11 = v1[3];
  if (v11)
  {
    v8 = *(_QWORD **)(v11 + 16);
    v12 = qword_100837468;
    swift_bridgeObjectRetain(v8);
    if (v12 == -1)
      goto LABEL_4;
    goto LABEL_24;
  }
  if (qword_100837468 != -1)
    swift_once(&qword_100837468, sub_10040899C);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10001AAA8(v32, (uint64_t)qword_100849408);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDApplicationShortcutEngine has no provider; not updating shortcuts",
      v36,
      2u);
    swift_slowDealloc(v36, -1, -1);
  }

  return result;
}

uint64_t sub_100408ECC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for RDApplicationShortcutEngine()
{
  return objc_opt_self(_TtC7remindd27RDApplicationShortcutEngine);
}

double sub_100408F20()
{
  return sub_100408A2C();
}

uint64_t sub_100408F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_10040E2FC(a1, (uint64_t)sub_10040EBCC, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

void sub_100408FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  unint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t, __n128);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;

  v68 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v68 - 8);
  v5 = __chkstk_darwin(v68);
  v65 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v66 = (char *)&v53 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - v9;
  v11 = sub_10001A630(&qword_100849708);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v53 - v15;
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v62 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v58 = a2;
  v59 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v60 = (unint64_t)(v18 + 63) >> 6;
  v61 = (char *)&v53 - v15;
  v53 = v60 - 1;
  v54 = v14;
  v56 = v4;
  v57 = a1;
  v55 = v10;
  if ((v19 & v17) == 0)
    goto LABEL_8;
LABEL_6:
  v21 = __clz(__rbit64(v20));
  v22 = (v20 - 1) & v20;
  v23 = v21 | (v62 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v23, v68);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = sub_10001A630(&qword_100849710);
  v26 = *(_QWORD *)(v24 + 8 * v23);
  *(_QWORD *)&v14[*(int *)(v25 + 48)] = v26;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 0, 1, v25);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_1000A5CA8((uint64_t)v14, (uint64_t)v16, &qword_100849708);
    v31 = sub_10001A630(&qword_100849710);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v16, 1, v31) == 1)
      return;
    v63 = v22;
    v32 = *(int *)(v31 + 48);
    v33 = v68;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v16, v68);
    v34 = *(_QWORD *)&v16[v32];
    v35 = sub_1002C65F8((uint64_t)v10);
    v37 = v36;
    v67 = *(void (**)(char *, uint64_t))(v4 + 8);
    v67(v10, v33);
    if ((v37 & 1) == 0
      || (v38 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v35), v39 = *(_QWORD *)(v38 + 16), v39 != *(_QWORD *)(v34 + 16)))
    {
      v52 = v34;
LABEL_45:
      swift_bridgeObjectRelease(v52);
      return;
    }
    if (v39 && v38 != v34)
      break;
    swift_bridgeObjectRelease(v34);
LABEL_40:
    v16 = v61;
    v20 = v63;
    if (v63)
      goto LABEL_6;
LABEL_8:
    v27 = v62 + 1;
    if (__OFADD__(v62, 1))
      goto LABEL_48;
    if (v27 < v60)
    {
      v28 = *(_QWORD *)(v59 + 8 * v27);
      if (v28)
        goto LABEL_11;
      v29 = v62 + 2;
      ++v62;
      if (v27 + 1 < v60)
      {
        v28 = *(_QWORD *)(v59 + 8 * v29);
        if (v28)
          goto LABEL_14;
        v62 = v27 + 1;
        if (v27 + 2 < v60)
        {
          v28 = *(_QWORD *)(v59 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_11;
          }
          v62 = v27 + 2;
          if (v27 + 3 < v60)
          {
            v28 = *(_QWORD *)(v59 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3;
              goto LABEL_11;
            }
            v29 = v27 + 4;
            v62 = v27 + 3;
            if (v27 + 4 < v60)
            {
              v28 = *(_QWORD *)(v59 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  v27 = v29 + 1;
                  if (__OFADD__(v29, 1))
                    goto LABEL_49;
                  if (v27 >= v60)
                  {
                    v62 = v53;
                    goto LABEL_28;
                  }
                  v28 = *(_QWORD *)(v59 + 8 * v27);
                  ++v29;
                  if (v28)
                    goto LABEL_11;
                }
              }
LABEL_14:
              v27 = v29;
LABEL_11:
              v22 = (v28 - 1) & v28;
              v23 = __clz(__rbit64(v28)) + (v27 << 6);
              v62 = v27;
              goto LABEL_7;
            }
          }
        }
      }
    }
LABEL_28:
    v30 = sub_10001A630(&qword_100849710);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 1, 1, v30);
    v22 = 0;
  }
  v40 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v41 = swift_bridgeObjectRetain(v38);
  v42 = 0;
  v64 = *(_QWORD *)(v4 + 72);
  v43 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16);
  while (1)
  {
    v44 = v66;
    v43(v66, v38 + v40, v68, v41);
    if (v42 >= *(_QWORD *)(v34 + 16))
      break;
    v45 = v34;
    v46 = v65;
    v47 = v68;
    ((void (*)(char *, unint64_t, uint64_t))v43)(v65, v34 + v40, v68);
    v48 = sub_10011D468();
    v49 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v46, v47, v48);
    v50 = v46;
    v51 = v67;
    v67(v50, v47);
    v51(v44, v47);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease(v45);
      v52 = v38;
      goto LABEL_45;
    }
    ++v42;
    v40 += v64;
    v34 = v45;
    if (v39 == v42)
    {
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v38);
      a1 = v57;
      a2 = v58;
      v10 = v55;
      v4 = v56;
      v14 = v54;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_1004094C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  _BOOL4 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for RDSavedReminder(0);
  v59 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v54 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  __chkstk_darwin(v9);
  v55 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_1008496F8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v50 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v56 = 0;
  v53 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v51 = v19;
  v52 = (unint64_t)(v21 + 63) >> 6;
  v50 = v52 - 1;
  v24 = (uint64_t *)&unk_100849700;
  v25 = (uint64_t)v55;
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v27 = (v23 - 1) & v23;
      v28 = v26 | (v56 << 6);
LABEL_8:
      v29 = v53;
      (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(v14, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v60 + 72) * v28, v61);
      v30 = *(_QWORD *)(v29 + 56) + *(_QWORD *)(v59 + 72) * v28;
      v31 = sub_10001A630(v24);
      sub_1000D6E9C(v30, (uint64_t)&v14[*(int *)(v31 + 48)]);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v14, 0, 1, v31);
      goto LABEL_30;
    }
    v32 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v32 < v52)
    {
      v33 = *(_QWORD *)(v51 + 8 * v32);
      if (v33)
        goto LABEL_12;
      v34 = v56 + 2;
      ++v56;
      if (v32 + 1 < v52)
      {
        v33 = *(_QWORD *)(v51 + 8 * v34);
        if (v33)
          goto LABEL_15;
        v56 = v32 + 1;
        if (v32 + 2 < v52)
        {
          v33 = *(_QWORD *)(v51 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_12;
          }
          v56 = v32 + 2;
          if (v32 + 3 < v52)
          {
            v33 = *(_QWORD *)(v51 + 8 * (v32 + 3));
            if (v33)
            {
              v32 += 3;
              goto LABEL_12;
            }
            v34 = v32 + 4;
            v56 = v32 + 3;
            if (v32 + 4 < v52)
              break;
          }
        }
      }
    }
LABEL_29:
    v35 = sub_10001A630(v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 1, 1, v35);
    v27 = 0;
LABEL_30:
    sub_1000A5CA8((uint64_t)v14, (uint64_t)v17, &qword_1008496F8);
    v36 = sub_10001A630(v24);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v17, 1, v36);
    v57 = v37 == 1;
    if (v37 == 1)
      return v57;
    v58 = v27;
    v38 = v24;
    v39 = (uint64_t)&v17[*(int *)(v36 + 48)];
    v40 = v60;
    v41 = v17;
    v42 = v17;
    v43 = v61;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v25, v42, v61);
    sub_1000D6E1C(v39, (uint64_t)v8);
    v44 = sub_1002C65F8(v25);
    v46 = v45;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v25, v43);
    if ((v46 & 1) == 0)
    {
      sub_1000D6E60((uint64_t)v8);
      return 0;
    }
    v47 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v59 + 72) * v44;
    v48 = v54;
    sub_1000D6E9C(v47, v54);
    v49 = sub_10013F228(v48, v8);
    sub_1000D6E60(v48);
    result = sub_1000D6E60((uint64_t)v8);
    v17 = v41;
    v24 = v38;
    v23 = v58;
    if ((v49 & 1) == 0)
      return v57;
  }
  v33 = *(_QWORD *)(v51 + 8 * v34);
  if (v33)
  {
LABEL_15:
    v32 = v34;
LABEL_12:
    v27 = (v33 - 1) & v33;
    v28 = __clz(__rbit64(v33)) + (v32 << 6);
    v56 = v32;
    goto LABEL_8;
  }
  while (1)
  {
    v32 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v32 >= v52)
    {
      v56 = v50;
      goto LABEL_29;
    }
    v33 = *(_QWORD *)(v51 + 8 * v32);
    ++v34;
    if (v33)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10040992C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_1008496D8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  if (a1 == a2)
  {
    v49 = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_36:
    v49 = 0;
    return;
  }
  v45 = a1;
  v46 = (char *)&v42 - v10;
  v48 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v43 = v12;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v42 = v44 - 1;
  v17 = (uint64_t *)&unk_1008496E0;
  v18 = v50;
  v19 = (uint64_t)v47;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v48 << 6);
LABEL_8:
      v22 = v45;
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v9, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v50 + 72) * v21, v51);
      v23 = *(_QWORD *)(v22 + 56);
      v24 = sub_10001A630(v17);
      v25 = *(_QWORD *)(v23 + 8 * v21);
      *(_QWORD *)&v9[*(int *)(v24 + 48)] = v25;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 0, 1, v24);
      swift_bridgeObjectRetain(v25);
      v26 = (uint64_t)v46;
      goto LABEL_30;
    }
    v27 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    v26 = (uint64_t)v46;
    if (v27 < v44)
    {
      v28 = *(_QWORD *)(v43 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v48 + 2;
      ++v48;
      if (v27 + 1 < v44)
      {
        v28 = *(_QWORD *)(v43 + 8 * v29);
        if (v28)
          goto LABEL_15;
        v48 = v27 + 1;
        if (v27 + 2 < v44)
        {
          v28 = *(_QWORD *)(v43 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_12;
          }
          v48 = v27 + 2;
          if (v27 + 3 < v44)
          {
            v28 = *(_QWORD *)(v43 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3;
              goto LABEL_12;
            }
            v29 = v27 + 4;
            v48 = v27 + 3;
            if (v27 + 4 < v44)
              break;
          }
        }
      }
    }
LABEL_29:
    v30 = sub_10001A630(v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v16 = 0;
LABEL_30:
    sub_1000A5CA8((uint64_t)v9, v26, &qword_1008496D8);
    v31 = sub_10001A630(v17);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v26, 1, v31);
    v49 = v32 == 1;
    if (v32 == 1)
      return;
    v33 = v17;
    v34 = *(int *)(v31 + 48);
    v35 = v51;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v19, v26, v51);
    v36 = *(_QWORD *)(v26 + v34);
    v37 = sub_1002C65F8(v19);
    LOBYTE(v34) = v38;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v35);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease(v36);
      goto LABEL_36;
    }
    v39 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v37);
    swift_bridgeObjectRetain(v39);
    v41 = sub_100306B50(v40, v36);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v39);
    v17 = v33;
    if ((v41 & 1) == 0)
      return;
  }
  v28 = *(_QWORD *)(v43 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
LABEL_12:
    v16 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v27 << 6);
    v48 = v27;
    goto LABEL_8;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v44)
    {
      v48 = v42;
      goto LABEL_29;
    }
    v28 = *(_QWORD *)(v43 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
}

void sub_100409D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  _BOOL4 v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  __chkstk_darwin(v4);
  v52 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_1008496E8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v49 = a1;
  v50 = (char *)&v45 - v10;
  v53 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v47 = v12;
  v48 = (unint64_t)(v14 + 63) >> 6;
  v46 = v48 - 1;
  v17 = (uint64_t)v52;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v19 = (v16 - 1) & v16;
      v20 = v18 | (v53 << 6);
      v21 = (uint64_t)v50;
LABEL_9:
      v22 = v49;
      (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v9, *(_QWORD *)(v49 + 48) + *(_QWORD *)(v55 + 72) * v20, v56);
      v23 = (_QWORD *)(*(_QWORD *)(v22 + 56) + 16 * v20);
      v24 = sub_10001A630(&qword_1008496F0);
      v25 = &v9[*(int *)(v24 + 48)];
      v26 = v23[1];
      *(_QWORD *)v25 = *v23;
      *((_QWORD *)v25 + 1) = v26;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 0, 1, v24);
      swift_bridgeObjectRetain(v26);
      goto LABEL_31;
    }
    v27 = v53 + 1;
    v21 = (uint64_t)v50;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v27 < v48)
    {
      v28 = *(_QWORD *)(v47 + 8 * v27);
      if (v28)
        goto LABEL_13;
      v29 = v53 + 2;
      ++v53;
      if (v27 + 1 < v48)
      {
        v28 = *(_QWORD *)(v47 + 8 * v29);
        if (v28)
          goto LABEL_16;
        v53 = v27 + 1;
        if (v27 + 2 < v48)
        {
          v28 = *(_QWORD *)(v47 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_13;
          }
          v53 = v27 + 2;
          if (v27 + 3 < v48)
          {
            v28 = *(_QWORD *)(v47 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3;
              goto LABEL_13;
            }
            v29 = v27 + 4;
            v53 = v27 + 3;
            if (v27 + 4 < v48)
              break;
          }
        }
      }
    }
LABEL_30:
    v30 = sub_10001A630(&qword_1008496F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v19 = 0;
LABEL_31:
    sub_1000A5CA8((uint64_t)v9, v21, &qword_1008496E8);
    v31 = sub_10001A630(&qword_1008496F0);
    v32 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v21, 1, v31) == 1;
    if (v32)
      return;
    v51 = v32;
    v54 = v19;
    v33 = v9;
    v34 = (uint64_t *)(v21 + *(int *)(v31 + 48));
    v36 = v55;
    v35 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v17, v21, v56);
    v37 = *v34;
    v38 = v34[1];
    v39 = sub_1002C65F8(v17);
    LOBYTE(v34) = v40;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v17, v35);
    if ((v34 & 1) == 0)
    {
LABEL_43:
      swift_bridgeObjectRelease(v38);
      return;
    }
    v41 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v39);
    v42 = v41[1];
    if (v42)
    {
      if (!v38)
        return;
      v43 = *v41 == v37 && v42 == v38;
      v9 = v33;
      if (v43)
      {
        swift_bridgeObjectRelease(v38);
        v16 = v54;
      }
      else
      {
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(*v41, v42, v37, v38, 0);
        swift_bridgeObjectRelease(v38);
        v16 = v54;
        if ((v44 & 1) == 0)
          return;
      }
    }
    else
    {
      v9 = v33;
      v16 = v54;
      if (v38)
        goto LABEL_43;
    }
  }
  v28 = *(_QWORD *)(v47 + 8 * v29);
  if (v28)
  {
LABEL_16:
    v27 = v29;
LABEL_13:
    v19 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v27 << 6);
    v53 = v27;
    goto LABEL_9;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v48)
    {
      v53 = v46;
      goto LABEL_30;
    }
    v28 = *(_QWORD *)(v47 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_13;
  }
LABEL_47:
  __break(1u);
}

uint64_t sub_10040A134(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  char *v38;
  void (*v39)(char *);
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char v48;
  void (*v49)(uint64_t, uint64_t);
  char *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = type metadata accessor for UUID(0);
  v4 = *(_QWORD **)(v64 - 8);
  v5 = __chkstk_darwin(v64);
  v59 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v53 - v8;
  __chkstk_darwin(v7);
  v60 = (char *)&v53 - v10;
  v11 = sub_10001A630(&qword_1008452C8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v53 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v61 = 0;
  v57 = a1;
  v58 = a2;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v55 = v19;
  v56 = (unint64_t)(v21 + 63) >> 6;
  v54 = v56 - 1;
  while (1)
  {
    if (v23)
    {
      v63 = (v23 - 1) & v23;
      v24 = __clz(__rbit64(v23)) | (v61 << 6);
LABEL_8:
      v25 = v57;
      v26 = v4[9] * v24;
      v27 = (void (*)(char *, unint64_t, uint64_t))v4[2];
      v28 = v64;
      v27(v14, *(_QWORD *)(v57 + 48) + v26, v64);
      v29 = *(_QWORD *)(v25 + 56) + v26;
      v30 = sub_10001A630(&qword_1008452C0);
      v27(&v14[*(int *)(v30 + 48)], v29, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
      goto LABEL_30;
    }
    v31 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v56)
    {
      v32 = *(_QWORD *)(v55 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v61 + 2;
      ++v61;
      if (v31 + 1 < v56)
      {
        v32 = *(_QWORD *)(v55 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v61 = v31 + 1;
        if (v31 + 2 < v56)
        {
          v32 = *(_QWORD *)(v55 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v61 = v31 + 2;
          if (v31 + 3 < v56)
          {
            v32 = *(_QWORD *)(v55 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            v33 = v31 + 4;
            v61 = v31 + 3;
            if (v31 + 4 < v56)
              break;
          }
        }
      }
    }
LABEL_29:
    v34 = sub_10001A630(&qword_1008452C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
    v63 = 0;
LABEL_30:
    sub_1000A5CA8((uint64_t)v14, (uint64_t)v17, &qword_1008452C8);
    v35 = sub_10001A630(&qword_1008452C0);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v17, 1, v35);
    v62 = v36 == 1;
    if (v36 == 1)
      return v62;
    v37 = v14;
    v38 = &v17[*(int *)(v35 + 48)];
    v39 = (void (*)(char *))v4[4];
    v40 = v17;
    v41 = v4;
    v42 = (uint64_t)v60;
    v43 = v40;
    v44 = v64;
    v39(v60);
    ((void (*)(char *, char *, uint64_t))v39)(v9, v38, v44);
    v45 = v58;
    v46 = v9;
    v47 = sub_1002C65F8(v42);
    LOBYTE(v39) = v48;
    v49 = (void (*)(uint64_t, uint64_t))v41[1];
    v49(v42, v44);
    if ((v39 & 1) == 0)
    {
      v49((uint64_t)v46, v44);
      return 0;
    }
    v50 = v59;
    ((void (*)(char *, unint64_t, uint64_t))v41[2])(v59, *(_QWORD *)(v45 + 56) + v41[9] * v47, v44);
    v51 = sub_10011D468();
    v52 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v46, v44, v51);
    v49((uint64_t)v50, v44);
    result = ((uint64_t (*)(char *, uint64_t))v49)(v46, v44);
    v9 = v46;
    v14 = v37;
    v4 = v41;
    v17 = v43;
    v23 = v63;
    if ((v52 & 1) == 0)
      return v62;
  }
  v32 = *(_QWORD *)(v55 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v63 = (v32 - 1) & v32;
    v24 = __clz(__rbit64(v32)) + (v31 << 6);
    v61 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v56)
    {
      v61 = v54;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(v55 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10040A5C4(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    v19 = sub_10001A6DC(v16, v17);
    v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
      goto LABEL_50;
    v22 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v19);
    v23 = v22[2];
    if (v23 != v18[2])
      goto LABEL_50;
    if (v23)
      v24 = v22 == v18;
    else
      v24 = 1;
    if (!v24)
    {
      v25 = v22[4];
      v26 = v22[5];
      v27 = v18[4];
      v28 = v18[5];
      v29 = v25 == v27 && v26 == v28;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0) & 1) == 0)
        goto LABEL_50;
      if (v23 != 1)
      {
        v30 = v22[6];
        v31 = v22[7];
        v32 = v18[6];
        v33 = v18[7];
        v34 = v30 == v32 && v31 == v33;
        if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0) & 1) == 0)
          goto LABEL_50;
        v35 = v23 - 2;
        if (v35)
        {
          v36 = 0;
          while (1)
          {
            v37 = v22[v36 + 8];
            v38 = v22[v36 + 9];
            v39 = v18[v36 + 8];
            v40 = v18[v36 + 9];
            v41 = v37 == v39 && v38 == v40;
            if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0) & 1) == 0)
              break;
            v36 += 2;
            if (!--v35)
              goto LABEL_6;
          }
LABEL_50:
          swift_bridgeObjectRelease(v18);
          return;
        }
      }
    }
LABEL_6:
    swift_bridgeObjectRelease(v18);
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_54:
  __break(1u);
}

void sub_10040A830(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v28)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v28)
            return;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    v21 = sub_10001A6DC(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v28)
    return;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
}

void sub_10040AA4C(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char v20;
  char v21;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_10001A6DC(v16, v17);
    v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
}

void sub_10040ABFC(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  char v22;
  id v23;
  char v24;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v20 = sub_10001A6DC(v16, v17);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v23 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v20);
    v24 = static NSObject.== infix(_:_:)(v23);

    if ((v24 & 1) == 0)
      return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
}

void sub_10040ADF0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v5 = v2[4];
  sub_10040DBF0(a1, v5);
  v6 = *v2;
  if ((v7 & 1) != 0)
  {
    v8 = (_QWORD *)v2[1];
    v9 = (_QWORD *)v2[2];
    v10 = v2[3];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v11 = v6;
    goto LABEL_41;
  }
  v67 = a2;
  v12 = v2[2];
  v73 = v2[1];
  v71 = v2[3];
  v72 = v12;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_1000F4348(&v73);
  sub_1000F4348(&v72);
  sub_1000F4348(&v71);
  swift_bridgeObjectRetain(a1);
  v69 = v12;
  sub_10040F088(v6, v12, a1);
  v11 = v13;
  v64 = a1;
  swift_bridgeObjectRelease();
  sub_1000F4320(&v73);
  sub_1000F4320(&v72);
  sub_1000F4320(&v71);
  v65 = v6;
  swift_bridgeObjectRelease();
  v66 = v5;
  swift_bridgeObjectRelease();
  v70 = (_QWORD *)sub_1002AFEDC((uint64_t)_swiftEmptyArrayStorage);
  v14 = *(_QWORD *)(v11 + 16);
  v68 = v11;
  if (v14)
  {
    v15 = v73;
    swift_bridgeObjectRetain(v11);
    v16 = (uint64_t *)(v11 + 40);
    do
    {
      if (*(_QWORD *)(v15 + 16))
      {
        v18 = *(v16 - 1);
        v17 = *v16;
        swift_bridgeObjectRetain(*v16);
        v19 = sub_10001A6DC(v18, v17);
        if ((v20 & 1) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v19);
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v21);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
          v24 = sub_10001A6DC(v18, v17);
          v25 = v70[2];
          v26 = (v23 & 1) == 0;
          v27 = v25 + v26;
          if (__OFADD__(v25, v26))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return;
          }
          v28 = v23;
          if (v70[3] >= v27)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1002D70F4();
          }
          else
          {
            sub_1002CEEA4(v27, isUniquelyReferenced_nonNull_native);
            v29 = sub_10001A6DC(v18, v17);
            if ((v28 & 1) != (v30 & 1))
              goto LABEL_46;
            v24 = v29;
          }
          if ((v28 & 1) != 0)
          {
            v31 = v70[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v31 + 8 * v24) = v21;
          }
          else
          {
            v70[(v24 >> 6) + 8] |= 1 << v24;
            v32 = (uint64_t *)(v70[6] + 16 * v24);
            *v32 = v18;
            v32[1] = v17;
            *(_QWORD *)(v70[7] + 8 * v24) = v21;
            v33 = v70[2];
            v34 = __OFADD__(v33, 1);
            v35 = v33 + 1;
            if (v34)
              goto LABEL_44;
            v70[2] = v35;
            swift_bridgeObjectRetain(v17);
          }
          swift_bridgeObjectRelease_n(v17, 2);
        }
        swift_bridgeObjectRelease();
      }
      v16 += 2;
      --v14;
    }
    while (v14);
    v11 = v68;
    swift_bridgeObjectRelease();
  }
  v9 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v36 = *(_QWORD *)(v11 + 16);
  v37 = v69;
  if (!v36)
    goto LABEL_40;
  swift_bridgeObjectRetain(v11);
  v38 = (uint64_t *)(v11 + 40);
  do
  {
    if (!*(_QWORD *)(v37 + 16))
      goto LABEL_24;
    v40 = *(v38 - 1);
    v39 = *v38;
    swift_bridgeObjectRetain(*v38);
    v41 = sub_10001A6DC(v40, v39);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v43 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 16 * v41);
    v44 = *v43;
    v45 = v43[1];
    swift_bridgeObjectRetain_n(v45, 2);
    swift_bridgeObjectRetain(v39);
    v46 = v9;
    v47 = swift_isUniquelyReferenced_nonNull_native(v9);
    v49 = sub_10001A6DC(v40, v39);
    v50 = v46[2];
    v51 = (v48 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
      goto LABEL_43;
    v53 = v48;
    if (v46[3] >= v52)
    {
      if ((v47 & 1) != 0)
      {
        v9 = v46;
        if ((v48 & 1) == 0)
          goto LABEL_36;
      }
      else
      {
        sub_1002D6574();
        v9 = v46;
        if ((v53 & 1) == 0)
          goto LABEL_36;
      }
    }
    else
    {
      sub_1002CCF14(v52, v47);
      v54 = sub_10001A6DC(v40, v39);
      if ((v53 & 1) != (v55 & 1))
        goto LABEL_46;
      v49 = v54;
      v9 = v46;
      if ((v53 & 1) == 0)
      {
LABEL_36:
        v9[(v49 >> 6) + 8] |= 1 << v49;
        v57 = (uint64_t *)(v9[6] + 16 * v49);
        *v57 = v40;
        v57[1] = v39;
        v58 = (_QWORD *)(v9[7] + 16 * v49);
        *v58 = v44;
        v58[1] = v45;
        v59 = v9[2];
        v34 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v34)
          goto LABEL_45;
        v9[2] = v60;
        swift_bridgeObjectRetain(v39);
        goto LABEL_38;
      }
    }
    v56 = (_QWORD *)(v9[7] + 16 * v49);
    swift_bridgeObjectRelease();
    *v56 = v44;
    v56[1] = v45;
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v39, 2);
    swift_bridgeObjectRelease();
    v37 = v69;
LABEL_24:
    v38 += 2;
    --v36;
  }
  while (v36);
  v11 = v68;
  swift_bridgeObjectRelease();
LABEL_40:
  v61 = v71;
  swift_bridgeObjectRetain(v66);
  v62 = sub_1002AF0A8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v65);
  sub_1000F4348(&v73);
  sub_1000F4348(&v72);
  sub_1000F4348(&v71);
  swift_bridgeObjectRetain(v64);
  v10 = sub_10040EC18(v62, v66, v64, v61);
  swift_bridgeObjectRelease();
  sub_1000F4320(&v73);
  sub_1000F4320(&v72);
  sub_1000F4320(&v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v66, 2);
  swift_bridgeObjectRetain(v10);
  v5 = sub_10011E910(v63);
  a2 = v67;
  v8 = v70;
LABEL_41:
  *a2 = v11;
  a2[1] = (uint64_t)v8;
  a2[2] = (uint64_t)v9;
  a2[3] = v10;
  a2[4] = v5;
}

uint64_t sub_10040B364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008494D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008494D0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10040B3F4(char *a1, char *a2)
{
  return sub_1002B3F9C(*a1, *a2);
}

Swift::Int sub_10040B400()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6465696669646F6DLL;
  else
    v2 = 0x44497463656A626FLL;
  if (v1)
    v3 = 0xEC00000065746144;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

double sub_10040B488(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  double result;

  if (*v1)
    v2 = 0x6465696669646F6DLL;
  else
    v2 = 0x44497463656A626FLL;
  if (*v1)
    v3 = 0xEC00000065746144;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_10040B4EC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6465696669646F6DLL;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xEC00000065746144;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10040B570(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE8F8, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_10040B5CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x44497463656A626FLL;
  if (*v1)
    v2 = 0x6465696669646F6DLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEC00000065746144;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10040B614(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE8F8, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

uint64_t sub_10040B674()
{
  _BYTE *v0;

  if (*v0)
    return 0x6465696669646F6DLL;
  else
    return 0x44497463656A626FLL;
}

void sub_10040B6B8(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0DA0;
}

Swift::Int sub_10040B6C8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x49746E756F636361, 0xE900000000000044);
  return Hasher._finalize()();
}

uint64_t sub_10040B71C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x49746E756F636361, 0xE900000000000044);
}

Swift::Int sub_10040B738(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x49746E756F636361, 0xE900000000000044);
  return Hasher._finalize()();
}

void sub_10040B788(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E0DC8, v3);
  swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
}

void sub_10040B7D8(_QWORD *a1@<X8>)
{
  *a1 = 0x49746E756F636361;
  a1[1] = 0xE900000000000044;
}

void sub_10040B7F8(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEF50, v3);
  swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
}

uint64_t sub_10040B84C()
{
  return 0x49746E756F636361;
}

void sub_10040B868(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0E00;
}

void sub_10040B878(void *a1, char *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  NSString v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  id v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  NSString v66;
  uint64_t v67;
  unsigned __int16 v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  Swift::String v76;
  unint64_t v77;
  char v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  double v103;
  double v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t (*v109)(char *, _QWORD *);
  _QWORD *v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  char v121;
  uint64_t v122;
  double v123;
  id v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  Class isa;
  uint64_t v139;
  char *v140;
  Class v141;
  id v142;
  id v143;
  uint64_t v144;
  id v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  char v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  id v158;
  id v159;
  id v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  _QWORD *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  __int128 v179;
  __int128 v180;
  _BYTE v181[40];
  uint64_t v182[3];
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  __int128 v186;
  __int128 v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD v198[2];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206[5];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD v223[2];
  __int128 v224;
  __int128 v225;

  v169 = a2;
  v4 = v3;
  v170 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v170);
  v8 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = (_QWORD *)type metadata accessor for Date(0);
  *(_QWORD *)&v166 = *(v167 - 1);
  __chkstk_darwin(v167);
  v164 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  *(_QWORD *)&v165 = (char *)&v155 - v16;
  v173 = a3;
  v17 = objc_msgSend(a3, "remObjectID", v15);
  v171 = v10;
  v172 = v9;
  if (!v17)
  {
LABEL_12:
    v176 = 0;
    v177 = 0xE000000000000000;
    _StringGuts.grow(_:)(177);
    v42._countAndFlagsBits = 0xD00000000000007ELL;
    v42._object = (void *)0x8000000100703430;
    String.append(_:)(v42);
    v43 = *(id *)(v4 + 16);
    v44 = objc_msgSend(v43, "description");
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    v48._countAndFlagsBits = v45;
    v48._object = v47;
    String.append(_:)(v48);

    swift_bridgeObjectRelease();
    v49._object = (void *)0x80000001007034B0;
    v49._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v49);
    v50 = objc_msgSend(a1, "remObjectID");
    v51 = objc_msgSend(v50, "description");
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);

    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0xD000000000000018;
    v56._object = (void *)0x80000001007034D0;
    String.append(_:)(v56);
    v57 = objc_msgSend(v173, "identifier");
    if (v57)
    {
      v58 = v57;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

      v59 = 0;
    }
    else
    {
      v59 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v8, v59, 1, v172);
    v60 = (void *)objc_opt_self(REMError);
    v61 = Optional.descriptionOrNil.getter(v170);
    v63 = v62;
    sub_10011E85C((uint64_t)v8);
    v64._countAndFlagsBits = v61;
    v64._object = v63;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 125;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    v66 = String._bridgeToObjectiveC()();
    objc_msgSend(v60, "internalErrorWithDebugDescription:", v66, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v67);
    return;
  }
  v18 = v17;
  v161 = v12;
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v163 = v4;
  if ((static NSObject.== infix(_:_:)(v18) & 1) == 0)
  {

    v4 = v163;
    goto LABEL_12;
  }
  LODWORD(v170) = objc_msgSend(a1, "listType");
  v19 = objc_msgSend(a1, "listID");
  v20 = v19;
  v159 = v18;
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v23 = v22;
  v24 = v169;
  if (qword_100837470 != -1)
    swift_once(&qword_100837470, sub_10040B364);
  v160 = v20;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001AAA8(v25, (uint64_t)qword_1008494D0);
  swift_bridgeObjectRetain_n(v23, 2);
  v27 = a1;
  v157 = v26;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter(v28);
  v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
  v162 = v23;
  v158 = v27;
  if (v30)
  {
    v156 = v29;
    v31 = swift_slowAlloc(32, -1);
    v155 = swift_slowAlloc(64, -1);
    v176 = v155;
    *(_DWORD *)v31 = 136315650;
    LOWORD(v174) = v170;
    type metadata accessor for REMManualOrderingListType(0);
    v33 = String.init<A>(describing:)(&v174, v32);
    v174 = sub_10001A820(v33, v34, (uint64_t *)&v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, &v175);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(v23);
    v174 = sub_10001A820(v21, v23, (uint64_t *)&v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, &v175);
    *(_QWORD *)&v35 = swift_bridgeObjectRelease_n(v23, 3).n128_u64[0];
    *(_WORD *)(v31 + 22) = 2048;
    v36 = objc_msgSend(v27, "topLevelElementIDs", v35);
    v37 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0)
        v154 = v38;
      else
        v154 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v39 = _CocoaArrayWrapper.endIndex.getter(v154);

      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    v40 = (void *)v21;
    swift_bridgeObjectRelease();
    v174 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, &v175);

    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v156, "merging manual ordering {list type: %s, list ID: %s, top-level reminders count: %ld}", (uint8_t *)v31, 0x20u);
    v41 = v155;
    swift_arrayDestroy(v155, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v24 = v169;
  }
  else
  {
    v40 = (void *)v21;

    swift_bridgeObjectRelease_n(v23, 2);
  }
  v68 = v170;
  objc_msgSend(v24, "setListTypeRawValue:", v170);
  v69 = v160;
  objc_msgSend(v24, "setListID:", v160);

  v70 = (void *)objc_opt_self(ICCloudConfiguration);
  v71 = objc_msgSend(v70, "sharedConfiguration");
  v72 = objc_msgSend(v71, "manualSortHintLastAccessedUpdatePolicy");

  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v75 = v74;

  v76._countAndFlagsBits = v73;
  v76._object = v75;
  v77 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DB400, v76);
  swift_bridgeObjectRelease();
  if (v77 >= 3)
    v78 = 2;
  else
    v78 = v77;
  sub_10023DDC0(v78);
  v79 = objc_msgSend(v24, "storeControllerManagedObjectContext");
  if (!v79)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v80 = v79;
  v81 = v168;
  v82 = sub_10040CD58(v173, v68);
  if (v81)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v83 = v82;
  v173 = v40;
  v176 = 0;
  __chkstk_darwin(v82);
  *(&v155 - 4) = v84;
  *(&v155 - 3) = (uint64_t)v80;
  *(&v155 - 2) = (uint64_t)&v176;
  v85 = v158;
  swift_retain();
  v86 = v80;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1001D8BCC);
  v168 = v83;
  v87 = v176;
  if (!v176)
    v87 = sub_1002AF1B8((uint64_t)_swiftEmptyArrayStorage);
  sub_100461958(v85, v87, v168, v86, &v178);
  sub_10019CD04((uint64_t)v181);
  v160 = v86;
  sub_1000A5CA8((uint64_t)v181, (uint64_t)v198, (uint64_t *)&unk_1008458E0);
  if (*(_QWORD *)&v198[0])
  {
    v200 = v198[0];
    v201 = v198[1];
    v202 = (char *)v199;
    sub_10040D018((uint64_t *)&v178, 1, v182);
    v223[0] = v178;
    sub_1000F4320(v223);
    v222 = v179;
    sub_1000F4320(&v222);
    v221 = *((_QWORD *)&v179 + 1);
    sub_1000F4320(&v221);
    v220 = v180;
    sub_1000F4320(&v220);
    v219 = *((_QWORD *)&v180 + 1);
    sub_1000F4320(&v219);
    v102 = objc_msgSend(v70, "sharedConfiguration");
    objc_msgSend(v102, "manualSortHintClientSideExpiration");
    v104 = v103;

    v105 = v164;
    v107 = Date.init()(v106);
    v108 = (char *)v165;
    Date.addingTimeInterval(_:)(v107, -v104);
    v109 = *(uint64_t (**)(char *, _QWORD *))(v166 + 8);
    v110 = v167;
    v111 = v109(v105, v167);
    v112 = Date.timeIntervalSinceReferenceDate.getter(v111);
    v109(v108, v110);
    v113 = v183;
    v114 = v184;
    v217 = v182[1];
    v218 = v182[0];
    v215 = v183;
    v216 = v182[2];
    sub_1000F4348(&v218);
    sub_1000F4348(&v217);
    sub_1000F4348(&v216);
    sub_1000F4348(&v215);
    swift_bridgeObjectRetain(v114);
    sub_10040F228(v115, v113, v112);
    v117 = v116;
    sub_1000F4320(&v218);
    sub_1000F4320(&v217);
    sub_1000F4320(&v216);
    sub_1000F4320(&v215);
    v118 = sub_10011EE40(v117);
    swift_bridgeObjectRelease();
    sub_10040ADF0(v118, (uint64_t *)&v185);
    swift_bridgeObjectRelease();
    sub_1000F4320(&v218);
    sub_1000F4320(&v217);
    sub_1000F4320(&v216);
    sub_1000F4320(&v215);
    swift_bridgeObjectRelease();
    v167 = v185;
    if ((sub_100305764(v185, (_QWORD *)v200) & 1) != 0)
    {
      sub_10040A5C4(v186, *((uint64_t *)&v200 + 1));
      if ((v119 & 1) != 0)
      {
        sub_10040A830(*((uint64_t *)&v186 + 1), v201);
        if ((v120 & 1) != 0)
        {
          *(_QWORD *)&v166 = v187;
          sub_10040AA4C(v187, *((uint64_t *)&v201 + 1));
          if ((v121 & 1) != 0)
          {
            v164 = v202;
            *(_QWORD *)&v165 = *((_QWORD *)&v187 + 1);
            if ((sub_1004F6374(*((uint64_t *)&v187 + 1), (uint64_t)v202) & 1) != 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_release(v168);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
      }
    }
    sub_1003A78C4(&v188);
    swift_bridgeObjectRelease();
    v203 = *((_QWORD *)&v200 + 1);
    sub_1000F4320(&v203);
    v204 = v201;
    sub_1000F4320(&v204);
    v205 = *((_QWORD *)&v201 + 1);
    sub_1000F4320(&v205);
    v206[0] = (uint64_t)v202;
    sub_1000F4320(v206);
    sub_1003A78C4(&v193);
    v24 = v169;
    swift_bridgeObjectRelease();
    v146 = sub_100305764(v188, v193);
    if ((v146 & 1) != 0)
    {
      v147 = v189;
      v148 = v194;
      sub_10040A5C4(v189, v194);
      v88 = v163;
      if ((v149 & 1) == 0 || (sub_10040A830(v190, v195), (v150 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        LODWORD(v173) = 1;
LABEL_69:
        v214 = v147;
        sub_1000F4320(&v214);
        v213 = v190;
        sub_1000F4320(&v213);
        v212 = v191;
        sub_1000F4320(&v212);
        v211 = v192;
        sub_1000F4320(&v211);
        swift_bridgeObjectRelease();
        v210 = v148;
        sub_1000F4320(&v210);
        v209 = v195;
        sub_1000F4320(&v209);
        v208 = v196;
        sub_1000F4320(&v208);
        v207 = v197;
        sub_1000F4320(&v207);
        v165 = v187;
        v166 = v186;
        goto LABEL_28;
      }
      sub_10040AA4C(v191, v196);
      if ((v151 & 1) != 0)
      {
        v152 = sub_1004F6374(v192, v197);
        swift_bridgeObjectRelease();
        v153 = v152 ^ 1;
      }
      else
      {
        swift_bridgeObjectRelease();
        v153 = 1;
      }
      LODWORD(v173) = v153;
      v24 = v169;
    }
    else
    {
      swift_bridgeObjectRelease();
      v147 = v189;
      LODWORD(v173) = 1;
      v148 = v194;
    }
    v88 = v163;
    goto LABEL_69;
  }
  swift_bridgeObjectRelease();
  v165 = v180;
  v166 = v179;
  LODWORD(v173) = 1;
  v167 = v178;
  v88 = v163;
LABEL_28:
  v89 = v167;
  v223[1] = v167;
  v224 = v166;
  v225 = v165;
  swift_bridgeObjectRetain(*((_QWORD *)&v165 + 1));
  v91 = sub_10040E8AC(v90);
  sub_10023DC80(v91);
  v92 = sub_10046218C(1, v89, v166, *((uint64_t *)&v166 + 1));
  sub_10023DC94(v92);
  v93 = objc_msgSend(v24, "concatenatedContainerIDsWithLocalContainerIDPrefix");
  if (v93)
  {
    v94 = v93;
    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
    v97 = v96;

    v176 = v95;
    v177 = v97;
    v98 = *(_QWORD *)&v169[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                         + 8];
    v174 = *(_QWORD *)&v169[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    v175 = v98;
    v99 = sub_1000E525C();
    v100 = StringProtocol.components<A>(separatedBy:)(&v174, &type metadata for String, &type metadata for String, v99, v99);
    v24 = v169;
    swift_bridgeObjectRelease();
    v101 = (_QWORD *)sub_10011EE40(v100);
    swift_bridgeObjectRelease();
  }
  else
  {
    v101 = &_swiftEmptySetSingleton;
  }
  v122 = v101[2];
  *(_QWORD *)&v123 = swift_bridgeObjectRelease().n128_u64[0];
  if (v122)
    goto LABEL_45;
  v124 = objc_msgSend(v24, "concatenatedElementIDsWithLocalElementIDPrefix", v123);
  if (v124)
  {
    v125 = v124;
    v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
    v128 = v127;

    v176 = v126;
    v177 = v128;
    v129 = *(_QWORD *)&v169[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix
                          + 8];
    v174 = *(_QWORD *)&v169[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    v175 = v129;
    v130 = sub_1000E525C();
    v131 = StringProtocol.components<A>(separatedBy:)(&v174, &type metadata for String, &type metadata for String, v130, v130);
    v24 = v169;
    swift_bridgeObjectRelease();
    v132 = (_QWORD *)sub_10011EE40(v131);
    swift_bridgeObjectRelease();
  }
  else
  {
    v132 = &_swiftEmptySetSingleton;
  }
  v133 = v132[2];
  swift_bridgeObjectRelease();
  if (v133)
  {
LABEL_45:
    v134 = *(void **)(v88 + 24);
    if (qword_100837478 != -1)
      swift_once(&qword_100837478, sub_10040DBBC);
    objc_msgSend(v134, "postNotificationName:object:", qword_100871ED0, 0);
  }
  v135 = sub_1000F319C();
  v137 = v136;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A71C8(v135, v137);
  objc_msgSend(v24, "setHintData:", isa);

  if ((v173 & 1) != 0)
  {
    v140 = v161;
    UUID.init()(v139);
    v141 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v171 + 8))(v140, v172);
    objc_msgSend(v24, "setETag:", v141);

  }
  objc_msgSend(v24, "setSerializationVersion:", 1);
  v142 = v159;
  v143 = v160;
  v144 = v168;
  switch((__int16)v170)
  {
    case 1:
    case 2:
    case 3:
      goto LABEL_53;
    case 4:
    case 5:
    case 6:
      v145 = objc_msgSend(v24, "minimumSupportedVersion");
      if (v145 == (id)kREMSupportedVersionUnset)
        objc_msgSend(v24, "setMinimumSupportedVersion:", kREMSupportedVersionFor2022);
LABEL_53:

      swift_release(v144);
      break;
    default:

      swift_release(v168);
      break;
  }
}

uint64_t sub_10040CD58(void *a1, unsigned __int16 a2)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 > 6u)
    goto LABEL_12;
  if (((1 << a2) & 0x3A) == 0)
  {
    if (((1 << a2) & 0x44) != 0)
    {
      v2 = a1;
      v10 = sub_10053CA80();
      v11 = type metadata accessor for RDManualSortIDCache();
      if (qword_1008376B8 != -1)
        v11 = swift_once(&qword_1008376B8, sub_1004A3E44);
      __chkstk_darwin(v11);
      OS_dispatch_queue.sync<A>(execute:)(&v21, sub_1001D8BB0);
      v12 = v21;
      v13 = type metadata accessor for RDManualSortIDAdapter();
      swift_allocObject(v13, 33, 7);
      v7 = v12;
      v8 = (uint64_t)v10;
      v9 = 1;
      goto LABEL_10;
    }
LABEL_12:
    v16 = (void *)objc_opt_self(REMError);
    v21 = 0;
    _StringGuts.grow(_:)(108);
    v17._object = (void *)0x8000000100703520;
    v17._countAndFlagsBits = 0xD00000000000006ALL;
    String.append(_:)(v17);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v14 = 0xE000000000000000;
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "internalErrorWithDebugDescription:", v19, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v20);
    return v14;
  }
  v2 = a1;
  v3 = sub_10053CA80();
  v4 = type metadata accessor for RDManualSortIDCache();
  if (qword_1008376B8 != -1)
    v4 = swift_once(&qword_1008376B8, sub_1004A3E44);
  __chkstk_darwin(v4);
  OS_dispatch_queue.sync<A>(execute:)(&v21, sub_1001D92EC);
  v5 = v21;
  v6 = type metadata accessor for RDManualSortIDAdapter();
  swift_allocObject(v6, 33, 7);
  v7 = v5;
  v8 = (uint64_t)v3;
  v9 = 0;
LABEL_10:
  v14 = sub_10018C174(v7, v8, v9);

  return v14;
}

void sub_10040D018(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  char v36;
  char v37;
  int isUniquelyReferenced_nonNull_native;
  __n128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __n128 v60;
  uint64_t v61;
  char v62;
  __n128 v63;
  __n128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  _QWORD *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t *v110;
  int v111;
  _QWORD *v112;
  uint64_t *v113;
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[5];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v4 = v3;
  v120 = sub_10001A630(&qword_100849698);
  v117 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v119 = (char *)v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[4]);
  }
  else
  {
    v136[0] = a1[4];
    __chkstk_darwin(v8);
    v112 = v4;
    v113 = a1;
    swift_bridgeObjectRetain(v10);
    v11 = sub_10001A630(&qword_100841A60);
    v12 = sub_1000A5F84((unint64_t *)&qword_100841A68, &qword_100841A60, (uint64_t)&protocol conformance descriptor for Set<A>);
    v10 = Sequence.compactMapToSet<A>(_:)(sub_10040F6F8, &v111, v11, &type metadata for String, v12, &protocol witness table for String);
    swift_bridgeObjectRelease();
  }
  sub_10040DBF0(v10, v4[4]);
  v118 = a3;
  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v14 = *a1;
    v15 = a1[1];
    v17 = a1[2];
    v16 = a1[3];
    v18 = a1[4];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
LABEL_80:
    v110 = v118;
    *v118 = v14;
    v110[1] = v15;
    v110[2] = v17;
    v110[3] = v16;
    v110[4] = v18;
    return;
  }
  v116 = 0;
  sub_10040ADF0(v10, &v131);
  sub_10040ADF0(v10, v136);
  swift_bridgeObjectRelease();
  v141 = v131;
  v129 = v131;
  v127 = v136[0];
  v19 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v20 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.difference<A>(from:)(&v127, v19, v19, v20, v20, &protocol witness table for String);
  v21 = *v4;
  v22 = sub_10001A630(&qword_1008496A0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = swift_bridgeObjectRetain(v21);
  v124 = MutableOrderedSet.init(_:)(v23);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v123 = MutableOrderedSet.init(_:)(v24);
  v140 = v136[1];
  sub_1000F4320(&v140);
  v139 = v136[2];
  sub_1000F4320(&v139);
  v138 = v136[3];
  sub_1000F4320(&v138);
  v137 = v136[4];
  sub_1000F4320(&v137);
  v122 = v4;
  v25 = v4[1];
  v26 = swift_bridgeObjectRetain(v25);
  v27 = CollectionDifference.removals.getter(v120, v26);
  v28 = *(_QWORD *)(v27 + 16);
  v121 = v27;
  if (v28)
  {
    v29 = (_BYTE *)(v27 + 40 * v28 + 25);
    do
    {
      if (*v29 == 1)
      {
        v31 = *(_QWORD *)(v29 - 33);
        v32 = *(_QWORD *)(v29 - 25);
        v33 = *(_QWORD *)(v29 - 17);
        v129 = v32;
        v130 = v33;
        sub_10040F6E8(v31, v32, v33);
        v34 = swift_bridgeObjectRetain(v33);
        MutableOrderedSet.remove(_:)(&v129, v34);
        swift_bridgeObjectRetain(v25);
        v35 = sub_10001A6DC(v32, v33);
        v37 = v36;
        v30 = swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
          v127 = v25;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1002D70F4();
            v25 = v127;
          }
          swift_bridgeObjectRelease();
          sub_100289D70(v35, v25);
          swift_bridgeObjectRelease();
          v30 = swift_bridgeObjectRelease();
        }
        MutableOrderedSet.remove(_:)(&v129, v30);
        swift_bridgeObjectRelease();
        sub_10040F6F0(v31, v32, v33);
      }
      v29 -= 40;
      --v28;
    }
    while (v28);
  }
  v39 = swift_bridgeObjectRelease();
  v40 = MutableOrderedSet.isEmpty.getter(v39);
  v41 = CollectionDifference.insertions.getter(v120);
  v42 = *(_QWORD *)(v41 + 16);
  if ((v40 & 1) != 0)
  {
    v43 = v122;
    if (v42)
    {
      swift_bridgeObjectRetain(v41);
      v45 = (uint64_t *)(v44 + 40);
      v46 = _swiftEmptyArrayStorage;
      do
      {
        if ((*((_BYTE *)v45 + 25) & 1) == 0)
        {
          v49 = *v45;
          v48 = v45[1];
          swift_bridgeObjectRetain(v48);
          if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
            v46 = sub_1002C8224(0, v46[2] + 1, 1, v46);
          v51 = v46[2];
          v50 = v46[3];
          if (v51 >= v50 >> 1)
            v46 = sub_1002C8224((_QWORD *)(v50 > 1), v51 + 1, 1, v46);
          v46[2] = v51 + 1;
          v47 = &v46[2 * v51];
          v47[4] = v49;
          v47[5] = v48;
          v43 = v122;
        }
        v45 += 5;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    MutableOrderedSet.addValues(from:)((Swift::OpaquePointer)v46);
    goto LABEL_52;
  }
  v43 = v122;
  if (!v42)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  swift_bridgeObjectRetain(v41);
  v115 = v52;
  v53 = (_BYTE *)(v52 + 65);
  while (1)
  {
    if ((*v53 & 1) != 0)
      goto LABEL_31;
    v56 = *(_QWORD *)(v53 - 33);
    v57 = *(_QWORD *)(v53 - 25);
    v58 = *(_QWORD *)(v53 - 17);
    v59 = *(v53 - 1);
    v129 = v57;
    v130 = v58;
    LODWORD(v121) = v59;
    if (!v56)
    {
      sub_10040F6E8(0, v57, v58);
      v63 = swift_bridgeObjectRetain(v58);
      MutableOrderedSet.value(at:)(&v125, 0, v63);
      if (!v126)
        goto LABEL_47;
      v127 = v125;
      v128 = v126;
      v65 = MutableOrderedSet.index(of:)(&v127);
      if ((v66 & 1) != 0)
      {
        v64 = swift_bridgeObjectRelease();
LABEL_47:
        MutableOrderedSet.add(_:)(&v129, v64);
        swift_bridgeObjectRelease();
        v55 = 0;
        goto LABEL_30;
      }
      MutableOrderedSet.insert(_:at:)(&v129, v65);
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    if (__OFSUB__(v56, 1))
      goto LABEL_83;
    if (v56 - 1 < 0)
      goto LABEL_86;
    sub_10040F6E8(v56, v57, v58);
    v60 = swift_bridgeObjectRetain(v58);
    MutableOrderedSet.value(at:)(&v125, v56 - 1, v60);
    if (v126)
      break;
LABEL_28:
    MutableOrderedSet.add(_:)(&v129, v54);
LABEL_29:
    swift_bridgeObjectRelease();
    v55 = v56;
LABEL_30:
    sub_10040F6F0(v55, v57, v58);
LABEL_31:
    v53 += 40;
    if (!--v42)
    {
      swift_bridgeObjectRelease_n(v115, 2);
LABEL_53:
      v67 = v132;
      swift_bridgeObjectRetain(v132);
      v68 = swift_isUniquelyReferenced_nonNull_native(v25);
      v129 = v25;
      v69 = v116;
      sub_10040E5C8(v67, (uint64_t)sub_10040EBE4, 0, v68, &v129);
      if (v69)
        goto LABEL_87;
      v15 = v129;
      v70 = swift_bridgeObjectRelease();
      v71 = MutableOrderedSet.array.getter(v70);
      v17 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
      v72 = *(_QWORD *)(v71 + 16);
      if (!v72)
      {
LABEL_79:
        swift_bridgeObjectRelease();
        v104 = v43[3];
        v105 = v134;
        swift_bridgeObjectRetain(v104);
        swift_bridgeObjectRetain(v105);
        v16 = sub_100408F44(v106, v104);
        sub_1000F4320(&v141);
        swift_bridgeObjectRelease();
        v129 = v133;
        sub_1000F4320(&v129);
        swift_bridgeObjectRelease();
        v127 = v135;
        sub_1000F4320(&v127);
        swift_bridgeObjectRetain(v16);
        v18 = sub_10011E910(v107);
        v108 = v124;
        v14 = MutableOrderedSet.array.getter(v109);
        swift_release(v123);
        swift_release(v108);
        (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v120);
        goto LABEL_80;
      }
      v114[2] = 0;
      v115 = v67;
      v116 = v15;
      v73 = v133;
      swift_bridgeObjectRetain(v71);
      v114[1] = v71;
      v74 = (uint64_t *)(v71 + 40);
      v121 = v73;
      while (1)
      {
        v77 = *(v74 - 1);
        v76 = *v74;
        v78 = *(_QWORD *)(v73 + 16);
        swift_bridgeObjectRetain(*v74);
        if (v78 && (v79 = sub_10001A6DC(v77, v76), (v80 & 1) != 0))
        {
          v81 = (uint64_t *)(*(_QWORD *)(v73 + 56) + 16 * v79);
          v82 = *v81;
          v83 = v81[1];
          swift_bridgeObjectRetain(v83);
        }
        else
        {
          v84 = v43[2];
          if (!*(_QWORD *)(v84 + 16))
          {
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
          swift_bridgeObjectRetain(v76);
          v85 = sub_10001A6DC(v77, v76);
          if ((v86 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v76, 2);
            goto LABEL_58;
          }
          v87 = (uint64_t *)(*(_QWORD *)(v84 + 56) + 16 * v85);
          v82 = *v87;
          v83 = v87[1];
          swift_bridgeObjectRetain(v83);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain(v76);
        v88 = v17;
        v89 = swift_isUniquelyReferenced_nonNull_native(v17);
        v129 = v17;
        v91 = sub_10001A6DC(v77, v76);
        v92 = *(_QWORD *)(v17 + 16);
        v93 = (v90 & 1) == 0;
        v94 = v92 + v93;
        if (__OFADD__(v92, v93))
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          goto LABEL_86;
        }
        v95 = v90;
        if (*(_QWORD *)(v88 + 24) >= v94)
        {
          if ((v89 & 1) != 0)
          {
            v98 = (_QWORD *)v129;
            if ((v90 & 1) == 0)
              goto LABEL_72;
          }
          else
          {
            sub_1002D6574();
            v98 = (_QWORD *)v129;
            if ((v95 & 1) == 0)
              goto LABEL_72;
          }
        }
        else
        {
          sub_1002CCF14(v94, v89);
          v96 = sub_10001A6DC(v77, v76);
          if ((v95 & 1) != (v97 & 1))
            goto LABEL_85;
          v91 = v96;
          v98 = (_QWORD *)v129;
          if ((v95 & 1) == 0)
          {
LABEL_72:
            v98[(v91 >> 6) + 8] |= 1 << v91;
            v99 = (uint64_t *)(v98[6] + 16 * v91);
            *v99 = v77;
            v99[1] = v76;
            v100 = (_QWORD *)(v98[7] + 16 * v91);
            *v100 = v82;
            v100[1] = v83;
            v101 = v98[2];
            v102 = __OFADD__(v101, 1);
            v103 = v101 + 1;
            if (v102)
              goto LABEL_82;
            v17 = (unint64_t)v98;
            v98[2] = v103;
            swift_bridgeObjectRetain(v76);
            goto LABEL_57;
          }
        }
        v17 = (unint64_t)v98;
        v75 = (_QWORD *)(v98[7] + 16 * v91);
        swift_bridgeObjectRelease();
        *v75 = v82;
        v75[1] = v83;
LABEL_57:
        swift_bridgeObjectRelease_n(v76, 2);
        swift_bridgeObjectRelease();
        v43 = v122;
        v73 = v121;
LABEL_58:
        v74 += 2;
        if (!--v72)
        {
          swift_bridgeObjectRelease();
          v15 = v116;
          goto LABEL_79;
        }
      }
    }
  }
  v127 = v125;
  v128 = v126;
  v61 = MutableOrderedSet.index(of:)(&v127);
  if ((v62 & 1) != 0)
  {
    v54 = swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if (v61 == -1)
    goto LABEL_84;
  MutableOrderedSet.insert(_:at:)(&v129, v61 + 1);
  swift_bridgeObjectRelease();
  if ((v56 & 0x8000000000000000) == 0)
  {
LABEL_44:
    MutableOrderedSet.insert(_:at:)(&v129, v56);
    goto LABEL_29;
  }
LABEL_86:
  LOBYTE(v111) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v111, 3451, 0);
  __break(1u);
LABEL_87:
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t type metadata accessor for REMManualOrderingCDIngestor()
{
  return objc_opt_self(_TtC7remindd27REMManualOrderingCDIngestor);
}

_UNKNOWN **sub_10040DBA4()
{
  return &off_1007F3050;
}

_UNKNOWN **sub_10040DBB0()
{
  return &off_1007F3020;
}

NSString sub_10040DBBC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100871ED0 = (uint64_t)result;
  return result;
}

void sub_10040DBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[9];

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return;
  v2 = a2;
  v3 = a1;
  v31 = a2 + 56;
  v4 = -1 << *(_BYTE *)(a2 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v30 = (unint64_t)(63 - v4) >> 6;
  v32 = a1 + 56;
  swift_bridgeObjectRetain(a2);
  for (i = 0; ; i = v10)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (i << 6);
      v10 = i;
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_39;
      goto LABEL_24;
    }
    v11 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v11 >= v30)
      goto LABEL_39;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v10 = i + 1;
    if (!v12)
    {
      v10 = i + 2;
      if (i + 2 >= v30)
        goto LABEL_39;
      v12 = *(_QWORD *)(v31 + 8 * v10);
      if (!v12)
      {
        v10 = i + 3;
        if (i + 3 >= v30)
          goto LABEL_39;
        v12 = *(_QWORD *)(v31 + 8 * v10);
        if (!v12)
          break;
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v10 << 6);
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_39;
LABEL_24:
    v14 = v2;
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v3 + 40));
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v33, v17, v16);
    v18 = Hasher._finalize()();
    v19 = v3;
    v20 = -1 << *(_BYTE *)(v3 + 32);
    v21 = v18 & ~v20;
    if (((*(_QWORD *)(v32 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_38;
    v22 = *(_QWORD *)(v19 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v17 && v24 == v16;
    if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v17, v16, 0) & 1) == 0)
    {
      v26 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v32 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v17 && v28 == v16;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v17, v16, 0) & 1) != 0)
          goto LABEL_6;
      }
LABEL_38:
      swift_bridgeObjectRelease();
      v2 = v14;
LABEL_39:
      sub_1000C6560(v2);
      return;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    v2 = v14;
    v3 = v19;
  }
  v13 = i + 4;
  if (i + 4 >= v30)
    goto LABEL_39;
  v12 = *(_QWORD *)(v31 + 8 * v13);
  if (v12)
  {
    v10 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v30)
      goto LABEL_39;
    v12 = *(_QWORD *)(v31 + 8 * v10);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

void sub_10040DEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  id v40;
  char v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD v49[5];

  v2 = a2;
  v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.count.getter(v5);
    v7 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_6:
      if (a1 < 0)
        v8 = a1;
      else
        v8 = a1 & 0xFFFFFFFFFFFFFF8;
      if (__CocoaSet.count.getter(v8) < v6)
        return;
      goto LABEL_13;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 16) < v6)
    return;
LABEL_13:
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_10001A630(&qword_100844630);
    v12 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
    Set.Iterator.init(_cocoa:)(v49, v10, v11, v12);
    v2 = v49[0];
    v44 = v49[1];
    v13 = v49[2];
    v14 = v49[3];
    v15 = v49[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(v2 + 32);
    v44 = v2 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v2);
    v14 = 0;
  }
  v19 = sub_10001A630(&qword_100844630);
  v20 = v19;
  v43 = (unint64_t)(v13 + 64) >> 6;
  if (a1 < 0)
    v21 = a1;
  else
    v21 = a1 & 0xFFFFFFFFFFFFFF8;
  v46 = a1 + 56;
  v42 = v21;
  while (1)
  {
    while (1)
    {
      v23 = v15;
      v24 = v14;
      if ((v2 & 0x8000000000000000) == 0)
        break;
      v26 = __CocoaSet.Iterator.next()(v19);
      if (!v26)
        goto LABEL_58;
      v47 = v26;
      swift_dynamicCast(&v48, &v47, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
      v27 = v48;
      v45 = v23;
      if (v7)
        goto LABEL_26;
LABEL_48:
      v32 = v2;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_55;
      v33 = v7;
      v34 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a1 + 40));
      v35 = -1 << *(_BYTE *)(a1 + 32);
      v36 = v34 & ~v35;
      if (((*(_QWORD *)(v46 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        goto LABEL_55;
      v37 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v36);
      v38 = static NSObject.== infix(_:_:)(v37);

      if ((v38 & 1) == 0)
      {
        v39 = ~v35;
        while (1)
        {
          v36 = (v36 + 1) & v39;
          if (((*(_QWORD *)(v46 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
            break;
          v40 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v36);
          v41 = static NSObject.== infix(_:_:)(v40);

          if ((v41 & 1) != 0)
            goto LABEL_54;
        }
LABEL_55:

        v2 = v32;
LABEL_56:
        sub_1000C6560(v2);
        return;
      }
LABEL_54:

      v2 = v32;
      v7 = v33;
      v21 = v42;
      v15 = v45;
    }
    if (v15)
    {
      v45 = (v15 - 1) & v15;
      v25 = __clz(__rbit64(v15)) | (v14 << 6);
      goto LABEL_47;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      return;
    }
    if (v28 >= v43)
      goto LABEL_58;
    v29 = *(_QWORD *)(v44 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v24 + 2;
      if (v24 + 2 >= v43)
        goto LABEL_58;
      v29 = *(_QWORD *)(v44 + 8 * v14);
      if (!v29)
      {
        v14 = v24 + 3;
        if (v24 + 3 >= v43)
          goto LABEL_58;
        v29 = *(_QWORD *)(v44 + 8 * v14);
        if (!v29)
        {
          v14 = v24 + 4;
          if (v24 + 4 >= v43)
            goto LABEL_58;
          v29 = *(_QWORD *)(v44 + 8 * v14);
          if (!v29)
            break;
        }
      }
    }
LABEL_46:
    v45 = (v29 - 1) & v29;
    v25 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_47:
    v27 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v25);
    v48 = v27;
    v31 = v27;
    if (!v7)
      goto LABEL_48;
LABEL_26:
    v22 = __CocoaSet.contains(_:)(v27, v21);

    v15 = v45;
    if ((v22 & 1) == 0)
      goto LABEL_56;
  }
  v30 = v24 + 5;
  while (v43 != v30)
  {
    v29 = *(_QWORD *)(v44 + 8 * v30++);
    if (v29)
    {
      v14 = v30 - 1;
      goto LABEL_46;
    }
  }
LABEL_58:
  v48 = 0;
  sub_1000C6560(v2);
}

uint64_t sub_10040E2FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = sub_100190D8C();
  if (!v9)
    goto LABEL_24;
  v11 = v8;
  v12 = v9;
  v13 = v10;
  v14 = (_QWORD *)*a5;
  v16 = sub_10001A6DC(v8, v9);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      v23 = (_QWORD *)*a5;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D5F88();
      v23 = (_QWORD *)*a5;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v23[(v16 >> 6) + 8] |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v11;
    v24[1] = v12;
    *(_QWORD *)(v23[7] + 8 * v16) = v13;
    v25 = v23[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v23[2] = v27;
LABEL_13:
    v28 = sub_100190D8C();
    if (v29)
    {
      v31 = v28;
      v32 = v29;
      v33 = v30;
      do
      {
        v36 = (_QWORD *)*a5;
        v38 = sub_10001A6DC(v31, v32);
        v39 = v36[2];
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          goto LABEL_25;
        v42 = v37;
        if (v36[3] < v41)
        {
          sub_1002CC238(v41, 1);
          v43 = sub_10001A6DC(v31, v32);
          if ((v42 & 1) != (v44 & 1))
            goto LABEL_27;
          v38 = v43;
        }
        v45 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)(v45[7] + 8 * v38) = v33;
        }
        else
        {
          v45[(v38 >> 6) + 8] |= 1 << v38;
          v46 = (uint64_t *)(v45[6] + 16 * v38);
          *v46 = v31;
          v46[1] = v32;
          *(_QWORD *)(v45[7] + 8 * v38) = v33;
          v47 = v45[2];
          v26 = __OFADD__(v47, 1);
          v48 = v47 + 1;
          if (v26)
            goto LABEL_26;
          v45[2] = v48;
        }
        v31 = sub_100190D8C();
        v32 = v34;
        v33 = v35;
      }
      while (v34);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002CC238(v19, a4 & 1);
  v21 = sub_10001A6DC(v11, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    v23 = (_QWORD *)*a5;
    if ((v20 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23[7] + 8 * v16) = v13;
    goto LABEL_13;
  }
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10040E5C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = sub_100190F0C();
  if (!v9)
    goto LABEL_24;
  v11 = v8;
  v12 = v9;
  v13 = v10;
  v14 = (_QWORD *)*a5;
  v16 = sub_10001A6DC(v8, v9);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      v23 = (_QWORD *)*a5;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D70F4();
      v23 = (_QWORD *)*a5;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v23[(v16 >> 6) + 8] |= 1 << v16;
    v25 = (uint64_t *)(v23[6] + 16 * v16);
    *v25 = v11;
    v25[1] = v12;
    *(_QWORD *)(v23[7] + 8 * v16) = v13;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v23[2] = v28;
LABEL_13:
    v29 = sub_100190F0C();
    if (v30)
    {
      v32 = v29;
      v33 = v30;
      v34 = v31;
      do
      {
        v38 = (_QWORD *)*a5;
        v40 = sub_10001A6DC(v32, v33);
        v41 = v38[2];
        v42 = (v39 & 1) == 0;
        v43 = v41 + v42;
        if (__OFADD__(v41, v42))
          goto LABEL_25;
        v44 = v39;
        if (v38[3] < v43)
        {
          sub_1002CEEA4(v43, 1);
          v45 = sub_10001A6DC(v32, v33);
          if ((v44 & 1) != (v46 & 1))
            goto LABEL_27;
          v40 = v45;
        }
        v47 = (_QWORD *)*a5;
        if ((v44 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v35 = v47[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 8 * v40) = v34;
        }
        else
        {
          v47[(v40 >> 6) + 8] |= 1 << v40;
          v48 = (uint64_t *)(v47[6] + 16 * v40);
          *v48 = v32;
          v48[1] = v33;
          *(_QWORD *)(v47[7] + 8 * v40) = v34;
          v49 = v47[2];
          v27 = __OFADD__(v49, 1);
          v50 = v49 + 1;
          if (v27)
            goto LABEL_26;
          v47[2] = v50;
        }
        v32 = sub_100190F0C();
        v33 = v36;
        v34 = v37;
      }
      while (v36);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002CEEA4(v19, a4 & 1);
  v21 = sub_10001A6DC(v11, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    v23 = (_QWORD *)*a5;
    if ((v20 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v24 = v23[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v24 + 8 * v16) = v13;
    goto LABEL_13;
  }
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10040E8AC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_10040EA08((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release(v2);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_10040EA08((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_10040EA08(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::Bool v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v10)
      goto LABEL_24;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v5;
    if (!v17)
    {
      v5 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_24;
      v17 = *(_QWORD *)(v6 + 8 * v5);
      if (!v17)
      {
        v5 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_24;
        v17 = *(_QWORD *)(v6 + 8 * v5);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12 + 8);
    swift_bridgeObjectRetain(v13);
    v14._countAndFlagsBits = 0x7C6C61636F6CLL;
    v14._object = (void *)0xE600000000000000;
    v15 = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease(v13);
    if (v15)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_1002185C8(a1, a2, v4, a3);
        return;
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v10)
    goto LABEL_24;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v5 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v5 >= v10)
      goto LABEL_24;
    v17 = *(_QWORD *)(v6 + 8 * v5);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10040EBCC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10040EBE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10040EC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v55;
  int64_t v56;
  uint64_t v58;
  _QWORD v59[9];

  v55 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v56 = (unint64_t)(v6 + 63) >> 6;
  v58 = a3 + 56;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  while (1)
  {
    while (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v9 << 6);
      if (*(_QWORD *)(a3 + 16))
        goto LABEL_26;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v15 >= v56)
      goto LABEL_56;
    v16 = *(_QWORD *)(v55 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v56)
        goto LABEL_56;
      v16 = *(_QWORD *)(v55 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v56)
          goto LABEL_56;
        v16 = *(_QWORD *)(v55 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v56)
            goto LABEL_56;
          v16 = *(_QWORD *)(v55 + 8 * v9);
          if (!v16)
          {
            v17 = v15 + 4;
            if (v17 >= v56)
            {
LABEL_56:
              swift_release(a2);
              return a1;
            }
            v16 = *(_QWORD *)(v55 + 8 * v17);
            v9 = v17;
            if (!v16)
              break;
          }
        }
      }
    }
LABEL_25:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v9 << 6);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_26:
      v18 = a4;
      v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v14);
      v21 = *v19;
      v20 = v19[1];
      Hasher.init(_seed:)(v59, *(_QWORD *)(a3 + 40));
      swift_bridgeObjectRetain(v20);
      String.hash(into:)(v59, v21, v20);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(a3 + 32);
      v24 = v22 & ~v23;
      if (((*(_QWORD *)(v58 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        goto LABEL_7;
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v24);
      v27 = v26[1];
      v28 = *v26 == v21 && v27 == v20;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, v21, v20, 0) & 1) == 0)
      {
        v42 = ~v23;
        do
        {
          v24 = (v24 + 1) & v42;
          if (((*(_QWORD *)(v58 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            goto LABEL_7;
          v43 = (_QWORD *)(v25 + 16 * v24);
          v44 = v43[1];
          v45 = *v43 == v21 && v44 == v20;
        }
        while (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, v21, v20, 0) & 1) == 0);
      }
      a4 = v18;
      v29 = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRetain(v20);
      if (v29 && (v30 = sub_10001A6DC(v21, v20), (v31 & 1) != 0))
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v30);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
        v59[0] = a1;
        v34 = sub_10001A6DC(v21, v20);
        v36 = *(_QWORD *)(a1 + 16);
        v37 = (v35 & 1) == 0;
        v38 = __OFADD__(v36, v37);
        v39 = v36 + v37;
        if (v38)
          goto LABEL_59;
        v40 = v35;
        if (*(_QWORD *)(a1 + 24) >= v39)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v52 = v34;
            sub_1002D5F88();
            v34 = v52;
          }
        }
        else
        {
          sub_1002CC238(v39, isUniquelyReferenced_nonNull_native);
          v34 = sub_10001A6DC(v21, v20);
          if ((v40 & 1) != (v41 & 1))
            goto LABEL_61;
        }
        v48 = (_QWORD *)v59[0];
        a1 = v59[0];
        if ((v40 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(v59[0] + 56) + 8 * v34) = v32;
        }
        else
        {
          *(_QWORD *)(v59[0] + 8 * (v34 >> 6) + 64) |= 1 << v34;
          v49 = (uint64_t *)(v48[6] + 16 * v34);
          *v49 = v21;
          v49[1] = v20;
          *(_QWORD *)(v48[7] + 8 * v34) = v32;
          v50 = v48[2];
          v38 = __OFADD__(v50, 1);
          v51 = v50 + 1;
          if (v38)
            goto LABEL_60;
          v48[2] = v51;
          swift_bridgeObjectRetain(v20);
        }
LABEL_55:
        swift_bridgeObjectRelease_n(v20, 2);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain(a1);
        v10 = sub_10001A6DC(v21, v20);
        v12 = v11;
        swift_bridgeObjectRelease();
        if ((v12 & 1) != 0)
        {
          v46 = a1;
          v47 = swift_isUniquelyReferenced_nonNull_native(a1);
          v59[0] = a1;
          if ((v47 & 1) == 0)
          {
            sub_1002D5F88();
            v46 = v59[0];
          }
          swift_bridgeObjectRelease();
          a1 = v46;
          sub_1002899C4(v10, v46);
          goto LABEL_55;
        }
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        a4 = v18;
      }
    }
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v56)
      goto LABEL_56;
    v16 = *(_QWORD *)(v55 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_25;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10040F088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  v5 = 0;
  v6 = a1 + 40;
  v7 = -(uint64_t)v3;
  v8 = _swiftEmptyArrayStorage;
  v23 = a1 + 40;
  do
  {
    v25 = v8;
    if (v5 <= v3)
      v9 = v3;
    else
      v9 = v5;
    v10 = -(uint64_t)v9;
    for (i = (uint64_t *)(v6 + 16 * v5++); ; i += 2)
    {
      if (v10 + v5 == 1)
      {
        __break(1u);
        return;
      }
      if (*(_QWORD *)(a2 + 16))
        break;
LABEL_8:
      ++v5;
      if (v7 + v5 == 1)
        return;
    }
    v13 = *(i - 1);
    v12 = *i;
    swift_bridgeObjectRetain(*i);
    v14 = sub_10001A6DC(v13, v12);
    if ((v15 & 1) == 0
      || (v16 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v14),
          v18 = *v16,
          v17 = v16[1],
          swift_bridgeObjectRetain(v17),
          v19 = sub_1001B2278(v18, v17, a3),
          swift_bridgeObjectRelease(),
          (v19 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v8 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
    {
      sub_1001C1B0C(0, v25[2] + 1, 1);
      v8 = v25;
    }
    v21 = v8[2];
    v20 = v8[3];
    if (v21 >= v20 >> 1)
    {
      sub_1001C1B0C(v20 > 1, v21 + 1, 1);
      v8 = v25;
    }
    v8[2] = v21 + 1;
    v22 = &v8[2 * v21];
    v22[4] = v13;
    v22[5] = v12;
    v3 = v24;
    v6 = v23;
  }
  while (v7 + v5);
}

void sub_10040F228(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  double v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;

  v6 = 0;
  v7 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v30 = _swiftEmptyArrayStorage;
  while (1)
  {
    while (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      if (*(_QWORD *)(a2 + 16))
        goto LABEL_25;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v14 >= v11)
      goto LABEL_39;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_39;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_39;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_39;
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
            break;
        }
      }
    }
LABEL_24:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    if (*(_QWORD *)(a2 + 16))
    {
LABEL_25:
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      swift_bridgeObjectRetain_n(v18, 2);
      v20 = sub_10001A6DC(v19, v18);
      if ((v21 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v22 = *(double *)(*(_QWORD *)(a2 + 56) + 8 * v20);
      swift_bridgeObjectRelease();
      if (qword_1008375C8 != -1)
        swift_once(&qword_1008375C8, sub_10048FC04);
      v23 = v19 == qword_100871F60 && v18 == *(_QWORD *)algn_100871F68;
      if (v23
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, qword_100871F60, *(_QWORD *)algn_100871F68, 0) & 1) != 0
        || v22 >= a3)
      {
        v24 = v30;
        v32 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        {
          sub_1001C1B0C(0, v30[2] + 1, 1);
          v24 = v30;
        }
        v26 = v24[2];
        v25 = v24[3];
        v27 = v26 + 1;
        if (v26 >= v25 >> 1)
        {
          v31 = v26 + 1;
          v29 = v24[2];
          sub_1001C1B0C(v25 > 1, v26 + 1, 1);
          v27 = v31;
          v26 = v29;
          v24 = v32;
        }
        v24[2] = v27;
        v30 = v24;
        v28 = &v24[2 * v26];
        v28[4] = v19;
        v28[5] = v18;
      }
      else
      {
LABEL_5:
        swift_bridgeObjectRelease();
      }
    }
  }
  v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_39:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_39;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_24;
  }
LABEL_41:
  __break(1u);
}

void sub_10040F4D4(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char *v19;
  void *v20;
  Swift::String v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;

  v4 = v2;
  v34 = a2;
  v31 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v5).n128_u64[0];
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v4 + 16);
  v11 = objc_msgSend(v10, "uuid", v7);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = sub_100331724(v13, v15);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v16;
    v18 = v31;
    v19 = v34;
    swift_bridgeObjectRelease();
    if (v17)
    {
      sub_10040B878(v18, v19, v17);

    }
    else
    {
      v20 = (void *)objc_opt_self(REMError);
      v32 = 0;
      v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(97);
      v21._object = (void *)0x80000001007033D0;
      v21._countAndFlagsBits = 0xD00000000000005FLL;
      String.append(_:)(v21);
      v22 = v10;
      v23 = objc_msgSend(v22, "description");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);

      swift_bridgeObjectRelease();
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, "internalErrorWithDebugDescription:", v28, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v29);
    }
  }
}

uint64_t sub_10040F6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

double sub_10040F6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  return result;
}

uint64_t sub_10040F6F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = sub_10040F734(*a1, a1[1], *(_QWORD *)(*(_QWORD *)(v2 + 16) + 24), *(_QWORD *)(*(_QWORD *)(v2 + 24) + 24));
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_10040F734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  double v10;
  unint64_t v11;
  char v12;

  v5 = a1;
  if (*(_QWORD *)(a3 + 16))
  {
    v8 = sub_10001A6DC(a1, a2);
    if ((v9 & 1) != 0)
    {
      if (!*(_QWORD *)(a4 + 16))
        return 0;
      v10 = *(double *)(*(_QWORD *)(a3 + 56) + 8 * v8);
      v11 = sub_10001A6DC(v5, a2);
      if ((v12 & 1) == 0 || v10 >= *(double *)(*(_QWORD *)(a4 + 56) + 8 * v11))
        return 0;
    }
  }
  swift_bridgeObjectRetain(a2);
  return v5;
}

uint64_t storeEnumTagSinglePayload for REMManualOrderingCDIngestor.RelationshipKey(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10040F824 + 4 * byte_1006BB100[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10040F844 + 4 * byte_1006BB105[v4]))();
}

_BYTE *sub_10040F824(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10040F844(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10040F84C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10040F854(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10040F85C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10040F864(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for REMManualOrderingCDIngestor.RelationshipKey()
{
  return &type metadata for REMManualOrderingCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMManualOrderingCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10040F8CC + 4 * byte_1006BB10F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10040F900 + 4 * byte_1006BB10A[v4]))();
}

uint64_t sub_10040F900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10040F908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10040F910);
  return result;
}

uint64_t sub_10040F91C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10040F924);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10040F928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10040F930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMManualOrderingCDIngestor.ValueKey()
{
  return &type metadata for REMManualOrderingCDIngestor.ValueKey;
}

uint64_t sub_10040F94C()
{
  return sub_1000A5F84(&qword_1008496A8, &qword_1008496B0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10040F97C()
{
  unint64_t result;

  result = qword_1008496B8;
  if (!qword_1008496B8)
  {
    result = swift_getWitnessTable(&unk_1006BB248, &type metadata for REMManualOrderingCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_1008496B8);
  }
  return result;
}

uint64_t sub_10040F9C0()
{
  return sub_1000A5F84(&qword_1008496C0, &qword_1008496C8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10040F9F0()
{
  unint64_t result;

  result = qword_1008496D0;
  if (!qword_1008496D0)
  {
    result = swift_getWitnessTable(&unk_1006BB320, &type metadata for REMManualOrderingCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_1008496D0);
  }
  return result;
}

uint64_t sub_10040FA34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10040FA74 + 4 * byte_1006BB350[a1]))(0x6854664F73796164, 0xEE0068746E6F4D65);
}

uint64_t sub_10040FA9C()
{
  return 0x4965746144646E65;
}

unint64_t sub_10040FAC0()
{
  return 0xD000000000000011;
}

uint64_t sub_10040FADC()
{
  return 0x636E657571657266;
}

uint64_t sub_10040FAF8()
{
  return 0x6C61767265746E69;
}

uint64_t sub_10040FB10()
{
  return 0x664F7368746E6F6DLL;
}

uint64_t sub_10040FB34()
{
  return 0x7469736F50746573;
}

uint64_t sub_10040FB54()
{
  return 0x54664F736B656577;
}

uint64_t sub_10040FB78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23[8];
  _BYTE v24[8];
  _BYTE v25[8];
  _BYTE v26[8];
  _BYTE v27[8];
  _BYTE v28[8];
  _BYTE v29[8];

  v3 = v1;
  v5 = sub_10001A630(&qword_100849740);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_100411DEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedRecurrenceRule.CodingKeys, &type metadata for RDSavedRecurrenceRule.CodingKeys, v11, v9, v10);
  sub_1000A5CA8(v3, (uint64_t)v29, &qword_100849748);
  sub_1000A5CA8((uint64_t)v29, (uint64_t)v23, &qword_100849748);
  HIBYTE(v22) = 0;
  v12 = sub_10001A630(&qword_10084EF00);
  v13 = sub_100411E74(&qword_100849750, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v12, v13);
  if (!v2)
  {
    sub_1000A5CA8(v3 + 8, (uint64_t)v28, &qword_100849758);
    sub_1000A5CA8((uint64_t)v28, (uint64_t)v23, &qword_100849758);
    HIBYTE(v22) = 1;
    v14 = sub_10001A630(&qword_100849728);
    v15 = sub_100411ED4(&qword_100849760, (void (*)(void))sub_100411F3C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v14, v15);
    sub_1000A5CA8(v3 + 16, (uint64_t)v27, &qword_100849748);
    sub_1000A5CA8((uint64_t)v27, (uint64_t)v23, &qword_100849748);
    HIBYTE(v22) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v12, v13);
    v16 = *(_QWORD *)(v3 + 24);
    v17 = *(unsigned __int8 *)(v3 + 32);
    v23[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v23, v5);
    v18 = *(_QWORD *)(v3 + 40);
    v23[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v23, v5);
    v19 = *(_QWORD *)(v3 + 48);
    v23[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v23, v5);
    v20 = *(_QWORD *)(v3 + 56);
    v23[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v23, v5);
    sub_1000A5CA8(v3 + 64, (uint64_t)v26, &qword_100849748);
    sub_1000A5CA8((uint64_t)v26, (uint64_t)v23, &qword_100849748);
    HIBYTE(v22) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v12, v13);
    sub_1000A5CA8(v3 + 72, (uint64_t)v25, &qword_100849748);
    sub_1000A5CA8((uint64_t)v25, (uint64_t)v23, &qword_100849748);
    HIBYTE(v22) = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v12, v13);
    sub_1000A5CA8(v3 + 80, (uint64_t)v24, &qword_100849748);
    sub_1000A5CA8((uint64_t)v24, (uint64_t)v23, &qword_100849748);
    HIBYTE(v22) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10040FF4C()
{
  unsigned __int8 *v0;

  return sub_10040FA34(*v0);
}

uint64_t sub_10040FF54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004112F4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10040FF78(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10040FF84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100411DEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10040FFAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100411DEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10040FFD4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_1004117E0(a1, v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10041002C(_QWORD *a1)
{
  return sub_10040FB78(a1);
}

BOOL sub_100410074(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1004102A0((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_1004100DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_10001A630(&qword_100849780);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000A388(a1, v11);
  v13 = sub_1004120D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedDayOfWeek.CodingKeys, &type metadata for RDSavedDayOfWeek.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004101F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004120D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100410220(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004120D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100410248@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100411F80(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100410270(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004100DC(a1, *v1, v1[1]);
}

BOOL sub_100410288(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_1004102A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int64x2_t *v6;
  int64x2_t *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)a2;
  if (v4)
  {
    if (!v5 || !sub_100306730(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(int64x2_t **)(a1 + 8);
  v7 = *(int64x2_t **)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    sub_10030679C(v6, v7);
    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v9 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD **)(a2 + 16);
  if (v9)
  {
    if (!v10 || !sub_100306730(v9, v10))
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v11 = *(_BYTE *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      v11 = 1;
    if ((v11 & 1) != 0)
      return 0;
  }
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40)
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48)
    || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
  {
    return 0;
  }
  v12 = *(_QWORD **)(a1 + 64);
  v13 = *(_QWORD **)(a2 + 64);
  if (v12)
  {
    if (!v13 || !sub_100306730(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD **)(a1 + 72);
  v15 = *(_QWORD **)(a2 + 72);
  if (v14)
  {
    if (!v15 || !sub_100306730(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD **)(a1 + 80);
  v17 = *(_QWORD **)(a2 + 80);
  if (v16)
    return v17 && sub_100306730(v16, v17);
  return !v17;
}

void sub_1004103E0(id a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  id v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  double v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  id v53;
  void *v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  double v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  id v78;
  void *v79;
  id v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  double v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  void *v93;
  id v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  id v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  double *v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  id v118;
  char *v119;
  _QWORD *v120;
  _QWORD *v121;
  double *v122;
  char *v123;
  char *v124;
  id v125;
  unint64_t v126;
  _QWORD *v127;

  v122 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v123 = (char *)&v116 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v119 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "daysOfTheMonth", v10);
  v125 = a1;
  v126 = v9;
  v124 = v5;
  if (!v12)
  {
    v121 = 0;
    goto LABEL_19;
  }
  v14 = v12;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v26 = v16;
    else
      v26 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_4;
LABEL_18:
    *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
    v121 = _swiftEmptyArrayStorage;
    a1 = v125;
    goto LABEL_19;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_18;
LABEL_4:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2038(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0)
  {
    __break(1u);
    goto LABEL_119;
  }
  v18 = 0;
  v19 = v127;
  do
  {
    v20 = v19;
    if ((v16 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
    else
      v21 = *(id *)(v16 + 8 * v18 + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "integerValue");

    v19 = v20;
    v127 = v20;
    v24 = v20[2];
    v25 = v19[3];
    if (v24 >= v25 >> 1)
    {
      sub_1001C2038(v25 > 1, v24 + 1, 1);
      v19 = v127;
    }
    ++v18;
    v19[2] = v24 + 1;
    v19[v24 + 4] = v23;
  }
  while (v17 != v18);
  v121 = v19;
  *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
  a1 = v125;
  v9 = v126;
  v5 = v124;
LABEL_19:
  v27 = objc_msgSend(a1, "daysOfTheWeek", v13);
  if (!v27)
  {
    v120 = 0;
    goto LABEL_37;
  }
  v29 = v27;
  v30 = sub_1000151B0(0, &qword_100842588, REMRecurrenceDayOfWeek_ptr);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if (!((unint64_t)v31 >> 62))
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_22;
LABEL_36:
    *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
    v120 = _swiftEmptyArrayStorage;
    a1 = v125;
    goto LABEL_37;
  }
  if (v31 < 0)
    v43 = v31;
  else
    v43 = v31 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v31);
  v32 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_36;
LABEL_22:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2014(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v118 = (id)v8;
  v33 = 0;
  v34 = v127;
  do
  {
    v35 = v34;
    if ((v31 & 0xC000000000000001) != 0)
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
    else
      v36 = *(id *)(v31 + 8 * v33 + 32);
    v37 = v36;
    v38 = objc_msgSend(v36, "dayOfTheWeek");
    v39 = objc_msgSend(v37, "weekNumber");

    v34 = v35;
    v127 = v35;
    v40 = v35[2];
    v41 = v34[3];
    if (v40 >= v41 >> 1)
    {
      sub_1001C2014(v41 > 1, v40 + 1, 1);
      v34 = v127;
    }
    ++v33;
    v34[2] = v40 + 1;
    v42 = &v34[2 * v40];
    v42[4] = v38;
    v42[5] = v39;
  }
  while (v32 != v33);
  v120 = v34;
  *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
  a1 = v125;
  v9 = v126;
  v8 = (uint64_t)v118;
  v5 = v124;
LABEL_37:
  v44 = objc_msgSend(a1, "daysOfTheYear", v28);
  if (!v44)
  {
    v117 = 0;
    goto LABEL_55;
  }
  v46 = v44;
  v47 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

  if (!((unint64_t)v48 >> 62))
  {
    v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v49)
      goto LABEL_40;
LABEL_54:
    *(_QWORD *)&v45 = swift_bridgeObjectRelease().n128_u64[0];
    v117 = _swiftEmptyArrayStorage;
    a1 = v125;
    goto LABEL_55;
  }
  if (v48 < 0)
    v58 = v48;
  else
    v58 = v48 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v48);
  v49 = _CocoaArrayWrapper.endIndex.getter(v58);
  swift_bridgeObjectRelease();
  if (!v49)
    goto LABEL_54;
LABEL_40:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2038(0, v49 & ~(v49 >> 63), 0);
  if (v49 < 0)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v50 = 0;
  v51 = v127;
  do
  {
    v52 = v51;
    if ((v48 & 0xC000000000000001) != 0)
      v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v48);
    else
      v53 = *(id *)(v48 + 8 * v50 + 32);
    v54 = v53;
    v55 = objc_msgSend(v53, "integerValue");

    v51 = v52;
    v127 = v52;
    v56 = v52[2];
    v57 = v51[3];
    if (v56 >= v57 >> 1)
    {
      sub_1001C2038(v57 > 1, v56 + 1, 1);
      v51 = v127;
    }
    ++v50;
    v51[2] = v56 + 1;
    v51[v56 + 4] = v55;
  }
  while (v49 != v50);
  v117 = v51;
  *(_QWORD *)&v45 = swift_bridgeObjectRelease().n128_u64[0];
  a1 = v125;
  v9 = v126;
  v5 = v124;
LABEL_55:
  v59 = objc_msgSend(a1, "recurrenceEnd", v45);
  if (!v59)
  {
    v63 = (uint64_t)v123;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v123, 1, 1, v8);
LABEL_61:
    sub_1000EA320(v63);
    v64 = 1;
    v65 = 0.0;
    goto LABEL_63;
  }
  v60 = v59;
  v61 = objc_msgSend(v59, "endDate");

  if (v61)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

    v62 = 0;
  }
  else
  {
    v62 = 1;
  }
  v63 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v62, 1, v8);
  sub_1000A5CA8((uint64_t)v5, v63, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v63, 1, v8) == 1)
    goto LABEL_61;
  v66 = v119;
  v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 32))(v119, v63, v8);
  v65 = Date.timeIntervalSinceReferenceDate.getter(v67);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v66, v8);
  v64 = 0;
LABEL_63:
  v68 = (char *)objc_msgSend(a1, "firstDayOfTheWeek");
  v69 = (char *)objc_msgSend(a1, "frequency");
  v118 = objc_msgSend(a1, "interval");
  v70 = objc_msgSend(a1, "monthsOfTheYear");
  LODWORD(v124) = v64;
  v123 = v68;
  v119 = v69;
  if (!v70)
  {
    v77 = 0;
    goto LABEL_81;
  }
  v72 = v70;
  v73 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, v73);

  if (!((unint64_t)v74 >> 62))
  {
    v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v75)
      goto LABEL_66;
LABEL_80:
    *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
    v77 = _swiftEmptyArrayStorage;
    goto LABEL_81;
  }
  if (v74 < 0)
    v83 = v74;
  else
    v83 = v74 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v74);
  v75 = _CocoaArrayWrapper.endIndex.getter(v83);
  swift_bridgeObjectRelease();
  if (!v75)
    goto LABEL_80;
LABEL_66:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2038(0, v75 & ~(v75 >> 63), 0);
  if (v75 < 0)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  v76 = 0;
  v77 = v127;
  do
  {
    if ((v74 & 0xC000000000000001) != 0)
      v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v74);
    else
      v78 = *(id *)(v74 + 8 * v76 + 32);
    v79 = v78;
    v80 = objc_msgSend(v78, "integerValue");

    v127 = v77;
    v82 = v77[2];
    v81 = v77[3];
    if (v82 >= v81 >> 1)
    {
      sub_1001C2038(v81 > 1, v82 + 1, 1);
      v77 = v127;
    }
    ++v76;
    v77[2] = v82 + 1;
    v77[v82 + 4] = v80;
  }
  while (v75 != v76);
  *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
  a1 = v125;
LABEL_81:
  v84 = objc_msgSend(a1, "setPositions", v71);
  if (!v84)
  {
    v91 = 0;
    goto LABEL_99;
  }
  v86 = v84;
  v87 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v88 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v86, v87);

  if (!((unint64_t)v88 >> 62))
  {
    v89 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v89)
      goto LABEL_84;
LABEL_98:
    *(_QWORD *)&v85 = swift_bridgeObjectRelease().n128_u64[0];
    v91 = _swiftEmptyArrayStorage;
    goto LABEL_99;
  }
  if (v88 < 0)
    v97 = v88;
  else
    v97 = v88 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v88);
  v89 = _CocoaArrayWrapper.endIndex.getter(v97);
  swift_bridgeObjectRelease();
  if (!v89)
    goto LABEL_98;
LABEL_84:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2038(0, v89 & ~(v89 >> 63), 0);
  if (v89 < 0)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  v90 = 0;
  v91 = v127;
  do
  {
    if ((v88 & 0xC000000000000001) != 0)
      v92 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v88);
    else
      v92 = *(id *)(v88 + 8 * v90 + 32);
    v93 = v92;
    v94 = objc_msgSend(v92, "integerValue");

    v127 = v91;
    v96 = v91[2];
    v95 = v91[3];
    if (v96 >= v95 >> 1)
    {
      sub_1001C2038(v95 > 1, v96 + 1, 1);
      v91 = v127;
    }
    ++v90;
    v91[2] = v96 + 1;
    v91[v96 + 4] = v94;
  }
  while (v89 != v90);
  *(_QWORD *)&v85 = swift_bridgeObjectRelease().n128_u64[0];
  a1 = v125;
LABEL_99:
  v98 = objc_msgSend(a1, "weeksOfTheYear", v85);
  if (!v98)
  {

    v104 = 0;
LABEL_117:
    v113 = v122;
    v114 = v120;
    *(_QWORD *)v122 = v121;
    *((_QWORD *)v113 + 1) = v114;
    *((_QWORD *)v113 + 2) = v117;
    v113[3] = v65;
    *((_BYTE *)v113 + 32) = (_BYTE)v124;
    v115 = v119;
    *((_QWORD *)v113 + 5) = v123;
    *((_QWORD *)v113 + 6) = v115;
    *((_QWORD *)v113 + 7) = v118;
    *((_QWORD *)v113 + 8) = v77;
    *((_QWORD *)v113 + 9) = v91;
    *((_QWORD *)v113 + 10) = v104;
    return;
  }
  v99 = v98;
  v100 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v99, v100);

  if (!((unint64_t)v101 >> 62))
  {
    v102 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v102)
      goto LABEL_102;
    goto LABEL_116;
  }
  if (v101 < 0)
    v112 = v101;
  else
    v112 = v101 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v101);
  v102 = _CocoaArrayWrapper.endIndex.getter(v112);
  swift_bridgeObjectRelease();
  if (!v102)
  {
LABEL_116:
    swift_bridgeObjectRelease();

    v104 = _swiftEmptyArrayStorage;
    goto LABEL_117;
  }
LABEL_102:
  v127 = _swiftEmptyArrayStorage;
  sub_1001C2038(0, v102 & ~(v102 >> 63), 0);
  if ((v102 & 0x8000000000000000) == 0)
  {
    v103 = 0;
    v104 = v127;
    v126 = v101 & 0xC000000000000001;
    v105 = v101;
    v106 = v102;
    do
    {
      if (v126)
        v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v103, v101);
      else
        v107 = *(id *)(v101 + 8 * v103 + 32);
      v108 = v107;
      v109 = objc_msgSend(v107, "integerValue");

      v127 = v104;
      v111 = v104[2];
      v110 = v104[3];
      if (v111 >= v110 >> 1)
      {
        sub_1001C2038(v110 > 1, v111 + 1, 1);
        v104 = v127;
      }
      ++v103;
      v104[2] = v111 + 1;
      v104[v111 + 4] = v109;
      v101 = v105;
    }
    while (v106 != v103);
    swift_bridgeObjectRelease();

    goto LABEL_117;
  }
LABEL_123:
  __break(1u);
}

double destroy for RDSavedRecurrenceRule(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[10]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for RDSavedRecurrenceRule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v7 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v7;
  v8 = a2[9];
  v9 = a2[10];
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for RDSavedRecurrenceRule(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[3];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  a1[3] = v10;
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v11 = a1[8];
  v12 = a2[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  v13 = a1[9];
  v14 = a2[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = a1[10];
  v16 = a2[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v6 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedRecurrenceRule(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedRecurrenceRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedRecurrenceRule()
{
  return &type metadata for RDSavedRecurrenceRule;
}

ValueMetadata *type metadata accessor for RDSavedDayOfWeek()
{
  return &type metadata for RDSavedDayOfWeek;
}

uint64_t sub_1004112F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x6854664F73796164 && a2 == 0xEE0068746E6F4D65)
  {
    v5 = 0xEE0068746E6F4D65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6854664F73796164, 0xEE0068746E6F4D65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6854664F73796164 && a2 == 0xED00006B65655765)
  {
    v7 = 0xED00006B65655765;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6854664F73796164, 0xED00006B65655765, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6854664F73796164 && a2 == 0xED00007261655965)
  {
    v8 = 0xED00007261655965;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6854664F73796164, 0xED00007261655965, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4965746144646E65 && a2 == 0xEF6C61767265746ELL)
  {
    v9 = 0xEF6C61767265746ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4965746144646E65, 0xEF6C61767265746ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x80000001006F4CB0;
    if (a2 == 0x80000001006F4CB0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F4CB0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079)
  {
    v11 = 0xE900000000000079;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E657571657266, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x664F7368746E6F6DLL && a2 == 0xEF72616559656854)
  {
    v13 = 0xEF72616559656854;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x664F7368746E6F6DLL, 0xEF72616559656854, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x7469736F50746573 && a2 == 0xEC000000736E6F69)
  {
    v14 = 0xEC000000736E6F69;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469736F50746573, 0xEC000000736E6F69, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x54664F736B656577 && a2 == 0xEE00726165596568)
  {
    swift_bridgeObjectRelease(0xEE00726165596568);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54664F736B656577, 0xEE00726165596568, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

void sub_1004117E0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v5 = sub_10001A630(&qword_100849718);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_100411DEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedRecurrenceRule.CodingKeys, &type metadata for RDSavedRecurrenceRule.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v41 = a2;
    v12 = sub_10001A630(&qword_10084EF00);
    v43 = 0;
    v13 = sub_100411E74(&qword_10083F690, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v12, &v43, v5, v12, v13);
    v14 = v44;
    v15 = sub_10001A630(&qword_100849728);
    v43 = 1;
    v16 = sub_100411ED4(&qword_100849730, (void (*)(void))sub_100411E30, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v15, &v43, v5, v15, v16);
    v43 = 2;
    v40 = v44;
    swift_bridgeObjectRetain(v44);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v12, &v43, v5, v12, v13);
    v39 = v13;
    v17 = v44;
    LOBYTE(v44) = 3;
    v18 = swift_bridgeObjectRetain(v17);
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5, v18);
    v42 = v17;
    v37 = v20;
    v38 = v19;
    LOBYTE(v44) = 4;
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
    LOBYTE(v44) = 5;
    v36 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
    LOBYTE(v44) = 6;
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
    v35 = v21;
    v43 = 7;
    v22 = v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v12, &v43, v5, v12, v39);
    v43 = 8;
    v33 = v44;
    swift_bridgeObjectRetain(v44);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v12, &v43, v5, v12, v22);
    v23 = v22;
    v24 = v44;
    v43 = 9;
    swift_bridgeObjectRetain(v44);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v12, &v43, v5, v12, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = v44;
    swift_bridgeObjectRetain(v44);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v33;
    swift_bridgeObjectRelease();
    v27 = v42;
    swift_bridgeObjectRelease();
    v28 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v41;
    *v41 = v14;
    v29[1] = v28;
    v30 = v38;
    v29[2] = v27;
    v29[3] = v30;
    *((_BYTE *)v29 + 32) = v37 & 1;
    v31 = v36;
    v29[5] = v35;
    v29[6] = v31;
    v29[7] = v34;
    v29[8] = v26;
    v29[9] = v24;
    v29[10] = v25;
  }
}

unint64_t sub_100411DEC()
{
  unint64_t result;

  result = qword_100849720;
  if (!qword_100849720)
  {
    result = swift_getWitnessTable(&unk_1006BB660, &type metadata for RDSavedRecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100849720);
  }
  return result;
}

unint64_t sub_100411E30()
{
  unint64_t result;

  result = qword_100849738;
  if (!qword_100849738)
  {
    result = swift_getWitnessTable(&unk_1006BB3F4, &type metadata for RDSavedDayOfWeek);
    atomic_store(result, (unint64_t *)&qword_100849738);
  }
  return result;
}

uint64_t sub_100411E74(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5A94(&qword_10084EF00);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100411ED4(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000A5A94(&qword_100849728);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100411F3C()
{
  unint64_t result;

  result = qword_100849768;
  if (!qword_100849768)
  {
    result = swift_getWitnessTable(&unk_1006BB3CC, &type metadata for RDSavedDayOfWeek);
    atomic_store(result, (unint64_t *)&qword_100849768);
  }
  return result;
}

uint64_t sub_100411F80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_10001A630(&qword_100849770);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_1004120D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedDayOfWeek.CodingKeys, &type metadata for RDSavedDayOfWeek.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v7;
}

unint64_t sub_1004120D0()
{
  unint64_t result;

  result = qword_100849778;
  if (!qword_100849778)
  {
    result = swift_getWitnessTable(&unk_1006BB610, &type metadata for RDSavedDayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100849778);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedDayOfWeek.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100412160 + 4 * byte_1006BB35F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100412194 + 4 * byte_1006BB35A[v4]))();
}

uint64_t sub_100412194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041219C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004121A4);
  return result;
}

uint64_t sub_1004121B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004121B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004121BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004121C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedDayOfWeek.CodingKeys()
{
  return &type metadata for RDSavedDayOfWeek.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDSavedRecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedRecurrenceRule.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1004122BC + 4 * byte_1006BB369[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1004122F0 + 4 * byte_1006BB364[v4]))();
}

uint64_t sub_1004122F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004122F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100412300);
  return result;
}

uint64_t sub_10041230C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100412314);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100412318(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100412320(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedRecurrenceRule.CodingKeys()
{
  return &type metadata for RDSavedRecurrenceRule.CodingKeys;
}

unint64_t sub_100412340()
{
  unint64_t result;

  result = qword_100849788;
  if (!qword_100849788)
  {
    result = swift_getWitnessTable(&unk_1006BB530, &type metadata for RDSavedRecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100849788);
  }
  return result;
}

unint64_t sub_100412388()
{
  unint64_t result;

  result = qword_100849790;
  if (!qword_100849790)
  {
    result = swift_getWitnessTable(&unk_1006BB5E8, &type metadata for RDSavedDayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100849790);
  }
  return result;
}

unint64_t sub_1004123D0()
{
  unint64_t result;

  result = qword_100849798;
  if (!qword_100849798)
  {
    result = swift_getWitnessTable(&unk_1006BB558, &type metadata for RDSavedDayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100849798);
  }
  return result;
}

unint64_t sub_100412418()
{
  unint64_t result;

  result = qword_1008497A0;
  if (!qword_1008497A0)
  {
    result = swift_getWitnessTable(&unk_1006BB580, &type metadata for RDSavedDayOfWeek.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008497A0);
  }
  return result;
}

unint64_t sub_100412460()
{
  unint64_t result;

  result = qword_1008497A8;
  if (!qword_1008497A8)
  {
    result = swift_getWitnessTable(&unk_1006BB4A0, &type metadata for RDSavedRecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008497A8);
  }
  return result;
}

unint64_t sub_1004124A8()
{
  unint64_t result;

  result = qword_1008497B0;
  if (!qword_1008497B0)
  {
    result = swift_getWitnessTable(&unk_1006BB4C8, &type metadata for RDSavedRecurrenceRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008497B0);
  }
  return result;
}

uint64_t sub_1004124EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008497C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008497C0);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10041257C()
{
  uint64_t v0;

  v0 = type metadata accessor for Date(0);
  sub_10009EF3C(v0, qword_1008497D8);
  sub_10001AAA8(v0, (uint64_t)qword_1008497D8);
  return Date.init(timeIntervalSinceReferenceDate:)(733175001.0);
}

uint64_t RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.maxReminderCountToMigrate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate);
}

uint64_t RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.lastModifiedAfterDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CDA2C(v1+ OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate, a1);
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.__allocating_init(maxReminderCountToMigrate:lastModifiedAfterDate:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  id v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate] = a1;
  sub_1000CDA2C(a2, (uint64_t)&v5[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate]);
  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, "init");
  sub_10000882C(a2, (uint64_t *)&unk_1008380D0);
  return v6;
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.init(maxReminderCountToMigrate:lastModifiedAfterDate:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate] = a1;
  sub_1000CDA2C(a2, (uint64_t)&v2[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate]);
  v8.receiver = v2;
  v8.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v8, "init");
  sub_10000882C(a2, (uint64_t *)&unk_1008380D0);
  return v6;
}

Swift::Void __swiftcall RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  id v16;
  _OWORD v17[2];
  _QWORD v18[4];

  if (qword_100837480 != -1)
    swift_once(&qword_100837480, sub_1004124EC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_1008497C0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders: migrating if needed", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_QWORD *)&v17[0] = 0xD000000000000044;
  *((_QWORD *)&v17[0] + 1) = 0x80000001006BB6A0;
  v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v17, &type metadata for String);
  v10 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v9);
  swift_unknownObjectRelease(v9);
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v17, v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_10001A5E8((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_10000882C((uint64_t)v18, (uint64_t *)&unk_10083D5B0);
LABEL_13:
    sub_100412AC0(_.super.isa, metadata.super.super.isa);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v18[0] = 0xD000000000000044;
    v18[1] = 0x80000001006BB6A0;
    v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v18, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v15);

    swift_unknownObjectRelease(v15);
    return;
  }
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
    goto LABEL_13;
  v12 = v16;
  v13 = (uint64_t)objc_msgSend(v16, "integerValue");

  if (v13 < 1)
    goto LABEL_13;
}

void sub_100412AC0(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  char isEscapingClosureAtFileLocation;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  id v46;
  void *v47;
  uint64_t aBlock[3];
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;
  _QWORD v52[2];
  _OWORD v53[2];

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - v12;
  *(_QWORD *)&v53[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerAccountIdentifier"));
  *((_QWORD *)&v53[0] + 1) = v14;
  swift_bridgeObjectRetain(v14);
  v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v53, &type metadata for String);
  v16 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v15);
  swift_unknownObjectRelease(v15);
  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(v53, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    memset(v53, 0, sizeof(v53));
  }
  sub_10001A5E8((uint64_t)v53, (uint64_t)aBlock);
  if (!v49)
  {
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)aBlock, (uint64_t *)&unk_10083D5B0);
    goto LABEL_10;
  }
  if ((swift_dynamicCast(v52, aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v17 = v52[0];
  v18 = v52[1];
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)(v17, v18);
  v19 = swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v19) == 1)
  {
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
LABEL_10:
    if (qword_100837480 != -1)
      swift_once(&qword_100837480, sub_1004124EC);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_1008497C0);
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      aBlock[0] = v25;
      *(_DWORD *)v24 = 136446210;
      v26 = sub_1002AEF14();
      *(_QWORD *)&v53[0] = sub_10001A820((uint64_t)v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, (char *)v53 + 8);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "UpdateAlternativeDueDatesOfCalDavReminders: accountIdentifier is nil, skip migration {store: %{public}s}", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    return;
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v45(v13, v6, v7);
  v28 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v46 = v28;
  v29 = objc_msgSend(a1, "persistentStoreCoordinator");
  objc_msgSend(v28, "setPersistentStoreCoordinator:", v29);

  objc_msgSend(v28, "setTransactionAuthor:", RDStoreControllerUpdateAlternativeDueDatesOfCalDavRemindersMigrationAuthor);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v30 = *(unsigned __int8 *)(v8 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_1007F3528, v34 + 8, v30 | 7);
  v45((char *)(v35 + v31), v10, v7);
  *(_QWORD *)(v35 + v32) = v46;
  *(_QWORD *)(v35 + v33) = a1;
  v36 = v47;
  *(_QWORD *)(v35 + v34) = v47;
  v37 = swift_allocObject(&unk_1007F3550, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100414960;
  *(_QWORD *)(v37 + 24) = v35;
  v50 = sub_1000098E4;
  v51 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000098C4;
  v49 = &unk_1007F3568;
  v38 = _Block_copy(aBlock);
  v39 = v51;
  v40 = v46;
  v41 = a1;
  v42 = v36;
  swift_retain();
  swift_release(v39);
  objc_msgSend(v40, "performBlockAndWait:", v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v37, "", 140, 87, 28, 1);
  swift_release(v35);
  swift_release(v37);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void sub_100413098(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  uint8_t *v26;
  void *v27;
  id v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  id v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  NSObject *v46;
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  os_log_type_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  id v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  id v76;
  _QWORD v77[3];
  char v78[8];
  uint64_t v79;
  uint64_t v80;
  id v81;

  v5 = (void *)objc_opt_self(REMAccount);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "objectIDWithUUID:", isa);

  v8 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v9 + 32) = v7;
  v81 = (id)v9;
  specialized Array._endMutation()(v9);
  v10 = v7;
  sub_10034B07C((uint64_t)v81, 0, 1);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);

  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v60 = v16;
    else
      v60 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v61 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease();
    if (v61)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v16 & 0xC000000000000001) != 0)
    {
      v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
      goto LABEL_6;
    }
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v17 = *(id *)(v16 + 32);
LABEL_6:
      v18 = v17;
      v19 = -[NSObject accountTypeHost](v17, "accountTypeHost", swift_bridgeObjectRelease().n128_f64[0]);
      v20 = objc_msgSend(v19, "isCalDav");

      if (v20)
      {
        if (qword_100837480 != -1)
          swift_once(&qword_100837480, sub_1004124EC);
        v74 = v18;
        v21 = type metadata accessor for Logger(0);
        sub_10001AAA8(v21, (uint64_t)qword_1008497C0);
        v22 = a3;
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter(v23);
        if (os_log_type_enabled(v23, v24))
        {
          v25 = v22;
          v26 = (uint8_t *)swift_slowAlloc(12, -1);
          v27 = (void *)swift_slowAlloc(32, -1);
          v81 = v27;
          *(_DWORD *)v26 = 136446210;
          v28 = sub_1002AEF14();
          v79 = sub_10001A820((uint64_t)v28, v29, (uint64_t *)&v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "UpdateAlternativeDueDatesOfCalDavReminders BEGIN {store: %{public}s}", v26, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          v30 = v26;
          v22 = v25;
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

        }
        v44 = objc_autoreleasePoolPush();
        sub_100413FEC((uint64_t)a2, v22);
        objc_autoreleasePoolPop(v44);
        v45 = objc_msgSend(a2, "hasChanges");
        v46 = v74;
        if (v45)
        {
          v81 = 0;
          v47 = objc_msgSend(a2, "save:", &v81);
          v48 = v81;
          if (v47)
          {
            v49 = v81;
          }
          else
          {
            v50 = v81;
            v51 = _convertNSErrorToError(_:)(v48);

            swift_willThrow(v52);
            swift_errorRetain(v51);
            v53 = swift_errorRetain(v51);
            v54 = Logger.logObject.getter(v53);
            v55 = static os_log_type_t.error.getter(v54);
            if (os_log_type_enabled(v54, v55))
            {
              v56 = (uint8_t *)swift_slowAlloc(12, -1);
              v57 = (void *)swift_slowAlloc(32, -1);
              v81 = v57;
              *(_DWORD *)v56 = 136446210;
              swift_getErrorValue(v51, v78, v77);
              v58 = Error.rem_errorDescription.getter(v77[1], v77[2]);
              v79 = sub_10001A820(v58, v59, (uint64_t *)&v81);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
              swift_bridgeObjectRelease();
              swift_errorRelease(v51);
              swift_errorRelease(v51);
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "UpdateAlternativeDueDatesOfCalDavReminders: error saving MOC {error: %{public}s}", v56, 0xCu);
              swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v57, -1, -1);
              swift_slowDealloc(v56, -1, -1);

              swift_errorRelease(v51);
            }
            else
            {
              swift_errorRelease(v51);
              swift_errorRelease(v51);
              swift_errorRelease(v51);

            }
            v46 = v74;
          }
        }
        sub_100413E34(v22);

        goto LABEL_33;
      }
      if (qword_100837480 != -1)
        swift_once(&qword_100837480, sub_1004124EC);
      v31 = type metadata accessor for Logger(0);
      sub_10001AAA8(v31, (uint64_t)qword_1008497C0);
      v32 = v10;
      v33 = a3;
      v76 = v32;
      v34 = v33;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc(22, -1);
        v38 = (_QWORD *)swift_slowAlloc(8, -1);
        v39 = (void *)swift_slowAlloc(32, -1);
        v81 = v39;
        *(_DWORD *)v37 = 138412546;
        v79 = (uint64_t)v76;
        v75 = v18;
        v40 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
        *v38 = v76;

        *(_WORD *)(v37 + 12) = 2082;
        v41 = sub_1002AEF14();
        v79 = sub_10001A820((uint64_t)v41, v42, (uint64_t *)&v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "UpdateAlternativeDueDatesOfCalDavReminders: skip non-CalDAV account {accountID: %@, store: %{public}s}", (uint8_t *)v37, 0x16u);
        v43 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v38, 1, v43);
        swift_slowDealloc(v38, -1, -1);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        return;
      }

      goto LABEL_35;
    }
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  if (qword_100837480 != -1)
LABEL_38:
    swift_once(&qword_100837480, sub_1004124EC);
  v62 = type metadata accessor for Logger(0);
  sub_10001AAA8(v62, (uint64_t)qword_1008497C0);
  v63 = v10;
  v64 = a3;
  v76 = v63;
  v65 = v64;
  v46 = Logger.logObject.getter(v65);
  v66 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v66))
  {
    v67 = swift_slowAlloc(22, -1);
    v68 = (_QWORD *)swift_slowAlloc(8, -1);
    v69 = (void *)swift_slowAlloc(32, -1);
    v81 = v69;
    *(_DWORD *)v67 = 138412546;
    v79 = (uint64_t)v76;
    v70 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    *v68 = v76;

    *(_WORD *)(v67 + 12) = 2082;
    v71 = sub_1002AEF14();
    v79 = sub_10001A820((uint64_t)v71, v72, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v66, "UpdateAlternativeDueDatesOfCalDavReminders: account not found {accountID: %@, store: %{public}s}", (uint8_t *)v67, 0x16u);
    v73 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v68, 1, v73);
    swift_slowDealloc(v68, -1, -1);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v67, -1, -1);

LABEL_33:
    return;
  }

LABEL_35:
}

void sub_100413E34(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100837480 != -1)
    swift_once(&qword_100837480, sub_1004124EC);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_1008497C0);
  v9 = a1;
  v3 = Logger.logObject.getter(v9);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v11 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1002AEF14();
    v10 = sub_10001A820((uint64_t)v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "UpdateAlternativeDueDatesOfCalDavReminders END {store: %{public}s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

void sub_100413FEC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v3 = sub_100414324(a1, a2);
  if (!v2)
  {
    v4 = v3;
    if ((unint64_t)v3 >> 62)
    {
      if (v3 < 0)
        v10 = v3;
      else
        v10 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v5 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
          else
            v7 = *(id *)(v4 + 8 * i + 32);
          v8 = v7;
          v9 = objc_autoreleasePoolPush();
          sub_1004149C8(v8);
          objc_autoreleasePoolPop(v9);

        }
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100414324(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  __int128 v24;
  _BYTE v25[56];
  objc_class *v26;

  v3 = v2;
  v6 = _s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000CDA2C(v3+ OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate, (uint64_t)v8);
  swift_storeEnumTagMultiPayload(v8, v6, 46);
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  v11 = v10;
  v24 = xmmword_1006A7330;
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  if (qword_100837238 != -1)
    v10 = swift_once(&qword_100837238, sub_10033CF00);
  v12 = (void *)qword_100871E20;
  *(_QWORD *)(v11 + 32) = qword_100871E20;
  v26 = (objc_class *)v11;
  specialized Array._endMutation()(v10);
  v13 = v26;
  v14 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate);
  inited = swift_initStackObject(v9, v25);
  *(_OWORD *)(inited + 16) = xmmword_1006AAD80;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006BB720);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006BB758);
  KeyPath = swift_getKeyPath(&unk_1006BB7A8);
  *(_QWORD *)(inited + 48) = KeyPath;
  v26 = (objc_class *)inited;
  specialized Array._endMutation()(KeyPath);
  v17 = (uint64_t)v26;
  v18 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v18 + 16) = v24;
  *(_QWORD *)(v18 + 32) = a2;
  v26 = (objc_class *)v18;
  specialized Array._endMutation()(v18);
  v19 = (uint64_t)v26;
  v20 = v12;
  v21 = a2;
  v22 = sub_100340EC0((uint64_t)v8, v13, a1, (uint64_t)_swiftEmptyArrayStorage, 0, v14, v17, (uint64_t)_swiftEmptyArrayStorage, v19);
  sub_1000CACA8((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

void sub_100414540(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = objc_msgSend(*a1, "importedICSData");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1004145A4(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, "setImportedICSData:");

}

uint64_t sub_100414608@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "alternativeDisplayDateDate_forCalendar");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_10041468C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CDA2C(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setAlternativeDisplayDateDate_forCalendar:", isa);

}

uint64_t sub_100414768@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];

  sub_10001A670(a1, (uint64_t)v5);
  v3 = sub_1000151B0(0, &qword_100849840, ICSTodo_ptr);
  result = swift_dynamicCast(a2, v5, (char *)&type metadata for Any + 8, v3, 6);
  if ((result & 1) == 0)
    *a2 = 0;
  return result;
}

uint64_t sub_100414804()
{
  return type metadata accessor for RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders(0);
}

uint64_t type metadata accessor for RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders(uint64_t a1)
{
  uint64_t result;

  result = qword_100849828;
  if (!qword_100849828)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders);
  return result;
}

void sub_100414848(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000D7B50(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_1004148C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_100414960()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100413098(v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1004149B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1004149C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  objc_class *v34;
  Class v35;
  char *v36;
  void *v37;
  NSString v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  id v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v55 - v11;
  v13 = objc_msgSend(a1, "alternativeDisplayDateDate_forCalendar", v10);
  if (v13)
  {
    v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v12, v5, v2);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v15(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) != 1)
    {
      sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
      return;
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v15(v12, 1, 1, v2);
  }
  sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
  v16 = objc_msgSend(a1, "importedICSData");
  if (v16)
  {
    v17 = v16;
    v58 = v8;
    v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    v21 = objc_allocWithZone((Class)ICSDocument);
    sub_1000A70E4(v18, v20);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v59 = v18;
    v60 = v20;
    sub_1000A71C8(v18, v20);
    v63 = 0;
    v23 = objc_msgSend(v21, "initWithData:options:error:", isa, 0, &v63);

    v24 = v63;
    if (v23)
    {
      v25 = v63;
      v26 = objc_msgSend(v23, "calendar");
      if (!v26)
        goto LABEL_14;
      v27 = v26;
      v28 = objc_msgSend(v26, "components");

      if (!v28)
        goto LABEL_14;
      v62 = (uint64_t)v28;
      v57 = (id)sub_1000151B0(0, &qword_100849838, NSMutableArray_ptr);
      v29 = sub_1000151B0(0, &qword_100849840, ICSTodo_ptr);
      v30 = sub_10041503C();
      v31 = v61;
      Sequence.firstMap<A>(_:)(&v63, sub_100414768, 0, v57, v29, v30);
      v61 = v31;

      if (v63)
      {
        v32 = v63;
        v33 = objc_msgSend(v32, "x_apple_alternative_due_date_for_calendar");
        if (v33)
        {
          v57 = v33;
          v34 = (objc_class *)objc_msgSend(v33, "rem_dateAsUTC");
          v35 = v34;
          v56 = v23;
          if (v34)
          {
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

            v36 = v58;
            (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v58, v5, v2);
            v15(v36, 0, 1, v2);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v36, 1, v2) == 1)
            {
              v35 = 0;
            }
            else
            {
              v35 = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v3 + 8))(v36, v2);
            }
          }
          else
          {
            v15(v58, 1, 1, v2);
          }
          objc_msgSend(a1, "setAlternativeDisplayDateDate_forCalendar:", v35);

          v44 = objc_msgSend(a1, "remObjectID");
          if (qword_100837480 != -1)
            swift_once(&qword_100837480, sub_1004124EC);
          v45 = type metadata accessor for Logger(0);
          sub_10001AAA8(v45, (uint64_t)qword_1008497C0);
          v46 = v44;
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.info.getter(v47);
          if (!os_log_type_enabled(v47, v48))
          {
            sub_1000A71C8(v59, v60);

            return;
          }
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = (void *)swift_slowAlloc(32, -1);
          v62 = (uint64_t)v44;
          v63 = v50;
          *(_DWORD *)v49 = 136446210;
          v58 = (char *)v32;
          v51 = sub_10001A630((uint64_t *)&unk_100844910);
          v52 = Optional.descriptionOrNil.getter(v51);
          v62 = sub_10001A820(v52, v53, (uint64_t *)&v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "UpdateAlternativeDueDatesOfCalDavReminders: set ADD {reminderID: %{public}s}}", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          v54 = v58;
        }
        else
        {

        }
      }
      else
      {
LABEL_14:
        v37 = (void *)objc_opt_self(REMError);
        v38 = String._bridgeToObjectiveC()();
        v39 = objc_msgSend(v37, "internalErrorWithDebugDescription:", v38);

        v61 = (uint64_t)v39;
        swift_willThrow(v40);

      }
    }
    else
    {
      v41 = v63;
      v42 = _convertNSErrorToError(_:)(v24);

      v61 = v42;
      swift_willThrow(v43);
    }
    sub_1000A71C8(v59, v60);
  }
}

unint64_t sub_10041503C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100849848;
  if (!qword_100849848)
  {
    v1 = sub_1000151B0(255, &qword_100849838, NSMutableArray_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSArray, v1);
    atomic_store(result, (unint64_t *)&qword_100849848);
  }
  return result;
}

const char *sub_10041509C()
{
  return "importedICSData";
}

const char *sub_1004150B0()
{
  return "alternativeDisplayDateDate_forCalendar";
}

void sub_1004150C4(void *a1)
{
  void **v1;
  void *v2;
  id v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  os_log_type_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t MetatypeMetadata;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  char *v44;
  void (*v45)(void **, char *, uint64_t);
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void **v54;
  void *v55;
  id v56;
  Class v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void (*v79)(_QWORD *, NSObject *);
  void *v80;
  uint64_t v81;
  void *v82;
  double v83;
  id v84;
  id v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void **v112;
  __n128 v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  __n128 v118;
  char *v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  id v127;
  id v128;
  _QWORD *v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  double v136;
  char *v137;
  void (*v138)(char *, uint64_t);
  char *v139;
  uint64_t v140;
  NSObject *v141;
  char *v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  os_log_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t, __n128);
  _QWORD *v150;
  id v151;
  void (*v152)(void **, uint64_t, __n128);
  uint64_t v153;
  id v154;
  char *v155;
  char *v156;
  _QWORD *isa;
  void *v158;
  uint64_t v159;
  _QWORD *v160;
  NSObject *v161;
  void **v162;
  char *v163;
  NSObject *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;

  v3 = v2;
  v4 = v1;
  v165 = *v1;
  v161 = type metadata accessor for UUID(0);
  isa = v161[-1].isa;
  __chkstk_darwin(v161);
  v160 = (os_log_t *)((char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v155 = (char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v156 = (char *)&v146 - v10;
  __chkstk_darwin(v11);
  v13 = (void **)((char *)&v146 - v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v146 - v15;
  if (qword_100837490 != -1)
    swift_once(&qword_100837490, sub_100418B18);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001AAA8(v17, (uint64_t)qword_100849850);
  v19 = swift_retain_n(v4);
  v159 = v18;
  v20 = (char *)Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = v21;
  v164 = v20;
  v23 = os_log_type_enabled((os_log_t)v20, v21);
  v162 = v13;
  if (v23)
  {
    v24 = swift_slowAlloc(42, -1);
    LODWORD(v152) = v22;
    v25 = v24;
    v26 = swift_slowAlloc(16, -1);
    v163 = v16;
    v27 = (_QWORD *)v26;
    v153 = swift_slowAlloc(32, -1);
    v169 = v153;
    *(_DWORD *)v25 = 136446978;
    v170 = (uint64_t)v165;
    MetatypeMetadata = swift_getMetatypeMetadata(v165);
    v154 = v2;
    v158 = a1;
    v29 = String.init<A>(describing:)(&v170, MetatypeMetadata);
    v170 = sub_10001A820(v29, v30, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2114;
    v31 = v4;
    v32 = v4[2];
    v170 = (uint64_t)v32;
    v33 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    *v27 = v32;
    swift_release_n(v31);
    *(_WORD *)(v25 + 22) = 2114;
    v34 = v31[3];
    v170 = (uint64_t)v34;
    v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    v27[1] = v34;
    v4 = v31;
    swift_release_n(v31);
    *(_WORD *)(v25 + 32) = 2048;
    swift_release(v31);
    v170 = 50;
    a1 = v158;
    v3 = v154;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    swift_release(v31);
    v36 = (char *)v164;
    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v152, "%{public}s: Start execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v25, 0x2Au);
    v37 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v27, 2, v37);
    v16 = v163;
    swift_slowDealloc(v27, -1, -1);
    v38 = v153;
    swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    v39 = swift_release_n(v4);
  }
  Date.init()(v39);
  v40 = v4[2];
  v41 = sub_1002A6E28(v40, (uint64_t)a1, 0, 0);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v166);
    return;
  }
  v42 = v41;
  v43 = objc_msgSend(v41, "objectID");

  v44 = (char *)(*((uint64_t (**)(void *))*v4 + 18))(a1);
  v45 = *(void (**)(void **, char *, uint64_t))(v7 + 16);
  v45(v162, v16, v166);
  swift_retain_n(v4);
  v46 = swift_bridgeObjectRetain_n(v44, 2);
  v164 = v44;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  LODWORD(v153) = v48;
  v49 = os_log_type_enabled(v47, v48);
  v163 = v16;
  v148 = v7;
  v151 = v40;
  v149 = (void (*)(char *, char *, uint64_t, __n128))v45;
  if (v49)
  {
    v50 = swift_slowAlloc(42, -1);
    v150 = (_QWORD *)swift_slowAlloc(8, -1);
    v147 = swift_slowAlloc(32, -1);
    v169 = v147;
    *(_DWORD *)v50 = 136446978;
    v170 = (uint64_t)v165;
    v51 = swift_getMetatypeMetadata(v165);
    v52 = String.init<A>(describing:)(&v170, v51);
    v146 = v47;
    v170 = sub_10001A820(v52, v53, (uint64_t *)&v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2114;
    v154 = v43;
    v158 = a1;
    v54 = v4;
    v55 = v4[3];
    v170 = (uint64_t)v55;
    v56 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    *v150 = v55;
    swift_release_n(v54);
    *(_WORD *)(v50 + 22) = 2048;
    v57 = v164[2].isa;
    swift_bridgeObjectRelease();
    v170 = (uint64_t)v57;
    v4 = v54;
    a1 = v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 32) = 2048;
    v58 = v156;
    Date.init()(v59);
    v60 = (uint64_t)v162;
    v61 = Date.timeIntervalSince(_:)(v162);
    v62 = *(void (**)(char *, uint64_t))(v7 + 8);
    v63 = v58;
    v64 = v166;
    v62(v63, v166);
    v170 = *(_QWORD *)&v61;
    v40 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171);
    v152 = (void (*)(void **, uint64_t, __n128))v62;
    v62((char *)v60, v64);
    v65 = v146;
    _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v153, "%{public}s: Fetched reminders in source list {sourceListObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v50, 0x2Au);
    v66 = sub_10001A630((uint64_t *)&unk_100839E70);
    v67 = v150;
    swift_arrayDestroy(v150, 1, v66);
    swift_slowDealloc(v67, -1, -1);
    v68 = v147;
    swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v50, -1, -1);

    v69 = v164;
    v43 = v154;
  }
  else
  {
    swift_release_n(v4);
    v69 = v164;
    v70 = swift_bridgeObjectRelease_n(v164, 2);
    v152 = *(void (**)(void **, uint64_t, __n128))(v7 + 8);
    v152(v162, v166, v70);

  }
  v170 = (uint64_t)v69;
  v71 = sub_10001A630(&qword_100842308);
  v72 = sub_1003DBF48();
  v153 = BidirectionalCollection<>.slices(by:)(50, v71, v72);
  v170 = 0;
  v73 = objc_msgSend(v40, "uuid");
  v74 = v160;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

  v76 = UUID.uuidString.getter(v75);
  v78 = v77;
  v79 = (void (*)(_QWORD *, NSObject *))isa[1];
  v79(v74, v161);
  v169 = sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v162 = v4;
  v80 = v4[4];
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v81 = qword_100872290;
  swift_retain();
  v82 = sub_1000D19A0((void *)6, v76, v78, v80, a1, 0, v81);
  swift_release(v81);
  *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
  v154 = v43;
  if (v82)
  {
    isa = objc_msgSend(v82, "objectID", v83);
    type metadata accessor for REMMutableManualOrdering(0);
    v84 = objc_msgSend((id)objc_opt_self(REMManualOrdering), "newObjectID");
    v85 = objc_msgSend(v151, "uuid");
    v86 = v160;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v88 = UUID.uuidString.getter(v87);
    v90 = v89;
    v79(v86, v161);
    v161 = REMMutableManualOrdering.__allocating_init(objectID:listType:listID:)(v84, 6, v88, v90);

  }
  else
  {
    v91 = (uint64_t)v162;
    v92 = swift_retain_n(v162);
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = swift_slowAlloc(22, -1);
      v160 = (_QWORD *)swift_slowAlloc(8, -1);
      v161 = swift_slowAlloc(32, -1);
      v168 = v161;
      *(_DWORD *)v95 = 136446466;
      v158 = a1;
      v96 = sub_1000D92EC((uint64_t)v165);
      v167 = sub_10001A820(v96, v97, (uint64_t *)&v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2114;
      v98 = v151;
      v167 = (uint64_t)v151;
      v99 = v151;
      a1 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
      v100 = v160;
      *v160 = v98;
      swift_release_n(v91);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "%{public}s: Failed to fetch manual sort hint of template {templateObjectID: %{public}@}", (uint8_t *)v95, 0x16u);
      v101 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v100, 1, v101);
      swift_slowDealloc(v100, -1, -1);
      v102 = (char *)v161;
      swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v95, -1, -1);

    }
    else
    {

      swift_release_n(v91);
    }
    v161 = 0;
    isa = 0;
  }
  v103 = (char *)a1;
  v104 = *(_QWORD *)(v153 + 16);
  if (v104)
  {
    v105 = (unint64_t *)(v153 + 56);
    do
    {
      v107 = *(v105 - 1);
      v106 = *v105;
      v108 = *(v105 - 3);
      v109 = *(v105 - 2);
      swift_unknownObjectRetain(v108);
      v110 = objc_autoreleasePoolPush();
      v111 = v107;
      v112 = v162;
      sub_100418BA8(v103, (uint64_t)v154, v108, v109, v111, v106, (uint64_t)v162, (uint64_t)&v169, (char *)v161, (double *)&v170, isa, (char *)v164, v163, v165);
      objc_autoreleasePoolPop(v110);
      swift_unknownObjectRelease(v108);
      v105 += 4;
      --v104;
    }
    while (v104);
  }
  else
  {
    v112 = v162;
  }
  swift_bridgeObjectRelease();
  v113 = swift_bridgeObjectRelease();
  v114 = (*((uint64_t (**)(char *, __n128))*v112 + 19))(v103, v113);
  v115 = v114;
  if ((unint64_t)v114 >> 62)
  {
    if (v114 < 0)
      v144 = v114;
    else
      v144 = v114 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v114);
    v145 = _CocoaArrayWrapper.endIndex.getter(v144);
    swift_bridgeObjectRelease();
    v116 = v155;
    if (!v145)
      goto LABEL_29;
    goto LABEL_28;
  }
  v116 = v155;
  if (*(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    v117 = v169;
    swift_bridgeObjectRetain(v169);
    sub_100417644(v115, v117, (uint64_t)v154, (uint64_t)v103);
    swift_bridgeObjectRelease();
  }
LABEL_29:
  v118 = swift_bridgeObjectRelease();
  v119 = v163;
  v149(v116, v163, v166, v118);
  v120 = swift_retain_n(v112);
  v121 = Logger.logObject.getter(v120);
  v122 = static os_log_type_t.default.getter(v121);
  v123 = v122;
  if (os_log_type_enabled(v121, v122))
  {
    v124 = swift_slowAlloc(52, -1);
    v160 = (_QWORD *)swift_slowAlloc(16, -1);
    v164 = swift_slowAlloc(32, -1);
    v168 = v164;
    *(_DWORD *)v124 = 136447234;
    LODWORD(v162) = v123;
    v125 = sub_1000D92EC((uint64_t)v165);
    v167 = sub_10001A820(v125, v126, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    swift_bridgeObjectRelease();
    *(_WORD *)(v124 + 12) = 2114;
    v127 = v151;
    v167 = (uint64_t)v151;
    v128 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    v129 = v160;
    *v160 = v127;
    swift_release_n(v112);
    *(_WORD *)(v124 + 22) = 2114;
    v130 = v112[3];
    v167 = (uint64_t)v130;
    v131 = v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    v129[1] = v130;
    swift_release_n(v112);
    *(_WORD *)(v124 + 32) = 2048;
    swift_release(v112);
    v167 = 50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    v132 = swift_release(v112);
    *(_WORD *)(v124 + 42) = 2048;
    v133 = v166;
    v134 = v156;
    Date.init()(v132);
    v135 = v155;
    v136 = Date.timeIntervalSince(_:)(v155);
    v137 = v134;
    v138 = (void (*)(char *, uint64_t))v152;
    ((void (*)(char *, uint64_t))v152)(v137, v133);
    v167 = *(_QWORD *)&v136;
    v139 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168);
    v138(v135, v133);
    _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v162, "%{public}s: Finished execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v124, 0x34u);
    v140 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v129, 2, v140);
    swift_slowDealloc(v129, -1, -1);
    v141 = v164;
    swift_arrayDestroy(v164, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v141, -1, -1);
    swift_slowDealloc(v124, -1, -1);

    swift_release(v161);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v139, v166);
  }
  else
  {
    swift_release_n(v112);
    v142 = v116;
    v143 = (void (*)(char *, uint64_t))v152;
    ((void (*)(char *, uint64_t))v152)(v142, v166);

    swift_release(v161);
    v143(v119, v166);
  }
  swift_bridgeObjectRelease();
}

void sub_100416078(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  objc_class *ObjCClassFromMetadata;
  id v15;
  id v16;
  id v17;
  id v18;
  Class isa;
  void (*v20)(char *, uint64_t);
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  _QWORD v31[14];
  char *v32;
  unint64_t v33;

  v31[5] = a1;
  v32 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMCDSavedReminder();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v13);
  v15 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initWithContext:", a4, a4);
  v16 = -[objc_class newObjectID](ObjCClassFromMetadata, "newObjectID");
  v17 = v15;
  v31[2] = v16;
  v18 = objc_msgSend(v16, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33 = v9;
  v20(v12, v9);
  objc_msgSend(v17, "setIdentifier:", isa);

  v21 = v17;
  v22 = objc_msgSend(a3, "account");
  objc_msgSend(v21, "setAccount:", v22);

  v23 = objc_msgSend(v21, "template");
  if (!v23)
    goto LABEL_3;
  v24 = v23;
  type metadata accessor for REMCDTemplate();
  v25 = a3;
  v26 = v24;
  LOBYTE(v24) = static NSObject.== infix(_:_:)(v26);

  if ((v24 & 1) == 0)
  {
LABEL_3:
    objc_msgSend(v21, "setTemplate:", a3);
    v27 = objc_msgSend(v21, "createResolutionTokenMapIfNecessary");
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "updateForKey:", v28);

  }
  if (v32)
  {
    v29 = objc_msgSend(v32, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v10 + 56))(v8, v30, 1, v33);
  v31[3] = v21;
  sub_10021A758((uint64_t)v8);
  sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
  objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
  objc_opt_self(REMReminderChangeItem);
  v33 = 0xD000000000000010;
  v31[13] = "daIsNotificationsCollection";
  v32 = "debugSyncDisabled";
  v31[11] = "lastModifiedDate";
  v31[12] = "daCalendarItemUniqueIdentifier";
  v31[9] = "dueDateComponents";
  v31[10] = "startDateComponents";
  v31[7] = "dueDateDeltaAlertsData";
  v31[8] = "attachments";
  v31[6] = "dueDateDeltaAlertsToUpsert";
  JUMPOUT(0x100416458);
}

void sub_100416448()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSString v6;
  id v7;

  v5 = *(_QWORD *)(v4 - 112) | 0x8000000000000000;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v0, *(SEL *)(v1 + 160), v6, swift_bridgeObjectRelease(v5).n128_f64[0]);

  if (v7)
  {
    objc_msgSend(v2, *(SEL *)(v3 + 832), v7);

  }
  JUMPOUT(0x100416410);
}

void sub_100416874(uint64_t a1, id a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  objc_class *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t MetatypeMetadata;
  uint64_t v61;
  unint64_t v62;
  double v63;
  id v64;
  void *v65;
  os_log_type_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t ObjCClassFromMetadata;
  NSString v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  NSString v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  NSString v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  os_log_type_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  objc_class *v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  id v102;
  id v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  _BYTE v109[24];
  uint64_t v110;

  v5 = v4;
  v6 = a2;
  v95 = *v3;
  v104 = objc_msgSend(a2, "remObjectID");
  if (!v104)
  {
    v74 = (void *)objc_opt_self(REMError);
    v75 = type metadata accessor for REMCDSavedReminder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v75);
    v77 = String._bridgeToObjectiveC()();
    objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v77);

    swift_willThrow(v78);
    return;
  }
  v8 = objc_msgSend(v6, "account");
  if (v8)
  {
    v9 = v8;
    v102 = objc_msgSend(v8, "remObjectID");
    if (!v102)
    {
      v85 = (void *)objc_opt_self(REMError);
      v86 = type metadata accessor for REMCDSavedReminder();
      v87 = swift_getObjCClassFromMetadata(v86);
      v88 = String._bridgeToObjectiveC()();
      objc_msgSend(v85, "unexpectedNilPropertyWithClass:property:", v87, v88);

      swift_willThrow(v89);
      return;
    }
    v10 = type metadata accessor for REMSavedAttachmentCDIngestor();
    swift_initStackObject(v10, v109);
    if ((unint64_t)a1 >> 62)
      goto LABEL_39;
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    while (v11)
    {
      v12 = type metadata accessor for REMCDSavedAttachment();
      v13 = (objc_class *)swift_getObjCClassFromMetadata(v12);
      v101 = a1 & 0xC000000000000001;
      v14 = 4;
      v91 = v9;
      v97 = a1;
      v98 = v13;
      v99 = v11;
      v100 = v6;
      while (1)
      {
        v28 = v101
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1)
            : *(id *)(a1 + 8 * v14);
        v29 = v28;
        if (__OFADD__(v14 - 4, 1))
          break;
        v105 = v14 - 3;
        v30 = objc_msgSend(objc_allocWithZone(v13), "initWithContext:", a3);
        objc_msgSend(v30, "setAccount:", v9);
        v107 = v30;
        objc_msgSend(v30, "setReminder:", v6);
        v31 = objc_opt_self(REMURLAttachment);
        v32 = swift_dynamicCastObjCClass(v29, v31);
        v106 = v14;
        if (v32)
        {
          v33 = v32;
          v34 = v29;
          v35 = -[objc_class newObjectID](v13, "newObjectID");
          v36 = (objc_class *)REMURLAttachment;
        }
        else
        {
          v37 = objc_opt_self(REMFileAttachment);
          v38 = swift_dynamicCastObjCClass(v29, v37);
          if (!v38)
          {
            if (qword_100837490 != -1)
              swift_once(&qword_100837490, sub_100418B18);
            v50 = type metadata accessor for Logger(0);
            sub_10001AAA8(v50, (uint64_t)qword_100849850);
            v51 = v29;
            v52 = v6;
            v53 = v51;
            v54 = v52;
            v55 = Logger.logObject.getter(v54);
            v56 = static os_log_type_t.default.getter(v55);
            if (os_log_type_enabled(v55, v56))
            {
              v96 = v5;
              v57 = swift_slowAlloc(32, -1);
              v58 = (_QWORD *)swift_slowAlloc(8, -1);
              v59 = swift_slowAlloc(64, -1);
              v108 = v59;
              *(_DWORD *)v57 = 136446722;
              v110 = v95;
              MetatypeMetadata = swift_getMetatypeMetadata(v95);
              v61 = String.init<A>(describing:)(&v110, MetatypeMetadata);
              *(_QWORD *)(v57 + 4) = sub_10001A820(v61, v62, &v108);
              *(_QWORD *)&v63 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v57 + 12) = 2082;
              v64 = objc_msgSend(v54, "remObjectID", v63);
              if (v64)
              {
                v65 = v64;
                v94 = v55;
                v66 = v56;
                v67 = v58;
                v68 = v59;
                v69 = objc_msgSend(v64, "description");

                v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
                v72 = v71;

                v59 = v68;
                v58 = v67;
                v56 = v66;
                v55 = v94;
              }
              else
              {
                v72 = 0xE300000000000000;
                v70 = 7104878;
              }
              *(_QWORD *)(v57 + 14) = sub_10001A820(v70, v72, &v108);

              swift_bridgeObjectRelease();
              *(_WORD *)(v57 + 22) = 2114;
              *(_QWORD *)(v57 + 24) = v53;
              *v58 = v53;

              _os_log_impl((void *)&_mh_execute_header, v55, v56, "%{public}s: Skipped copying attachment into cdSavedReminder because attachment belongs to an unhandled subclass of REMAttachment {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@}", (uint8_t *)v57, 0x20u);
              v73 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v58, 1, v73);
              swift_slowDealloc(v58, -1, -1);
              swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v59, -1, -1);
              swift_slowDealloc(v57, -1, -1);

              v5 = v96;
              v9 = v91;
            }
            else
            {

            }
            goto LABEL_24;
          }
          v33 = v38;
          v39 = v29;
          v35 = -[objc_class newObjectID](v13, "newObjectID");
          v36 = (objc_class *)REMFileAttachment;
        }
        v40 = objc_msgSend(objc_allocWithZone(v36), "initWithAttachment:objectID:accountID:reminderID:", v33, v35, v102, v104);

        sub_10019D13C(v40, v107);
        if (v5)
        {
          swift_bridgeObjectRelease();

          v84 = v104;
          goto LABEL_44;
        }
        objc_msgSend(v107, "updateChangeCount");
        if (qword_100837490 != -1)
          swift_once(&qword_100837490, sub_100418B18);
        v41 = type metadata accessor for Logger(0);
        sub_10001AAA8(v41, (uint64_t)qword_100849850);
        v42 = v29;
        v43 = v6;
        v44 = v40;
        v45 = v42;
        v46 = v43;
        v47 = v44;
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.default.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v92 = v49;
          v15 = swift_slowAlloc(42, -1);
          v16 = (_QWORD *)swift_slowAlloc(16, -1);
          v93 = swift_slowAlloc(64, -1);
          v108 = v93;
          *(_DWORD *)v15 = 136446978;
          v110 = v95;
          v17 = swift_getMetatypeMetadata(v95);
          v18 = String.init<A>(describing:)(&v110, v17);
          *(_QWORD *)(v15 + 4) = sub_10001A820(v18, v19, &v108);
          *(_QWORD *)&v20 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v15 + 12) = 2082;
          v21 = objc_msgSend(v46, "remObjectID", v20);
          if (v21)
          {
            v22 = v21;
            v23 = objc_msgSend(v21, "description");

            v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
            v26 = v25;

          }
          else
          {
            v26 = 0xE300000000000000;
            v24 = 7104878;
          }
          a1 = v97;
          *(_QWORD *)(v15 + 14) = sub_10001A820(v24, v26, &v108);

          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2114;
          *(_QWORD *)(v15 + 24) = v45;
          *v16 = v45;

          *(_WORD *)(v15 + 32) = 2114;
          *(_QWORD *)(v15 + 34) = v47;
          v16[1] = v47;

          _os_log_impl((void *)&_mh_execute_header, v48, v92, "%{public}s: Copied attachment into cdSavedReminder {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@, savedAttachment: %{public}@}", (uint8_t *)v15, 0x2Au);
          v27 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v16, 2, v27);
          swift_slowDealloc(v16, -1, -1);
          swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v93, -1, -1);
          swift_slowDealloc(v15, -1, -1);

          v5 = 0;
          v9 = v91;
          goto LABEL_10;
        }

LABEL_24:
        a1 = v97;
LABEL_10:
        v13 = v98;
        v14 = v106 + 1;
        v6 = v100;
        if (v105 == v99)
          goto LABEL_43;
      }
      __break(1u);
LABEL_39:
      if (a1 < 0)
        v90 = a1;
      else
        v90 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v11 = _CocoaArrayWrapper.endIndex.getter(v90);
    }
LABEL_43:

    swift_bridgeObjectRelease();
    v84 = v102;
  }
  else
  {
    v79 = (void *)objc_opt_self(REMError);
    v80 = type metadata accessor for REMCDSavedReminder();
    v81 = swift_getObjCClassFromMetadata(v80);
    v82 = String._bridgeToObjectiveC()();
    objc_msgSend(v79, "unexpectedNilPropertyWithClass:property:", v81, v82);

    swift_willThrow(v83);
    v84 = v104;
  }
LABEL_44:

}

void sub_100417200(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  Class isa;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Class v17;
  double v18;
  uint64_t v19;
  Class v20;
  double v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  Class v38;
  id v39;
  uint64_t v40;

  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v6 + 32) = a1;
  specialized Array._endMutation()(v6);
  v7 = (void *)objc_opt_self(REMReminderFetchOptions);
  v8 = a1;
  v9 = objc_msgSend(v7, "fetchOptionsIncludingDueDateDeltaAlerts");
  v10 = objc_allocWithZone((Class)REMRemindersDataViewInvocation_fetchByObjectID);
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v10, "initWithObjectIDs:fetchOptions:", isa, v9, swift_bridgeObjectRelease().n128_f64[0]);

  v13 = sub_1003D1D48(a2);
  if (!v2)
  {
    v14 = objc_opt_self(REMRemindersDataViewInvocationResult);
    v15 = swift_dynamicCastObjCClass(v13, v14);
    if (v15)
    {
      v16 = (void *)v15;
      v39 = v13;
      v17 = (Class)objc_msgSend(v16, "accountStorages");
      if (!v17)
      {
        v19 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v19);
        v17 = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
      }
      v38 = v17;
      v20 = (Class)objc_msgSend(v16, "listStorages", v18);
      if (!v20)
      {
        v22 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v22);
        v20 = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v21 = swift_bridgeObjectRelease().n128_u64[0];
      }
      v23 = (Class)objc_msgSend(v16, "reminderStorages", v21, v13);
      if (!v23)
      {
        v24 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
        static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v24);
        v23 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      v25 = (void *)objc_opt_self(REMRemindersDataView);
      v26 = *(_QWORD *)(v40 + 48);
      v27 = swift_allocObject(v5, 40, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v27 + 32) = v8;
      specialized Array._endMutation()(v27);
      v28 = v8;
      v29 = Array._bridgeToObjectiveC()().super.isa;
      v30 = objc_msgSend(v25, "remindersFromAccountStorages:listStorages:reminderStorages:store:requestedReminderIDs:", v38, v20, v23, v26, v29, swift_bridgeObjectRelease().n128_f64[0]);

      if (v30)
      {
        v31 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

        v33 = v28;
        v34 = sub_10011A634(v32);
        swift_bridgeObjectRelease();

        if (v34)
        {
          REMReminder.codable.getter();

          return;
        }
      }
      v35 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v28);
      swift_willThrow(v35);

      v13 = v37;
    }
    else
    {
      v36 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v8);
      swift_willThrow(v36);
    }

  }
}

void sub_100417644(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t (*v49)(uint64_t);
  id v50;
  void *v51;
  NSObject *v52;
  id v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  __n128 v62;
  char *v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, NSObject *);
  NSObject *v78;
  _QWORD *v79;
  unint64_t v80;
  char v81;
  char v82;
  __n128 v83;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v85;
  unint64_t v86;
  void (*v87)(unint64_t, NSObject *);
  NSObject *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  int64_t v92;
  __n128 v93;
  id v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  unint64_t v104;
  __n128 v105;
  void (*v106)(char *, NSObject *, __n128);
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(char *, unint64_t, NSObject *, __n128);
  uint64_t v111;
  NSObject *v112;
  unint64_t v113;
  uint64_t v114;
  int64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, NSObject *);
  id v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  id v128;
  void *v129;
  char *v130;
  char *v131;
  NSObject *v132;
  _QWORD *v133;
  void (*v134)(uint64_t, uint64_t, uint64_t, NSObject *);
  unsigned int (*v135)(uint64_t, uint64_t, NSObject *);
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  void (*v141)(void);
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  NSUUID v146;
  Class v147;
  char *v148;
  id v149;
  char *v150;
  Class v151;
  id v152;
  id v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void (*v157)(char *, NSObject *);
  id v158;
  NSObject *v159;
  Class v160;
  id v161;
  id v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  id v168;
  uint64_t v169;
  NSObject *v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  os_log_type_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  id v185;
  void *v186;
  id v187;
  uint64_t v188;
  char *v189;
  char *v190;
  double v191;
  void (*v192)(char *, uint64_t);
  NSObject *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  id v201;
  char *v202;
  uint64_t v203;
  NSObject *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  void *v219;
  uint64_t v220;
  char *v221;
  void *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  int64_t v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *isa;
  char *v231;
  NSObject *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  id v236;

  v216 = a2;
  v229 = a1;
  v8 = *v4;
  v9 = sub_10001A630(&qword_1008452C8);
  __chkstk_darwin(v9);
  v218 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v215 = (char *)&v199 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v13);
  v206 = (uint64_t)&v199 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v210 = (uint64_t)&v199 - v16;
  __chkstk_darwin(v17);
  v211 = (char *)&v199 - v18;
  __chkstk_darwin(v19);
  v221 = (char *)&v199 - v20;
  __chkstk_darwin(v21);
  v226 = (char *)&v199 - v22;
  v232 = type metadata accessor for UUID(0);
  isa = v232[-1].isa;
  __chkstk_darwin(v232);
  v209 = (char *)&v199 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v223 = (char *)&v199 - v25;
  __chkstk_darwin(v26);
  v217 = (char *)&v199 - v27;
  __chkstk_darwin(v28);
  v224 = (char *)&v199 - v29;
  __chkstk_darwin(v30);
  v231 = (char *)&v199 - v31;
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v199 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v205 = (char *)&v199 - v37;
  __chkstk_darwin(v38);
  v208 = (char *)&v199 - v39;
  __chkstk_darwin(v40);
  v42 = (char *)&v199 - v41;
  Date.init()(v43);
  v235 = 0;
  v44 = objc_msgSend((id)a4, "existingObjectWithID:error:", a3, &v235);
  v45 = (id)v235;
  if (!v44)
  {
    v53 = (id)v235;
    _convertNSErrorToError(_:)(v45);

    swift_willThrow(v54);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);
    return;
  }
  v46 = v44;
  v47 = type metadata accessor for REMCDTemplate();
  v48 = (void *)swift_dynamicCastClass(v46, v47);
  if (!v48)
  {
    v55 = v45;

    (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);
    return;
  }
  v222 = v48;
  v202 = v35;
  v203 = v8;
  v49 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 160);
  v50 = v45;
  v51 = (void *)v49(a4);
  v52 = v5;
  if (v5)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);

    return;
  }
  v201 = v51;
  v56 = _swiftEmptyArrayStorage;
  v235 = (unint64_t)_swiftEmptyArrayStorage;
  v228 = (_QWORD *)sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v234 = (unint64_t)_swiftEmptyArrayStorage;
  v57 = v229;
  if (v229 >> 62)
    goto LABEL_91;
  v58 = *(_QWORD *)((v229 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v229);
LABEL_9:
  v214 = v33;
  v219 = v46;
  if (!v58)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v213 = a4;
  v199 = v42;
  v200 = v32;
  v212 = v57 & 0xC000000000000001;
  a4 = 4;
  v32 = (uint64_t)isa;
  v207 = v58;
  do
  {
    v56 = (_QWORD *)(a4 - 4);
    if (v212)
      v63 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, v57);
    else
      v63 = (char *)*(id *)(v57 + 8 * a4);
    v42 = v63;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
LABEL_91:
      if (v57 < 0)
        v164 = v57;
      else
        v164 = v57 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v57);
      v58 = _CocoaArrayWrapper.endIndex.getter(v164);
      goto LABEL_9;
    }
    v227 = a4 - 3;
    v236 = 0;
    v64 = objc_msgSend(v63, "remObjectIDWithError:", &v236);
    v65 = v236;
    if (!v64)
    {
      v94 = v236;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v65);

      swift_willThrow(v95);
LABEL_31:
      (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v199, v200, v96);
      goto LABEL_36;
    }
    v66 = v64;
    v67 = v236;
    v68 = sub_100419DC4(v42, v222, v213);
    if (v52)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v96 = swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    v225 = v42;
    v69 = v68;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
    v71 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v70 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v71 >= v70 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1);
    v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v69);
    specialized Array._endMutation()(v72);
    v73 = objc_msgSend(v66, "uuid");
    v74 = (uint64_t)v231;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

    v75 = objc_msgSend(v69, "uuid");
    v76 = (uint64_t)v226;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

    v77 = *(void (**)(uint64_t, _QWORD, uint64_t, NSObject *))(v32 + 56);
    v78 = v232;
    v77(v76, 0, 1, v232);
    if ((*(unsigned int (**)(uint64_t, uint64_t, NSObject *))(v32 + 48))(v76, 1, v78) == 1)
    {
      sub_10000882C(v76, (uint64_t *)&unk_100839C80);
      v79 = v228;
      swift_bridgeObjectRetain(v228);
      v80 = sub_1002C65F8(v74);
      v82 = v81;
      v83 = swift_bridgeObjectRelease();
      if ((v82 & 1) != 0)
      {
        v204 = 0;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v79);
        v236 = v79;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002D712C();
          v79 = v236;
        }
        v32 = (uint64_t)isa;
        v85 = isa[9] * v80;
        v86 = v79[6] + v85;
        v87 = (void (*)(unint64_t, NSObject *))isa[1];
        v228 = (_QWORD *)v80;
        v88 = v232;
        v87(v86, v232);
        v89 = v236;
        v90 = *((_QWORD *)v236 + 7) + v85;
        v91 = (uint64_t)v221;
        (*(void (**)(char *, unint64_t, NSObject *))(v32 + 32))(v221, v90, v88);
        v92 = (int64_t)v228;
        v228 = v89;
        sub_10028A1C4(v92, (uint64_t)v89);
        v93 = swift_bridgeObjectRelease();
        ((void (*)(uint64_t, _QWORD, uint64_t, NSObject *, __n128))v77)(v91, 0, 1, v88, v93);
        v52 = v204;
      }
      else
      {
        v91 = (uint64_t)v221;
        v88 = v232;
        ((void (*)(char *, uint64_t, uint64_t, NSObject *, __n128))v77)(v221, 1, 1, v232, v83);
        v32 = (uint64_t)isa;
        v87 = (void (*)(unint64_t, NSObject *))isa[1];
        v52 = 0;
      }
      v33 = v214;
      v87((unint64_t)v231, v88);
      sub_10000882C(v91, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v59 = (uint64_t)v224;
      (*(void (**)(char *, uint64_t, NSObject *))(v32 + 32))(v224, v76, v78);
      v60 = v228;
      v61 = swift_isUniquelyReferenced_nonNull_native(v228);
      v236 = v60;
      sub_10028C430(v59, v74, v61);
      v228 = v236;
      v62 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, NSObject *, __n128))(v32 + 8))(v74, v232, v62);
      v52 = 0;
      v33 = v214;
    }
    v46 = v219;

    ++a4;
    v57 = v229;
  }
  while (v227 != v207);
  swift_bridgeObjectRelease();
  v56 = (_QWORD *)v235;
  v32 = v200;
  v42 = v199;
  a4 = v213;
LABEL_33:
  v97 = (uint64_t)v222;
  sub_10014FC18((uint64_t)v56, 1);
  if (v52)
  {

    swift_bridgeObjectRelease();
    v98 = swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  if (!v201 || !v228[2] || !*(_QWORD *)(v216 + 16))
  {
LABEL_85:
    v97 = v234;
    if (!(v234 >> 62))
    {
      if (!*(_QWORD *)((v234 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_100:
        *(_QWORD *)&v163 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_101:
        objc_msgSend(v222, "updateChangeCount", v163, v199);
        v236 = 0;
        v167 = objc_msgSend((id)a4, "save:", &v236);
        v168 = v236;
        if (v167)
        {
          v169 = v33;
          v170 = v52;
          v171 = qword_100837490;
          v172 = v236;
          if (v171 != -1)
            swift_once(&qword_100837490, sub_100418B18);
          v173 = type metadata accessor for Logger(0);
          sub_10001AAA8(v173, (uint64_t)qword_100849850);
          v174 = v205;
          (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v205, v42, v32);
          v175 = v220;
          v176 = swift_retain_n(v220);
          v177 = Logger.logObject.getter(v176);
          v178 = static os_log_type_t.default.getter(v177);
          v232 = v177;
          LODWORD(v231) = v178;
          if (os_log_type_enabled(v177, v178))
          {
            v179 = swift_slowAlloc(42, -1);
            v204 = v170;
            v180 = v179;
            v181 = (_QWORD *)swift_slowAlloc(16, -1);
            isa = (_QWORD *)swift_slowAlloc(32, -1);
            v236 = isa;
            *(_DWORD *)v180 = 136446978;
            v182 = sub_1000D92EC(v203);
            v233 = sub_10001A820(v182, v183, (uint64_t *)&v236);
            v200 = v32;
            v199 = v42;
            v213 = a4;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234);
            swift_bridgeObjectRelease();
            *(_WORD *)(v180 + 12) = 2114;
            v184 = *(void **)(v175 + 16);
            v233 = (uint64_t)v184;
            v185 = v184;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234);
            *v181 = v184;
            swift_release_n(v175);
            *(_WORD *)(v180 + 22) = 2114;
            v186 = *(void **)(v175 + 24);
            v233 = (uint64_t)v186;
            v187 = v186;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234);
            v181[1] = v186;
            v188 = swift_release_n(v175);
            *(_WORD *)(v180 + 32) = 2048;
            v189 = v202;
            Date.init()(v188);
            v190 = v205;
            v191 = Date.timeIntervalSince(_:)(v205);
            v192 = *(void (**)(char *, uint64_t))(v214 + 8);
            v192(v189, v200);
            v233 = *(_QWORD *)&v191;
            a4 = v213;
            v42 = v199;
            v32 = v200;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234);
            v192(v190, v32);
            v193 = v232;
            _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v231, "%{public}s: Copied Sections to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v180, 0x2Au);
            v194 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v181, 2, v194);
            swift_slowDealloc(v181, -1, -1);
            v195 = isa;
            swift_arrayDestroy(isa, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v195, -1, -1);
            v196 = v180;
            v46 = v219;
            swift_slowDealloc(v196, -1, -1);

          }
          else
          {
            swift_release_n(v175);
            v192 = *(void (**)(char *, uint64_t))(v169 + 8);
            v192(v174, v32);

          }
          objc_msgSend((id)a4, "reset");

          v192(v42, v32);
        }
        else
        {
          v197 = v236;
          _convertNSErrorToError(_:)(v168);

          swift_willThrow(v198);
LABEL_35:
          (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v42, v32, v98);
        }
LABEL_36:
        swift_bridgeObjectRelease();
        return;
      }
LABEL_87:
      v158 = objc_allocWithZone((Class)REMMemberships);
      sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
      v159 = v52;
      v160 = Array._bridgeToObjectiveC()().super.isa;
      v161 = objc_msgSend(v158, "initWithMemberships:", v160, swift_bridgeObjectRelease().n128_f64[0]);

      v162 = v161;
      sub_10027C15C(v161, 1);
      v52 = v159;
      if (v159)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v42, v32);

        goto LABEL_36;
      }

      goto LABEL_101;
    }
LABEL_96:
    if (v97 < 0)
      v165 = v97;
    else
      v165 = v97 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v97);
    v166 = _CocoaArrayWrapper.endIndex.getter(v165);
    swift_bridgeObjectRelease();
    if (!v166)
      goto LABEL_100;
    goto LABEL_87;
  }
  v213 = a4;
  v199 = v42;
  v200 = v32;
  v99 = v216;
  v100 = *(_QWORD *)(v216 + 64);
  v225 = (char *)(v216 + 64);
  v101 = 1 << *(_BYTE *)(v216 + 32);
  v102 = -1;
  if (v101 < 64)
    v102 = ~(-1 << v101);
  v231 = (char *)(v102 & v100);
  v227 = (unint64_t)(v101 + 63) >> 6;
  v221 = (char *)(v227 - 1);
  a4 = (uint64_t)v201;
  v103 = swift_bridgeObjectRetain(v99);
  v229 = 0;
  v204 = 0;
  v32 = (uint64_t)v215;
  v42 = v217;
  v226 = (char *)a4;
  v104 = (unint64_t)v231;
  if (!v231)
    goto LABEL_47;
  while (2)
  {
    v231 = (char *)((v104 - 1) & v104);
    v107 = __clz(__rbit64(v104)) | (v229 << 6);
LABEL_46:
    v108 = v216;
    v109 = isa[9] * v107;
    v110 = (void (*)(char *, unint64_t, NSObject *, __n128))isa[2];
    v111 = (uint64_t)v218;
    v112 = v232;
    v110(v218, *(_QWORD *)(v216 + 48) + v109, v232, v103);
    v113 = *(_QWORD *)(v108 + 56) + v109;
    v114 = sub_10001A630(&qword_1008452C0);
    ((void (*)(uint64_t, unint64_t, NSObject *))v110)(v111 + *(int *)(v114 + 48), v113, v112);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v111, 0, 1, v114);
    v32 = (uint64_t)v215;
    v42 = v217;
LABEL_65:
    sub_10041A128(v111, v32);
    v119 = sub_10001A630(&qword_1008452C0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 48))(v32, 1, v119) == 1)
    {

      swift_release(v216);
      v52 = v204;
      v32 = v200;
      v42 = v199;
      a4 = v213;
      goto LABEL_85;
    }
    v120 = v32 + *(int *)(v119 + 48);
    v121 = (void (*)(char *, uint64_t, NSObject *))isa[4];
    v52 = v232;
    v121(v42, v32, v232);
    v121(v223, v120, v52);
    v122 = objc_msgSend((id)a4, "membershipByMemberIdentifier");
    v123 = sub_1000151B0(0, (unint64_t *)&qword_10083BF98, REMMembership_ptr);
    v124 = sub_100133108();
    v125 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v122, v52, v123, v124);

    if (*(_QWORD *)(v125 + 16) && (v126 = sub_1002C65F8((uint64_t)v42), (v127 & 1) != 0))
    {
      v52 = *(id *)(*(_QWORD *)(v125 + 56) + 8 * v126);
      v128 = -[NSObject groupIdentifier](v52, "groupIdentifier", swift_bridgeObjectRelease().n128_f64[0]);
      if (v128)
      {
        v129 = v128;
        v130 = v224;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v128);

        v97 = (uint64_t)v211;
        v131 = v130;
        v132 = v232;
        v121(v211, (uint64_t)v131, v232);
        v133 = isa;
        v134 = (void (*)(uint64_t, uint64_t, uint64_t, NSObject *))isa[7];
        v134(v97, 0, 1, v132);
        v135 = (unsigned int (*)(uint64_t, uint64_t, NSObject *))v133[6];
        if (v135(v97, 1, v132) != 1)
        {
          v136 = (uint64_t)v209;
          v121(v209, v97, v132);
          v137 = v228;
          if (v228[2] && (v138 = sub_1002C65F8(v136), (v139 & 1) != 0))
          {
            ((void (*)(uint64_t, unint64_t, NSObject *))isa[2])(v210, v137[7] + isa[9] * v138, v232);
            v140 = 0;
          }
          else
          {
            v140 = 1;
          }
          v142 = v210;
          v143 = v232;
          v134(v210, v140, 1, v232);
          v144 = v206;
          v145 = sub_10011D420(v142, v206);
          static Date.now.getter(v145);
          v146.super.isa = UUID._bridgeToObjectiveC()().super.isa;
          if (v135(v144, 1, v143) == 1)
          {
            v147 = 0;
          }
          else
          {
            v147 = UUID._bridgeToObjectiveC()().super.isa;
            ((void (*)(uint64_t, NSObject *))isa[1])(v144, v143);
          }
          v148 = v209;
          v149 = objc_allocWithZone((Class)REMMembership);
          v150 = v208;
          v151 = Date._bridgeToObjectiveC()().super.isa;
          v152 = objc_msgSend(v149, "initWithMemberIdentifier:groupIdentifier:isObsolete:modifiedOn:", v146.super.isa, v147, 0, v151);

          (*(void (**)(char *, uint64_t))(v214 + 8))(v150, v200);
          v153 = v152;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v153);
          v155 = *(_QWORD *)((v234 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v154 = *(_QWORD *)((v234 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v155 >= v154 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v154 > 1);
          v156 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v155, v153);
          specialized Array._endMutation()(v156);

          sub_10000882C(v210, (uint64_t *)&unk_100839C80);
          v157 = (void (*)(char *, NSObject *))isa[1];
          v97 = (uint64_t)v232;
          v157(v148, v232);
          v157(v223, v97);
          v42 = v217;
          v157(v217, v97);
          goto LABEL_82;
        }
      }
      else
      {
        v133 = isa;
        v97 = (uint64_t)v211;
        v132 = v232;
        ((void (*)(char *, uint64_t, uint64_t, NSObject *))isa[7])(v211, 1, 1, v232);
      }

      v141 = (void (*)(void))v133[1];
      ((void (*)(char *, NSObject *))v141)(v223, v132);
      v42 = v217;
      v141();
      sub_10000882C(v97, (uint64_t *)&unk_100839C80);
LABEL_82:
      v33 = v214;
      v46 = v219;
      a4 = (uint64_t)v226;
      v104 = (unint64_t)v231;
      if (v231)
        continue;
    }
    else
    {
      v105 = swift_bridgeObjectRelease();
      v106 = (void (*)(char *, NSObject *, __n128))isa[1];
      v97 = (uint64_t)v232;
      v106(v223, v232, v105);
      ((void (*)(char *, uint64_t))v106)(v42, v97);
      v46 = v219;
      v104 = (unint64_t)v231;
      if (v231)
        continue;
    }
    break;
  }
LABEL_47:
  v115 = v229 + 1;
  if (__OFADD__(v229, 1))
  {
    __break(1u);
    goto LABEL_96;
  }
  v111 = (uint64_t)v218;
  if (v115 >= v227)
    goto LABEL_64;
  v116 = *(_QWORD *)&v225[8 * v115];
  if (v116)
    goto LABEL_50;
  v117 = v229 + 2;
  ++v229;
  if (v115 + 1 >= v227)
    goto LABEL_64;
  v116 = *(_QWORD *)&v225[8 * v117];
  if (v116)
    goto LABEL_53;
  v229 = v115 + 1;
  if (v115 + 2 >= v227)
    goto LABEL_64;
  v116 = *(_QWORD *)&v225[8 * v115 + 16];
  if (v116)
  {
    v115 += 2;
    goto LABEL_50;
  }
  v117 = v115 + 3;
  v229 = v115 + 2;
  if (v115 + 3 >= v227)
  {
LABEL_64:
    v118 = sub_10001A630(&qword_1008452C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v111, 1, 1, v118);
    v231 = 0;
    goto LABEL_65;
  }
  v116 = *(_QWORD *)&v225[8 * v117];
  if (v116)
  {
LABEL_53:
    v115 = v117;
LABEL_50:
    v231 = (char *)((v116 - 1) & v116);
    v107 = __clz(__rbit64(v116)) + (v115 << 6);
    v229 = v115;
    goto LABEL_46;
  }
  while (1)
  {
    v115 = v117 + 1;
    if (__OFADD__(v117, 1))
      break;
    if (v115 >= v227)
    {
      v229 = (unint64_t)v221;
      goto LABEL_64;
    }
    v116 = *(_QWORD *)&v225[8 * v115];
    ++v117;
    if (v116)
      goto LABEL_50;
  }
  __break(1u);
}

void sub_100418AF8(void *a1)
{
  sub_1004150C4(a1);
}

uint64_t sub_100418B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100849850);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100849850);
  if (qword_100837670 != -1)
    swift_once(&qword_100837670, sub_1004A1934);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872130);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100418BA8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char *a9, double *a10, void *a11, char *a12, char *a13, void *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  id v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t inited;
  void *v58;
  double *v59;
  id v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  char *v91;
  void *v92;
  void *v93;
  __n128 v94;
  id v95;
  uint64_t v96;
  double *v97;
  uint64_t v98;
  NSURL *KeyPath;
  NSObject *v100;
  unsigned int v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  int v111;
  uint64_t v112;
  double *v113;
  uint64_t MetatypeMetadata;
  uint64_t v115;
  unint64_t v116;
  double *v117;
  double v118;
  void *v119;
  id v120;
  double *v121;
  void *v122;
  id v123;
  uint64_t v124;
  char *v125;
  char *v126;
  double v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  double *v132;
  _QWORD *v133;
  id v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  double *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(char *, uint64_t, double *, __n128);
  char *v157;
  id v158;
  char *v159;
  NSObject *v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  double *v164;
  char v165[32];
  double v166;
  id v167;
  char v168[8];
  _QWORD *v169;
  id v170;

  v15 = v14;
  v153 = a8;
  v161 = a7;
  v154 = a4;
  v148 = a3;
  v20 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v20);
  v152 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = (double *)type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v162 = (_QWORD *)*((_QWORD *)v164 - 1);
  __chkstk_darwin(v164);
  v163 = (char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v137 - v25;
  v27 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v27);
  v145 = (char *)&v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v146 = (char *)&v137 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v32 = __chkstk_darwin(v31).n128_u64[0];
  v34 = (char *)&v137 - v33;
  v170 = 0;
  v35 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v170, v32);
  v36 = v170;
  if (!v35)
  {
    v60 = v170;
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v61);
    return;
  }
  v37 = v35;
  v38 = type metadata accessor for REMCDTemplate();
  v160 = swift_dynamicCastClass(v37, v38);
  if (!v160)
  {
    v62 = v36;
    goto LABEL_14;
  }
  v141 = v26;
  v159 = a9;
  v39 = (char *)(a6 >> 1);
  v40 = v36;
  v142 = v29;
  v157 = v34;
  v140 = a10;
  if (v39 != (char *)a5)
  {
    v139 = (uint64_t)v39;
    swift_unknownObjectRetain(v148);
    v63 = swift_beginAccess(a10, &v170, 1, 0);
    v64 = v139;
    v65 = v141;
    v138 = v37;
    do
    {
      if (a5 >= v64)
      {
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v66 = v162[9];
      v143 = a5;
      v155 = v66;
      v156 = (uint64_t (*)(char *, uint64_t, double *, __n128))v162[2];
      v67 = v156(v65, v154 + v66 * a5, v164, v63);
      v68 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v67);
      sub_100417200(v68, a1);
      if (v15)
      {

        ((void (*)(char *, double *))v162[1])(v65, v164);
        swift_unknownObjectRelease(v148);
        return;
      }
      v70 = v69;

      v71 = objc_msgSend(v70, "storage");
      sub_100416078((uint64_t)v71, 0, v160, (uint64_t)a1);
      v73 = v72;
      v144 = v70;

      v75 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v74);
      v76 = objc_msgSend(v75, "uuid");

      v77 = (uint64_t)v149;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

      v78 = objc_msgSend(v73, "uuid");
      v79 = (uint64_t)v152;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v78);

      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v79, 0, 1, v151);
      v80 = sub_100311FF4(v79, v77);
      if (v159)
        v80 = REMMutableManualOrdering.append(topLevelElementID:)(v73);
      v158 = v73;
      v39 = v65;
      v81 = REMRemindersListDataView.ReminderLite.subtasks.getter(v80);
      if (v81)
      {
        v82 = *(_QWORD *)(v81 + 16);
        v34 = v157;
        v137 = v81;
        if (v82)
        {
          v83 = v81 + ((*((unsigned __int8 *)v162 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v162 + 80));
          v84 = v158;
          do
          {
            v85 = ((uint64_t (*)(char *, unint64_t, double *))v156)(v163, v83, v164);
            v86 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v85);
            sub_100417200(v86, a1);
            v88 = v87;

            v89 = objc_msgSend(v88, "storage", v137);
            v90 = v84;
            v91 = a1;
            sub_100416078((uint64_t)v89, (char *)v84, v160, (uint64_t)a1);
            v93 = v92;

            v39 = v159;
            if (v159)
            {
              REMMutableManualOrdering.append(secondaryLevelElementID:forTopLevelElementID:)(v93, v90);

              ((void (*)(char *, double *))v162[1])(v163, v164);
            }
            else
            {
              ((void (*)(char *, double *))v162[1])(v163, v164);

            }
            v83 += v155;
            --v82;
            a1 = v91;
            v15 = 0;
            v34 = v157;
            v84 = v158;
          }
          while (v82);
        }
        else
        {
          v84 = v158;
        }

        v94 = swift_bridgeObjectRelease();
        v65 = v141;
        ((void (*)(char *, double *, __n128))v162[1])(v141, v164, v94);
        v37 = v138;
        v29 = v142;
      }
      else
      {
        ((void (*)(char *, double *))v162[1])(v65, v164);

        v29 = v142;
        v34 = v157;
      }
      a5 = v143;
      if (__OFADD__(*(_QWORD *)v140, 1))
        goto LABEL_49;
      a5 = v143 + 1;
      ++*(_QWORD *)v140;
      v64 = v139;
    }
    while (a5 != v139);
    v40 = (id)swift_unknownObjectRelease(v148);
    v41 = v159;
    if (v159)
      goto LABEL_5;
    goto LABEL_34;
  }
  v41 = v159;
  if (!v159)
  {
LABEL_34:
    a5 = v147;
    goto LABEL_42;
  }
LABEL_5:
  if (!a11)
    goto LABEL_34;
  v167 = 0;
  v42 = a11;
  swift_retain();
  v43 = objc_msgSend(a1, "existingObjectWithID:error:", v42, &v167);
  v44 = v167;
  if (!v43)
  {
    v95 = v167;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v96);
    swift_release(v41);
    return;
  }
  v45 = v43;
  v138 = v37;
  v46 = type metadata accessor for REMCDManualSortHint();
  v47 = (void *)swift_dynamicCastClass(v45, v46);
  v48 = v44;
  if (v47)
  {
    v49 = objc_msgSend(v47, "account");
    if (v49)
    {
      v50 = v49;
      v51 = objc_msgSend(v49, "remObjectID");
      if (v51)
      {
        v52 = v51;
        v163 = a1;
        Date.init()(v51);
        REMMutableManualOrdering.modifiedDate.setter(v34);
        v53 = (void *)objc_opt_self(NSNotificationCenter);
        v54 = v52;
        v55 = objc_msgSend(v53, "defaultCenter");
        v56 = type metadata accessor for REMManualOrderingCDIngestor();
        inited = swift_initStackObject(v56, v165);
        v164 = (double *)v54;
        *(_QWORD *)(inited + 16) = v54;
        *(_QWORD *)(inited + 24) = v55;
        v162 = v55;
        v58 = (void *)REMMutableManualOrdering.immutableCopy()();
        sub_10040B878(v58, (char *)v47, v50);
        if (v15)
        {

          v59 = v164;
          swift_release(v159);

          return;
        }

        v97 = v164;
        swift_release(v159);

        a1 = v163;
      }
      else
      {
        swift_release(v159);

      }
    }
    else
    {
      swift_release(v159);

    }
  }
  else
  {

    v40 = (id)swift_release(v159);
  }
  v37 = v138;
  a5 = v147;
  v29 = v142;
LABEL_42:
  v98 = (uint64_t)v145;
  static Date.now.getter(v40);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v98, 0, 1, a5);
  KeyPath = (NSURL *)swift_getKeyPath(&unk_1006BB848);
  v100 = v160;
  sub_10015087C(KeyPath, v98);
  swift_release(KeyPath);
  sub_10000882C(v98, (uint64_t *)&unk_1008380D0);
  -[NSObject updateChangeCount](v100, "updateChangeCount");
  v167 = 0;
  v101 = objc_msgSend(a1, "save:", &v167);
  v102 = v167;
  if (v101)
  {
    v34 = a12;
    v39 = a13;
    v103 = qword_100837490;
    v104 = v167;
    if (v103 != -1)
LABEL_50:
      swift_once(&qword_100837490, sub_100418B18);
    v105 = type metadata accessor for Logger(0);
    sub_10001AAA8(v105, (uint64_t)qword_100849850);
    v106 = v142;
    (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v146, v39, a5);
    v107 = v161;
    swift_retain_n(v161);
    v108 = swift_bridgeObjectRetain_n(v34, 2);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.default.getter(v109);
    v111 = v110;
    if (os_log_type_enabled(v109, v110))
    {
      v160 = v109;
      v112 = swift_slowAlloc(62, -1);
      v113 = (double *)swift_slowAlloc(16, -1);
      v138 = v37;
      v164 = v113;
      v162 = (_QWORD *)swift_slowAlloc(32, -1);
      v169 = v162;
      *(_DWORD *)v112 = 136447490;
      v163 = a1;
      v167 = a14;
      MetatypeMetadata = swift_getMetatypeMetadata(a14);
      v115 = String.init<A>(describing:)(&v167, MetatypeMetadata);
      v167 = (id)sub_10001A820(v115, v116, (uint64_t *)&v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168);
      swift_bridgeObjectRelease();
      *(_WORD *)(v112 + 12) = 2048;
      v117 = v140;
      swift_beginAccess(v140, &v167, 0, 0);
      v166 = *v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      *(_WORD *)(v112 + 22) = 2048;
      v118 = *((double *)v34 + 2);
      swift_bridgeObjectRelease();
      v166 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      swift_bridgeObjectRelease();
      *(_WORD *)(v112 + 32) = 2114;
      LODWORD(v159) = v111;
      v119 = *(void **)(v107 + 16);
      v166 = *(double *)&v119;
      v120 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      v121 = v164;
      *v164 = *(double *)&v119;
      swift_release_n(v107);
      *(_WORD *)(v112 + 42) = 2114;
      v122 = *(void **)(v107 + 24);
      v166 = *(double *)&v122;
      v123 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      v121[1] = *(double *)&v122;
      v124 = swift_release_n(v107);
      *(_WORD *)(v112 + 52) = 2048;
      v125 = v157;
      Date.init()(v124);
      v126 = v146;
      v127 = Date.timeIntervalSince(_:)(v146);
      v128 = *(void (**)(char *, uint64_t))(v142 + 8);
      v129 = v147;
      v128(v125, v147);
      v166 = v127;
      a1 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
      v128(v126, v129);
      v130 = v160;
      _os_log_impl((void *)&_mh_execute_header, v160, (os_log_type_t)v159, "%{public}s: Copied %ld out of %ld top-level reminders to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v112, 0x3Eu);
      v131 = sub_10001A630((uint64_t *)&unk_100839E70);
      v132 = v164;
      swift_arrayDestroy(v164, 2, v131);
      swift_slowDealloc(v132, -1, -1);
      v133 = v162;
      swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v133, -1, -1);
      swift_slowDealloc(v112, -1, -1);

      goto LABEL_15;
    }
    swift_release_n(v107);
    v136 = swift_bridgeObjectRelease_n(v34, 2);
    (*(void (**)(char *, uint64_t, __n128))(v106 + 8))(v146, a5, v136);

LABEL_14:
LABEL_15:
    objc_msgSend(a1, "reset", v137);
    return;
  }
  v134 = v167;
  _convertNSErrorToError(_:)(v102);

  swift_willThrow(v135);
}

_QWORD *sub_1004199FC(uint64_t a1)
{
  return sub_100419A34(a1, "%{public}s: fetchRemindersInSourceList(in:) should be overridden by subclass");
}

_QWORD *sub_100419A18(uint64_t a1)
{
  return sub_100419A34(a1, "%{public}s: fetchSectionsInSourceList(in:) should be overridden by subclass");
}

_QWORD *sub_100419A34(uint64_t a1, const char *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *v2;
  if (qword_100837490 != -1)
    swift_once(&qword_100837490, sub_100418B18);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_100849850);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136446210;
    v16 = v4;
    MetatypeMetadata = swift_getMetatypeMetadata(v4);
    v12 = String.init<A>(describing:)(&v16, MetatypeMetadata);
    v16 = sub_10001A820(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100419BCC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t MetatypeMetadata;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *v0;
  if (qword_100837490 != -1)
    swift_once(&qword_100837490, sub_100418B18);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_100849850);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v13 = v1;
    MetatypeMetadata = swift_getMetatypeMetadata(v1);
    v9 = String.init<A>(describing:)(&v13, MetatypeMetadata);
    v13 = sub_10001A820(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: fetchSectionsInSourceList(in:) should be overridden by subclass", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return 0;
}

uint64_t sub_100419D60()
{
  id *v0;

  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersToTemplate()
{
  return objc_opt_self(_TtC7remindd42RDTemplateOperationCopyRemindersToTemplate);
}

id sub_100419DC4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  objc_class *ObjCClassFromMetadata;
  id v17;
  id v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  objc_class *v29;
  Class v30;
  char *v31;
  id v32;
  uint64_t v34;
  char *v35;
  void *v36;
  id v37;

  v36 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v35 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMCDTemplateSection();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initWithContext:", a3);
  v18 = -[objc_class newObjectID](ObjCClassFromMetadata, "newObjectID");
  v19 = v17;
  v37 = v18;
  v20 = objc_msgSend(v18, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  objc_msgSend(v19, "setIdentifier:", isa);

  v22 = v19;
  v23 = v36;
  v24 = v22;
  v25 = objc_msgSend(a2, "account");
  objc_msgSend(v24, "setAccount:", v25);

  objc_msgSend(v24, "setTemplate:", a2);
  v26 = v24;
  v27 = objc_msgSend(v23, "displayName");
  objc_msgSend(v26, "setDisplayName:", v27);

  v28 = v26;
  v29 = (objc_class *)objc_msgSend(v23, "creationDate");
  v30 = v29;
  if (v29)
  {
    v31 = v35;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v31, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5) == 1)
    {
      v30 = 0;
    }
    else
    {
      v30 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v10, 1, 1, v5);
  }
  objc_msgSend(v28, "setCreationDate:", v30);

  v32 = v28;
  objc_msgSend(v32, "setMinimumSupportedVersion:", objc_msgSend(v23, "minimumSupportedVersion"));

  objc_msgSend(v32, "updateChangeCount");
  return v37;
}

uint64_t sub_10041A128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_1008452C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10041A178(void *a1)
{
  sub_100418AF8(a1);
}

uint64_t sub_10041A18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100849978);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100849978);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *sub_10041A228()
{
  void **v0;

  return sub_10041AC6C(*v0);
}

id sub_10041A24C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  void *v6;

  v5 = a1;
  v6 = (void *)a4();

  return v6;
}

id sub_10041A2D4()
{
  void **v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;

  v1 = *v0;
  v8 = 0;
  v2 = objc_msgSend(v1, "attachmentRepresentationAndReturnError:", &v8);
  v3 = v8;
  if (v2)
  {
    v4 = v8;
  }
  else
  {
    v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }
  return v2;
}

uint64_t type metadata accessor for REMAttachmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd23REMAttachmentCDIngestor);
}

void sub_10041A3A8(char *a1)
{
  sub_1002B4048(*a1);
}

void sub_10041A3B4()
{
  char *v0;

  sub_1004F4F20(*v0);
}

void sub_10041A3BC()
{
  __asm { BR              X10 }
}

double sub_10041A3F8(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 6911093, 0xE300000000000000);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE300000000000000).n128_u64[0];
  return result;
}

void sub_10041A464(uint64_t a1)
{
  char *v1;

  sub_1002B2540(a1, *v1);
}

unint64_t sub_10041A46C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041ABDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041A498()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10041A4C8 + 4 * byte_1006BB875[*v0]))();
}

void sub_10041A4C8(_QWORD *a1@<X8>)
{
  *a1 = 6911093;
  a1[1] = 0xE300000000000000;
}

void sub_10041A4DC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x657A6953656C6966;
  a1[1] = v1;
}

void sub_10041A4F4(_QWORD *a1@<X8>)
{
  *a1 = 0x4C5255656C6966;
  a1[1] = 0xE700000000000000;
}

void sub_10041A510(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x80000001006F4C60;
}

void sub_10041A530(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0E28;
}

unint64_t sub_10041A540@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041ABDC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041A564()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10041A594 + 4 * byte_1006BB87A[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10041A594()
{
  return 6911093;
}

uint64_t sub_10041A5A4()
{
  return 0x657A6953656C6966;
}

uint64_t sub_10041A5B8()
{
  return 0x4C5255656C6966;
}

unint64_t sub_10041A5D0()
{
  return 0xD000000000000012;
}

uint64_t sub_10041A5F8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEF00;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10041A604(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0E50;
}

uint64_t sub_10041A614@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEF00;
  return sub_100149788(a1, v2, a2);
}

uint64_t type metadata accessor for REMFileAttachmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd27REMFileAttachmentCDIngestor);
}

uint64_t sub_10041A640(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10041A674 + 4 * byte_1006BB87F[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10041A674()
{
  return 6911093;
}

uint64_t sub_10041A684()
{
  return 0x657A6953656C6966;
}

uint64_t sub_10041A698()
{
  return 0x4C5255656C6966;
}

unint64_t sub_10041A6B0()
{
  return 0xD000000000000012;
}

uint64_t sub_10041A6CC()
{
  return 0x6874646977;
}

uint64_t sub_10041A6E0()
{
  return 0x746867696568;
}

void sub_10041A6F4(char *a1)
{
  sub_1002B3DBC(*a1);
}

void sub_10041A700()
{
  char *v0;

  sub_1002B260C(0, *v0);
}

void sub_10041A70C(uint64_t a1)
{
  char *v1;

  sub_1002B5DD4(a1, *v1);
}

void sub_10041A714(uint64_t a1)
{
  char *v1;

  sub_1002B260C(a1, *v1);
}

unint64_t sub_10041A71C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041AC24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041A748@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10041A640(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10041A770(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF4F0;
}

unint64_t sub_10041A780@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041AC24(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041A7A4()
{
  unsigned __int8 *v0;

  return sub_10041A640(*v0);
}

uint64_t sub_10041A7AC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEFD8;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10041A7B8(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0E78;
}

uint64_t sub_10041A7C8@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEFD8;
  return sub_100149788(a1, v2, a2);
}

uint64_t type metadata accessor for REMImageAttachmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd28REMImageAttachmentCDIngestor);
}

void sub_10041A7F4(char *a1)
{
  sub_1002B4318(*a1);
}

void sub_10041A800()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10041A84C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6911093, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

void sub_10041A8A8()
{
  __asm { BR              X10 }
}

double sub_10041A8E4(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 6911093, 0xE300000000000000);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE300000000000000).n128_u64[0];
  return result;
}

void sub_10041A92C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10041A974()
{
  uint64_t v1;

  String.hash(into:)(&v1, 6911093, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10041A9D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041AB94(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041A9FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10041AA2C + 4 * byte_1006BB892[*v0]))();
}

void sub_10041AA2C(_QWORD *a1@<X8>)
{
  *a1 = 6911093;
  a1[1] = 0xE300000000000000;
}

void sub_10041AA40(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

void sub_10041AA54(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x617461646174656DLL;
  a1[1] = v1;
}

void sub_10041AA6C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0EA0;
}

unint64_t sub_10041AA7C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10041AB94(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041AAA0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10041AAD0 + 4 * byte_1006BB896[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

uint64_t sub_10041AAD0()
{
  return 6911093;
}

uint64_t sub_10041AAE0()
{
  return 7107189;
}

uint64_t sub_10041AAF0()
{
  return 0x617461646174656DLL;
}

uint64_t sub_10041AB04@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEE78;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10041AB10(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0EC8;
}

uint64_t sub_10041AB20@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEE78;
  return sub_100149788(a1, v2, a2);
}

uint64_t type metadata accessor for REMURLAttachmentCDIngestor()
{
  return objc_opt_self(_TtC7remindd26REMURLAttachmentCDIngestor);
}

_UNKNOWN **sub_10041AB4C()
{
  return &off_1007F35E0;
}

_UNKNOWN **sub_10041AB58()
{
  return &off_1007F35B0;
}

_UNKNOWN **sub_10041AB64()
{
  return &off_1007F3640;
}

_UNKNOWN **sub_10041AB70()
{
  return &off_1007F3610;
}

_UNKNOWN **sub_10041AB7C()
{
  return &off_1007F36A0;
}

_UNKNOWN **sub_10041AB88()
{
  return &off_1007F3670;
}

unint64_t sub_10041AB94(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE7E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10041ABDC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE860, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_10041AC24(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEA70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

char *sub_10041AC6C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  NSURL *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSURL *v31;
  void *v32;
  void *v33;
  void *v34;
  Class isa;
  NSObject *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  NSObject *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  NSObject *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t ObjCClassFromMetadata;
  NSString v69;
  uint64_t v70;
  void *v72;
  NSData v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  char *v80;
  id v81;
  NSObject *v82;
  uint64_t v83;

  v2 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v2);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v78 - v11;
  v82 = 0;
  v13 = objc_msgSend(a1, "remObjectIDWithError:", &v82, v10);
  v14 = v82;
  if (!v13)
  {
    v36 = v82;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v37);
    return v8;
  }
  v80 = v12;
  v81 = v13;
  v15 = v82;
  v16 = objc_msgSend(a1, "account");
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, "remObjectID");

    v79 = v18;
    if (v18)
    {
      v19 = objc_msgSend(a1, "reminder");
      if (v19
        && (v20 = v19, v21 = objc_msgSend(v19, "remObjectID"),
                       v20,
                       v21))
      {
        v22 = objc_msgSend(a1, "url");
        if (v22)
        {
          v23 = v22;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

          v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
          v24(v4, v8, v5);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
          {
            v78 = v21;
            v24(v80, v4, v5);
            v25 = objc_msgSend(a1, "metadata");
            if (v25)
            {
              v27 = v25;
              v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
              v30 = v29;

              URL._bridgeToObjectiveC()(v31);
              v33 = v32;
              v34 = v81;
              if (v30 >> 60 == 15)
              {
                isa = 0;
              }
              else
              {
                v73.super.isa = Data._bridgeToObjectiveC()().super.isa;
                v74 = v28;
                isa = v73.super.isa;
                sub_1000A71B4(v74, v30);
              }
            }
            else
            {
              URL._bridgeToObjectiveC()(v26);
              v33 = v72;
              isa = 0;
              v34 = v81;
            }
            v75 = objc_allocWithZone((Class)REMURLAttachment);
            v77 = v78;
            v76 = v79;
            v8 = (char *)objc_msgSend(v75, "initWithObjectID:accountID:reminderID:url:metadata:", v34, v79, v78, v33, isa);

            (*(void (**)(char *, uint64_t))(v6 + 8))(v80, v5);
            return v8;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
        }

        sub_10015CFD4((uint64_t)v4);
      }
      else
      {

      }
    }
  }
  v38 = objc_msgSend(a1, "account");

  if (v38)
  {
    v39 = v81;
  }
  else
  {
    v39 = v81;
    if (qword_100837498 != -1)
      swift_once(&qword_100837498, sub_10041A18C);
    v40 = type metadata accessor for Logger(0);
    sub_10001AAA8(v40, (uint64_t)qword_100849978);
    v41 = v39;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v44 = 138412290;
      v8 = (char *)(v44 + 4);
      v82 = v41;
      v46 = v41;
      v39 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *v45 = v39;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMURLAttachmentCDIngestor: cdURLAttachment.account is nil {cdURLAttachment.remObjectID: %@}", v44, 0xCu);
      v47 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v45, 1, v47);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {

      v42 = v41;
    }

  }
  v48 = objc_msgSend(a1, "reminder");

  if (!v48)
  {
    swift_bridgeObjectRelease();
    if (qword_100837498 != -1)
      swift_once(&qword_100837498, sub_10041A18C);
    v49 = type metadata accessor for Logger(0);
    sub_10001AAA8(v49, (uint64_t)qword_100849978);
    v50 = v39;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v53 = 138412290;
      v82 = v50;
      v8 = (char *)&v83;
      v55 = v50;
      v39 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *v54 = v39;

      _os_log_impl((void *)&_mh_execute_header, v51, v52, "REMURLAttachmentCDIngestor: cdURLAttachment.reminder is nil {cdURLAttachment.remObjectID: %@}", v53, 0xCu);
      v56 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v54, 1, v56);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {

      v51 = v50;
    }

  }
  v57 = objc_msgSend(a1, "uti");
  if (v57)
  {
    v58 = v57;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100837498 != -1)
      swift_once(&qword_100837498, sub_10041A18C);
    v59 = type metadata accessor for Logger(0);
    sub_10001AAA8(v59, (uint64_t)qword_100849978);
    v60 = v39;
    v58 = Logger.logObject.getter(v60);
    v61 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v62 = 138412290;
      v82 = v60;
      v8 = (char *)&v83;
      v64 = v60;
      v39 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *v63 = v39;

      _os_log_impl((void *)&_mh_execute_header, v58, v61, "REMURLAttachmentCDIngestor: cdURLAttachment.uti is nil {cdURLAttachment.remObjectID: %@}", v62, 0xCu);
      v65 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v63, 1, v65);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {

      v58 = v60;
    }
  }

  v66 = (void *)objc_opt_self(REMError);
  v67 = sub_1000151B0(0, &qword_100845598, off_1007D6728);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v67);
  v69 = String._bridgeToObjectiveC()();
  objc_msgSend(v66, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v69, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v70);
  return v8;
}

double sub_10041B530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[6];
  uint64_t v9;

  v9 = type metadata accessor for URL(0);
  v8[5] = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v8[4] = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v8[2] = *(_QWORD *)(v6 - 8);
  v8[3] = v6;
  *(_QWORD *)&result = __chkstk_darwin(v6).n128_u64[0];
  if (*(_QWORD *)(a3 + 16))
  {
    v8[1] = v3;
    swift_bridgeObjectRetain(a3);
    __asm { BR              X9 }
  }
  return result;
}

void sub_10041B7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[19];

  v13[18] = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for URL(0);
  v13[16] = *(_QWORD *)(v6 - 8);
  v13[17] = v6;
  __chkstk_darwin(v6);
  v13[11] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v13[12] = (char *)v13 - v9;
  v10 = type metadata accessor for UUID(0);
  v13[14] = *(_QWORD *)(v10 - 8);
  v13[15] = v10;
  __chkstk_darwin(v10);
  v13[13] = (char *)v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13[9] = v3;
    swift_bridgeObjectRetain(a3);
    v13[10] = v12;
    __asm { BR              X9 }
  }
}

void sub_10041BEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];
  uint64_t v14;

  v14 = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for URL(0);
  v12[14] = *(_QWORD *)(v6 - 8);
  v12[15] = v6;
  __chkstk_darwin(v6);
  v12[9] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12[10] = (char *)v12 - v9;
  v10 = type metadata accessor for UUID(0);
  v12[13] = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12[12] = (char *)v12 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16))
  {
    v12[7] = v3;
    swift_bridgeObjectRetain(a3);
    __asm { BR              X9 }
  }
}

void sub_10041C52C(void *a1, void *a2, char a3, uint64_t a4)
{
  sub_10041C598(a1, a2, a3, a4, (uint64_t (*)(_QWORD, id, uint64_t))sub_1003FF5A8, (uint64_t (*)(uint64_t, id, uint64_t))sub_1003FF5D4);
}

void sub_10041C550(void *a1, void *a2, char a3, uint64_t a4)
{
  sub_10041C598(a1, a2, a3, a4, (uint64_t (*)(_QWORD, id, uint64_t))sub_1003FF658, (uint64_t (*)(uint64_t, id, uint64_t))sub_1003FF684);
}

void sub_10041C574(void *a1, void *a2, char a3, uint64_t a4)
{
  sub_10041C598(a1, a2, a3, a4, (uint64_t (*)(_QWORD, id, uint64_t))sub_1003FF600, (uint64_t (*)(uint64_t, id, uint64_t))sub_1003FF62C);
}

void sub_10041C598(void *a1, void *a2, char a3, uint64_t a4, uint64_t (*a5)(_QWORD, id, uint64_t), uint64_t (*a6)(uint64_t, id, uint64_t))
{
  uint64_t v6;
  id v10;
  void *v11;
  id v13;

  if ((a3 & 1) != 0)
  {
    v13 = objc_msgSend(a1, "reminderID");
    v11 = (void *)a6(1, v13, a4);

    if (v6)
      return;
    objc_msgSend(a2, "setReminder:", v11);
  }
  else
  {
    v10 = objc_msgSend(a1, "accountID");
    v11 = (void *)a5(0, v10, a4);

    if (v6)
      return;
    objc_msgSend(a2, "setAccount:", v11);
  }

}

uint64_t sub_10041C678(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  Class isa;
  void (*v36)(char *, uint64_t);
  id v37;
  Class v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  char **v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD *v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t ObjCClassFromMetadata;
  NSString v75;
  uint64_t v76;
  uint64_t result;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  NSString v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  NSURL *v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  id v95;
  void (*v96)(char *, uint64_t, uint64_t);
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  char **v104;
  char *v105;
  id v106;
  NSObject *v107;
  uint64_t v108;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char **)((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v11 = (char *)&v95 - v10;
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&v95 - v14;
  v107 = 0;
  v16 = objc_msgSend(a1, "remObjectIDWithError:", &v107, v13);
  v17 = v107;
  v106 = v16;
  if (!v16)
  {
    v45 = v107;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v46);
    return (uint64_t)v8;
  }
  v102 = (uint64_t)v11;
  v104 = v8;
  v105 = v15;
  v18 = v107;
  v19 = objc_msgSend(a1, "account");
  if (!v19
    || (v20 = v19,
        v8 = &selRef_isConcealed,
        v21 = objc_msgSend(v19, "remObjectID"),
        v20,
        (v103 = v21) == 0))
  {
LABEL_14:
    v47 = objc_msgSend(a1, "account");

    if (v47)
    {
      v48 = v106;
    }
    else
    {
      v48 = v106;
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v49 = type metadata accessor for Logger(0);
      sub_10001AAA8(v49, (uint64_t)qword_100849978);
      v8 = (char **)v48;
      v50 = Logger.logObject.getter(v8);
      v51 = static os_log_type_t.error.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v52 = 138412290;
        v107 = v8;
        v8 = v8;
        v48 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
        *v53 = v48;

        _os_log_impl((void *)&_mh_execute_header, v50, v51, "REMImageAttachmentCDIngestor: cdImageAttachment.account is nil {cdImageAttachment.remObjectID: %@}", v52, 0xCu);
        v54 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v53, 1, v54);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {

        v50 = v8;
      }

    }
    v55 = objc_msgSend(a1, "reminder");

    if (v55)
    {
      v56 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v57 = type metadata accessor for Logger(0);
      sub_10001AAA8(v57, (uint64_t)qword_100849978);
      v8 = (char **)v48;
      v58 = Logger.logObject.getter(v8);
      v59 = static os_log_type_t.error.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v60 = 138412290;
        v107 = v8;
        v8 = v8;
        v48 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
        *v61 = v48;

        _os_log_impl((void *)&_mh_execute_header, v58, v59, "REMImageAttachmentCDIngestor: cdImageAttachment.reminder is nil {cdImageAttachment.remObjectID: %@}", v60, 0xCu);
        v62 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v61, 1, v62);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {

        v58 = v8;
      }
      v56 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;

    }
    v63 = objc_msgSend(a1, v56[505]);
    if (v63)
    {
      v64 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v65 = type metadata accessor for Logger(0);
      sub_10001AAA8(v65, (uint64_t)qword_100849978);
      v66 = v48;
      v64 = Logger.logObject.getter(v66);
      v67 = static os_log_type_t.error.getter(v64);
      v8 = (char **)v67;
      if (os_log_type_enabled(v64, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v68 = 138412290;
        v107 = v66;
        v70 = v66;
        v48 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
        *v69 = v48;

        _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v8, "REMImageAttachmentCDIngestor: cdImageAttachment.uti is nil {cdImageAttachment.remObjectID: %@}", v68, 0xCu);
        v71 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v69, 1, v71);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);
      }
      else
      {

        v64 = v66;
      }
    }

    v72 = (void *)objc_opt_self(REMError);
    v73 = sub_1000151B0(0, (unint64_t *)&unk_1008455A0, off_1007D66D8);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v73);
    v75 = String._bridgeToObjectiveC()();
    objc_msgSend(v72, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v75, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v76);
    return (uint64_t)v8;
  }
  v22 = objc_msgSend(a1, "reminder");
  if (!v22
    || (v23 = v22, v24 = objc_msgSend(v22, "remObjectID"), v23, !v24))
  {
    v24 = v103;
LABEL_13:

    goto LABEL_14;
  }
  v25 = objc_msgSend(a1, "uti");
  if (!v25)
  {

    goto LABEL_13;
  }
  v26 = v25;
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v99 = v27;

  v28 = type metadata accessor for URL(0);
  v100 = *(_QWORD *)(v28 - 8);
  v101 = v28;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 56);
  v29(v105, 1, 1);
  v30 = objc_msgSend(a1, "storeControllerManagedObjectContext");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "storeController");

    v97 = v32;
    if (v32)
    {
      v33 = objc_msgSend(a1, "fileName");
      if (v33)
      {
        v95 = v33;
        v96 = v29;
        v34 = objc_msgSend(v106, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

        isa = UUID._bridgeToObjectiveC()().super.isa;
        v36 = *(void (**)(char *, uint64_t))(v3 + 8);
        v36(v5, v2);
        v37 = objc_msgSend(v103, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

        v38 = UUID._bridgeToObjectiveC()().super.isa;
        v36(v5, v2);
        v39 = objc_msgSend(a1, "sha512Sum");
        v40 = v97;
        v41 = v95;
        v42 = objc_msgSend(v97, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v38, v95, v39);

        v43 = v102;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v42);

        v44 = (uint64_t)v105;
        sub_10015CFD4((uint64_t)v105);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v96)(v43, 0, 1, v101);
        sub_10031E6C0(v43, v44);
      }
      else
      {

      }
    }
  }
  v78 = (unint64_t)objc_msgSend(a1, "fileSize");
  if ((v78 & 0x8000000000000000) == 0)
  {
    v79 = v78;
    v80 = (uint64_t)v104;
    sub_10015CF8C((uint64_t)v105, (uint64_t)v104);
    v81 = objc_msgSend(a1, "width");
    v102 = v81 & ~(v81 >> 31);
    v82 = objc_msgSend(a1, "height");
    v83 = v82 & ~(v82 >> 31);
    v84 = String._bridgeToObjectiveC()();
    v85 = swift_bridgeObjectRelease();
    v86 = v100;
    v87 = v101;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v100 + 48))(v80, 1, v101, v85) == 1)
    {
      v89 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v88);
      v89 = v90;
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v80, v87);
    }
    v91 = objc_allocWithZone((Class)REMImageAttachment);
    v94 = v83;
    v92 = v106;
    v93 = v103;
    v8 = (char **)objc_msgSend(v91, "initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:width:height:", v106, v103, v24, v84, v79, v89, 0, v102, v94);

    sub_10015CFD4((uint64_t)v105);
    return (uint64_t)v8;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_10041D124(id ObjCClassFromMetadata)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void (*v34)(char *, uint64_t);
  id v35;
  Class v36;
  id v37;
  void *v38;
  Class v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  _QWORD *v52;
  NSObject *v53;
  uint64_t v54;
  id v55;
  char **v56;
  uint64_t v57;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  _QWORD *v71;
  NSObject *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  NSString v76;
  uint64_t v77;
  uint64_t result;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  __n128 v84;
  uint64_t v85;
  NSURL *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  Class isa;
  id v93;
  void (*v94)(char *, uint64_t, uint64_t, uint64_t);
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  id v100;
  char *v101;
  char *v102;
  id v103;
  NSObject *v104;
  uint64_t v105;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&isa - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v6);
  v8 = (char *)&isa - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&isa - v10;
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&isa - v14;
  v104 = 0;
  v16 = objc_msgSend(ObjCClassFromMetadata, "remObjectIDWithError:", &v104, v13);
  v17 = v104;
  v103 = v16;
  if (!v16)
  {
    v43 = v104;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v44);
    return (uint64_t)ObjCClassFromMetadata;
  }
  v99 = v11;
  v101 = v8;
  v102 = v15;
  v18 = v104;
  v19 = objc_msgSend(ObjCClassFromMetadata, "account");
  if (!v19
    || (v20 = v19,
        v21 = objc_msgSend(v19, "remObjectID"),
        v20,
        (v100 = v21) == 0))
  {
LABEL_14:
    v45 = objc_msgSend(ObjCClassFromMetadata, "account");

    if (v45)
    {
      v46 = v103;
    }
    else
    {
      v46 = v103;
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v47 = type metadata accessor for Logger(0);
      sub_10001AAA8(v47, (uint64_t)qword_100849978);
      v48 = v46;
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.error.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v51 = 138412290;
        v104 = v48;
        v53 = v48;
        v46 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        *v52 = v46;

        _os_log_impl((void *)&_mh_execute_header, v49, v50, "REMFileAttachmentCDIngestor: cdFileAttachment.account is nil {cdFileAttachment.remObjectID: %@}", v51, 0xCu);
        v54 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v52, 1, v54);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }
      else
      {

        v49 = v48;
      }

    }
    v55 = objc_msgSend(ObjCClassFromMetadata, "reminder");

    if (v55)
    {
      v56 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v57 = type metadata accessor for Logger(0);
      sub_10001AAA8(v57, (uint64_t)qword_100849978);
      v58 = v46;
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.error.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(12, -1);
        v62 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v61 = 138412290;
        v104 = v58;
        v63 = v58;
        v46 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        *v62 = v46;

        _os_log_impl((void *)&_mh_execute_header, v59, v60, "REMFileAttachmentCDIngestor: cdFileAttachment.reminder is nil {cdFileAttachment.remObjectID: %@}", v61, 0xCu);
        v64 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v62, 1, v64);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v61, -1, -1);
      }
      else
      {

        v59 = v58;
      }
      v56 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;

    }
    v65 = objc_msgSend(ObjCClassFromMetadata, v56[505]);
    if (v65)
    {
      v66 = v65;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100837498 != -1)
        swift_once(&qword_100837498, sub_10041A18C);
      v67 = type metadata accessor for Logger(0);
      sub_10001AAA8(v67, (uint64_t)qword_100849978);
      v68 = v46;
      v66 = Logger.logObject.getter(v68);
      v69 = static os_log_type_t.error.getter(v66);
      if (os_log_type_enabled(v66, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v70 = 138412290;
        v104 = v68;
        v72 = v68;
        v46 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        *v71 = v46;

        _os_log_impl((void *)&_mh_execute_header, v66, v69, "REMFileAttachmentCDIngestor: cdFileAttachment.uti is nil {cdFileAttachment.remObjectID: %@}", v70, 0xCu);
        v73 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v71, 1, v73);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {

        v66 = v68;
      }
    }

    v74 = (void *)objc_opt_self(REMError);
    v75 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
    ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v75);
    v76 = String._bridgeToObjectiveC()();
    objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v76, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v77);
    return (uint64_t)ObjCClassFromMetadata;
  }
  v22 = objc_msgSend(ObjCClassFromMetadata, "reminder");
  if (!v22
    || (v23 = v22, v24 = objc_msgSend(v22, "remObjectID"), v23, !v24))
  {
    v24 = v100;
LABEL_13:

    goto LABEL_14;
  }
  v25 = objc_msgSend(ObjCClassFromMetadata, "uti");
  if (!v25)
  {

    goto LABEL_13;
  }
  v26 = v25;
  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v97 = v27;

  v28 = type metadata accessor for URL(0);
  v98 = *(_QWORD *)(v28 - 8);
  v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
  v94(v102, 1, 1, v28);
  v29 = objc_msgSend(ObjCClassFromMetadata, "storeControllerManagedObjectContext");
  if (v29)
  {
    v30 = v29;
    v31 = objc_msgSend(v29, "storeController");

    v95 = v31;
    if (v31)
    {
      v32 = objc_msgSend(ObjCClassFromMetadata, "fileName");
      if (v32)
      {
        v93 = v32;
        v33 = objc_msgSend(v103, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

        isa = UUID._bridgeToObjectiveC()().super.isa;
        v34 = *(void (**)(char *, uint64_t))(v3 + 8);
        v34(v5, v2);
        v35 = objc_msgSend(v100, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

        v36 = UUID._bridgeToObjectiveC()().super.isa;
        v34(v5, v2);
        v37 = objc_msgSend(ObjCClassFromMetadata, "sha512Sum");
        v39 = isa;
        v38 = v93;
        v40 = objc_msgSend(v95, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v36, v93, v37);

        v41 = (uint64_t)v99;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

        v42 = (uint64_t)v102;
        sub_10015CFD4((uint64_t)v102);
        v94((char *)v41, 0, 1, v28);
        sub_10031E6C0(v41, v42);
      }
      else
      {

      }
    }
  }
  v79 = (unint64_t)objc_msgSend(ObjCClassFromMetadata, "fileSize");
  if ((v79 & 0x8000000000000000) == 0)
  {
    v80 = v79;
    v81 = (uint64_t)v101;
    v82 = (uint64_t)v102;
    sub_10015CF8C((uint64_t)v102, (uint64_t)v101);
    v83 = String._bridgeToObjectiveC()();
    v84 = swift_bridgeObjectRelease();
    v85 = v98;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v98 + 48))(v81, 1, v28, v84) == 1)
    {
      v87 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v86);
      v87 = v88;
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v81, v28);
    }
    v89 = objc_allocWithZone((Class)REMFileAttachment);
    v90 = v103;
    v91 = v100;
    ObjCClassFromMetadata = objc_msgSend(v89, "initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:", v103, v100, v24, v83, v80, v87, 0);

    sub_10015CFD4(v82);
    return (uint64_t)ObjCClassFromMetadata;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for REMFileAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMFileAttachmentCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMFileAttachmentCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10041DC04 + 4 * byte_1006BB89F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10041DC38 + 4 * byte_1006BB89A[v4]))();
}

uint64_t sub_10041DC38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DC40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10041DC48);
  return result;
}

uint64_t sub_10041DC54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10041DC5CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10041DC60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DC68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMFileAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMFileAttachmentCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMImageAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMImageAttachmentCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMImageAttachmentCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10041DCE0 + 4 * byte_1006BB8A9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10041DD14 + 4 * byte_1006BB8A4[v4]))();
}

uint64_t sub_10041DD14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DD1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10041DD24);
  return result;
}

uint64_t sub_10041DD30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10041DD38);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10041DD3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DD44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMImageAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMImageAttachmentCDIngestor.ValueKey;
}

uint64_t _s7remindd27REMFileAttachmentCDIngestorC15RelationshipKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10041DDAC + 4 * byte_1006BB8B3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10041DDE0 + 4 * byte_1006BB8AE[v4]))();
}

uint64_t sub_10041DDE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DDE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10041DDF0);
  return result;
}

uint64_t sub_10041DDFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10041DE04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10041DE08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DE10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMURLAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMURLAttachmentCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMURLAttachmentCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10041DE78 + 4 * byte_1006BB8BD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10041DEAC + 4 * byte_1006BB8B8[v4]))();
}

uint64_t sub_10041DEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10041DEBCLL);
  return result;
}

uint64_t sub_10041DEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10041DED0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10041DED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041DEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMURLAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMURLAttachmentCDIngestor.ValueKey;
}

uint64_t sub_10041DEF8()
{
  return sub_1000BAEEC(&qword_100849FF0, &qword_100849FF8);
}

unint64_t sub_10041DF20()
{
  unint64_t result;

  result = qword_10084A000;
  if (!qword_10084A000)
  {
    result = swift_getWitnessTable(&unk_1006BBB28, &type metadata for REMURLAttachmentCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084A000);
  }
  return result;
}

uint64_t sub_10041DF64()
{
  return sub_1000BAEEC(&qword_10084A008, &qword_10084A010);
}

unint64_t sub_10041DF8C()
{
  unint64_t result;

  result = qword_10084A018;
  if (!qword_10084A018)
  {
    result = swift_getWitnessTable(&unk_1006BBC00, &type metadata for REMURLAttachmentCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084A018);
  }
  return result;
}

uint64_t sub_10041DFD0()
{
  return sub_1000BAEEC(&qword_10084A020, &qword_10084A028);
}

unint64_t sub_10041DFF8()
{
  unint64_t result;

  result = qword_10084A030;
  if (!qword_10084A030)
  {
    result = swift_getWitnessTable(&unk_1006BBCD8, &type metadata for REMImageAttachmentCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084A030);
  }
  return result;
}

uint64_t sub_10041E03C()
{
  return sub_1000BAEEC(&qword_10084A038, &qword_10084A040);
}

unint64_t sub_10041E064()
{
  unint64_t result;

  result = qword_10084A048;
  if (!qword_10084A048)
  {
    result = swift_getWitnessTable(&unk_1006BBDB0, &type metadata for REMImageAttachmentCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084A048);
  }
  return result;
}

uint64_t sub_10041E0A8()
{
  return sub_1000BAEEC(&qword_10084A050, &qword_10084A058);
}

unint64_t sub_10041E0D0()
{
  unint64_t result;

  result = qword_10084A060;
  if (!qword_10084A060)
  {
    result = swift_getWitnessTable(&unk_1006BBE88, &type metadata for REMFileAttachmentCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084A060);
  }
  return result;
}

uint64_t sub_10041E114()
{
  return sub_1000BAEEC(&qword_10084A068, &qword_10084A070);
}

unint64_t sub_10041E13C()
{
  unint64_t result;

  result = qword_10084A078;
  if (!qword_10084A078)
  {
    result = swift_getWitnessTable(&unk_1006BBF60, &type metadata for REMFileAttachmentCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084A078);
  }
  return result;
}

uint64_t sub_10041E18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A080);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A080);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10041E22C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t aBlock[5];
  uint64_t v33;
  char v34[24];
  _BYTE v35[48];
  char v36[40];
  unsigned int v37;
  unsigned __int16 v38;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong)
    return;
  v4 = (void *)Strong;
  if (qword_1008374A0 != -1)
    swift_once(&qword_1008374A0, sub_10041E18C);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10084A080);
  v6 = v4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136446210;
    sub_1000184A8((uint64_t)&v6[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity], (uint64_t)v35);
    v11 = sub_10001A630((uint64_t *)&unk_10083A270);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1006A3C40;
    sub_1000184A8((uint64_t)v35, (uint64_t)v36);
    v13 = v37 | ((unint64_t)v38 << 32);
    v14 = v38 >> 14;
    if (v14 >= 2)
    {
      if (v14 == 2)
      {
        v38 = WORD2(v13) & 0x3FFF;
        if ((v13 & 0x10000000000) != 0)
        {
          v17 = 0x80000001006F8F90;
          v16 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v38 = WORD2(v13) & 0x3FFF;
    }
    v16 = 0;
    v17 = 0xE000000000000000;
LABEL_11:
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v18 = sub_1000184F8();
    *(_QWORD *)(v12 + 64) = v18;
    *(_QWORD *)(v12 + 32) = v16;
    *(_QWORD *)(v12 + 40) = v17;
    sub_1000181B8();
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v18;
    *(_QWORD *)(v12 + 72) = v19;
    *(_QWORD *)(v12 + 80) = v20;
    v21 = String.init(format:_:)(1076183077, 0xE400000000000000, v12);
    v23 = v22;
    v31 = sub_10001A820(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, aBlock);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Connection was interrupted unexpectedly {clientIdentity: %{public}s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    goto LABEL_12;
  }

LABEL_12:
  v24 = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC7remindd18RDClientConnection_delegate], v15);
  if (v24)
  {
    v25 = v24;
    v26 = *(NSObject **)(v24 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue);
    v27 = swift_allocObject(&unk_1007F3CA8, 32, 7);
    *(_QWORD *)(v27 + 16) = v6;
    *(_QWORD *)(v27 + 24) = v25;
    v28 = swift_allocObject(&unk_1007F3CD0, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_100421428;
    *(_QWORD *)(v28 + 24) = v27;
    aBlock[4] = (uint64_t)sub_1000A66B8;
    v33 = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000098C4;
    aBlock[3] = (uint64_t)&unk_1007F3CE8;
    v29 = _Block_copy(aBlock);
    v30 = v33;
    v6 = v6;
    swift_unknownObjectRetain(v25);
    swift_retain(v28);
    swift_release(v30);
    dispatch_sync(v26, v29);
    _Block_release(v29);
    LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v28, "", 98, 145, 28, 1);

    swift_unknownObjectRelease(v25);
    swift_release(v27);
    swift_release(v28);
    if ((v26 & 1) == 0)
      return;
    __break(1u);
  }

}

id sub_10041E5F4()
{
  void *v0;
  objc_super v2;

  sub_1000082FC();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDClientConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10041E628()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[48];
  _BYTE v23[40];
  unsigned int v24;
  unsigned __int16 v25;

  if (qword_1008374A0 != -1)
    swift_once(&qword_1008374A0, sub_10041E18C);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084A080);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21 = v6;
    *(_DWORD *)v5 = 136446210;
    sub_1000184A8((uint64_t)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity], (uint64_t)v22);
    v7 = sub_10001A630((uint64_t *)&unk_10083A270);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_1006A3C40;
    sub_1000184A8((uint64_t)v22, (uint64_t)v23);
    v9 = v24 | ((unint64_t)v25 << 32);
    v10 = v25 >> 14;
    if (v10 >= 2)
    {
      if (v10 == 2)
      {
        v25 = WORD2(v9) & 0x3FFF;
        if ((v9 & 0x10000000000) != 0)
        {
          v12 = 0x80000001006F8F90;
          v11 = 0xD000000000000011;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v25 = WORD2(v9) & 0x3FFF;
    }
    v11 = 0;
    v12 = 0xE000000000000000;
LABEL_10:
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v13 = sub_1000184F8();
    *(_QWORD *)(v8 + 64) = v13;
    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v12;
    sub_1000181B8();
    *(_QWORD *)(v8 + 96) = &type metadata for String;
    *(_QWORD *)(v8 + 104) = v13;
    *(_QWORD *)(v8 + 72) = v14;
    *(_QWORD *)(v8 + 80) = v15;
    v16 = String.init(format:_:)(1076183077, 0xE400000000000000, v8);
    v18 = v17;
    v20 = sub_10001A820(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDClientConnection: resuming XPC connection {clientIdentity: %{public}s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    return objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection], "resume");
  }

  return objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection], "resume");
}

void sub_10041E8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE v29[48];
  _QWORD v30[5];
  unsigned int v31;
  unsigned __int16 v32;

  v1 = OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction))
    return;
  v2 = v0;
  v3 = 0xD000000000000011;
  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = 0xD00000000000001CLL;
  v28 = 0x8000000100703940;
  sub_1000184A8(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v29);
  v4 = sub_10001A630((uint64_t *)&unk_10083A270);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  sub_1000184A8((uint64_t)v29, (uint64_t)v30);
  v6 = v31 | ((unint64_t)v32 << 32);
  v7 = v32 >> 14;
  if (v7 >= 2)
  {
    if (v7 == 2)
    {
      v32 = WORD2(v6) & 0x3FFF;
      if ((v6 & 0x10000000000) != 0)
      {
        v8 = 0x80000001006F8F90;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v32 = WORD2(v6) & 0x3FFF;
  }
  v3 = 0;
  v8 = 0xE000000000000000;
LABEL_7:
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v9 = sub_1000184F8();
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v8;
  sub_1000181B8();
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v9;
  *(_QWORD *)(v5 + 72) = v10;
  *(_QWORD *)(v5 + 80) = v11;
  v12._countAndFlagsBits = String.init(format:_:)(1076183077, 0xE400000000000000, v5);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 93;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v16 = v27;
  v15 = v28;
  if (qword_1008374A0 != -1)
    swift_once(&qword_1008374A0, sub_10041E18C);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084A080);
  v18 = swift_bridgeObjectRetain_n(v28, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v27 = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain(v15);
    v26 = sub_10001A820(v16, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "os_transaction INIT {name: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v28, 2);
  }
  v23 = String.utf8CString.getter(v16, v15);
  swift_bridgeObjectRelease(v15);
  v24 = os_transaction_create(v23 + 32);
  swift_release(v23);
  v25 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = v24;
  swift_unknownObjectRelease(v25);
}

uint64_t sub_10041EBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  id v39;
  id v40[3];

  v1 = v0;
  v2 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v34 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A630((uint64_t *)&unk_10084A290);
  v36 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1008374A8 != -1)
    swift_once(&qword_1008374A8, sub_1004200AC);
  NSNotificationCenter.publisher(for:object:)(qword_100871EE0, 0);
  v40[0] = *(id *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_notificationSubscriptionQueue);
  v11 = v40[0];
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v39 = v10;
  v13 = v12;
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v38(v4, 1, 1, v12);
  v14 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v15 = sub_10042131C();
  v16 = sub_1000A5E70();
  v30 = v11;
  v37 = v14;
  v35 = v15;
  v33 = v16;
  Publisher.receive<A>(on:options:)(v40, v4, v5, v14, v15, v16);
  sub_10000882C((uint64_t)v4, &qword_10083A970);

  v34 = *(_QWORD *)(v34 + 8);
  ((void (*)(char *, uint64_t))v34)(v7, v5);
  v17 = type metadata accessor for RDClientConnection();
  v18 = sub_100421364();
  v19 = v32;
  v31 = v17;
  v29 = v18;
  v20 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v1, sub_10041EFE4, 0, 0, 0, v32, v17);
  v21 = v1;
  v22 = v19;
  v36 = *(_QWORD *)(v36 + 8);
  ((void (*)(char *, uint64_t))v36)(v9, v19);
  v23 = v21 + OBJC_IVAR____TtC7remindd18RDClientConnection_cancellables;
  swift_beginAccess(v21 + OBJC_IVAR____TtC7remindd18RDClientConnection_cancellables, v40, 33, 0);
  AnyCancellable.store(in:)(v23);
  swift_endAccess(v40);
  swift_release(v20);
  if (qword_1008374B0 != -1)
    swift_once(&qword_1008374B0, sub_1004200E0);
  v24 = v39;
  NSNotificationCenter.publisher(for:object:)(qword_100871EE8, 0);
  v25 = v30;
  v40[0] = v30;
  v38(v4, 1, 1, v13);
  v26 = v25;
  Publisher.receive<A>(on:options:)(v40, v4, v5, v37, v35, v33);
  sub_10000882C((uint64_t)v4, &qword_10083A970);

  ((void (*)(char *, uint64_t))v34)(v7, v5);
  v27 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v21, sub_10041F004, 0, 0, 0, v22, v31);
  ((void (*)(char *, uint64_t))v36)(v9, v22);
  swift_beginAccess(v23, v40, 33, 0);
  AnyCancellable.store(in:)(v23);
  swift_endAccess(v40);

  return swift_release(v27);
}

void sub_10041EFE4()
{
  sub_10041E8C4();
}

void sub_10041F004()
{
  sub_1000082FC();
}

uint64_t sub_10041F050(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[48];

  if (qword_1008371A8 != -1)
    swift_once(&qword_1008371A8, sub_1003201E8);
  sub_1000184A8(v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v11);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  sub_10001B228((uint64_t)v11, 0x725465676E616863, 0xEF2E676E696B6361);
  swift_bridgeObjectRelease();
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  return sub_1000092FC((void (*)(uint64_t *, id))sub_10000940C, v9, (void (*)(uint64_t *__return_ptr))sub_100421304);
}

void sub_10041F1A8(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_10041F21C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  _DWORD v8[23];
  __int16 v9;

  v8[22] = a1;
  v9 = WORD2(a1) & 0x3FFF;
  result = sub_10001ABA4(16, 2147483519);
  if (!v4)
  {
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v6 + 8))(v8, v2, ObjectType, v6);
    *v1 = result;
  }
  return result;
}

void sub_10041F35C(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_10041F3D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  _DWORD v8[23];
  __int16 v9;

  v8[22] = a1;
  v9 = WORD2(a1) & 0x3FFF;
  result = sub_10001ABA4(32, 2147483519);
  if (!v4)
  {
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v2, ObjectType, v6);
    *v1 = result;
  }
  return result;
}

void sub_10041F60C(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_10041F684@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD v20[23];
  __int16 v21;

  v20[22] = a1;
  v21 = WORD2(a1) & 0x3FFF;
  result = sub_10001ABA4(8, 2147483519);
  if (!v2)
  {
    if (qword_1008374A0 != -1)
      swift_once(&qword_1008374A0, sub_10041E18C);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10084A080);
    v7 = v1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v4 - 72) = v17;
      *(_DWORD *)v10 = 136315138;
      v11 = objc_msgSend(v7, "description");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v18 = v3;
      v14 = v13;

      v19 = sub_10001A820(v12, v14, (uint64_t *)(v4 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20);

      v3 = v18;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDClientConnection: returning sync interface performer from %s", v10, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
    v15 = *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8];
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(_DWORD *, char *, uint64_t, uint64_t))(v15 + 32))(v20, v7, ObjectType, v15);
    *v3 = result;
  }
  return result;
}

void sub_10041FA30(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_10041FA9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;
  _DWORD v7[23];
  __int16 v8;

  v7[22] = a1;
  v8 = WORD2(a1) & 0x3FFF;
  result = sub_10001ABA4(64, 2147483519);
  if (!v3)
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 40))(v7, ObjectType, v5);
    *v1 = result;
  }
  return result;
}

void sub_10041FC9C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  v2 = (void *)sub_10041FD9C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "cloudKitNetworkActivityDidUpdate:", a1);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    if (qword_1008374A0 != -1)
      swift_once(&qword_1008374A0, sub_10041E18C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001AAA8(v4, (uint64_t)qword_10084A080);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "No clientProxy obtained.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
}

uint64_t sub_10041FD9C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD aBlock[6];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection);
  aBlock[4] = sub_10041FED4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10042D6CC;
  aBlock[3] = &unk_1007F3AB8;
  v2 = _Block_copy(aBlock);
  v3 = objc_msgSend(v1, "remoteObjectProxyWithErrorHandler:", v2);
  _Block_release(v2);
  _bridgeAnyObjectToAny(_:)(aBlock, v3);
  swift_unknownObjectRelease(v3);
  v4 = sub_10001A630(&qword_10084A1C0);
  if (swift_dynamicCast(&v6, aBlock, (char *)&type metadata for Any + 8, v4, 6))
    return v6;
  else
    return 0;
}

void sub_10041FED4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  _QWORD v11[3];
  _BYTE v12[8];
  uint64_t v13;

  if (qword_1008374A0 != -1)
    swift_once(&qword_1008374A0, sub_10041E18C);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10084A080);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(a1, v12, v11);
    v7 = Error.localizedDescription.getter(v11[1], v11[2]);
    v10 = sub_10001A820(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Unable to get remoteObjectProxy for the app from the daemon. Maybe the client is gone? {error: %s}", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

NSString sub_1004200AC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100871EE0 = (uint64_t)result;
  return result;
}

NSString sub_1004200E0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100871EE8 = (uint64_t)result;
  return result;
}

uint64_t sub_100420174(char a1)
{
  void *v1;
  NSString v3;
  id v4;
  uint64_t v5;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10001A5E8((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v5 = sub_10001A630((uint64_t *)&unk_10083AE10);
    if ((swift_dynamicCast(v7, v8, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
      __asm { BR              X10 }
  }
  else
  {
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_10083D5B0);
  }
  return 0;
}

uint64_t sub_100420324()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100420348()
{
  uint64_t v0;

  sub_10041FA30(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100420360(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  char v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  NSString v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t result;
  void *v74;
  id v75;
  unint64_t v76;
  unint64_t v77;
  const mach_header_64 *v78;
  char v79;
  void *v80;
  NSString v81;
  id v82;
  void *v83;
  NSString v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void *v93;
  NSString v94;
  id v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[24];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _QWORD v109[3];
  uint64_t v110;
  _QWORD v111[5];
  _QWORD v112[5];

  v112[3] = sub_1000151B0(0, &qword_10084A2A8, NSXPCConnection_ptr);
  v112[4] = &off_1007FBD80;
  v112[0] = a1;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMToolBundleIdentifier);
  v4 = v3;
  a1;
  LOBYTE(a1) = sub_10001865C(v2, v4);
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
  {
LABEL_11:
    v5 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  if (!objc_msgSend((id)objc_opt_self(REMSystemUtilities), "isInternalInstall"))
  {
    if (qword_100837928 != -1)
      swift_once(&qword_100837928, sub_1005A2648);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_1008508E0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Device is running a non-internal Install. Not providing remindtool access level", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    goto LABEL_11;
  }
  v5 = sub_1000187F8(0, 1, 1, _swiftEmptyArrayStorage);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = sub_1000187F8((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  *((_DWORD *)v5 + v7 + 8) = 0x7FFFFFFF;
LABEL_12:
  v13 = sub_10001865C(0xD00000000000001ELL, 0x80000001007039E0);
  sub_100018618((uint64_t)v112, (uint64_t)v111);
  if ((v13 & 1) != 0)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
    sub_100018618((uint64_t)v112, (uint64_t)v109);
  }
  else
  {
    v14 = (void *)*sub_10000A388(v111, v111[3]);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "valueForEntitlement:", v15);

    if (v16)
    {
      _bridgeAnyObjectToAny(_:)(&v107, v16);
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v107 = 0u;
      v108 = 0u;
    }
    sub_10001A5E8((uint64_t)&v107, (uint64_t)v109);
    v17 = v110;
    sub_10000882C((uint64_t)v109, (uint64_t *)&unk_10083D5B0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v111);
    sub_100018618((uint64_t)v112, (uint64_t)v109);
    if (!v17)
    {
      v83 = (void *)*sub_10000A388(v109, v110);
      v84 = String._bridgeToObjectiveC()();
      v85 = objc_msgSend(v83, "valueForEntitlement:", v84);

      if (v85)
      {
        _bridgeAnyObjectToAny(_:)(&v105, v85);
        swift_unknownObjectRelease(v85);
      }
      else
      {
        v105 = 0u;
        v106 = 0u;
      }
      sub_10001A5E8((uint64_t)&v105, (uint64_t)&v107);
      v96 = *((_QWORD *)&v108 + 1);
      sub_10000882C((uint64_t)&v107, (uint64_t *)&unk_10083D5B0);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
      if (!v96)
        goto LABEL_28;
      goto LABEL_19;
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
LABEL_19:
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
  v19 = v5[2];
  v18 = v5[3];
  v20 = v18 >> 1;
  v21 = v19 + 1;
  if (v18 >> 1 <= v19)
  {
    v5 = sub_1000187F8((_QWORD *)(v18 > 1), v19 + 1, 1, v5);
    v18 = v5[3];
    v20 = v18 >> 1;
  }
  v5[2] = v21;
  *((_DWORD *)v5 + v19 + 8) = 1;
  v22 = v19 + 2;
  if (v20 < (uint64_t)(v19 + 2))
    v5 = sub_1000187F8((_QWORD *)(v18 > 1), v19 + 2, 1, v5);
  v5[2] = v22;
  *((_DWORD *)v5 + v21 + 8) = 4;
  v23 = v5[3];
  if ((uint64_t)(v19 + 3) > (uint64_t)(v23 >> 1))
    v5 = sub_1000187F8((_QWORD *)(v23 > 1), v19 + 3, 1, v5);
  v5[2] = v19 + 3;
  *((_DWORD *)v5 + v22 + 8) = 8;
LABEL_28:
  v24 = sub_10001865C(0xD000000000000012, 0x8000000100703A60);
  sub_100018618((uint64_t)v112, (uint64_t)&v107);
  if ((v24 & 1) != 0)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v107);
  }
  else
  {
    sub_10000A388(&v107, *((uint64_t *)&v108 + 1));
    v25 = sub_10001865C(0xD000000000000026, 0x8000000100703A80);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v107);
    if ((v25 & 1) == 0)
      goto LABEL_36;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
  v27 = v5[2];
  v26 = v5[3];
  if (v27 >= v26 >> 1)
    v5 = sub_1000187F8((_QWORD *)(v26 > 1), v27 + 1, 1, v5);
  v5[2] = v27 + 1;
  *((_DWORD *)v5 + v27 + 8) = 2;
LABEL_36:
  v28 = (void *)v112[0];
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "valueForEntitlement:", v29);

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)(&v103, v30);
    swift_unknownObjectRelease(v30);
  }
  else
  {
    v103 = 0u;
    v104 = 0u;
  }
  sub_10001A5E8((uint64_t)&v103, (uint64_t)&v105);
  v31 = *((_QWORD *)&v106 + 1);
  sub_10000882C((uint64_t)&v105, (uint64_t *)&unk_10083D5B0);
  sub_100018618((uint64_t)v112, (uint64_t)&v105);
  if (v31)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v105);
  }
  else
  {
    sub_10000A388(&v105, *((uint64_t *)&v106 + 1));
    v32 = sub_10001865C(0xD000000000000024, 0x8000000100703AE0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v105);
    if ((v32 & 1) == 0)
      goto LABEL_53;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
  v34 = v5[2];
  v33 = v5[3];
  v35 = v33 >> 1;
  v36 = v34 + 1;
  if (v33 >> 1 <= v34)
  {
    v5 = sub_1000187F8((_QWORD *)(v33 > 1), v34 + 1, 1, v5);
    v33 = v5[3];
    v35 = v33 >> 1;
  }
  v5[2] = v36;
  *((_DWORD *)v5 + v34 + 8) = 8;
  v37 = v34 + 2;
  if (v35 < (uint64_t)(v34 + 2))
    v5 = sub_1000187F8((_QWORD *)(v33 > 1), v34 + 2, 1, v5);
  v5[2] = v37;
  *((_DWORD *)v5 + v36 + 8) = 16;
  v38 = v5[3];
  v39 = v34 + 3;
  if ((uint64_t)(v34 + 3) > (uint64_t)(v38 >> 1))
    v5 = sub_1000187F8((_QWORD *)(v38 > 1), v34 + 3, 1, v5);
  v5[2] = v39;
  *((_DWORD *)v5 + v37 + 8) = 4;
  v40 = v5[3];
  if ((uint64_t)(v34 + 4) > (uint64_t)(v40 >> 1))
    v5 = sub_1000187F8((_QWORD *)(v40 > 1), v34 + 4, 1, v5);
  v5[2] = v34 + 4;
  *((_DWORD *)v5 + v39 + 8) = 32;
LABEL_53:
  v41 = (void *)v112[0];
  if ((sub_1000189EC(0xFu) & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
    v43 = v5[2];
    v42 = v5[3];
    if (v43 >= v42 >> 1)
      v5 = sub_1000187F8((_QWORD *)(v42 > 1), v43 + 1, 1, v5);
    v5[2] = v43 + 1;
    *((_DWORD *)v5 + v43 + 8) = 1;
  }
  v44 = String._bridgeToObjectiveC()();
  v45 = objc_msgSend(v41, "valueForEntitlement:", v44);

  if (v45)
  {
    _bridgeAnyObjectToAny(_:)(&v101, v45);
    swift_unknownObjectRelease(v45);
  }
  else
  {
    v101 = 0u;
    v102 = 0u;
  }
  sub_10001A5E8((uint64_t)&v101, (uint64_t)&v103);
  v46 = *((_QWORD *)&v104 + 1);
  sub_10000882C((uint64_t)&v103, (uint64_t *)&unk_10083D5B0);
  sub_100018618((uint64_t)v112, (uint64_t)&v103);
  if (v46)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v103);
LABEL_65:
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
    v49 = v5[2];
    v48 = v5[3];
    v50 = v48 >> 1;
    v51 = v49 + 1;
    if (v48 >> 1 <= v49)
    {
      v5 = sub_1000187F8((_QWORD *)(v48 > 1), v49 + 1, 1, v5);
      v48 = v5[3];
      v50 = v48 >> 1;
    }
    v5[2] = v51;
    *((_DWORD *)v5 + v49 + 8) = 1;
    v52 = v49 + 2;
    if (v50 < v52)
      v5 = sub_1000187F8((_QWORD *)(v48 > 1), v52, 1, v5);
    v5[2] = v52;
    *((_DWORD *)v5 + v51 + 8) = 4;
    if ((sub_100019D3C(0) & 1) != 0)
    {
      v54 = v5[2];
      v53 = v5[3];
      if (v54 >= v53 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v53 > 1), v54 + 1, 1, v5);
      v5[2] = v54 + 1;
      *((_DWORD *)v5 + v54 + 8) = 1;
    }
    if ((sub_100019D3C(1) & 1) != 0)
    {
      v56 = v5[2];
      v55 = v5[3];
      if (v56 >= v55 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v55 > 1), v56 + 1, 1, v5);
      v5[2] = v56 + 1;
      *((_DWORD *)v5 + v56 + 8) = 2;
    }
    if ((sub_100019D3C(2) & 1) != 0)
    {
      v58 = v5[2];
      v57 = v5[3];
      v59 = v57 >> 1;
      v60 = v58 + 1;
      if (v57 >> 1 <= v58)
      {
        v5 = sub_1000187F8((_QWORD *)(v57 > 1), v58 + 1, 1, v5);
        v57 = v5[3];
        v59 = v57 >> 1;
      }
      v5[2] = v60;
      *((_DWORD *)v5 + v58 + 8) = 8;
      v61 = v58 + 2;
      if (v59 < (uint64_t)(v58 + 2))
        v5 = sub_1000187F8((_QWORD *)(v57 > 1), v58 + 2, 1, v5);
      v5[2] = v61;
      *((_DWORD *)v5 + v60 + 8) = 4;
      v62 = v5[3];
      if ((uint64_t)(v58 + 3) > (uint64_t)(v62 >> 1))
        v5 = sub_1000187F8((_QWORD *)(v62 > 1), v58 + 3, 1, v5);
      v5[2] = v58 + 3;
      *((_DWORD *)v5 + v61 + 8) = 16;
    }
    if ((sub_100019D3C(3) & 1) != 0)
    {
      v64 = v5[2];
      v63 = v5[3];
      if (v64 >= v63 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v63 > 1), v64 + 1, 1, v5);
      v5[2] = v64 + 1;
      *((_DWORD *)v5 + v64 + 8) = 32;
    }
    if ((sub_100019D3C(4) & 1) != 0)
    {
      v66 = v5[2];
      v65 = v5[3];
      if (v66 >= v65 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v65 > 1), v66 + 1, 1, v5);
      v5[2] = v66 + 1;
      *((_DWORD *)v5 + v66 + 8) = 1024;
    }
    if ((sub_100019D3C(5) & 1) != 0)
    {
      v68 = v5[2];
      v67 = v5[3];
      if (v68 >= v67 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v67 > 1), v68 + 1, 1, v5);
      v5[2] = v68 + 1;
      *((_DWORD *)v5 + v68 + 8) = 64;
    }
    if ((sub_100019D3C(6) & 1) != 0)
    {
      v70 = v5[2];
      v69 = v5[3];
      if (v70 >= v69 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v69 > 1), v70 + 1, 1, v5);
      v5[2] = v70 + 1;
      *((_DWORD *)v5 + v70 + 8) = 256;
    }
    if ((sub_100019D3C(7) & 1) != 0)
    {
      v72 = v5[2];
      v71 = v5[3];
      if (v72 >= v71 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v71 > 1), v72 + 1, 1, v5);
      v5[2] = v72 + 1;
      *((_DWORD *)v5 + v72 + 8) = 128;
    }
    goto LABEL_107;
  }
  sub_10000A388(&v103, *((uint64_t *)&v104 + 1));
  v47 = sub_100420174(1);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v103);
  if ((v47 & 1) != 0)
    goto LABEL_65;
LABEL_107:
  result = sub_100018794(1, (uint64_t)v5);
  if ((result & 1) != 0)
    goto LABEL_115;
  if (!kTCCServiceReminders)
  {
    __break(1u);
    return result;
  }
  v74 = (void *)v112[0];
  v75 = kTCCServiceReminders;
  objc_msgSend(v74, "auditToken");
  LODWORD(v74) = TCCAccessCheckAuditToken(v75, &v101, 0);

  if (!(_DWORD)v74)
  {
LABEL_115:
    v78 = 0;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
    v77 = v5[2];
    v76 = v5[3];
    if (v77 >= v76 >> 1)
      v5 = sub_1000187F8((_QWORD *)(v76 > 1), v77 + 1, 1, v5);
    v5[2] = v77 + 1;
    *((_DWORD *)v5 + v77 + 8) = 1;
    v78 = &_mh_execute_header;
  }
  v79 = sub_100018794(1, (uint64_t)v5);
  sub_100018618((uint64_t)v112, (uint64_t)&v101);
  if ((v79 & 1) != 0)
  {
    v80 = (void *)*sub_10000A388(&v101, *((uint64_t *)&v102 + 1));
    v81 = String._bridgeToObjectiveC()();
    v82 = objc_msgSend(v80, "valueForEntitlement:", v81);

    if (v82)
    {
      _bridgeAnyObjectToAny(_:)(&v97, v82);
      swift_unknownObjectRelease(v82);
    }
    else
    {
      v97 = 0u;
      v98 = 0u;
    }
    sub_10001A5E8((uint64_t)&v97, (uint64_t)v99);
    v86 = v100;
    sub_10000882C((uint64_t)v99, (uint64_t *)&unk_10083D5B0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v101);
    if (v86)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_1000187F8(0, v5[2] + 1, 1, v5);
      v88 = v5[2];
      v87 = v5[3];
      if (v88 >= v87 >> 1)
        v5 = sub_1000187F8((_QWORD *)(v87 > 1), v88 + 1, 1, v5);
      v5[2] = v88 + 1;
      *((_DWORD *)v5 + v88 + 8) = 512;
    }
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v101);
  }
  v89 = v5[2];
  if (v89)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    do
    {
      v92 = *((_DWORD *)v5 + v90 + 8);
      if ((v92 & ~(_DWORD)v91) == 0)
        v92 = 0;
      v91 = v92 | v91;
      ++v90;
    }
    while (v89 != v90);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v91 = 0;
  }
  v93 = (void *)v112[0];
  v94 = String._bridgeToObjectiveC()();
  v95 = objc_msgSend(v93, "valueForEntitlement:", v94);

  if (v95)
  {
    _bridgeAnyObjectToAny(_:)(&v97, v95);
    swift_unknownObjectRelease(v95);
  }
  else
  {
    v97 = 0u;
    v98 = 0u;
  }
  sub_10001A5E8((uint64_t)&v97, (uint64_t)v99);
  if (v100)
    swift_dynamicCast(&v97, v99, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  else
    sub_10000882C((uint64_t)v99, (uint64_t *)&unk_10083D5B0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v112);
  return v91 | (unint64_t)v78;
}

void sub_1004212D4()
{
  uint64_t v0;

  sub_10041F60C(*(_QWORD *)(v0 + 16));
}

void sub_1004212EC()
{
  uint64_t v0;

  sub_10041F35C(*(_QWORD *)(v0 + 16));
}

void sub_100421304()
{
  uint64_t v0;

  sub_10041F1A8(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10042131C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084A2A0;
  if (!qword_10084A2A0)
  {
    v1 = type metadata accessor for NSNotificationCenter.Publisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_10084A2A0);
  }
  return result;
}

unint64_t sub_100421364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083AA10;
  if (!qword_10083AA10)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10084A290);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10083AA10);
  }
  return result;
}

uint64_t sub_1004213B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004213D4()
{
  uint64_t v0;

  sub_10041E22C(v0);
}

uint64_t sub_1004213DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100421408()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100421418()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_100421460(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  char *v23;
  void (*v24)(id *, char *, uint64_t);
  id *v25;
  uint64_t v26;
  int v27;
  id *v28;
  void (*v29)(id *, id *, uint64_t);
  id v30;
  id v31;
  id *v32;
  id v33;
  id v34;
  id *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *result;
  _QWORD v40[3];
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  id *v45;
  void (*v46)(id *, char *, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  id *v50;
  id *v51;
  id *v52;
  char *v53;
  id *v54;

  v4 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v52 = (id *)((char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v53 = (char *)v40 - v8;
  v9 = type metadata accessor for REMManualOrdering.PinnedList(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (id *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v45 = (id *)((char *)v40 - v13);
  __chkstk_darwin(v14);
  v51 = (id *)((char *)v40 - v15);
  __chkstk_darwin(v16);
  v50 = (id *)((char *)v40 - v17);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v40[2] = v2;
    v19 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v48 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
    v44 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
    v41 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
    v43 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
    v42 = enum case for REMManualOrdering.PinnedList.predefinedSmartList(_:);
    v20 = *(_QWORD *)(v5 + 72);
    v49 = v5;
    v46 = *(void (**)(id *, char *, uint64_t))(v5 + 16);
    v47 = v20;
    v40[1] = a1;
    v21 = swift_bridgeObjectRetain(a1);
    v22 = _swiftEmptyArrayStorage;
    while (1)
    {
      v23 = v53;
      v24 = v46;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v46)(v53, v19, v4, v21);
      v25 = v52;
      v24(v52, v23, v4);
      v26 = v49;
      v27 = (*(uint64_t (**)(id *, uint64_t))(v49 + 88))(v25, v4);
      if (v27 == v48)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v4);
        (*(void (**)(id *, uint64_t))(v26 + 96))(v25, v4);
        v28 = v51;
        *v51 = *v25;
        (*(void (**)(id *, _QWORD, uint64_t))(v10 + 104))(v28, v42, v9);
        v29 = *(void (**)(id *, id *, uint64_t))(v10 + 32);
      }
      else
      {
        if (v27 == v44)
        {
          (*(void (**)(id *, uint64_t))(v26 + 96))(v25, v4);
          v30 = *v25;
          v31 = objc_msgSend(*v25, "objectID");

          (*(void (**)(char *, uint64_t))(v26 + 8))(v53, v4);
          v32 = v45;
          *v45 = v31;
        }
        else
        {
          if (v27 != v41)
          {
            result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
            __break(1u);
            return result;
          }
          (*(void (**)(id *, uint64_t))(v26 + 96))(v25, v4);
          v33 = *v25;
          v34 = objc_msgSend(v33, "objectID");

          (*(void (**)(char *, uint64_t))(v26 + 8))(v53, v4);
          v32 = v45;
          *v45 = v34;
        }
        (*(void (**)(id *, _QWORD, uint64_t))(v10 + 104))(v32, v43, v9);
        v29 = *(void (**)(id *, id *, uint64_t))(v10 + 32);
        v28 = v51;
        v29(v51, v32, v9);
      }
      v35 = v50;
      v29(v50, v28, v9);
      v29(v54, v35, v9);
      swift_isUniquelyReferenced_nonNull_native(v22);
      if ((v36 & 1) == 0)
        v22 = (_QWORD *)sub_1002C84B4(0, v22[2] + 1, 1, (unint64_t)v22);
      v38 = v22[2];
      v37 = v22[3];
      if (v38 >= v37 >> 1)
        v22 = (_QWORD *)sub_1002C84B4(v37 > 1, v38 + 1, 1, (unint64_t)v22);
      v22[2] = v38 + 1;
      v29((id *)((char *)v22+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v38), v54, v9);
      v19 += v47;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        return v22;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100421890(uint64_t a1, void *a2, __n128 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  void (*v93)(char *, unint64_t, uint64_t);
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;

  v86 = a1;
  v7 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, a3);
  v8 = *(_QWORD *)(v7 - 8);
  v99 = v7;
  v100 = v8;
  __chkstk_darwin(v7);
  v97 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v92 = (char *)v85 - v11;
  __chkstk_darwin(v12);
  v96 = (char *)v85 - v13;
  v15 = __chkstk_darwin(v14);
  v90 = (char *)v85 - v16;
  v17 = sub_100421460(a5, v15);
  v85[1] = 0;
  v18 = sub_10011F170((uint64_t)v17);
  swift_bridgeObjectRelease();
  v19 = sub_10018CF18(v18, a2);
  swift_bridgeObjectRelease();
  v20 = sub_1002AF6E8((uint64_t)_swiftEmptyArrayStorage);
  v21 = *(_QWORD *)(a5 + 16);
  v87 = a5;
  if (v21)
  {
    v22 = a5 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
    v23 = *(_QWORD *)(v100 + 72);
    v24 = v19 & 0xFFFFFFFFFFFFFF8;
    if (v19 < 0)
      v24 = v19;
    v94 = v24;
    v95 = v19 & 0xC000000000000001;
    v25 = a5;
    v26 = v23;
    swift_bridgeObjectRetain(v25);
    v28 = &OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID;
    v91 = (char *)&type metadata for Swift.AnyObject + 8;
    v88 = v26;
    v89 = v19;
    while (1)
    {
      v27 = REMAccountsListDataView.Model.PinnedList.objectID.getter(v27);
      if (v27)
      {
        v29 = (void *)v27;
        if (v95)
        {
          v30 = __CocoaDictionary.lookup(_:)(v27, v94);
          if (v30)
          {
            v31 = v30;
            v101 = v30;
            v32 = v28;
            v33 = type metadata accessor for RDElementManualSortID(0);
            swift_unknownObjectRetain(v31);
            v34 = v33;
            v28 = v32;
            swift_dynamicCast(&v102, &v101, v91, v34, 7);
            v35 = v102;
            v36 = swift_unknownObjectRelease(v31);
            if (v35)
              goto LABEL_15;
          }
        }
        else if (*(_QWORD *)(v19 + 16))
        {
          v37 = sub_1002C66DC(v27);
          if ((v38 & 1) != 0)
          {
            v35 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v37);
            v36 = swift_retain();
            if (v35)
            {
LABEL_15:
              v39 = *(_QWORD *)(v35 + 24);
              v98 = v20;
              if (v39)
              {
                v40 = *(_QWORD *)(v35 + 16);
                v41 = v39;
              }
              else
              {
                v42._countAndFlagsBits = UUID.uuidString.getter(v36);
                v102 = 0x7C6C61636F6CLL;
                v103 = 0xE600000000000000;
                String.append(_:)(v42);
                swift_bridgeObjectRelease();
                v39 = 0;
                v40 = v102;
                v41 = v103;
              }
              v43 = v99;
              v93 = *(void (**)(char *, unint64_t, uint64_t))(v100 + 16);
              v44 = (uint64_t)v90;
              v93(v90, v22, v99);
              swift_bridgeObjectRetain(v39);
              v45 = v98;
              swift_isUniquelyReferenced_nonNull_native(v98);
              v102 = v45;
              sub_10028DA88(v44, v40, v41, v46);
              v47 = v102;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v49._countAndFlagsBits = UUID.uuidString.getter(v48);
              v102 = 0x7C6C61636F6CLL;
              v103 = 0xE600000000000000;
              String.append(_:)(v49);
              v50 = swift_bridgeObjectRelease();
              v52 = v102;
              v51 = v103;
              ((void (*)(uint64_t, unint64_t, uint64_t, __n128))v93)(v44, v22, v43, v50);
              swift_isUniquelyReferenced_nonNull_native(v47);
              v102 = v47;
              sub_10028DA88(v44, v52, v51, v53);
              v20 = v102;
              swift_release(v35);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v26 = v88;
              v19 = v89;
              v28 = &OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID;
              goto LABEL_6;
            }
          }
        }

      }
LABEL_6:
      v22 += v26;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v54 = v86;
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v54 + 16);
  if (v55)
  {
    swift_bridgeObjectRetain(v54);
    v56 = (uint64_t *)(v54 + 40);
    v57 = (char *)_swiftEmptyArrayStorage;
    v98 = v20;
    v58 = v92;
    do
    {
      if (*(_QWORD *)(v20 + 16))
      {
        v61 = *(v56 - 1);
        v62 = *v56;
        swift_bridgeObjectRetain(*v56);
        v63 = sub_10001A6DC(v61, v62);
        if ((v64 & 1) != 0)
        {
          v65 = *(_QWORD *)(v20 + 56);
          v66 = v99;
          v67 = v100;
          v68 = *(_QWORD *)(v100 + 72);
          v69 = *(void (**)(char *, unint64_t, uint64_t))(v100 + 16);
          v69(v58, v65 + v68 * v63, v99);
          v70 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
          v71 = v96;
          v70(v96, v58, v66);
          v69(v97, (unint64_t)v71, v66);
          swift_isUniquelyReferenced_nonNull_native(v57);
          if ((v72 & 1) == 0)
            v57 = (char *)sub_1002C84A0(0, *((_QWORD *)v57 + 2) + 1, 1, (unint64_t)v57);
          v74 = *((_QWORD *)v57 + 2);
          v73 = *((_QWORD *)v57 + 3);
          if (v74 >= v73 >> 1)
            v57 = (char *)sub_1002C84A0(v73 > 1, v74 + 1, 1, (unint64_t)v57);
          *((_QWORD *)v57 + 2) = v74 + 1;
          v59 = v99;
          v60 = v100;
          v70(&v57[((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ v74 * v68], v97, v99);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v96, v59);
          v20 = v98;
        }
        swift_bridgeObjectRelease();
      }
      v56 += 2;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v57 = (char *)_swiftEmptyArrayStorage;
  }
  v75 = v87;
  v102 = (uint64_t)v57;
  v76 = sub_10001A630(&qword_10084A2B8);
  v77 = sub_1001A9820();
  v78 = sub_100421E90();
  v79 = sub_10011A5DC();
  v80 = Sequence.compactMapToSet<A>(_:)(sub_100421E58, 0, v76, v77, v78, v79);
  v81 = swift_bridgeObjectRetain(v75);
  v83 = sub_100421EDC(v82, v80, v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v102 = (uint64_t)v57;
  sub_1001E1C0C((uint64_t)v83);
  return v102;
}

uint64_t sub_100421E58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REMAccountsListDataView.Model.PinnedList.objectID.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100421E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084A2C0;
  if (!qword_10084A2C0)
  {
    v1 = sub_1000A5A94(&qword_10084A2B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10084A2C0);
  }
  return result;
}

_QWORD *sub_100421EDC(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v6 = type metadata accessor for REMAccountsListDataView.Model.PinnedList(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v36 - v11;
  result = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  v47 = *(_QWORD *)(a1 + 16);
  if (v47)
  {
    v36 = v3;
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v16 = *(_QWORD *)(v7 + 72);
    v37 = v7;
    v38 = v15;
    v46 = a1 + v15;
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v17 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v17 = a2;
    v39 = v17;
    v40 = v16;
    v42 = a2 & 0xC000000000000001;
    v43 = a2 + 56;
    v41 = a2;
    while (1)
    {
      v18 = v45(v12, v46 + v16 * v14, v6, v10);
      v19 = REMAccountsListDataView.Model.PinnedList.objectID.getter(v18);
      if (v19)
      {
        v20 = (void *)v19;
        if (v42)
        {
          v21 = __CocoaSet.contains(_:)(v19, v39);

          if ((v21 & 1) == 0)
            goto LABEL_20;
        }
        else
        {
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_19;
          v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v23 = -1 << *(_BYTE *)(a2 + 32);
          v24 = v22 & ~v23;
          if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            goto LABEL_19;
          sub_1001A9820();
          v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v24);
          v26 = static NSObject.== infix(_:_:)(v25);

          if ((v26 & 1) == 0)
          {
            v27 = ~v23;
            while (1)
            {
              v24 = (v24 + 1) & v27;
              a2 = v41;
              if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
                break;
              v28 = *(id *)(*(_QWORD *)(v41 + 48) + 8 * v24);
              v29 = static NSObject.== infix(_:_:)(v28);

              if ((v29 & 1) != 0)
                goto LABEL_5;
            }
LABEL_19:

            v7 = v37;
LABEL_20:
            v30 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
            v30(v44, v12, v6);
            v31 = v48;
            swift_isUniquelyReferenced_nonNull_native(v48);
            if ((v32 & 1) == 0)
            {
              sub_1001C1D14(0, v31[2] + 1, 1);
              v31 = v48;
            }
            v34 = v31[2];
            v33 = v31[3];
            if (v34 >= v33 >> 1)
            {
              sub_1001C1D14(v33 > 1, v34 + 1, 1);
              v31 = v48;
            }
            v31[2] = v34 + 1;
            v35 = (char *)v31 + v38 + v34 * v40;
            v16 = v40;
            v30(v35, v44, v6);
            v48 = v31;
            goto LABEL_7;
          }
LABEL_5:

          v16 = v40;
          a2 = v41;
          v7 = v37;
        }
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
LABEL_7:
      if (++v14 == v47)
        return v48;
    }
  }
  return result;
}

uint64_t sub_1004221CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[6];

  v7[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = *(_QWORD *)(a1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8));
  result = type metadata accessor for Optional(319, AssociatedTypeWitness);
  if (v5 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, v2);
    if (v6 <= 0x3F)
    {
      v7[2] = *(_QWORD *)(result - 8) + 64;
      v7[3] = "\b";
      v7[4] = &unk_1006BC110;
      v7[5] = (char *)&value witness table for Builtin.Int64 + 64;
      return swift_initClassMetadata2(a1, 0, 6, v7, a1 + 96);
    }
  }
  return result;
}

uint64_t sub_1004222AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A2D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A2D0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10042233C()
{
  qword_10084A2E8 = 0x4122750000000000;
}

uint64_t sub_100422350()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject(&unk_1007F3E18, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1004243B4;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_1000098E4;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000098C4;
  v6[3] = &unk_1007F3E30;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain();
  swift_retain();
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 117, 58, 25, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100422458(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t);
  char *v37;
  __n128 v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  char v55[24];

  v2 = v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v52 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v51 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(v5 + 88);
  v49 = *(_QWORD *)(v48 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v49);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v50 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)v2[2];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13, v15);
  v47 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) != 0)
  {
    if (qword_1008374B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008374B8, sub_1004222AC);
LABEL_3:
  v19 = type metadata accessor for Logger(0);
  v53 = sub_10001AAA8(v19, (uint64_t)qword_10084A2D0);
  v20 = Logger.logObject.getter(v53);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "CloudSchemaCatchUpSyncController: Starting", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = (char *)v2 + *(_QWORD *)(*v2 + 104);
  v24 = swift_beginAccess(v23, v55, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))(v12, v23, v7, v24);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1, AssociatedTypeWitness);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  if (v26 == 1)
  {
    v28 = (char *)v2 + *(_QWORD *)(*v2 + 112);
    v46 = v7;
    v29 = v51;
    v30 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v28, v3);
    v31 = swift_allocObject(&unk_1007F3EE0, 24, 7);
    v44 = AssociatedTypeWitness;
    v45 = v8;
    v32 = v31;
    swift_weakInit(v31 + 16, v2);
    v33 = (_QWORD *)swift_allocObject(&unk_1007F3F08, 40, 7);
    v34 = v48;
    v35 = v49;
    v33[2] = v3;
    v33[3] = v34;
    v33[4] = v32;
    v36 = *(void (**)(id, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v35 + 24);
    swift_retain();
    v37 = v50;
    v36(v47, sub_100424454, v33, v3, v35);
    swift_release(v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v3);
    swift_release(v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v37, 0, 1, v44);
    v38 = swift_beginAccess(v23, v54, 33, 0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v45 + 40))(v23, v37, v46, v38);
    v39 = swift_endAccess(v54);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      v43 = "CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v40, v41, v43, v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }
  }
  else
  {
    v40 = Logger.logObject.getter(v27);
    v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      v43 = "CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?";
      goto LABEL_10;
    }
  }

}

void sub_1004228CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  void (*v37)(char *, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v46 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v44 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)v44 - v12;
  v14 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v15 = *(v14 - 1);
  v16 = __chkstk_darwin(v14);
  v18 = (_QWORD *)((char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (void *)v1[2];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, _QWORD *))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1008374B8, sub_1004222AC);
    goto LABEL_12;
  }
  v14 = *(_QWORD **)((char *)v1 + *(_QWORD *)(*v1 + 120));
  if (objc_msgSend(v14, "schedulingState") != (id)1)
    return;
  v21 = objc_msgSend(v14, "lastScheduledDate");
  if (v21)
  {
    v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v4, v10, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v24 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v13, v4, v5);
      v25 = Date.timeIntervalSinceNow.getter(v24);
      v26 = *(double *)((char *)v1 + *(_QWORD *)(*v1 + 136));
      if (v25 >= -v26)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      }
      else
      {
        if (qword_1008374B8 != -1)
          swift_once(&qword_1008374B8, sub_1004222AC);
        v27 = type metadata accessor for Logger(0);
        sub_10001AAA8(v27, (uint64_t)qword_10084A2D0);
        v28 = v46;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v46, v13, v5);
        v29 = swift_retain();
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = swift_slowAlloc(22, -1);
          v45 = swift_slowAlloc(32, -1);
          v48 = v45;
          *(_DWORD *)v32 = 134349314;
          v47 = *(_QWORD *)&v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
          swift_release(v1);
          *(_WORD *)(v32 + 12) = 2082;
          v44[1] = v32 + 14;
          v33 = sub_10009FC50((unint64_t *)&qword_100846B70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v34 = dispatch thunk of CustomStringConvertible.description.getter(v5, v33);
          v47 = sub_10001A820(v34, v35, &v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
          v36 = swift_bridgeObjectRelease();
          v37 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
          v37(v28, v5, v36);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}", (uint8_t *)v32, 0x16u);
          v38 = v45;
          swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v32, -1, -1);
        }
        else
        {
          swift_release(v1);
          v37 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
          ((void (*)(char *, uint64_t))v37)(v28, v5);
        }

        sub_100423594();
        ((void (*)(char *, uint64_t))v37)(v13, v5);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1000EA320((uint64_t)v4);
  if (qword_1008374B8 != -1)
    goto LABEL_20;
LABEL_12:
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10001AAA8(v39, (uint64_t)qword_10084A2D0);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  objc_msgSend(v14, "setSchedulingState:", 0);
  objc_msgSend(v14, "setLastScheduledDate:", 0);
  sub_100422EBC();
}

void sub_100422E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
    sub_100422EBC();
  else
    __break(1u);
}

void sub_100422EBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  int v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  _BYTE v60[24];

  v1 = *(_QWORD *)(*v0 + 80);
  v56 = *(_QWORD *)(*(_QWORD *)(*v0 + 88) + 8);
  v57 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v56);
  v3 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v55 - v5;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v8);
  v55 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v58 = (char *)&v55 - v11;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char **)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (void *)v0[2];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v19 = (char *)v0 + *(_QWORD *)(*v0 + 104);
  v20 = swift_beginAccess(v19, v60, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v4 + 16))(v6, v19, v3, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (qword_1008374B8 == -1)
    {
LABEL_4:
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10001AAA8(v21, (uint64_t)qword_10084A2D0);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

      return;
    }
LABEL_27:
    swift_once(&qword_1008374B8, sub_1004222AC);
    goto LABEL_4;
  }
  v26 = v7;
  v27 = v58;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v58, v6, AssociatedTypeWitness);
  v28 = *(void **)((char *)v0 + *(_QWORD *)(*v0 + 120));
  swift_getObjectType();
  v29 = objc_msgSend(v28, "schedulingState");
  if (v29)
  {
    v30 = v29;
    if (qword_1008374B8 != -1)
      swift_once(&qword_1008374B8, sub_1004222AC);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_10084A2D0);
    v32 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    v33 = v55;
    v34 = v32(v55, v27, AssociatedTypeWitness);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(18, -1);
      *(_DWORD *)v37 = 134349312;
      v59 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
      *(_WORD *)(v37 + 12) = 1026;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v56, v57, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
      v40 = *(void (**)(char *, uint64_t))(v26 + 8);
      v40(v33, AssociatedTypeWitness);
      LODWORD(v59) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 4);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{BOOL,public}d}", (uint8_t *)v37, 0x12u);
      v41 = v37;
      v27 = v58;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      v40 = *(void (**)(char *, uint64_t))(v26 + 8);
      v40(v33, AssociatedTypeWitness);
    }

    v40(v27, AssociatedTypeWitness);
  }
  else
  {
    v42 = swift_getAssociatedConformanceWitness(v56, v57, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(AssociatedTypeWitness, v42) & 1) != 0)
    {
      if (qword_1008374B8 != -1)
        swift_once(&qword_1008374B8, sub_1004222AC);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_10001AAA8(v43, (uint64_t)qword_10084A2D0);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v47 = 134349056;
        v59 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}", v47, 0xCu);
        v48 = v47;
        v26 = v7;
        swift_slowDealloc(v48, -1, -1);
      }

      sub_100423DEC();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v42 + 24))(AssociatedTypeWitness, v42);
      sub_100423DEC();
      if (qword_1008374B8 != -1)
        swift_once(&qword_1008374B8, sub_1004222AC);
      v49 = type metadata accessor for Logger(0);
      v50 = sub_10001AAA8(v49, (uint64_t)qword_10084A2D0);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria", v53, 2u);
        v54 = v53;
        v26 = v7;
        swift_slowDealloc(v54, -1, -1);
      }

    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
  }
}

uint64_t sub_100423510(uint64_t a1)
{
  swift_retain();
  sub_100422E08();
  return swift_release(a1);
}

uint64_t sub_100423538(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_100423594();
    return swift_release(v3);
  }
  return result;
}

void sub_100423594()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void **v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void **v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  void **aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  void *v59;
  _QWORD *v60;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v1[2];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v52 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    if (qword_1008374B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1008374B8, sub_1004222AC);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10084A2D0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "CloudSchemaCatchUpSyncController: Running scheduled background activity...", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void **)((char *)v1 + *(_QWORD *)(*v1 + 120));
  v20 = (void **)objc_msgSend(v19, "schedulingState");
  if (v20 == (void **)1)
  {
    v21 = v7;
    v22 = v4;
    v50 = v5;
    objc_msgSend(v19, "setSchedulingState:", 2);
    v23 = (char *)v1 + *(_QWORD *)(*v1 + 128);
    Strong = swift_unknownObjectWeakLoadStrong(v23, v24);
    v26 = *((_QWORD *)v23 + 1);
    v27 = Logger.logObject.getter(Strong);
    v28 = v27;
    if (Strong)
    {
      v29 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      v31 = os_transaction_create("com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity");
      v32 = (_QWORD *)swift_allocObject(&unk_1007F3E68, 40, 7);
      v32[2] = Strong;
      v32[3] = v26;
      v32[4] = v31;
      v49 = v31;
      v59 = sub_1000A5EF4;
      v60 = v32;
      aBlock = _NSConcreteStackBlock;
      v56 = 1107296256;
      v57 = sub_1000094C8;
      v58 = &unk_1007F3E80;
      v33 = _Block_copy(&aBlock);
      swift_unknownObjectRetain(Strong);
      swift_unknownObjectRetain(v31);
      static DispatchQoS.unspecified.getter(v34);
      v54 = _swiftEmptyArrayStorage;
      v35 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v47 = v35;
      v36 = sub_10001A630((uint64_t *)&unk_100838000);
      v37 = sub_1000D316C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v36, v37, v2, v35);
      v48 = Strong;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v22, v33);
      _Block_release(v33);
      v53 = *(_QWORD *)(v53 + 8);
      ((void (*)(char *, uint64_t))v53)(v22, v2);
      v38 = v50;
      v51 = *(_QWORD *)(v51 + 8);
      ((void (*)(char *, uint64_t))v51)(v21, v50);
      swift_release(v60);
      v59 = sub_100424404;
      v60 = v1;
      aBlock = _NSConcreteStackBlock;
      v56 = 1107296256;
      v57 = sub_1000094C8;
      v58 = &unk_1007F3EA8;
      v39 = _Block_copy(&aBlock);
      v40 = swift_retain();
      static DispatchQoS.unspecified.getter(v40);
      v54 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v36, v37, v2, v47);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v22, v39);
      _Block_release(v39);
      swift_unknownObjectRelease(v48);
      swift_unknownObjectRelease(v49);
      ((void (*)(char *, uint64_t))v53)(v22, v2);
      ((void (*)(char *, uint64_t))v51)(v21, v38);
      swift_release(v60);
    }
    else
    {
      v45 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v28, (os_log_type_t)v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v45, "CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

    }
  }
  else
  {
    v41 = v20;
    v42 = Logger.logObject.getter(v20);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v44 = 134349056;
      aBlock = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v56);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}", v44, 0xCu);
      swift_slowDealloc(v44, -1, -1);
    }

  }
}

id sub_100423B84()
{
  void *v0;

  objc_msgSend(v0, "setSchedulingState:", 0);
  return objc_msgSend(v0, "setLastScheduledDate:", 0);
}

id sub_100423BB8()
{
  void *v0;

  return objc_msgSend(v0, "setSchedulingState:", 2);
}

void sub_100423BCC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  ObjectType = swift_getObjectType(a1);
  (*(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 8))(1, CFSTR("CloudSchemaCatchUpSyncBackgroundActivity"), 0, 0, ObjectType, a2);
  if (qword_1008374B8 != -1)
    swift_once(&qword_1008374B8, sub_1004222AC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10084A2D0);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "os_transaction RELEASE {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_100423CCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  _BYTE v13[24];

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = &v13[-v7 - 8];
  v9 = (uint64_t)a1 + *(_QWORD *)(v2 + 104);
  swift_beginAccess(v9, v13, 0, 0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_10078A83C, &unk_10078A844);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  return result;
}

void sub_100423DEC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Class isa;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v1, "setSchedulingState:", 1);
  v6 = objc_msgSend((id)objc_opt_self(NSDate), "rem_now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v1, "setLastScheduledDate:", isa);

}

id *sub_100423EC8()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v1 = *v0;

  v2 = (char *)v0 + *((_QWORD *)*v0 + 13);
  v4 = (char *)(v1 + 10);
  v3 = v1[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*((_QWORD *)v4 + 1) + 8));
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 14), v3);
  swift_unknownObjectRelease(*(id *)((char *)v0 + *((_QWORD *)*v0 + 15)));
  sub_100008EFC((uint64_t)v0 + *((_QWORD *)*v0 + 16));
  return v0;
}

uint64_t sub_100423F84()
{
  uint64_t v0;

  sub_100423EC8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDICCloudSchemaCatchUpSyncController);
}

uint64_t sub_100423FB4()
{
  return sub_100422350();
}

void sub_100423FD4()
{
  uint64_t v0;
  void *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  Swift::Int v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;
  char v12;
  double v13;
  __int16 v14;
  int v15;
  int v16;
  char v17;
  Swift::Int v18;

  v1 = *(void **)(v0 + 16);
  if ((objc_msgSend(v1, "containsLargeDatabases") & 1) != 0)
  {
    v2 = 1800.0;
  }
  else if (objc_msgSend(v1, "containsOnlySmallDatabases"))
  {
    v2 = 15.0;
  }
  else
  {
    v2 = 300.0;
  }
  if (qword_1008374B8 != -1)
    swift_once(&qword_1008374B8, sub_1004222AC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10084A2D0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    *(double *)v9 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, (char *)v9 + 8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDICCloudSchemaCatchUpSyncXPCActivity: Updating scheduler (xpcActivity) criteria {estimatedDuration: %{public}f}", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_1002EAFA4((uint64_t)&off_1007E0BC0);
  v9[0] = xmmword_1006BC030;
  v9[1] = xmmword_1006BC030;
  v10 = 0;
  v11 = 257;
  v12 = 0;
  v13 = v2;
  v14 = 256;
  v15 = 0;
  v16 = 33620225;
  v17 = 7;
  v18 = v8;
  sub_1004F53D0((uint64_t)v9);
  swift_bridgeObjectRelease(v8);
}

uint64_t sub_1004241A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity()
{
  return objc_opt_self(_TtC7remindd37RDICCloudSchemaCatchUpSyncXPCActivity);
}

uint64_t sub_1004241EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = type metadata accessor for UnfairLock(0);
  swift_retain(v2);
  Lock.sync<A>(_:)(sub_1000A5F08, v1, v3, &type metadata for Bool, &protocol witness table for UnfairLock);
  swift_release(v2);
  return v5;
}

void sub_100424270()
{
  sub_1004F5A28();
}

void sub_100424294()
{
  sub_100423FD4();
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivityFactory()
{
  return objc_opt_self(_TtC7remindd44RDICCloudSchemaCatchUpSyncXPCActivityFactory);
}

_UNKNOWN **sub_1004242D4()
{
  return &off_1007F3DC8;
}

void sub_1004242E0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  v9 = *(void **)(*(_QWORD *)v4 + 16);
  v10 = type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
  v11 = swift_allocObject(v10, 32, 7);
  *(_QWORD *)(v11 + 16) = v9;
  v12 = (_QWORD *)swift_allocObject(&unk_1007F3F30, 40, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v13 = type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject(v13, 128, 7);
  v14 = v9;
  v15 = a1;
  swift_retain();
  sub_1004F69CC(2, (uint64_t)sub_1000A5B1C, (uint64_t)v12);
  *(_QWORD *)(v11 + 24) = v16;
  *a4 = v11;
}

_UNKNOWN **sub_1004243A8()
{
  return &off_1007F3DE8;
}

void sub_1004243B4(uint64_t a1)
{
  sub_100422458(a1);
  sub_1004228CC();
}

uint64_t sub_1004243C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004243D8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100424404()
{
  uint64_t *v0;

  return sub_100423CCC(v0);
}

uint64_t sub_10042440C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100424430()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100424454()
{
  uint64_t v0;

  return sub_100423538(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100424470()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004244AC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  __n128 v19;
  uint64_t (*v20)(_BYTE *, char *, uint64_t, __n128);
  uint64_t v21;
  char v22;
  void (*v23)(_BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  double v63;
  _BYTE v64[12];
  int v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t (*v70)(_BYTE *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char v73[24];

  v69 = a1;
  v5 = v4;
  v67 = a3;
  v68 = a2;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (void *)v5[6];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v18 = (char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v19 = swift_beginAccess((char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate, v73, 0, 0);
  v20 = *(uint64_t (**)(_BYTE *, char *, uint64_t, __n128))(v8 + 16);
  v21 = v20(v10, v18, v7, v19);
  v22 = Date.isInThePast.getter(v21);
  v23 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v23(v10, v7);
  if ((v22 & 1) != 0)
  {
    sub_100424C48();
    v24 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    v25 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  v24 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  v25 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v25)
  {
LABEL_5:
    v26 = v25 != 0;
    v27 = v25 - 1;
    if (v26)
    {
      *(_QWORD *)((char *)v5 + v24) = v27;
      if (qword_1008374C8 == -1)
      {
LABEL_8:
        v28 = type metadata accessor for Logger(0);
        sub_10001AAA8(v28, (uint64_t)qword_10084A550);
        swift_bridgeObjectRetain_n(a4, 2);
        v29 = swift_retain_n(v5);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.info.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = swift_slowAlloc(22, -1);
          v33 = swift_slowAlloc(64, -1);
          v72 = v33;
          *(_DWORD *)v32 = 136446466;
          v34 = v5[4];
          v35 = v5[5];
          swift_bridgeObjectRetain(v35);
          v71 = sub_10001A820(v34, v35, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          swift_release_n(v5);
          swift_bridgeObjectRelease(v35);
          *(_WORD *)(v32 + 12) = 2082;
          if (a4)
            v36 = v67;
          else
            v36 = 7104878;
          if (a4)
            v37 = a4;
          else
            v37 = 0xE300000000000000;
          swift_bridgeObjectRetain(a4);
          v71 = sub_10001A820(v36, v37, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          swift_bridgeObjectRelease_n(a4, 2);
          swift_bridgeObjectRelease(v37);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v32, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a4, 2);
          v38 = swift_release_n(v5);
        }
        return ((uint64_t (*)(uint64_t))v69)(v38);
      }
LABEL_32:
      swift_once(&qword_1008374C8, sub_100424BB8);
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (qword_1008374C8 != -1)
    swift_once(&qword_1008374C8, sub_100424BB8);
  v40 = type metadata accessor for Logger(0);
  sub_10001AAA8(v40, (uint64_t)qword_10084A550);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_retain_n(v5);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v41 = swift_retain();
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter();
  v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    v45 = swift_slowAlloc(48, -1);
    v70 = (uint64_t (*)(_BYTE *, char *, uint64_t))v20;
    v46 = v45;
    v68 = swift_slowAlloc(96, -1);
    v72 = v68;
    *(_DWORD *)v46 = 136447234;
    v66 = v42;
    v65 = v44;
    v47 = v5[4];
    v48 = v5[5];
    swift_bridgeObjectRetain(v48);
    v71 = sub_10001A820(v47, v48, &v72);
    v69 = &v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
    swift_release(v5);
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v46 + 12) = 2082;
    if (a4)
      v49 = v67;
    else
      v49 = 7104878;
    if (a4)
      v50 = a4;
    else
      v50 = 0xE300000000000000;
    v67 = v46 + 14;
    swift_bridgeObjectRetain(a4);
    v71 = sub_10001A820(v49, v50, &v72);
    v51 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v69);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v46 + 22) = 1040;
    LODWORD(v71) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 4);
    *(_WORD *)(v46 + 28) = 2048;
    v52 = v70(v10, v18, v7);
    v53 = Date.timeIntervalSinceNow.getter(v52);
    v23(v10, v7);
    v71 = *(_QWORD *)&v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v51);
    swift_release_n(v5);
    *(_WORD *)(v46 + 38) = 2082;
    v54 = v70(v10, v18, v7);
    v55 = Date.description.getter(v54);
    v57 = v56;
    v23(v10, v7);
    v71 = sub_10001A820(v55, v57, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v69);
    swift_release_n(v5);
    swift_bridgeObjectRelease(v57);
    v58 = v66;
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v65, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v46, 0x30u);
    v59 = v68;
    swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    v60 = v46;
    v20 = (uint64_t (*)(_BYTE *, char *, uint64_t, __n128))v70;
    swift_slowDealloc(v60, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(v5);
  }
  v61 = (void *)objc_opt_self(REMError);
  v62 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v20)(v10, v18, v7);
  v63 = Date.timeIntervalSinceNow.getter(v62);
  v23(v10, v7);
  return swift_willThrow(objc_msgSend(v61, "throttledErrorWithRemainingTimeInterval:", v63));
}

uint64_t sub_100424BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A550);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A550);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100424C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v14[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v0 + 48);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
    Date.init(timeIntervalSinceNow:)(result, 30.0);
    v12 = v0 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
    swift_beginAccess(v12, v14, 33, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 40))(v12, v4, v1);
    return swift_endAccess(v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100424D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  v1 = v0 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100424DF4()
{
  return type metadata accessor for RDThrottler(0);
}

uint64_t type metadata accessor for RDThrottler(uint64_t a1)
{
  uint64_t result;

  result = qword_10084A5A0;
  if (!qword_10084A5A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDThrottler);
  return result;
}

uint64_t sub_100424E38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_1006BC258;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100424ECC(uint64_t a1, unint64_t a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  char *v20;
  __n128 v21;
  uint64_t (*v22)(char *, char *, uint64_t, __n128);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  double v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t (*v75)(char *, char *, uint64_t);
  id v76;
  uint64_t v77;
  uint64_t v78;
  char v79[24];

  v74 = a6;
  v72 = a7;
  v73 = a5;
  v76 = a4;
  v71 = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (os_log_t *)((char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)a3[6];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13, v15);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v20 = (char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v21 = swift_beginAccess((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate, v79, 0, 0);
  v22 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v10 + 16);
  v23 = v22(v12, v20, v9, v21);
  v24 = Date.isInThePast.getter(v23);
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v12, v9);
  if ((v24 & 1) != 0)
  {
    sub_100424C48();
    v26 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    v27 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  v26 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  v27 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v27)
  {
LABEL_5:
    v28 = v27 != 0;
    v29 = v27 - 1;
    if (v28)
    {
      *(_QWORD *)((char *)a3 + v26) = v29;
      if (qword_1008374C8 == -1)
      {
LABEL_8:
        v30 = type metadata accessor for Logger(0);
        sub_10001AAA8(v30, (uint64_t)qword_10084A550);
        swift_bridgeObjectRetain_n(a2, 2);
        v31 = swift_retain_n(a3);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.info.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = swift_slowAlloc(22, -1);
          v35 = swift_slowAlloc(64, -1);
          v78 = v35;
          *(_DWORD *)v34 = 136446466;
          v37 = a3[4];
          v36 = a3[5];
          swift_bridgeObjectRetain(v36);
          v77 = sub_10001A820(v37, v36, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
          swift_release_n(a3);
          swift_bridgeObjectRelease(v36);
          *(_WORD *)(v34 + 12) = 2082;
          if (a2)
            v38 = v71;
          else
            v38 = 7104878;
          if (a2)
            v39 = a2;
          else
            v39 = 0xE300000000000000;
          swift_bridgeObjectRetain(a2);
          v77 = sub_10001A820(v38, v39, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
          swift_bridgeObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease(v39);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
          swift_release_n(a3);
        }
        v40 = v76;
        v42 = (uint64_t *)v73;
        v41 = (uint64_t)v74;
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v45 = v44;
        sub_1004244AC(v42, v41, v43, v44);

        swift_bridgeObjectRelease(v45);
        return;
      }
LABEL_32:
      swift_once(&qword_1008374C8, sub_100424BB8);
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (qword_1008374C8 != -1)
    swift_once(&qword_1008374C8, sub_100424BB8);
  v46 = type metadata accessor for Logger(0);
  sub_10001AAA8(v46, (uint64_t)qword_10084A550);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain_n(a3);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v47 = swift_retain();
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    v51 = swift_slowAlloc(48, -1);
    v75 = (uint64_t (*)(char *, char *, uint64_t))v22;
    v52 = v51;
    v73 = swift_slowAlloc(96, -1);
    v78 = v73;
    *(_DWORD *)v52 = 136447234;
    LODWORD(v72) = v50;
    v70 = v48;
    v54 = a3[4];
    v53 = a3[5];
    swift_bridgeObjectRetain(v53);
    v77 = sub_10001A820(v54, v53, &v78);
    v74 = &v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    swift_release(a3);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v52 + 12) = 2082;
    if (a2)
      v55 = v71;
    else
      v55 = 7104878;
    if (a2)
      v56 = a2;
    else
      v56 = 0xE300000000000000;
    swift_bridgeObjectRetain(a2);
    v77 = sub_10001A820(v55, v56, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v74);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v56);
    *(_WORD *)(v52 + 22) = 1040;
    LODWORD(v77) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, (char *)&v77 + 4);
    *(_WORD *)(v52 + 28) = 2048;
    v57 = v75(v12, v20, v9);
    v58 = Date.timeIntervalSinceNow.getter(v57);
    v25(v12, v9);
    v77 = *(_QWORD *)&v58;
    v59 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v74);
    swift_release_n(a3);
    *(_WORD *)(v52 + 38) = 2082;
    v71 = v52 + 40;
    v60 = v75(v12, v20, v9);
    v61 = Date.description.getter(v60);
    v63 = v62;
    v25(v12, v9);
    v77 = sub_10001A820(v61, v63, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v59);
    swift_release_n(a3);
    swift_bridgeObjectRelease(v63);
    v64 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v72, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v52, 0x30u);
    v65 = v73;
    swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    v66 = v52;
    v22 = (uint64_t (*)(char *, char *, uint64_t, __n128))v75;
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a3);
  }
  v67 = (void *)objc_opt_self(REMError);
  v68 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v12, v20, v9);
  v69 = Date.timeIntervalSinceNow.getter(v68);
  v25(v12, v9);
  swift_willThrow(objc_msgSend(v67, "throttledErrorWithRemainingTimeInterval:", v69));

}

void sub_100425620(uint64_t a1, char *a2, uint64_t a3, int a4, void *a5, void *a6, void (*a7)(id), void *a8, void *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  __n128 v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  os_log_t v71;
  void (*v72)(id);
  void *v73;
  uint64_t v74;
  double v75;
  void (**v76)(id);
  char *v77;
  os_log_t v78;
  uint64_t v79;
  int v80;
  void (*v81)(id);
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  void *v83;
  id v84;
  uint64_t v85;
  char *v86;
  id v87;
  id v88;
  uint64_t v89;
  void (*v90)(id);
  char v91[24];

  v81 = a7;
  v86 = a2;
  v87 = a6;
  v80 = a4;
  v79 = a1;
  v88 = a9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (void (***)(id))((char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = a3;
  v21 = *(void **)(a3 + 48);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16, v18);
  v22 = a5;
  v84 = v87;
  v87 = a8;
  swift_retain();
  v88 = v88;
  v23 = v21;
  LOBYTE(a8) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v20, v16);
  if ((a8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  v83 = v22;
  v16 = v85;
  v24 = v85 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v25 = swift_beginAccess(v85 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate, v91, 0, 0);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v27 = v26(v15, v24, v12, v25);
  v28 = Date.isInThePast.getter(v27);
  v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29(v15, v12);
  if ((v28 & 1) != 0)
  {
    sub_100424C48();
    v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    v31 = *(_QWORD *)(v16 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  v30 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  v31 = *(_QWORD *)(v16 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v31)
  {
LABEL_5:
    v15 = v86;
    v32 = v31 != 0;
    v33 = v31 - 1;
    if (v32)
    {
      *(_QWORD *)(v16 + v30) = v33;
      if (qword_1008374C8 == -1)
      {
LABEL_8:
        v34 = type metadata accessor for Logger(0);
        sub_10001AAA8(v34, (uint64_t)qword_10084A550);
        swift_bridgeObjectRetain_n(v15, 2);
        v35 = swift_retain_n(v16);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(22, -1);
          v39 = swift_slowAlloc(64, -1);
          v90 = (void (*)(id))v39;
          *(_DWORD *)v38 = 136446466;
          v40 = v16;
          v41 = *(_QWORD *)(v16 + 32);
          v42 = *(_QWORD *)(v16 + 40);
          swift_bridgeObjectRetain(v42);
          v89 = sub_10001A820(v41, v42, (uint64_t *)&v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
          swift_release_n(v40);
          swift_bridgeObjectRelease(v42);
          *(_WORD *)(v38 + 12) = 2082;
          if (v15)
            v43 = v79;
          else
            v43 = 7104878;
          if (v15)
            v44 = (unint64_t)v15;
          else
            v44 = 0xE300000000000000;
          swift_bridgeObjectRetain(v15);
          v89 = sub_10001A820(v43, v44, (uint64_t *)&v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
          swift_bridgeObjectRelease_n(v15, 2);
          swift_bridgeObjectRelease(v44);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v15, 2);
          swift_release_n(v16);
        }
        v45 = v87;
        v46 = v88;
        v47 = v83;
        v48 = v84;
        sub_100133F90(v80 & 1, v83, (uint64_t)v84, v81, (uint64_t)v87, (uint64_t)v88);

        swift_release(v45);
        return;
      }
LABEL_31:
      swift_once(&qword_1008374C8, sub_100424BB8);
      goto LABEL_8;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v49 = v12;
  v50 = (unint64_t)v86;
  if (qword_1008374C8 != -1)
    swift_once(&qword_1008374C8, sub_100424BB8);
  v51 = type metadata accessor for Logger(0);
  sub_10001AAA8(v51, (uint64_t)qword_10084A550);
  swift_bridgeObjectRetain_n(v50, 2);
  swift_retain_n(v16);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v52 = swift_retain();
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter();
  v55 = v54;
  if (os_log_type_enabled(v53, v54))
  {
    v56 = swift_slowAlloc(48, -1);
    v82 = (uint64_t (*)(char *, uint64_t, uint64_t))v26;
    v57 = v16;
    v58 = v56;
    v81 = (void (*)(id))swift_slowAlloc(96, -1);
    v90 = v81;
    *(_DWORD *)v58 = 136447234;
    v80 = v55;
    v77 = v15;
    v78 = v53;
    v59 = v50;
    v61 = *(_QWORD *)(v57 + 32);
    v60 = *(_QWORD *)(v57 + 40);
    swift_bridgeObjectRetain(v60);
    v89 = sub_10001A820(v61, v60, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
    swift_release(v57);
    swift_bridgeObjectRelease(v60);
    *(_WORD *)(v58 + 12) = 2082;
    if (v50)
      v62 = v79;
    else
      v62 = 7104878;
    if (!v50)
      v50 = 0xE300000000000000;
    swift_bridgeObjectRetain(v59);
    v89 = sub_10001A820(v62, v50, (uint64_t *)&v90);
    v76 = &v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
    v63 = v59;
    v15 = v77;
    swift_bridgeObjectRelease_n(v63, 2);
    swift_bridgeObjectRelease(v50);
    *(_WORD *)(v58 + 22) = 1040;
    LODWORD(v89) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, (char *)&v89 + 4);
    *(_WORD *)(v58 + 28) = 2048;
    v64 = v82(v15, v24, v49);
    v65 = Date.timeIntervalSinceNow.getter(v64);
    v29(v15, v49);
    v89 = *(_QWORD *)&v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
    swift_release_n(v57);
    *(_WORD *)(v58 + 38) = 2082;
    v66 = v82(v15, v24, v49);
    v67 = Date.description.getter(v66);
    v69 = v68;
    v29(v15, v49);
    v89 = sub_10001A820(v67, v69, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v76);
    v70 = v57;
    v26 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v82;
    swift_release_n(v70);
    swift_bridgeObjectRelease(v69);
    v71 = v78;
    _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v80, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v58, 0x30u);
    v72 = v81;
    swift_arrayDestroy(v81, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v58, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v50, 2);
    swift_release_n(v16);
  }
  v73 = (void *)objc_opt_self(REMError);
  v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v26)(v15, v24, v49);
  v75 = Date.timeIntervalSinceNow.getter(v74);
  v29(v15, v49);
  swift_willThrow(objc_msgSend(v73, "throttledErrorWithRemainingTimeInterval:", v75));

  swift_release(v87);
}

void sub_100425DDC(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, void *a5, void (*a6)(id), void *a7, void *a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  _QWORD *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  double v59;
  void (**v60)(id);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  void (*v66)(id);
  void (*v67)(id);
  uint64_t (*v68)(char *, char *, uint64_t);
  void *v69;
  uint64_t v70;
  double v71;
  void (**v72)(id);
  int v73;
  os_log_t v74;
  uint64_t (*v75)(char *, char *, uint64_t, __n128);
  uint64_t v76;
  void (*v77)(id);
  char *v78;
  id v79;
  id v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  void (*v86)(id);
  char v87[24];

  v77 = a6;
  v83 = a5;
  v84 = a8;
  v82 = a2;
  v76 = a1;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (void (***)(id))((char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = a3;
  v20 = (_QWORD *)a3[6];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v80 = a4;
  v21 = v83;
  v83 = a7;
  swift_retain();
  v84 = v84;
  v22 = v20;
  LOBYTE(a7) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((a7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v79 = v21;
  v20 = v81;
  v23 = (char *)v81 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v24 = swift_beginAccess((char *)v81 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate, v87, 0, 0);
  v75 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v12 + 16);
  v25 = v75(v14, v23, v11, v24);
  v26 = Date.isInThePast.getter(v25);
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  if ((v26 & 1) != 0)
  {
    sub_100424C48();
    v28 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    v29 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    v12 = v82;
    goto LABEL_5;
  }
  v28 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  v29 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  v12 = v82;
  if (v29)
  {
LABEL_5:
    v30 = v29 != 0;
    v31 = v29 - 1;
    if (v30)
    {
      *(_QWORD *)((char *)v20 + v28) = v31;
      if (qword_1008374C8 == -1)
      {
LABEL_8:
        v32 = type metadata accessor for Logger(0);
        sub_10001AAA8(v32, (uint64_t)qword_10084A550);
        swift_bridgeObjectRetain_n(v12, 2);
        v33 = swift_retain_n(v20);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = swift_slowAlloc(22, -1);
          v37 = swift_slowAlloc(64, -1);
          v86 = (void (*)(id))v37;
          *(_DWORD *)v36 = 136446466;
          v38 = v20[4];
          v39 = v20[5];
          swift_bridgeObjectRetain(v39);
          v85 = sub_10001A820(v38, v39, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          swift_release_n(v20);
          swift_bridgeObjectRelease(v39);
          *(_WORD *)(v36 + 12) = 2082;
          if (v12)
            v40 = v76;
          else
            v40 = 7104878;
          if (v12)
            v41 = v12;
          else
            v41 = 0xE300000000000000;
          swift_bridgeObjectRetain(v12);
          v85 = sub_10001A820(v40, v41, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
          swift_bridgeObjectRelease_n(v12, 2);
          swift_bridgeObjectRelease(v41);
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v36, 0x16u);
          swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v12, 2);
          swift_release_n(v20);
        }
        v42 = v83;
        v43 = v84;
        v44 = v79;
        v45 = v80;
        sub_1001350B4(v80, (uint64_t)v79, v77, (uint64_t)v83, v84);

        swift_release(v42);
        return;
      }
LABEL_32:
      swift_once(&qword_1008374C8, sub_100424BB8);
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v46 = v11;
  if (qword_1008374C8 != -1)
    swift_once(&qword_1008374C8, sub_100424BB8);
  v47 = type metadata accessor for Logger(0);
  sub_10001AAA8(v47, (uint64_t)qword_10084A550);
  swift_bridgeObjectRetain_n(v12, 2);
  swift_retain_n(v20);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v48 = swift_retain();
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter();
  v51 = v50;
  if (os_log_type_enabled(v49, v50))
  {
    v52 = swift_slowAlloc(48, -1);
    v77 = (void (*)(id))swift_slowAlloc(96, -1);
    v86 = v77;
    *(_DWORD *)v52 = 136447234;
    v74 = v49;
    v73 = v51;
    v54 = v20[4];
    v53 = v20[5];
    swift_bridgeObjectRetain(v53);
    v85 = sub_10001A820(v54, v53, (uint64_t *)&v86);
    v78 = v14;
    v72 = &v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_release(v20);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v52 + 12) = 2082;
    if (v12)
      v55 = v76;
    else
      v55 = 7104878;
    if (v12)
      v56 = v12;
    else
      v56 = 0xE300000000000000;
    swift_bridgeObjectRetain(v12);
    v85 = sub_10001A820(v55, v56, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    v14 = v78;
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v56);
    *(_WORD *)(v52 + 22) = 1040;
    LODWORD(v85) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, (char *)&v85 + 4);
    *(_WORD *)(v52 + 28) = 2048;
    v82 = v52 + 30;
    v57 = (uint64_t (*)(char *, char *, uint64_t))v75;
    v58 = ((uint64_t (*)(char *, char *, uint64_t))v75)(v14, v23, v46);
    v59 = Date.timeIntervalSinceNow.getter(v58);
    v27(v14, v46);
    v85 = *(_QWORD *)&v59;
    v60 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v72);
    swift_release_n(v20);
    *(_WORD *)(v52 + 38) = 2082;
    v82 = v52 + 40;
    v61 = v57(v14, v23, v46);
    v62 = Date.description.getter(v61);
    v64 = v63;
    v27(v14, v46);
    v85 = sub_10001A820(v62, v64, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v60);
    swift_release_n(v20);
    swift_bridgeObjectRelease(v64);
    v65 = v74;
    _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v73, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v52, 0x30u);
    v66 = v77;
    swift_arrayDestroy(v77, 3, (char *)&type metadata for Any + 8);
    v67 = v66;
    v68 = (uint64_t (*)(char *, char *, uint64_t))v75;
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v52, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
    swift_release_n(v20);
    v68 = (uint64_t (*)(char *, char *, uint64_t))v75;
  }
  v69 = (void *)objc_opt_self(REMError);
  v70 = v68(v14, v23, v46);
  v71 = Date.timeIntervalSinceNow.getter(v70);
  v27(v14, v46);
  swift_willThrow(objc_msgSend(v69, "throttledErrorWithRemainingTimeInterval:", v71));

  swift_release(v83);
}

void sub_100426598(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD), void (**a7)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  char *v20;
  __n128 v21;
  uint64_t (*v22)(char *, char *, uint64_t, __n128);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double v54;
  void (**v55)(_QWORD);
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  os_log_t v60;
  void (*v61)(_QWORD);
  uint64_t v62;
  void *v63;
  uint64_t v64;
  double v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD);
  void (**v70)(_QWORD);
  uint64_t (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD);
  char v75[24];

  v70 = a7;
  v68 = a5;
  v69 = a6;
  v72 = a4;
  v67 = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (os_log_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)a3[6];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13, v15);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v20 = (char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate;
  v21 = swift_beginAccess((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_throttleResetDate, v75, 0, 0);
  v22 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v10 + 16);
  v23 = v22(v12, v20, v9, v21);
  v24 = Date.isInThePast.getter(v23);
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v12, v9);
  if ((v24 & 1) != 0)
  {
    sub_100424C48();
    v26 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
    v27 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
    goto LABEL_5;
  }
  v26 = OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount;
  v27 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount);
  if (v27)
  {
LABEL_5:
    v28 = v27 != 0;
    v29 = v27 - 1;
    if (v28)
    {
      *(_QWORD *)((char *)a3 + v26) = v29;
      if (qword_1008374C8 == -1)
      {
LABEL_8:
        v30 = type metadata accessor for Logger(0);
        sub_10001AAA8(v30, (uint64_t)qword_10084A550);
        swift_bridgeObjectRetain_n(a2, 2);
        v31 = swift_retain_n(a3);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.info.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = swift_slowAlloc(22, -1);
          v35 = swift_slowAlloc(64, -1);
          v74 = (void (*)(_QWORD))v35;
          *(_DWORD *)v34 = 136446466;
          v37 = a3[4];
          v36 = a3[5];
          swift_bridgeObjectRetain(v36);
          v73 = sub_10001A820(v37, v36, (uint64_t *)&v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_release_n(a3);
          swift_bridgeObjectRelease(v36);
          *(_WORD *)(v34 + 12) = 2082;
          if (a2)
            v38 = v67;
          else
            v38 = 7104878;
          if (a2)
            v39 = a2;
          else
            v39 = 0xE300000000000000;
          swift_bridgeObjectRetain(a2);
          v73 = sub_10001A820(v38, v39, (uint64_t *)&v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
          swift_bridgeObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease(v39);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
          swift_release_n(a3);
        }
        v40 = v72;
        sub_100135DE0(v72, v68, v69);
        v41 = v40;
        goto LABEL_18;
      }
LABEL_33:
      swift_once(&qword_1008374C8, sub_100424BB8);
      goto LABEL_8;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (qword_1008374C8 != -1)
    swift_once(&qword_1008374C8, sub_100424BB8);
  v42 = type metadata accessor for Logger(0);
  sub_10001AAA8(v42, (uint64_t)qword_10084A550);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain_n(a3);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v43 = swift_retain();
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter();
  v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc(48, -1);
    v71 = (uint64_t (*)(char *, char *, uint64_t))v22;
    v48 = v47;
    v69 = (void (*)(_QWORD))swift_slowAlloc(96, -1);
    v74 = v69;
    *(_DWORD *)v48 = 136447234;
    LODWORD(v68) = v46;
    v66 = v44;
    v50 = a3[4];
    v49 = a3[5];
    swift_bridgeObjectRetain(v49);
    v73 = sub_10001A820(v50, v49, (uint64_t *)&v74);
    v70 = &v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    swift_release(a3);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v48 + 12) = 2082;
    if (a2)
      v51 = v67;
    else
      v51 = 7104878;
    if (a2)
      v52 = a2;
    else
      v52 = 0xE300000000000000;
    swift_bridgeObjectRetain(a2);
    v73 = sub_10001A820(v51, v52, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v70);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v48 + 22) = 1040;
    LODWORD(v73) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, (char *)&v73 + 4);
    *(_WORD *)(v48 + 28) = 2048;
    v53 = v71(v12, v20, v9);
    v54 = Date.timeIntervalSinceNow.getter(v53);
    v25(v12, v9);
    v73 = *(_QWORD *)&v54;
    v55 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v70);
    swift_release_n(a3);
    *(_WORD *)(v48 + 38) = 2082;
    v67 = v48 + 40;
    v56 = v71(v12, v20, v9);
    v57 = Date.description.getter(v56);
    v59 = v58;
    v25(v12, v9);
    v73 = sub_10001A820(v57, v59, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v55);
    swift_release_n(a3);
    swift_bridgeObjectRelease(v59);
    v60 = v66;
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v68, "Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}", (uint8_t *)v48, 0x30u);
    v61 = v69;
    swift_arrayDestroy(v69, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    v62 = v48;
    v22 = (uint64_t (*)(char *, char *, uint64_t, __n128))v71;
    swift_slowDealloc(v62, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a3);
  }
  v63 = (void *)objc_opt_self(REMError);
  v64 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v12, v20, v9);
  v65 = Date.timeIntervalSinceNow.getter(v64);
  v25(v12, v9);
  swift_willThrow(objc_msgSend(v63, "throttledErrorWithRemainingTimeInterval:", v65));
  v41 = v72;
LABEL_18:
  swift_bridgeObjectRelease(v41);
}

uint64_t sub_100426CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A650);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A650);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Double __swiftcall REMCDAlarmDateTrigger.generateNonce()()
{
  Swift::Double result;

  sub_1004273C0("REMCDAlarmDateTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}");
  return result;
}

double sub_100426D5C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  v1 = objc_msgSend(v0, "reminder");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "account");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "accountTypeHost");
      v6 = objc_msgSend(v5, "isCloudKit");

      if (v6)
      {
        v7 = sub_100427634();
        if ((v8 & 1) == 0)
        {
          v9 = v7;

          return *(double *)&v9;
        }
      }
      else
      {
        if (qword_1008374D0 != -1)
          swift_once(&qword_1008374D0, sub_100426CC0);
        v35 = type metadata accessor for Logger(0);
        sub_10001AAA8(v35, (uint64_t)qword_10084A650);
        v36 = v0;
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(12, -1);
          v40 = swift_slowAlloc(32, -1);
          v49 = v40;
          *(_DWORD *)v39 = 136446210;
          v41 = objc_msgSend(v36, "remObjectID");
          if (v41)
          {
            v42 = v41;
            v43 = objc_msgSend(v41, "description");

            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v46 = v45;

          }
          else
          {
            v44 = 7104878;
            v46 = 0xE300000000000000;
          }
          v48 = sub_10001A820(v44, v46, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "REMCDAlarm.generateNonce(): alarm does not belong to CK account, skip generateNonce() {alarmID: %{public}s}", v39, 0xCu);
          swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v40, -1, -1);
          swift_slowDealloc(v39, -1, -1);

        }
        else
        {

        }
      }
      v10 = kREMNonceUnset;

      return v10;
    }
    if (qword_1008374D0 != -1)
      swift_once(&qword_1008374D0, sub_100426CC0);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_10084A650);
    v24 = v0;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v49 = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = objc_msgSend(v24, "remObjectID");
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v29, "description");

        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

      }
      else
      {
        v32 = 7104878;
        v34 = 0xE300000000000000;
      }
      v48 = sub_10001A820(v32, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "REMCDAlarm.generateNonce(): alarm.reminder.account unexpectedly nil trying to call generateNonce() {alarmID: %{public}s}", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
    v10 = kREMNonceUnset;

  }
  else
  {
    if (qword_1008374D0 != -1)
      swift_once(&qword_1008374D0, sub_100426CC0);
    v11 = type metadata accessor for Logger(0);
    sub_10001AAA8(v11, (uint64_t)qword_10084A650);
    v12 = v0;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v49 = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = objc_msgSend(v12, "remObjectID");
      if (v17)
      {
        v18 = v17;
        v19 = objc_msgSend(v17, "description");

        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

      }
      else
      {
        v20 = 7104878;
        v22 = 0xE300000000000000;
      }
      v48 = sub_10001A820(v20, v22, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "REMCDAlarm.generateNonce(): alarm.reminder not set before trying to call generateNonce() {alarmID: %{public}s}", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    return kREMNonceUnset;
  }
  return v10;
}

Swift::Double __swiftcall REMCDAlarmTimeIntervalTrigger.generateNonce()()
{
  Swift::Double result;

  sub_1004273C0("REMCDAlarmTimeIntervalTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}");
  return result;
}

void sub_1004273C0(const char *a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend(v1, "alarm");
  if (v3)
  {
    v4 = v3;
    sub_100426D5C();

  }
  else
  {
    if (qword_1008374D0 != -1)
      swift_once(&qword_1008374D0, sub_100426CC0);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_10084A650);
    v6 = v1;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v18 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = objc_msgSend(v6, "remObjectID");
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(v11, "description");

        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

      }
      else
      {
        v16 = 0xE300000000000000;
        v14 = 7104878;
      }
      v17 = sub_10001A820(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100427634()
{
  void *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  id v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0;
  if (qword_100837010 != -1)
    swift_once(&qword_100837010, sub_10021EF78);
  v2 = qword_100871D40;
  if (!*(_QWORD *)(qword_100871D40 + 16)
    || (v3 = sub_10001A6DC(0xD000000000000011, 0x80000001006F45B0), (v4 & 1) == 0))
  {
    if (qword_1008374D0 != -1)
      swift_once(&qword_1008374D0, sub_100426CC0);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10084A650);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "REMAlarmCDIngestor: Fatal programming fault, was expecting to map dueDateComponents storage value key to CD value key", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
LABEL_12:

    return 0;
  }
  v5 = objc_msgSend(v1, "resolutionTokenMap", swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3 + 8)).n128_f64[0]);
  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "getTokenForKey:", v7, swift_bridgeObjectRelease().n128_f64[0]);

    if (v8)
    {
      objc_msgSend(v8, "generateNonce");
      v10 = v9;

      return v10;
    }
    if (qword_1008374D0 != -1)
      swift_once(&qword_1008374D0, sub_100426CC0);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10084A650);
    v30 = v1;
    v31 = v6;
    v32 = v30;
    v14 = v31;
    v33 = Logger.logObject.getter(v14);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(64, -1);
      v50 = v36;
      *(_DWORD *)v35 = 136446466;
      v37 = objc_msgSend(v32, "remObjectID");
      if (v37)
      {
        v38 = v37;
        v39 = objc_msgSend(v37, "description");

        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

      }
      else
      {
        v40 = 7104878;
        v42 = 0xE300000000000000;
      }
      v49 = sub_10001A820(v40, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

      *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v35 + 12) = 2082;
      v44 = -[NSObject getTokenKeys](v14, "getTokenKeys", v43);
      v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String);

      v46 = Array.description.getter(v45, &type metadata for String);
      v48 = v47;
      swift_bridgeObjectRelease();
      v49 = sub_10001A820(v46, v48, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "REMAlarmCDIngestor: Failed to find the resolution token of 'dueDateComponents' from reminder {reminderID: %{public}s, mapKeys: %{public}s}", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      return 0;
    }

    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (qword_1008374D0 != -1)
    swift_once(&qword_1008374D0, sub_100426CC0);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084A650);
  v18 = v1;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (!os_log_type_enabled(v19, v20))
  {

    return 0;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v22 = swift_slowAlloc(32, -1);
  v50 = v22;
  *(_DWORD *)v21 = 136446210;
  v23 = objc_msgSend(v18, "remObjectID");
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, "description");

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

  }
  else
  {
    v26 = 7104878;
    v28 = 0xE300000000000000;
  }
  v49 = sub_10001A820(v26, v28, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v19, v20, "REMAlarmCDIngestor: Failed to get resolution token map from reminder {reminderID: %{public}s}", v21, 0xCu);
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v21, -1, -1);

  return 0;
}

id static REMCDAccountListData.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

void *sub_100427CC0()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_100427CCC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for REMCDAccountListData();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100427D0C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(_BYTE *, _QWORD, __n128);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  _BYTE v27[8];
  _QWORD *v28;

  v7 = sub_10001A630(a3);
  v8 = sub_1000A5F84(a4, a3, (uint64_t)&protocol conformance descriptor for OrderedDictionary<A, B>);
  v9 = dispatch thunk of Collection.count.getter(v7, v8);
  v10 = _swiftEmptyArrayStorage;
  if (!v9)
    return (uint64_t)v10;
  v11 = v9;
  v28 = _swiftEmptyArrayStorage;
  sub_1001C221C(0, v9 & ~(v9 >> 63), 0);
  v10 = _swiftEmptyArrayStorage;
  result = dispatch thunk of Collection.startIndex.getter(v7);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v22 = v8;
    do
    {
      v13 = (void (*)(_BYTE *, _QWORD, __n128))dispatch thunk of Collection.subscript.read(v26, v27, v7, v8);
      v16 = *v14;
      v15 = v14[1];
      v17 = v14[4];
      v24 = v14[3];
      v25 = v14[2];
      swift_retain();
      v18 = swift_bridgeObjectRetain(v17);
      v13(v26, 0, v18);
      v28 = v10;
      v20 = v10[2];
      v19 = v10[3];
      if (v20 >= v19 >> 1)
      {
        sub_1001C221C(v19 > 1, v20 + 1, 1);
        v10 = v28;
      }
      v10[2] = v20 + 1;
      v21 = &v10[7 * v20];
      v21[4] = v16;
      v21[5] = v15;
      v21[6] = v25;
      v21[7] = v24;
      v21[8] = v17;
      v21[9] = 0;
      *((_BYTE *)v21 + 80) = a5;
      v8 = v22;
      dispatch thunk of Collection.formIndex(after:)(v27, v7, v22);
      --v11;
    }
    while (v11);
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100427EC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(_BYTE *, _QWORD, __n128);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  _BYTE v21[8];
  _QWORD *v22;

  v2 = sub_10001A630(&qword_10084A8B0);
  v3 = sub_1000A5F84(&qword_10084A908, &qword_10084A8B0, (uint64_t)&protocol conformance descriptor for OrderedDictionary<A, B>);
  v4 = dispatch thunk of Collection.count.getter(v2, v3);
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v6 = v4;
  v22 = _swiftEmptyArrayStorage;
  sub_1001C221C(0, v4 & ~(v4 >> 63), 0);
  v5 = _swiftEmptyArrayStorage;
  result = dispatch thunk of Collection.startIndex.getter(v2);
  if ((v6 & 0x8000000000000000) == 0)
  {
    do
    {
      v8 = (void (*)(_BYTE *, _QWORD, __n128))dispatch thunk of Collection.subscript.read(v20, v21, v2, v3);
      v10 = *v9;
      v18 = v9[2];
      v19 = v9[1];
      v11 = v9[4];
      v17 = v9[3];
      v12 = swift_bridgeObjectRetain(v11);
      v8(v20, 0, v12);
      v22 = v5;
      v13 = a1;
      v15 = v5[2];
      v14 = v5[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001C221C(v14 > 1, v15 + 1, 1);
        v5 = v22;
      }
      v5[2] = v15 + 1;
      v16 = &v5[7 * v15];
      v16[4] = v10;
      v16[5] = v19;
      v16[6] = v18;
      v16[7] = v17;
      v16[8] = v11;
      v16[9] = 0;
      *((_BYTE *)v16 + 80) = 4;
      dispatch thunk of Collection.formIndex(after:)(v21, v2, v3);
      --v6;
      a1 = v13;
    }
    while (v6);
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100428074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  void (*v6)(_BYTE *, _QWORD, __n128);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  _BYTE v18[8];
  _QWORD *v19;

  v0 = sub_10001A630(&qword_10084A8A8);
  v1 = sub_1000A5F84(&qword_10084A900, &qword_10084A8A8, (uint64_t)&protocol conformance descriptor for OrderedDictionary<A, B>);
  v2 = dispatch thunk of Collection.count.getter(v0, v1);
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v4 = v2;
  v19 = _swiftEmptyArrayStorage;
  sub_1001C221C(0, v2 & ~(v2 >> 63), 0);
  v3 = _swiftEmptyArrayStorage;
  result = dispatch thunk of Collection.startIndex.getter(v0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    do
    {
      v6 = (void (*)(_BYTE *, _QWORD, __n128))dispatch thunk of Collection.subscript.read(v17, v18, v0, v1);
      v8 = v7[1];
      v16 = v7[2];
      v9 = v7[5];
      v14 = *v7;
      v15 = v7[4];
      swift_bridgeObjectRetain(v8);
      v10 = swift_bridgeObjectRetain(v9);
      v6(v17, 0, v10);
      v19 = v3;
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001C221C(v11 > 1, v12 + 1, 1);
        v3 = v19;
      }
      v3[2] = v12 + 1;
      v13 = &v3[7 * v12];
      v13[4] = v14;
      v13[5] = v8;
      v13[6] = v16;
      v13[7] = v16;
      v13[8] = v15;
      v13[9] = v9;
      *((_BYTE *)v13 + 80) = 5;
      dispatch thunk of Collection.formIndex(after:)(v18, v0, v1);
      --v4;
    }
    while (v4);
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100428228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  void (*v28)(char *, uint64_t, __n128);
  uint64_t v29;
  void (*v31)(char *, uint64_t);
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  char v38[24];

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - v6;
  URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x8000000100703F70);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion);
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
  swift_beginAccess(v9, v38, 0, 0);
  v10 = *v9;
  v11 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = swift_bridgeObjectRetain(v10);
  v13 = JSONEncoder.init()(v12);
  v37[0] = v8;
  v37[1] = v10;
  v14 = sub_100432374();
  v15 = dispatch thunk of JSONEncoder.encode<A>(_:)(v37, &type metadata for RDCoreBehaviorModel.Feedback, v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  swift_release(v13);
  Data.write(to:options:)(v7, 0, v15, v17);
  if (qword_1008374D8 != -1)
    swift_once(&qword_1008374D8, sub_10042ABBC);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_10084A670);
  v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v34 = v17;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v33 = v24;
    v37[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v32 = v23 + 4;
    v25 = URL.absoluteString.getter(v24);
    v35 = sub_10001A820(v25, v26, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    v27 = swift_bridgeObjectRelease();
    v28 = *(void (**)(char *, uint64_t, __n128))(v2 + 8);
    v28(v4, v1, v27);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDCoreBehaviorModel: New feedback info saved to {%s}", v23, 0xCu);
    v29 = v33;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);
    sub_1000A71C8(v15, v34);

    ((void (*)(char *, uint64_t))v28)(v7, v1);
  }
  else
  {
    sub_1000A71C8(v15, v17);

    v31 = *(void (**)(char *, uint64_t))(v2 + 8);
    v31(v4, v1);
    v31(v7, v1);
  }
  return 1;
}

uint64_t sub_1004287D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString *(__cdecl **v19)(SEL);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  NSString v38;
  uint64_t v39;
  NSString *(__cdecl **v40)(SEL);
  uint64_t v41;
  NSString *(__cdecl **v42)(SEL);
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  char v48;
  uint64_t result;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  _QWORD v60[6];
  uint64_t v61;

  v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_10001A630(&qword_100844630);
    v10 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
    v11 = Set.Iterator.init(_cocoa:)(v60, v8, v9, v10);
    v6 = v60[0];
    v54 = v60[1];
    v13 = v60[2];
    v12 = v60[3];
    v14 = v60[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v54 = a1 + 56;
    v13 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v18 = 0;
  v53 = (unint64_t)(v13 + 64) >> 6;
  v19 = &NSStringFromSelector_ptr;
LABEL_11:
  v52 = v18;
  v20 = v12;
  v21 = v14;
  while (v6 < 0)
  {
    v25 = __CocoaSet.Iterator.next()(v11);
    if (!v25)
      goto LABEL_58;
    v26 = v25;
    v61 = v25;
    swift_unknownObjectRetain(v25);
    v27 = sub_10001A630(&qword_100844630);
    swift_dynamicCast(&v58, &v61, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
    v28 = v58;
    swift_unknownObjectRelease(v26);
    v24 = v20;
    v22 = v21;
    if (!v28)
      goto LABEL_58;
LABEL_38:
    v57 = v24;
    v32 = objc_msgSend(v28, "type");
    v33 = objc_msgSend(v32, "identifier");

    if (v33)
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v21 = v22;
    v37 = (void *)objc_opt_self(v19[16]);
    v38 = String._bridgeToObjectiveC()();
    v39 = sub_1000151B0(0, a4, a5);
    v5 = objc_msgSend(v37, "taskSpecificItemWithIdentifier:valueClass:", v38, swift_getObjCClassFromMetadata(v39));

    if (!v5)
      goto LABEL_60;
    v40 = v19;
    v41 = v6;
    v42 = v40;
    v43 = objc_opt_self(v40[16]);
    v44 = (void *)swift_dynamicCastObjCClass(v5, v43);
    if (!v44)
      goto LABEL_61;
    v45 = objc_msgSend(v44, "identifier");

    if (!v45)
    {
      v6 = v41;
      if (!v36)
        goto LABEL_52;
LABEL_13:

      v5 = v36;
      goto LABEL_14;
    }
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v5 = v47;

    v6 = v41;
    if (v36)
    {
      if (!v5)
        goto LABEL_13;
      v19 = v42;
      if (v34 == v46 && v36 == v5)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_54:
        v14 = v21;
        v12 = v57;
LABEL_55:
        v18 = v52 + 1;
        if (!__OFADD__(v52, 1))
          goto LABEL_11;
        __break(1u);
LABEL_58:
        sub_1000C6560(v6);
        return v52;
      }
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v46, v5, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v57;
      v20 = v57;
      v14 = v21;
      if ((v48 & 1) != 0)
        goto LABEL_55;
    }
    else
    {
      if (!v5)
      {
LABEL_52:

        v19 = v42;
        goto LABEL_54;
      }

LABEL_14:
      v19 = v42;
      swift_bridgeObjectRelease();
      v20 = v57;
    }
  }
  if (v21)
  {
    v22 = (v21 - 1) & v21;
    v23 = __clz(__rbit64(v21)) | (v20 << 6);
    v24 = v20;
LABEL_37:
    v28 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v23);
    if (!v28)
      goto LABEL_58;
    goto LABEL_38;
  }
  v29 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v29 >= v53)
      goto LABEL_58;
    v30 = *(_QWORD *)(v54 + 8 * v29);
    v24 = v20 + 1;
    if (!v30)
    {
      v24 = v20 + 2;
      if (v20 + 2 >= v53)
        goto LABEL_58;
      v30 = *(_QWORD *)(v54 + 8 * v24);
      if (!v30)
      {
        v24 = v20 + 3;
        if (v20 + 3 >= v53)
          goto LABEL_58;
        v30 = *(_QWORD *)(v54 + 8 * v24);
        if (!v30)
        {
          v24 = v20 + 4;
          if (v20 + 4 >= v53)
            goto LABEL_58;
          v30 = *(_QWORD *)(v54 + 8 * v24);
          if (!v30)
          {
            v24 = v20 + 5;
            if (v20 + 5 >= v53)
              goto LABEL_58;
            v30 = *(_QWORD *)(v54 + 8 * v24);
            if (!v30)
            {
              v31 = v20 + 6;
              while (v53 != v31)
              {
                v30 = *(_QWORD *)(v54 + 8 * v31++);
                if (v30)
                {
                  v24 = v31 - 1;
                  goto LABEL_36;
                }
              }
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_36:
    v22 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v24 << 6);
    goto LABEL_37;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v50._object = (void *)0x8000000100704100;
  v50._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v50);
  v61 = (uint64_t)v5;
  _print_unlocked<A, B>(_:_:)(&v61, &v58, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

  v51._countAndFlagsBits = 125;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v58, v59, "remindd/RDCoreBehaviorModel.swift", 33, 2, 663, 0);
  __break(1u);
  return result;
}

uint64_t sub_100428D2C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  unint64_t v13;
  _BYTE v14[16];

  v2 = v1;
  v4 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion) >= a1)
  {
    if (qword_1008374D8 != -1)
      swift_once(&qword_1008374D8, sub_10042ABBC);
    v7 = type metadata accessor for Logger(0);
    sub_10001AAA8(v7, (uint64_t)qword_10084A670);
    v8 = swift_retain();
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      *(_DWORD *)v11 = 134218240;
      v13 = *(_QWORD *)(v2 + v4);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14);
      swift_release(v2);
      *(_WORD *)(v11 + 12) = 2048;
      v13 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDCoreBehaviorModel: Current feedback version {%lu}, skipping reset to version {%lu}", (uint8_t *)v11, 0x16u);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    v6 = 0;
  }
  else
  {
    v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
    swift_beginAccess(v2 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules, &v13, 1, 0);
    *v5 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + v4) = a1;
    v6 = sub_100428228();
  }
  return v6 & 1;
}

double sub_100428EDC(void *a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Class isa;
  Class v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, id, uint64_t);
  objc_class *v32;
  char *v33;
  char *v34;
  id v35;
  id v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  void *v69;
  NSString v70;
  uint64_t v71;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD aBlock[5];
  uint64_t v97;
  objc_super v98;
  NSURL v99;

  v84 = a4;
  v79 = a3;
  v82 = a2;
  v81 = a1;
  v8 = *v5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  __chkstk_darwin(v9);
  v88 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v86 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  __chkstk_darwin(v11);
  v85 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v83 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v94 = (char *)&v73 - v17;
  v19 = type metadata accessor for REMSuggestedAttributeInputDataFrame(0, v18);
  v80 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v22 - 8);
  v92 = v22;
  __chkstk_darwin(v22);
  v93 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000151B0(0, (unint64_t *)&unk_10084A870, BMMiningTask_ptr);
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "respondsToSelector:", "supportsTaskSpecificEvents")&& objc_msgSend((id)objc_opt_self(BMMiningTask), "supportsTaskSpecificEvents"))
  {
    v76 = v6;
    v75 = v8;
    URL.appendingPathComponent(_:)(0xD00000000000001ALL, 0x8000000100704170);
    sub_100432784();
    sub_100432850();
    v77 = v13;
    v74 = objc_allocWithZone((Class)BMMiningTask);
    URL._bridgeToObjectiveC()(&v99);
    v26 = v25;
    v78 = v14;
    sub_10001A630(&qword_10083B640);
    sub_1000A5F84(&qword_10084A880, &qword_10083B640, (uint64_t)&protocol conformance descriptor for NSObject);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v28 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v74, "initWithStorageURL:types:targetTypes:samplingInterval:absoluteSupport:confidence:", v26, isa, v28, v79, 2.0, a5);
    v79 = v29;

    v30 = v80;
    v31 = *(void (**)(char *, id, uint64_t))(v80 + 16);
    v31(v21, v81, v19);
    v32 = (objc_class *)type metadata accessor for RDCoreBehaviorModelTrainingDelegate(0);
    v33 = (char *)objc_allocWithZone(v32);
    *(_QWORD *)&v33[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer] = 0;
    v31(&v33[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_trainingDataFrame], v21, v19);
    *(_QWORD *)&v33[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_intentWords] = v82;
    v34 = &v33[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics];
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = 0;
    *((_QWORD *)v34 + 3) = -2;
    v98.receiver = v33;
    v98.super_class = v32;
    swift_retain();
    v35 = objc_msgSendSuper2(&v98, "init");
    v81 = v35;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v19);
    v36 = objc_msgSend(v29, "setDelegate:", v35);
    v37 = v94;
    Date.init()(v36);
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v82 = static OS_dispatch_queue.main.getter(v38);
    v39 = v78;
    v40 = v83;
    v41 = v77;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v83, v37, v77);
    v42 = *(unsigned __int8 *)(v39 + 80);
    v43 = (v42 + 24) & ~v42;
    v44 = (v15 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    v48 = swift_allocObject(&unk_1007F4018, v47 + 8, v42 | 7);
    *(_QWORD *)(v48 + 16) = v95;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v48 + v43, v40, v41);
    v49 = v79;
    *(_QWORD *)(v48 + v44) = v79;
    v50 = v81;
    *(_QWORD *)(v48 + v45) = v81;
    *(_QWORD *)(v48 + v46) = v84;
    *(_QWORD *)(v48 + v47) = v75;
    aBlock[4] = sub_100435670;
    v97 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F4030;
    v51 = _Block_copy(aBlock);
    v52 = v97;
    swift_retain();
    swift_retain();
    v53 = v49;
    v54 = v50;
    v55 = swift_release(v52);
    v56 = v85;
    static DispatchQoS.unspecified.getter(v55);
    aBlock[0] = _swiftEmptyArrayStorage;
    v57 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v58 = sub_10001A630((uint64_t *)&unk_100838000);
    v59 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    v60 = v88;
    v61 = v58;
    v62 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v61, v59, v90, v57);
    v63 = (void *)v82;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v60, v51);
    _Block_release(v51);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v60, v62);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v56, v87);
    if (qword_1008374D8 != -1)
      swift_once(&qword_1008374D8, sub_10042ABBC);
    v64 = type metadata accessor for Logger(0);
    v65 = sub_10001AAA8(v64, (uint64_t)qword_10084A670);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.default.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "RDCoreBehaviorModel: CoreBehavior mining task will begin mining", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }

    objc_msgSend(v53, "mine");
    (*(void (**)(char *, uint64_t))(v78 + 8))(v94, v77);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
    a5 = *(double *)&v54[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics + 16];

  }
  else
  {
    v69 = (void *)objc_opt_self(REMError);
    v70 = String._bridgeToObjectiveC()();
    objc_msgSend(v69, "internalErrorWithDebugDescription:", v70);

    swift_willThrow(v71);
  }
  return a5;
}

_QWORD *sub_1004296A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t i;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  double (*__ptr32 *v73)();
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  _QWORD *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  id v105;
  void *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145[24];
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149[3];
  _QWORD v150[2];

  v6 = v5;
  v143 = a4;
  v11 = sub_10001A630(&qword_100841CC8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000151B0(0, (unint64_t *)&unk_10084A870, BMMiningTask_ptr);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "respondsToSelector:", "supportsTaskSpecificEvents"))return _swiftEmptyArrayStorage;
  v142 = a1;
  v16 = _swiftEmptyArrayStorage;
  if (objc_msgSend((id)objc_opt_self(BMMiningTask), "supportsTaskSpecificEvents"))
  {
    v137 = v14;
    v138 = v12;
    v139 = v11;
    HIDWORD(v134) = a5;
    v17 = sub_10001A630(&qword_100844640);
    v18 = (_QWORD *)swift_allocObject(v17, 56, 7);
    *((_OWORD *)v18 + 1) = xmmword_1006A3C00;
    v19 = REMSuggestedAttributeInput.list.getter(v18);
    v20 = REMSuggestedList.listIdentifier.getter(v19);
    v22 = v21;
    v23 = swift_release(v19);
    v18[4] = v20;
    v18[5] = v22;
    *((_BYTE *)v18 + 48) = 2;
    v150[0] = v18;
    v24 = REMSuggestedAttributeInput.dueDayOfWeek.getter(v23);
    v25 = REMSuggestedWeekDay.value.getter();
    v26 = (_QWORD *)swift_release(v24);
    if ((unint64_t)(v25 - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      v28 = v18[2];
      v27 = v18[3];
      if (v28 >= v27 >> 1)
      {
        v26 = sub_1002CA218((_QWORD *)(v27 > 1), v28 + 1, 1, v18);
        v18 = v26;
      }
      v18[2] = v28 + 1;
      v29 = &v18[3 * v28];
      v29[4] = v25;
      v29[5] = 0;
      *((_BYTE *)v29 + 48) = 3;
      v150[0] = v18;
    }
    v30 = REMSuggestedAttributeInput.location.getter(v26);
    if ((REMSuggestedLocation.isSpecificLocation.getter() & 1) != 0)
    {
      v31 = v18[2];
      v32 = v18[3];
      swift_retain();
      if (v31 >= v32 >> 1)
        v18 = sub_1002CA218((_QWORD *)(v32 > 1), v31 + 1, 1, v18);
      v18[2] = v31 + 1;
      v33 = &v18[3 * v31];
      v33[4] = v30;
      v33[5] = 0;
      *((_BYTE *)v33 + 48) = 4;
      v150[0] = v18;
    }
    if (a3)
    {
      v34 = v18[2];
      v35 = v18[3];
      swift_bridgeObjectRetain(a3);
      if (v34 >= v35 >> 1)
        v18 = sub_1002CA218((_QWORD *)(v35 > 1), v34 + 1, 1, v18);
      v18[2] = v34 + 1;
      v36 = &v18[3 * v34];
      v36[4] = a2;
      v36[5] = a3;
      *((_BYTE *)v36 + 48) = 5;
      v150[0] = v18;
    }
    if ((REMSuggestedAttributeInput.flagged.getter() & 1) != 0)
    {
      v38 = v18[2];
      v37 = v18[3];
      if (v38 >= v37 >> 1)
        v18 = sub_1002CA218((_QWORD *)(v37 > 1), v38 + 1, 1, v18);
      v18[2] = v38 + 1;
      v39 = &v18[3 * v38];
      *((_OWORD *)v39 + 2) = xmmword_1006BC310;
      *((_BYTE *)v39 + 48) = 7;
      v150[0] = v18;
    }
    v40 = REMSuggestedAttributeInput.priority.getter();
    v136 = v30;
    v140 = v6;
    if (v40)
    {
      v41 = REMSuggestedAttributeInput.priority.getter();
      v43 = v18[2];
      v42 = v18[3];
      if (v43 >= v42 >> 1)
        v18 = sub_1002CA218((_QWORD *)(v42 > 1), v43 + 1, 1, v18);
      v18[2] = v43 + 1;
      v44 = &v18[3 * v43];
      v44[4] = v41;
      v44[5] = 0;
      *((_BYTE *)v44 + 48) = 8;
      v150[0] = v18;
    }
    v45 = REMSuggestedAttributeInput.tags.getter();
    v46 = v45;
    v47 = 0;
    v48 = 1 << *(_BYTE *)(v45 + 32);
    v49 = -1;
    if (v48 < 64)
      v49 = ~(-1 << v48);
    v50 = *(_QWORD *)(v45 + 56);
    v144 = v45 + 56;
    v51 = v49 & v50;
    v52 = (unint64_t)(v48 + 63) >> 6;
    if ((v49 & v50) == 0)
      goto LABEL_27;
    while (1)
    {
      v53 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      for (i = v53 | (v47 << 6); ; i = __clz(__rbit64(v56)) + (v47 << 6))
      {
        v58 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * i);
        v60 = *v58;
        v59 = v58[1];
        v62 = v18[2];
        v61 = v18[3];
        swift_bridgeObjectRetain(v59);
        if (v62 >= v61 >> 1)
          v18 = sub_1002CA218((_QWORD *)(v61 > 1), v62 + 1, 1, v18);
        v18[2] = v62 + 1;
        v63 = &v18[3 * v62];
        v63[4] = v60;
        v63[5] = v59;
        *((_BYTE *)v63 + 48) = 1;
        v150[0] = v18;
        if (v51)
          break;
LABEL_27:
        v55 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_71;
        if (v55 >= v52)
          goto LABEL_46;
        v56 = *(_QWORD *)(v144 + 8 * v55);
        ++v47;
        if (!v56)
        {
          v47 = v55 + 1;
          if (v55 + 1 >= v52)
            goto LABEL_46;
          v56 = *(_QWORD *)(v144 + 8 * v47);
          if (!v56)
          {
            v47 = v55 + 2;
            if (v55 + 2 >= v52)
              goto LABEL_46;
            v56 = *(_QWORD *)(v144 + 8 * v47);
            if (!v56)
            {
              v57 = v55 + 3;
              if (v57 >= v52)
                goto LABEL_46;
              v56 = *(_QWORD *)(v144 + 8 * v57);
              if (!v56)
              {
                while (1)
                {
                  v47 = v57 + 1;
                  if (__OFADD__(v57, 1))
                    goto LABEL_72;
                  if (v47 >= v52)
                    break;
                  v56 = *(_QWORD *)(v144 + 8 * v47);
                  ++v57;
                  if (v56)
                    goto LABEL_40;
                }
LABEL_46:
                v64 = swift_release(v46);
                v47 = REMSuggestedAttributeInput.contact.getter(v64);
                if ((REMSuggestedContact.isValid.getter() & 1) != 0)
                {
                  v65 = v18[2];
                  v66 = v18[3];
                  swift_retain();
                  if (v65 >= v66 >> 1)
                    v18 = sub_1002CA218((_QWORD *)(v66 > 1), v65 + 1, 1, v18);
                  v18[2] = v65 + 1;
                  v67 = &v18[3 * v65];
                  v67[4] = v47;
                  v67[5] = 0;
                  *((_BYTE *)v67 + 48) = 0;
                  v150[0] = v18;
                }
                if (qword_1008374D8 != -1)
                  goto LABEL_73;
                while (1)
                {
                  v68 = type metadata accessor for Logger(0);
                  v69 = sub_10001AAA8(v68, (uint64_t)qword_10084A670);
                  v70 = Logger.logObject.getter(v69);
                  v71 = static os_log_type_t.default.getter(v70);
                  v72 = os_log_type_enabled(v70, v71);
                  v73 = &off_1006A3000;
                  v141 = v69;
                  v135 = v47;
                  if (v72)
                  {
                    v74 = (uint8_t *)swift_slowAlloc(12, -1);
                    v75 = swift_slowAlloc(32, -1);
                    v149[0] = v75;
                    *(_DWORD *)v74 = 136315138;
                    swift_beginAccess(v150, v145, 0, 0);
                    swift_bridgeObjectRetain(v150[0]);
                    v77 = Array.description.getter(v76, &type metadata for RDCoreBehaviorModel.Context);
                    v79 = v78;
                    v73 = &off_1006A3000;
                    swift_bridgeObjectRelease();
                    v147 = (_QWORD *)sub_10001A820(v77, v79, v149);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v70, v71, "RDCoreBehaviorModel: corebehavior context: %s", v74, 0xCu);
                    swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v75, -1, -1);
                    swift_slowDealloc(v74, -1, -1);
                  }

                  v80 = v140;
                  v81 = v140 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
                  v82 = swift_beginAccess(v140 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules, v149, 0, 0);
                  v83 = v137;
                  v84 = v138;
                  v85 = v139;
                  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v138 + 16))(v137, v81, v139, v82);
                  v86 = OrderedDictionary.values.getter(v85);
                  (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
                  swift_retain();
                  sub_100432910(v86, v150);
                  v88 = v87;
                  swift_bridgeObjectRelease();
                  swift_release(v80);
                  swift_bridgeObjectRetain_n(v88, 2);
                  v90 = Logger.logObject.getter(v89);
                  v91 = static os_log_type_t.default.getter(v90);
                  v47 = (unint64_t)v88 >> 62;
                  if (os_log_type_enabled(v90, v91))
                  {
                    v92 = (uint8_t *)swift_slowAlloc(12, -1);
                    *(_DWORD *)v92 = 134349056;
                    if (v47)
                    {
                      if (v88 < 0)
                        v133 = v88;
                      else
                        v133 = v88 & 0xFFFFFFFFFFFFFF8;
                      swift_bridgeObjectRetain(v88);
                      v93 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v133);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      v93 = *(_QWORD **)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
                    }
                    swift_bridgeObjectRelease();
                    v147 = v93;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v90, v91, "RDCoreBehaviorModel: number of matching rules: %{public}ld", v92, 0xCu);
                    swift_slowDealloc(v92, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v88, 2);
                  }
                  swift_bridgeObjectRetain_n(v88, 2);
                  v95 = Logger.logObject.getter(v94);
                  v96 = static os_log_type_t.default.getter(v95);
                  if (os_log_type_enabled(v95, v96))
                  {
                    v144 = (unint64_t)v88 >> 62;
                    v97 = (uint8_t *)swift_slowAlloc(12, -1);
                    v98 = (_QWORD *)swift_slowAlloc(32, -1);
                    v147 = v98;
                    *(_DWORD *)v97 = 136315138;
                    v99 = sub_1000151B0(0, &qword_10083FEB0, BMRule_ptr);
                    v100 = Array.description.getter(v88, v99);
                    v146 = sub_10001A820(v100, v101, (uint64_t *)&v147);
                    v47 = v144;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
                    swift_bridgeObjectRelease_n(v88, 2);
                    v73 = &off_1006A3000;
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v95, v96, "RDCoreBehaviorModel: matching rules:\n %s", v97, 0xCu);
                    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v98, -1, -1);
                    swift_slowDealloc(v97, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v88, 2);
                  }
                  v147 = _swiftEmptyArrayStorage;
                  if (v47)
                  {
                    if (v88 < 0)
                      v117 = v88;
                    else
                      v117 = v88 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v143);
                    swift_bridgeObjectRetain(v88);
                    v102 = _CocoaArrayWrapper.endIndex.getter(v117);
                    if (!v102)
                    {
LABEL_78:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v116 = _swiftEmptyArrayStorage;
LABEL_79:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain_n(v116, 2);
                      v119 = Logger.logObject.getter(v118);
                      v120 = static os_log_type_t.default.getter(v119);
                      if (os_log_type_enabled(v119, v120))
                      {
                        v121 = (uint8_t *)swift_slowAlloc(12, -1);
                        v122 = (_QWORD *)swift_slowAlloc(32, -1);
                        v147 = v122;
                        *(_DWORD *)v121 = *((_QWORD *)v73 + 369);
                        v123 = Array.description.getter(v116, &type metadata for RDCoreBehaviorModel.Prediction);
                        v146 = sub_10001A820(v123, v124, (uint64_t *)&v147);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
                        swift_bridgeObjectRelease_n(v116, 2);
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v119, v120, "RDCoreBehaviorModel: all corebehavior predictions: %s", v121, 0xCu);
                        swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
                        swift_slowDealloc(v122, -1, -1);
                        swift_slowDealloc(v121, -1, -1);

                      }
                      else
                      {

                        swift_bridgeObjectRelease_n(v116, 2);
                      }
                      v16 = sub_10042D71C(2, (uint64_t)v116);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain_n(v16, 2);
                      v126 = Logger.logObject.getter(v125);
                      v127 = static os_log_type_t.default.getter(v126);
                      if (os_log_type_enabled(v126, v127))
                      {
                        v128 = (uint8_t *)swift_slowAlloc(12, -1);
                        v129 = (_QWORD *)swift_slowAlloc(32, -1);
                        v147 = v129;
                        *(_DWORD *)v128 = *((_QWORD *)v73 + 369);
                        v130 = Array.description.getter(v16, &type metadata for RDCoreBehaviorModel.Prediction);
                        v146 = sub_10001A820(v130, v131, (uint64_t *)&v147);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
                        swift_bridgeObjectRelease_n(v16, 2);
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v126, v127, "RDCoreBehaviorModel: top corebehavior predictions: %s", v128, 0xCu);
                        swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
                        swift_slowDealloc(v129, -1, -1);
                        swift_slowDealloc(v128, -1, -1);
                        swift_release(v135);
                        swift_release(v136);

                      }
                      else
                      {

                        swift_bridgeObjectRelease_n(v16, 2);
                        swift_release(v135);
                        swift_release(v136);
                      }
                      swift_bridgeObjectRelease();
                      return v16;
                    }
                  }
                  else
                  {
                    v102 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain(v143);
                    swift_bridgeObjectRetain(v88);
                    if (!v102)
                      goto LABEL_78;
                  }
                  v144 = v88;
                  v142 = v88 & 0xC000000000000001;
                  v103 = 4;
                  v104 = BYTE4(v134) & 1;
                  while (1)
                  {
                    v105 = v142
                         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v103 - 4, v144)
                         : *(id *)(v144 + 8 * v103);
                    v106 = v105;
                    v107 = v103 - 3;
                    if (__OFADD__(v103 - 4, 1))
                      break;
                    v108 = objc_msgSend(v105, "consequent");
                    v109 = sub_10001A630(&qword_100844630);
                    v110 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
                    v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v108, v109, v110);

                    v111 = v102;
                    v112 = v143;
                    swift_bridgeObjectRetain(v143);
                    v113 = v106;
                    sub_100432BD0(v47, v104, v113, v112);
                    v115 = v114;
                    swift_bridgeObjectRelease();

                    v102 = v111;
                    swift_bridgeObjectRelease();
                    sub_1001E2D28(v115);
                    ++v103;
                    if (v107 == v111)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v116 = v147;
                      v73 = &off_1006A3000;
                      goto LABEL_79;
                    }
                  }
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  swift_once(&qword_1008374D8, sub_10042ABBC);
                }
              }
              v47 = v57;
            }
          }
        }
LABEL_40:
        v51 = (v56 - 1) & v56;
      }
    }
  }
  return v16;
}

void sub_10042A49C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t *v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t inited;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  double v36;
  double v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  double i;
  unint64_t v45;
  unint64_t v46;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  char v62[48];
  uint64_t v63[3];

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Date.init()(v12);
  v14 = Date.timeIntervalSince1970.getter(v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v15 = a3 * 0.05;
  v16 = (uint64_t *)(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
  swift_beginAccess(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules, v63, 32, 0);
  v17 = *v16;
  if (*(_QWORD *)(*v16 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v18 = sub_10001A6DC(a1, a2);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_endAccess(v63);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease();
      v21 = sub_1004330E8(v20, v14);
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native(v21);
      v63[0] = (uint64_t)v21;
      sub_10028D784(v22, v15, v14);
      v23 = v63[0];
      swift_bridgeObjectRelease();
      swift_beginAccess(v16, v63, 33, 0);
      swift_bridgeObjectRetain(a2);
      swift_isUniquelyReferenced_nonNull_native(*v16);
      v25 = v24;
      v59 = *v16;
      *v16 = 0x8000000000000000;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess(v63);
  v26 = sub_10001A630((uint64_t *)&unk_10084A890);
  inited = swift_initStackObject(v26, v62);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(double *)(inited + 32) = v14;
  *(double *)(inited + 40) = v15;
  v23 = sub_1002E6EE4(inited);
  swift_setDeallocating(inited);
  swift_beginAccess(v16, v63, 33, 0);
  swift_bridgeObjectRetain(a2);
  swift_isUniquelyReferenced_nonNull_native(*v16);
  v25 = v28;
  v59 = *v16;
  *v16 = 0x8000000000000000;
LABEL_6:
  sub_10028D770(v23, a1, a2, v25);
  *v16 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v63);
  swift_beginAccess(v16, v63, 32, 0);
  v29 = *v16;
  if (!*(_QWORD *)(*v16 + 16))
  {
LABEL_35:
    swift_endAccess(v63);
    return;
  }
  swift_bridgeObjectRetain(a2);
  v30 = sub_10001A6DC(a1, a2);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_endAccess(v63);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  v33 = v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
  swift_beginAccess(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules, v63, 32, 0);
  v59 = a1;
  v60 = a2;
  swift_bridgeObjectRetain(a2);
  v34 = sub_10001A630(&qword_100841CC8);
  OrderedDictionary.subscript.getter(&v61, &v59, v34);
  swift_bridgeObjectRelease();
  v35 = v61;
  if (!v61)
  {
    swift_endAccess(v63);
    swift_bridgeObjectRelease();
    return;
  }
  swift_endAccess(v63);
  objc_msgSend(v35, "confidence");
  v37 = v36;
  v38 = 0;
  v39 = v32 + 64;
  v40 = 1 << *(_BYTE *)(v32 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & *(_QWORD *)(v32 + 64);
  v43 = (unint64_t)(v40 + 63) >> 6;
  for (i = 0.0; ; i = i + *(double *)(*(_QWORD *)(v32 + 56) + 8 * v46))
  {
    if (v42)
    {
      v45 = __clz(__rbit64(v42));
      v42 &= v42 - 1;
      v46 = v45 | (v38 << 6);
      continue;
    }
    if (__OFADD__(v38++, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v38 >= v43)
      goto LABEL_36;
    v48 = *(_QWORD *)(v39 + 8 * v38);
    if (!v48)
      break;
LABEL_29:
    v50 = __clz(__rbit64(v48));
    v42 = (v48 - 1) & v48;
    v46 = v50 + (v38 << 6);
  }
  v49 = v38 + 1;
  if (v38 + 1 >= v43)
    goto LABEL_36;
  v48 = *(_QWORD *)(v39 + 8 * v49);
  if (v48)
    goto LABEL_28;
  v49 = v38 + 2;
  if (v38 + 2 >= v43)
    goto LABEL_36;
  v48 = *(_QWORD *)(v39 + 8 * v49);
  if (v48)
    goto LABEL_28;
  v49 = v38 + 3;
  if (v38 + 3 >= v43)
    goto LABEL_36;
  v48 = *(_QWORD *)(v39 + 8 * v49);
  if (v48)
    goto LABEL_28;
  v49 = v38 + 4;
  if (v38 + 4 >= v43)
    goto LABEL_36;
  v48 = *(_QWORD *)(v39 + 8 * v49);
  if (v48)
  {
LABEL_28:
    v38 = v49;
    goto LABEL_29;
  }
  v49 = v38 + 5;
  if (v38 + 5 < v43)
  {
    v48 = *(_QWORD *)(v39 + 8 * v49);
    if (!v48)
    {
      while (1)
      {
        v38 = v49 + 1;
        if (__OFADD__(v49, 1))
          break;
        if (v38 >= v43)
          goto LABEL_36;
        v48 = *(_QWORD *)(v39 + 8 * v38);
        ++v49;
        if (v48)
          goto LABEL_29;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      swift_once(&qword_1008374D8, sub_10042ABBC);
      goto LABEL_38;
    }
    goto LABEL_28;
  }
LABEL_36:
  swift_release(v32);
  if (v37 + i >= *(double *)(v4 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_confidenceThreshold))
  {

    return;
  }
  if (qword_1008374D8 != -1)
    goto LABEL_46;
LABEL_38:
  v51 = type metadata accessor for Logger(0);
  sub_10001AAA8(v51, (uint64_t)qword_10084A670);
  swift_bridgeObjectRetain_n(a2, 2);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v58 = v34;
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v63[0] = v56;
    *(_DWORD *)v55 = 136315138;
    swift_bridgeObjectRetain(a2);
    v59 = sub_10001A820(a1, a2, v63);
    v34 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDCoreBehaviorModel: Removing rule: %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v59 = a1;
  v60 = a2;
  v57 = swift_beginAccess(v33, v63, 33, 0);
  OrderedDictionary.removeValue(forKey:)(&v61, &v59, v34, v57);
  swift_endAccess(v63);

}

void sub_10042AADC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001D6084(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_100430340(v4);
  *a1 = v2;
}

uint64_t sub_10042AB44(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001D92D4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100430A28(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_10042ABBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A670);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A670);
  if (qword_100837630 != -1)
    swift_once(&qword_100837630, sub_1004A1854);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872070);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10042AC4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v7 = sub_10001A630(&qword_10084A928);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000A388(a1, v11);
  v13 = sub_100435C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDCoreBehaviorModel.Feedback.CodingKeys, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    v18 = a3;
    v19 = 1;
    v14 = sub_10001A630(&qword_10084A938);
    v15 = sub_100435C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10042AD8C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_10042ADCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10043324C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10042ADF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100435C04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10042AE18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100435C04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10042AE40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100433338(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10042AE68(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10042AC4C(a1, *v1, v1[1]);
}

uint64_t sub_10042AE80@<X0>(void **a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;

  v9 = *a1;
  if ((sub_10042B440(*a1, 4) & 1) != 0
    && (v82 = objc_msgSend(v9, "value"),
        (swift_dynamicCast(&v80, &v82, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0))
  {
    v10 = v80;
    v11 = v81;
    if ((a2 & 1) != 0)
      v12 = sub_10042B57C(a3, a4);
    else
      v12 = BMRule.shortDescription.getter();
    v31 = v12;
    v32 = v13;
    type metadata accessor for REMSuggestedList(0);
    v34 = REMSuggestedList.__allocating_init(stringLiteral:)(v10, v11, v33);
    objc_msgSend(a3, "support");
    v36 = v35;
    result = (uint64_t)objc_msgSend(a3, "confidence");
    *(_QWORD *)a5 = v34;
    *(_QWORD *)(a5 + 8) = v36;
    *(_QWORD *)(a5 + 16) = v38;
    *(_QWORD *)(a5 + 24) = v31;
    *(_QWORD *)(a5 + 32) = v32;
    *(_QWORD *)(a5 + 40) = 0;
    *(_BYTE *)(a5 + 48) = 0;
  }
  else
  {
    if ((sub_10042B440(v9, 6) & 1) != 0
      && (v80 = objc_msgSend(v9, "value"),
          (swift_dynamicCast(&v82, &v80, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6) & 1) != 0))
    {
      v14 = v82;
      if ((a2 & 1) != 0)
        v15 = sub_10042B57C(a3, a4);
      else
        v15 = BMRule.shortDescription.getter();
      v49 = v15;
      v50 = v16;
      v51 = type metadata accessor for REMSuggestedWeekDay(0);
      swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
      v52 = REMSuggestedWeekDay.init(_:)(v14);
      objc_msgSend(a3, "support");
      v54 = v53;
      result = (uint64_t)objc_msgSend(a3, "confidence");
      *(_QWORD *)a5 = v52;
      *(_QWORD *)(a5 + 8) = v54;
      *(_QWORD *)(a5 + 16) = v55;
      *(_QWORD *)(a5 + 24) = v49;
      *(_QWORD *)(a5 + 32) = v50;
      *(_QWORD *)(a5 + 40) = 0;
      v48 = 2;
    }
    else if ((sub_10042B440(v9, 5) & 1) != 0
           && (v82 = objc_msgSend(v9, "value"),
               (swift_dynamicCast(&v80, &v82, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0))
    {
      v17 = v80;
      v18 = v81;
      if ((a2 & 1) != 0)
        v19 = sub_10042B57C(a3, a4);
      else
        v19 = BMRule.shortDescription.getter();
      v56 = v19;
      v57 = v20;
      v58 = type metadata accessor for REMSuggestedLocation(0, v21);
      swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
      v59 = REMSuggestedLocation.init(stringLiteral:)(v17, v18);
      objc_msgSend(a3, "support");
      v61 = v60;
      result = (uint64_t)objc_msgSend(a3, "confidence");
      *(_QWORD *)a5 = v59;
      *(_QWORD *)(a5 + 8) = v61;
      *(_QWORD *)(a5 + 16) = v62;
      *(_QWORD *)(a5 + 24) = v56;
      *(_QWORD *)(a5 + 32) = v57;
      *(_QWORD *)(a5 + 40) = 0;
      v48 = 1;
    }
    else if ((sub_10042B440(v9, 8) & 1) != 0)
    {
      if ((a2 & 1) != 0)
        v22 = sub_10042B57C(a3, a4);
      else
        v22 = BMRule.shortDescription.getter();
      v43 = v22;
      v44 = v23;
      objc_msgSend(a3, "support");
      v46 = v45;
      result = (uint64_t)objc_msgSend(a3, "confidence");
      *(_QWORD *)a5 = 1;
      *(_QWORD *)(a5 + 8) = v46;
      *(_QWORD *)(a5 + 16) = v47;
      *(_QWORD *)(a5 + 24) = v43;
      *(_QWORD *)(a5 + 32) = v44;
      *(_QWORD *)(a5 + 40) = 0;
      v48 = 3;
    }
    else if ((sub_10042B440(v9, 9) & 1) != 0
           && (v80 = objc_msgSend(v9, "value"),
               (swift_dynamicCast(&v82, &v80, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for UInt, 6) & 1) != 0))
    {
      v24 = v82;
      if ((a2 & 1) != 0)
        v25 = sub_10042B57C(a3, a4);
      else
        v25 = BMRule.shortDescription.getter();
      v63 = v25;
      v64 = v26;
      objc_msgSend(a3, "support");
      v66 = v65;
      result = (uint64_t)objc_msgSend(a3, "confidence");
      *(_QWORD *)a5 = v24;
      *(_QWORD *)(a5 + 8) = v66;
      *(_QWORD *)(a5 + 16) = v67;
      *(_QWORD *)(a5 + 24) = v63;
      *(_QWORD *)(a5 + 32) = v64;
      *(_QWORD *)(a5 + 40) = 0;
      v48 = 4;
    }
    else if ((sub_10042B440(v9, 10) & 1) != 0
           && (v82 = objc_msgSend(v9, "value"),
               (swift_dynamicCast(&v80, &v82, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0))
    {
      v27 = v80;
      v28 = v81;
      if ((a2 & 1) != 0)
        v29 = sub_10042B57C(a3, a4);
      else
        v29 = BMRule.shortDescription.getter();
      v68 = v29;
      v69 = v30;
      objc_msgSend(a3, "support");
      v71 = v70;
      result = (uint64_t)objc_msgSend(a3, "confidence");
      *(_QWORD *)a5 = v27;
      *(_QWORD *)(a5 + 8) = v28;
      *(_QWORD *)(a5 + 16) = v71;
      *(_QWORD *)(a5 + 24) = v72;
      *(_QWORD *)(a5 + 32) = v68;
      *(_QWORD *)(a5 + 40) = v69;
      v48 = 5;
    }
    else
    {
      result = sub_10042B440(v9, 11);
      if ((result & 1) != 0
        && (v82 = objc_msgSend(v9, "value"),
            result = swift_dynamicCast(&v80, &v82, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6), (result & 1) != 0))
      {
        v39 = v80;
        v40 = v81;
        if ((a2 & 1) != 0)
          v41 = sub_10042B57C(a3, a4);
        else
          v41 = BMRule.shortDescription.getter();
        v73 = v41;
        v74 = v42;
        v75 = type metadata accessor for REMSuggestedContact(0);
        swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
        v76 = REMSuggestedContact.init(stringLiteral:)(v39, v40);
        objc_msgSend(a3, "support");
        v78 = v77;
        result = (uint64_t)objc_msgSend(a3, "confidence");
        *(_QWORD *)a5 = v76;
        *(_QWORD *)(a5 + 8) = v78;
        *(_QWORD *)(a5 + 16) = v79;
        *(_QWORD *)(a5 + 24) = v73;
        *(_QWORD *)(a5 + 32) = v74;
        *(_QWORD *)(a5 + 40) = 0;
        v48 = 6;
      }
      else
      {
        *(_OWORD *)(a5 + 16) = 0u;
        *(_OWORD *)(a5 + 32) = 0u;
        *(_OWORD *)a5 = 0u;
        v48 = -1;
      }
    }
    *(_BYTE *)(a5 + 48) = v48;
  }
  return result;
}

uint64_t sub_10042B440(void *a1, char a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = objc_msgSend(a1, "type");
  v4 = objc_msgSend(v3, "identifier");

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  sub_10042EBAC(a2);
  v9 = v8;
  v10 = objc_msgSend(v8, "identifier");

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    if (v7)
    {
      if (v13)
      {
        if (v5 == v11 && v7 == v13)
        {
          swift_bridgeObjectRelease();
          v14 = 1;
        }
        else
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v11, v13, 0);
          swift_bridgeObjectRelease();
        }
        goto LABEL_16;
      }
      goto LABEL_11;
    }
    if (v13)
    {
      v14 = 0;
      goto LABEL_16;
    }
  }
  else if (v7)
  {
LABEL_11:
    v14 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  v14 = 1;
  return v14 & 1;
}

uint64_t sub_10042B57C(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v39;

  v4 = objc_msgSend(a1, "antecedent");
  v5 = sub_10001A630(&qword_100844630);
  v6 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  v7 = sub_10001A630(&qword_10084A698);
  v8 = sub_1000A5F84(&qword_10084A6A0, &qword_10084A698, (uint64_t)&protocol conformance descriptor for Set<A>);
  v9 = Sequence.elements<A>(ofType:)(v5, v7, v5, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a2);
  sub_1004323B8(v9, a2);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a1, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v5, v6);

  v11 = Sequence.elements<A>(ofType:)(v5, v7, v5, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a2);
  sub_1004323B8(v11, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = sub_10001A630((uint64_t *)&unk_10083A270);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A3C00;
  objc_msgSend(a1, "support");
  *(_QWORD *)(v13 + 56) = &type metadata for Double;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v13 + 32) = v14;
  v39 = String.init(format:_:)(1714630181, 0xE400000000000000, v13);
  v16 = v15;
  v17 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1006A3C00;
  objc_msgSend(a1, "confidence");
  *(_QWORD *)(v17 + 56) = &type metadata for Double;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v17 + 32) = v18;
  v19 = String.init(format:_:)(1714630181, 0xE400000000000000, v17);
  v21 = v20;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v22 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v23 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x5B203E3D205DLL;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v22, v23);
  v31 = v30;
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x203A737B205DLL;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = v39;
  v34._object = v16;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 979574828;
  v35._object = (void *)0xE400000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = v19;
  v36._object = v21;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 125;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  return 91;
}

uint64_t BMRule.shortDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  double v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;

  v1 = v0;
  v2 = objc_msgSend(v0, "antecedent");
  v3 = sub_10001A630(&qword_100844630);
  v4 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  v66 = v5;
  v6 = sub_10001A630(&qword_10084A698);
  v7 = sub_1000A5F84(&qword_10084A6A0, &qword_10084A698, (uint64_t)&protocol conformance descriptor for Set<A>);
  v8 = Sequence.elements<A>(ofType:)(v3, v6, v3, v7);
  swift_bridgeObjectRelease();
  if ((unint64_t)v8 >> 62)
    goto LABEL_35;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    v63 = v8;
    v68 = _swiftEmptyArrayStorage;
    v8 = (uint64_t)&v68;
    sub_1001C1B0C(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
    {
      __break(1u);
LABEL_46:
      __break(1u);
      result = swift_release(v68);
      __break(1u);
      return result;
    }
    v58 = v7;
    v59 = v6;
    v60 = v4;
    v61 = v1;
    v62 = v3;
    v10 = 0;
    v11 = v68;
    v12 = v63;
    v4 = v63 & 0xC000000000000001;
    v1 = (_QWORD *)((char *)&type metadata for Swift.AnyObject + 8);
    while (v9 != v10)
    {
      if (v4)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v12);
      else
        v13 = *(id *)(v12 + 8 * v10 + 32);
      v14 = v13;
      v66 = 0;
      v67 = 0xE000000000000000;
      v15 = objc_msgSend(v13, "type");
      v16 = objc_msgSend(v15, "identifier");

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

      }
      else
      {
        v19 = (void *)0xE300000000000000;
        v17 = 7104878;
      }
      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 58;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v8 = (uint64_t)objc_msgSend(v14, "value");
      v65 = v8;
      _print_unlocked<A, B>(_:_:)(&v65, &v66, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

      swift_unknownObjectRelease(v8);
      v3 = v66;
      v6 = v67;
      v68 = v11;
      v7 = v11[2];
      v22 = v11[3];
      if (v7 >= v22 >> 1)
      {
        v8 = (uint64_t)&v68;
        sub_1001C1B0C(v22 > 1, v7 + 1, 1);
        v11 = v68;
      }
      ++v10;
      v11[2] = v7 + 1;
      v23 = &v11[2 * v7];
      v23[4] = v3;
      v23[5] = v6;
      v12 = v63;
      if (v9 == v10)
      {
        *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
        v1 = v61;
        v3 = v62;
        v6 = v59;
        v4 = v60;
        v7 = v58;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v8 < 0)
      v41 = v8;
    else
      v41 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
  v11 = _swiftEmptyArrayStorage;
LABEL_18:
  v25 = objc_msgSend(v1, "consequent", v24);
  v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, v3, v4);

  v66 = v26;
  v7 = Sequence.elements<A>(ofType:)(v3, v6, v3, v7);
  swift_bridgeObjectRelease();
  if (!((unint64_t)v7 >> 62))
  {
    v3 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      goto LABEL_43;
    goto LABEL_20;
  }
  if (v7 < 0)
    v42 = v7;
  else
    v42 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v3 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_20:
    v68 = _swiftEmptyArrayStorage;
    v8 = (uint64_t)&v68;
    sub_1001C1B0C(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      goto LABEL_46;
    v4 = 0;
    v1 = v68;
    v64 = v7 & 0xC000000000000001;
    v6 = v7;
    while (v3 != v4)
    {
      if (v64)
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v7);
      else
        v27 = *(id *)(v7 + 8 * v4 + 32);
      v28 = v27;
      v66 = 0;
      v67 = 0xE000000000000000;
      v29 = objc_msgSend(v27, "type");
      v30 = objc_msgSend(v29, "identifier");

      if (v30)
      {
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

      }
      else
      {
        v33 = (void *)0xE300000000000000;
        v31 = 7104878;
      }
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 58;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v8 = (uint64_t)objc_msgSend(v28, "value");
      v65 = v8;
      _print_unlocked<A, B>(_:_:)(&v65, &v66, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

      swift_unknownObjectRelease(v8);
      v36 = v66;
      v37 = v67;
      v68 = v1;
      v39 = v1[2];
      v38 = v1[3];
      if (v39 >= v38 >> 1)
      {
        v8 = (uint64_t)&v68;
        sub_1001C1B0C(v38 > 1, v39 + 1, 1);
        v1 = v68;
      }
      ++v4;
      v1[2] = v39 + 1;
      v40 = &v1[2 * v39];
      v40[4] = v36;
      v40[5] = v37;
      v7 = v6;
      if (v3 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
    goto LABEL_34;
  }
LABEL_43:
  swift_bridgeObjectRelease();
  v1 = _swiftEmptyArrayStorage;
LABEL_44:
  v66 = 91;
  v67 = 0xE100000000000000;
  v68 = v11;
  swift_bridgeObjectRetain(v11);
  sub_10042AADC((uint64_t *)&v68);
  swift_bridgeObjectRelease();
  v43 = v68;
  v44 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v45 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v46 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v44, v45);
  v48 = v47;
  swift_release(v43);
  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0x5B203E3D205DLL;
  v50._object = (void *)0xE600000000000000;
  String.append(_:)(v50);
  v68 = v1;
  swift_bridgeObjectRetain(v1);
  sub_10042AADC((uint64_t *)&v68);
  swift_bridgeObjectRelease();
  v51 = v68;
  v52 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v44, v45);
  v54 = v53;
  swift_release(v51);
  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 93;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  return v66;
}

unint64_t *sub_10042C018(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  unint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t *v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  id v23;
  NSURL *v24;
  void *v25;
  void *v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  unint64_t *v40;
  uint8_t *v41;
  void *v42;
  NSString v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  uint8_t *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  BOOL v75;
  uint64_t v76;
  objc_class *v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  double v82;
  double v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  double i;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  double v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  double v101;
  double v102;
  id v103;
  Class v104;
  Class v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  Swift::Int v111;
  Swift::Int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  void *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  char v156[24];
  _QWORD v157[2];
  id v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v153 = a1;
  v155 = *v5;
  v149 = sub_10001A630(&qword_100841CC8);
  v10 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v11 = type metadata accessor for URL(0);
  v151 = *(_QWORD *)(v11 - 8);
  v152 = v11;
  __chkstk_darwin(v11);
  v148 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v150 = (char *)&v139 - v14;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever) = 0;
  isa = (Class)&qword_10084A000;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackVersion) = 1;
  v154 = v5;
  *(unint64_t *)((char *)v5 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules) = (unint64_t)&_swiftEmptyDictionarySingleton;
  v16 = sub_1000151B0(0, (unint64_t *)&unk_10084A870, BMMiningTask_ptr);
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "respondsToSelector:", "supportsTaskSpecificEvents")&& objc_msgSend((id)objc_opt_self(BMMiningTask), "supportsTaskSpecificEvents"))
  {
    if ((a5 & 1) != 0)
      v17 = 0.5;
    else
      v17 = *(double *)&a4;
    if ((a3 & 1) != 0)
      v18 = 0.003;
    else
      v18 = *(double *)&a2;
    v20 = v153;
    v19 = v154;
    *(double *)((char *)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_confidenceThreshold) = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))((uint64_t)v19 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_baseUrl, v20, v152);
    URL.appendingPathComponent(_:)(0xD00000000000001ALL, 0x8000000100704170);
    v141 = sub_1000151B0(0, &qword_10083FEB0, BMRule_ptr);
    OrderedDictionary.init()(&type metadata for String);
    v21 = *(void (**)(void))(v10 + 32);
    v145 = (uint64_t)v19 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
    v21();
    v22 = sub_100432784();
    v23 = objc_allocWithZone((Class)BMBehaviorRetriever);
    URL._bridgeToObjectiveC()(v24);
    v26 = v25;
    sub_10001A630(&qword_10083B640);
    sub_1000A5F84(&qword_10084A880, &qword_10083B640, (uint64_t)&protocol conformance descriptor for NSObject);
    isa = Set._bridgeToObjectiveC()().super.isa;
    v27 = objc_msgSend(v23, "initWithURL:taskSpecificItemTypes:", v26, isa, swift_bridgeObjectRelease().n128_f64[0]);

    v143 = v27;
    if (v27)
    {
      v28 = v148;
      URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x8000000100703F70);
      v29 = v147;
      v30 = Data.init(contentsOf:options:)(v28, 0);
      if (v29)
      {
        swift_errorRelease(v29);
        v32 = 0;
        v33 = v145;
      }
      else
      {
        v22 = v30;
        v55 = v31;
        v56 = type metadata accessor for JSONDecoder(0);
        v57 = swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
        v58 = JSONDecoder.init()(v57);
        v59 = sub_1004354E8();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RDCoreBehaviorModel.Feedback, v22, v55, &type metadata for RDCoreBehaviorModel.Feedback, v59);
        v32 = 0;
        v33 = v145;
        swift_release(v58);
        v61 = v159;
        v60 = v160;
        swift_bridgeObjectRetain(v160);
        sub_1004326C8(v62, v61, 1uLL);
        v64 = v63;
        sub_1000A71C8(v22, v55);
        swift_bridgeObjectRelease_n(v60, 2);
        v65 = (unint64_t *)((char *)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules);
        swift_beginAccess((char *)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules, v156, 1, 0);
        *v65 = v64;
        swift_bridgeObjectRelease();
      }
      v66 = objc_msgSend(v143, "retrieveRulesWithSupport:confidence:filters:", 0, v18, v17);
      v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v66, v141);

      v161 = (uint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v67 >> 62)
      {
LABEL_99:
        if (v67 < 0)
          v131 = v67;
        else
          v131 = v67 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v67);
        v68 = _CocoaArrayWrapper.endIndex.getter(v131);
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v144 = v68;
      if (v68)
      {
        v140 = v32;
        v69 = 0;
        v22 = (uint64_t)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_feedbackForRules;
        v155 = v67 & 0xC000000000000001;
        v147 = v67 & 0xFFFFFFFFFFFFFF8;
        v146 = v67 + 32;
        v32 = v144;
        v142 = v67;
        while (1)
        {
          if (v155)
          {
            v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v69, v67);
          }
          else
          {
            if (v69 >= *(_QWORD *)(v147 + 16))
              goto LABEL_96;
            v73 = *(id *)(v146 + 8 * v69);
          }
          v74 = v73;
          v75 = __OFADD__(v69++, 1);
          if (v75)
          {
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          v76 = BMRule.shortDescription.getter();
          isa = v77;
          swift_beginAccess(v22, &v159, 32, 0);
          v78 = *(_QWORD *)v22;
          if (!*(_QWORD *)(*(_QWORD *)v22 + 16) || (v79 = sub_10001A6DC(v76, (uint64_t)isa), (v80 & 1) == 0))
          {
            swift_bridgeObjectRelease();
            swift_endAccess(&v159);
            isa = v74;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(isa);
            v71 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v70 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v71 >= v70 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1);
            v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, isa);
            goto LABEL_30;
          }
          v81 = *(_QWORD *)(*(_QWORD *)(v78 + 56) + 8 * v79);
          swift_endAccess(&v159);
          swift_bridgeObjectRetain(v81);
          objc_msgSend(v74, "confidence", swift_bridgeObjectRelease().n128_f64[0]);
          v83 = v82;
          v84 = 0;
          v85 = v81 + 64;
          v86 = 1 << *(_BYTE *)(v81 + 32);
          if (v86 < 64)
            v87 = ~(-1 << v86);
          else
            v87 = -1;
          v88 = v87 & *(_QWORD *)(v81 + 64);
          v89 = (unint64_t)(v86 + 63) >> 6;
          for (i = 0.0; ; i = i + *(double *)(*(_QWORD *)(v81 + 56) + 8 * v92))
          {
            if (v88)
            {
              v91 = __clz(__rbit64(v88));
              v88 &= v88 - 1;
              v92 = v91 | (v84 << 6);
              continue;
            }
            v75 = __OFADD__(v84++, 1);
            if (v75)
            {
              __break(1u);
              goto LABEL_95;
            }
            if (v84 >= v89)
              break;
            v93 = *(_QWORD *)(v85 + 8 * v84);
            if (!v93)
            {
              v94 = v84 + 1;
              if (v84 + 1 >= v89)
                break;
              v93 = *(_QWORD *)(v85 + 8 * v94);
              if (!v93)
              {
                v94 = v84 + 2;
                if (v84 + 2 >= v89)
                  break;
                v93 = *(_QWORD *)(v85 + 8 * v94);
                if (!v93)
                {
                  v94 = v84 + 3;
                  if (v84 + 3 >= v89)
                    break;
                  v93 = *(_QWORD *)(v85 + 8 * v94);
                  if (!v93)
                  {
                    v94 = v84 + 4;
                    if (v84 + 4 >= v89)
                      break;
                    v93 = *(_QWORD *)(v85 + 8 * v94);
                    if (!v93)
                    {
                      v94 = v84 + 5;
                      if (v84 + 5 >= v89)
                        break;
                      v93 = *(_QWORD *)(v85 + 8 * v94);
                      if (!v93)
                      {
                        while (1)
                        {
                          v84 = v94 + 1;
                          if (__OFADD__(v94, 1))
                            break;
                          if (v84 >= v89)
                            goto LABEL_65;
                          v93 = *(_QWORD *)(v85 + 8 * v84);
                          ++v94;
                          if (v93)
                            goto LABEL_60;
                        }
                        __break(1u);
                        goto LABEL_99;
                      }
                    }
                  }
                }
              }
              v84 = v94;
            }
LABEL_60:
            v95 = __clz(__rbit64(v93));
            v88 = (v93 - 1) & v93;
            v92 = v95 + (v84 << 6);
          }
LABEL_65:
          swift_release(v81);
          v96 = v83 + i;
          if (v17 >= v96)
            goto LABEL_31;
          v97 = objc_msgSend(v74, "antecedent");
          v98 = sub_10001A630(&qword_100844630);
          v99 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
          static Set._unconditionallyBridgeFromObjectiveC(_:)(v97, v98, v99);

          v100 = objc_msgSend(v74, "consequent");
          static Set._unconditionallyBridgeFromObjectiveC(_:)(v100, v98, v99);

          objc_msgSend(v74, "support");
          v102 = v101;
          v103 = objc_allocWithZone((Class)BMRule);
          v104 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v105 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          isa = (Class)objc_msgSend(v103, "initWithAntecedent:consequent:support:confidence:", v104, v105, v102, v96);

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v106);
          v108 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v107 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v108 >= v107 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1);
          v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v108, isa);
          v33 = v145;
          v67 = v142;
          v32 = v144;
LABEL_30:
          specialized Array._endMutation()(v72);
LABEL_31:

          if (v69 == v32)
          {
            swift_bridgeObjectRelease();
            v109 = v161;
            v32 = v140;
            if ((v161 & 0x8000000000000000) == 0)
              goto LABEL_72;
            goto LABEL_112;
          }
        }
      }
      swift_bridgeObjectRelease();
      v109 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
      {
LABEL_72:
        if ((v109 & 0x4000000000000000) == 0)
        {
          v110 = v109 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v109);
          goto LABEL_74;
        }
      }
LABEL_112:
      while (1)
      {
        swift_bridgeObjectRetain(v109);
        v110 = (unint64_t)sub_1001E9F10(v138);
        swift_bridgeObjectRelease();
LABEL_74:
        v159 = v110;
        sub_10042AB44((uint64_t *)&v159);
        if (v32)
          goto LABEL_115;
        swift_bridgeObjectRelease();
        v22 = v159;
        v32 = (v159 & 0x8000000000000000) != 0 || (v159 >> 62) & 1;
        if ((_DWORD)v32 != 1)
          break;
        swift_bridgeObjectRetain(v159);
        v109 = _CocoaArrayWrapper.endIndex.getter(v132);
        swift_release(v22);
        swift_bridgeObjectRetain(v22);
        v134 = _CocoaArrayWrapper.endIndex.getter(v133);
        swift_release(v22);
        if (v134 < 0)
          goto LABEL_114;
        if (v109 >= 200)
          v135 = 200;
        else
          v135 = v109;
        if (v109 >= 0)
          v109 = v135;
        else
          v109 = 200;
        swift_bridgeObjectRetain(v22);
        v137 = _CocoaArrayWrapper.endIndex.getter(v136);
        swift_release(v22);
        if (v137 >= v109)
          goto LABEL_116;
        __break(1u);
      }
      if (*(uint64_t *)(v159 + 16) >= 200)
        v109 = 200;
      else
        v109 = *(_QWORD *)(v159 + 16);
      if ((v159 & 0xC000000000000001) == 0)
        goto LABEL_86;
LABEL_83:
      if (v109)
      {
        v111 = 0;
        do
        {
          v112 = v111 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v111);
          v111 = v112;
        }
        while (v109 != v112);
      }
LABEL_86:
      while (1)
      {
        if ((_DWORD)v32)
        {
          swift_bridgeObjectRetain(v22);
          v113 = _CocoaArrayWrapper.subscript.getter(0, v109, v22);
          v115 = v114;
          v117 = v116;
          v119 = v118;
          swift_release_n(v22);
          v109 = v119 >> 1;
          v22 = v113;
        }
        else
        {
          v117 = 0;
          v115 = v22 + 32;
        }
        v120 = v149;
        v121 = v109 - v117;
        if (v109 == v117)
          break;
        if (v109 > v117)
        {
          v122 = (void **)(v115 + 8 * v117);
          do
          {
            v123 = *v122++;
            v124 = v123;
            v125 = BMRule.shortDescription.getter();
            v157[1] = v126;
            v158 = v124;
            v157[0] = v125;
            swift_beginAccess(v33, &v159, 33, 0);
            v127 = v124;
            OrderedDictionary.subscript.setter(&v158, v157, v120);
            swift_endAccess(&v159);

            --v121;
          }
          while (v121);
          break;
        }
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        swift_release(v159);
        __break(1u);
LABEL_116:
        v33 = v145;
        if ((v22 & 0xC000000000000001) != 0)
          goto LABEL_83;
      }
      v128 = v152;
      v129 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
      v129(v153, v152);
      swift_unknownObjectRelease(v22);
      v129((uint64_t)v148, v128);
      v129((uint64_t)v150, v128);
      v40 = v154;
      v130 = *(void **)((char *)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever);
      *(unint64_t *)((char *)v154 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_behaviorRetriever) = (unint64_t)v143;

      *((_BYTE *)v40 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_trained) = 1;
    }
    else
    {
      if (qword_1008374D8 != -1)
        swift_once(&qword_1008374D8, sub_10042ABBC);
      v47 = type metadata accessor for Logger(0);
      v48 = sub_10001AAA8(v47, (uint64_t)qword_10084A670);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter(v49);
      v51 = os_log_type_enabled(v49, v50);
      v40 = v154;
      if (v51)
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDCoreBehaviorModel: No existing CoreBehavior", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v53 = v152;
      v54 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
      v54(v153, v152);
      v54((uint64_t)v150, v53);
      *((_BYTE *)v40 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_trained) = 0;
    }
  }
  else
  {
    if (qword_1008374D8 != -1)
LABEL_97:
      swift_once(&qword_1008374D8, sub_10042ABBC);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001AAA8(v34, (uint64_t)qword_10084A670);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.fault.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = v153;
    v40 = v154;
    if (v38)
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDCoreBehaviorModel: CoreBehavior is not up to date", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v42 = (void *)objc_opt_self(REMError);
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "internalErrorWithDebugDescription:", v43);

    swift_willThrow(v44);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v39, v152);

    v45 = swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance(v40, v155, *(unsigned int *)(*v40 + 48), *(unsigned __int16 *)(*v40 + 52), v45);
  }
  return v40;
}

uint64_t sub_10042CE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  if (qword_1008374D8 != -1)
    swift_once(&qword_1008374D8, sub_10042ABBC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084A670);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDCoreBehaviorModel: deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer;
  v8 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;

  v9 = v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_baseUrl;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  swift_bridgeObjectRelease();
  v11 = v1 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_rules;
  v12 = sub_10001A630(&qword_100841CC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return v1;
}

uint64_t sub_10042CF70()
{
  uint64_t v0;

  sub_10042CE0C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_10042CF94(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v45 = a5;
  v46 = a6;
  v43 = a3;
  v44 = a4;
  v48 = a1;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = (id)objc_opt_self(NSTimer);
  v12 = swift_allocObject(&unk_1007F4068, 24, 7);
  swift_weakInit(v12 + 16, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1007F4090, v19 + 8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v14, v11, v42);
  v22 = v43;
  v21 = v44;
  *(_QWORD *)(v20 + v15) = v43;
  *(_QWORD *)(v20 + v16) = v12;
  *(_QWORD *)(v20 + v17) = v21;
  v23 = v46;
  *(_QWORD *)(v20 + v18) = v45;
  *(_QWORD *)(v20 + v19) = v23;
  aBlock[4] = sub_1004357B8;
  v50 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10042D6CC;
  aBlock[3] = &unk_1007F40A8;
  v24 = _Block_copy(aBlock);
  v25 = v50;
  swift_retain();
  v26 = v22;
  v27 = v21;
  swift_release(v25);
  v28 = objc_msgSend(v47, "scheduledTimerWithTimeInterval:repeats:block:", 1, v24, 60.0);
  _Block_release(v24);
  v29 = OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer;
  v30 = v48;
  v31 = *(void **)(v48 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
  *(_QWORD *)(v48 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = v28;
  v32 = v30;

  v33 = *(void **)(v32 + v29);
  v34 = *(void **)&v27[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer];
  *(_QWORD *)&v27[OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer] = v33;
  v35 = v33;

  if (qword_1008374D8 != -1)
    swift_once(&qword_1008374D8, sub_10042ABBC);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10001AAA8(v36, (uint64_t)qword_10084A670);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDCoreBehaviorModel: CoreBehavior mining task timer set", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

}

void sub_10042D268(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t Strong;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v15);
  v16 = Date.timeIntervalSince(_:)(a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (qword_1008374D8 != -1)
    swift_once(&qword_1008374D8, sub_10042ABBC);
  v17 = a4 + 16;
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10084A670);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v46 = a3;
    v24 = v23;
    v49[0] = v23;
    *(_DWORD *)v22 = 136315138;
    v25 = Double.description.getter(v16);
    v45 = v17;
    v47 = sub_10001A820(v25, v26, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    v17 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDCoreBehaviorModel: CoreBehavior mining task has run %s seconds", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v27 = v24;
    a3 = v46;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  if (v16 >= 600.0)
  {
    v37 = Logger.logObject.getter(v28);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDCoreBehaviorModel: CoreBehavior mining task terminating early due to time out", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    objc_msgSend(a3, "terminateEarly");
    swift_beginAccess(v17, v49, 0, 0);
    Strong = swift_weakLoadStrong(v17);
    if (Strong)
    {
      v41 = Strong;
      v42 = *(id *)(Strong + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
      swift_release(v41);
      objc_msgSend(v42, "invalidate");

    }
    swift_beginAccess(v17, &v47, 0, 0);
    v36 = swift_weakLoadStrong(v17);
    if (!v36)
      goto LABEL_20;
LABEL_19:
    v43 = *(void **)(v36 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
    *(_QWORD *)(v36 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer) = 0;
    swift_release(v36);

LABEL_20:
    v44 = *(void **)(a5 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer);
    *(_QWORD *)(a5 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer) = 0;

    return;
  }
  if (a6 && *(_BYTE *)(a6 + 17) == 1)
  {
    v29 = swift_retain();
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDCoreBehaviorModel: CoreBehavior mining task terminating early due to shouldDefer is true", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    objc_msgSend(a3, "terminateEarly");
    swift_beginAccess(v17, v49, 0, 0);
    v33 = swift_weakLoadStrong(v17);
    if (v33)
    {
      v34 = v33;
      v35 = *(id *)(v33 + OBJC_IVAR____TtC7remindd19RDCoreBehaviorModel_timer);
      swift_release(v34);
      objc_msgSend(v35, "invalidate");

    }
    swift_beginAccess(v17, &v47, 0, 0);
    v36 = swift_weakLoadStrong(v17);
    swift_release(a6);
    if (!v36)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_10042D6CC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

_QWORD *sub_10042D71C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64[8];
  char v65[8];
  char v66[8];
  char v67[8];
  _QWORD *v68;

  v42 = a2;
  v59 = a1;
  v50 = sub_10001A630(&qword_10084A8A0);
  v41 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10001A630(&qword_10084A8A8);
  v40 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10001A630(&qword_10084A8B0);
  v39 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10001A630(&qword_10084A8B8);
  v38 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10001A630(&qword_10084A8C0);
  v37 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10001A630(&qword_10084A8C8);
  v36 = *(_QWORD *)(v44 - 8);
  v12 = __chkstk_darwin(v44);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMSuggestedLocation(0, v12);
  sub_10001A630(&qword_10084A8D0);
  sub_10009FC50(&qword_10084A8D8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedLocation, (uint64_t)&protocol conformance descriptor for ClassificationLabel);
  OrderedDictionary.init()(v15);
  v16 = type metadata accessor for REMSuggestedWeekDay(0);
  sub_10009FC50(&qword_10084A8E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedWeekDay, (uint64_t)&protocol conformance descriptor for ClassificationLabel);
  OrderedDictionary.init()(v16);
  v17 = type metadata accessor for REMSuggestedList(0);
  sub_10009FC50(&qword_10084A8E8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedList, (uint64_t)&protocol conformance descriptor for ClassificationLabel);
  OrderedDictionary.init()(v17);
  v51 = v7;
  OrderedDictionary.init()(&type metadata for UInt);
  v48 = v5;
  v18 = v42;
  OrderedDictionary.init()(&type metadata for String);
  v19 = type metadata accessor for REMSuggestedContact(0);
  sub_10009FC50(&qword_10084A8F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMSuggestedContact, (uint64_t)&protocol conformance descriptor for ClassificationLabel);
  v43 = v3;
  OrderedDictionary.init()(v19);
  v20 = *(_QWORD *)(v18 + 16);
  v60 = v9;
  v58 = v11;
  v61 = v14;
  if (v20)
  {
    swift_bridgeObjectRetain(v18);
    v56 = 0;
    v55 = 0;
    v54 = 0;
    v53 = 0;
    v52 = 0;
    v57 = 255;
    v63 = v20;
    __asm { BR              X9 }
  }
  v62 = 0;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v68 = _swiftEmptyArrayStorage;
  v21 = sub_100427D0C((uint64_t)v14, (uint64_t)v67, &qword_10084A8C8, &qword_10084A920, 1);
  sub_1001E2D28(v21);
  v22 = sub_100427D0C((uint64_t)v58, (uint64_t)v66, &qword_10084A8C0, &qword_10084A918, 2);
  sub_1001E2D28(v22);
  v23 = sub_100427D0C((uint64_t)v9, (uint64_t)v65, &qword_10084A8B8, &qword_10084A910, 0);
  sub_1001E2D28(v23);
  v24 = sub_100427EC0((uint64_t)v51);
  v63 = 0;
  sub_1001E2D28(v24);
  v25 = v62;
  v26 = v56;
  v27 = v55;
  v28 = v54;
  v29 = v53;
  v30 = v52;
  v57 = 255;
  v31 = v48;
  v32 = sub_100428074();
  sub_1001E2D28(v32);
  v33 = (uint64_t)v43;
  v34 = sub_100427D0C((uint64_t)v43, (uint64_t)v64, &qword_10084A8A0, &qword_10084A8F8, 6);
  sub_1001E2D28(v34);
  sub_10043552C(v25, v26, v27, v28, v29, v30, v57);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v33, v50);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v49);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v51, v47);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v60, v46);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v58, v45);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v61, v44);
  return v68;
}

void sub_10042EBAC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10042EBE8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t result;
  Swift::String v4;
  Swift::String v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v1 = objc_msgSend((id)objc_opt_self(*(_QWORD *)(v0 + 128)), "dayOfWeek");
  v2 = objc_opt_self(*(_QWORD *)(v0 + 128));
  result = swift_dynamicCastObjCClass(v1, v2);
  if (!result)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v4._countAndFlagsBits = 0xD000000000000021;
    v4._object = (void *)0x8000000100704100;
    String.append(_:)(v4);
    v6 = v1;
    _print_unlocked<A, B>(_:_:)(&v6, &v7, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    swift_unknownObjectRelease(v1);
    v5._countAndFlagsBits = 125;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v7, v8, "remindd/RDCoreBehaviorModel.swift", 33, 2, 663, 0);
    __break(1u);
    JUMPOUT(0x10042F0E8);
  }
  return result;
}

void sub_10042F118(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_10042F15C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSString v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = swift_retain();
  if ((((uint64_t (*)(uint64_t))REMSuggestedContact.isValid.getter)(v3) & 1) != 0)
  {
    v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1006A7330;
    v6 = (void *)objc_opt_self(BMItemType);
    v7 = String._bridgeToObjectiveC()();
    v8 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    v9 = objc_msgSend(v6, "taskSpecificItemWithIdentifier:valueClass:", v7, swift_getObjCClassFromMetadata(v8));

    if (!v9)
    {
      __break(1u);
      JUMPOUT(0x10042FB88);
    }
    v10 = swift_retain();
    ((void (*)(uint64_t))dispatch thunk of ClassificationLabel.description.getter)(v10);
    sub_100435578(v1, v2, 0);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v12 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v9, v11);

    *(_QWORD *)(v5 + 32) = v12;
    specialized Array._endMutation()(v13);
    v14 = (_QWORD *)v5;
    sub_100435578(v1, v2, 0);
  }
  else
  {
    sub_100435578(v1, v2, 0);
    v14 = _swiftEmptyArrayStorage;
  }
  *v0 = v14;
}

void sub_10042FBB8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRetain(*a1);
  v4 = sub_100431D4C(v3);
  swift_bridgeObjectRelease();
  *a2 = v4;
}

double sub_10042FCC0(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __n128 v25;
  double result;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  _BYTE v30[80];
  uint64_t v31;

  v2 = v1;
  v4 = OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_timer);
  if (v5)
  {
    v6 = qword_1008374D8;
    v7 = v5;
    if (v6 != -1)
      swift_once(&qword_1008374D8, sub_10042ABBC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_10084A670);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDCoreBehaviorModel: invalidating timer since mining task did finish", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    objc_msgSend(v7, "invalidate");
    v13 = *(void **)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;

  }
  v14 = objc_msgSend(a1, "completionStatus");
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics + 24) = v14;
  v15 = objc_msgSend(a1, "coreAnalyticsDict");
  v31 = 0;
  v16 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v31, &type metadata for String, v16, &protocol witness table for String);

  v18 = v31;
  if (v31)
  {
    objc_msgSend(a1, "completionStatus");
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v31 = v18;
    sub_10028D168((uint64_t)isa, 0xD000000000000011, 0x80000001007040B0, isUniquelyReferenced_nonNull_native);
    v21 = v31;
    swift_bridgeObjectRelease();
    sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    v22 = NSString.init(stringLiteral:)("Reminders", 9, 2);
    v23 = swift_isUniquelyReferenced_nonNull_native(v21);
    v31 = v21;
    sub_10028D168(v22, 0x6E69616D6F44, 0xE600000000000000, v23);
    v24 = v31;
    v25 = swift_bridgeObjectRelease();
    type metadata accessor for Analytics(0, v25);
    static Analytics.postEvent(_:payload:duration:)(0xD00000000000001DLL, 0x8000000100704080, v24, 0, 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    type metadata accessor for Analytics(0, v17);
    v27 = sub_10001A630((uint64_t *)&unk_10083A260);
    inited = swift_initStackObject(v27, v30);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 0x6E69616D6F44;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
    *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("Reminders", 9, 2);
    *(_QWORD *)(inited + 56) = 0xD000000000000011;
    *(_QWORD *)(inited + 64) = 0x80000001007040B0;
    objc_msgSend(a1, "completionStatus");
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    v29 = sub_1002AF09C(inited);
    static Analytics.postEvent(_:payload:duration:)(0xD00000000000001DLL, 0x8000000100704080, v29, 0, 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

void sub_100430340(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      sub_1004312A8(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v111 = v4;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      v100 = v11;
      v110 = v8;
      if (v12 >= 2)
      {
        v101 = *v108;
        do
        {
          v102 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v101)
            goto LABEL_159;
          v103 = v100;
          v104 = *(_QWORD *)&v100[16 * v102 + 32];
          v105 = *(_QWORD *)&v100[16 * v12 + 24];
          sub_1004314A8((char *)(v101 + 16 * v104), (char *)(v101 + 16 * *(_QWORD *)&v100[16 * v12 + 16]), v101 + 16 * v105, __dst);
          if (v1)
            break;
          if (v105 < v104)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0)
            v103 = sub_1001D52E4((uint64_t)v103);
          if (v102 >= *((_QWORD *)v103 + 2))
            goto LABEL_149;
          v106 = &v103[16 * v102 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v103 + 2);
          if (v12 > v107)
            goto LABEL_150;
          memmove(&v103[16 * v12 + 16], &v103[16 * v12 + 32], 16 * (v107 - v12));
          v100 = v103;
          *((_QWORD *)v103 + 2) = v107 - 1;
          v12 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v110[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_155;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_158;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v111)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D4DF0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_1001D4DF0((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
    {
      v113 = v9;
      while (1)
      {
        v50 = v12 - 1;
        if (v12 >= 4)
        {
          v55 = &v48[16 * v12];
          v56 = *((_QWORD *)v55 - 8);
          v57 = *((_QWORD *)v55 - 7);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_135;
          v60 = *((_QWORD *)v55 - 6);
          v59 = *((_QWORD *)v55 - 5);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_136;
          v62 = v12 - 2;
          v63 = &v48[16 * v12 - 32];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_138;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_141;
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            v87 = *(_QWORD *)v85;
            v86 = *((_QWORD *)v85 + 1);
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_145;
            v78 = v53 < v88;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v79 = *((_QWORD *)v11 + 4);
            v80 = *((_QWORD *)v11 + 5);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_99;
          }
          v52 = *((_QWORD *)v11 + 4);
          v51 = *((_QWORD *)v11 + 5);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_137;
        v62 = v12 - 2;
        v68 = &v48[16 * v12 - 32];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_140;
        v74 = &v48[16 * v50];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_143;
        if (__OFADD__(v72, v77))
          goto LABEL_144;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_105:
          if (v78)
            v50 = v62;
          goto LABEL_107;
        }
LABEL_99:
        if ((v73 & 1) != 0)
          goto LABEL_139;
        v81 = &v48[16 * v50];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_142;
        if (v84 < v72)
          goto LABEL_15;
LABEL_107:
        v89 = v50 - 1;
        if (v50 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v90 = v10;
        if (!v10)
          goto LABEL_157;
        v91 = v11;
        v92 = &v48[16 * v89];
        v93 = *(_QWORD *)v92;
        v94 = v48;
        v95 = v50;
        v96 = &v48[16 * v50];
        v97 = *((_QWORD *)v96 + 1);
        v98 = v90;
        sub_1004314A8((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
        if (v1)
          goto LABEL_115;
        if (v97 < v93)
          goto LABEL_132;
        if (v95 > *((_QWORD *)v91 + 2))
          goto LABEL_133;
        *(_QWORD *)v92 = v93;
        *(_QWORD *)&v94[16 * v89 + 8] = v97;
        v99 = *((_QWORD *)v91 + 2);
        if (v95 >= v99)
          goto LABEL_134;
        v11 = v91;
        v12 = v99 - 1;
        memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
        v48 = v94;
        *((_QWORD *)v91 + 2) = v99 - 1;
        v10 = v98;
        v9 = v113;
        if (v99 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v111))
    goto LABEL_153;
  if (v13 + v111 >= v3)
    v36 = v3;
  else
    v36 = v13 + v111;
  if (v36 >= v13)
  {
    if (v9 != v36)
    {
      v37 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v38 = (uint64_t *)(v10 + 16 * v9);
        v39 = *v38;
        v40 = v38[1];
        v41 = v13;
        v42 = v37;
        do
        {
          v43 = *(v42 - 2);
          v44 = *(v42 - 1);
          v45 = v39 == v43 && v40 == v44;
          if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v39 = *v42;
          v40 = v42[1];
          *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
          *(v42 - 1) = v40;
          *(v42 - 2) = v39;
          v42 -= 2;
          ++v41;
        }
        while (v9 != v41);
        ++v9;
        v37 += 2;
      }
      while (v9 != v36);
      v9 = v36;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_100430A28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  Swift::Int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  Swift::Int v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t *v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t *v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  void *v56;
  Swift::Int v57;
  uint64_t v58;
  Swift::Int v59;
  void *v60;
  id v61;
  id v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  Swift::Int v135;
  Swift::Int v136;
  Swift::Int v137;
  void **__dst;
  Swift::Int v139;
  char *v140;
  uint64_t v141;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_146;
    if (v4)
      sub_100431374(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_154;
  v7 = v5;
  v133 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v141 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      if (v14 < 2)
      {
LABEL_123:
        swift_bridgeObjectRelease();
        *(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v131);
        swift_bridgeObjectRelease();
        return;
      }
LABEL_111:
      v124 = *v133;
      while (1)
      {
        v125 = v14 - 2;
        if (v14 < 2)
          goto LABEL_141;
        if (!v124)
          goto LABEL_153;
        v126 = v11;
        v127 = *(_QWORD *)&v11[16 * v125 + 32];
        v128 = *(_QWORD *)&v11[16 * v14 + 24];
        sub_100431740((void **)(v124 + 8 * v127), (void **)(v124 + 8 * *(_QWORD *)&v11[16 * v14 + 16]), v124 + 8 * v128, __dst);
        if (v2)
          goto LABEL_123;
        if (v128 < v127)
          goto LABEL_142;
        if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) == 0)
          v126 = sub_1001D52E4((uint64_t)v126);
        if (v125 >= *((_QWORD *)v126 + 2))
          goto LABEL_143;
        v129 = &v126[16 * v125 + 32];
        *(_QWORD *)v129 = v127;
        *((_QWORD *)v129 + 1) = v128;
        v130 = *((_QWORD *)v126 + 2);
        if (v14 > v130)
          goto LABEL_144;
        memmove(&v126[16 * v14 + 16], &v126[16 * v14 + 32], 16 * (v130 - v14));
        v11 = v126;
        *((_QWORD *)v126 + 2) = v130 - 1;
        v14 = v130 - 1;
        if (v130 <= 2)
          goto LABEL_123;
      }
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = sub_1000151B0(0, &qword_10083FEB0, BMRule_ptr);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v141 = v10;
  }
  v12 = 0;
  v13 = *a1;
  v134 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v137 = v4;
  while (1)
  {
    v15 = v12;
    v16 = v12 + 1;
    v139 = v12;
    if (v12 + 1 >= v4)
      goto LABEL_39;
    v17 = v11;
    v18 = *(void **)(v13 + 8 * v12);
    v19 = *(id *)(v13 + 8 * v16);
    v20 = v18;
    objc_msgSend(v19, "support");
    v22 = v21;
    objc_msgSend(v20, "support");
    if (v22 == v23)
    {
      objc_msgSend(v19, "confidence");
      v25 = v24;
      objc_msgSend(v20, "confidence");
    }
    else
    {
      objc_msgSend(v19, "support");
      v25 = v27;
      objc_msgSend(v20, "support");
    }
    v28 = v26;

    v29 = v28 < v25;
    v16 = v15 + 2;
    if (v15 + 2 >= v137)
      goto LABEL_29;
    v30 = v15;
    while (1)
    {
      v37 = v16;
      v38 = v13 + 8 * v30;
      v39 = *(void **)(v38 + 8);
      v40 = *(id *)(v38 + 16);
      v41 = v39;
      objc_msgSend(v40, "support");
      v43 = v42;
      objc_msgSend(v41, "support");
      if (v43 == v44)
      {
        objc_msgSend(v40, "confidence");
        v46 = v45;
        objc_msgSend(v41, "confidence");
        v48 = v47;

        if (((v29 ^ (v48 >= v46)) & 1) == 0)
        {
          v16 = v37;
          goto LABEL_28;
        }
        goto LABEL_22;
      }
      objc_msgSend(v40, "support");
      v32 = v31;
      objc_msgSend(v41, "support");
      v34 = v33;

      if (v29 == v34 >= v32)
        break;
LABEL_22:
      v16 = v37 + 1;
      v35 = v30 + 1;
      v36 = v30 + 3;
      ++v30;
      if (v36 >= v137)
      {
        v16 = v35 + 2;
        goto LABEL_28;
      }
    }
    v16 = v30 + 2;
LABEL_28:
    v15 = v139;
LABEL_29:
    v11 = v17;
    if (v29)
    {
      v4 = v137;
      if (v16 < v15)
        goto LABEL_147;
      if (v15 < v16)
      {
        v49 = (uint64_t *)(v134 + 8 * v16);
        v50 = v16;
        v51 = v15;
        v52 = (uint64_t *)(v13 + 8 * v15);
        do
        {
          if (v51 != --v50)
          {
            if (!v13)
              goto LABEL_152;
            v53 = *v52;
            *v52 = *v49;
            *v49 = v53;
          }
          ++v51;
          --v49;
          ++v52;
        }
        while (v51 < v50);
      }
    }
    else
    {
      v4 = v137;
    }
LABEL_39:
    if (v16 < v4)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_145;
      if (v16 - v15 < v7)
        break;
    }
LABEL_60:
    if (v16 < v15)
      goto LABEL_140;
    v72 = v11;
    v136 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) != 0)
      v11 = v72;
    else
      v11 = sub_1001D4DF0(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
    v74 = *((_QWORD *)v11 + 2);
    v73 = *((_QWORD *)v11 + 3);
    v14 = v74 + 1;
    if (v74 >= v73 >> 1)
      v11 = sub_1001D4DF0((char *)(v73 > 1), v74 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v14;
    v140 = v11 + 32;
    v75 = &v11[16 * v74 + 32];
    *(_QWORD *)v75 = v15;
    *((_QWORD *)v75 + 1) = v136;
    if (v74)
    {
      v76 = v11 + 32;
      while (1)
      {
        v77 = v14 - 1;
        if (v14 >= 4)
        {
          v82 = &v76[16 * v14];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_129;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_130;
          v89 = v14 - 2;
          v90 = &v76[16 * v14 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_132;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_135;
          if (v94 >= v85)
          {
            v112 = &v76[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_139;
            v105 = v80 < v115;
            goto LABEL_98;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v106 = *((_QWORD *)v11 + 4);
            v107 = *((_QWORD *)v11 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_92;
          }
          v79 = *((_QWORD *)v11 + 4);
          v78 = *((_QWORD *)v11 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_131;
        v89 = v14 - 2;
        v95 = &v76[16 * v14 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_134;
        v101 = &v76[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_137;
        if (__OFADD__(v99, v104))
          goto LABEL_138;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_98:
          if (v105)
            v77 = v89;
          goto LABEL_100;
        }
LABEL_92:
        if ((v100 & 1) != 0)
          goto LABEL_133;
        v108 = &v76[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_136;
        if (v111 < v99)
          goto LABEL_14;
LABEL_100:
        v116 = v77 - 1;
        if (v77 - 1 >= v14)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!v13)
          goto LABEL_151;
        v117 = v11;
        v118 = &v76[16 * v116];
        v119 = v76;
        v120 = *(_QWORD *)v118;
        v121 = &v119[16 * v77];
        v122 = *((_QWORD *)v121 + 1);
        sub_100431740((void **)(v13 + 8 * *(_QWORD *)v118), (void **)(v13 + 8 * *(_QWORD *)v121), v13 + 8 * v122, __dst);
        if (v1)
          goto LABEL_123;
        if (v122 < v120)
          goto LABEL_126;
        if (v77 > *((_QWORD *)v117 + 2))
          goto LABEL_127;
        *(_QWORD *)v118 = v120;
        v76 = v140;
        *(_QWORD *)&v140[16 * v116 + 8] = v122;
        v123 = *((_QWORD *)v117 + 2);
        if (v77 >= v123)
          goto LABEL_128;
        v14 = v123 - 1;
        memmove(v121, v121 + 16, 16 * (v123 - 1 - v77));
        v11 = v117;
        *((_QWORD *)v117 + 2) = v123 - 1;
        if (v123 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v12 = v136;
    v4 = v137;
    if (v136 >= v137)
    {
      v2 = v1;
      if (v14 < 2)
        goto LABEL_123;
      goto LABEL_111;
    }
  }
  if (__OFADD__(v15, v7))
    goto LABEL_148;
  if (v15 + v7 >= v4)
    v54 = v4;
  else
    v54 = v15 + v7;
  if (v54 >= v15)
  {
    if (v16 != v54)
    {
      v132 = v11;
      v55 = v134 + 8 * v16;
      v135 = v54;
      do
      {
        v56 = *(void **)(v13 + 8 * v16);
        v57 = v15;
        v58 = v55;
        while (1)
        {
          v59 = v16;
          v60 = *(void **)v58;
          v61 = v56;
          v62 = v60;
          objc_msgSend(v61, "support");
          v64 = v63;
          objc_msgSend(v62, "support");
          if (v64 == v65)
          {
            objc_msgSend(v61, "confidence");
            v67 = v66;
            objc_msgSend(v62, "confidence");
          }
          else
          {
            objc_msgSend(v61, "support");
            v67 = v69;
            objc_msgSend(v62, "support");
          }
          v70 = v68;

          if (v70 >= v67)
            break;
          if (!v13)
            goto LABEL_150;
          v16 = v59;
          v71 = *(void **)v58;
          v56 = *(void **)(v58 + 8);
          *(_QWORD *)v58 = v56;
          *(_QWORD *)(v58 + 8) = v71;
          v58 -= 8;
          if (v59 == ++v57)
            goto LABEL_50;
        }
        v16 = v59;
LABEL_50:
        ++v16;
        v55 += 8;
        v15 = v139;
      }
      while (v16 != v135);
      v16 = v135;
      v11 = v132;
    }
    goto LABEL_60;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1004312A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

void sub_100431374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = a1;
    v9 = v6;
    while (1)
    {
      v10 = *(void **)v9;
      v11 = v7;
      v12 = v10;
      objc_msgSend(v11, "support");
      v14 = v13;
      objc_msgSend(v12, "support");
      if (v14 == v15)
      {
        objc_msgSend(v11, "confidence");
        v17 = v16;
        objc_msgSend(v12, "confidence");
      }
      else
      {
        objc_msgSend(v11, "support");
        v17 = v19;
        objc_msgSend(v12, "support");
      }
      v20 = v18;

      if (v20 >= v17)
      {
LABEL_4:
        ++v4;
        v6 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v21 = *(void **)v9;
      v7 = *(void **)(v9 + 8);
      *(_QWORD *)v9 = v7;
      *(_QWORD *)(v9 + 8) = v21;
      v9 -= 8;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1004314A8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_1001D4FB4((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100431740(void **__src, void **a2, unint64_t a3, void **__dst)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id *v26;
  id *v27;
  id *v28;
  id *v29;
  char *v30;
  void *v31;
  id v32;
  id v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void **v42;
  uint64_t result;
  void **v44;
  char *v45;
  void **v46;
  void **v47;

  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v47 = __src;
  v46 = __dst;
  v44 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v44;
      }
      v27 = &__dst[v12];
      v45 = (char *)v27;
      v47 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        v28 = (id *)(a3 - 8);
        v29 = v5;
        while (1)
        {
          v30 = (char *)(v28 + 1);
          v31 = *--v29;
          v32 = *(v27 - 1);
          v33 = v31;
          objc_msgSend(v32, "support");
          v35 = v34;
          objc_msgSend(v33, "support");
          if (v35 == v36)
          {
            objc_msgSend(v32, "confidence");
            v38 = v37;
            objc_msgSend(v33, "confidence");
          }
          else
          {
            objc_msgSend(v32, "support");
            v38 = v40;
            objc_msgSend(v33, "support");
          }
          v41 = v39;

          if (v41 >= v38)
          {
            v45 = (char *)(v27 - 1);
            v42 = v44;
            if (v30 < (char *)v27 || v28 >= v27 || v30 != (char *)v27)
              *v28 = *(v27 - 1);
            v29 = v5;
            --v27;
            if (v5 <= v6)
              goto LABEL_49;
          }
          else
          {
            v42 = v44;
            if (v30 != (char *)v5 || v28 >= v5)
              *v28 = *v29;
            v47 = v29;
            if (v29 <= v6)
              goto LABEL_49;
          }
          --v28;
          v5 = v29;
          if (v27 <= v42)
            goto LABEL_49;
        }
      }
      goto LABEL_49;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v44;
    }
    v13 = &__dst[v9];
    v45 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      do
      {
        v14 = __dst;
        v15 = *__dst;
        v16 = *v5;
        v17 = v15;
        objc_msgSend(v16, "support");
        v19 = v18;
        objc_msgSend(v17, "support");
        if (v19 == v20)
        {
          objc_msgSend(v16, "confidence");
          v22 = v21;
          objc_msgSend(v17, "confidence");
        }
        else
        {
          objc_msgSend(v16, "support");
          v22 = v24;
          objc_msgSend(v17, "support");
        }
        v25 = v23;

        if (v25 >= v22)
        {
          if (v6 != v14)
            *v6 = *v14;
          __dst = v14 + 1;
          v46 = v14 + 1;
          v26 = v5;
        }
        else
        {
          v26 = v5 + 1;
          if (v6 < v5 || v6 >= v26 || v6 != v5)
            *v6 = *v5;
          __dst = v14;
        }
        ++v6;
        if (__dst >= v13)
          break;
        v5 = v26;
      }
      while ((unint64_t)v26 < a3);
      v47 = v6;
    }
LABEL_49:
    sub_1001D4FA4(&v47, &v46, &v45);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100431AD8(uint64_t a1, void *a2, double *a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  char v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = &_swiftEmptySetSingleton;
    v30 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = a2;
    v9 = __CocoaSet.makeIterator()(v7);
    v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      v11 = v10;
      v27 = v8;
      v6 = (void *)sub_1000151B0(0, &qword_10083FEB0, BMRule_ptr);
      do
      {
        v28 = v11;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
        v13 = sub_1004334AC(&v29, a3);
        if (v3)
        {
          swift_release(v9);

          v26 = v30;
          swift_release(v26);
          return (Swift::Int)v6;
        }
        v14 = v29;
        if ((v13 & 1) != 0)
        {
          v15 = v30;
          v16 = v30[2];
          if (v30[3] <= v16)
          {
            sub_1002E0430(v16 + 1);
            v15 = v30;
          }
          result = NSObject._rawHashValue(seed:)(v15[5]);
          v17 = v15 + 7;
          v18 = -1 << *((_BYTE *)v15 + 32);
          v19 = result & ~v18;
          v20 = v19 >> 6;
          if (((-1 << v19) & ~v15[(v19 >> 6) + 7]) != 0)
          {
            v21 = __clz(__rbit64((-1 << v19) & ~v15[(v19 >> 6) + 7])) | v19 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v22 = 0;
            v23 = (unint64_t)(63 - v18) >> 6;
            do
            {
              if (++v20 == v23 && (v22 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v24 = v20 == v23;
              if (v20 == v23)
                v20 = 0;
              v22 |= v24;
              v25 = v17[v20];
            }
            while (v25 == -1);
            v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          }
          *(_QWORD *)((char *)v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(_QWORD *)(v15[6] + 8 * v21) = v14;
          ++v15[2];
        }
        else
        {

        }
        v11 = __CocoaSet.Iterator.next()(result);
      }
      while (v11);
      v6 = v30;
      v8 = v27;
    }

    swift_release(v9);
  }
  else
  {
    v6 = (void *)sub_100433DF8(a1, a2, a3);

  }
  return (Swift::Int)v6;
}

uint64_t sub_100431D4C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_100431E9C((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    sub_100431E9C((unint64_t *)v9, v6, v2);
    v2 = v10;
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

void sub_100431E9C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = 0;
  v4 = 0;
  v31 = a3;
  v7 = *(_QWORD *)(a3 + 64);
  v5 = a3 + 64;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v25 = v5;
  v26 = (unint64_t)(v8 + 63) >> 6;
LABEL_4:
  v24 = v3;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v4 << 6);
LABEL_19:
    v16 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v12);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v12);
    v29 = *v16;
    v30 = v18;
    v27 = 0xD00000000000001FLL;
    v28 = 0x80000001007041B0;
    v20 = sub_1000E525C();
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    if ((StringProtocol.contains<A>(_:)(&v27, &type metadata for String, &type metadata for String, v20, v20) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = v17;
      v30 = v18;
      v27 = 0xD00000000000001FLL;
      v28 = 0x80000001007041D0;
      v21 = StringProtocol.contains<A>(_:)(&v27, &type metadata for String, &type metadata for String, v20, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        v3 = v24 + 1;
        if (!__OFADD__(v24, 1))
          goto LABEL_4;
        __break(1u);
LABEL_29:
        sub_1004B25B4(a1, a2, v24, v31);
        return;
      }
    }
  }
  if (__OFADD__(v4++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v4 >= v26)
    goto LABEL_29;
  v14 = *(_QWORD *)(v25 + 8 * v4);
  if (v14)
  {
LABEL_18:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_19;
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v26)
    goto LABEL_29;
  v14 = *(_QWORD *)(v25 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v4 + 2;
  if (v4 + 2 >= v26)
    goto LABEL_29;
  v14 = *(_QWORD *)(v25 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v4 + 3;
  if (v4 + 3 >= v26)
    goto LABEL_29;
  v14 = *(_QWORD *)(v25 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v26)
      goto LABEL_29;
    v14 = *(_QWORD *)(v25 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100432130()
{
  return type metadata accessor for RDCoreBehaviorModel(0);
}

uint64_t type metadata accessor for RDCoreBehaviorModel(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_10084A6E0, (uint64_t)&nominal type descriptor for RDCoreBehaviorModel);
}

void sub_10043214C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = &unk_1006BC3A0;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[4] = "\b";
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100432208(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

void sub_100432208(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10084A6F0[0])
  {
    v2 = sub_1000151B0(255, &qword_10083FEB0, BMRule_ptr);
    v3 = type metadata accessor for OrderedDictionary(a1, &type metadata for String, v2, &protocol witness table for String);
    if (!v4)
      atomic_store(v3, qword_10084A6F0);
  }
}

uint64_t sub_10043227C()
{
  return type metadata accessor for RDCoreBehaviorModelTrainingDelegate(0);
}

uint64_t type metadata accessor for RDCoreBehaviorModelTrainingDelegate(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_10084A838, (uint64_t)&nominal type descriptor for RDCoreBehaviorModelTrainingDelegate);
}

uint64_t sub_100432298(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for REMSuggestedAttributeInputDataFrame(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "\b";
    v5[2] = "\b";
    v5[3] = " ";
    result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Result(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Result(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Result()
{
  return &type metadata for RDCoreBehaviorModel.Result;
}

unint64_t sub_100432374()
{
  unint64_t result;

  result = qword_10084A848;
  if (!qword_10084A848)
  {
    result = swift_getWitnessTable(&unk_1006BC454, &type metadata for RDCoreBehaviorModel.Feedback);
    atomic_store(result, (unint64_t *)&qword_10084A848);
  }
  return result;
}

uint64_t sub_1004323B8(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  double v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_26;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v38 = _swiftEmptyArrayStorage;
  result = sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v5 = v38;
    v31 = v3 & 0xC000000000000001;
    v32 = v3;
    while (1)
    {
      if (v4 == v7)
      {
        __break(1u);
LABEL_26:
        if (v3 < 0)
          v30 = v3;
        else
          v30 = v3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v3);
        v4 = _CocoaArrayWrapper.endIndex.getter(v30);
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      if (v31)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v3);
      else
        v8 = *(id *)(v3 + 8 * v7 + 32);
      v9 = v8;
      v36 = 0;
      v37 = 0xE000000000000000;
      v10 = objc_msgSend(v8, "type");
      v11 = objc_msgSend(v10, "identifier");

      if (v11)
      {
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

      }
      else
      {
        v14 = (void *)0xE300000000000000;
        v12 = 7104878;
      }
      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 58;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      if (!a2)
        goto LABEL_20;
      if ((sub_10042B440(v9, 4) & 1) == 0)
        goto LABEL_20;
      v33 = objc_msgSend(v9, "value");
      if (!swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6))goto LABEL_20;
      if (!*(_QWORD *)(a2 + 16))
        break;
      v18 = sub_10001A6DC(v34, (uint64_t)v35);
      if ((v19 & 1) == 0)
        break;
      v20 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v18);
      v21 = *v20;
      v22 = (void *)v20[1];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease();
LABEL_21:
      v24._countAndFlagsBits = v21;
      v24._object = v22;
      String.append(_:)(v24);

      swift_bridgeObjectRelease();
      v25 = v36;
      v26 = v37;
      v38 = v5;
      v28 = v5[2];
      v27 = v5[3];
      if (v28 >= v27 >> 1)
      {
        sub_1001C1B0C(v27 > 1, v28 + 1, 1);
        v5 = v38;
      }
      ++v7;
      v5[2] = v28 + 1;
      v29 = &v5[2 * v28];
      v29[4] = v25;
      v29[5] = v26;
      v3 = v32;
      if (v4 == v7)
        return (uint64_t)v5;
    }
    *(_QWORD *)&v17 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_20:
    v34 = 0;
    v35 = (void *)0xE000000000000000;
    v23 = objc_msgSend(v9, "value", v17);
    v33 = v23;
    _print_unlocked<A, B>(_:_:)(&v33, &v34, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    swift_unknownObjectRelease(v23);
    v21 = v34;
    v22 = v35;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_1004326C8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;

  if (a3 < a2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    if (v3 > 1)
      goto LABEL_11;
LABEL_12:
    __break(1u);
    return;
  }
  v3 = a3;
  swift_bridgeObjectRetain(a1);
  if (a2 == v3)
    return;
  if (a2 >= v3)
    goto LABEL_12;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (a2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = a1;
  swift_retain();
  sub_10042FBB8(&v7, &v6);
  swift_bridgeObjectRelease();
  swift_release(0);
  if (v3 != 1)
    goto LABEL_10;
}

uint64_t sub_100432784()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[96];

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v0, v13);
  *(_OWORD *)(inited + 16) = xmmword_1006B3750;
  sub_10042EBAC(4);
  *(_QWORD *)(inited + 32) = v2;
  sub_10042EBAC(5);
  *(_QWORD *)(inited + 40) = v3;
  sub_10042EBAC(6);
  *(_QWORD *)(inited + 48) = v4;
  sub_10042EBAC(7);
  *(_QWORD *)(inited + 56) = v5;
  sub_10042EBAC(8);
  *(_QWORD *)(inited + 64) = v6;
  sub_10042EBAC(9);
  *(_QWORD *)(inited + 72) = v7;
  sub_10042EBAC(10);
  *(_QWORD *)(inited + 80) = v8;
  sub_10042EBAC(11);
  *(_QWORD *)(inited + 88) = v9;
  specialized Array._endMutation()(v9);
  sub_10011F70C(inited);
  v11 = v10;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100432850()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[88];

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v0, v12);
  *(_OWORD *)(inited + 16) = xmmword_1006BC320;
  sub_10042EBAC(4);
  *(_QWORD *)(inited + 32) = v2;
  sub_10042EBAC(6);
  *(_QWORD *)(inited + 40) = v3;
  sub_10042EBAC(5);
  *(_QWORD *)(inited + 48) = v4;
  sub_10042EBAC(8);
  *(_QWORD *)(inited + 56) = v5;
  sub_10042EBAC(9);
  *(_QWORD *)(inited + 64) = v6;
  sub_10042EBAC(10);
  *(_QWORD *)(inited + 72) = v7;
  sub_10042EBAC(11);
  *(_QWORD *)(inited + 80) = v8;
  specialized Array._endMutation()(v8);
  sub_10011F70C(inited);
  v10 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

void sub_100432910(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  _QWORD *v37;
  _BYTE v38[24];
  _QWORD *v39;

  v3 = v2;
  v4 = a1;
  v39 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_23:
    if (v4 < 0)
      v26 = v4;
    else
      v26 = v4 & 0xFFFFFFFFFFFFFF8;
    v5 = _CocoaArrayWrapper.endIndex.getter(v26);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess(a2, v38, 0, 0);
  if (v5)
  {
    v6 = 0;
    v30 = v4 & 0xFFFFFFFFFFFFFF8;
    v31 = v4 & 0xC000000000000001;
    v27 = v4;
    v28 = v5;
    v29 = v4 + 32;
    while (1)
    {
      if (v31)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v27);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v30 + 16))
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        v7 = *(id *)(v29 + 8 * v6);
      }
      if (__OFADD__(v6++, 1))
        goto LABEL_22;
      v9 = *a2;
      v33 = v7;
      v10 = objc_msgSend(v7, "antecedent", swift_bridgeObjectRetain(*a2).n128_f64[0]);
      v11 = sub_10001A630(&qword_100844630);
      v12 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
      v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

      v37 = _swiftEmptyArrayStorage;
      v14 = *(_QWORD *)(v9 + 16);
      if (v14)
        break;
      v19 = _swiftEmptyArrayStorage;
LABEL_17:
      sub_10011FB8C((uint64_t)v19);
      v21 = v20;
      swift_bridgeObjectRelease();
      sub_10040DEE0(v21, v13);
      v4 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v4 & 1) != 0)
      {
        v4 = (uint64_t)&v39;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        v24 = v39[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v33);
        specialized ContiguousArray._endMutation()(v25);
      }
      else
      {

      }
      if (v6 == v5)
        return;
    }
    swift_bridgeObjectRetain(v9);
    v15 = (char *)(v9 + 48);
    while (1)
    {
      v16 = *((_QWORD *)v15 - 2);
      v17 = *((_QWORD *)v15 - 1);
      v18 = *v15;
      v35[0] = v16;
      v35[1] = v17;
      v36 = v18;
      sub_100435540(v16, v17, v18);
      sub_10042F118((uint64_t)v35);
      if (v3)
        break;
      v3 = 0;
      v15 += 24;
      sub_100435578(v16, v17, v18);
      sub_1001E3830(v34);
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v19 = v37;
        v5 = v28;
        goto LABEL_17;
      }
    }
    sub_100435578(v16, v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
  }
}

void sub_100432BD0(uint64_t a1, char a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  int64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  unsigned __int8 v43;
  _QWORD v44[6];
  void *v45;

  v5 = v4;
  v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = sub_10001A630(&qword_100844630);
    v11 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v44, v9, v10, v11);
    v7 = v44[0];
    v35 = v44[1];
    v13 = v44[2];
    v14 = v44[3];
    v15 = v44[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v34 = (unint64_t)(v13 + 64) >> 6;
  v19 = _swiftEmptyArrayStorage;
  v36 = a2 & 1;
  while (v7 < 0)
  {
    v24 = (void *)__CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v24)
      goto LABEL_44;
    v25 = v24;
    v45 = v24;
    swift_unknownObjectRetain(v24);
    v26 = sub_10001A630(&qword_100844630);
    swift_dynamicCast(v42, &v45, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
    v27 = *(id *)&v42[0];
    swift_unknownObjectRelease(v25);
    v23 = v14;
    v21 = v15;
    if (!v27)
      goto LABEL_44;
LABEL_31:
    v45 = v27;
    sub_10042AE80(&v45, v36, a3, a4, (uint64_t)v42);
    if (v5)
    {

      sub_1000C6560(v7);
      swift_bridgeObjectRelease();
      return;
    }

    v30 = v43;
    if (v43 != 255)
    {
      v40 = v42[1];
      v41 = v42[0];
      v39 = v42[2];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002CA0D4(0, v19[2] + 1, 1, v19);
        v19 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v32 = v19[2];
      v31 = v19[3];
      if (v32 >= v31 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002CA0D4((_QWORD *)(v31 > 1), v32 + 1, 1, v19);
        v19 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v19[2] = v32 + 1;
      v20 = &v19[7 * v32];
      *((_OWORD *)v20 + 2) = v41;
      *((_OWORD *)v20 + 3) = v40;
      *((_OWORD *)v20 + 4) = v39;
      *((_BYTE *)v20 + 80) = v30;
    }
    v14 = v23;
    v15 = v21;
  }
  if (v15)
  {
    v21 = (v15 - 1) & v15;
    v22 = __clz(__rbit64(v15)) | (v14 << 6);
    v23 = v14;
LABEL_30:
    v27 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v22);
    if (!v27)
      goto LABEL_44;
    goto LABEL_31;
  }
  v23 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v23 >= v34)
      goto LABEL_44;
    v28 = *(_QWORD *)(v35 + 8 * v23);
    if (!v28)
    {
      v29 = v14 + 2;
      if (v14 + 2 >= v34)
        goto LABEL_44;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
        goto LABEL_28;
      v29 = v14 + 3;
      if (v14 + 3 >= v34)
        goto LABEL_44;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
        goto LABEL_28;
      v29 = v14 + 4;
      if (v14 + 4 >= v34)
        goto LABEL_44;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
      {
LABEL_28:
        v23 = v29;
      }
      else
      {
        v23 = v14 + 5;
        if (v14 + 5 >= v34)
          goto LABEL_44;
        v28 = *(_QWORD *)(v35 + 8 * v23);
        if (!v28)
        {
          v33 = v14 + 6;
          while (v34 != v33)
          {
            v28 = *(_QWORD *)(v35 + 8 * v33++);
            if (v28)
            {
              v23 = v33 - 1;
              goto LABEL_29;
            }
          }
LABEL_44:
          sub_1000C6560(v7);
          return;
        }
      }
    }
LABEL_29:
    v21 = (v28 - 1) & v28;
    v22 = __clz(__rbit64(v28)) + (v23 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

unint64_t *sub_100432F8C(unint64_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = a4 + -2592000.0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v11)
      return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v11)
        return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
      v16 = *(_QWORD *)(v7 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v11)
          return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
        v16 = *(_QWORD *)(v7 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    if (v12 < *(double *)(*(_QWORD *)(a3 + 48) + 8 * v14))
    {
      *(unint64_t *)((char *)result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v11)
    return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)sub_1004B209C(result, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *sub_1004330E8(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v2;
  unint64_t *v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *v10;
  void *v11;
  uint64_t v13;

  v4 = (unint64_t *)isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_100432F8C((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, (uint64_t)v4, a2);
    if (v2)
      swift_willThrow(v10);
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    v4 = sub_100432F8C((unint64_t *)v11, v8, (uint64_t)v4, a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v4;
}

uint64_t sub_10043324C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100703EE0)
  {
    swift_bridgeObjectRelease(0x8000000100703EE0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100703EE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100433338(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v3 = sub_10001A630(&qword_10084A958);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000A388(a1, v7);
  v9 = sub_100435C04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDCoreBehaviorModel.Feedback.CodingKeys, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v16 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v10 = sub_10001A630(&qword_10084A938);
    v14 = 1;
    v11 = sub_100435CCC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v10, &v14, v3, v10, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  return v7;
}

uint64_t sub_1004334AC(id *a1, double *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  double v48;
  double v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *a1;
  v4 = objc_msgSend(*a1, "consequent");
  v5 = sub_10001A630(&qword_100844630);
  v6 = sub_1000A5F84(&qword_10084A690, &qword_100844630, (uint64_t)&protocol conformance descriptor for NSObject);
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  if ((v7 & 0xC000000000000001) != 0)
  {
    if (v7 < 0)
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 16);
  }
  *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  if (v9 > 1)
    return 0;
  v50 = a2;
  v12 = objc_msgSend(v3, "antecedent", v10);
  v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v5, v6);

  v60 = sub_1004287D8(v13, 0xD000000000000016, 0x8000000100704060, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v14 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v14, v5, v6);

  v59 = sub_1004287D8(v15, 0xD000000000000016, 0x8000000100704060, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v16 = objc_msgSend(v3, "antecedent", swift_bridgeObjectRelease().n128_f64[0]);
  v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v5, v6);

  v56 = sub_1004287D8(v17, 0xD000000000000014, 0x8000000100703FC0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v18 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v18, v5, v6);

  v55 = sub_1004287D8(v19, 0xD000000000000014, 0x8000000100703FC0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v20 = objc_msgSend(v3, "antecedent", swift_bridgeObjectRelease().n128_f64[0]);
  v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v5, v6);

  v58 = sub_1004287D8(v21, 0xD00000000000001ALL, 0x8000000100704040, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v22 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v23 = v5;
  v24 = v6;
  v25 = v5;
  v26 = v24;
  v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v23, v24);

  v57 = sub_1004287D8(v27, 0xD00000000000001ALL, 0x8000000100704040, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v28 = objc_msgSend(v3, "antecedent", swift_bridgeObjectRelease().n128_f64[0]);
  v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v25, v26);

  v54 = sub_1004287D8(v29, 0x7265646E696D6552, 0xEF64656767616C46, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v30 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v30, v25, v26);

  v53 = sub_1004287D8(v31, 0x7265646E696D6552, 0xEF64656767616C46, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v32 = objc_msgSend(v3, "antecedent", swift_bridgeObjectRelease().n128_f64[0]);
  v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v32, v25, v26);

  v52 = sub_1004287D8(v33, 0xD000000000000010, 0x8000000100704000, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v34 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v34, v25, v26);

  v51 = sub_1004287D8(v35, 0xD000000000000010, 0x8000000100704000, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  v36 = objc_msgSend(v3, "antecedent", swift_bridgeObjectRelease().n128_f64[0]);
  v37 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v36, v25, v26);

  v38 = sub_1004287D8(v37, 0xD000000000000014, 0x8000000100703FE0, (unint64_t *)&unk_10083FE30, NSString_ptr);
  v39 = objc_msgSend(v3, "consequent", swift_bridgeObjectRelease().n128_f64[0]);
  v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v39, v25, v26);

  v41 = sub_1004287D8(v40, 0xD000000000000014, 0x8000000100703FE0, (unint64_t *)&unk_10083FE30, NSString_ptr);
  *(_QWORD *)&v42 = swift_bridgeObjectRelease().n128_u64[0];
  result = 0;
  if (v60 <= 1 && v59 <= 1)
  {
    result = 0;
    v43 = v60 <= 0 || v59 <= 0;
    if (v43 && v58 <= 1 && v57 <= 1)
    {
      result = 0;
      v44 = v58 <= 0 || v57 <= 0;
      if (v44 && v56 <= 1 && v55 <= 1)
      {
        result = 0;
        v45 = v56 <= 0 || v55 <= 0;
        if (v45 && v54 <= 1 && v53 <= 1)
        {
          result = 0;
          v46 = v54 <= 0 || v53 <= 0;
          if (v46 && v52 <= 1 && v51 <= 1)
          {
            result = 0;
            v47 = v52 <= 0 || v51 <= 0;
            if (v47 && v38 <= 1 && v41 <= 1)
            {
              if (v41 >= 1 && v38 > 0)
                return 0;
              v48 = *v50;
              objc_msgSend(v3, "support", v42);
              if (v49 >= v48)
                v49 = v48;
              *v50 = v49;
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100433C14(unint64_t *a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  id v17;
  char v18;
  uint64_t v21;
  int64_t v22;
  id v23;

  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v21 = 0;
  v22 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v13 = v12 | (v7 << 6);
LABEL_17:
    v23 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v13);
    v17 = v23;
    v18 = sub_1004334AC(&v23, a4);

    if (v4)
      return;
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = __OFADD__(v21++, 1);
      if (v14)
        goto LABEL_30;
    }
  }
  v14 = __OFADD__(v7++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v22)
    goto LABEL_26;
  v15 = *(_QWORD *)(v8 + 8 * v7);
  if (v15)
  {
LABEL_16:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_17;
  }
  v16 = v7 + 1;
  if (v7 + 1 >= v22)
    goto LABEL_26;
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
    goto LABEL_15;
  v16 = v7 + 2;
  if (v7 + 2 >= v22)
    goto LABEL_26;
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
    goto LABEL_15;
  v16 = v7 + 3;
  if (v7 + 3 >= v22)
  {
LABEL_26:
    swift_retain();
    sub_100218B64(a1, a2, v21, a3);
    return;
  }
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_15:
    v7 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v22)
      goto LABEL_26;
    v15 = *(_QWORD *)(v8 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_100433DF8(uint64_t a1, void *a2, double *a3)
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t isStackAllocationSafe;
  void *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;

  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  isStackAllocationSafe = a2;
  v10 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v11 = (char *)&v20 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v11, 8 * v8);
    v12 = v10;
    sub_100433C14((unint64_t *)v11, v8, a1, a3);
    v14 = v13;
    swift_release(a1);

    if (v3)
      swift_willThrow(v15);

  }
  else
  {
    v16 = (void *)swift_slowAlloc(8 * v8, -1);
    bzero(v16, 8 * v8);
    v17 = v10;
    sub_100433C14((unint64_t *)v16, v8, a1, a3);
    v14 = v18;
    swift_release(a1);

    swift_slowDealloc(v16, -1, -1);
  }
  return v14;
}

Swift::Int sub_100433FA8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = 0x3FF0000000000000;
  v4 = v1;
  swift_bridgeObjectRetain(a1);
  v6 = sub_100431AD8(v5, v4, (double *)&v26);
  v7 = v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
    v10 = v7 & 0xC000000000000001;
    if ((v7 & 0xC000000000000001) != 0)
    {
LABEL_6:
      v11 = __CocoaSet.count.getter(v7);
      v12 = v9 - v11;
      if (!__OFSUB__(v9, v11))
        goto LABEL_7;
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = v6 & 0xC000000000000001;
    if ((v6 & 0xC000000000000001) != 0)
      goto LABEL_6;
  }
  v21 = *(_QWORD *)(v7 + 16);
  v12 = v9 - v21;
  if (__OFSUB__(v9, v21))
    goto LABEL_19;
LABEL_7:
  v13 = (char *)v4 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics;
  v14 = *(uint64_t *)((char *)&v4[1].isa + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_metrics);
  v15 = __OFADD__(v14, v12);
  v16 = v14 + v12;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *((_QWORD *)v13 + 1) = v16;
    *((_QWORD *)v13 + 2) = v26;
    if (qword_1008374D8 == -1)
      goto LABEL_9;
  }
  swift_once(&qword_1008374D8, sub_10042ABBC);
LABEL_9:
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084A670);
  swift_bridgeObjectRetain(a1);
  v18 = swift_retain();
  v4 = Logger.logObject.getter(v18);
  LOBYTE(v9) = static os_log_type_t.default.getter(v4);
  if (!os_log_type_enabled(v4, (os_log_type_t)v9))
  {

    swift_release(v7);
    swift_bridgeObjectRelease();
    return v7;
  }
  v2 = swift_slowAlloc(22, -1);
  *(_DWORD *)v2 = 134218240;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    v20 = __CocoaSet.count.getter(v19);
    goto LABEL_21;
  }
LABEL_20:
  v20 = *(_QWORD *)(a1 + 16);
LABEL_21:
  v24 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
  swift_bridgeObjectRelease();
  *(_WORD *)(v2 + 12) = 2048;
  if (v10)
    v22 = __CocoaSet.count.getter(v7);
  else
    v22 = *(_QWORD *)(v7 + 16);
  v24 = v22;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
  swift_release(v7);
  _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v9, "RDCoreBehaviorModel: Filtered rules {rules.count: %ld, filtered.count: %ld}", (uint8_t *)v2, 0x16u);
  swift_slowDealloc(v2, -1, -1);

  return v7;
}

void sub_1004341E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  void (*v32)(uint64_t *, _QWORD);
  int64_t *v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  NSString v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  id v48;
  id v49;
  id v50;
  Class isa;
  Class v52;
  id v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSString v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  NSString v64;
  id v65;
  id v66;
  id v67;
  Class v68;
  Class v69;
  id v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  NSString v77;
  uint64_t v78;
  id v79;
  NSString v80;
  id v81;
  id v82;
  id v83;
  Class v84;
  Class v85;
  id v86;
  id v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  NSString v94;
  uint64_t v95;
  id v96;
  Class v97;
  id v98;
  id v99;
  id v100;
  Class v101;
  Class v102;
  id v103;
  id v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  NSString v109;
  uint64_t v110;
  id v111;
  Class v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  Class v117;
  id v118;
  id v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  NSString v124;
  uint64_t v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  Class v131;
  Class v132;
  id v133;
  id v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  uint64_t v150;
  void *v151;
  NSString v152;
  uint64_t v153;
  id v154;
  NSString v155;
  id v156;
  id v157;
  id v158;
  Class v159;
  Class v160;
  id v161;
  id v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  NSString v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  NSString v174;
  id v175;
  id v176;
  id v177;
  Class v178;
  Class v179;
  id v180;
  id v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD v185[8];
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;

  v196 = type metadata accessor for Date(0);
  v199 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v201 = (char *)v185 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v202 = (char *)v185 - v3;
  v4 = sub_10001A630((uint64_t *)&unk_100840780);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100846C40);
  __chkstk_darwin(v8);
  v10 = (char *)v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v185 - v13;
  v204 = (unint64_t)_swiftEmptyArrayStorage;
  v191 = v0;
  v194 = v0 + OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_trainingDataFrame;
  REMSuggestedAttributeInputDataFrame.index.getter(v12);
  v193 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v193(v10, v7, v4);
  v15 = v4;
  v16 = sub_1000A5F84(&qword_100846C50, (uint64_t *)&unk_100840780, (uint64_t)&protocol conformance descriptor for OrderedSet<A>);
  dispatch thunk of Collection.startIndex.getter(v15);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v195 = v7;
  v18 = (uint64_t)v14;
  v19 = v16;
  v192 = v17;
  v17(v7, v15);
  *(_QWORD *)&v10[*(int *)(v8 + 36)] = v203;
  sub_100435408((uint64_t)v10, v18);
  v20 = (_QWORD *)(v18 + *(int *)(v8 + 36));
  v190 = OBJC_IVAR____TtC7remindd35RDCoreBehaviorModelTrainingDelegate_intentWords;
  v21 = *v20;
  dispatch thunk of Collection.endIndex.getter(&v203, v15, v16);
  if (v21 == v203)
    goto LABEL_65;
  v185[5] = 0x8000000100704060;
  v185[4] = 0x8000000100704040;
  v185[2] = 0x8000000100703FE0;
  v185[6] = 0x8000000100704000;
  v185[3] = 0x8000000100703FC0;
  v185[7] = 0x8000000100704020;
  v22 = v196;
  v23 = v18;
  v24 = v15;
  v26 = v201;
  v25 = v202;
  v188 = v16;
  v189 = v24;
  v186 = v18;
  v187 = v20;
  while (2)
  {
    v32 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v203, v20, v24, v19);
    v34 = *v33;
    v32(&v203, 0);
    v35 = v195;
    v193(v195, (char *)v23, v24);
    dispatch thunk of Collection.formIndex(after:)(v20, v24, v19);
    v192(v35, v24);
    v200 = v34;
    v36 = REMSuggestedAttributeInputDataFrame.iloc(_:)(v34);
    REMSuggestedAttributeInput.creationDate.getter();
    v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v199 + 16))(v26, v25, v22);
    v38 = REMSuggestedAttributeInput.list.getter(v37);
    v39 = REMSuggestedList.isValid.getter(v38);
    v40 = swift_release(v38);
    if ((v39 & 1) != 0)
    {
      v41 = (void *)objc_opt_self(BMItemType);
      v42 = String._bridgeToObjectiveC()();
      v43 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      v44 = objc_msgSend(v41, "taskSpecificItemWithIdentifier:valueClass:", v42, swift_getObjCClassFromMetadata(v43));

      if (!v44)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      v46 = REMSuggestedAttributeInput.list.getter(v45);
      REMSuggestedList.listIdentifier.getter(v46);
      swift_release(v46);
      v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v48 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v44, v47);

      v49 = objc_allocWithZone((Class)BMEvent);
      v50 = v48;
      isa = Date._bridgeToObjectiveC()().super.isa;
      v52 = Date._bridgeToObjectiveC()().super.isa;
      v53 = objc_msgSend(v49, "initWithStartDate:endDate:item:", isa, v52, v50);

      v54 = v53;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
      v56 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v55 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v56 >= v55 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1);
      v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
      specialized Array._endMutation()(v57);

    }
    v58 = REMSuggestedAttributeInput.location.getter(v40);
    if ((REMSuggestedLocation.isSpecificLocation.getter() & 1) != 0)
    {
      v59 = (void *)objc_opt_self(BMItemType);
      v60 = String._bridgeToObjectiveC()();
      v61 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      v62 = objc_msgSend(v59, "taskSpecificItemWithIdentifier:valueClass:", v60, swift_getObjCClassFromMetadata(v61));

      if (!v62)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      v63 = swift_retain();
      dispatch thunk of ClassificationLabel.description.getter(v63);
      swift_release(v58);
      v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v65 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v62, v64);

      v66 = objc_allocWithZone((Class)BMEvent);
      v67 = v65;
      v68 = Date._bridgeToObjectiveC()().super.isa;
      v69 = Date._bridgeToObjectiveC()().super.isa;
      v70 = objc_msgSend(v66, "initWithStartDate:endDate:item:", v68, v69, v67);

      v71 = v70;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
      v73 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v72 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v73 >= v72 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1);
      v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
      specialized Array._endMutation()(v74);

    }
    v75 = *(_QWORD *)(v191 + v190);
    if (v75)
    {
      v76 = (void *)objc_opt_self(BMItemType);
      swift_retain();
      v77 = String._bridgeToObjectiveC()();
      v78 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      v79 = objc_msgSend(v76, "taskSpecificItemWithIdentifier:valueClass:", v77, swift_getObjCClassFromMetadata(v78));

      if (!v79)
      {
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      dispatch thunk of Series.iloc(_:)(&v203, v200);
      v80 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v81 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v79, v80);

      v82 = objc_allocWithZone((Class)BMEvent);
      v83 = v81;
      v84 = Date._bridgeToObjectiveC()().super.isa;
      v85 = Date._bridgeToObjectiveC()().super.isa;
      v86 = objc_msgSend(v82, "initWithStartDate:endDate:item:", v84, v85, v83);

      v87 = v86;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
      v89 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v88 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v89 >= v88 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1);
      v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v87);
      specialized Array._endMutation()(v90);
      swift_release(v75);

    }
    v91 = REMSuggestedAttributeInput.dueDayOfWeek.getter();
    v92 = REMSuggestedWeekDay.value.getter();
    swift_release(v91);
    if ((unint64_t)(v92 - 8) >= 0xFFFFFFFFFFFFFFF9)
    {
      v93 = (void *)objc_opt_self(BMItemType);
      v94 = String._bridgeToObjectiveC()();
      v95 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v96 = objc_msgSend(v93, "taskSpecificItemWithIdentifier:valueClass:", v94, swift_getObjCClassFromMetadata(v95));

      if (!v96)
      {
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        return;
      }
      v97 = Int._bridgeToObjectiveC()().super.super.isa;
      v98 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:numberValue:", v96, v97);

      v99 = objc_allocWithZone((Class)BMEvent);
      v100 = v98;
      v101 = Date._bridgeToObjectiveC()().super.isa;
      v102 = Date._bridgeToObjectiveC()().super.isa;
      v103 = objc_msgSend(v99, "initWithStartDate:endDate:item:", v101, v102, v100);

      v104 = v103;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v104);
      v106 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v105 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v106 >= v105 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1);
      v107 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v104);
      specialized Array._endMutation()(v107);

    }
    if ((REMSuggestedAttributeInput.flagged.getter() & 1) != 0)
    {
      v108 = (void *)objc_opt_self(BMItemType);
      v109 = String._bridgeToObjectiveC()();
      v110 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      v111 = objc_msgSend(v108, "taskSpecificItemWithIdentifier:valueClass:", v109, swift_getObjCClassFromMetadata(v110));

      if (!v111)
        goto LABEL_74;
      v112 = NSNumber.init(integerLiteral:)(1).super.super.isa;
      v113 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:numberValue:", v111, v112);

      v114 = objc_allocWithZone((Class)BMEvent);
      v115 = v113;
      v116 = Date._bridgeToObjectiveC()().super.isa;
      v117 = Date._bridgeToObjectiveC()().super.isa;
      v118 = objc_msgSend(v114, "initWithStartDate:endDate:item:", v116, v117, v115);

      v119 = v118;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v119);
      v121 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v120 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v121 >= v120 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v120 > 1);
      v122 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v121, v119);
      specialized Array._endMutation()(v122);

    }
    if (!REMSuggestedAttributeInput.priority.getter())
      goto LABEL_35;
    v123 = (void *)objc_opt_self(BMItemType);
    v124 = String._bridgeToObjectiveC()();
    v125 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    v126 = objc_msgSend(v123, "taskSpecificItemWithIdentifier:valueClass:", v124, swift_getObjCClassFromMetadata(v125));

    if (!v126)
      goto LABEL_70;
    v127 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", REMSuggestedAttributeInput.priority.getter());
    v128 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:numberValue:", v126, v127);

    v129 = objc_allocWithZone((Class)BMEvent);
    v130 = v128;
    v131 = Date._bridgeToObjectiveC()().super.isa;
    v132 = Date._bridgeToObjectiveC()().super.isa;
    v133 = objc_msgSend(v129, "initWithStartDate:endDate:item:", v131, v132, v130);

    v134 = v133;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v134);
    v136 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v135 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v136 >= v135 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1);
    v137 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v136, v134);
    specialized Array._endMutation()(v137);

LABEL_35:
    v197 = v58;
    v198 = v36;
    v138 = REMSuggestedAttributeInput.tags.getter();
    v139 = v138;
    v140 = 0;
    v141 = v138 + 56;
    v142 = 1 << *(_BYTE *)(v138 + 32);
    if (v142 < 64)
      v143 = ~(-1 << v142);
    else
      v143 = -1;
    v144 = v143 & *(_QWORD *)(v138 + 56);
    v200 = (unint64_t)(v142 + 63) >> 6;
    if (v144)
    {
LABEL_39:
      v145 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      v146 = v145 | (v140 << 6);
      goto LABEL_54;
    }
    while (1)
    {
      v147 = v140 + 1;
      if (__OFADD__(v140, 1))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v147 >= v200)
        goto LABEL_59;
      v148 = *(_QWORD *)(v141 + 8 * v147);
      ++v140;
      if (!v148)
      {
        v140 = v147 + 1;
        if (v147 + 1 >= v200)
          goto LABEL_59;
        v148 = *(_QWORD *)(v141 + 8 * v140);
        if (!v148)
        {
          v140 = v147 + 2;
          if (v147 + 2 >= v200)
            goto LABEL_59;
          v148 = *(_QWORD *)(v141 + 8 * v140);
          if (!v148)
            break;
        }
      }
LABEL_53:
      v144 = (v148 - 1) & v148;
      v146 = __clz(__rbit64(v148)) + (v140 << 6);
LABEL_54:
      v150 = *(_QWORD *)(*(_QWORD *)(v139 + 48) + 16 * v146 + 8);
      v151 = (void *)objc_opt_self(BMItemType);
      swift_bridgeObjectRetain(v150);
      v152 = String._bridgeToObjectiveC()();
      v153 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      v154 = objc_msgSend(v151, "taskSpecificItemWithIdentifier:valueClass:", v152, swift_getObjCClassFromMetadata(v153));

      if (!v154)
        goto LABEL_68;
      v155 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v156 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v154, v155);

      v157 = objc_allocWithZone((Class)BMEvent);
      v158 = v156;
      v159 = Date._bridgeToObjectiveC()().super.isa;
      v160 = Date._bridgeToObjectiveC()().super.isa;
      v161 = objc_msgSend(v157, "initWithStartDate:endDate:item:", v159, v160, v158);

      v162 = v161;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v162);
      v164 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v163 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v164 >= v163 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1);
      v165 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v164, v162);
      specialized Array._endMutation()(v165);

      if (v144)
        goto LABEL_39;
    }
    v149 = v147 + 3;
    if (v149 < v200)
    {
      v148 = *(_QWORD *)(v141 + 8 * v149);
      if (!v148)
      {
        while (1)
        {
          v140 = v149 + 1;
          if (__OFADD__(v149, 1))
            goto LABEL_67;
          if (v140 >= v200)
            goto LABEL_59;
          v148 = *(_QWORD *)(v141 + 8 * v140);
          ++v149;
          if (v148)
            goto LABEL_53;
        }
      }
      v140 = v149;
      goto LABEL_53;
    }
LABEL_59:
    v166 = swift_release(v139);
    v167 = v198;
    v168 = REMSuggestedAttributeInput.contact.getter(v166);
    if ((REMSuggestedContact.isValid.getter() & 1) != 0)
    {
      v169 = (void *)objc_opt_self(BMItemType);
      v170 = String._bridgeToObjectiveC()();
      v171 = sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
      v172 = objc_msgSend(v169, "taskSpecificItemWithIdentifier:valueClass:", v170, swift_getObjCClassFromMetadata(v171));

      v27 = v199;
      if (!v172)
        goto LABEL_75;
      v173 = swift_retain();
      dispatch thunk of ClassificationLabel.description.getter(v173);
      swift_release(v168);
      v174 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v175 = objc_msgSend((id)objc_opt_self(BMItem), "itemWithType:stringValue:", v172, v174);

      v176 = objc_allocWithZone((Class)BMEvent);
      v177 = v175;
      v178 = Date._bridgeToObjectiveC()().super.isa;
      v179 = Date._bridgeToObjectiveC()().super.isa;
      v180 = objc_msgSend(v176, "initWithStartDate:endDate:item:", v178, v179, v177);

      v181 = v180;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v181);
      v183 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v182 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v183 >= v182 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v182 > 1);
      v184 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v183, v181);
      specialized Array._endMutation()(v184);
      swift_release(v168);

    }
    else
    {
      swift_release(v168);
      v27 = v199;
    }
    v23 = v186;
    swift_release(v197);
    swift_release(v167);
    v28 = *(void (**)(char *, uint64_t))(v27 + 8);
    v26 = v201;
    v22 = v196;
    v28(v201, v196);
    v25 = v202;
    v28(v202, v22);
    v20 = v187;
    v29 = v188;
    v30 = *v187;
    v24 = v189;
    dispatch thunk of Collection.endIndex.getter(&v203, v189, v188);
    v31 = v30 == v203;
    v19 = v29;
    if (!v31)
      continue;
    break;
  }
  v18 = v23;
LABEL_65:
  sub_100435450(v18);
}

uint64_t sub_100435408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100846C40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100435450(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_100846C40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100435490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084A860;
  if (!qword_10084A860)
  {
    v1 = sub_1000151B0(255, &qword_10083FEB0, BMRule_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10084A860);
  }
  return result;
}

unint64_t sub_1004354E8()
{
  unint64_t result;

  result = qword_10084A888;
  if (!qword_10084A888)
  {
    result = swift_getWitnessTable(&unk_1006BC42C, &type metadata for RDCoreBehaviorModel.Feedback);
    atomic_store(result, (unint64_t *)&qword_10084A888);
  }
  return result;
}

uint64_t sub_10043552C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != -1)
    return sub_1002562EC(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_100435540(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 4:
      result = swift_retain(result);
      break;
    case 1:
    case 2:
    case 5:
      result = swift_bridgeObjectRetain(a2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100435578(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 4:
      swift_release(a1);
      break;
    case 1:
    case 2:
    case 5:
      swift_bridgeObjectRelease(a2);
      break;
    default:
      return;
  }
}

uint64_t sub_1004355B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100435670()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10042CF94(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004356D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004356FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1004357B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10042D268(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t destroy for RDCoreBehaviorModel.Prediction(uint64_t a1)
{
  return sub_1002562EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_100256288(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_100256288(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_1002562EC(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for RDCoreBehaviorModel.Prediction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_1002562EC(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Prediction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Prediction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_100435A44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_100435A4C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Prediction()
{
  return &type metadata for RDCoreBehaviorModel.Prediction;
}

void destroy for RDCoreBehaviorModel.Context(uint64_t a1)
{
  sub_100435578(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7remindd19RDCoreBehaviorModelC7ContextOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100435540(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RDCoreBehaviorModel.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100435540(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100435578(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RDCoreBehaviorModel.Context(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100435578(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreBehaviorModel.Context(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 246;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Context()
{
  return &type metadata for RDCoreBehaviorModel.Context;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Feedback()
{
  return &type metadata for RDCoreBehaviorModel.Feedback;
}

unint64_t sub_100435C04()
{
  unint64_t result;

  result = qword_10084A930;
  if (!qword_10084A930)
  {
    result = swift_getWitnessTable(&unk_1006BC540, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084A930);
  }
  return result;
}

unint64_t sub_100435C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084A940;
  if (!qword_10084A940)
  {
    v1 = sub_1000A5A94(&qword_10084A938);
    sub_100435D50(&qword_10084A948, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084A940);
  }
  return result;
}

unint64_t sub_100435CCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084A960;
  if (!qword_10084A960)
  {
    v1 = sub_1000A5A94(&qword_10084A938);
    sub_100435D50(&qword_10084A968, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084A960);
  }
  return result;
}

